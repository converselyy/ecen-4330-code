                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _CY
                                     13 	.globl _AC
                                     14 	.globl _F0
                                     15 	.globl _RS1
                                     16 	.globl _RS0
                                     17 	.globl _OV
                                     18 	.globl _F1
                                     19 	.globl _P
                                     20 	.globl _PS
                                     21 	.globl _PT1
                                     22 	.globl _PX1
                                     23 	.globl _PT0
                                     24 	.globl _PX0
                                     25 	.globl _RD
                                     26 	.globl _WR
                                     27 	.globl _T1
                                     28 	.globl _T0
                                     29 	.globl _INT1
                                     30 	.globl _INT0
                                     31 	.globl _TXD
                                     32 	.globl _RXD
                                     33 	.globl _P3_7
                                     34 	.globl _P3_6
                                     35 	.globl _P3_5
                                     36 	.globl _P3_4
                                     37 	.globl _P3_3
                                     38 	.globl _P3_2
                                     39 	.globl _P3_1
                                     40 	.globl _P3_0
                                     41 	.globl _EA
                                     42 	.globl _ES
                                     43 	.globl _ET1
                                     44 	.globl _EX1
                                     45 	.globl _ET0
                                     46 	.globl _EX0
                                     47 	.globl _P2_7
                                     48 	.globl _P2_6
                                     49 	.globl _P2_5
                                     50 	.globl _P2_4
                                     51 	.globl _P2_3
                                     52 	.globl _P2_2
                                     53 	.globl _P2_1
                                     54 	.globl _P2_0
                                     55 	.globl _SM0
                                     56 	.globl _SM1
                                     57 	.globl _SM2
                                     58 	.globl _REN
                                     59 	.globl _TB8
                                     60 	.globl _RB8
                                     61 	.globl _TI
                                     62 	.globl _RI
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _TF1
                                     72 	.globl _TR1
                                     73 	.globl _TF0
                                     74 	.globl _TR0
                                     75 	.globl _IE1
                                     76 	.globl _IT1
                                     77 	.globl _IE0
                                     78 	.globl _IT0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _B
                                     88 	.globl _ACC
                                     89 	.globl _PSW
                                     90 	.globl _IP
                                     91 	.globl _P3
                                     92 	.globl _IE
                                     93 	.globl _P2
                                     94 	.globl _SBUF
                                     95 	.globl _SCON
                                     96 	.globl _P1
                                     97 	.globl _TH1
                                     98 	.globl _TH0
                                     99 	.globl _TL1
                                    100 	.globl _TL0
                                    101 	.globl _TMOD
                                    102 	.globl _TCON
                                    103 	.globl _PCON
                                    104 	.globl _DPH
                                    105 	.globl _DPL
                                    106 	.globl _SP
                                    107 	.globl _P0
                                    108 	.globl _lab4
                                    109 	.globl _getInput
                                    110 ;--------------------------------------------------------
                                    111 ; special function registers
                                    112 ;--------------------------------------------------------
                                    113 	.area RSEG    (ABS,DATA)
      000000                        114 	.org 0x0000
                           000080   115 G$P0$0_0$0 == 0x0080
                           000080   116 _P0	=	0x0080
                           000081   117 G$SP$0_0$0 == 0x0081
                           000081   118 _SP	=	0x0081
                           000082   119 G$DPL$0_0$0 == 0x0082
                           000082   120 _DPL	=	0x0082
                           000083   121 G$DPH$0_0$0 == 0x0083
                           000083   122 _DPH	=	0x0083
                           000087   123 G$PCON$0_0$0 == 0x0087
                           000087   124 _PCON	=	0x0087
                           000088   125 G$TCON$0_0$0 == 0x0088
                           000088   126 _TCON	=	0x0088
                           000089   127 G$TMOD$0_0$0 == 0x0089
                           000089   128 _TMOD	=	0x0089
                           00008A   129 G$TL0$0_0$0 == 0x008a
                           00008A   130 _TL0	=	0x008a
                           00008B   131 G$TL1$0_0$0 == 0x008b
                           00008B   132 _TL1	=	0x008b
                           00008C   133 G$TH0$0_0$0 == 0x008c
                           00008C   134 _TH0	=	0x008c
                           00008D   135 G$TH1$0_0$0 == 0x008d
                           00008D   136 _TH1	=	0x008d
                           000090   137 G$P1$0_0$0 == 0x0090
                           000090   138 _P1	=	0x0090
                           000098   139 G$SCON$0_0$0 == 0x0098
                           000098   140 _SCON	=	0x0098
                           000099   141 G$SBUF$0_0$0 == 0x0099
                           000099   142 _SBUF	=	0x0099
                           0000A0   143 G$P2$0_0$0 == 0x00a0
                           0000A0   144 _P2	=	0x00a0
                           0000A8   145 G$IE$0_0$0 == 0x00a8
                           0000A8   146 _IE	=	0x00a8
                           0000B0   147 G$P3$0_0$0 == 0x00b0
                           0000B0   148 _P3	=	0x00b0
                           0000B8   149 G$IP$0_0$0 == 0x00b8
                           0000B8   150 _IP	=	0x00b8
                           0000D0   151 G$PSW$0_0$0 == 0x00d0
                           0000D0   152 _PSW	=	0x00d0
                           0000E0   153 G$ACC$0_0$0 == 0x00e0
                           0000E0   154 _ACC	=	0x00e0
                           0000F0   155 G$B$0_0$0 == 0x00f0
                           0000F0   156 _B	=	0x00f0
                                    157 ;--------------------------------------------------------
                                    158 ; special function bits
                                    159 ;--------------------------------------------------------
                                    160 	.area RSEG    (ABS,DATA)
      000000                        161 	.org 0x0000
                           000080   162 G$P0_0$0_0$0 == 0x0080
                           000080   163 _P0_0	=	0x0080
                           000081   164 G$P0_1$0_0$0 == 0x0081
                           000081   165 _P0_1	=	0x0081
                           000082   166 G$P0_2$0_0$0 == 0x0082
                           000082   167 _P0_2	=	0x0082
                           000083   168 G$P0_3$0_0$0 == 0x0083
                           000083   169 _P0_3	=	0x0083
                           000084   170 G$P0_4$0_0$0 == 0x0084
                           000084   171 _P0_4	=	0x0084
                           000085   172 G$P0_5$0_0$0 == 0x0085
                           000085   173 _P0_5	=	0x0085
                           000086   174 G$P0_6$0_0$0 == 0x0086
                           000086   175 _P0_6	=	0x0086
                           000087   176 G$P0_7$0_0$0 == 0x0087
                           000087   177 _P0_7	=	0x0087
                           000088   178 G$IT0$0_0$0 == 0x0088
                           000088   179 _IT0	=	0x0088
                           000089   180 G$IE0$0_0$0 == 0x0089
                           000089   181 _IE0	=	0x0089
                           00008A   182 G$IT1$0_0$0 == 0x008a
                           00008A   183 _IT1	=	0x008a
                           00008B   184 G$IE1$0_0$0 == 0x008b
                           00008B   185 _IE1	=	0x008b
                           00008C   186 G$TR0$0_0$0 == 0x008c
                           00008C   187 _TR0	=	0x008c
                           00008D   188 G$TF0$0_0$0 == 0x008d
                           00008D   189 _TF0	=	0x008d
                           00008E   190 G$TR1$0_0$0 == 0x008e
                           00008E   191 _TR1	=	0x008e
                           00008F   192 G$TF1$0_0$0 == 0x008f
                           00008F   193 _TF1	=	0x008f
                           000090   194 G$P1_0$0_0$0 == 0x0090
                           000090   195 _P1_0	=	0x0090
                           000091   196 G$P1_1$0_0$0 == 0x0091
                           000091   197 _P1_1	=	0x0091
                           000092   198 G$P1_2$0_0$0 == 0x0092
                           000092   199 _P1_2	=	0x0092
                           000093   200 G$P1_3$0_0$0 == 0x0093
                           000093   201 _P1_3	=	0x0093
                           000094   202 G$P1_4$0_0$0 == 0x0094
                           000094   203 _P1_4	=	0x0094
                           000095   204 G$P1_5$0_0$0 == 0x0095
                           000095   205 _P1_5	=	0x0095
                           000096   206 G$P1_6$0_0$0 == 0x0096
                           000096   207 _P1_6	=	0x0096
                           000097   208 G$P1_7$0_0$0 == 0x0097
                           000097   209 _P1_7	=	0x0097
                           000098   210 G$RI$0_0$0 == 0x0098
                           000098   211 _RI	=	0x0098
                           000099   212 G$TI$0_0$0 == 0x0099
                           000099   213 _TI	=	0x0099
                           00009A   214 G$RB8$0_0$0 == 0x009a
                           00009A   215 _RB8	=	0x009a
                           00009B   216 G$TB8$0_0$0 == 0x009b
                           00009B   217 _TB8	=	0x009b
                           00009C   218 G$REN$0_0$0 == 0x009c
                           00009C   219 _REN	=	0x009c
                           00009D   220 G$SM2$0_0$0 == 0x009d
                           00009D   221 _SM2	=	0x009d
                           00009E   222 G$SM1$0_0$0 == 0x009e
                           00009E   223 _SM1	=	0x009e
                           00009F   224 G$SM0$0_0$0 == 0x009f
                           00009F   225 _SM0	=	0x009f
                           0000A0   226 G$P2_0$0_0$0 == 0x00a0
                           0000A0   227 _P2_0	=	0x00a0
                           0000A1   228 G$P2_1$0_0$0 == 0x00a1
                           0000A1   229 _P2_1	=	0x00a1
                           0000A2   230 G$P2_2$0_0$0 == 0x00a2
                           0000A2   231 _P2_2	=	0x00a2
                           0000A3   232 G$P2_3$0_0$0 == 0x00a3
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 G$P2_4$0_0$0 == 0x00a4
                           0000A4   235 _P2_4	=	0x00a4
                           0000A5   236 G$P2_5$0_0$0 == 0x00a5
                           0000A5   237 _P2_5	=	0x00a5
                           0000A6   238 G$P2_6$0_0$0 == 0x00a6
                           0000A6   239 _P2_6	=	0x00a6
                           0000A7   240 G$P2_7$0_0$0 == 0x00a7
                           0000A7   241 _P2_7	=	0x00a7
                           0000A8   242 G$EX0$0_0$0 == 0x00a8
                           0000A8   243 _EX0	=	0x00a8
                           0000A9   244 G$ET0$0_0$0 == 0x00a9
                           0000A9   245 _ET0	=	0x00a9
                           0000AA   246 G$EX1$0_0$0 == 0x00aa
                           0000AA   247 _EX1	=	0x00aa
                           0000AB   248 G$ET1$0_0$0 == 0x00ab
                           0000AB   249 _ET1	=	0x00ab
                           0000AC   250 G$ES$0_0$0 == 0x00ac
                           0000AC   251 _ES	=	0x00ac
                           0000AF   252 G$EA$0_0$0 == 0x00af
                           0000AF   253 _EA	=	0x00af
                           0000B0   254 G$P3_0$0_0$0 == 0x00b0
                           0000B0   255 _P3_0	=	0x00b0
                           0000B1   256 G$P3_1$0_0$0 == 0x00b1
                           0000B1   257 _P3_1	=	0x00b1
                           0000B2   258 G$P3_2$0_0$0 == 0x00b2
                           0000B2   259 _P3_2	=	0x00b2
                           0000B3   260 G$P3_3$0_0$0 == 0x00b3
                           0000B3   261 _P3_3	=	0x00b3
                           0000B4   262 G$P3_4$0_0$0 == 0x00b4
                           0000B4   263 _P3_4	=	0x00b4
                           0000B5   264 G$P3_5$0_0$0 == 0x00b5
                           0000B5   265 _P3_5	=	0x00b5
                           0000B6   266 G$P3_6$0_0$0 == 0x00b6
                           0000B6   267 _P3_6	=	0x00b6
                           0000B7   268 G$P3_7$0_0$0 == 0x00b7
                           0000B7   269 _P3_7	=	0x00b7
                           0000B0   270 G$RXD$0_0$0 == 0x00b0
                           0000B0   271 _RXD	=	0x00b0
                           0000B1   272 G$TXD$0_0$0 == 0x00b1
                           0000B1   273 _TXD	=	0x00b1
                           0000B2   274 G$INT0$0_0$0 == 0x00b2
                           0000B2   275 _INT0	=	0x00b2
                           0000B3   276 G$INT1$0_0$0 == 0x00b3
                           0000B3   277 _INT1	=	0x00b3
                           0000B4   278 G$T0$0_0$0 == 0x00b4
                           0000B4   279 _T0	=	0x00b4
                           0000B5   280 G$T1$0_0$0 == 0x00b5
                           0000B5   281 _T1	=	0x00b5
                           0000B6   282 G$WR$0_0$0 == 0x00b6
                           0000B6   283 _WR	=	0x00b6
                           0000B7   284 G$RD$0_0$0 == 0x00b7
                           0000B7   285 _RD	=	0x00b7
                           0000B8   286 G$PX0$0_0$0 == 0x00b8
                           0000B8   287 _PX0	=	0x00b8
                           0000B9   288 G$PT0$0_0$0 == 0x00b9
                           0000B9   289 _PT0	=	0x00b9
                           0000BA   290 G$PX1$0_0$0 == 0x00ba
                           0000BA   291 _PX1	=	0x00ba
                           0000BB   292 G$PT1$0_0$0 == 0x00bb
                           0000BB   293 _PT1	=	0x00bb
                           0000BC   294 G$PS$0_0$0 == 0x00bc
                           0000BC   295 _PS	=	0x00bc
                           0000D0   296 G$P$0_0$0 == 0x00d0
                           0000D0   297 _P	=	0x00d0
                           0000D1   298 G$F1$0_0$0 == 0x00d1
                           0000D1   299 _F1	=	0x00d1
                           0000D2   300 G$OV$0_0$0 == 0x00d2
                           0000D2   301 _OV	=	0x00d2
                           0000D3   302 G$RS0$0_0$0 == 0x00d3
                           0000D3   303 _RS0	=	0x00d3
                           0000D4   304 G$RS1$0_0$0 == 0x00d4
                           0000D4   305 _RS1	=	0x00d4
                           0000D5   306 G$F0$0_0$0 == 0x00d5
                           0000D5   307 _F0	=	0x00d5
                           0000D6   308 G$AC$0_0$0 == 0x00d6
                           0000D6   309 _AC	=	0x00d6
                           0000D7   310 G$CY$0_0$0 == 0x00d7
                           0000D7   311 _CY	=	0x00d7
                                    312 ;--------------------------------------------------------
                                    313 ; overlayable register banks
                                    314 ;--------------------------------------------------------
                                    315 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        316 	.ds 8
                                    317 ;--------------------------------------------------------
                                    318 ; internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area DSEG    (DATA)
                                    321 ;--------------------------------------------------------
                                    322 ; overlayable items in internal ram
                                    323 ;--------------------------------------------------------
                                    324 ;--------------------------------------------------------
                                    325 ; Stack segment in internal ram
                                    326 ;--------------------------------------------------------
                                    327 	.area	SSEG
      000008                        328 __start__stack:
      000008                        329 	.ds	1
                                    330 
                                    331 ;--------------------------------------------------------
                                    332 ; indirectly addressable internal ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area ISEG    (DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; absolute internal ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area IABS    (ABS,DATA)
                                    339 	.area IABS    (ABS,DATA)
                                    340 ;--------------------------------------------------------
                                    341 ; bit data
                                    342 ;--------------------------------------------------------
                                    343 	.area BSEG    (BIT)
                                    344 ;--------------------------------------------------------
                                    345 ; paged external ram data
                                    346 ;--------------------------------------------------------
                                    347 	.area PSEG    (PAG,XDATA)
                                    348 ;--------------------------------------------------------
                                    349 ; external ram data
                                    350 ;--------------------------------------------------------
                                    351 	.area XSEG    (XDATA)
                                    352 ;--------------------------------------------------------
                                    353 ; absolute external ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area XABS    (ABS,XDATA)
                                    356 ;--------------------------------------------------------
                                    357 ; external initialized ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area XISEG   (XDATA)
                                    360 	.area HOME    (CODE)
                                    361 	.area GSINIT0 (CODE)
                                    362 	.area GSINIT1 (CODE)
                                    363 	.area GSINIT2 (CODE)
                                    364 	.area GSINIT3 (CODE)
                                    365 	.area GSINIT4 (CODE)
                                    366 	.area GSINIT5 (CODE)
                                    367 	.area GSINIT  (CODE)
                                    368 	.area GSFINAL (CODE)
                                    369 	.area CSEG    (CODE)
                                    370 ;--------------------------------------------------------
                                    371 ; interrupt vector
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
      000000                        374 __interrupt_vect:
      000000 02 00 06         [24]  375 	ljmp	__sdcc_gsinit_startup
                                    376 ;--------------------------------------------------------
                                    377 ; global & static initialisations
                                    378 ;--------------------------------------------------------
                                    379 	.area HOME    (CODE)
                                    380 	.area GSINIT  (CODE)
                                    381 	.area GSFINAL (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.globl __sdcc_gsinit_startup
                                    384 	.globl __sdcc_program_startup
                                    385 	.globl __start__stack
                                    386 	.globl __mcs51_genXINIT
                                    387 	.globl __mcs51_genXRAMCLEAR
                                    388 	.globl __mcs51_genRAMCLEAR
                                    389 	.area GSFINAL (CODE)
      00005F 02 00 03         [24]  390 	ljmp	__sdcc_program_startup
                                    391 ;--------------------------------------------------------
                                    392 ; Home
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
                                    395 	.area HOME    (CODE)
      000003                        396 __sdcc_program_startup:
      000003 02 01 44         [24]  397 	ljmp	_main
                                    398 ;	return from main will return to caller
                                    399 ;--------------------------------------------------------
                                    400 ; code
                                    401 ;--------------------------------------------------------
                                    402 	.area CSEG    (CODE)
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'lab4'
                                    405 ;------------------------------------------------------------
                                    406 ;hex                       Allocated to registers r7 
                                    407 ;------------------------------------------------------------
                           000000   408 	G$lab4$0$0 ==.
                           000000   409 	C$lab4.c$9$0_0$3 ==.
                                    410 ;	lab4.c:9: uint8_t lab4(uint8_t hex) {
                                    411 ;	-----------------------------------------
                                    412 ;	 function lab4
                                    413 ;	-----------------------------------------
      000062                        414 _lab4:
                           000007   415 	ar7 = 0x07
                           000006   416 	ar6 = 0x06
                           000005   417 	ar5 = 0x05
                           000004   418 	ar4 = 0x04
                           000003   419 	ar3 = 0x03
                           000002   420 	ar2 = 0x02
                           000001   421 	ar1 = 0x01
                           000000   422 	ar0 = 0x00
                           000000   423 	C$lab4.c$10$1_0$3 ==.
                                    424 ;	lab4.c:10: switch (hex) {
      000062 E5 82            [12]  425 	mov	a,dpl
      000064 FF               [12]  426 	mov	r7,a
      000065 24 F0            [12]  427 	add	a,#0xff - 0x0f
      000067 50 03            [24]  428 	jnc	00125$
      000069 02 00 EA         [24]  429 	ljmp	00117$
      00006C                        430 00125$:
      00006C EF               [12]  431 	mov	a,r7
      00006D 24 0A            [12]  432 	add	a,#(00126$-3-.)
      00006F 83               [24]  433 	movc	a,@a+pc
      000070 F5 82            [12]  434 	mov	dpl,a
      000072 EF               [12]  435 	mov	a,r7
      000073 24 14            [12]  436 	add	a,#(00127$-3-.)
      000075 83               [24]  437 	movc	a,@a+pc
      000076 F5 83            [12]  438 	mov	dph,a
      000078 E4               [12]  439 	clr	a
      000079 73               [24]  440 	jmp	@a+dptr
      00007A                        441 00126$:
      00007A 9A                     442 	.db	00101$
      00007B 9F                     443 	.db	00102$
      00007C A4                     444 	.db	00103$
      00007D A9                     445 	.db	00104$
      00007E AE                     446 	.db	00105$
      00007F B3                     447 	.db	00106$
      000080 B8                     448 	.db	00107$
      000081 BD                     449 	.db	00108$
      000082 C2                     450 	.db	00109$
      000083 C7                     451 	.db	00110$
      000084 CC                     452 	.db	00111$
      000085 D1                     453 	.db	00112$
      000086 D6                     454 	.db	00113$
      000087 DB                     455 	.db	00114$
      000088 E0                     456 	.db	00115$
      000089 E5                     457 	.db	00116$
      00008A                        458 00127$:
      00008A 00                     459 	.db	00101$>>8
      00008B 00                     460 	.db	00102$>>8
      00008C 00                     461 	.db	00103$>>8
      00008D 00                     462 	.db	00104$>>8
      00008E 00                     463 	.db	00105$>>8
      00008F 00                     464 	.db	00106$>>8
      000090 00                     465 	.db	00107$>>8
      000091 00                     466 	.db	00108$>>8
      000092 00                     467 	.db	00109$>>8
      000093 00                     468 	.db	00110$>>8
      000094 00                     469 	.db	00111$>>8
      000095 00                     470 	.db	00112$>>8
      000096 00                     471 	.db	00113$>>8
      000097 00                     472 	.db	00114$>>8
      000098 00                     473 	.db	00115$>>8
      000099 00                     474 	.db	00116$>>8
                           000038   475 	C$lab4.c$11$2_0$4 ==.
                                    476 ;	lab4.c:11: case 0x0: return 0xC0; break;
      00009A                        477 00101$:
      00009A 75 82 C0         [24]  478 	mov	dpl,#0xc0
                           00003B   479 	C$lab4.c$12$2_0$4 ==.
                                    480 ;	lab4.c:12: case 0x1: return 0xF9; break;
      00009D 80 4E            [24]  481 	sjmp	00119$
      00009F                        482 00102$:
      00009F 75 82 F9         [24]  483 	mov	dpl,#0xf9
                           000040   484 	C$lab4.c$13$2_0$4 ==.
                                    485 ;	lab4.c:13: case 0x2: return 0xA4; break;
      0000A2 80 49            [24]  486 	sjmp	00119$
      0000A4                        487 00103$:
      0000A4 75 82 A4         [24]  488 	mov	dpl,#0xa4
                           000045   489 	C$lab4.c$14$2_0$4 ==.
                                    490 ;	lab4.c:14: case 0x3: return 0xB0; break;
      0000A7 80 44            [24]  491 	sjmp	00119$
      0000A9                        492 00104$:
      0000A9 75 82 B0         [24]  493 	mov	dpl,#0xb0
                           00004A   494 	C$lab4.c$15$2_0$4 ==.
                                    495 ;	lab4.c:15: case 0x4: return 0x99; break;
      0000AC 80 3F            [24]  496 	sjmp	00119$
      0000AE                        497 00105$:
      0000AE 75 82 99         [24]  498 	mov	dpl,#0x99
                           00004F   499 	C$lab4.c$16$2_0$4 ==.
                                    500 ;	lab4.c:16: case 0x5: return 0x92; break;
      0000B1 80 3A            [24]  501 	sjmp	00119$
      0000B3                        502 00106$:
      0000B3 75 82 92         [24]  503 	mov	dpl,#0x92
                           000054   504 	C$lab4.c$17$2_0$4 ==.
                                    505 ;	lab4.c:17: case 0x6: return 0x82; break;
      0000B6 80 35            [24]  506 	sjmp	00119$
      0000B8                        507 00107$:
      0000B8 75 82 82         [24]  508 	mov	dpl,#0x82
                           000059   509 	C$lab4.c$18$2_0$4 ==.
                                    510 ;	lab4.c:18: case 0x7: return 0xF8; break;
      0000BB 80 30            [24]  511 	sjmp	00119$
      0000BD                        512 00108$:
      0000BD 75 82 F8         [24]  513 	mov	dpl,#0xf8
                           00005E   514 	C$lab4.c$19$2_0$4 ==.
                                    515 ;	lab4.c:19: case 0x8: return 0x80; break;
      0000C0 80 2B            [24]  516 	sjmp	00119$
      0000C2                        517 00109$:
      0000C2 75 82 80         [24]  518 	mov	dpl,#0x80
                           000063   519 	C$lab4.c$20$2_0$4 ==.
                                    520 ;	lab4.c:20: case 0x9: return 0x90; break;
      0000C5 80 26            [24]  521 	sjmp	00119$
      0000C7                        522 00110$:
      0000C7 75 82 90         [24]  523 	mov	dpl,#0x90
                           000068   524 	C$lab4.c$21$2_0$4 ==.
                                    525 ;	lab4.c:21: case 0xA: return 0x88; break;
      0000CA 80 21            [24]  526 	sjmp	00119$
      0000CC                        527 00111$:
      0000CC 75 82 88         [24]  528 	mov	dpl,#0x88
                           00006D   529 	C$lab4.c$22$2_0$4 ==.
                                    530 ;	lab4.c:22: case 0xB: return 0x83; break;
      0000CF 80 1C            [24]  531 	sjmp	00119$
      0000D1                        532 00112$:
      0000D1 75 82 83         [24]  533 	mov	dpl,#0x83
                           000072   534 	C$lab4.c$23$2_0$4 ==.
                                    535 ;	lab4.c:23: case 0xC: return 0xC6; break;
      0000D4 80 17            [24]  536 	sjmp	00119$
      0000D6                        537 00113$:
      0000D6 75 82 C6         [24]  538 	mov	dpl,#0xc6
                           000077   539 	C$lab4.c$24$2_0$4 ==.
                                    540 ;	lab4.c:24: case 0xD: return 0xA1; break;
      0000D9 80 12            [24]  541 	sjmp	00119$
      0000DB                        542 00114$:
      0000DB 75 82 A1         [24]  543 	mov	dpl,#0xa1
                           00007C   544 	C$lab4.c$25$2_0$4 ==.
                                    545 ;	lab4.c:25: case 0xE: return 0x86; break;
      0000DE 80 0D            [24]  546 	sjmp	00119$
      0000E0                        547 00115$:
      0000E0 75 82 86         [24]  548 	mov	dpl,#0x86
                           000081   549 	C$lab4.c$26$2_0$4 ==.
                                    550 ;	lab4.c:26: case 0xF: return 0x8E; break;
      0000E3 80 08            [24]  551 	sjmp	00119$
      0000E5                        552 00116$:
      0000E5 75 82 8E         [24]  553 	mov	dpl,#0x8e
                           000086   554 	C$lab4.c$27$2_0$4 ==.
                                    555 ;	lab4.c:27: default : return 0x00; break;
      0000E8 80 03            [24]  556 	sjmp	00119$
      0000EA                        557 00117$:
      0000EA 75 82 00         [24]  558 	mov	dpl,#0x00
                           00008B   559 	C$lab4.c$28$1_0$3 ==.
                                    560 ;	lab4.c:28: }
      0000ED                        561 00119$:
                           00008B   562 	C$lab4.c$29$1_0$3 ==.
                                    563 ;	lab4.c:29: }
                           00008B   564 	C$lab4.c$29$1_0$3 ==.
                           00008B   565 	XG$lab4$0$0 ==.
      0000ED 22               [24]  566 	ret
                                    567 ;------------------------------------------------------------
                                    568 ;Allocation info for local variables in function 'getInput'
                                    569 ;------------------------------------------------------------
                           00008C   570 	G$getInput$0$0 ==.
                           00008C   571 	C$lab4.c$31$1_0$5 ==.
                                    572 ;	lab4.c:31: uint8_t getInput() {
                                    573 ;	-----------------------------------------
                                    574 ;	 function getInput
                                    575 ;	-----------------------------------------
      0000EE                        576 _getInput:
                           00008C   577 	C$lab4.c$130$1_0$5 ==.
                                    578 ;	lab4.c:130: __endasm;
                                    579 ;	0000$ : start
                                    580 ;	0001$ : setup 1
                                    581 ;	2000$ : rows
                                    582 ;	0002$ : setup 2
                                    583 ;	3000$ : columns
                                    584 ;	5000$ : determine
                                    585 ;	8000$ : translate
                                    586 ;	8050$ : translate loop
                                    587 ;	9000$ : translate done
                                    588 ;	check keypad
      0000EE                        589 	0000$:
                                    590 ;	contents previously stored in A is now stored at 99H in memory
      0000EE F5 99            [12]  591 	MOV	0x99, A
      0000F0 C0 07            [24]  592 	PUSH	7
      0000F2 C0 06            [24]  593 	PUSH	6
                                    594 ;	PUSH 0
      0000F4 C0 01            [24]  595 	PUSH	1
      0000F6 7F 04            [12]  596 	MOV	R7, #4 ; number of rows
      0000F8 E4               [12]  597 	CLR	A
                                    598 ;	index through rows to figure out which row the input is in
      0000F9                        599 	0001$:
      0000F9 74 01            [12]  600 	MOV A, #0x1
      0000FB                        601 	2000$:
      0000FB F5 90            [12]  602 	MOV	P1, A ; make lower nibble an output
      0000FD F5 0C            [12]  603 	MOV	12, A ; latch value written to port
      0000FF E5 90            [12]  604 	MOV	A, P1 ; intake row into A
                                    605 ;	if a bit in A is a 0, then a button in that row has been pressed
      000101 60 07            [24]  606 	JZ	0002$
                                    607 ;	if not then shift the A register left
      000103 23               [12]  608 	RL	A
                                    609 ;	and do it again
      000104 DF F5            [24]  610 	DJNZ	R7, 2000$
      000106 EF               [12]  611 	MOV	A, R7
      000107 E4               [12]  612 	CLR	A
      000108 80 EF            [24]  613 	SJMP	0001$
      00010A                        614 	0002$:
      00010A 7E 04            [12]  615 	MOV R6, #4 ; number of columns
      00010C 74 10            [12]  616 	MOV	A, #0x10
      00010E                        617 	  3000$:
                                    618 ;	index through the columns to figure out which column the input is in
      00010E F5 90            [12]  619 	MOV	P1, A ; make upper nibble an output
      000110 F5 0B            [12]  620 	MOV	11, A ; latch value written to port
      000112 E5 90            [12]  621 	MOV	A, P1 ; intake column into A
      000114 60 03            [24]  622 	JZ	5000$
      000116 23               [12]  623 	RL	A
      000117 DE F5            [24]  624 	DJNZ	R6, 3000$
                                    625 ;	determine what the value of the input is via a LUT
      000119                        626 	    5000$:
      000119 E5 0B            [12]  627 	MOV	A, 11 ; column
      00011B 45 0C            [12]  628 	ORL	A, 12 ; row
      00011D F5 0D            [12]  629 	MOV	13, A
      00011F D0 01            [24]  630 	POP	1
                                    631 ;	POP R0
      000121 D0 06            [24]  632 	POP	6
      000123 D0 07            [24]  633 	POP	7
      000125 E5 99            [12]  634 	MOV	A, 0x99
      000127 31 2A            [12]  635 	ACALL	8000$
      000129 22               [24]  636 	RET
                                    637 ;	procedure to translate the button pressed stored in the A register to a HEX value
      00012A                        638 	8000$:
      00012A 75 0A 00         [24]  639 	MOV	10, #0 ; initialise counter
      00012D 90 00 00         [24]  640 	MOV	DPTR, #KP_LUT
                                    641 ;	loop through the look up table and use R0 as the counter
      000130                        642 	 8050$:
      000130 E4               [12]  643 	CLR	A ; clear A reg
      000131 93               [24]  644 	MOVC	A, @A+DPTR
      000132 C3               [12]  645 	CLR	C ; clear carry
      000133 95 0D            [12]  646 	SUBB	A, 13 ; check if the counter and pressed button are the same
      000135 60 05            [24]  647 	JZ	9000$
                                    648 ;	later, add a way to prevent an infinite loop. loop back to the beginning and start comparing again
      000137 A3               [24]  649 	INC	DPTR
      000138 05 0A            [12]  650 	INC	10
      00013A 80 F4            [24]  651 	SJMP	8050$
      00013C                        652 	 9000$:
      00013C 85 0A 82         [24]  653 	MOV	DPL, 10
      00013F 22               [24]  654 	RET
                           0000DE   655 	C$lab4.c$131$1_0$5 ==.
                                    656 ;	lab4.c:131: return DPL;
      000140 85 82 82         [24]  657 	mov	dpl,_DPL
                           0000E1   658 	C$lab4.c$132$1_0$5 ==.
                                    659 ;	lab4.c:132: }
                           0000E1   660 	C$lab4.c$132$1_0$5 ==.
                           0000E1   661 	XG$getInput$0$0 ==.
      000143 22               [24]  662 	ret
                                    663 ;------------------------------------------------------------
                                    664 ;Allocation info for local variables in function 'main'
                                    665 ;------------------------------------------------------------
                           0000E2   666 	G$main$0$0 ==.
                           0000E2   667 	C$lab4.c$134$1_0$7 ==.
                                    668 ;	lab4.c:134: int main(void) {
                                    669 ;	-----------------------------------------
                                    670 ;	 function main
                                    671 ;	-----------------------------------------
      000144                        672 _main:
                           0000E2   673 	C$lab4.c$135$1_0$7 ==.
                                    674 ;	lab4.c:135: while (1) {
      000144                        675 00102$:
                           0000E2   676 	C$lab4.c$136$2_0$8 ==.
                                    677 ;	lab4.c:136: lab4(5);
      000144 75 82 05         [24]  678 	mov	dpl,#0x05
      000147 12 00 62         [24]  679 	lcall	_lab4
      00014A 80 F8            [24]  680 	sjmp	00102$
                           0000EA   681 	C$lab4.c$139$1_0$7 ==.
                                    682 ;	lab4.c:139: }
                           0000EA   683 	C$lab4.c$139$1_0$7 ==.
                           0000EA   684 	XG$main$0$0 ==.
      00014C 22               [24]  685 	ret
                                    686 	.area CSEG    (CODE)
                                    687 	.area CONST   (CODE)
                                    688 	.area XINIT   (CODE)
                                    689 	.area CABS    (ABS,CODE)
