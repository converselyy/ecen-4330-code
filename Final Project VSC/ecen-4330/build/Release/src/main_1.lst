ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 1.
Hexadecimal [24-Bits]



                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _main
                                     20 	.globl _writeSomeLines
                                     21 	.globl _write
                                     22 	.globl _drawChar
                                     23 	.globl _setRotation
                                     24 	.globl _iowrite8
                                     25 	.globl _CY
                                     26 	.globl _AC
                                     27 	.globl _F0
                                     28 	.globl _RS1
                                     29 	.globl _RS0
                                     30 	.globl _OV
                                     31 	.globl _F1
                                     32 	.globl _P
                                     33 	.globl _PS
                                     34 	.globl _PT1
                                     35 	.globl _PX1
                                     36 	.globl _PT0
                                     37 	.globl _PX0
                                     38 	.globl _RD
                                     39 	.globl _WR
                                     40 	.globl _T1
                                     41 	.globl _T0
                                     42 	.globl _INT1
                                     43 	.globl _INT0
                                     44 	.globl _TXD
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _EA
                                     55 	.globl _ES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 2.
Hexadecimal [24-Bits]



                                     56 	.globl _ET1
                                     57 	.globl _EX1
                                     58 	.globl _ET0
                                     59 	.globl _EX0
                                     60 	.globl _P2_7
                                     61 	.globl _P2_6
                                     62 	.globl _P2_5
                                     63 	.globl _P2_4
                                     64 	.globl _P2_3
                                     65 	.globl _P2_2
                                     66 	.globl _P2_1
                                     67 	.globl _P2_0
                                     68 	.globl _SM0
                                     69 	.globl _SM1
                                     70 	.globl _SM2
                                     71 	.globl _REN
                                     72 	.globl _TB8
                                     73 	.globl _RB8
                                     74 	.globl _TI
                                     75 	.globl _RI
                                     76 	.globl _P1_7
                                     77 	.globl _P1_6
                                     78 	.globl _P1_5
                                     79 	.globl _P1_4
                                     80 	.globl _P1_3
                                     81 	.globl _P1_2
                                     82 	.globl _P1_1
                                     83 	.globl _P1_0
                                     84 	.globl _TF1
                                     85 	.globl _TR1
                                     86 	.globl _TF0
                                     87 	.globl _TR0
                                     88 	.globl _IE1
                                     89 	.globl _IT1
                                     90 	.globl _IE0
                                     91 	.globl _IT0
                                     92 	.globl _P0_7
                                     93 	.globl _P0_6
                                     94 	.globl _P0_5
                                     95 	.globl _P0_4
                                     96 	.globl _P0_3
                                     97 	.globl _P0_2
                                     98 	.globl _P0_1
                                     99 	.globl _P0_0
                                    100 	.globl _B
                                    101 	.globl _ACC
                                    102 	.globl _PSW
                                    103 	.globl _IP
                                    104 	.globl _P3
                                    105 	.globl _IE
                                    106 	.globl _P2
                                    107 	.globl _SBUF
                                    108 	.globl _SCON
                                    109 	.globl _P1
                                    110 	.globl _TH1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 3.
Hexadecimal [24-Bits]



                                    111 	.globl _TH0
                                    112 	.globl _TL1
                                    113 	.globl _TL0
                                    114 	.globl _TMOD
                                    115 	.globl _TCON
                                    116 	.globl _PCON
                                    117 	.globl _DPH
                                    118 	.globl _DPL
                                    119 	.globl _SP
                                    120 	.globl _P0
                                    121 	.globl _drawChar_PARM_6
                                    122 	.globl _drawChar_PARM_5
                                    123 	.globl _drawChar_PARM_4
                                    124 	.globl _drawChar_PARM_3
                                    125 	.globl _drawChar_PARM_2
                                    126 	.globl _fillRect_PARM_5
                                    127 	.globl _fillRect_PARM_4
                                    128 	.globl _fillRect_PARM_3
                                    129 	.globl _fillRect_PARM_2
                                    130 	.globl _testCircles_PARM_2
                                    131 	.globl _drawCircle_PARM_4
                                    132 	.globl _drawCircle_PARM_3
                                    133 	.globl _drawCircle_PARM_2
                                    134 	.globl _drawPixel_PARM_3
                                    135 	.globl _drawPixel_PARM_2
                                    136 	.globl __height
                                    137 	.globl __width
                                    138 	.globl _textbgcolor
                                    139 	.globl _textcolor
                                    140 	.globl _rotation
                                    141 	.globl _textsize
                                    142 	.globl _cursor_y
                                    143 	.globl _cursor_x
                                    144 	.globl _read_ram_address
                                    145 	.globl _seg7_address
                                    146 	.globl _lcd_address
                                    147 	.globl _rowloc
                                    148 	.globl _colloc
                                    149 	.globl _keypad
                                    150 	.globl _delay
                                    151 	.globl _writeRegister8
                                    152 	.globl _writeRegister16
                                    153 	.globl _setCursor
                                    154 	.globl _setTextColor
                                    155 	.globl _setTextSize
                                    156 	.globl _setAddress
                                    157 	.globl _TFT_LCD_INIT
                                    158 	.globl _drawPixel
                                    159 	.globl _drawCircle
                                    160 	.globl _testCircles
                                    161 	.globl _fillRect
                                    162 	.globl _fillScreen
                                    163 	.globl _LCD_string_write
                                    164 	.globl _testRAM
                                    165 	.globl _freeType
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 4.
Hexadecimal [24-Bits]



                                    166 	.globl _keyDetect
                                    167 	.globl _reverse
                                    168 	.globl _asciiToDec
                                    169 	.globl _asciiToHex
                                    170 ;--------------------------------------------------------
                                    171 ; special function registers
                                    172 ;--------------------------------------------------------
                                    173 	.area RSEG    (ABS,DATA)
      000000                        174 	.org 0x0000
                           000080   175 _P0	=	0x0080
                           000081   176 _SP	=	0x0081
                           000082   177 _DPL	=	0x0082
                           000083   178 _DPH	=	0x0083
                           000087   179 _PCON	=	0x0087
                           000088   180 _TCON	=	0x0088
                           000089   181 _TMOD	=	0x0089
                           00008A   182 _TL0	=	0x008a
                           00008B   183 _TL1	=	0x008b
                           00008C   184 _TH0	=	0x008c
                           00008D   185 _TH1	=	0x008d
                           000090   186 _P1	=	0x0090
                           000098   187 _SCON	=	0x0098
                           000099   188 _SBUF	=	0x0099
                           0000A0   189 _P2	=	0x00a0
                           0000A8   190 _IE	=	0x00a8
                           0000B0   191 _P3	=	0x00b0
                           0000B8   192 _IP	=	0x00b8
                           0000D0   193 _PSW	=	0x00d0
                           0000E0   194 _ACC	=	0x00e0
                           0000F0   195 _B	=	0x00f0
                                    196 ;--------------------------------------------------------
                                    197 ; special function bits
                                    198 ;--------------------------------------------------------
                                    199 	.area RSEG    (ABS,DATA)
      000000                        200 	.org 0x0000
                           000080   201 _P0_0	=	0x0080
                           000081   202 _P0_1	=	0x0081
                           000082   203 _P0_2	=	0x0082
                           000083   204 _P0_3	=	0x0083
                           000084   205 _P0_4	=	0x0084
                           000085   206 _P0_5	=	0x0085
                           000086   207 _P0_6	=	0x0086
                           000087   208 _P0_7	=	0x0087
                           000088   209 _IT0	=	0x0088
                           000089   210 _IE0	=	0x0089
                           00008A   211 _IT1	=	0x008a
                           00008B   212 _IE1	=	0x008b
                           00008C   213 _TR0	=	0x008c
                           00008D   214 _TF0	=	0x008d
                           00008E   215 _TR1	=	0x008e
                           00008F   216 _TF1	=	0x008f
                           000090   217 _P1_0	=	0x0090
                           000091   218 _P1_1	=	0x0091
                           000092   219 _P1_2	=	0x0092
                           000093   220 _P1_3	=	0x0093
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 5.
Hexadecimal [24-Bits]



                           000094   221 _P1_4	=	0x0094
                           000095   222 _P1_5	=	0x0095
                           000096   223 _P1_6	=	0x0096
                           000097   224 _P1_7	=	0x0097
                           000098   225 _RI	=	0x0098
                           000099   226 _TI	=	0x0099
                           00009A   227 _RB8	=	0x009a
                           00009B   228 _TB8	=	0x009b
                           00009C   229 _REN	=	0x009c
                           00009D   230 _SM2	=	0x009d
                           00009E   231 _SM1	=	0x009e
                           00009F   232 _SM0	=	0x009f
                           0000A0   233 _P2_0	=	0x00a0
                           0000A1   234 _P2_1	=	0x00a1
                           0000A2   235 _P2_2	=	0x00a2
                           0000A3   236 _P2_3	=	0x00a3
                           0000A4   237 _P2_4	=	0x00a4
                           0000A5   238 _P2_5	=	0x00a5
                           0000A6   239 _P2_6	=	0x00a6
                           0000A7   240 _P2_7	=	0x00a7
                           0000A8   241 _EX0	=	0x00a8
                           0000A9   242 _ET0	=	0x00a9
                           0000AA   243 _EX1	=	0x00aa
                           0000AB   244 _ET1	=	0x00ab
                           0000AC   245 _ES	=	0x00ac
                           0000AF   246 _EA	=	0x00af
                           0000B0   247 _P3_0	=	0x00b0
                           0000B1   248 _P3_1	=	0x00b1
                           0000B2   249 _P3_2	=	0x00b2
                           0000B3   250 _P3_3	=	0x00b3
                           0000B4   251 _P3_4	=	0x00b4
                           0000B5   252 _P3_5	=	0x00b5
                           0000B6   253 _P3_6	=	0x00b6
                           0000B7   254 _P3_7	=	0x00b7
                           0000B0   255 _RXD	=	0x00b0
                           0000B1   256 _TXD	=	0x00b1
                           0000B2   257 _INT0	=	0x00b2
                           0000B3   258 _INT1	=	0x00b3
                           0000B4   259 _T0	=	0x00b4
                           0000B5   260 _T1	=	0x00b5
                           0000B6   261 _WR	=	0x00b6
                           0000B7   262 _RD	=	0x00b7
                           0000B8   263 _PX0	=	0x00b8
                           0000B9   264 _PT0	=	0x00b9
                           0000BA   265 _PX1	=	0x00ba
                           0000BB   266 _PT1	=	0x00bb
                           0000BC   267 _PS	=	0x00bc
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _F1	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 6.
Hexadecimal [24-Bits]



                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 ;--------------------------------------------------------
                                    282 ; internal ram data
                                    283 ;--------------------------------------------------------
                                    284 	.area DSEG    (DATA)
      000000                        285 _keypad::
      000000                        286 	.ds 16
      000010                        287 _colloc::
      000010                        288 	.ds 1
      000011                        289 _rowloc::
      000011                        290 	.ds 1
      000012                        291 _lcd_address::
      000012                        292 	.ds 2
      000014                        293 _seg7_address::
      000014                        294 	.ds 2
      000016                        295 _read_ram_address::
      000016                        296 	.ds 2
      000018                        297 _cursor_x::
      000018                        298 	.ds 2
      00001A                        299 _cursor_y::
      00001A                        300 	.ds 2
      00001C                        301 _textsize::
      00001C                        302 	.ds 1
      00001D                        303 _rotation::
      00001D                        304 	.ds 1
      00001E                        305 _textcolor::
      00001E                        306 	.ds 2
      000020                        307 _textbgcolor::
      000020                        308 	.ds 2
      000022                        309 __width::
      000022                        310 	.ds 2
      000024                        311 __height::
      000024                        312 	.ds 2
      000026                        313 _drawPixel_PARM_2:
      000026                        314 	.ds 2
      000028                        315 _drawPixel_PARM_3:
      000028                        316 	.ds 2
      00002A                        317 _drawCircle_PARM_2:
      00002A                        318 	.ds 2
      00002C                        319 _drawCircle_PARM_3:
      00002C                        320 	.ds 2
      00002E                        321 _drawCircle_PARM_4:
      00002E                        322 	.ds 2
      000030                        323 _drawCircle_x0_65536_103:
      000030                        324 	.ds 2
      000032                        325 _drawCircle_f_65536_104:
      000032                        326 	.ds 2
      000034                        327 _drawCircle_ddF_x_65536_104:
      000034                        328 	.ds 2
      000036                        329 _drawCircle_x_65536_104:
      000036                        330 	.ds 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 7.
Hexadecimal [24-Bits]



      000038                        331 _drawCircle_sloc0_1_0:
      000038                        332 	.ds 2
      00003A                        333 _drawCircle_sloc1_1_0:
      00003A                        334 	.ds 2
      00003C                        335 _drawCircle_sloc2_1_0:
      00003C                        336 	.ds 2
      00003E                        337 _testCircles_PARM_2:
      00003E                        338 	.ds 2
      000040                        339 _testCircles_w_65536_108:
      000040                        340 	.ds 2
      000042                        341 _testCircles_h_65536_108:
      000042                        342 	.ds 2
      000044                        343 _fillRect_PARM_2:
      000044                        344 	.ds 2
      000046                        345 _fillRect_PARM_3:
      000046                        346 	.ds 2
      000048                        347 _fillRect_PARM_4:
      000048                        348 	.ds 2
      00004A                        349 _fillRect_PARM_5:
      00004A                        350 	.ds 2
      00004C                        351 _drawChar_PARM_2:
      00004C                        352 	.ds 2
      00004E                        353 _drawChar_PARM_3:
      00004E                        354 	.ds 1
      00004F                        355 _drawChar_PARM_4:
      00004F                        356 	.ds 2
      000051                        357 _drawChar_PARM_5:
      000051                        358 	.ds 2
      000053                        359 _drawChar_PARM_6:
      000053                        360 	.ds 1
      000054                        361 _drawChar_i_65537_149:
      000054                        362 	.ds 1
      000055                        363 _drawChar_line_196609_151:
      000055                        364 	.ds 1
      000056                        365 _drawChar_j_196610_154:
      000056                        366 	.ds 1
      000057                        367 _drawChar_sloc1_1_0:
      000057                        368 	.ds 2
      000059                        369 _drawChar_sloc2_1_0:
      000059                        370 	.ds 2
      00005B                        371 _asciiToHex_store_65536_200:
      00005B                        372 	.ds 2
                                    373 ;--------------------------------------------------------
                                    374 ; overlayable items in internal ram
                                    375 ;--------------------------------------------------------
                                    376 	.area	OSEG    (OVR,DATA)
      000000                        377 _iowrite8_PARM_2:
      000000                        378 	.ds 1
                                    379 	.area	OSEG    (OVR,DATA)
                                    380 	.area	OSEG    (OVR,DATA)
      000000                        381 _writeRegister8_PARM_2:
      000000                        382 	.ds 1
                                    383 	.area	OSEG    (OVR,DATA)
      000000                        384 _writeRegister16_PARM_2:
      000000                        385 	.ds 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 8.
Hexadecimal [24-Bits]



                                    386 	.area	OSEG    (OVR,DATA)
      000000                        387 _setCursor_PARM_2:
      000000                        388 	.ds 2
                                    389 	.area	OSEG    (OVR,DATA)
      000000                        390 _setTextColor_PARM_2:
      000000                        391 	.ds 2
                                    392 	.area	OSEG    (OVR,DATA)
                                    393 	.area	OSEG    (OVR,DATA)
      000000                        394 _setAddress_PARM_2:
      000000                        395 	.ds 2
      000002                        396 _setAddress_PARM_3:
      000002                        397 	.ds 2
      000004                        398 _setAddress_PARM_4:
      000004                        399 	.ds 2
                                    400 	.area	OSEG    (OVR,DATA)
                                    401 ;--------------------------------------------------------
                                    402 ; Stack segment in internal ram
                                    403 ;--------------------------------------------------------
                                    404 	.area	SSEG
      000000                        405 __start__stack:
      000000                        406 	.ds	1
                                    407 
                                    408 ;--------------------------------------------------------
                                    409 ; indirectly addressable internal ram data
                                    410 ;--------------------------------------------------------
                                    411 	.area ISEG    (DATA)
                                    412 ;--------------------------------------------------------
                                    413 ; absolute internal ram data
                                    414 ;--------------------------------------------------------
                                    415 	.area IABS    (ABS,DATA)
                                    416 	.area IABS    (ABS,DATA)
                                    417 ;--------------------------------------------------------
                                    418 ; bit data
                                    419 ;--------------------------------------------------------
                                    420 	.area BSEG    (BIT)
      000000                        421 _drawChar_sloc0_1_0:
      000000                        422 	.ds 1
                                    423 ;--------------------------------------------------------
                                    424 ; paged external ram data
                                    425 ;--------------------------------------------------------
                                    426 	.area PSEG    (PAG,XDATA)
                                    427 ;--------------------------------------------------------
                                    428 ; external ram data
                                    429 ;--------------------------------------------------------
                                    430 	.area XSEG    (XDATA)
                                    431 ;--------------------------------------------------------
                                    432 ; absolute external ram data
                                    433 ;--------------------------------------------------------
                                    434 	.area XABS    (ABS,XDATA)
                                    435 ;--------------------------------------------------------
                                    436 ; external initialized ram data
                                    437 ;--------------------------------------------------------
                                    438 	.area XISEG   (XDATA)
                                    439 	.area HOME    (CODE)
                                    440 	.area GSINIT0 (CODE)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 9.
Hexadecimal [24-Bits]



                                    441 	.area GSINIT1 (CODE)
                                    442 	.area GSINIT2 (CODE)
                                    443 	.area GSINIT3 (CODE)
                                    444 	.area GSINIT4 (CODE)
                                    445 	.area GSINIT5 (CODE)
                                    446 	.area GSINIT  (CODE)
                                    447 	.area GSFINAL (CODE)
                                    448 	.area CSEG    (CODE)
                                    449 ;--------------------------------------------------------
                                    450 ; interrupt vector
                                    451 ;--------------------------------------------------------
                                    452 	.area HOME    (CODE)
      000000                        453 __interrupt_vect:
      000000 02 00 00         [24]  454 	ljmp	__sdcc_gsinit_startup
                                    455 ;--------------------------------------------------------
                                    456 ; global & static initialisations
                                    457 ;--------------------------------------------------------
                                    458 	.area HOME    (CODE)
                                    459 	.area GSINIT  (CODE)
                                    460 	.area GSFINAL (CODE)
                                    461 	.area GSINIT  (CODE)
                                    462 	.globl __sdcc_gsinit_startup
                                    463 	.globl __sdcc_program_startup
                                    464 	.globl __start__stack
                                    465 	.globl __mcs51_genXINIT
                                    466 	.globl __mcs51_genXRAMCLEAR
                                    467 	.globl __mcs51_genRAMCLEAR
                                    468 ;	main.c:4: uint8_t keypad[4][4] =	{{'1','4','7','E'},
      000000 75 00 31         [24]  469 	mov	_keypad,#0x31
      000003 75 01 34         [24]  470 	mov	(_keypad + 0x0001),#0x34
      000006 75 02 37         [24]  471 	mov	(_keypad + 0x0002),#0x37
      000009 75 03 45         [24]  472 	mov	(_keypad + 0x0003),#0x45
      00000C 75 04 32         [24]  473 	mov	(_keypad + 0x0004),#0x32
      00000F 75 05 35         [24]  474 	mov	(_keypad + 0x0005),#0x35
      000012 75 06 38         [24]  475 	mov	(_keypad + 0x0006),#0x38
      000015 75 07 30         [24]  476 	mov	(_keypad + 0x0007),#0x30
      000018 75 08 33         [24]  477 	mov	(_keypad + 0x0008),#0x33
      00001B 75 09 36         [24]  478 	mov	(_keypad + 0x0009),#0x36
      00001E 75 0A 39         [24]  479 	mov	(_keypad + 0x000a),#0x39
      000021 75 0B 46         [24]  480 	mov	(_keypad + 0x000b),#0x46
      000024 75 0C 41         [24]  481 	mov	(_keypad + 0x000c),#0x41
      000027 75 0D 42         [24]  482 	mov	(_keypad + 0x000d),#0x42
      00002A 75 0E 43         [24]  483 	mov	(_keypad + 0x000e),#0x43
      00002D 75 0F 44         [24]  484 	mov	(_keypad + 0x000f),#0x44
                                    485 ;	main.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000030 75 12 00         [24]  486 	mov	_lcd_address,#0x00
      000033 75 13 40         [24]  487 	mov	(_lcd_address + 1),#0x40
                                    488 ;	main.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000036 75 14 00         [24]  489 	mov	_seg7_address,#0x00
      000039 75 15 80         [24]  490 	mov	(_seg7_address + 1),#0x80
                                    491 	.area GSFINAL (CODE)
      000000 02 00 03         [24]  492 	ljmp	__sdcc_program_startup
                                    493 ;--------------------------------------------------------
                                    494 ; Home
                                    495 ;--------------------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 10.
Hexadecimal [24-Bits]



                                    496 	.area HOME    (CODE)
                                    497 	.area HOME    (CODE)
      000003                        498 __sdcc_program_startup:
      000003 02 0F 03         [24]  499 	ljmp	_main
                                    500 ;	return from main will return to caller
                                    501 ;--------------------------------------------------------
                                    502 ; code
                                    503 ;--------------------------------------------------------
                                    504 	.area CSEG    (CODE)
                                    505 ;------------------------------------------------------------
                                    506 ;Allocation info for local variables in function 'iowrite8'
                                    507 ;------------------------------------------------------------
                                    508 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    509 ;map_address               Allocated to registers r6 r7 
                                    510 ;------------------------------------------------------------
                                    511 ;	main.c:48: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function iowrite8
                                    514 ;	-----------------------------------------
      000000                        515 _iowrite8:
                           000007   516 	ar7 = 0x07
                           000006   517 	ar6 = 0x06
                           000005   518 	ar5 = 0x05
                           000004   519 	ar4 = 0x04
                           000003   520 	ar3 = 0x03
                           000002   521 	ar2 = 0x02
                           000001   522 	ar1 = 0x01
                           000000   523 	ar0 = 0x00
      000000 AE 82            [24]  524 	mov	r6,dpl
      000002 AF 83            [24]  525 	mov	r7,dph
                                    526 ;	main.c:49: IOM = 1;
                                    527 ;	assignBit
      000004 D2 B4            [12]  528 	setb	_P3_4
                                    529 ;	main.c:50: *map_address = d;
      000006 8E 82            [24]  530 	mov	dpl,r6
      000008 8F 83            [24]  531 	mov	dph,r7
      00000A E5 00            [12]  532 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  533 	movx	@dptr,a
                                    534 ;	main.c:51: IOM = 0;
                                    535 ;	assignBit
      00000D C2 B4            [12]  536 	clr	_P3_4
                                    537 ;	main.c:52: }
      00000F 22               [24]  538 	ret
                                    539 ;------------------------------------------------------------
                                    540 ;Allocation info for local variables in function 'delay'
                                    541 ;------------------------------------------------------------
                                    542 ;d                         Allocated to registers r6 r7 
                                    543 ;i                         Allocated to registers r4 r5 
                                    544 ;j                         Allocated to registers r2 r3 
                                    545 ;------------------------------------------------------------
                                    546 ;	main.c:56: void delay (int16_t d)
                                    547 ;	-----------------------------------------
                                    548 ;	 function delay
                                    549 ;	-----------------------------------------
      000010                        550 _delay:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 11.
Hexadecimal [24-Bits]



      000010 AE 82            [24]  551 	mov	r6,dpl
      000012 AF 83            [24]  552 	mov	r7,dph
                                    553 ;	main.c:59: for (i=0;i<d;i++)
      000014 7C 00            [12]  554 	mov	r4,#0x00
      000016 7D 00            [12]  555 	mov	r5,#0x00
      000018                        556 00107$:
      000018 8C 02            [24]  557 	mov	ar2,r4
      00001A 8D 03            [24]  558 	mov	ar3,r5
      00001C C3               [12]  559 	clr	c
      00001D EA               [12]  560 	mov	a,r2
      00001E 9E               [12]  561 	subb	a,r6
      00001F EB               [12]  562 	mov	a,r3
      000020 64 80            [12]  563 	xrl	a,#0x80
      000022 8F F0            [24]  564 	mov	b,r7
      000024 63 F0 80         [24]  565 	xrl	b,#0x80
      000027 95 F0            [12]  566 	subb	a,b
      000029 50 14            [24]  567 	jnc	00109$
                                    568 ;	main.c:61: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  569 	mov	r2,#0xe8
      00002D 7B 03            [12]  570 	mov	r3,#0x03
      00002F                        571 00105$:
      00002F 1A               [12]  572 	dec	r2
      000030 BA FF 01         [24]  573 	cjne	r2,#0xff,00130$
      000033 1B               [12]  574 	dec	r3
      000034                        575 00130$:
      000034 EA               [12]  576 	mov	a,r2
      000035 4B               [12]  577 	orl	a,r3
      000036 70 F7            [24]  578 	jnz	00105$
                                    579 ;	main.c:59: for (i=0;i<d;i++)
      000038 0C               [12]  580 	inc	r4
      000039 BC 00 DC         [24]  581 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  582 	inc	r5
      00003D 80 D9            [24]  583 	sjmp	00107$
      00003F                        584 00109$:
                                    585 ;	main.c:63: }
      00003F 22               [24]  586 	ret
                                    587 ;------------------------------------------------------------
                                    588 ;Allocation info for local variables in function 'writeRegister8'
                                    589 ;------------------------------------------------------------
                                    590 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    591 ;a                         Allocated to registers r7 
                                    592 ;------------------------------------------------------------
                                    593 ;	main.c:68: void writeRegister8 (uint8_t a, uint8_t d) {
                                    594 ;	-----------------------------------------
                                    595 ;	 function writeRegister8
                                    596 ;	-----------------------------------------
      000040                        597 _writeRegister8:
      000040 AF 82            [24]  598 	mov	r7,dpl
                                    599 ;	main.c:69: CD = __CMD__;
                                    600 ;	assignBit
      000042 C2 B5            [12]  601 	clr	_P3_5
                                    602 ;	main.c:70: write8(a);
                                    603 ;	assignBit
      000044 D2 B4            [12]  604 	setb	_P3_4
      000046 85 12 82         [24]  605 	mov	dpl,_lcd_address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 12.
Hexadecimal [24-Bits]



      000049 85 13 83         [24]  606 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  607 	mov	a,r7
      00004D F0               [24]  608 	movx	@dptr,a
                                    609 ;	assignBit
      00004E C2 B4            [12]  610 	clr	_P3_4
                                    611 ;	main.c:71: CD = __DATA__;
                                    612 ;	assignBit
      000050 D2 B5            [12]  613 	setb	_P3_5
                                    614 ;	main.c:72: write8(d);
                                    615 ;	assignBit
      000052 D2 B4            [12]  616 	setb	_P3_4
      000054 85 12 82         [24]  617 	mov	dpl,_lcd_address
      000057 85 13 83         [24]  618 	mov	dph,(_lcd_address + 1)
      00005A E5 00            [12]  619 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  620 	movx	@dptr,a
                                    621 ;	assignBit
      00005D C2 B4            [12]  622 	clr	_P3_4
                                    623 ;	main.c:73: }
      00005F 22               [24]  624 	ret
                                    625 ;------------------------------------------------------------
                                    626 ;Allocation info for local variables in function 'writeRegister16'
                                    627 ;------------------------------------------------------------
                                    628 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    629 ;a                         Allocated to registers r6 r7 
                                    630 ;hi                        Allocated to registers r7 
                                    631 ;lo                        Allocated to registers r6 
                                    632 ;------------------------------------------------------------
                                    633 ;	main.c:77: void writeRegister16 (uint16_t a, uint16_t d) {
                                    634 ;	-----------------------------------------
                                    635 ;	 function writeRegister16
                                    636 ;	-----------------------------------------
      000060                        637 _writeRegister16:
      000060 AE 82            [24]  638 	mov	r6,dpl
      000062 AF 83            [24]  639 	mov	r7,dph
                                    640 ;	main.c:79: hi = (a) >> 8;
      000064 8F 05            [24]  641 	mov	ar5,r7
                                    642 ;	main.c:80: lo = (a);
                                    643 ;	main.c:81: write8Reg(hi);
                                    644 ;	assignBit
      000066 C2 B5            [12]  645 	clr	_P3_5
                                    646 ;	assignBit
      000068 D2 B4            [12]  647 	setb	_P3_4
      00006A 85 12 82         [24]  648 	mov	dpl,_lcd_address
      00006D 85 13 83         [24]  649 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  650 	mov	a,r5
      000071 F0               [24]  651 	movx	@dptr,a
                                    652 ;	assignBit
      000072 C2 B4            [12]  653 	clr	_P3_4
                                    654 ;	main.c:82: write8Reg(lo);
                                    655 ;	assignBit
      000074 C2 B5            [12]  656 	clr	_P3_5
                                    657 ;	assignBit
      000076 D2 B4            [12]  658 	setb	_P3_4
      000078 85 12 82         [24]  659 	mov	dpl,_lcd_address
      00007B 85 13 83         [24]  660 	mov	dph,(_lcd_address + 1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 13.
Hexadecimal [24-Bits]



      00007E EE               [12]  661 	mov	a,r6
      00007F F0               [24]  662 	movx	@dptr,a
                                    663 ;	assignBit
      000080 C2 B4            [12]  664 	clr	_P3_4
                                    665 ;	main.c:83: hi = (d) >> 8;
      000082 AF 01            [24]  666 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    667 ;	main.c:84: lo = (d);
      000084 AE 00            [24]  668 	mov	r6,_writeRegister16_PARM_2
                                    669 ;	main.c:85: CD = 1 ;
                                    670 ;	assignBit
      000086 D2 B5            [12]  671 	setb	_P3_5
                                    672 ;	main.c:86: write8Data(hi);
                                    673 ;	assignBit
      000088 D2 B5            [12]  674 	setb	_P3_5
                                    675 ;	assignBit
      00008A D2 B4            [12]  676 	setb	_P3_4
      00008C 85 12 82         [24]  677 	mov	dpl,_lcd_address
      00008F 85 13 83         [24]  678 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  679 	mov	a,r7
      000093 F0               [24]  680 	movx	@dptr,a
                                    681 ;	assignBit
      000094 C2 B4            [12]  682 	clr	_P3_4
                                    683 ;	main.c:87: write8Data(lo);
                                    684 ;	assignBit
      000096 D2 B5            [12]  685 	setb	_P3_5
                                    686 ;	assignBit
      000098 D2 B4            [12]  687 	setb	_P3_4
      00009A 85 12 82         [24]  688 	mov	dpl,_lcd_address
      00009D 85 13 83         [24]  689 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  690 	mov	a,r6
      0000A1 F0               [24]  691 	movx	@dptr,a
                                    692 ;	assignBit
      0000A2 C2 B4            [12]  693 	clr	_P3_4
                                    694 ;	main.c:88: }
      0000A4 22               [24]  695 	ret
                                    696 ;------------------------------------------------------------
                                    697 ;Allocation info for local variables in function 'setCursor'
                                    698 ;------------------------------------------------------------
                                    699 ;y                         Allocated with name '_setCursor_PARM_2'
                                    700 ;x                         Allocated to registers 
                                    701 ;------------------------------------------------------------
                                    702 ;	main.c:91: void setCursor (uint16_t x, uint16_t y) {
                                    703 ;	-----------------------------------------
                                    704 ;	 function setCursor
                                    705 ;	-----------------------------------------
      0000A5                        706 _setCursor:
      0000A5 85 82 18         [24]  707 	mov	_cursor_x,dpl
      0000A8 85 83 19         [24]  708 	mov	(_cursor_x + 1),dph
                                    709 ;	main.c:93: cursor_y = y;
      0000AB 85 00 1A         [24]  710 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85 01 1B         [24]  711 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    712 ;	main.c:94: }
      0000B1 22               [24]  713 	ret
                                    714 ;------------------------------------------------------------
                                    715 ;Allocation info for local variables in function 'setTextColor'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 14.
Hexadecimal [24-Bits]



                                    716 ;------------------------------------------------------------
                                    717 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    718 ;x                         Allocated to registers 
                                    719 ;------------------------------------------------------------
                                    720 ;	main.c:95: void setTextColor (uint16_t x, uint16_t y) {
                                    721 ;	-----------------------------------------
                                    722 ;	 function setTextColor
                                    723 ;	-----------------------------------------
      0000B2                        724 _setTextColor:
      0000B2 85 82 1E         [24]  725 	mov	_textcolor,dpl
      0000B5 85 83 1F         [24]  726 	mov	(_textcolor + 1),dph
                                    727 ;	main.c:97: textbgcolor = y;
      0000B8 85 00 20         [24]  728 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85 01 21         [24]  729 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    730 ;	main.c:98: }
      0000BE 22               [24]  731 	ret
                                    732 ;------------------------------------------------------------
                                    733 ;Allocation info for local variables in function 'setTextSize'
                                    734 ;------------------------------------------------------------
                                    735 ;s                         Allocated to registers r7 
                                    736 ;------------------------------------------------------------
                                    737 ;	main.c:100: void setTextSize (uint8_t s) {
                                    738 ;	-----------------------------------------
                                    739 ;	 function setTextSize
                                    740 ;	-----------------------------------------
      0000BF                        741 _setTextSize:
                                    742 ;	main.c:101: if (s > 8) return;
      0000BF E5 82            [12]  743 	mov	a,dpl
      0000C1 FF               [12]  744 	mov	r7,a
      0000C2 24 F7            [12]  745 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  746 	jnc	00102$
      0000C6 22               [24]  747 	ret
      0000C7                        748 00102$:
                                    749 ;	main.c:102: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  750 	mov	a,r7
      0000C8 60 06            [24]  751 	jz	00105$
      0000CA 8F 06            [24]  752 	mov	ar6,r7
      0000CC 7F 00            [12]  753 	mov	r7,#0x00
      0000CE 80 04            [24]  754 	sjmp	00106$
      0000D0                        755 00105$:
      0000D0 7E 01            [12]  756 	mov	r6,#0x01
      0000D2 7F 00            [12]  757 	mov	r7,#0x00
      0000D4                        758 00106$:
      0000D4 8E 1C            [24]  759 	mov	_textsize,r6
                                    760 ;	main.c:103: }
      0000D6 22               [24]  761 	ret
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function 'setRotation'
                                    764 ;------------------------------------------------------------
                                    765 ;flag                      Allocated to registers r7 
                                    766 ;------------------------------------------------------------
                                    767 ;	main.c:105: void setRotation (uint8_t flag) {
                                    768 ;	-----------------------------------------
                                    769 ;	 function setRotation
                                    770 ;	-----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 15.
Hexadecimal [24-Bits]



      0000D7                        771 _setRotation:
                                    772 ;	main.c:106: switch(flag) {
      0000D7 E5 82            [12]  773 	mov	a,dpl
      0000D9 FF               [12]  774 	mov	r7,a
      0000DA 24 FC            [12]  775 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  776 	jc	00105$
      0000DE EF               [12]  777 	mov	a,r7
      0000DF 2F               [12]  778 	add	a,r7
                                    779 ;	main.c:107: case 0:
      0000E0 90 00 E4         [24]  780 	mov	dptr,#00115$
      0000E3 73               [24]  781 	jmp	@a+dptr
      0000E4                        782 00115$:
      0000E4 80 06            [24]  783 	sjmp	00101$
      0000E6 80 14            [24]  784 	sjmp	00102$
      0000E8 80 22            [24]  785 	sjmp	00103$
      0000EA 80 30            [24]  786 	sjmp	00104$
      0000EC                        787 00101$:
                                    788 ;	main.c:108: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  789 	mov	r7,#0x48
                                    790 ;	main.c:109: _width = TFTWIDTH;
      0000EE 75 22 F0         [24]  791 	mov	__width,#0xf0
      0000F1 75 23 00         [24]  792 	mov	(__width + 1),#0x00
                                    793 ;	main.c:110: _height = TFTHEIGHT;
      0000F4 75 24 40         [24]  794 	mov	__height,#0x40
      0000F7 75 25 01         [24]  795 	mov	(__height + 1),#0x01
                                    796 ;	main.c:111: break;
                                    797 ;	main.c:112: case 1:
      0000FA 80 3E            [24]  798 	sjmp	00106$
      0000FC                        799 00102$:
                                    800 ;	main.c:113: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  801 	mov	r7,#0x28
                                    802 ;	main.c:114: _width = TFTHEIGHT;
      0000FE 75 22 40         [24]  803 	mov	__width,#0x40
      000101 75 23 01         [24]  804 	mov	(__width + 1),#0x01
                                    805 ;	main.c:115: _height = TFTWIDTH;
      000104 75 24 F0         [24]  806 	mov	__height,#0xf0
      000107 75 25 00         [24]  807 	mov	(__height + 1),#0x00
                                    808 ;	main.c:116: break;
                                    809 ;	main.c:117: case 2:
      00010A 80 2E            [24]  810 	sjmp	00106$
      00010C                        811 00103$:
                                    812 ;	main.c:118: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  813 	mov	r7,#0x88
                                    814 ;	main.c:119: _width = TFTWIDTH;
      00010E 75 22 F0         [24]  815 	mov	__width,#0xf0
      000111 75 23 00         [24]  816 	mov	(__width + 1),#0x00
                                    817 ;	main.c:120: _height = TFTHEIGHT;
      000114 75 24 40         [24]  818 	mov	__height,#0x40
      000117 75 25 01         [24]  819 	mov	(__height + 1),#0x01
                                    820 ;	main.c:121: break;
                                    821 ;	main.c:122: case 3:
      00011A 80 1E            [24]  822 	sjmp	00106$
      00011C                        823 00104$:
                                    824 ;	main.c:123: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  825 	mov	r7,#0xe8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 16.
Hexadecimal [24-Bits]



                                    826 ;	main.c:124: _width = TFTHEIGHT;
      00011E 75 22 40         [24]  827 	mov	__width,#0x40
      000121 75 23 01         [24]  828 	mov	(__width + 1),#0x01
                                    829 ;	main.c:125: _height = TFTWIDTH;
      000124 75 24 F0         [24]  830 	mov	__height,#0xf0
      000127 75 25 00         [24]  831 	mov	(__height + 1),#0x00
                                    832 ;	main.c:126: break;
                                    833 ;	main.c:127: default:
      00012A 80 0E            [24]  834 	sjmp	00106$
      00012C                        835 00105$:
                                    836 ;	main.c:128: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  837 	mov	r7,#0x48
                                    838 ;	main.c:129: _width = TFTWIDTH;
      00012E 75 22 F0         [24]  839 	mov	__width,#0xf0
      000131 75 23 00         [24]  840 	mov	(__width + 1),#0x00
                                    841 ;	main.c:130: _height = TFTHEIGHT;
      000134 75 24 40         [24]  842 	mov	__height,#0x40
      000137 75 25 01         [24]  843 	mov	(__height + 1),#0x01
                                    844 ;	main.c:132: }
      00013A                        845 00106$:
                                    846 ;	main.c:133: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F 00            [24]  847 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  848 	mov	dpl,#0x36
                                    849 ;	main.c:134: }
      00013F 02 00 40         [24]  850 	ljmp	_writeRegister8
                                    851 ;------------------------------------------------------------
                                    852 ;Allocation info for local variables in function 'setAddress'
                                    853 ;------------------------------------------------------------
                                    854 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    855 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    856 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    857 ;x1                        Allocated to registers r6 r7 
                                    858 ;------------------------------------------------------------
                                    859 ;	main.c:136: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    860 ;	-----------------------------------------
                                    861 ;	 function setAddress
                                    862 ;	-----------------------------------------
      000142                        863 _setAddress:
      000142 AE 82            [24]  864 	mov	r6,dpl
      000144 AF 83            [24]  865 	mov	r7,dph
                                    866 ;	main.c:137: write8Reg(0x2A);
                                    867 ;	assignBit
      000146 C2 B5            [12]  868 	clr	_P3_5
                                    869 ;	assignBit
      000148 D2 B4            [12]  870 	setb	_P3_4
      00014A 85 12 82         [24]  871 	mov	dpl,_lcd_address
      00014D 85 13 83         [24]  872 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  873 	mov	a,#0x2a
      000152 F0               [24]  874 	movx	@dptr,a
                                    875 ;	assignBit
      000153 C2 B4            [12]  876 	clr	_P3_4
                                    877 ;	main.c:138: write8Data(x1 >> 8);
                                    878 ;	assignBit
      000155 D2 B5            [12]  879 	setb	_P3_5
                                    880 ;	assignBit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 17.
Hexadecimal [24-Bits]



      000157 D2 B4            [12]  881 	setb	_P3_4
      000159 85 12 82         [24]  882 	mov	dpl,_lcd_address
      00015C 85 13 83         [24]  883 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  884 	mov	ar5,r7
      000161 ED               [12]  885 	mov	a,r5
      000162 F0               [24]  886 	movx	@dptr,a
                                    887 ;	assignBit
      000163 C2 B4            [12]  888 	clr	_P3_4
                                    889 ;	main.c:139: write8Data(x1);
                                    890 ;	assignBit
      000165 D2 B5            [12]  891 	setb	_P3_5
                                    892 ;	assignBit
      000167 D2 B4            [12]  893 	setb	_P3_4
      000169 85 12 82         [24]  894 	mov	dpl,_lcd_address
      00016C 85 13 83         [24]  895 	mov	dph,(_lcd_address + 1)
      00016F EE               [12]  896 	mov	a,r6
      000170 F0               [24]  897 	movx	@dptr,a
                                    898 ;	assignBit
      000171 C2 B4            [12]  899 	clr	_P3_4
                                    900 ;	main.c:140: write8Data(x2 >> 8);
                                    901 ;	assignBit
      000173 D2 B5            [12]  902 	setb	_P3_5
                                    903 ;	assignBit
      000175 D2 B4            [12]  904 	setb	_P3_4
      000177 85 12 82         [24]  905 	mov	dpl,_lcd_address
      00017A 85 13 83         [24]  906 	mov	dph,(_lcd_address + 1)
      00017D E5 03            [12]  907 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24]  908 	movx	@dptr,a
                                    909 ;	assignBit
      000180 C2 B4            [12]  910 	clr	_P3_4
                                    911 ;	main.c:141: write8Data(x2);
                                    912 ;	assignBit
      000182 D2 B5            [12]  913 	setb	_P3_5
                                    914 ;	assignBit
      000184 D2 B4            [12]  915 	setb	_P3_4
      000186 85 12 82         [24]  916 	mov	dpl,_lcd_address
      000189 85 13 83         [24]  917 	mov	dph,(_lcd_address + 1)
      00018C E5 02            [12]  918 	mov	a,_setAddress_PARM_3
      00018E F0               [24]  919 	movx	@dptr,a
                                    920 ;	assignBit
      00018F C2 B4            [12]  921 	clr	_P3_4
                                    922 ;	main.c:143: write8Reg(0x2B);
                                    923 ;	assignBit
      000191 C2 B5            [12]  924 	clr	_P3_5
                                    925 ;	assignBit
      000193 D2 B4            [12]  926 	setb	_P3_4
      000195 85 12 82         [24]  927 	mov	dpl,_lcd_address
      000198 85 13 83         [24]  928 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12]  929 	mov	a,#0x2b
      00019D F0               [24]  930 	movx	@dptr,a
                                    931 ;	assignBit
      00019E C2 B4            [12]  932 	clr	_P3_4
                                    933 ;	main.c:144: write8Data(y1 >> 8);
                                    934 ;	assignBit
      0001A0 D2 B5            [12]  935 	setb	_P3_5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 18.
Hexadecimal [24-Bits]



                                    936 ;	assignBit
      0001A2 D2 B4            [12]  937 	setb	_P3_4
      0001A4 85 12 82         [24]  938 	mov	dpl,_lcd_address
      0001A7 85 13 83         [24]  939 	mov	dph,(_lcd_address + 1)
      0001AA E5 01            [12]  940 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24]  941 	movx	@dptr,a
                                    942 ;	assignBit
      0001AD C2 B4            [12]  943 	clr	_P3_4
                                    944 ;	main.c:145: write8Data(y1);
                                    945 ;	assignBit
      0001AF D2 B5            [12]  946 	setb	_P3_5
                                    947 ;	assignBit
      0001B1 D2 B4            [12]  948 	setb	_P3_4
      0001B3 85 12 82         [24]  949 	mov	dpl,_lcd_address
      0001B6 85 13 83         [24]  950 	mov	dph,(_lcd_address + 1)
      0001B9 E5 00            [12]  951 	mov	a,_setAddress_PARM_2
      0001BB F0               [24]  952 	movx	@dptr,a
                                    953 ;	assignBit
      0001BC C2 B4            [12]  954 	clr	_P3_4
                                    955 ;	main.c:146: write8Data(y2 >> 8);
                                    956 ;	assignBit
      0001BE D2 B5            [12]  957 	setb	_P3_5
                                    958 ;	assignBit
      0001C0 D2 B4            [12]  959 	setb	_P3_4
      0001C2 85 12 82         [24]  960 	mov	dpl,_lcd_address
      0001C5 85 13 83         [24]  961 	mov	dph,(_lcd_address + 1)
      0001C8 E5 05            [12]  962 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24]  963 	movx	@dptr,a
                                    964 ;	assignBit
      0001CB C2 B4            [12]  965 	clr	_P3_4
                                    966 ;	main.c:147: write8Data(y2);
                                    967 ;	assignBit
      0001CD D2 B5            [12]  968 	setb	_P3_5
                                    969 ;	assignBit
      0001CF D2 B4            [12]  970 	setb	_P3_4
      0001D1 85 12 82         [24]  971 	mov	dpl,_lcd_address
      0001D4 85 13 83         [24]  972 	mov	dph,(_lcd_address + 1)
      0001D7 E5 04            [12]  973 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24]  974 	movx	@dptr,a
                                    975 ;	assignBit
      0001DA C2 B4            [12]  976 	clr	_P3_4
                                    977 ;	main.c:148: }
      0001DC 22               [24]  978 	ret
                                    979 ;------------------------------------------------------------
                                    980 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                    981 ;------------------------------------------------------------
                                    982 ;	main.c:150: void TFT_LCD_INIT (void) {
                                    983 ;	-----------------------------------------
                                    984 ;	 function TFT_LCD_INIT
                                    985 ;	-----------------------------------------
      0001DD                        986 _TFT_LCD_INIT:
                                    987 ;	main.c:151: _width = TFTWIDTH;
      0001DD 75 22 F0         [24]  988 	mov	__width,#0xf0
      0001E0 75 23 00         [24]  989 	mov	(__width + 1),#0x00
                                    990 ;	main.c:152: _height = TFTHEIGHT;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 19.
Hexadecimal [24-Bits]



      0001E3 75 24 40         [24]  991 	mov	__height,#0x40
      0001E6 75 25 01         [24]  992 	mov	(__height + 1),#0x01
                                    993 ;	main.c:154: IOM = 0;
                                    994 ;	assignBit
      0001E9 C2 B4            [12]  995 	clr	_P3_4
                                    996 ;	main.c:155: CD = 1;
                                    997 ;	assignBit
      0001EB D2 B5            [12]  998 	setb	_P3_5
                                    999 ;	main.c:157: write8Reg(0x00);
                                   1000 ;	assignBit
      0001ED C2 B5            [12] 1001 	clr	_P3_5
                                   1002 ;	assignBit
      0001EF D2 B4            [12] 1003 	setb	_P3_4
      0001F1 85 12 82         [24] 1004 	mov	dpl,_lcd_address
      0001F4 85 13 83         [24] 1005 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1006 	clr	a
      0001F8 F0               [24] 1007 	movx	@dptr,a
                                   1008 ;	assignBit
      0001F9 C2 B4            [12] 1009 	clr	_P3_4
                                   1010 ;	main.c:158: write8Data(0x00);
                                   1011 ;	assignBit
      0001FB D2 B5            [12] 1012 	setb	_P3_5
                                   1013 ;	assignBit
      0001FD D2 B4            [12] 1014 	setb	_P3_4
      0001FF 85 12 82         [24] 1015 	mov	dpl,_lcd_address
      000202 85 13 83         [24] 1016 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1017 	clr	a
      000206 F0               [24] 1018 	movx	@dptr,a
                                   1019 ;	assignBit
      000207 C2 B4            [12] 1020 	clr	_P3_4
                                   1021 ;	main.c:159: write8Data(0x00);
                                   1022 ;	assignBit
      000209 D2 B5            [12] 1023 	setb	_P3_5
                                   1024 ;	assignBit
      00020B D2 B4            [12] 1025 	setb	_P3_4
      00020D 85 12 82         [24] 1026 	mov	dpl,_lcd_address
      000210 85 13 83         [24] 1027 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1028 	clr	a
      000214 F0               [24] 1029 	movx	@dptr,a
                                   1030 ;	assignBit
      000215 C2 B4            [12] 1031 	clr	_P3_4
                                   1032 ;	main.c:160: write8Data(0x00);
                                   1033 ;	assignBit
      000217 D2 B5            [12] 1034 	setb	_P3_5
                                   1035 ;	assignBit
      000219 D2 B4            [12] 1036 	setb	_P3_4
      00021B 85 12 82         [24] 1037 	mov	dpl,_lcd_address
      00021E 85 13 83         [24] 1038 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1039 	clr	a
      000222 F0               [24] 1040 	movx	@dptr,a
                                   1041 ;	assignBit
      000223 C2 B4            [12] 1042 	clr	_P3_4
                                   1043 ;	main.c:161: delay(200);
      000225 90 00 C8         [24] 1044 	mov	dptr,#0x00c8
      000228 12 00 10         [24] 1045 	lcall	_delay
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 20.
Hexadecimal [24-Bits]



                                   1046 ;	main.c:163: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75 00 00         [24] 1047 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1048 	mov	dpl,#0x01
      000231 12 00 40         [24] 1049 	lcall	_writeRegister8
                                   1050 ;	main.c:164: delay(50);
      000234 90 00 32         [24] 1051 	mov	dptr,#0x0032
      000237 12 00 10         [24] 1052 	lcall	_delay
                                   1053 ;	main.c:165: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75 00 00         [24] 1054 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1055 	mov	dpl,#0x28
      000240 12 00 40         [24] 1056 	lcall	_writeRegister8
                                   1057 ;	main.c:166: delay(10);
      000243 90 00 0A         [24] 1058 	mov	dptr,#0x000a
      000246 12 00 10         [24] 1059 	lcall	_delay
                                   1060 ;	main.c:168: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75 00 23         [24] 1061 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1062 	mov	dpl,#0xc0
      00024F 12 00 40         [24] 1063 	lcall	_writeRegister8
                                   1064 ;	main.c:169: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75 00 11         [24] 1065 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1066 	mov	dpl,#0xc1
      000258 12 00 40         [24] 1067 	lcall	_writeRegister8
                                   1068 ;	main.c:170: write8Reg(ILI9341_VCOMCONTROL1);
                                   1069 ;	assignBit
      00025B C2 B5            [12] 1070 	clr	_P3_5
                                   1071 ;	assignBit
      00025D D2 B4            [12] 1072 	setb	_P3_4
      00025F 85 12 82         [24] 1073 	mov	dpl,_lcd_address
      000262 85 13 83         [24] 1074 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1075 	mov	a,#0xc5
      000267 F0               [24] 1076 	movx	@dptr,a
                                   1077 ;	assignBit
      000268 C2 B4            [12] 1078 	clr	_P3_4
                                   1079 ;	main.c:171: write8Data(0x3d);
                                   1080 ;	assignBit
      00026A D2 B5            [12] 1081 	setb	_P3_5
                                   1082 ;	assignBit
      00026C D2 B4            [12] 1083 	setb	_P3_4
      00026E 85 12 82         [24] 1084 	mov	dpl,_lcd_address
      000271 85 13 83         [24] 1085 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1086 	mov	a,#0x3d
      000276 F0               [24] 1087 	movx	@dptr,a
                                   1088 ;	assignBit
      000277 C2 B4            [12] 1089 	clr	_P3_4
                                   1090 ;	main.c:172: write8Data(0x30);
                                   1091 ;	assignBit
      000279 D2 B5            [12] 1092 	setb	_P3_5
                                   1093 ;	assignBit
      00027B D2 B4            [12] 1094 	setb	_P3_4
      00027D 85 12 82         [24] 1095 	mov	dpl,_lcd_address
      000280 85 13 83         [24] 1096 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1097 	mov	a,#0x30
      000285 F0               [24] 1098 	movx	@dptr,a
                                   1099 ;	assignBit
      000286 C2 B4            [12] 1100 	clr	_P3_4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 21.
Hexadecimal [24-Bits]



                                   1101 ;	main.c:173: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75 00 AA         [24] 1102 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1103 	mov	dpl,#0xc7
      00028E 12 00 40         [24] 1104 	lcall	_writeRegister8
                                   1105 ;	main.c:174: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75 00 88         [24] 1106 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1107 	mov	dpl,#0x36
      000297 12 00 40         [24] 1108 	lcall	_writeRegister8
                                   1109 ;	main.c:175: write8Reg(ILI9341_PIXELFORMAT);
                                   1110 ;	assignBit
      00029A C2 B5            [12] 1111 	clr	_P3_5
                                   1112 ;	assignBit
      00029C D2 B4            [12] 1113 	setb	_P3_4
      00029E 85 12 82         [24] 1114 	mov	dpl,_lcd_address
      0002A1 85 13 83         [24] 1115 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1116 	mov	a,#0x3a
      0002A6 F0               [24] 1117 	movx	@dptr,a
                                   1118 ;	assignBit
      0002A7 C2 B4            [12] 1119 	clr	_P3_4
                                   1120 ;	main.c:176: write8Data(0x55);write8Data(0x00);
                                   1121 ;	assignBit
      0002A9 D2 B5            [12] 1122 	setb	_P3_5
                                   1123 ;	assignBit
      0002AB D2 B4            [12] 1124 	setb	_P3_4
      0002AD 85 12 82         [24] 1125 	mov	dpl,_lcd_address
      0002B0 85 13 83         [24] 1126 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1127 	mov	a,#0x55
      0002B5 F0               [24] 1128 	movx	@dptr,a
                                   1129 ;	assignBit
      0002B6 C2 B4            [12] 1130 	clr	_P3_4
                                   1131 ;	assignBit
      0002B8 D2 B5            [12] 1132 	setb	_P3_5
                                   1133 ;	assignBit
      0002BA D2 B4            [12] 1134 	setb	_P3_4
      0002BC 85 12 82         [24] 1135 	mov	dpl,_lcd_address
      0002BF 85 13 83         [24] 1136 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1137 	clr	a
      0002C3 F0               [24] 1138 	movx	@dptr,a
                                   1139 ;	assignBit
      0002C4 C2 B4            [12] 1140 	clr	_P3_4
                                   1141 ;	main.c:177: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75 00 1B         [24] 1142 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75 01 00         [24] 1143 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1144 	mov	dptr,#0x00b1
      0002CF 12 00 60         [24] 1145 	lcall	_writeRegister16
                                   1146 ;	main.c:179: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75 00 07         [24] 1147 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1148 	mov	dpl,#0xb7
      0002D8 12 00 40         [24] 1149 	lcall	_writeRegister8
                                   1150 ;	main.c:181: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75 00 00         [24] 1151 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1152 	mov	dpl,#0x11
      0002E1 12 00 40         [24] 1153 	lcall	_writeRegister8
                                   1154 ;	main.c:182: delay(150);
      0002E4 90 00 96         [24] 1155 	mov	dptr,#0x0096
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 22.
Hexadecimal [24-Bits]



      0002E7 12 00 10         [24] 1156 	lcall	_delay
                                   1157 ;	main.c:183: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75 00 00         [24] 1158 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1159 	mov	dpl,#0x29
      0002F0 12 00 40         [24] 1160 	lcall	_writeRegister8
                                   1161 ;	main.c:184: delay(500);
      0002F3 90 01 F4         [24] 1162 	mov	dptr,#0x01f4
      0002F6 12 00 10         [24] 1163 	lcall	_delay
                                   1164 ;	main.c:185: setAddress(0,0,_width-1,_height-1);
      0002F9 AE 22            [24] 1165 	mov	r6,__width
      0002FB AF 23            [24] 1166 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1167 	dec	r6
      0002FE BE FF 01         [24] 1168 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1169 	dec	r7
      000302                       1170 00103$:
      000302 8E 02            [24] 1171 	mov	_setAddress_PARM_3,r6
      000304 8F 03            [24] 1172 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE 24            [24] 1173 	mov	r6,__height
      000308 AF 25            [24] 1174 	mov	r7,(__height + 1)
      00030A 1E               [12] 1175 	dec	r6
      00030B BE FF 01         [24] 1176 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1177 	dec	r7
      00030F                       1178 00104$:
      00030F 8E 04            [24] 1179 	mov	_setAddress_PARM_4,r6
      000311 8F 05            [24] 1180 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1181 	clr	a
      000314 F5 00            [12] 1182 	mov	_setAddress_PARM_2,a
      000316 F5 01            [12] 1183 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1184 	mov	dptr,#0x0000
                                   1185 ;	main.c:186: }
      00031B 02 01 42         [24] 1186 	ljmp	_setAddress
                                   1187 ;------------------------------------------------------------
                                   1188 ;Allocation info for local variables in function 'drawPixel'
                                   1189 ;------------------------------------------------------------
                                   1190 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1191 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1192 ;x3                        Allocated to registers r6 r7 
                                   1193 ;------------------------------------------------------------
                                   1194 ;	main.c:188: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function drawPixel
                                   1197 ;	-----------------------------------------
      00031E                       1198 _drawPixel:
      00031E AE 82            [24] 1199 	mov	r6,dpl
      000320 AF 83            [24] 1200 	mov	r7,dph
                                   1201 ;	main.c:190: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1202 	mov	ar4,r6
      000324 8F 05            [24] 1203 	mov	ar5,r7
      000326 0C               [12] 1204 	inc	r4
      000327 BC 00 01         [24] 1205 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1206 	inc	r5
      00032B                       1207 00103$:
      00032B 8C 02            [24] 1208 	mov	_setAddress_PARM_3,r4
      00032D 8D 03            [24] 1209 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC 26            [24] 1210 	mov	r4,_drawPixel_PARM_2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 23.
Hexadecimal [24-Bits]



      000331 AD 27            [24] 1211 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1212 	inc	r4
      000334 BC 00 01         [24] 1213 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1214 	inc	r5
      000338                       1215 00104$:
      000338 8C 04            [24] 1216 	mov	_setAddress_PARM_4,r4
      00033A 8D 05            [24] 1217 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85 26 00         [24] 1218 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85 27 01         [24] 1219 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1220 	mov	dpl,r6
      000344 8F 83            [24] 1221 	mov	dph,r7
      000346 12 01 42         [24] 1222 	lcall	_setAddress
                                   1223 ;	main.c:192: CD=0; write8(0x2C);
                                   1224 ;	assignBit
      000349 C2 B5            [12] 1225 	clr	_P3_5
                                   1226 ;	assignBit
      00034B D2 B4            [12] 1227 	setb	_P3_4
      00034D 85 12 82         [24] 1228 	mov	dpl,_lcd_address
      000350 85 13 83         [24] 1229 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1230 	mov	a,#0x2c
      000355 F0               [24] 1231 	movx	@dptr,a
                                   1232 ;	assignBit
      000356 C2 B4            [12] 1233 	clr	_P3_4
                                   1234 ;	main.c:194: CD = 1;
                                   1235 ;	assignBit
      000358 D2 B5            [12] 1236 	setb	_P3_5
                                   1237 ;	main.c:195: write8(color1>>8);write8(color1);
                                   1238 ;	assignBit
      00035A D2 B4            [12] 1239 	setb	_P3_4
      00035C 85 12 82         [24] 1240 	mov	dpl,_lcd_address
      00035F 85 13 83         [24] 1241 	mov	dph,(_lcd_address + 1)
      000362 E5 29            [12] 1242 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1243 	movx	@dptr,a
                                   1244 ;	assignBit
      000365 C2 B4            [12] 1245 	clr	_P3_4
                                   1246 ;	assignBit
      000367 D2 B4            [12] 1247 	setb	_P3_4
      000369 85 12 82         [24] 1248 	mov	dpl,_lcd_address
      00036C 85 13 83         [24] 1249 	mov	dph,(_lcd_address + 1)
      00036F E5 28            [12] 1250 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1251 	movx	@dptr,a
                                   1252 ;	assignBit
      000372 C2 B4            [12] 1253 	clr	_P3_4
                                   1254 ;	main.c:196: }
      000374 22               [24] 1255 	ret
                                   1256 ;------------------------------------------------------------
                                   1257 ;Allocation info for local variables in function 'drawCircle'
                                   1258 ;------------------------------------------------------------
                                   1259 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1260 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1261 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1262 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1263 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1264 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1265 ;ddF_y                     Allocated to registers r2 r3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 24.
Hexadecimal [24-Bits]



                                   1266 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1267 ;y                         Allocated to registers r0 r1 
                                   1268 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1269 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1270 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1271 ;------------------------------------------------------------
                                   1272 ;	main.c:198: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function drawCircle
                                   1275 ;	-----------------------------------------
      000375                       1276 _drawCircle:
      000375 85 82 30         [24] 1277 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83 31         [24] 1278 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1279 ;	main.c:199: int f = 1 - r;
      00037B 74 01            [12] 1280 	mov	a,#0x01
      00037D C3               [12] 1281 	clr	c
      00037E 95 2C            [12] 1282 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1283 	mov	r4,a
      000381 E4               [12] 1284 	clr	a
      000382 95 2D            [12] 1285 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1286 	mov	r5,a
      000385 8C 32            [24] 1287 	mov	_drawCircle_f_65536_104,r4
      000387 8D 33            [24] 1288 	mov	(_drawCircle_f_65536_104 + 1),r5
                                   1289 ;	main.c:201: int ddF_y = -2 * r;
u     000389 85 2C 00         [24] 1290 	mov	__mulint_PARM_2,_drawCircle_PARM_3
u     00038C 85 2D 01         [24] 1291 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00038F 90 FF FE         [24] 1292 	mov	dptr,#0xfffe
u     000392 12 00 00         [24] 1293 	lcall	__mulint
      000395 AA 82            [24] 1294 	mov	r2,dpl
      000397 AB 83            [24] 1295 	mov	r3,dph
                                   1296 ;	main.c:203: int y = r;
      000399 A8 2C            [24] 1297 	mov	r0,_drawCircle_PARM_3
      00039B A9 2D            [24] 1298 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   1299 ;	main.c:205: drawPixel(x0  , y0+r, color);
      00039D E5 2C            [12] 1300 	mov	a,_drawCircle_PARM_3
      00039F 25 2A            [12] 1301 	add	a,_drawCircle_PARM_2
      0003A1 F5 26            [12] 1302 	mov	_drawPixel_PARM_2,a
      0003A3 E5 2D            [12] 1303 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A5 35 2B            [12] 1304 	addc	a,(_drawCircle_PARM_2 + 1)
      0003A7 F5 27            [12] 1305 	mov	(_drawPixel_PARM_2 + 1),a
      0003A9 85 2E 28         [24] 1306 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003AC 85 2F 29         [24] 1307 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003AF 85 30 82         [24] 1308 	mov	dpl,_drawCircle_x0_65536_103
      0003B2 85 31 83         [24] 1309 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B5 C0 03            [24] 1310 	push	ar3
      0003B7 C0 02            [24] 1311 	push	ar2
      0003B9 C0 01            [24] 1312 	push	ar1
      0003BB C0 00            [24] 1313 	push	ar0
      0003BD 12 03 1E         [24] 1314 	lcall	_drawPixel
                                   1315 ;	main.c:206: drawPixel(x0  , y0-r, color);
      0003C0 E5 2A            [12] 1316 	mov	a,_drawCircle_PARM_2
      0003C2 C3               [12] 1317 	clr	c
      0003C3 95 2C            [12] 1318 	subb	a,_drawCircle_PARM_3
      0003C5 F5 26            [12] 1319 	mov	_drawPixel_PARM_2,a
      0003C7 E5 2B            [12] 1320 	mov	a,(_drawCircle_PARM_2 + 1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 25.
Hexadecimal [24-Bits]



      0003C9 95 2D            [12] 1321 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CB F5 27            [12] 1322 	mov	(_drawPixel_PARM_2 + 1),a
      0003CD 85 2E 28         [24] 1323 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D0 85 2F 29         [24] 1324 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D3 85 30 82         [24] 1325 	mov	dpl,_drawCircle_x0_65536_103
      0003D6 85 31 83         [24] 1326 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003D9 12 03 1E         [24] 1327 	lcall	_drawPixel
                                   1328 ;	main.c:207: drawPixel(x0+r, y0  , color);
      0003DC E5 2C            [12] 1329 	mov	a,_drawCircle_PARM_3
      0003DE 25 30            [12] 1330 	add	a,_drawCircle_x0_65536_103
      0003E0 F5 82            [12] 1331 	mov	dpl,a
      0003E2 E5 2D            [12] 1332 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E4 35 31            [12] 1333 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003E6 F5 83            [12] 1334 	mov	dph,a
      0003E8 85 2A 26         [24] 1335 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EB 85 2B 27         [24] 1336 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003EE 85 2E 28         [24] 1337 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F1 85 2F 29         [24] 1338 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F4 12 03 1E         [24] 1339 	lcall	_drawPixel
                                   1340 ;	main.c:208: drawPixel(x0-r, y0  , color);
      0003F7 E5 30            [12] 1341 	mov	a,_drawCircle_x0_65536_103
      0003F9 C3               [12] 1342 	clr	c
      0003FA 95 2C            [12] 1343 	subb	a,_drawCircle_PARM_3
      0003FC F5 82            [12] 1344 	mov	dpl,a
      0003FE E5 31            [12] 1345 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000400 95 2D            [12] 1346 	subb	a,(_drawCircle_PARM_3 + 1)
      000402 F5 83            [12] 1347 	mov	dph,a
      000404 85 2A 26         [24] 1348 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000407 85 2B 27         [24] 1349 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040A 85 2E 28         [24] 1350 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00040D 85 2F 29         [24] 1351 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000410 12 03 1E         [24] 1352 	lcall	_drawPixel
      000413 D0 00            [24] 1353 	pop	ar0
      000415 D0 01            [24] 1354 	pop	ar1
      000417 D0 02            [24] 1355 	pop	ar2
      000419 D0 03            [24] 1356 	pop	ar3
                                   1357 ;	main.c:210: while (x<y) {
      00041B E4               [12] 1358 	clr	a
      00041C F5 36            [12] 1359 	mov	_drawCircle_x_65536_104,a
      00041E F5 37            [12] 1360 	mov	(_drawCircle_x_65536_104 + 1),a
      000420 75 34 01         [24] 1361 	mov	_drawCircle_ddF_x_65536_104,#0x01
                                   1362 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_104 + 1),#0x00
      000423 F5 35            [12] 1363 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
      000425                       1364 00103$:
      000425 C3               [12] 1365 	clr	c
      000426 E5 36            [12] 1366 	mov	a,_drawCircle_x_65536_104
      000428 98               [12] 1367 	subb	a,r0
      000429 E5 37            [12] 1368 	mov	a,(_drawCircle_x_65536_104 + 1)
      00042B 64 80            [12] 1369 	xrl	a,#0x80
      00042D 89 F0            [24] 1370 	mov	b,r1
      00042F 63 F0 80         [24] 1371 	xrl	b,#0x80
      000432 95 F0            [12] 1372 	subb	a,b
      000434 40 01            [24] 1373 	jc	00121$
      000436 22               [24] 1374 	ret
      000437                       1375 00121$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 26.
Hexadecimal [24-Bits]



                                   1376 ;	main.c:211: if (f >= 0) {
      000437 E5 33            [12] 1377 	mov	a,(_drawCircle_f_65536_104 + 1)
      000439 20 E7 16         [24] 1378 	jb	acc.7,00102$
                                   1379 ;	main.c:212: y--;
      00043C 18               [12] 1380 	dec	r0
      00043D B8 FF 01         [24] 1381 	cjne	r0,#0xff,00123$
      000440 19               [12] 1382 	dec	r1
      000441                       1383 00123$:
                                   1384 ;	main.c:213: ddF_y += 2;
      000441 74 02            [12] 1385 	mov	a,#0x02
      000443 2A               [12] 1386 	add	a,r2
      000444 FA               [12] 1387 	mov	r2,a
      000445 E4               [12] 1388 	clr	a
      000446 3B               [12] 1389 	addc	a,r3
      000447 FB               [12] 1390 	mov	r3,a
                                   1391 ;	main.c:214: f += ddF_y;
      000448 EA               [12] 1392 	mov	a,r2
      000449 25 32            [12] 1393 	add	a,_drawCircle_f_65536_104
      00044B F5 32            [12] 1394 	mov	_drawCircle_f_65536_104,a
      00044D EB               [12] 1395 	mov	a,r3
      00044E 35 33            [12] 1396 	addc	a,(_drawCircle_f_65536_104 + 1)
      000450 F5 33            [12] 1397 	mov	(_drawCircle_f_65536_104 + 1),a
      000452                       1398 00102$:
                                   1399 ;	main.c:216: x++;
      000452 C0 02            [24] 1400 	push	ar2
      000454 C0 03            [24] 1401 	push	ar3
      000456 05 36            [12] 1402 	inc	_drawCircle_x_65536_104
      000458 E4               [12] 1403 	clr	a
      000459 B5 36 02         [24] 1404 	cjne	a,_drawCircle_x_65536_104,00124$
      00045C 05 37            [12] 1405 	inc	(_drawCircle_x_65536_104 + 1)
      00045E                       1406 00124$:
                                   1407 ;	main.c:217: ddF_x += 2;
      00045E 74 02            [12] 1408 	mov	a,#0x02
      000460 25 34            [12] 1409 	add	a,_drawCircle_ddF_x_65536_104
      000462 F5 34            [12] 1410 	mov	_drawCircle_ddF_x_65536_104,a
      000464 E4               [12] 1411 	clr	a
      000465 35 35            [12] 1412 	addc	a,(_drawCircle_ddF_x_65536_104 + 1)
      000467 F5 35            [12] 1413 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
                                   1414 ;	main.c:218: f += ddF_x;
      000469 E5 34            [12] 1415 	mov	a,_drawCircle_ddF_x_65536_104
      00046B 25 32            [12] 1416 	add	a,_drawCircle_f_65536_104
      00046D F5 32            [12] 1417 	mov	_drawCircle_f_65536_104,a
      00046F E5 35            [12] 1418 	mov	a,(_drawCircle_ddF_x_65536_104 + 1)
      000471 35 33            [12] 1419 	addc	a,(_drawCircle_f_65536_104 + 1)
      000473 F5 33            [12] 1420 	mov	(_drawCircle_f_65536_104 + 1),a
                                   1421 ;	main.c:220: drawPixel(x0 + x, y0 + y, color);
      000475 AC 30            [24] 1422 	mov	r4,_drawCircle_x0_65536_103
      000477 AD 31            [24] 1423 	mov	r5,(_drawCircle_x0_65536_103 + 1)
      000479 E5 36            [12] 1424 	mov	a,_drawCircle_x_65536_104
      00047B 2C               [12] 1425 	add	a,r4
      00047C FE               [12] 1426 	mov	r6,a
      00047D E5 37            [12] 1427 	mov	a,(_drawCircle_x_65536_104 + 1)
      00047F 3D               [12] 1428 	addc	a,r5
      000480 FF               [12] 1429 	mov	r7,a
      000481 8E 38            [24] 1430 	mov	_drawCircle_sloc0_1_0,r6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 27.
Hexadecimal [24-Bits]



      000483 8F 39            [24] 1431 	mov	(_drawCircle_sloc0_1_0 + 1),r7
      000485 AA 2A            [24] 1432 	mov	r2,_drawCircle_PARM_2
      000487 AB 2B            [24] 1433 	mov	r3,(_drawCircle_PARM_2 + 1)
      000489 E8               [12] 1434 	mov	a,r0
      00048A 2A               [12] 1435 	add	a,r2
      00048B FE               [12] 1436 	mov	r6,a
      00048C E9               [12] 1437 	mov	a,r1
      00048D 3B               [12] 1438 	addc	a,r3
      00048E FF               [12] 1439 	mov	r7,a
      00048F 8E 3A            [24] 1440 	mov	_drawCircle_sloc1_1_0,r6
      000491 8F 3B            [24] 1441 	mov	(_drawCircle_sloc1_1_0 + 1),r7
      000493 85 3A 26         [24] 1442 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      000496 85 3B 27         [24] 1443 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      000499 85 2E 28         [24] 1444 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00049C 85 2F 29         [24] 1445 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00049F 85 38 82         [24] 1446 	mov	dpl,_drawCircle_sloc0_1_0
      0004A2 85 39 83         [24] 1447 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      0004A5 C0 05            [24] 1448 	push	ar5
      0004A7 C0 04            [24] 1449 	push	ar4
      0004A9 C0 03            [24] 1450 	push	ar3
      0004AB C0 02            [24] 1451 	push	ar2
      0004AD C0 01            [24] 1452 	push	ar1
      0004AF C0 00            [24] 1453 	push	ar0
      0004B1 12 03 1E         [24] 1454 	lcall	_drawPixel
      0004B4 D0 00            [24] 1455 	pop	ar0
      0004B6 D0 01            [24] 1456 	pop	ar1
      0004B8 D0 02            [24] 1457 	pop	ar2
      0004BA D0 03            [24] 1458 	pop	ar3
      0004BC D0 04            [24] 1459 	pop	ar4
      0004BE D0 05            [24] 1460 	pop	ar5
                                   1461 ;	main.c:221: drawPixel(x0 - x, y0 + y, color);
      0004C0 EC               [12] 1462 	mov	a,r4
      0004C1 C3               [12] 1463 	clr	c
      0004C2 95 36            [12] 1464 	subb	a,_drawCircle_x_65536_104
      0004C4 FE               [12] 1465 	mov	r6,a
      0004C5 ED               [12] 1466 	mov	a,r5
      0004C6 95 37            [12] 1467 	subb	a,(_drawCircle_x_65536_104 + 1)
      0004C8 FF               [12] 1468 	mov	r7,a
      0004C9 8E 3C            [24] 1469 	mov	_drawCircle_sloc2_1_0,r6
      0004CB 8F 3D            [24] 1470 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      0004CD 85 3A 26         [24] 1471 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      0004D0 85 3B 27         [24] 1472 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      0004D3 85 2E 28         [24] 1473 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004D6 85 2F 29         [24] 1474 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004D9 85 3C 82         [24] 1475 	mov	dpl,_drawCircle_sloc2_1_0
      0004DC 85 3D 83         [24] 1476 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0004DF C0 05            [24] 1477 	push	ar5
      0004E1 C0 04            [24] 1478 	push	ar4
      0004E3 C0 03            [24] 1479 	push	ar3
      0004E5 C0 02            [24] 1480 	push	ar2
      0004E7 C0 01            [24] 1481 	push	ar1
      0004E9 C0 00            [24] 1482 	push	ar0
      0004EB 12 03 1E         [24] 1483 	lcall	_drawPixel
      0004EE D0 00            [24] 1484 	pop	ar0
      0004F0 D0 01            [24] 1485 	pop	ar1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 28.
Hexadecimal [24-Bits]



      0004F2 D0 02            [24] 1486 	pop	ar2
      0004F4 D0 03            [24] 1487 	pop	ar3
      0004F6 D0 04            [24] 1488 	pop	ar4
      0004F8 D0 05            [24] 1489 	pop	ar5
                                   1490 ;	main.c:222: drawPixel(x0 + x, y0 - y, color);
      0004FA EA               [12] 1491 	mov	a,r2
      0004FB C3               [12] 1492 	clr	c
      0004FC 98               [12] 1493 	subb	a,r0
      0004FD FE               [12] 1494 	mov	r6,a
      0004FE EB               [12] 1495 	mov	a,r3
      0004FF 99               [12] 1496 	subb	a,r1
      000500 FF               [12] 1497 	mov	r7,a
      000501 8E 26            [24] 1498 	mov	_drawPixel_PARM_2,r6
      000503 8F 27            [24] 1499 	mov	(_drawPixel_PARM_2 + 1),r7
      000505 85 2E 28         [24] 1500 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000508 85 2F 29         [24] 1501 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00050B 85 38 82         [24] 1502 	mov	dpl,_drawCircle_sloc0_1_0
      00050E 85 39 83         [24] 1503 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      000511 C0 07            [24] 1504 	push	ar7
      000513 C0 06            [24] 1505 	push	ar6
      000515 C0 05            [24] 1506 	push	ar5
      000517 C0 04            [24] 1507 	push	ar4
      000519 C0 03            [24] 1508 	push	ar3
      00051B C0 02            [24] 1509 	push	ar2
      00051D C0 01            [24] 1510 	push	ar1
      00051F C0 00            [24] 1511 	push	ar0
      000521 12 03 1E         [24] 1512 	lcall	_drawPixel
      000524 D0 00            [24] 1513 	pop	ar0
      000526 D0 01            [24] 1514 	pop	ar1
      000528 D0 02            [24] 1515 	pop	ar2
      00052A D0 03            [24] 1516 	pop	ar3
      00052C D0 04            [24] 1517 	pop	ar4
      00052E D0 05            [24] 1518 	pop	ar5
      000530 D0 06            [24] 1519 	pop	ar6
      000532 D0 07            [24] 1520 	pop	ar7
                                   1521 ;	main.c:223: drawPixel(x0 - x, y0 - y, color);
      000534 8E 26            [24] 1522 	mov	_drawPixel_PARM_2,r6
      000536 8F 27            [24] 1523 	mov	(_drawPixel_PARM_2 + 1),r7
      000538 85 2E 28         [24] 1524 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00053B 85 2F 29         [24] 1525 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00053E 85 3C 82         [24] 1526 	mov	dpl,_drawCircle_sloc2_1_0
      000541 85 3D 83         [24] 1527 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000544 C0 05            [24] 1528 	push	ar5
      000546 C0 04            [24] 1529 	push	ar4
      000548 C0 03            [24] 1530 	push	ar3
      00054A C0 02            [24] 1531 	push	ar2
      00054C C0 01            [24] 1532 	push	ar1
      00054E C0 00            [24] 1533 	push	ar0
      000550 12 03 1E         [24] 1534 	lcall	_drawPixel
      000553 D0 00            [24] 1535 	pop	ar0
      000555 D0 01            [24] 1536 	pop	ar1
      000557 D0 02            [24] 1537 	pop	ar2
      000559 D0 03            [24] 1538 	pop	ar3
      00055B D0 04            [24] 1539 	pop	ar4
      00055D D0 05            [24] 1540 	pop	ar5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 29.
Hexadecimal [24-Bits]



                                   1541 ;	main.c:224: drawPixel(x0 + y, y0 + x, color);
      00055F E8               [12] 1542 	mov	a,r0
      000560 2C               [12] 1543 	add	a,r4
      000561 FE               [12] 1544 	mov	r6,a
      000562 E9               [12] 1545 	mov	a,r1
      000563 3D               [12] 1546 	addc	a,r5
      000564 FF               [12] 1547 	mov	r7,a
      000565 8E 3C            [24] 1548 	mov	_drawCircle_sloc2_1_0,r6
      000567 8F 3D            [24] 1549 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      000569 E5 36            [12] 1550 	mov	a,_drawCircle_x_65536_104
      00056B 2A               [12] 1551 	add	a,r2
      00056C FE               [12] 1552 	mov	r6,a
      00056D E5 37            [12] 1553 	mov	a,(_drawCircle_x_65536_104 + 1)
      00056F 3B               [12] 1554 	addc	a,r3
      000570 FF               [12] 1555 	mov	r7,a
      000571 8E 26            [24] 1556 	mov	_drawPixel_PARM_2,r6
      000573 8F 27            [24] 1557 	mov	(_drawPixel_PARM_2 + 1),r7
      000575 85 2E 28         [24] 1558 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000578 85 2F 29         [24] 1559 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00057B 85 3C 82         [24] 1560 	mov	dpl,_drawCircle_sloc2_1_0
      00057E 85 3D 83         [24] 1561 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000581 C0 07            [24] 1562 	push	ar7
      000583 C0 06            [24] 1563 	push	ar6
      000585 C0 05            [24] 1564 	push	ar5
      000587 C0 04            [24] 1565 	push	ar4
      000589 C0 03            [24] 1566 	push	ar3
      00058B C0 02            [24] 1567 	push	ar2
      00058D C0 01            [24] 1568 	push	ar1
      00058F C0 00            [24] 1569 	push	ar0
      000591 12 03 1E         [24] 1570 	lcall	_drawPixel
      000594 D0 00            [24] 1571 	pop	ar0
      000596 D0 01            [24] 1572 	pop	ar1
      000598 D0 02            [24] 1573 	pop	ar2
      00059A D0 03            [24] 1574 	pop	ar3
      00059C D0 04            [24] 1575 	pop	ar4
      00059E D0 05            [24] 1576 	pop	ar5
      0005A0 D0 06            [24] 1577 	pop	ar6
      0005A2 D0 07            [24] 1578 	pop	ar7
                                   1579 ;	main.c:225: drawPixel(x0 - y, y0 + x, color);
      0005A4 EC               [12] 1580 	mov	a,r4
      0005A5 C3               [12] 1581 	clr	c
      0005A6 98               [12] 1582 	subb	a,r0
      0005A7 FC               [12] 1583 	mov	r4,a
      0005A8 ED               [12] 1584 	mov	a,r5
      0005A9 99               [12] 1585 	subb	a,r1
      0005AA FD               [12] 1586 	mov	r5,a
      0005AB 8E 26            [24] 1587 	mov	_drawPixel_PARM_2,r6
      0005AD 8F 27            [24] 1588 	mov	(_drawPixel_PARM_2 + 1),r7
      0005AF 85 2E 28         [24] 1589 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B2 85 2F 29         [24] 1590 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005B5 8C 82            [24] 1591 	mov	dpl,r4
      0005B7 8D 83            [24] 1592 	mov	dph,r5
      0005B9 C0 05            [24] 1593 	push	ar5
      0005BB C0 04            [24] 1594 	push	ar4
      0005BD C0 03            [24] 1595 	push	ar3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 30.
Hexadecimal [24-Bits]



      0005BF C0 02            [24] 1596 	push	ar2
      0005C1 C0 01            [24] 1597 	push	ar1
      0005C3 C0 00            [24] 1598 	push	ar0
      0005C5 12 03 1E         [24] 1599 	lcall	_drawPixel
      0005C8 D0 00            [24] 1600 	pop	ar0
      0005CA D0 01            [24] 1601 	pop	ar1
      0005CC D0 02            [24] 1602 	pop	ar2
      0005CE D0 03            [24] 1603 	pop	ar3
                                   1604 ;	main.c:226: drawPixel(x0 + y, y0 - x, color);
      0005D0 EA               [12] 1605 	mov	a,r2
      0005D1 C3               [12] 1606 	clr	c
      0005D2 95 36            [12] 1607 	subb	a,_drawCircle_x_65536_104
      0005D4 FA               [12] 1608 	mov	r2,a
      0005D5 EB               [12] 1609 	mov	a,r3
      0005D6 95 37            [12] 1610 	subb	a,(_drawCircle_x_65536_104 + 1)
      0005D8 FB               [12] 1611 	mov	r3,a
      0005D9 8A 26            [24] 1612 	mov	_drawPixel_PARM_2,r2
      0005DB 8B 27            [24] 1613 	mov	(_drawPixel_PARM_2 + 1),r3
      0005DD 85 2E 28         [24] 1614 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005E0 85 2F 29         [24] 1615 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005E3 85 3C 82         [24] 1616 	mov	dpl,_drawCircle_sloc2_1_0
      0005E6 85 3D 83         [24] 1617 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0005E9 C0 03            [24] 1618 	push	ar3
      0005EB C0 02            [24] 1619 	push	ar2
      0005ED C0 01            [24] 1620 	push	ar1
      0005EF C0 00            [24] 1621 	push	ar0
      0005F1 12 03 1E         [24] 1622 	lcall	_drawPixel
      0005F4 D0 00            [24] 1623 	pop	ar0
      0005F6 D0 01            [24] 1624 	pop	ar1
      0005F8 D0 02            [24] 1625 	pop	ar2
      0005FA D0 03            [24] 1626 	pop	ar3
      0005FC D0 04            [24] 1627 	pop	ar4
      0005FE D0 05            [24] 1628 	pop	ar5
                                   1629 ;	main.c:227: drawPixel(x0 - y, y0 - x, color);
      000600 8A 26            [24] 1630 	mov	_drawPixel_PARM_2,r2
      000602 8B 27            [24] 1631 	mov	(_drawPixel_PARM_2 + 1),r3
      000604 85 2E 28         [24] 1632 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000607 85 2F 29         [24] 1633 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00060A 8C 82            [24] 1634 	mov	dpl,r4
      00060C 8D 83            [24] 1635 	mov	dph,r5
      00060E C0 03            [24] 1636 	push	ar3
      000610 C0 02            [24] 1637 	push	ar2
      000612 C0 01            [24] 1638 	push	ar1
      000614 C0 00            [24] 1639 	push	ar0
      000616 12 03 1E         [24] 1640 	lcall	_drawPixel
      000619 D0 00            [24] 1641 	pop	ar0
      00061B D0 01            [24] 1642 	pop	ar1
      00061D D0 02            [24] 1643 	pop	ar2
      00061F D0 03            [24] 1644 	pop	ar3
      000621 D0 03            [24] 1645 	pop	ar3
      000623 D0 02            [24] 1646 	pop	ar2
                                   1647 ;	main.c:229: }
      000625 02 04 25         [24] 1648 	ljmp	00103$
                                   1649 ;------------------------------------------------------------
                                   1650 ;Allocation info for local variables in function 'testCircles'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 31.
Hexadecimal [24-Bits]



                                   1651 ;------------------------------------------------------------
                                   1652 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1653 ;radius                    Allocated to registers r7 
                                   1654 ;x                         Allocated to registers r1 r2 
                                   1655 ;y                         Allocated to registers r0 r6 
                                   1656 ;r2                        Allocated to registers r3 r4 
                                   1657 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1658 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1659 ;------------------------------------------------------------
                                   1660 ;	main.c:231: void testCircles (uint8_t radius, uint16_t color) {
                                   1661 ;	-----------------------------------------
                                   1662 ;	 function testCircles
                                   1663 ;	-----------------------------------------
      000628                       1664 _testCircles:
      000628 AF 82            [24] 1665 	mov	r7,dpl
                                   1666 ;	main.c:232: int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00062A 8F 05            [24] 1667 	mov	ar5,r7
      00062C 7E 00            [12] 1668 	mov	r6,#0x00
      00062E ED               [12] 1669 	mov	a,r5
      00062F 2D               [12] 1670 	add	a,r5
      000630 FB               [12] 1671 	mov	r3,a
      000631 EE               [12] 1672 	mov	a,r6
      000632 33               [12] 1673 	rlc	a
      000633 FC               [12] 1674 	mov	r4,a
      000634 A9 22            [24] 1675 	mov	r1,__width
      000636 AA 23            [24] 1676 	mov	r2,(__width + 1)
      000638 ED               [12] 1677 	mov	a,r5
      000639 29               [12] 1678 	add	a,r1
      00063A F5 40            [12] 1679 	mov	_testCircles_w_65536_108,a
      00063C EE               [12] 1680 	mov	a,r6
      00063D 3A               [12] 1681 	addc	a,r2
      00063E F5 41            [12] 1682 	mov	(_testCircles_w_65536_108 + 1),a
      000640 A8 24            [24] 1683 	mov	r0,__height
      000642 AA 25            [24] 1684 	mov	r2,(__height + 1)
      000644 ED               [12] 1685 	mov	a,r5
      000645 28               [12] 1686 	add	a,r0
      000646 F5 42            [12] 1687 	mov	_testCircles_h_65536_108,a
      000648 EE               [12] 1688 	mov	a,r6
      000649 3A               [12] 1689 	addc	a,r2
      00064A F5 43            [12] 1690 	mov	(_testCircles_h_65536_108 + 1),a
                                   1691 ;	main.c:234: for(x=0; x<w; x+=r2) {
      00064C 79 00            [12] 1692 	mov	r1,#0x00
      00064E 7A 00            [12] 1693 	mov	r2,#0x00
      000650                       1694 00107$:
      000650 C3               [12] 1695 	clr	c
      000651 E9               [12] 1696 	mov	a,r1
      000652 95 40            [12] 1697 	subb	a,_testCircles_w_65536_108
      000654 EA               [12] 1698 	mov	a,r2
      000655 64 80            [12] 1699 	xrl	a,#0x80
      000657 85 41 F0         [24] 1700 	mov	b,(_testCircles_w_65536_108 + 1)
      00065A 63 F0 80         [24] 1701 	xrl	b,#0x80
      00065D 95 F0            [12] 1702 	subb	a,b
      00065F 50 57            [24] 1703 	jnc	00109$
                                   1704 ;	main.c:235: for(y=0; y<h; y+=r2) {
      000661 78 00            [12] 1705 	mov	r0,#0x00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 32.
Hexadecimal [24-Bits]



      000663 7E 00            [12] 1706 	mov	r6,#0x00
      000665                       1707 00104$:
      000665 C3               [12] 1708 	clr	c
      000666 E8               [12] 1709 	mov	a,r0
      000667 95 42            [12] 1710 	subb	a,_testCircles_h_65536_108
      000669 EE               [12] 1711 	mov	a,r6
      00066A 64 80            [12] 1712 	xrl	a,#0x80
      00066C 85 43 F0         [24] 1713 	mov	b,(_testCircles_h_65536_108 + 1)
      00066F 63 F0 80         [24] 1714 	xrl	b,#0x80
      000672 95 F0            [12] 1715 	subb	a,b
      000674 50 3A            [24] 1716 	jnc	00108$
                                   1717 ;	main.c:236: drawCircle(x, y, radius, color);
      000676 89 82            [24] 1718 	mov	dpl,r1
      000678 8A 83            [24] 1719 	mov	dph,r2
      00067A 88 2A            [24] 1720 	mov	_drawCircle_PARM_2,r0
      00067C 8E 2B            [24] 1721 	mov	(_drawCircle_PARM_2 + 1),r6
      00067E 8F 2C            [24] 1722 	mov	_drawCircle_PARM_3,r7
      000680 75 2D 00         [24] 1723 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000683 85 3E 2E         [24] 1724 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000686 85 3F 2F         [24] 1725 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000689 C0 07            [24] 1726 	push	ar7
      00068B C0 06            [24] 1727 	push	ar6
      00068D C0 04            [24] 1728 	push	ar4
      00068F C0 03            [24] 1729 	push	ar3
      000691 C0 02            [24] 1730 	push	ar2
      000693 C0 01            [24] 1731 	push	ar1
      000695 C0 00            [24] 1732 	push	ar0
      000697 12 03 75         [24] 1733 	lcall	_drawCircle
      00069A D0 00            [24] 1734 	pop	ar0
      00069C D0 01            [24] 1735 	pop	ar1
      00069E D0 02            [24] 1736 	pop	ar2
      0006A0 D0 03            [24] 1737 	pop	ar3
      0006A2 D0 04            [24] 1738 	pop	ar4
      0006A4 D0 06            [24] 1739 	pop	ar6
      0006A6 D0 07            [24] 1740 	pop	ar7
                                   1741 ;	main.c:235: for(y=0; y<h; y+=r2) {
      0006A8 EB               [12] 1742 	mov	a,r3
      0006A9 28               [12] 1743 	add	a,r0
      0006AA F8               [12] 1744 	mov	r0,a
      0006AB EC               [12] 1745 	mov	a,r4
      0006AC 3E               [12] 1746 	addc	a,r6
      0006AD FE               [12] 1747 	mov	r6,a
      0006AE 80 B5            [24] 1748 	sjmp	00104$
      0006B0                       1749 00108$:
                                   1750 ;	main.c:234: for(x=0; x<w; x+=r2) {
      0006B0 EB               [12] 1751 	mov	a,r3
      0006B1 29               [12] 1752 	add	a,r1
      0006B2 F9               [12] 1753 	mov	r1,a
      0006B3 EC               [12] 1754 	mov	a,r4
      0006B4 3A               [12] 1755 	addc	a,r2
      0006B5 FA               [12] 1756 	mov	r2,a
      0006B6 80 98            [24] 1757 	sjmp	00107$
      0006B8                       1758 00109$:
                                   1759 ;	main.c:239: }
      0006B8 22               [24] 1760 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 33.
Hexadecimal [24-Bits]



                                   1761 ;------------------------------------------------------------
                                   1762 ;Allocation info for local variables in function 'fillRect'
                                   1763 ;------------------------------------------------------------
                                   1764 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1765 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1766 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1767 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1768 ;x                         Allocated to registers 
                                   1769 ;------------------------------------------------------------
                                   1770 ;	main.c:241: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1771 ;	-----------------------------------------
                                   1772 ;	 function fillRect
                                   1773 ;	-----------------------------------------
      0006B9                       1774 _fillRect:
      0006B9 AE 82            [24] 1775 	mov	r6,dpl
      0006BB AF 83            [24] 1776 	mov	r7,dph
                                   1777 ;	main.c:242: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0006BD 8E 04            [24] 1778 	mov	ar4,r6
      0006BF 8F 05            [24] 1779 	mov	ar5,r7
      0006C1 C3               [12] 1780 	clr	c
      0006C2 EC               [12] 1781 	mov	a,r4
      0006C3 94 F0            [12] 1782 	subb	a,#0xf0
      0006C5 ED               [12] 1783 	mov	a,r5
      0006C6 94 00            [12] 1784 	subb	a,#0x00
      0006C8 50 0D            [24] 1785 	jnc	00101$
      0006CA AC 44            [24] 1786 	mov	r4,_fillRect_PARM_2
      0006CC AD 45            [24] 1787 	mov	r5,(_fillRect_PARM_2 + 1)
      0006CE C3               [12] 1788 	clr	c
      0006CF EC               [12] 1789 	mov	a,r4
      0006D0 94 40            [12] 1790 	subb	a,#0x40
      0006D2 ED               [12] 1791 	mov	a,r5
      0006D3 94 01            [12] 1792 	subb	a,#0x01
      0006D5 40 01            [24] 1793 	jc	00102$
      0006D7                       1794 00101$:
                                   1795 ;	main.c:244: return;
      0006D7 22               [24] 1796 	ret
      0006D8                       1797 00102$:
                                   1798 ;	main.c:247: if ((x+w-1) >= TFTWIDTH)
      0006D8 E5 46            [12] 1799 	mov	a,_fillRect_PARM_3
      0006DA 2E               [12] 1800 	add	a,r6
      0006DB FC               [12] 1801 	mov	r4,a
      0006DC E5 47            [12] 1802 	mov	a,(_fillRect_PARM_3 + 1)
      0006DE 3F               [12] 1803 	addc	a,r7
      0006DF FD               [12] 1804 	mov	r5,a
      0006E0 1C               [12] 1805 	dec	r4
      0006E1 BC FF 01         [24] 1806 	cjne	r4,#0xff,00161$
      0006E4 1D               [12] 1807 	dec	r5
      0006E5                       1808 00161$:
      0006E5 C3               [12] 1809 	clr	c
      0006E6 EC               [12] 1810 	mov	a,r4
      0006E7 94 F0            [12] 1811 	subb	a,#0xf0
      0006E9 ED               [12] 1812 	mov	a,r5
      0006EA 94 00            [12] 1813 	subb	a,#0x00
      0006EC 40 0A            [24] 1814 	jc	00105$
                                   1815 ;	main.c:249: w = TFTWIDTH-x;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 34.
Hexadecimal [24-Bits]



      0006EE 74 F0            [12] 1816 	mov	a,#0xf0
      0006F0 C3               [12] 1817 	clr	c
      0006F1 9E               [12] 1818 	subb	a,r6
      0006F2 F5 46            [12] 1819 	mov	_fillRect_PARM_3,a
      0006F4 E4               [12] 1820 	clr	a
      0006F5 9F               [12] 1821 	subb	a,r7
      0006F6 F5 47            [12] 1822 	mov	(_fillRect_PARM_3 + 1),a
      0006F8                       1823 00105$:
                                   1824 ;	main.c:252: if ((y+h-1) >= TFTHEIGHT)
      0006F8 E5 48            [12] 1825 	mov	a,_fillRect_PARM_4
      0006FA 25 44            [12] 1826 	add	a,_fillRect_PARM_2
      0006FC FC               [12] 1827 	mov	r4,a
      0006FD E5 49            [12] 1828 	mov	a,(_fillRect_PARM_4 + 1)
      0006FF 35 45            [12] 1829 	addc	a,(_fillRect_PARM_2 + 1)
      000701 FD               [12] 1830 	mov	r5,a
      000702 1C               [12] 1831 	dec	r4
      000703 BC FF 01         [24] 1832 	cjne	r4,#0xff,00163$
      000706 1D               [12] 1833 	dec	r5
      000707                       1834 00163$:
      000707 C3               [12] 1835 	clr	c
      000708 EC               [12] 1836 	mov	a,r4
      000709 94 40            [12] 1837 	subb	a,#0x40
      00070B ED               [12] 1838 	mov	a,r5
      00070C 94 01            [12] 1839 	subb	a,#0x01
      00070E 40 0D            [24] 1840 	jc	00107$
                                   1841 ;	main.c:254: h = TFTHEIGHT-y;
      000710 74 40            [12] 1842 	mov	a,#0x40
      000712 C3               [12] 1843 	clr	c
      000713 95 44            [12] 1844 	subb	a,_fillRect_PARM_2
      000715 F5 48            [12] 1845 	mov	_fillRect_PARM_4,a
      000717 74 01            [12] 1846 	mov	a,#0x01
      000719 95 45            [12] 1847 	subb	a,(_fillRect_PARM_2 + 1)
      00071B F5 49            [12] 1848 	mov	(_fillRect_PARM_4 + 1),a
      00071D                       1849 00107$:
                                   1850 ;	main.c:257: setAddress(x, y, x+w-1, y+h-1);
      00071D E5 46            [12] 1851 	mov	a,_fillRect_PARM_3
      00071F 2E               [12] 1852 	add	a,r6
      000720 FC               [12] 1853 	mov	r4,a
      000721 E5 47            [12] 1854 	mov	a,(_fillRect_PARM_3 + 1)
      000723 3F               [12] 1855 	addc	a,r7
      000724 FD               [12] 1856 	mov	r5,a
      000725 1C               [12] 1857 	dec	r4
      000726 BC FF 01         [24] 1858 	cjne	r4,#0xff,00165$
      000729 1D               [12] 1859 	dec	r5
      00072A                       1860 00165$:
      00072A 8C 02            [24] 1861 	mov	_setAddress_PARM_3,r4
      00072C 8D 03            [24] 1862 	mov	(_setAddress_PARM_3 + 1),r5
      00072E E5 48            [12] 1863 	mov	a,_fillRect_PARM_4
      000730 25 44            [12] 1864 	add	a,_fillRect_PARM_2
      000732 FC               [12] 1865 	mov	r4,a
      000733 E5 49            [12] 1866 	mov	a,(_fillRect_PARM_4 + 1)
      000735 35 45            [12] 1867 	addc	a,(_fillRect_PARM_2 + 1)
      000737 FD               [12] 1868 	mov	r5,a
      000738 1C               [12] 1869 	dec	r4
      000739 BC FF 01         [24] 1870 	cjne	r4,#0xff,00166$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 35.
Hexadecimal [24-Bits]



      00073C 1D               [12] 1871 	dec	r5
      00073D                       1872 00166$:
      00073D 8C 04            [24] 1873 	mov	_setAddress_PARM_4,r4
      00073F 8D 05            [24] 1874 	mov	(_setAddress_PARM_4 + 1),r5
      000741 85 44 00         [24] 1875 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000744 85 45 01         [24] 1876 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000747 8E 82            [24] 1877 	mov	dpl,r6
      000749 8F 83            [24] 1878 	mov	dph,r7
      00074B 12 01 42         [24] 1879 	lcall	_setAddress
                                   1880 ;	main.c:260: write8Reg(0x2C);
                                   1881 ;	assignBit
      00074E C2 B5            [12] 1882 	clr	_P3_5
                                   1883 ;	assignBit
      000750 D2 B4            [12] 1884 	setb	_P3_4
      000752 85 12 82         [24] 1885 	mov	dpl,_lcd_address
      000755 85 13 83         [24] 1886 	mov	dph,(_lcd_address + 1)
      000758 74 2C            [12] 1887 	mov	a,#0x2c
      00075A F0               [24] 1888 	movx	@dptr,a
                                   1889 ;	assignBit
      00075B C2 B4            [12] 1890 	clr	_P3_4
                                   1891 ;	main.c:261: CD = 1;
                                   1892 ;	assignBit
      00075D D2 B5            [12] 1893 	setb	_P3_5
                                   1894 ;	main.c:262: for(y=h; y>0; y--)
      00075F AF 4B            [24] 1895 	mov	r7,(_fillRect_PARM_5 + 1)
      000761 AD 48            [24] 1896 	mov	r5,_fillRect_PARM_4
      000763 AE 49            [24] 1897 	mov	r6,(_fillRect_PARM_4 + 1)
      000765                       1898 00114$:
      000765 ED               [12] 1899 	mov	a,r5
      000766 4E               [12] 1900 	orl	a,r6
      000767 60 30            [24] 1901 	jz	00116$
                                   1902 ;	main.c:264: for(x=w; x>0; x--)
      000769 AB 46            [24] 1903 	mov	r3,_fillRect_PARM_3
      00076B AC 47            [24] 1904 	mov	r4,(_fillRect_PARM_3 + 1)
      00076D                       1905 00111$:
      00076D EB               [12] 1906 	mov	a,r3
      00076E 4C               [12] 1907 	orl	a,r4
      00076F 60 21            [24] 1908 	jz	00115$
                                   1909 ;	main.c:267: write8(color>>8); write8(color);
                                   1910 ;	assignBit
      000771 D2 B4            [12] 1911 	setb	_P3_4
      000773 85 12 82         [24] 1912 	mov	dpl,_lcd_address
      000776 85 13 83         [24] 1913 	mov	dph,(_lcd_address + 1)
      000779 EF               [12] 1914 	mov	a,r7
      00077A F0               [24] 1915 	movx	@dptr,a
                                   1916 ;	assignBit
      00077B C2 B4            [12] 1917 	clr	_P3_4
                                   1918 ;	assignBit
      00077D D2 B4            [12] 1919 	setb	_P3_4
      00077F 85 12 82         [24] 1920 	mov	dpl,_lcd_address
      000782 85 13 83         [24] 1921 	mov	dph,(_lcd_address + 1)
      000785 E5 4A            [12] 1922 	mov	a,_fillRect_PARM_5
      000787 FA               [12] 1923 	mov	r2,a
      000788 F0               [24] 1924 	movx	@dptr,a
                                   1925 ;	assignBit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 36.
Hexadecimal [24-Bits]



      000789 C2 B4            [12] 1926 	clr	_P3_4
                                   1927 ;	main.c:264: for(x=w; x>0; x--)
      00078B 1B               [12] 1928 	dec	r3
      00078C BB FF 01         [24] 1929 	cjne	r3,#0xff,00169$
      00078F 1C               [12] 1930 	dec	r4
      000790                       1931 00169$:
      000790 80 DB            [24] 1932 	sjmp	00111$
      000792                       1933 00115$:
                                   1934 ;	main.c:262: for(y=h; y>0; y--)
      000792 1D               [12] 1935 	dec	r5
      000793 BD FF 01         [24] 1936 	cjne	r5,#0xff,00170$
      000796 1E               [12] 1937 	dec	r6
      000797                       1938 00170$:
      000797 80 CC            [24] 1939 	sjmp	00114$
      000799                       1940 00116$:
                                   1941 ;	main.c:271: }
      000799 22               [24] 1942 	ret
                                   1943 ;------------------------------------------------------------
                                   1944 ;Allocation info for local variables in function 'fillScreen'
                                   1945 ;------------------------------------------------------------
                                   1946 ;Color                     Allocated to registers r6 r7 
                                   1947 ;len                       Allocated to registers 
                                   1948 ;blocks                    Allocated to registers r4 r7 
                                   1949 ;i                         Allocated to registers r3 
                                   1950 ;hi                        Allocated to registers r5 
                                   1951 ;lo                        Allocated to registers r6 
                                   1952 ;------------------------------------------------------------
                                   1953 ;	main.c:273: void fillScreen (uint16_t Color) {
                                   1954 ;	-----------------------------------------
                                   1955 ;	 function fillScreen
                                   1956 ;	-----------------------------------------
      00079A                       1957 _fillScreen:
      00079A AE 82            [24] 1958 	mov	r6,dpl
      00079C AF 83            [24] 1959 	mov	r7,dph
                                   1960 ;	main.c:278: uint8_t  i, hi = Color >> 8,
      00079E 8F 05            [24] 1961 	mov	ar5,r7
                                   1962 ;	main.c:279: lo = Color;
                                   1963 ;	main.c:282: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007A0 E4               [12] 1964 	clr	a
      0007A1 F5 00            [12] 1965 	mov	_setAddress_PARM_2,a
      0007A3 F5 01            [12] 1966 	mov	(_setAddress_PARM_2 + 1),a
      0007A5 75 02 EF         [24] 1967 	mov	_setAddress_PARM_3,#0xef
                                   1968 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007A8 F5 03            [12] 1969 	mov	(_setAddress_PARM_3 + 1),a
      0007AA 75 04 3F         [24] 1970 	mov	_setAddress_PARM_4,#0x3f
      0007AD 75 05 01         [24] 1971 	mov	(_setAddress_PARM_4 + 1),#0x01
      0007B0 90 00 00         [24] 1972 	mov	dptr,#0x0000
      0007B3 C0 06            [24] 1973 	push	ar6
      0007B5 C0 05            [24] 1974 	push	ar5
      0007B7 12 01 42         [24] 1975 	lcall	_setAddress
      0007BA D0 05            [24] 1976 	pop	ar5
      0007BC D0 06            [24] 1977 	pop	ar6
                                   1978 ;	main.c:284: write8Reg(0x2C);
                                   1979 ;	assignBit
      0007BE C2 B5            [12] 1980 	clr	_P3_5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 37.
Hexadecimal [24-Bits]



                                   1981 ;	assignBit
      0007C0 D2 B4            [12] 1982 	setb	_P3_4
      0007C2 85 12 82         [24] 1983 	mov	dpl,_lcd_address
      0007C5 85 13 83         [24] 1984 	mov	dph,(_lcd_address + 1)
      0007C8 74 2C            [12] 1985 	mov	a,#0x2c
      0007CA F0               [24] 1986 	movx	@dptr,a
                                   1987 ;	assignBit
      0007CB C2 B4            [12] 1988 	clr	_P3_4
                                   1989 ;	main.c:285: CD = 1;
                                   1990 ;	assignBit
      0007CD D2 B5            [12] 1991 	setb	_P3_5
                                   1992 ;	main.c:286: write8(hi); write8(lo);
                                   1993 ;	assignBit
      0007CF D2 B4            [12] 1994 	setb	_P3_4
      0007D1 85 12 82         [24] 1995 	mov	dpl,_lcd_address
      0007D4 85 13 83         [24] 1996 	mov	dph,(_lcd_address + 1)
      0007D7 ED               [12] 1997 	mov	a,r5
      0007D8 F0               [24] 1998 	movx	@dptr,a
                                   1999 ;	assignBit
      0007D9 C2 B4            [12] 2000 	clr	_P3_4
                                   2001 ;	assignBit
      0007DB D2 B4            [12] 2002 	setb	_P3_4
      0007DD 85 12 82         [24] 2003 	mov	dpl,_lcd_address
      0007E0 85 13 83         [24] 2004 	mov	dph,(_lcd_address + 1)
      0007E3 EE               [12] 2005 	mov	a,r6
      0007E4 F0               [24] 2006 	movx	@dptr,a
                                   2007 ;	assignBit
      0007E5 C2 B4            [12] 2008 	clr	_P3_4
                                   2009 ;	main.c:289: while (blocks--) {
      0007E7 7C B0            [12] 2010 	mov	r4,#0xb0
      0007E9 7F 04            [12] 2011 	mov	r7,#0x04
      0007EB                       2012 00104$:
      0007EB 8C 02            [24] 2013 	mov	ar2,r4
      0007ED 8F 03            [24] 2014 	mov	ar3,r7
      0007EF 1C               [12] 2015 	dec	r4
      0007F0 BC FF 01         [24] 2016 	cjne	r4,#0xff,00140$
      0007F3 1F               [12] 2017 	dec	r7
      0007F4                       2018 00140$:
      0007F4 EA               [12] 2019 	mov	a,r2
      0007F5 4B               [12] 2020 	orl	a,r3
      0007F6 60 66            [24] 2021 	jz	00106$
                                   2022 ;	main.c:291: do {
      0007F8 7B 10            [12] 2023 	mov	r3,#0x10
      0007FA                       2024 00101$:
                                   2025 ;	main.c:293: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2026 ;	assignBit
      0007FA D2 B4            [12] 2027 	setb	_P3_4
      0007FC 85 12 82         [24] 2028 	mov	dpl,_lcd_address
      0007FF 85 13 83         [24] 2029 	mov	dph,(_lcd_address + 1)
      000802 ED               [12] 2030 	mov	a,r5
      000803 F0               [24] 2031 	movx	@dptr,a
                                   2032 ;	assignBit
      000804 C2 B4            [12] 2033 	clr	_P3_4
                                   2034 ;	assignBit
      000806 D2 B4            [12] 2035 	setb	_P3_4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 38.
Hexadecimal [24-Bits]



      000808 85 12 82         [24] 2036 	mov	dpl,_lcd_address
      00080B 85 13 83         [24] 2037 	mov	dph,(_lcd_address + 1)
      00080E EE               [12] 2038 	mov	a,r6
      00080F F0               [24] 2039 	movx	@dptr,a
                                   2040 ;	assignBit
      000810 C2 B4            [12] 2041 	clr	_P3_4
                                   2042 ;	assignBit
      000812 D2 B4            [12] 2043 	setb	_P3_4
      000814 85 12 82         [24] 2044 	mov	dpl,_lcd_address
      000817 85 13 83         [24] 2045 	mov	dph,(_lcd_address + 1)
      00081A ED               [12] 2046 	mov	a,r5
      00081B F0               [24] 2047 	movx	@dptr,a
                                   2048 ;	assignBit
      00081C C2 B4            [12] 2049 	clr	_P3_4
                                   2050 ;	assignBit
      00081E D2 B4            [12] 2051 	setb	_P3_4
      000820 85 12 82         [24] 2052 	mov	dpl,_lcd_address
      000823 85 13 83         [24] 2053 	mov	dph,(_lcd_address + 1)
      000826 EE               [12] 2054 	mov	a,r6
      000827 F0               [24] 2055 	movx	@dptr,a
                                   2056 ;	assignBit
      000828 C2 B4            [12] 2057 	clr	_P3_4
                                   2058 ;	main.c:294: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2059 ;	assignBit
      00082A D2 B4            [12] 2060 	setb	_P3_4
      00082C 85 12 82         [24] 2061 	mov	dpl,_lcd_address
      00082F 85 13 83         [24] 2062 	mov	dph,(_lcd_address + 1)
      000832 ED               [12] 2063 	mov	a,r5
      000833 F0               [24] 2064 	movx	@dptr,a
                                   2065 ;	assignBit
      000834 C2 B4            [12] 2066 	clr	_P3_4
                                   2067 ;	assignBit
      000836 D2 B4            [12] 2068 	setb	_P3_4
      000838 85 12 82         [24] 2069 	mov	dpl,_lcd_address
      00083B 85 13 83         [24] 2070 	mov	dph,(_lcd_address + 1)
      00083E EE               [12] 2071 	mov	a,r6
      00083F F0               [24] 2072 	movx	@dptr,a
                                   2073 ;	assignBit
      000840 C2 B4            [12] 2074 	clr	_P3_4
                                   2075 ;	assignBit
      000842 D2 B4            [12] 2076 	setb	_P3_4
      000844 85 12 82         [24] 2077 	mov	dpl,_lcd_address
      000847 85 13 83         [24] 2078 	mov	dph,(_lcd_address + 1)
      00084A ED               [12] 2079 	mov	a,r5
      00084B F0               [24] 2080 	movx	@dptr,a
                                   2081 ;	assignBit
      00084C C2 B4            [12] 2082 	clr	_P3_4
                                   2083 ;	assignBit
      00084E D2 B4            [12] 2084 	setb	_P3_4
      000850 85 12 82         [24] 2085 	mov	dpl,_lcd_address
      000853 85 13 83         [24] 2086 	mov	dph,(_lcd_address + 1)
      000856 EE               [12] 2087 	mov	a,r6
      000857 F0               [24] 2088 	movx	@dptr,a
                                   2089 ;	assignBit
      000858 C2 B4            [12] 2090 	clr	_P3_4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 39.
Hexadecimal [24-Bits]



                                   2091 ;	main.c:295: } while(--i);
      00085A DB 9E            [24] 2092 	djnz	r3,00101$
      00085C 80 8D            [24] 2093 	sjmp	00104$
      00085E                       2094 00106$:
                                   2095 ;	main.c:297: for (i = (char)len & 63; i--; ) {
      00085E 7F 3F            [12] 2096 	mov	r7,#0x3f
      000860                       2097 00109$:
      000860 8F 04            [24] 2098 	mov	ar4,r7
      000862 1F               [12] 2099 	dec	r7
      000863 EC               [12] 2100 	mov	a,r4
      000864 60 1A            [24] 2101 	jz	00111$
                                   2102 ;	main.c:299: write8(hi); write8(lo);
                                   2103 ;	assignBit
      000866 D2 B4            [12] 2104 	setb	_P3_4
      000868 85 12 82         [24] 2105 	mov	dpl,_lcd_address
      00086B 85 13 83         [24] 2106 	mov	dph,(_lcd_address + 1)
      00086E ED               [12] 2107 	mov	a,r5
      00086F F0               [24] 2108 	movx	@dptr,a
                                   2109 ;	assignBit
      000870 C2 B4            [12] 2110 	clr	_P3_4
                                   2111 ;	assignBit
      000872 D2 B4            [12] 2112 	setb	_P3_4
      000874 85 12 82         [24] 2113 	mov	dpl,_lcd_address
      000877 85 13 83         [24] 2114 	mov	dph,(_lcd_address + 1)
      00087A EE               [12] 2115 	mov	a,r6
      00087B F0               [24] 2116 	movx	@dptr,a
                                   2117 ;	assignBit
      00087C C2 B4            [12] 2118 	clr	_P3_4
      00087E 80 E0            [24] 2119 	sjmp	00109$
      000880                       2120 00111$:
                                   2121 ;	main.c:302: }
      000880 22               [24] 2122 	ret
                                   2123 ;------------------------------------------------------------
                                   2124 ;Allocation info for local variables in function 'drawChar'
                                   2125 ;------------------------------------------------------------
                                   2126 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2127 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2128 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2129 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2130 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2131 ;x                         Allocated to registers r6 r7 
                                   2132 ;i                         Allocated with name '_drawChar_i_65537_149'
                                   2133 ;line                      Allocated with name '_drawChar_line_196609_151'
                                   2134 ;j                         Allocated with name '_drawChar_j_196610_154'
                                   2135 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2136 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2137 ;------------------------------------------------------------
                                   2138 ;	main.c:303: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2139 ;	-----------------------------------------
                                   2140 ;	 function drawChar
                                   2141 ;	-----------------------------------------
      000881                       2142 _drawChar:
      000881 AE 82            [24] 2143 	mov	r6,dpl
      000883 AF 83            [24] 2144 	mov	r7,dph
                                   2145 ;	main.c:304: if ((x >=TFTWIDTH) ||
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 40.
Hexadecimal [24-Bits]



      000885 C3               [12] 2146 	clr	c
      000886 EE               [12] 2147 	mov	a,r6
      000887 94 F0            [12] 2148 	subb	a,#0xf0
      000889 EF               [12] 2149 	mov	a,r7
      00088A 64 80            [12] 2150 	xrl	a,#0x80
      00088C 94 80            [12] 2151 	subb	a,#0x80
      00088E 50 67            [24] 2152 	jnc	00101$
                                   2153 ;	main.c:305: (y >=TFTHEIGHT)           ||
      000890 AC 4C            [24] 2154 	mov	r4,_drawChar_PARM_2
      000892 AD 4D            [24] 2155 	mov	r5,(_drawChar_PARM_2 + 1)
      000894 C3               [12] 2156 	clr	c
      000895 EC               [12] 2157 	mov	a,r4
      000896 94 40            [12] 2158 	subb	a,#0x40
      000898 ED               [12] 2159 	mov	a,r5
      000899 64 80            [12] 2160 	xrl	a,#0x80
      00089B 94 81            [12] 2161 	subb	a,#0x81
      00089D 50 58            [24] 2162 	jnc	00101$
                                   2163 ;	main.c:306: ((x + 6 * size - 1) < 0) ||
      00089F AA 53            [24] 2164 	mov	r2,_drawChar_PARM_6
      0008A1 7B 00            [12] 2165 	mov	r3,#0x00
u     0008A3 8A 00            [24] 2166 	mov	__mulint_PARM_2,r2
u     0008A5 8B 01            [24] 2167 	mov	(__mulint_PARM_2 + 1),r3
      0008A7 90 00 06         [24] 2168 	mov	dptr,#0x0006
      0008AA C0 07            [24] 2169 	push	ar7
      0008AC C0 06            [24] 2170 	push	ar6
      0008AE C0 05            [24] 2171 	push	ar5
      0008B0 C0 04            [24] 2172 	push	ar4
      0008B2 C0 03            [24] 2173 	push	ar3
      0008B4 C0 02            [24] 2174 	push	ar2
u     0008B6 12 00 00         [24] 2175 	lcall	__mulint
      0008B9 A8 82            [24] 2176 	mov	r0,dpl
      0008BB A9 83            [24] 2177 	mov	r1,dph
      0008BD D0 02            [24] 2178 	pop	ar2
      0008BF D0 03            [24] 2179 	pop	ar3
      0008C1 D0 04            [24] 2180 	pop	ar4
      0008C3 D0 05            [24] 2181 	pop	ar5
      0008C5 D0 06            [24] 2182 	pop	ar6
      0008C7 D0 07            [24] 2183 	pop	ar7
      0008C9 E8               [12] 2184 	mov	a,r0
      0008CA 2E               [12] 2185 	add	a,r6
      0008CB F8               [12] 2186 	mov	r0,a
      0008CC E9               [12] 2187 	mov	a,r1
      0008CD 3F               [12] 2188 	addc	a,r7
      0008CE F9               [12] 2189 	mov	r1,a
      0008CF 18               [12] 2190 	dec	r0
      0008D0 B8 FF 01         [24] 2191 	cjne	r0,#0xff,00176$
      0008D3 19               [12] 2192 	dec	r1
      0008D4                       2193 00176$:
      0008D4 E9               [12] 2194 	mov	a,r1
      0008D5 20 E7 1F         [24] 2195 	jb	acc.7,00101$
                                   2196 ;	main.c:307: ((y + 8 * size - 1) < 0))
      0008D8 EB               [12] 2197 	mov	a,r3
      0008D9 C4               [12] 2198 	swap	a
      0008DA 03               [12] 2199 	rr	a
      0008DB 54 F8            [12] 2200 	anl	a,#0xf8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 41.
Hexadecimal [24-Bits]



      0008DD CA               [12] 2201 	xch	a,r2
      0008DE C4               [12] 2202 	swap	a
      0008DF 03               [12] 2203 	rr	a
      0008E0 CA               [12] 2204 	xch	a,r2
      0008E1 6A               [12] 2205 	xrl	a,r2
      0008E2 CA               [12] 2206 	xch	a,r2
      0008E3 54 F8            [12] 2207 	anl	a,#0xf8
      0008E5 CA               [12] 2208 	xch	a,r2
      0008E6 6A               [12] 2209 	xrl	a,r2
      0008E7 FB               [12] 2210 	mov	r3,a
      0008E8 EA               [12] 2211 	mov	a,r2
      0008E9 2C               [12] 2212 	add	a,r4
      0008EA FA               [12] 2213 	mov	r2,a
      0008EB EB               [12] 2214 	mov	a,r3
      0008EC 3D               [12] 2215 	addc	a,r5
      0008ED FB               [12] 2216 	mov	r3,a
      0008EE 1A               [12] 2217 	dec	r2
      0008EF BA FF 01         [24] 2218 	cjne	r2,#0xff,00178$
      0008F2 1B               [12] 2219 	dec	r3
      0008F3                       2220 00178$:
      0008F3 EB               [12] 2221 	mov	a,r3
      0008F4 30 E7 01         [24] 2222 	jnb	acc.7,00138$
      0008F7                       2223 00101$:
                                   2224 ;	main.c:309: return;
      0008F7 22               [24] 2225 	ret
                                   2226 ;	main.c:314: for (i=0; i<6; i++ )
      0008F8                       2227 00138$:
      0008F8 74 01            [12] 2228 	mov	a,#0x01
      0008FA B5 53 04         [24] 2229 	cjne	a,_drawChar_PARM_6,00180$
      0008FD 74 01            [12] 2230 	mov	a,#0x01
      0008FF 80 01            [24] 2231 	sjmp	00181$
      000901                       2232 00180$:
      000901 E4               [12] 2233 	clr	a
      000902                       2234 00181$:
      000902 FB               [12] 2235 	mov	r3,a
      000903 FA               [12] 2236 	mov	r2,a
      000904 E5 4F            [12] 2237 	mov	a,_drawChar_PARM_4
      000906 B5 51 08         [24] 2238 	cjne	a,_drawChar_PARM_5,00182$
      000909 E5 50            [12] 2239 	mov	a,(_drawChar_PARM_4 + 1)
      00090B B5 52 03         [24] 2240 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      00090E D3               [12] 2241 	setb	c
      00090F 80 01            [24] 2242 	sjmp	00183$
      000911                       2243 00182$:
      000911 C3               [12] 2244 	clr	c
      000912                       2245 00183$:
      000912 92 00            [24] 2246 	mov	_drawChar_sloc0_1_0,c
      000914 75 54 00         [24] 2247 	mov	_drawChar_i_65537_149,#0x00
      000917                       2248 00124$:
                                   2249 ;	main.c:318: if (i == 5)
      000917 74 05            [12] 2250 	mov	a,#0x05
      000919 B5 54 05         [24] 2251 	cjne	a,_drawChar_i_65537_149,00107$
                                   2252 ;	main.c:320: line = 0x0;
      00091C 75 55 00         [24] 2253 	mov	_drawChar_line_196609_151,#0x00
      00091F 80 47            [24] 2254 	sjmp	00136$
      000921                       2255 00107$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 42.
Hexadecimal [24-Bits]



                                   2256 ;	main.c:324: line = pgm_read_byte(font+(c*5)+i);
      000921 C0 02            [24] 2257 	push	ar2
u     000923 85 4E 00         [24] 2258 	mov	__mulint_PARM_2,_drawChar_PARM_3
u     000926 75 01 00         [24] 2259 	mov	(__mulint_PARM_2 + 1),#0x00
      000929 90 00 05         [24] 2260 	mov	dptr,#0x0005
      00092C C0 07            [24] 2261 	push	ar7
      00092E C0 06            [24] 2262 	push	ar6
      000930 C0 05            [24] 2263 	push	ar5
      000932 C0 04            [24] 2264 	push	ar4
      000934 C0 03            [24] 2265 	push	ar3
u     000936 12 00 00         [24] 2266 	lcall	__mulint
      000939 A9 82            [24] 2267 	mov	r1,dpl
      00093B AA 83            [24] 2268 	mov	r2,dph
      00093D D0 03            [24] 2269 	pop	ar3
      00093F D0 04            [24] 2270 	pop	ar4
      000941 D0 05            [24] 2271 	pop	ar5
      000943 D0 06            [24] 2272 	pop	ar6
      000945 D0 07            [24] 2273 	pop	ar7
      000947 E9               [12] 2274 	mov	a,r1
      000948 24 00            [12] 2275 	add	a,#_font
      00094A F5 57            [12] 2276 	mov	_drawChar_sloc1_1_0,a
      00094C EA               [12] 2277 	mov	a,r2
      00094D 34 00            [12] 2278 	addc	a,#(_font >> 8)
      00094F F5 58            [12] 2279 	mov	(_drawChar_sloc1_1_0 + 1),a
      000951 E5 54            [12] 2280 	mov	a,_drawChar_i_65537_149
      000953 F9               [12] 2281 	mov	r1,a
      000954 33               [12] 2282 	rlc	a
      000955 95 E0            [12] 2283 	subb	a,acc
      000957 FA               [12] 2284 	mov	r2,a
      000958 E9               [12] 2285 	mov	a,r1
      000959 25 57            [12] 2286 	add	a,_drawChar_sloc1_1_0
      00095B F5 82            [12] 2287 	mov	dpl,a
      00095D EA               [12] 2288 	mov	a,r2
      00095E 35 58            [12] 2289 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000960 F5 83            [12] 2290 	mov	dph,a
      000962 E4               [12] 2291 	clr	a
      000963 93               [24] 2292 	movc	a,@a+dptr
      000964 F5 55            [12] 2293 	mov	_drawChar_line_196609_151,a
                                   2294 ;	main.c:314: for (i=0; i<6; i++ )
      000966 D0 02            [24] 2295 	pop	ar2
                                   2296 ;	main.c:329: for (j = 0; j<8; j++)
      000968                       2297 00136$:
      000968 C2 D5            [12] 2298 	clr	F0
      00096A 85 53 F0         [24] 2299 	mov	b,_drawChar_PARM_6
      00096D E5 54            [12] 2300 	mov	a,_drawChar_i_65537_149
      00096F 30 E7 04         [24] 2301 	jnb	acc.7,00186$
      000972 B2 D5            [12] 2302 	cpl	F0
      000974 F4               [12] 2303 	cpl	a
      000975 04               [12] 2304 	inc	a
      000976                       2305 00186$:
      000976 A4               [48] 2306 	mul	ab
      000977 30 D5 0A         [24] 2307 	jnb	F0,00187$
      00097A F4               [12] 2308 	cpl	a
      00097B 24 01            [12] 2309 	add	a,#0x01
      00097D C5 F0            [12] 2310 	xch	a,b
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 43.
Hexadecimal [24-Bits]



      00097F F4               [12] 2311 	cpl	a
      000980 34 00            [12] 2312 	addc	a,#0x00
      000982 C5 F0            [12] 2313 	xch	a,b
      000984                       2314 00187$:
      000984 2E               [12] 2315 	add	a,r6
      000985 F5 57            [12] 2316 	mov	_drawChar_sloc1_1_0,a
      000987 EF               [12] 2317 	mov	a,r7
      000988 35 F0            [12] 2318 	addc	a,b
      00098A F5 58            [12] 2319 	mov	(_drawChar_sloc1_1_0 + 1),a
      00098C 85 57 59         [24] 2320 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      00098F 85 58 5A         [24] 2321 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000992 75 56 00         [24] 2322 	mov	_drawChar_j_196610_154,#0x00
      000995                       2323 00122$:
                                   2324 ;	main.c:331: if (line & 0x1)
      000995 E5 55            [12] 2325 	mov	a,_drawChar_line_196609_151
      000997 20 E0 03         [24] 2326 	jb	acc.0,00188$
      00099A 02 0A 42         [24] 2327 	ljmp	00118$
      00099D                       2328 00188$:
                                   2329 ;	main.c:333: if (size == 1)
      00099D EB               [12] 2330 	mov	a,r3
      00099E 60 46            [24] 2331 	jz	00110$
                                   2332 ;	main.c:335: drawPixel(x+i, y+j, color);
      0009A0 E5 54            [12] 2333 	mov	a,_drawChar_i_65537_149
      0009A2 F8               [12] 2334 	mov	r0,a
      0009A3 33               [12] 2335 	rlc	a
      0009A4 95 E0            [12] 2336 	subb	a,acc
      0009A6 F9               [12] 2337 	mov	r1,a
      0009A7 E8               [12] 2338 	mov	a,r0
      0009A8 2E               [12] 2339 	add	a,r6
      0009A9 F8               [12] 2340 	mov	r0,a
      0009AA E9               [12] 2341 	mov	a,r1
      0009AB 3F               [12] 2342 	addc	a,r7
      0009AC F9               [12] 2343 	mov	r1,a
      0009AD 88 82            [24] 2344 	mov	dpl,r0
      0009AF 89 83            [24] 2345 	mov	dph,r1
      0009B1 E5 56            [12] 2346 	mov	a,_drawChar_j_196610_154
      0009B3 F8               [12] 2347 	mov	r0,a
      0009B4 33               [12] 2348 	rlc	a
      0009B5 95 E0            [12] 2349 	subb	a,acc
      0009B7 F9               [12] 2350 	mov	r1,a
      0009B8 E8               [12] 2351 	mov	a,r0
      0009B9 2C               [12] 2352 	add	a,r4
      0009BA F8               [12] 2353 	mov	r0,a
      0009BB E9               [12] 2354 	mov	a,r1
      0009BC 3D               [12] 2355 	addc	a,r5
      0009BD F9               [12] 2356 	mov	r1,a
      0009BE 88 26            [24] 2357 	mov	_drawPixel_PARM_2,r0
      0009C0 89 27            [24] 2358 	mov	(_drawPixel_PARM_2 + 1),r1
      0009C2 85 4F 28         [24] 2359 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009C5 85 50 29         [24] 2360 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009C8 C0 07            [24] 2361 	push	ar7
      0009CA C0 06            [24] 2362 	push	ar6
      0009CC C0 05            [24] 2363 	push	ar5
      0009CE C0 04            [24] 2364 	push	ar4
      0009D0 C0 03            [24] 2365 	push	ar3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 44.
Hexadecimal [24-Bits]



      0009D2 C0 02            [24] 2366 	push	ar2
      0009D4 12 03 1E         [24] 2367 	lcall	_drawPixel
      0009D7 D0 02            [24] 2368 	pop	ar2
      0009D9 D0 03            [24] 2369 	pop	ar3
      0009DB D0 04            [24] 2370 	pop	ar4
      0009DD D0 05            [24] 2371 	pop	ar5
      0009DF D0 06            [24] 2372 	pop	ar6
      0009E1 D0 07            [24] 2373 	pop	ar7
      0009E3 02 0A E9         [24] 2374 	ljmp	00119$
      0009E6                       2375 00110$:
                                   2376 ;	main.c:338: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009E6 85 59 82         [24] 2377 	mov	dpl,_drawChar_sloc2_1_0
      0009E9 85 5A 83         [24] 2378 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      0009EC C2 D5            [12] 2379 	clr	F0
      0009EE 85 53 F0         [24] 2380 	mov	b,_drawChar_PARM_6
      0009F1 E5 56            [12] 2381 	mov	a,_drawChar_j_196610_154
      0009F3 30 E7 04         [24] 2382 	jnb	acc.7,00190$
      0009F6 B2 D5            [12] 2383 	cpl	F0
      0009F8 F4               [12] 2384 	cpl	a
      0009F9 04               [12] 2385 	inc	a
      0009FA                       2386 00190$:
      0009FA A4               [48] 2387 	mul	ab
      0009FB 30 D5 0A         [24] 2388 	jnb	F0,00191$
      0009FE F4               [12] 2389 	cpl	a
      0009FF 24 01            [12] 2390 	add	a,#0x01
      000A01 C5 F0            [12] 2391 	xch	a,b
      000A03 F4               [12] 2392 	cpl	a
      000A04 34 00            [12] 2393 	addc	a,#0x00
      000A06 C5 F0            [12] 2394 	xch	a,b
      000A08                       2395 00191$:
      000A08 2C               [12] 2396 	add	a,r4
      000A09 F8               [12] 2397 	mov	r0,a
      000A0A ED               [12] 2398 	mov	a,r5
      000A0B 35 F0            [12] 2399 	addc	a,b
      000A0D F9               [12] 2400 	mov	r1,a
      000A0E 88 44            [24] 2401 	mov	_fillRect_PARM_2,r0
      000A10 89 45            [24] 2402 	mov	(_fillRect_PARM_2 + 1),r1
      000A12 A8 53            [24] 2403 	mov	r0,_drawChar_PARM_6
      000A14 79 00            [12] 2404 	mov	r1,#0x00
      000A16 88 46            [24] 2405 	mov	_fillRect_PARM_3,r0
      000A18 89 47            [24] 2406 	mov	(_fillRect_PARM_3 + 1),r1
      000A1A 88 48            [24] 2407 	mov	_fillRect_PARM_4,r0
      000A1C 89 49            [24] 2408 	mov	(_fillRect_PARM_4 + 1),r1
      000A1E 85 4F 4A         [24] 2409 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A21 85 50 4B         [24] 2410 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A24 C0 07            [24] 2411 	push	ar7
      000A26 C0 06            [24] 2412 	push	ar6
      000A28 C0 05            [24] 2413 	push	ar5
      000A2A C0 04            [24] 2414 	push	ar4
      000A2C C0 03            [24] 2415 	push	ar3
      000A2E C0 02            [24] 2416 	push	ar2
      000A30 12 06 B9         [24] 2417 	lcall	_fillRect
      000A33 D0 02            [24] 2418 	pop	ar2
      000A35 D0 03            [24] 2419 	pop	ar3
      000A37 D0 04            [24] 2420 	pop	ar4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 45.
Hexadecimal [24-Bits]



      000A39 D0 05            [24] 2421 	pop	ar5
      000A3B D0 06            [24] 2422 	pop	ar6
      000A3D D0 07            [24] 2423 	pop	ar7
      000A3F 02 0A E9         [24] 2424 	ljmp	00119$
      000A42                       2425 00118$:
                                   2426 ;	main.c:340: } else if (bg != color)
      000A42 30 00 03         [24] 2427 	jnb	_drawChar_sloc0_1_0,00192$
      000A45 02 0A E9         [24] 2428 	ljmp	00119$
      000A48                       2429 00192$:
                                   2430 ;	main.c:342: if (size == 1)
      000A48 EA               [12] 2431 	mov	a,r2
      000A49 60 45            [24] 2432 	jz	00113$
                                   2433 ;	main.c:344: drawPixel(x+i, y+j, bg);
      000A4B E5 54            [12] 2434 	mov	a,_drawChar_i_65537_149
      000A4D F8               [12] 2435 	mov	r0,a
      000A4E 33               [12] 2436 	rlc	a
      000A4F 95 E0            [12] 2437 	subb	a,acc
      000A51 F9               [12] 2438 	mov	r1,a
      000A52 E8               [12] 2439 	mov	a,r0
      000A53 2E               [12] 2440 	add	a,r6
      000A54 F8               [12] 2441 	mov	r0,a
      000A55 E9               [12] 2442 	mov	a,r1
      000A56 3F               [12] 2443 	addc	a,r7
      000A57 F9               [12] 2444 	mov	r1,a
      000A58 88 82            [24] 2445 	mov	dpl,r0
      000A5A 89 83            [24] 2446 	mov	dph,r1
      000A5C E5 56            [12] 2447 	mov	a,_drawChar_j_196610_154
      000A5E F8               [12] 2448 	mov	r0,a
      000A5F 33               [12] 2449 	rlc	a
      000A60 95 E0            [12] 2450 	subb	a,acc
      000A62 F9               [12] 2451 	mov	r1,a
      000A63 E8               [12] 2452 	mov	a,r0
      000A64 2C               [12] 2453 	add	a,r4
      000A65 F8               [12] 2454 	mov	r0,a
      000A66 E9               [12] 2455 	mov	a,r1
      000A67 3D               [12] 2456 	addc	a,r5
      000A68 F9               [12] 2457 	mov	r1,a
      000A69 88 26            [24] 2458 	mov	_drawPixel_PARM_2,r0
      000A6B 89 27            [24] 2459 	mov	(_drawPixel_PARM_2 + 1),r1
      000A6D 85 51 28         [24] 2460 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A70 85 52 29         [24] 2461 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A73 C0 07            [24] 2462 	push	ar7
      000A75 C0 06            [24] 2463 	push	ar6
      000A77 C0 05            [24] 2464 	push	ar5
      000A79 C0 04            [24] 2465 	push	ar4
      000A7B C0 03            [24] 2466 	push	ar3
      000A7D C0 02            [24] 2467 	push	ar2
      000A7F 12 03 1E         [24] 2468 	lcall	_drawPixel
      000A82 D0 02            [24] 2469 	pop	ar2
      000A84 D0 03            [24] 2470 	pop	ar3
      000A86 D0 04            [24] 2471 	pop	ar4
      000A88 D0 05            [24] 2472 	pop	ar5
      000A8A D0 06            [24] 2473 	pop	ar6
      000A8C D0 07            [24] 2474 	pop	ar7
      000A8E 80 59            [24] 2475 	sjmp	00119$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 46.
Hexadecimal [24-Bits]



      000A90                       2476 00113$:
                                   2477 ;	main.c:348: fillRect(x+i*size, y+j*size, size, size, bg);
      000A90 85 57 82         [24] 2478 	mov	dpl,_drawChar_sloc1_1_0
      000A93 85 58 83         [24] 2479 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000A96 C2 D5            [12] 2480 	clr	F0
      000A98 85 53 F0         [24] 2481 	mov	b,_drawChar_PARM_6
      000A9B E5 56            [12] 2482 	mov	a,_drawChar_j_196610_154
      000A9D 30 E7 04         [24] 2483 	jnb	acc.7,00194$
      000AA0 B2 D5            [12] 2484 	cpl	F0
      000AA2 F4               [12] 2485 	cpl	a
      000AA3 04               [12] 2486 	inc	a
      000AA4                       2487 00194$:
      000AA4 A4               [48] 2488 	mul	ab
      000AA5 30 D5 0A         [24] 2489 	jnb	F0,00195$
      000AA8 F4               [12] 2490 	cpl	a
      000AA9 24 01            [12] 2491 	add	a,#0x01
      000AAB C5 F0            [12] 2492 	xch	a,b
      000AAD F4               [12] 2493 	cpl	a
      000AAE 34 00            [12] 2494 	addc	a,#0x00
      000AB0 C5 F0            [12] 2495 	xch	a,b
      000AB2                       2496 00195$:
      000AB2 2C               [12] 2497 	add	a,r4
      000AB3 F8               [12] 2498 	mov	r0,a
      000AB4 ED               [12] 2499 	mov	a,r5
      000AB5 35 F0            [12] 2500 	addc	a,b
      000AB7 F9               [12] 2501 	mov	r1,a
      000AB8 88 44            [24] 2502 	mov	_fillRect_PARM_2,r0
      000ABA 89 45            [24] 2503 	mov	(_fillRect_PARM_2 + 1),r1
      000ABC A8 53            [24] 2504 	mov	r0,_drawChar_PARM_6
      000ABE 79 00            [12] 2505 	mov	r1,#0x00
      000AC0 88 46            [24] 2506 	mov	_fillRect_PARM_3,r0
      000AC2 89 47            [24] 2507 	mov	(_fillRect_PARM_3 + 1),r1
      000AC4 88 48            [24] 2508 	mov	_fillRect_PARM_4,r0
      000AC6 89 49            [24] 2509 	mov	(_fillRect_PARM_4 + 1),r1
      000AC8 85 51 4A         [24] 2510 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000ACB 85 52 4B         [24] 2511 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000ACE C0 07            [24] 2512 	push	ar7
      000AD0 C0 06            [24] 2513 	push	ar6
      000AD2 C0 05            [24] 2514 	push	ar5
      000AD4 C0 04            [24] 2515 	push	ar4
      000AD6 C0 03            [24] 2516 	push	ar3
      000AD8 C0 02            [24] 2517 	push	ar2
      000ADA 12 06 B9         [24] 2518 	lcall	_fillRect
      000ADD D0 02            [24] 2519 	pop	ar2
      000ADF D0 03            [24] 2520 	pop	ar3
      000AE1 D0 04            [24] 2521 	pop	ar4
      000AE3 D0 05            [24] 2522 	pop	ar5
      000AE5 D0 06            [24] 2523 	pop	ar6
      000AE7 D0 07            [24] 2524 	pop	ar7
      000AE9                       2525 00119$:
                                   2526 ;	main.c:352: line >>= 1;
      000AE9 E5 55            [12] 2527 	mov	a,_drawChar_line_196609_151
      000AEB C3               [12] 2528 	clr	c
      000AEC 13               [12] 2529 	rrc	a
      000AED F5 55            [12] 2530 	mov	_drawChar_line_196609_151,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 47.
Hexadecimal [24-Bits]



                                   2531 ;	main.c:329: for (j = 0; j<8; j++)
      000AEF 05 56            [12] 2532 	inc	_drawChar_j_196610_154
      000AF1 C3               [12] 2533 	clr	c
      000AF2 E5 56            [12] 2534 	mov	a,_drawChar_j_196610_154
      000AF4 64 80            [12] 2535 	xrl	a,#0x80
      000AF6 94 88            [12] 2536 	subb	a,#0x88
      000AF8 50 03            [24] 2537 	jnc	00196$
      000AFA 02 09 95         [24] 2538 	ljmp	00122$
      000AFD                       2539 00196$:
                                   2540 ;	main.c:314: for (i=0; i<6; i++ )
      000AFD 05 54            [12] 2541 	inc	_drawChar_i_65537_149
      000AFF C3               [12] 2542 	clr	c
      000B00 E5 54            [12] 2543 	mov	a,_drawChar_i_65537_149
      000B02 64 80            [12] 2544 	xrl	a,#0x80
      000B04 94 86            [12] 2545 	subb	a,#0x86
      000B06 50 03            [24] 2546 	jnc	00197$
      000B08 02 09 17         [24] 2547 	ljmp	00124$
      000B0B                       2548 00197$:
                                   2549 ;	main.c:356: }
      000B0B 22               [24] 2550 	ret
                                   2551 ;------------------------------------------------------------
                                   2552 ;Allocation info for local variables in function 'write'
                                   2553 ;------------------------------------------------------------
                                   2554 ;c                         Allocated to registers r7 
                                   2555 ;------------------------------------------------------------
                                   2556 ;	main.c:358: void write (uint8_t c)
                                   2557 ;	-----------------------------------------
                                   2558 ;	 function write
                                   2559 ;	-----------------------------------------
      000B0C                       2560 _write:
      000B0C AF 82            [24] 2561 	mov	r7,dpl
                                   2562 ;	main.c:360: if (c == '\n')
      000B0E BF 0A 26         [24] 2563 	cjne	r7,#0x0a,00105$
                                   2564 ;	main.c:362: cursor_y += textsize*8;
      000B11 AD 1C            [24] 2565 	mov	r5,_textsize
      000B13 E4               [12] 2566 	clr	a
      000B14 C4               [12] 2567 	swap	a
      000B15 03               [12] 2568 	rr	a
      000B16 54 F8            [12] 2569 	anl	a,#0xf8
      000B18 CD               [12] 2570 	xch	a,r5
      000B19 C4               [12] 2571 	swap	a
      000B1A 03               [12] 2572 	rr	a
      000B1B CD               [12] 2573 	xch	a,r5
      000B1C 6D               [12] 2574 	xrl	a,r5
      000B1D CD               [12] 2575 	xch	a,r5
      000B1E 54 F8            [12] 2576 	anl	a,#0xf8
      000B20 CD               [12] 2577 	xch	a,r5
      000B21 6D               [12] 2578 	xrl	a,r5
      000B22 FE               [12] 2579 	mov	r6,a
      000B23 AB 1A            [24] 2580 	mov	r3,_cursor_y
      000B25 AC 1B            [24] 2581 	mov	r4,(_cursor_y + 1)
      000B27 ED               [12] 2582 	mov	a,r5
      000B28 2B               [12] 2583 	add	a,r3
      000B29 FB               [12] 2584 	mov	r3,a
      000B2A EE               [12] 2585 	mov	a,r6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 48.
Hexadecimal [24-Bits]



      000B2B 3C               [12] 2586 	addc	a,r4
      000B2C FC               [12] 2587 	mov	r4,a
      000B2D 8B 1A            [24] 2588 	mov	_cursor_y,r3
      000B2F 8C 1B            [24] 2589 	mov	(_cursor_y + 1),r4
                                   2590 ;	main.c:363: cursor_x  = 0;
      000B31 E4               [12] 2591 	clr	a
      000B32 F5 18            [12] 2592 	mov	_cursor_x,a
      000B34 F5 19            [12] 2593 	mov	(_cursor_x + 1),a
      000B36 22               [24] 2594 	ret
      000B37                       2595 00105$:
                                   2596 ;	main.c:365: else if (c == '\r')
      000B37 BF 0D 01         [24] 2597 	cjne	r7,#0x0d,00119$
      000B3A 22               [24] 2598 	ret
      000B3B                       2599 00119$:
                                   2600 ;	main.c:370: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B3B 85 1A 4C         [24] 2601 	mov	_drawChar_PARM_2,_cursor_y
      000B3E 85 1B 4D         [24] 2602 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B41 8F 4E            [24] 2603 	mov	_drawChar_PARM_3,r7
      000B43 85 1E 4F         [24] 2604 	mov	_drawChar_PARM_4,_textcolor
      000B46 85 1F 50         [24] 2605 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B49 85 20 51         [24] 2606 	mov	_drawChar_PARM_5,_textbgcolor
      000B4C 85 21 52         [24] 2607 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B4F 85 1C 53         [24] 2608 	mov	_drawChar_PARM_6,_textsize
      000B52 85 18 82         [24] 2609 	mov	dpl,_cursor_x
      000B55 85 19 83         [24] 2610 	mov	dph,(_cursor_x + 1)
      000B58 12 08 81         [24] 2611 	lcall	_drawChar
                                   2612 ;	main.c:371: cursor_x += textsize*6;
u     000B5B 85 1C 00         [24] 2613 	mov	__mulint_PARM_2,_textsize
u     000B5E 75 01 00         [24] 2614 	mov	(__mulint_PARM_2 + 1),#0x00
      000B61 90 00 06         [24] 2615 	mov	dptr,#0x0006
u     000B64 12 00 00         [24] 2616 	lcall	__mulint
      000B67 AE 82            [24] 2617 	mov	r6,dpl
      000B69 AF 83            [24] 2618 	mov	r7,dph
      000B6B AC 18            [24] 2619 	mov	r4,_cursor_x
      000B6D AD 19            [24] 2620 	mov	r5,(_cursor_x + 1)
      000B6F EE               [12] 2621 	mov	a,r6
      000B70 2C               [12] 2622 	add	a,r4
      000B71 FC               [12] 2623 	mov	r4,a
      000B72 EF               [12] 2624 	mov	a,r7
      000B73 3D               [12] 2625 	addc	a,r5
      000B74 FD               [12] 2626 	mov	r5,a
      000B75 8C 18            [24] 2627 	mov	_cursor_x,r4
      000B77 8D 19            [24] 2628 	mov	(_cursor_x + 1),r5
                                   2629 ;	main.c:373: }
      000B79 22               [24] 2630 	ret
                                   2631 ;------------------------------------------------------------
                                   2632 ;Allocation info for local variables in function 'LCD_string_write'
                                   2633 ;------------------------------------------------------------
                                   2634 ;str                       Allocated to registers r5 r6 r7 
                                   2635 ;i                         Allocated to registers r3 r4 
                                   2636 ;------------------------------------------------------------
                                   2637 ;	main.c:375: void LCD_string_write (int8_t *str)
                                   2638 ;	-----------------------------------------
                                   2639 ;	 function LCD_string_write
                                   2640 ;	-----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 49.
Hexadecimal [24-Bits]



      000B7A                       2641 _LCD_string_write:
      000B7A AD 82            [24] 2642 	mov	r5,dpl
      000B7C AE 83            [24] 2643 	mov	r6,dph
      000B7E AF F0            [24] 2644 	mov	r7,b
                                   2645 ;	main.c:378: for (i=0;str[i]!=0;i++)
      000B80 7B 00            [12] 2646 	mov	r3,#0x00
      000B82 7C 00            [12] 2647 	mov	r4,#0x00
      000B84                       2648 00103$:
      000B84 EB               [12] 2649 	mov	a,r3
      000B85 2D               [12] 2650 	add	a,r5
      000B86 F8               [12] 2651 	mov	r0,a
      000B87 EC               [12] 2652 	mov	a,r4
      000B88 3E               [12] 2653 	addc	a,r6
      000B89 F9               [12] 2654 	mov	r1,a
      000B8A 8F 02            [24] 2655 	mov	ar2,r7
      000B8C 88 82            [24] 2656 	mov	dpl,r0
      000B8E 89 83            [24] 2657 	mov	dph,r1
      000B90 8A F0            [24] 2658 	mov	b,r2
u     000B92 12 00 00         [24] 2659 	lcall	__gptrget
      000B95 FA               [12] 2660 	mov	r2,a
      000B96 60 20            [24] 2661 	jz	00105$
                                   2662 ;	main.c:380: write(str[i]);
      000B98 8A 82            [24] 2663 	mov	dpl,r2
      000B9A C0 07            [24] 2664 	push	ar7
      000B9C C0 06            [24] 2665 	push	ar6
      000B9E C0 05            [24] 2666 	push	ar5
      000BA0 C0 04            [24] 2667 	push	ar4
      000BA2 C0 03            [24] 2668 	push	ar3
      000BA4 12 0B 0C         [24] 2669 	lcall	_write
      000BA7 D0 03            [24] 2670 	pop	ar3
      000BA9 D0 04            [24] 2671 	pop	ar4
      000BAB D0 05            [24] 2672 	pop	ar5
      000BAD D0 06            [24] 2673 	pop	ar6
      000BAF D0 07            [24] 2674 	pop	ar7
                                   2675 ;	main.c:378: for (i=0;str[i]!=0;i++)
      000BB1 0B               [12] 2676 	inc	r3
      000BB2 BB 00 CF         [24] 2677 	cjne	r3,#0x00,00103$
      000BB5 0C               [12] 2678 	inc	r4
      000BB6 80 CC            [24] 2679 	sjmp	00103$
      000BB8                       2680 00105$:
                                   2681 ;	main.c:382: }
      000BB8 22               [24] 2682 	ret
                                   2683 ;------------------------------------------------------------
                                   2684 ;Allocation info for local variables in function 'testRAM'
                                   2685 ;------------------------------------------------------------
                                   2686 ;d                         Allocated to registers r7 
                                   2687 ;i                         Allocated to registers r3 r4 r5 r6 
                                   2688 ;ram_address               Allocated to registers 
                                   2689 ;------------------------------------------------------------
                                   2690 ;	main.c:384: void testRAM (uint8_t d) {
                                   2691 ;	-----------------------------------------
                                   2692 ;	 function testRAM
                                   2693 ;	-----------------------------------------
      000BB9                       2694 _testRAM:
      000BB9 AF 82            [24] 2695 	mov	r7,dpl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 50.
Hexadecimal [24-Bits]



                                   2696 ;	main.c:388: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BBB 7B 00            [12] 2697 	mov	r3,#0x00
      000BBD 7C 00            [12] 2698 	mov	r4,#0x00
      000BBF 7D 00            [12] 2699 	mov	r5,#0x00
      000BC1 7E 00            [12] 2700 	mov	r6,#0x00
      000BC3                       2701 00102$:
                                   2702 ;	main.c:389: IOM = 0;
                                   2703 ;	assignBit
      000BC3 C2 B4            [12] 2704 	clr	_P3_4
                                   2705 ;	main.c:390: ram_address = (uint8_t __xdata*)(i);
      000BC5 8B 82            [24] 2706 	mov	dpl,r3
      000BC7 8C 83            [24] 2707 	mov	dph,r4
                                   2708 ;	main.c:391: *ram_address = d;
      000BC9 EF               [12] 2709 	mov	a,r7
      000BCA F0               [24] 2710 	movx	@dptr,a
                                   2711 ;	main.c:392: IOM = 1;
                                   2712 ;	assignBit
      000BCB D2 B4            [12] 2713 	setb	_P3_4
                                   2714 ;	main.c:388: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BCD 0B               [12] 2715 	inc	r3
      000BCE BB 00 09         [24] 2716 	cjne	r3,#0x00,00111$
      000BD1 0C               [12] 2717 	inc	r4
      000BD2 BC 00 05         [24] 2718 	cjne	r4,#0x00,00111$
      000BD5 0D               [12] 2719 	inc	r5
      000BD6 BD 00 01         [24] 2720 	cjne	r5,#0x00,00111$
      000BD9 0E               [12] 2721 	inc	r6
      000BDA                       2722 00111$:
      000BDA C3               [12] 2723 	clr	c
      000BDB EB               [12] 2724 	mov	a,r3
      000BDC 94 FF            [12] 2725 	subb	a,#0xff
      000BDE EC               [12] 2726 	mov	a,r4
      000BDF 94 FF            [12] 2727 	subb	a,#0xff
      000BE1 ED               [12] 2728 	mov	a,r5
      000BE2 94 00            [12] 2729 	subb	a,#0x00
      000BE4 EE               [12] 2730 	mov	a,r6
      000BE5 94 00            [12] 2731 	subb	a,#0x00
      000BE7 40 DA            [24] 2732 	jc	00102$
                                   2733 ;	main.c:395: }
      000BE9 22               [24] 2734 	ret
                                   2735 ;------------------------------------------------------------
                                   2736 ;Allocation info for local variables in function 'freeType'
                                   2737 ;------------------------------------------------------------
                                   2738 ;count                     Allocated to registers r7 
                                   2739 ;d                         Allocated to registers 
                                   2740 ;------------------------------------------------------------
                                   2741 ;	main.c:397: void freeType () {
                                   2742 ;	-----------------------------------------
                                   2743 ;	 function freeType
                                   2744 ;	-----------------------------------------
      000BEA                       2745 _freeType:
                                   2746 ;	main.c:398: uint8_t count = 0;
      000BEA 7F 00            [12] 2747 	mov	r7,#0x00
                                   2748 ;	main.c:400: while (1) {
      000BEC                       2749 00105$:
                                   2750 ;	main.c:403: if (count == 8) {
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 51.
Hexadecimal [24-Bits]



      000BEC BF 08 0E         [24] 2751 	cjne	r7,#0x08,00102$
                                   2752 ;	main.c:405: count = 0;
      000BEF 7F 00            [12] 2753 	mov	r7,#0x00
                                   2754 ;	main.c:406: write(d);
      000BF1 75 82 0A         [24] 2755 	mov	dpl,#0x0a
      000BF4 C0 07            [24] 2756 	push	ar7
      000BF6 12 0B 0C         [24] 2757 	lcall	_write
      000BF9 D0 07            [24] 2758 	pop	ar7
      000BFB 80 0A            [24] 2759 	sjmp	00103$
      000BFD                       2760 00102$:
                                   2761 ;	main.c:409: d = keyDetect();
      000BFD C0 07            [24] 2762 	push	ar7
      000BFF 12 0C 0A         [24] 2763 	lcall	_keyDetect
                                   2764 ;	main.c:410: write(d);
      000C02 12 0B 0C         [24] 2765 	lcall	_write
      000C05 D0 07            [24] 2766 	pop	ar7
      000C07                       2767 00103$:
                                   2768 ;	main.c:413: count++;
      000C07 0F               [12] 2769 	inc	r7
                                   2770 ;	main.c:415: }
      000C08 80 E2            [24] 2771 	sjmp	00105$
                                   2772 ;------------------------------------------------------------
                                   2773 ;Allocation info for local variables in function 'keyDetect'
                                   2774 ;------------------------------------------------------------
                                   2775 ;	main.c:417: uint8_t keyDetect () {
                                   2776 ;	-----------------------------------------
                                   2777 ;	 function keyDetect
                                   2778 ;	-----------------------------------------
      000C0A                       2779 _keyDetect:
                                   2780 ;	main.c:418: __KEYPAD_PORT__ = 0xF0;
      000C0A 75 90 F0         [24] 2781 	mov	_P1,#0xf0
                                   2782 ;	main.c:419: do
      000C0D                       2783 00101$:
                                   2784 ;	main.c:421: __KEYPAD_PORT__ = 0xF0;
      000C0D 75 90 F0         [24] 2785 	mov	_P1,#0xf0
                                   2786 ;	main.c:422: colloc = __KEYPAD_PORT__;
      000C10 85 90 10         [24] 2787 	mov	_colloc,_P1
                                   2788 ;	main.c:423: colloc&= 0xF0;
      000C13 53 10 F0         [24] 2789 	anl	_colloc,#0xf0
                                   2790 ;	main.c:424: } while (colloc != 0xF0);
      000C16 74 F0            [12] 2791 	mov	a,#0xf0
      000C18 B5 10 F2         [24] 2792 	cjne	a,_colloc,00101$
                                   2793 ;	main.c:428: do
      000C1B                       2794 00104$:
                                   2795 ;	main.c:430: delay(20);
      000C1B 90 00 14         [24] 2796 	mov	dptr,#0x0014
      000C1E 12 00 10         [24] 2797 	lcall	_delay
                                   2798 ;	main.c:431: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C21 E5 90            [12] 2799 	mov	a,_P1
      000C23 54 F0            [12] 2800 	anl	a,#0xf0
      000C25 F5 10            [12] 2801 	mov	_colloc,a
                                   2802 ;	main.c:432: } while (colloc == 0xF0);
      000C27 74 F0            [12] 2803 	mov	a,#0xf0
      000C29 B5 10 02         [24] 2804 	cjne	a,_colloc,00178$
      000C2C 80 ED            [24] 2805 	sjmp	00104$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 52.
Hexadecimal [24-Bits]



      000C2E                       2806 00178$:
                                   2807 ;	main.c:434: delay(1);
      000C2E 90 00 01         [24] 2808 	mov	dptr,#0x0001
      000C31 12 00 10         [24] 2809 	lcall	_delay
                                   2810 ;	main.c:435: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C34 E5 90            [12] 2811 	mov	a,_P1
      000C36 54 F0            [12] 2812 	anl	a,#0xf0
      000C38 F5 10            [12] 2813 	mov	_colloc,a
                                   2814 ;	main.c:436: } while (colloc == 0xF0);
      000C3A 74 F0            [12] 2815 	mov	a,#0xf0
      000C3C B5 10 02         [24] 2816 	cjne	a,_colloc,00179$
      000C3F 80 DA            [24] 2817 	sjmp	00104$
      000C41                       2818 00179$:
                                   2819 ;	main.c:438: while (1)
      000C41                       2820 00119$:
                                   2821 ;	main.c:440: __KEYPAD_PORT__= 0xFE;
      000C41 75 90 FE         [24] 2822 	mov	_P1,#0xfe
                                   2823 ;	main.c:441: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C44 E5 90            [12] 2824 	mov	a,_P1
      000C46 54 F0            [12] 2825 	anl	a,#0xf0
      000C48 F5 10            [12] 2826 	mov	_colloc,a
                                   2827 ;	main.c:442: if (colloc != 0xF0)
      000C4A 74 F0            [12] 2828 	mov	a,#0xf0
      000C4C B5 10 02         [24] 2829 	cjne	a,_colloc,00180$
      000C4F 80 05            [24] 2830 	sjmp	00111$
      000C51                       2831 00180$:
                                   2832 ;	main.c:444: rowloc = 0;
      000C51 75 11 00         [24] 2833 	mov	_rowloc,#0x00
                                   2834 ;	main.c:445: break;
      000C54 80 3D            [24] 2835 	sjmp	00120$
      000C56                       2836 00111$:
                                   2837 ;	main.c:448: __KEYPAD_PORT__ = 0xFD;
      000C56 75 90 FD         [24] 2838 	mov	_P1,#0xfd
                                   2839 ;	main.c:449: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C59 E5 90            [12] 2840 	mov	a,_P1
      000C5B 54 F0            [12] 2841 	anl	a,#0xf0
      000C5D F5 10            [12] 2842 	mov	_colloc,a
                                   2843 ;	main.c:450: if (colloc != 0xF0)
      000C5F 74 F0            [12] 2844 	mov	a,#0xf0
      000C61 B5 10 02         [24] 2845 	cjne	a,_colloc,00181$
      000C64 80 05            [24] 2846 	sjmp	00113$
      000C66                       2847 00181$:
                                   2848 ;	main.c:452: rowloc = 1;
      000C66 75 11 01         [24] 2849 	mov	_rowloc,#0x01
                                   2850 ;	main.c:453: break;
      000C69 80 28            [24] 2851 	sjmp	00120$
      000C6B                       2852 00113$:
                                   2853 ;	main.c:456: __KEYPAD_PORT__ = 0xFB;
      000C6B 75 90 FB         [24] 2854 	mov	_P1,#0xfb
                                   2855 ;	main.c:457: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C6E E5 90            [12] 2856 	mov	a,_P1
      000C70 54 F0            [12] 2857 	anl	a,#0xf0
      000C72 F5 10            [12] 2858 	mov	_colloc,a
                                   2859 ;	main.c:458: if (colloc != 0xF0)
      000C74 74 F0            [12] 2860 	mov	a,#0xf0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 53.
Hexadecimal [24-Bits]



      000C76 B5 10 02         [24] 2861 	cjne	a,_colloc,00182$
      000C79 80 05            [24] 2862 	sjmp	00115$
      000C7B                       2863 00182$:
                                   2864 ;	main.c:460: rowloc = 2;
      000C7B 75 11 02         [24] 2865 	mov	_rowloc,#0x02
                                   2866 ;	main.c:461: break;
      000C7E 80 13            [24] 2867 	sjmp	00120$
      000C80                       2868 00115$:
                                   2869 ;	main.c:464: __KEYPAD_PORT__ = 0xF7;
      000C80 75 90 F7         [24] 2870 	mov	_P1,#0xf7
                                   2871 ;	main.c:465: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C83 E5 90            [12] 2872 	mov	a,_P1
      000C85 54 F0            [12] 2873 	anl	a,#0xf0
      000C87 F5 10            [12] 2874 	mov	_colloc,a
                                   2875 ;	main.c:466: if (colloc != 0xF0)
      000C89 74 F0            [12] 2876 	mov	a,#0xf0
      000C8B B5 10 02         [24] 2877 	cjne	a,_colloc,00183$
      000C8E 80 B1            [24] 2878 	sjmp	00119$
      000C90                       2879 00183$:
                                   2880 ;	main.c:468: rowloc = 3;
      000C90 75 11 03         [24] 2881 	mov	_rowloc,#0x03
                                   2882 ;	main.c:469: break;
      000C93                       2883 00120$:
                                   2884 ;	main.c:473: if (colloc == 0xE0)
      000C93 74 E0            [12] 2885 	mov	a,#0xe0
      000C95 B5 10 0C         [24] 2886 	cjne	a,_colloc,00128$
                                   2887 ;	main.c:475: return (keypad[rowloc][0]);
      000C98 E5 11            [12] 2888 	mov	a,_rowloc
      000C9A 25 11            [12] 2889 	add	a,_rowloc
      000C9C 25 E0            [12] 2890 	add	a,acc
      000C9E 24 00            [12] 2891 	add	a,#_keypad
      000CA0 F9               [12] 2892 	mov	r1,a
      000CA1 87 82            [24] 2893 	mov	dpl,@r1
      000CA3 22               [24] 2894 	ret
      000CA4                       2895 00128$:
                                   2896 ;	main.c:477: else if (colloc == 0xD0)
      000CA4 74 D0            [12] 2897 	mov	a,#0xd0
      000CA6 B5 10 0D         [24] 2898 	cjne	a,_colloc,00125$
                                   2899 ;	main.c:479: return (keypad[rowloc][1]);
      000CA9 E5 11            [12] 2900 	mov	a,_rowloc
      000CAB 25 11            [12] 2901 	add	a,_rowloc
      000CAD 25 E0            [12] 2902 	add	a,acc
      000CAF 24 00            [12] 2903 	add	a,#_keypad
      000CB1 04               [12] 2904 	inc	a
      000CB2 F9               [12] 2905 	mov	r1,a
      000CB3 87 82            [24] 2906 	mov	dpl,@r1
      000CB5 22               [24] 2907 	ret
      000CB6                       2908 00125$:
                                   2909 ;	main.c:481: else if (colloc == 0xB0)
      000CB6 74 B0            [12] 2910 	mov	a,#0xb0
      000CB8 B5 10 0E         [24] 2911 	cjne	a,_colloc,00122$
                                   2912 ;	main.c:483: return (keypad[rowloc][2]);
      000CBB E5 11            [12] 2913 	mov	a,_rowloc
      000CBD 25 11            [12] 2914 	add	a,_rowloc
      000CBF 25 E0            [12] 2915 	add	a,acc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 54.
Hexadecimal [24-Bits]



      000CC1 24 00            [12] 2916 	add	a,#_keypad
      000CC3 24 02            [12] 2917 	add	a,#0x02
      000CC5 F9               [12] 2918 	mov	r1,a
      000CC6 87 82            [24] 2919 	mov	dpl,@r1
      000CC8 22               [24] 2920 	ret
      000CC9                       2921 00122$:
                                   2922 ;	main.c:487: return (keypad[rowloc][3]);
      000CC9 E5 11            [12] 2923 	mov	a,_rowloc
      000CCB 25 11            [12] 2924 	add	a,_rowloc
      000CCD 25 E0            [12] 2925 	add	a,acc
      000CCF 24 00            [12] 2926 	add	a,#_keypad
      000CD1 24 03            [12] 2927 	add	a,#0x03
      000CD3 F9               [12] 2928 	mov	r1,a
      000CD4 87 82            [24] 2929 	mov	dpl,@r1
                                   2930 ;	main.c:489: }
      000CD6 22               [24] 2931 	ret
                                   2932 ;------------------------------------------------------------
                                   2933 ;Allocation info for local variables in function 'reverse'
                                   2934 ;------------------------------------------------------------
                                   2935 ;d                         Allocated to registers r7 
                                   2936 ;rev                       Allocated to registers r5 r6 
                                   2937 ;val                       Allocated to registers r1 r2 
                                   2938 ;------------------------------------------------------------
                                   2939 ;	main.c:491: uint16_t reverse (uint8_t d) {
                                   2940 ;	-----------------------------------------
                                   2941 ;	 function reverse
                                   2942 ;	-----------------------------------------
      000CD7                       2943 _reverse:
      000CD7 AF 82            [24] 2944 	mov	r7,dpl
                                   2945 ;	main.c:492: uint16_t rev = 0;
      000CD9 7D 00            [12] 2946 	mov	r5,#0x00
      000CDB 7E 00            [12] 2947 	mov	r6,#0x00
                                   2948 ;	main.c:494: while (d >= 1) {
      000CDD                       2949 00101$:
      000CDD BF 01 00         [24] 2950 	cjne	r7,#0x01,00114$
      000CE0                       2951 00114$:
      000CE0 40 5F            [24] 2952 	jc	00103$
                                   2953 ;	main.c:496: val = d%10;
      000CE2 8F 03            [24] 2954 	mov	ar3,r7
      000CE4 7C 00            [12] 2955 	mov	r4,#0x00
u     000CE6 75 00 0A         [24] 2956 	mov	__modsint_PARM_2,#0x0a
                                   2957 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
u     000CE9 8C 01            [24] 2958 	mov	(__modsint_PARM_2 + 1),r4
      000CEB 8B 82            [24] 2959 	mov	dpl,r3
      000CED 8C 83            [24] 2960 	mov	dph,r4
      000CEF C0 06            [24] 2961 	push	ar6
      000CF1 C0 05            [24] 2962 	push	ar5
      000CF3 C0 04            [24] 2963 	push	ar4
      000CF5 C0 03            [24] 2964 	push	ar3
u     000CF7 12 00 00         [24] 2965 	lcall	__modsint
      000CFA A9 82            [24] 2966 	mov	r1,dpl
      000CFC AA 83            [24] 2967 	mov	r2,dph
      000CFE D0 03            [24] 2968 	pop	ar3
      000D00 D0 04            [24] 2969 	pop	ar4
                                   2970 ;	main.c:497: d = d/10;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 55.
Hexadecimal [24-Bits]



u     000D02 75 00 0A         [24] 2971 	mov	__divsint_PARM_2,#0x0a
u     000D05 75 01 00         [24] 2972 	mov	(__divsint_PARM_2 + 1),#0x00
      000D08 8B 82            [24] 2973 	mov	dpl,r3
      000D0A 8C 83            [24] 2974 	mov	dph,r4
      000D0C C0 02            [24] 2975 	push	ar2
      000D0E C0 01            [24] 2976 	push	ar1
u     000D10 12 00 00         [24] 2977 	lcall	__divsint
      000D13 AB 82            [24] 2978 	mov	r3,dpl
      000D15 D0 01            [24] 2979 	pop	ar1
      000D17 D0 02            [24] 2980 	pop	ar2
      000D19 D0 05            [24] 2981 	pop	ar5
      000D1B D0 06            [24] 2982 	pop	ar6
      000D1D 8B 07            [24] 2983 	mov	ar7,r3
                                   2984 ;	main.c:498: rev = rev * 10 + val;
u     000D1F 8D 00            [24] 2985 	mov	__mulint_PARM_2,r5
u     000D21 8E 01            [24] 2986 	mov	(__mulint_PARM_2 + 1),r6
      000D23 90 00 0A         [24] 2987 	mov	dptr,#0x000a
      000D26 C0 07            [24] 2988 	push	ar7
      000D28 C0 02            [24] 2989 	push	ar2
      000D2A C0 01            [24] 2990 	push	ar1
u     000D2C 12 00 00         [24] 2991 	lcall	__mulint
      000D2F AB 82            [24] 2992 	mov	r3,dpl
      000D31 AC 83            [24] 2993 	mov	r4,dph
      000D33 D0 01            [24] 2994 	pop	ar1
      000D35 D0 02            [24] 2995 	pop	ar2
      000D37 D0 07            [24] 2996 	pop	ar7
      000D39 E9               [12] 2997 	mov	a,r1
      000D3A 2B               [12] 2998 	add	a,r3
      000D3B FD               [12] 2999 	mov	r5,a
      000D3C EA               [12] 3000 	mov	a,r2
      000D3D 3C               [12] 3001 	addc	a,r4
      000D3E FE               [12] 3002 	mov	r6,a
      000D3F 80 9C            [24] 3003 	sjmp	00101$
      000D41                       3004 00103$:
                                   3005 ;	main.c:500: return rev;
      000D41 8D 82            [24] 3006 	mov	dpl,r5
      000D43 8E 83            [24] 3007 	mov	dph,r6
                                   3008 ;	main.c:501: }
      000D45 22               [24] 3009 	ret
                                   3010 ;------------------------------------------------------------
                                   3011 ;Allocation info for local variables in function 'asciiToDec'
                                   3012 ;------------------------------------------------------------
                                   3013 ;d                         Allocated to registers 
                                   3014 ;val                       Allocated to registers r2 
                                   3015 ;id                        Allocated to registers r6 r7 
                                   3016 ;------------------------------------------------------------
                                   3017 ;	main.c:503: void asciiToDec (uint8_t d) {
                                   3018 ;	-----------------------------------------
                                   3019 ;	 function asciiToDec
                                   3020 ;	-----------------------------------------
      000D46                       3021 _asciiToDec:
                                   3022 ;	main.c:506: id = reverse(d);
      000D46 12 0C D7         [24] 3023 	lcall	_reverse
      000D49 AE 82            [24] 3024 	mov	r6,dpl
      000D4B AF 83            [24] 3025 	mov	r7,dph
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 56.
Hexadecimal [24-Bits]



                                   3026 ;	main.c:507: while (id >= 1){
      000D4D                       3027 00101$:
      000D4D 8E 04            [24] 3028 	mov	ar4,r6
      000D4F 8F 05            [24] 3029 	mov	ar5,r7
      000D51 C3               [12] 3030 	clr	c
      000D52 EC               [12] 3031 	mov	a,r4
      000D53 94 01            [12] 3032 	subb	a,#0x01
      000D55 ED               [12] 3033 	mov	a,r5
      000D56 94 00            [12] 3034 	subb	a,#0x00
      000D58 40 42            [24] 3035 	jc	00103$
                                   3036 ;	main.c:509: val = id % 10;
u     000D5A 75 00 0A         [24] 3037 	mov	__moduint_PARM_2,#0x0a
u     000D5D 75 01 00         [24] 3038 	mov	(__moduint_PARM_2 + 1),#0x00
      000D60 8C 82            [24] 3039 	mov	dpl,r4
      000D62 8D 83            [24] 3040 	mov	dph,r5
      000D64 C0 05            [24] 3041 	push	ar5
      000D66 C0 04            [24] 3042 	push	ar4
u     000D68 12 00 00         [24] 3043 	lcall	__moduint
      000D6B AA 82            [24] 3044 	mov	r2,dpl
      000D6D D0 04            [24] 3045 	pop	ar4
      000D6F D0 05            [24] 3046 	pop	ar5
                                   3047 ;	main.c:510: id = id/10;
u     000D71 75 00 0A         [24] 3048 	mov	__divuint_PARM_2,#0x0a
u     000D74 75 01 00         [24] 3049 	mov	(__divuint_PARM_2 + 1),#0x00
      000D77 8C 82            [24] 3050 	mov	dpl,r4
      000D79 8D 83            [24] 3051 	mov	dph,r5
      000D7B C0 02            [24] 3052 	push	ar2
u     000D7D 12 00 00         [24] 3053 	lcall	__divuint
      000D80 AC 82            [24] 3054 	mov	r4,dpl
      000D82 AD 83            [24] 3055 	mov	r5,dph
      000D84 D0 02            [24] 3056 	pop	ar2
      000D86 8C 06            [24] 3057 	mov	ar6,r4
      000D88 8D 07            [24] 3058 	mov	ar7,r5
                                   3059 ;	main.c:511: write(val + '0');
      000D8A 74 30            [12] 3060 	mov	a,#0x30
      000D8C 2A               [12] 3061 	add	a,r2
      000D8D F5 82            [12] 3062 	mov	dpl,a
      000D8F C0 07            [24] 3063 	push	ar7
      000D91 C0 06            [24] 3064 	push	ar6
      000D93 12 0B 0C         [24] 3065 	lcall	_write
      000D96 D0 06            [24] 3066 	pop	ar6
      000D98 D0 07            [24] 3067 	pop	ar7
      000D9A 80 B1            [24] 3068 	sjmp	00101$
      000D9C                       3069 00103$:
                                   3070 ;	main.c:513: write('\n');
      000D9C 75 82 0A         [24] 3071 	mov	dpl,#0x0a
                                   3072 ;	main.c:514: }
      000D9F 02 0B 0C         [24] 3073 	ljmp	_write
                                   3074 ;------------------------------------------------------------
                                   3075 ;Allocation info for local variables in function 'asciiToHex'
                                   3076 ;------------------------------------------------------------
                                   3077 ;d                         Allocated to registers r7 
                                   3078 ;val                       Allocated to registers r2 
                                   3079 ;store                     Allocated with name '_asciiToHex_store_65536_200'
                                   3080 ;i                         Allocated to registers r6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 57.
Hexadecimal [24-Bits]



                                   3081 ;------------------------------------------------------------
                                   3082 ;	main.c:516: void asciiToHex (uint8_t d) {
                                   3083 ;	-----------------------------------------
                                   3084 ;	 function asciiToHex
                                   3085 ;	-----------------------------------------
      000DA2                       3086 _asciiToHex:
      000DA2 AF 82            [24] 3087 	mov	r7,dpl
                                   3088 ;	main.c:520: store[0] = 0;
      000DA4 75 5B 00         [24] 3089 	mov	_asciiToHex_store_65536_200,#0x00
                                   3090 ;	main.c:521: store[1] = 0;
      000DA7 75 5C 00         [24] 3091 	mov	(_asciiToHex_store_65536_200 + 0x0001),#0x00
                                   3092 ;	main.c:522: while (d >= 1){
      000DAA 7E 00            [12] 3093 	mov	r6,#0x00
      000DAC                       3094 00104$:
      000DAC BF 01 00         [24] 3095 	cjne	r7,#0x01,00122$
      000DAF                       3096 00122$:
      000DAF 40 5A            [24] 3097 	jc	00106$
                                   3098 ;	main.c:524: val = d % 16;
      000DB1 8F 04            [24] 3099 	mov	ar4,r7
      000DB3 7D 00            [12] 3100 	mov	r5,#0x00
      000DB5 74 0F            [12] 3101 	mov	a,#0x0f
      000DB7 5C               [12] 3102 	anl	a,r4
      000DB8 FA               [12] 3103 	mov	r2,a
                                   3104 ;	main.c:525: d = d/16;
u     000DB9 75 00 10         [24] 3105 	mov	__divsint_PARM_2,#0x10
                                   3106 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
u     000DBC 8D 01            [24] 3107 	mov	(__divsint_PARM_2 + 1),r5
      000DBE 8C 82            [24] 3108 	mov	dpl,r4
      000DC0 8D 83            [24] 3109 	mov	dph,r5
      000DC2 C0 06            [24] 3110 	push	ar6
      000DC4 C0 02            [24] 3111 	push	ar2
u     000DC6 12 00 00         [24] 3112 	lcall	__divsint
      000DC9 AC 82            [24] 3113 	mov	r4,dpl
      000DCB D0 02            [24] 3114 	pop	ar2
      000DCD D0 06            [24] 3115 	pop	ar6
      000DCF 8C 07            [24] 3116 	mov	ar7,r4
                                   3117 ;	main.c:526: if (val <= 9) {
      000DD1 EA               [12] 3118 	mov	a,r2
      000DD2 24 F6            [12] 3119 	add	a,#0xff - 0x09
      000DD4 40 0C            [24] 3120 	jc	00102$
                                   3121 ;	main.c:528: store[i] = val + '0';
      000DD6 EE               [12] 3122 	mov	a,r6
      000DD7 24 5B            [12] 3123 	add	a,#_asciiToHex_store_65536_200
      000DD9 F9               [12] 3124 	mov	r1,a
      000DDA 8A 05            [24] 3125 	mov	ar5,r2
      000DDC 74 30            [12] 3126 	mov	a,#0x30
      000DDE 2D               [12] 3127 	add	a,r5
      000DDF F7               [12] 3128 	mov	@r1,a
      000DE0 80 26            [24] 3129 	sjmp	00103$
      000DE2                       3130 00102$:
                                   3131 ;	main.c:531: store[i] = (val%10) + 'A';
      000DE2 EE               [12] 3132 	mov	a,r6
      000DE3 24 5B            [12] 3133 	add	a,#_asciiToHex_store_65536_200
      000DE5 F9               [12] 3134 	mov	r1,a
      000DE6 7D 00            [12] 3135 	mov	r5,#0x00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 58.
Hexadecimal [24-Bits]



u     000DE8 75 00 0A         [24] 3136 	mov	__modsint_PARM_2,#0x0a
                                   3137 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
u     000DEB 8D 01            [24] 3138 	mov	(__modsint_PARM_2 + 1),r5
      000DED 8A 82            [24] 3139 	mov	dpl,r2
      000DEF 8D 83            [24] 3140 	mov	dph,r5
      000DF1 C0 07            [24] 3141 	push	ar7
      000DF3 C0 06            [24] 3142 	push	ar6
      000DF5 C0 01            [24] 3143 	push	ar1
u     000DF7 12 00 00         [24] 3144 	lcall	__modsint
      000DFA AC 82            [24] 3145 	mov	r4,dpl
      000DFC AD 83            [24] 3146 	mov	r5,dph
      000DFE D0 01            [24] 3147 	pop	ar1
      000E00 D0 06            [24] 3148 	pop	ar6
      000E02 D0 07            [24] 3149 	pop	ar7
      000E04 74 41            [12] 3150 	mov	a,#0x41
      000E06 2C               [12] 3151 	add	a,r4
      000E07 F7               [12] 3152 	mov	@r1,a
      000E08                       3153 00103$:
                                   3154 ;	main.c:533: i++;
      000E08 0E               [12] 3155 	inc	r6
      000E09 80 A1            [24] 3156 	sjmp	00104$
      000E0B                       3157 00106$:
                                   3158 ;	main.c:535: write(store[1]);
      000E0B 85 5C 82         [24] 3159 	mov	dpl,(_asciiToHex_store_65536_200 + 0x0001)
      000E0E 12 0B 0C         [24] 3160 	lcall	_write
                                   3161 ;	main.c:536: write(store[0]);
      000E11 85 5B 82         [24] 3162 	mov	dpl,_asciiToHex_store_65536_200
                                   3163 ;	main.c:537: }
      000E14 02 0B 0C         [24] 3164 	ljmp	_write
                                   3165 ;------------------------------------------------------------
                                   3166 ;Allocation info for local variables in function 'writeSomeLines'
                                   3167 ;------------------------------------------------------------
                                   3168 ;	main.c:539: void writeSomeLines () {
                                   3169 ;	-----------------------------------------
                                   3170 ;	 function writeSomeLines
                                   3171 ;	-----------------------------------------
      000E17                       3172 _writeSomeLines:
                                   3173 ;	main.c:540: fillScreen(RED);
      000E17 90 F8 00         [24] 3174 	mov	dptr,#0xf800
      000E1A 12 07 9A         [24] 3175 	lcall	_fillScreen
                                   3176 ;	main.c:542: delay(20);
      000E1D 90 00 14         [24] 3177 	mov	dptr,#0x0014
      000E20 12 00 10         [24] 3178 	lcall	_delay
                                   3179 ;	main.c:543: fillScreen(GREEN);
      000E23 90 07 E0         [24] 3180 	mov	dptr,#0x07e0
      000E26 12 07 9A         [24] 3181 	lcall	_fillScreen
                                   3182 ;	main.c:545: delay(20);
      000E29 90 00 14         [24] 3183 	mov	dptr,#0x0014
      000E2C 12 00 10         [24] 3184 	lcall	_delay
                                   3185 ;	main.c:547: setRotation(0);
      000E2F 75 82 00         [24] 3186 	mov	dpl,#0x00
      000E32 12 00 D7         [24] 3187 	lcall	_setRotation
                                   3188 ;	main.c:548: fillScreen(BLACK);
      000E35 90 00 00         [24] 3189 	mov	dptr,#0x0000
      000E38 12 07 9A         [24] 3190 	lcall	_fillScreen
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 59.
Hexadecimal [24-Bits]



                                   3191 ;	main.c:549: testCircles(20, RED);
      000E3B 75 3E 00         [24] 3192 	mov	_testCircles_PARM_2,#0x00
      000E3E 75 3F F8         [24] 3193 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000E41 75 82 14         [24] 3194 	mov	dpl,#0x14
      000E44 12 06 28         [24] 3195 	lcall	_testCircles
                                   3196 ;	main.c:550: delay(100);
      000E47 90 00 64         [24] 3197 	mov	dptr,#0x0064
      000E4A 12 00 10         [24] 3198 	lcall	_delay
                                   3199 ;	main.c:551: fillScreen(BLACK);
      000E4D 90 00 00         [24] 3200 	mov	dptr,#0x0000
      000E50 12 07 9A         [24] 3201 	lcall	_fillScreen
                                   3202 ;	main.c:552: setTextSize(5);
      000E53 75 82 05         [24] 3203 	mov	dpl,#0x05
      000E56 12 00 BF         [24] 3204 	lcall	_setTextSize
                                   3205 ;	main.c:553: setTextColor(CYAN, BLACK);
      000E59 E4               [12] 3206 	clr	a
      000E5A F5 00            [12] 3207 	mov	_setTextColor_PARM_2,a
      000E5C F5 01            [12] 3208 	mov	(_setTextColor_PARM_2 + 1),a
      000E5E 90 07 FF         [24] 3209 	mov	dptr,#0x07ff
      000E61 12 00 B2         [24] 3210 	lcall	_setTextColor
                                   3211 ;	main.c:554: LCD_string_write("Welcome\n");
      000E64 90 04 FB         [24] 3212 	mov	dptr,#___str_0
      000E67 75 F0 80         [24] 3213 	mov	b,#0x80
      000E6A 12 0B 7A         [24] 3214 	lcall	_LCD_string_write
                                   3215 ;	main.c:555: setTextSize(3);
      000E6D 75 82 03         [24] 3216 	mov	dpl,#0x03
      000E70 12 00 BF         [24] 3217 	lcall	_setTextSize
                                   3218 ;	main.c:556: LCD_string_write("ECEN-4330\n");
      000E73 90 05 04         [24] 3219 	mov	dptr,#___str_1
      000E76 75 F0 80         [24] 3220 	mov	b,#0x80
      000E79 12 0B 7A         [24] 3221 	lcall	_LCD_string_write
                                   3222 ;	main.c:557: LCD_string_write("Rotation 0");
      000E7C 90 05 0F         [24] 3223 	mov	dptr,#___str_2
      000E7F 75 F0 80         [24] 3224 	mov	b,#0x80
      000E82 12 0B 7A         [24] 3225 	lcall	_LCD_string_write
                                   3226 ;	main.c:558: delay(200);
      000E85 90 00 C8         [24] 3227 	mov	dptr,#0x00c8
      000E88 12 00 10         [24] 3228 	lcall	_delay
                                   3229 ;	main.c:559: fillScreen(BLACK);
      000E8B 90 00 00         [24] 3230 	mov	dptr,#0x0000
      000E8E 12 07 9A         [24] 3231 	lcall	_fillScreen
                                   3232 ;	main.c:560: setRotation(1);
      000E91 75 82 01         [24] 3233 	mov	dpl,#0x01
      000E94 12 00 D7         [24] 3234 	lcall	_setRotation
                                   3235 ;	main.c:561: setCursor(0,0);
      000E97 E4               [12] 3236 	clr	a
      000E98 F5 00            [12] 3237 	mov	_setCursor_PARM_2,a
      000E9A F5 01            [12] 3238 	mov	(_setCursor_PARM_2 + 1),a
      000E9C 90 00 00         [24] 3239 	mov	dptr,#0x0000
      000E9F 12 00 A5         [24] 3240 	lcall	_setCursor
                                   3241 ;	main.c:562: LCD_string_write("Rotation 1");
      000EA2 90 05 1A         [24] 3242 	mov	dptr,#___str_3
      000EA5 75 F0 80         [24] 3243 	mov	b,#0x80
      000EA8 12 0B 7A         [24] 3244 	lcall	_LCD_string_write
                                   3245 ;	main.c:563: delay(500);
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 60.
Hexadecimal [24-Bits]



      000EAB 90 01 F4         [24] 3246 	mov	dptr,#0x01f4
      000EAE 12 00 10         [24] 3247 	lcall	_delay
                                   3248 ;	main.c:564: fillScreen(BLACK);
      000EB1 90 00 00         [24] 3249 	mov	dptr,#0x0000
      000EB4 12 07 9A         [24] 3250 	lcall	_fillScreen
                                   3251 ;	main.c:565: setRotation(2);
      000EB7 75 82 02         [24] 3252 	mov	dpl,#0x02
      000EBA 12 00 D7         [24] 3253 	lcall	_setRotation
                                   3254 ;	main.c:566: setCursor(0,0);
      000EBD E4               [12] 3255 	clr	a
      000EBE F5 00            [12] 3256 	mov	_setCursor_PARM_2,a
      000EC0 F5 01            [12] 3257 	mov	(_setCursor_PARM_2 + 1),a
      000EC2 90 00 00         [24] 3258 	mov	dptr,#0x0000
      000EC5 12 00 A5         [24] 3259 	lcall	_setCursor
                                   3260 ;	main.c:567: LCD_string_write("Rotation 2");
      000EC8 90 05 25         [24] 3261 	mov	dptr,#___str_4
      000ECB 75 F0 80         [24] 3262 	mov	b,#0x80
      000ECE 12 0B 7A         [24] 3263 	lcall	_LCD_string_write
                                   3264 ;	main.c:568: delay(500);
      000ED1 90 01 F4         [24] 3265 	mov	dptr,#0x01f4
      000ED4 12 00 10         [24] 3266 	lcall	_delay
                                   3267 ;	main.c:569: fillScreen(BLACK);
      000ED7 90 00 00         [24] 3268 	mov	dptr,#0x0000
      000EDA 12 07 9A         [24] 3269 	lcall	_fillScreen
                                   3270 ;	main.c:570: setRotation(3);
      000EDD 75 82 03         [24] 3271 	mov	dpl,#0x03
      000EE0 12 00 D7         [24] 3272 	lcall	_setRotation
                                   3273 ;	main.c:571: setCursor(0,0);
      000EE3 E4               [12] 3274 	clr	a
      000EE4 F5 00            [12] 3275 	mov	_setCursor_PARM_2,a
      000EE6 F5 01            [12] 3276 	mov	(_setCursor_PARM_2 + 1),a
      000EE8 90 00 00         [24] 3277 	mov	dptr,#0x0000
      000EEB 12 00 A5         [24] 3278 	lcall	_setCursor
                                   3279 ;	main.c:572: delay(200);
      000EEE 90 00 C8         [24] 3280 	mov	dptr,#0x00c8
      000EF1 12 00 10         [24] 3281 	lcall	_delay
                                   3282 ;	main.c:573: LCD_string_write("Rotation 3");
      000EF4 90 05 30         [24] 3283 	mov	dptr,#___str_5
      000EF7 75 F0 80         [24] 3284 	mov	b,#0x80
      000EFA 12 0B 7A         [24] 3285 	lcall	_LCD_string_write
                                   3286 ;	main.c:574: delay(200);
      000EFD 90 00 C8         [24] 3287 	mov	dptr,#0x00c8
                                   3288 ;	main.c:575: }
      000F00 02 00 10         [24] 3289 	ljmp	_delay
                                   3290 ;------------------------------------------------------------
                                   3291 ;Allocation info for local variables in function 'main'
                                   3292 ;------------------------------------------------------------
                                   3293 ;	main.c:578: void main (void) {
                                   3294 ;	-----------------------------------------
                                   3295 ;	 function main
                                   3296 ;	-----------------------------------------
      000F03                       3297 _main:
                                   3298 ;	main.c:579: CD = 0;
                                   3299 ;	assignBit
      000F03 C2 B5            [12] 3300 	clr	_P3_5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 61.
Hexadecimal [24-Bits]



                                   3301 ;	main.c:580: IOM = 0;
                                   3302 ;	assignBit
      000F05 C2 B4            [12] 3303 	clr	_P3_4
                                   3304 ;	main.c:582: iowrite8(seg7_address, 0xC0);
      000F07 75 00 C0         [24] 3305 	mov	_iowrite8_PARM_2,#0xc0
      000F0A 85 14 82         [24] 3306 	mov	dpl,_seg7_address
      000F0D 85 15 83         [24] 3307 	mov	dph,(_seg7_address + 1)
      000F10 12 00 00         [24] 3308 	lcall	_iowrite8
                                   3309 ;	main.c:583: IOM = 0;
                                   3310 ;	assignBit
      000F13 C2 B4            [12] 3311 	clr	_P3_4
                                   3312 ;	main.c:584: CD = 1;
                                   3313 ;	assignBit
      000F15 D2 B5            [12] 3314 	setb	_P3_5
                                   3315 ;	main.c:586: TFT_LCD_INIT();
      000F17 12 01 DD         [24] 3316 	lcall	_TFT_LCD_INIT
                                   3317 ;	main.c:587: iowrite8(seg7_address, 0xF9);
      000F1A 75 00 F9         [24] 3318 	mov	_iowrite8_PARM_2,#0xf9
      000F1D 85 14 82         [24] 3319 	mov	dpl,_seg7_address
      000F20 85 15 83         [24] 3320 	mov	dph,(_seg7_address + 1)
      000F23 12 00 00         [24] 3321 	lcall	_iowrite8
                                   3322 ;	main.c:588: writeSomeLines();
      000F26 12 0E 17         [24] 3323 	lcall	_writeSomeLines
                                   3324 ;	main.c:589: setRotation(2);
      000F29 75 82 02         [24] 3325 	mov	dpl,#0x02
      000F2C 12 00 D7         [24] 3326 	lcall	_setRotation
                                   3327 ;	main.c:590: fillScreen(GRAY);
      000F2F 90 D6 BA         [24] 3328 	mov	dptr,#0xd6ba
      000F32 12 07 9A         [24] 3329 	lcall	_fillScreen
                                   3330 ;	main.c:591: setTextColor(BLACK, GRAY);
      000F35 75 00 BA         [24] 3331 	mov	_setTextColor_PARM_2,#0xba
      000F38 75 01 D6         [24] 3332 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      000F3B 90 00 00         [24] 3333 	mov	dptr,#0x0000
      000F3E 12 00 B2         [24] 3334 	lcall	_setTextColor
                                   3335 ;	main.c:592: setCursor(0,0);
      000F41 E4               [12] 3336 	clr	a
      000F42 F5 00            [12] 3337 	mov	_setCursor_PARM_2,a
      000F44 F5 01            [12] 3338 	mov	(_setCursor_PARM_2 + 1),a
      000F46 90 00 00         [24] 3339 	mov	dptr,#0x0000
      000F49 12 00 A5         [24] 3340 	lcall	_setCursor
                                   3341 ;	main.c:593: LCD_string_write("Free Type: \n");
      000F4C 90 05 3B         [24] 3342 	mov	dptr,#___str_6
      000F4F 75 F0 80         [24] 3343 	mov	b,#0x80
      000F52 12 0B 7A         [24] 3344 	lcall	_LCD_string_write
                                   3345 ;	main.c:595: while(1) {
      000F55                       3346 00102$:
                                   3347 ;	main.c:596: freeType();
      000F55 12 0B EA         [24] 3348 	lcall	_freeType
                                   3349 ;	main.c:598: }
      000F58 80 FB            [24] 3350 	sjmp	00102$
                                   3351 	.area CSEG    (CODE)
                                   3352 	.area CONST   (CODE)
      000000                       3353 _font:
      000000 00                    3354 	.db #0x00	; 0
      000001 00                    3355 	.db #0x00	; 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 62.
Hexadecimal [24-Bits]



      000002 00                    3356 	.db #0x00	; 0
      000003 00                    3357 	.db #0x00	; 0
      000004 00                    3358 	.db #0x00	; 0
      000005 3E                    3359 	.db #0x3e	; 62
      000006 5B                    3360 	.db #0x5b	; 91
      000007 4F                    3361 	.db #0x4f	; 79	'O'
      000008 5B                    3362 	.db #0x5b	; 91
      000009 3E                    3363 	.db #0x3e	; 62
      00000A 3E                    3364 	.db #0x3e	; 62
      00000B 6B                    3365 	.db #0x6b	; 107	'k'
      00000C 4F                    3366 	.db #0x4f	; 79	'O'
      00000D 6B                    3367 	.db #0x6b	; 107	'k'
      00000E 3E                    3368 	.db #0x3e	; 62
      00000F 1C                    3369 	.db #0x1c	; 28
      000010 3E                    3370 	.db #0x3e	; 62
      000011 7C                    3371 	.db #0x7c	; 124
      000012 3E                    3372 	.db #0x3e	; 62
      000013 1C                    3373 	.db #0x1c	; 28
      000014 18                    3374 	.db #0x18	; 24
      000015 3C                    3375 	.db #0x3c	; 60
      000016 7E                    3376 	.db #0x7e	; 126
      000017 3C                    3377 	.db #0x3c	; 60
      000018 18                    3378 	.db #0x18	; 24
      000019 1C                    3379 	.db #0x1c	; 28
      00001A 57                    3380 	.db #0x57	; 87	'W'
      00001B 7D                    3381 	.db #0x7d	; 125
      00001C 57                    3382 	.db #0x57	; 87	'W'
      00001D 1C                    3383 	.db #0x1c	; 28
      00001E 1C                    3384 	.db #0x1c	; 28
      00001F 5E                    3385 	.db #0x5e	; 94
      000020 7F                    3386 	.db #0x7f	; 127
      000021 5E                    3387 	.db #0x5e	; 94
      000022 1C                    3388 	.db #0x1c	; 28
      000023 00                    3389 	.db #0x00	; 0
      000024 18                    3390 	.db #0x18	; 24
      000025 3C                    3391 	.db #0x3c	; 60
      000026 18                    3392 	.db #0x18	; 24
      000027 00                    3393 	.db #0x00	; 0
      000028 FF                    3394 	.db #0xff	; 255
      000029 E7                    3395 	.db #0xe7	; 231
      00002A C3                    3396 	.db #0xc3	; 195
      00002B E7                    3397 	.db #0xe7	; 231
      00002C FF                    3398 	.db #0xff	; 255
      00002D 00                    3399 	.db #0x00	; 0
      00002E 18                    3400 	.db #0x18	; 24
      00002F 24                    3401 	.db #0x24	; 36
      000030 18                    3402 	.db #0x18	; 24
      000031 00                    3403 	.db #0x00	; 0
      000032 FF                    3404 	.db #0xff	; 255
      000033 E7                    3405 	.db #0xe7	; 231
      000034 DB                    3406 	.db #0xdb	; 219
      000035 E7                    3407 	.db #0xe7	; 231
      000036 FF                    3408 	.db #0xff	; 255
      000037 30                    3409 	.db #0x30	; 48	'0'
      000038 48                    3410 	.db #0x48	; 72	'H'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 63.
Hexadecimal [24-Bits]



      000039 3A                    3411 	.db #0x3a	; 58
      00003A 06                    3412 	.db #0x06	; 6
      00003B 0E                    3413 	.db #0x0e	; 14
      00003C 26                    3414 	.db #0x26	; 38
      00003D 29                    3415 	.db #0x29	; 41
      00003E 79                    3416 	.db #0x79	; 121	'y'
      00003F 29                    3417 	.db #0x29	; 41
      000040 26                    3418 	.db #0x26	; 38
      000041 40                    3419 	.db #0x40	; 64
      000042 7F                    3420 	.db #0x7f	; 127
      000043 05                    3421 	.db #0x05	; 5
      000044 05                    3422 	.db #0x05	; 5
      000045 07                    3423 	.db #0x07	; 7
      000046 40                    3424 	.db #0x40	; 64
      000047 7F                    3425 	.db #0x7f	; 127
      000048 05                    3426 	.db #0x05	; 5
      000049 25                    3427 	.db #0x25	; 37
      00004A 3F                    3428 	.db #0x3f	; 63
      00004B 5A                    3429 	.db #0x5a	; 90	'Z'
      00004C 3C                    3430 	.db #0x3c	; 60
      00004D E7                    3431 	.db #0xe7	; 231
      00004E 3C                    3432 	.db #0x3c	; 60
      00004F 5A                    3433 	.db #0x5a	; 90	'Z'
      000050 7F                    3434 	.db #0x7f	; 127
      000051 3E                    3435 	.db #0x3e	; 62
      000052 1C                    3436 	.db #0x1c	; 28
      000053 1C                    3437 	.db #0x1c	; 28
      000054 08                    3438 	.db #0x08	; 8
      000055 08                    3439 	.db #0x08	; 8
      000056 1C                    3440 	.db #0x1c	; 28
      000057 1C                    3441 	.db #0x1c	; 28
      000058 3E                    3442 	.db #0x3e	; 62
      000059 7F                    3443 	.db #0x7f	; 127
      00005A 14                    3444 	.db #0x14	; 20
      00005B 22                    3445 	.db #0x22	; 34
      00005C 7F                    3446 	.db #0x7f	; 127
      00005D 22                    3447 	.db #0x22	; 34
      00005E 14                    3448 	.db #0x14	; 20
      00005F 5F                    3449 	.db #0x5f	; 95
      000060 5F                    3450 	.db #0x5f	; 95
      000061 00                    3451 	.db #0x00	; 0
      000062 5F                    3452 	.db #0x5f	; 95
      000063 5F                    3453 	.db #0x5f	; 95
      000064 06                    3454 	.db #0x06	; 6
      000065 09                    3455 	.db #0x09	; 9
      000066 7F                    3456 	.db #0x7f	; 127
      000067 01                    3457 	.db #0x01	; 1
      000068 7F                    3458 	.db #0x7f	; 127
      000069 00                    3459 	.db #0x00	; 0
      00006A 66                    3460 	.db #0x66	; 102	'f'
      00006B 89                    3461 	.db #0x89	; 137
      00006C 95                    3462 	.db #0x95	; 149
      00006D 6A                    3463 	.db #0x6a	; 106	'j'
      00006E 60                    3464 	.db #0x60	; 96
      00006F 60                    3465 	.db #0x60	; 96
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 64.
Hexadecimal [24-Bits]



      000070 60                    3466 	.db #0x60	; 96
      000071 60                    3467 	.db #0x60	; 96
      000072 60                    3468 	.db #0x60	; 96
      000073 94                    3469 	.db #0x94	; 148
      000074 A2                    3470 	.db #0xa2	; 162
      000075 FF                    3471 	.db #0xff	; 255
      000076 A2                    3472 	.db #0xa2	; 162
      000077 94                    3473 	.db #0x94	; 148
      000078 08                    3474 	.db #0x08	; 8
      000079 04                    3475 	.db #0x04	; 4
      00007A 7E                    3476 	.db #0x7e	; 126
      00007B 04                    3477 	.db #0x04	; 4
      00007C 08                    3478 	.db #0x08	; 8
      00007D 10                    3479 	.db #0x10	; 16
      00007E 20                    3480 	.db #0x20	; 32
      00007F 7E                    3481 	.db #0x7e	; 126
      000080 20                    3482 	.db #0x20	; 32
      000081 10                    3483 	.db #0x10	; 16
      000082 08                    3484 	.db #0x08	; 8
      000083 08                    3485 	.db #0x08	; 8
      000084 2A                    3486 	.db #0x2a	; 42
      000085 1C                    3487 	.db #0x1c	; 28
      000086 08                    3488 	.db #0x08	; 8
      000087 08                    3489 	.db #0x08	; 8
      000088 1C                    3490 	.db #0x1c	; 28
      000089 2A                    3491 	.db #0x2a	; 42
      00008A 08                    3492 	.db #0x08	; 8
      00008B 08                    3493 	.db #0x08	; 8
      00008C 1E                    3494 	.db #0x1e	; 30
      00008D 10                    3495 	.db #0x10	; 16
      00008E 10                    3496 	.db #0x10	; 16
      00008F 10                    3497 	.db #0x10	; 16
      000090 10                    3498 	.db #0x10	; 16
      000091 0C                    3499 	.db #0x0c	; 12
      000092 1E                    3500 	.db #0x1e	; 30
      000093 0C                    3501 	.db #0x0c	; 12
      000094 1E                    3502 	.db #0x1e	; 30
      000095 0C                    3503 	.db #0x0c	; 12
      000096 30                    3504 	.db #0x30	; 48	'0'
      000097 38                    3505 	.db #0x38	; 56	'8'
      000098 3E                    3506 	.db #0x3e	; 62
      000099 38                    3507 	.db #0x38	; 56	'8'
      00009A 30                    3508 	.db #0x30	; 48	'0'
      00009B 06                    3509 	.db #0x06	; 6
      00009C 0E                    3510 	.db #0x0e	; 14
      00009D 3E                    3511 	.db #0x3e	; 62
      00009E 0E                    3512 	.db #0x0e	; 14
      00009F 06                    3513 	.db #0x06	; 6
      0000A0 00                    3514 	.db #0x00	; 0
      0000A1 00                    3515 	.db #0x00	; 0
      0000A2 00                    3516 	.db #0x00	; 0
      0000A3 00                    3517 	.db #0x00	; 0
      0000A4 00                    3518 	.db #0x00	; 0
      0000A5 00                    3519 	.db #0x00	; 0
      0000A6 00                    3520 	.db #0x00	; 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 65.
Hexadecimal [24-Bits]



      0000A7 5F                    3521 	.db #0x5f	; 95
      0000A8 00                    3522 	.db #0x00	; 0
      0000A9 00                    3523 	.db #0x00	; 0
      0000AA 00                    3524 	.db #0x00	; 0
      0000AB 07                    3525 	.db #0x07	; 7
      0000AC 00                    3526 	.db #0x00	; 0
      0000AD 07                    3527 	.db #0x07	; 7
      0000AE 00                    3528 	.db #0x00	; 0
      0000AF 14                    3529 	.db #0x14	; 20
      0000B0 7F                    3530 	.db #0x7f	; 127
      0000B1 14                    3531 	.db #0x14	; 20
      0000B2 7F                    3532 	.db #0x7f	; 127
      0000B3 14                    3533 	.db #0x14	; 20
      0000B4 24                    3534 	.db #0x24	; 36
      0000B5 2A                    3535 	.db #0x2a	; 42
      0000B6 7F                    3536 	.db #0x7f	; 127
      0000B7 2A                    3537 	.db #0x2a	; 42
      0000B8 12                    3538 	.db #0x12	; 18
      0000B9 23                    3539 	.db #0x23	; 35
      0000BA 13                    3540 	.db #0x13	; 19
      0000BB 08                    3541 	.db #0x08	; 8
      0000BC 64                    3542 	.db #0x64	; 100	'd'
      0000BD 62                    3543 	.db #0x62	; 98	'b'
      0000BE 36                    3544 	.db #0x36	; 54	'6'
      0000BF 49                    3545 	.db #0x49	; 73	'I'
      0000C0 56                    3546 	.db #0x56	; 86	'V'
      0000C1 20                    3547 	.db #0x20	; 32
      0000C2 50                    3548 	.db #0x50	; 80	'P'
      0000C3 00                    3549 	.db #0x00	; 0
      0000C4 08                    3550 	.db #0x08	; 8
      0000C5 07                    3551 	.db #0x07	; 7
      0000C6 03                    3552 	.db #0x03	; 3
      0000C7 00                    3553 	.db #0x00	; 0
      0000C8 00                    3554 	.db #0x00	; 0
      0000C9 1C                    3555 	.db #0x1c	; 28
      0000CA 22                    3556 	.db #0x22	; 34
      0000CB 41                    3557 	.db #0x41	; 65	'A'
      0000CC 00                    3558 	.db #0x00	; 0
      0000CD 00                    3559 	.db #0x00	; 0
      0000CE 41                    3560 	.db #0x41	; 65	'A'
      0000CF 22                    3561 	.db #0x22	; 34
      0000D0 1C                    3562 	.db #0x1c	; 28
      0000D1 00                    3563 	.db #0x00	; 0
      0000D2 2A                    3564 	.db #0x2a	; 42
      0000D3 1C                    3565 	.db #0x1c	; 28
      0000D4 7F                    3566 	.db #0x7f	; 127
      0000D5 1C                    3567 	.db #0x1c	; 28
      0000D6 2A                    3568 	.db #0x2a	; 42
      0000D7 08                    3569 	.db #0x08	; 8
      0000D8 08                    3570 	.db #0x08	; 8
      0000D9 3E                    3571 	.db #0x3e	; 62
      0000DA 08                    3572 	.db #0x08	; 8
      0000DB 08                    3573 	.db #0x08	; 8
      0000DC 00                    3574 	.db #0x00	; 0
      0000DD 80                    3575 	.db #0x80	; 128
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 66.
Hexadecimal [24-Bits]



      0000DE 70                    3576 	.db #0x70	; 112	'p'
      0000DF 30                    3577 	.db #0x30	; 48	'0'
      0000E0 00                    3578 	.db #0x00	; 0
      0000E1 08                    3579 	.db #0x08	; 8
      0000E2 08                    3580 	.db #0x08	; 8
      0000E3 08                    3581 	.db #0x08	; 8
      0000E4 08                    3582 	.db #0x08	; 8
      0000E5 08                    3583 	.db #0x08	; 8
      0000E6 00                    3584 	.db #0x00	; 0
      0000E7 00                    3585 	.db #0x00	; 0
      0000E8 60                    3586 	.db #0x60	; 96
      0000E9 60                    3587 	.db #0x60	; 96
      0000EA 00                    3588 	.db #0x00	; 0
      0000EB 20                    3589 	.db #0x20	; 32
      0000EC 10                    3590 	.db #0x10	; 16
      0000ED 08                    3591 	.db #0x08	; 8
      0000EE 04                    3592 	.db #0x04	; 4
      0000EF 02                    3593 	.db #0x02	; 2
      0000F0 3E                    3594 	.db #0x3e	; 62
      0000F1 51                    3595 	.db #0x51	; 81	'Q'
      0000F2 49                    3596 	.db #0x49	; 73	'I'
      0000F3 45                    3597 	.db #0x45	; 69	'E'
      0000F4 3E                    3598 	.db #0x3e	; 62
      0000F5 00                    3599 	.db #0x00	; 0
      0000F6 42                    3600 	.db #0x42	; 66	'B'
      0000F7 7F                    3601 	.db #0x7f	; 127
      0000F8 40                    3602 	.db #0x40	; 64
      0000F9 00                    3603 	.db #0x00	; 0
      0000FA 72                    3604 	.db #0x72	; 114	'r'
      0000FB 49                    3605 	.db #0x49	; 73	'I'
      0000FC 49                    3606 	.db #0x49	; 73	'I'
      0000FD 49                    3607 	.db #0x49	; 73	'I'
      0000FE 46                    3608 	.db #0x46	; 70	'F'
      0000FF 21                    3609 	.db #0x21	; 33
      000100 41                    3610 	.db #0x41	; 65	'A'
      000101 49                    3611 	.db #0x49	; 73	'I'
      000102 4D                    3612 	.db #0x4d	; 77	'M'
      000103 33                    3613 	.db #0x33	; 51	'3'
      000104 18                    3614 	.db #0x18	; 24
      000105 14                    3615 	.db #0x14	; 20
      000106 12                    3616 	.db #0x12	; 18
      000107 7F                    3617 	.db #0x7f	; 127
      000108 10                    3618 	.db #0x10	; 16
      000109 27                    3619 	.db #0x27	; 39
      00010A 45                    3620 	.db #0x45	; 69	'E'
      00010B 45                    3621 	.db #0x45	; 69	'E'
      00010C 45                    3622 	.db #0x45	; 69	'E'
      00010D 39                    3623 	.db #0x39	; 57	'9'
      00010E 3C                    3624 	.db #0x3c	; 60
      00010F 4A                    3625 	.db #0x4a	; 74	'J'
      000110 49                    3626 	.db #0x49	; 73	'I'
      000111 49                    3627 	.db #0x49	; 73	'I'
      000112 31                    3628 	.db #0x31	; 49	'1'
      000113 41                    3629 	.db #0x41	; 65	'A'
      000114 21                    3630 	.db #0x21	; 33
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 67.
Hexadecimal [24-Bits]



      000115 11                    3631 	.db #0x11	; 17
      000116 09                    3632 	.db #0x09	; 9
      000117 07                    3633 	.db #0x07	; 7
      000118 36                    3634 	.db #0x36	; 54	'6'
      000119 49                    3635 	.db #0x49	; 73	'I'
      00011A 49                    3636 	.db #0x49	; 73	'I'
      00011B 49                    3637 	.db #0x49	; 73	'I'
      00011C 36                    3638 	.db #0x36	; 54	'6'
      00011D 46                    3639 	.db #0x46	; 70	'F'
      00011E 49                    3640 	.db #0x49	; 73	'I'
      00011F 49                    3641 	.db #0x49	; 73	'I'
      000120 29                    3642 	.db #0x29	; 41
      000121 1E                    3643 	.db #0x1e	; 30
      000122 00                    3644 	.db #0x00	; 0
      000123 00                    3645 	.db #0x00	; 0
      000124 14                    3646 	.db #0x14	; 20
      000125 00                    3647 	.db #0x00	; 0
      000126 00                    3648 	.db #0x00	; 0
      000127 00                    3649 	.db #0x00	; 0
      000128 40                    3650 	.db #0x40	; 64
      000129 34                    3651 	.db #0x34	; 52	'4'
      00012A 00                    3652 	.db #0x00	; 0
      00012B 00                    3653 	.db #0x00	; 0
      00012C 00                    3654 	.db #0x00	; 0
      00012D 08                    3655 	.db #0x08	; 8
      00012E 14                    3656 	.db #0x14	; 20
      00012F 22                    3657 	.db #0x22	; 34
      000130 41                    3658 	.db #0x41	; 65	'A'
      000131 14                    3659 	.db #0x14	; 20
      000132 14                    3660 	.db #0x14	; 20
      000133 14                    3661 	.db #0x14	; 20
      000134 14                    3662 	.db #0x14	; 20
      000135 14                    3663 	.db #0x14	; 20
      000136 00                    3664 	.db #0x00	; 0
      000137 41                    3665 	.db #0x41	; 65	'A'
      000138 22                    3666 	.db #0x22	; 34
      000139 14                    3667 	.db #0x14	; 20
      00013A 08                    3668 	.db #0x08	; 8
      00013B 02                    3669 	.db #0x02	; 2
      00013C 01                    3670 	.db #0x01	; 1
      00013D 59                    3671 	.db #0x59	; 89	'Y'
      00013E 09                    3672 	.db #0x09	; 9
      00013F 06                    3673 	.db #0x06	; 6
      000140 3E                    3674 	.db #0x3e	; 62
      000141 41                    3675 	.db #0x41	; 65	'A'
      000142 5D                    3676 	.db #0x5d	; 93
      000143 59                    3677 	.db #0x59	; 89	'Y'
      000144 4E                    3678 	.db #0x4e	; 78	'N'
      000145 7C                    3679 	.db #0x7c	; 124
      000146 12                    3680 	.db #0x12	; 18
      000147 11                    3681 	.db #0x11	; 17
      000148 12                    3682 	.db #0x12	; 18
      000149 7C                    3683 	.db #0x7c	; 124
      00014A 7F                    3684 	.db #0x7f	; 127
      00014B 49                    3685 	.db #0x49	; 73	'I'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 68.
Hexadecimal [24-Bits]



      00014C 49                    3686 	.db #0x49	; 73	'I'
      00014D 49                    3687 	.db #0x49	; 73	'I'
      00014E 36                    3688 	.db #0x36	; 54	'6'
      00014F 3E                    3689 	.db #0x3e	; 62
      000150 41                    3690 	.db #0x41	; 65	'A'
      000151 41                    3691 	.db #0x41	; 65	'A'
      000152 41                    3692 	.db #0x41	; 65	'A'
      000153 22                    3693 	.db #0x22	; 34
      000154 7F                    3694 	.db #0x7f	; 127
      000155 41                    3695 	.db #0x41	; 65	'A'
      000156 41                    3696 	.db #0x41	; 65	'A'
      000157 41                    3697 	.db #0x41	; 65	'A'
      000158 3E                    3698 	.db #0x3e	; 62
      000159 7F                    3699 	.db #0x7f	; 127
      00015A 49                    3700 	.db #0x49	; 73	'I'
      00015B 49                    3701 	.db #0x49	; 73	'I'
      00015C 49                    3702 	.db #0x49	; 73	'I'
      00015D 41                    3703 	.db #0x41	; 65	'A'
      00015E 7F                    3704 	.db #0x7f	; 127
      00015F 09                    3705 	.db #0x09	; 9
      000160 09                    3706 	.db #0x09	; 9
      000161 09                    3707 	.db #0x09	; 9
      000162 01                    3708 	.db #0x01	; 1
      000163 3E                    3709 	.db #0x3e	; 62
      000164 41                    3710 	.db #0x41	; 65	'A'
      000165 41                    3711 	.db #0x41	; 65	'A'
      000166 51                    3712 	.db #0x51	; 81	'Q'
      000167 73                    3713 	.db #0x73	; 115	's'
      000168 7F                    3714 	.db #0x7f	; 127
      000169 08                    3715 	.db #0x08	; 8
      00016A 08                    3716 	.db #0x08	; 8
      00016B 08                    3717 	.db #0x08	; 8
      00016C 7F                    3718 	.db #0x7f	; 127
      00016D 00                    3719 	.db #0x00	; 0
      00016E 41                    3720 	.db #0x41	; 65	'A'
      00016F 7F                    3721 	.db #0x7f	; 127
      000170 41                    3722 	.db #0x41	; 65	'A'
      000171 00                    3723 	.db #0x00	; 0
      000172 20                    3724 	.db #0x20	; 32
      000173 40                    3725 	.db #0x40	; 64
      000174 41                    3726 	.db #0x41	; 65	'A'
      000175 3F                    3727 	.db #0x3f	; 63
      000176 01                    3728 	.db #0x01	; 1
      000177 7F                    3729 	.db #0x7f	; 127
      000178 08                    3730 	.db #0x08	; 8
      000179 14                    3731 	.db #0x14	; 20
      00017A 22                    3732 	.db #0x22	; 34
      00017B 41                    3733 	.db #0x41	; 65	'A'
      00017C 7F                    3734 	.db #0x7f	; 127
      00017D 40                    3735 	.db #0x40	; 64
      00017E 40                    3736 	.db #0x40	; 64
      00017F 40                    3737 	.db #0x40	; 64
      000180 40                    3738 	.db #0x40	; 64
      000181 7F                    3739 	.db #0x7f	; 127
      000182 02                    3740 	.db #0x02	; 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 69.
Hexadecimal [24-Bits]



      000183 1C                    3741 	.db #0x1c	; 28
      000184 02                    3742 	.db #0x02	; 2
      000185 7F                    3743 	.db #0x7f	; 127
      000186 7F                    3744 	.db #0x7f	; 127
      000187 04                    3745 	.db #0x04	; 4
      000188 08                    3746 	.db #0x08	; 8
      000189 10                    3747 	.db #0x10	; 16
      00018A 7F                    3748 	.db #0x7f	; 127
      00018B 3E                    3749 	.db #0x3e	; 62
      00018C 41                    3750 	.db #0x41	; 65	'A'
      00018D 41                    3751 	.db #0x41	; 65	'A'
      00018E 41                    3752 	.db #0x41	; 65	'A'
      00018F 3E                    3753 	.db #0x3e	; 62
      000190 7F                    3754 	.db #0x7f	; 127
      000191 09                    3755 	.db #0x09	; 9
      000192 09                    3756 	.db #0x09	; 9
      000193 09                    3757 	.db #0x09	; 9
      000194 06                    3758 	.db #0x06	; 6
      000195 3E                    3759 	.db #0x3e	; 62
      000196 41                    3760 	.db #0x41	; 65	'A'
      000197 51                    3761 	.db #0x51	; 81	'Q'
      000198 21                    3762 	.db #0x21	; 33
      000199 5E                    3763 	.db #0x5e	; 94
      00019A 7F                    3764 	.db #0x7f	; 127
      00019B 09                    3765 	.db #0x09	; 9
      00019C 19                    3766 	.db #0x19	; 25
      00019D 29                    3767 	.db #0x29	; 41
      00019E 46                    3768 	.db #0x46	; 70	'F'
      00019F 26                    3769 	.db #0x26	; 38
      0001A0 49                    3770 	.db #0x49	; 73	'I'
      0001A1 49                    3771 	.db #0x49	; 73	'I'
      0001A2 49                    3772 	.db #0x49	; 73	'I'
      0001A3 32                    3773 	.db #0x32	; 50	'2'
      0001A4 03                    3774 	.db #0x03	; 3
      0001A5 01                    3775 	.db #0x01	; 1
      0001A6 7F                    3776 	.db #0x7f	; 127
      0001A7 01                    3777 	.db #0x01	; 1
      0001A8 03                    3778 	.db #0x03	; 3
      0001A9 3F                    3779 	.db #0x3f	; 63
      0001AA 40                    3780 	.db #0x40	; 64
      0001AB 40                    3781 	.db #0x40	; 64
      0001AC 40                    3782 	.db #0x40	; 64
      0001AD 3F                    3783 	.db #0x3f	; 63
      0001AE 1F                    3784 	.db #0x1f	; 31
      0001AF 20                    3785 	.db #0x20	; 32
      0001B0 40                    3786 	.db #0x40	; 64
      0001B1 20                    3787 	.db #0x20	; 32
      0001B2 1F                    3788 	.db #0x1f	; 31
      0001B3 3F                    3789 	.db #0x3f	; 63
      0001B4 40                    3790 	.db #0x40	; 64
      0001B5 38                    3791 	.db #0x38	; 56	'8'
      0001B6 40                    3792 	.db #0x40	; 64
      0001B7 3F                    3793 	.db #0x3f	; 63
      0001B8 63                    3794 	.db #0x63	; 99	'c'
      0001B9 14                    3795 	.db #0x14	; 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 70.
Hexadecimal [24-Bits]



      0001BA 08                    3796 	.db #0x08	; 8
      0001BB 14                    3797 	.db #0x14	; 20
      0001BC 63                    3798 	.db #0x63	; 99	'c'
      0001BD 03                    3799 	.db #0x03	; 3
      0001BE 04                    3800 	.db #0x04	; 4
      0001BF 78                    3801 	.db #0x78	; 120	'x'
      0001C0 04                    3802 	.db #0x04	; 4
      0001C1 03                    3803 	.db #0x03	; 3
      0001C2 61                    3804 	.db #0x61	; 97	'a'
      0001C3 59                    3805 	.db #0x59	; 89	'Y'
      0001C4 49                    3806 	.db #0x49	; 73	'I'
      0001C5 4D                    3807 	.db #0x4d	; 77	'M'
      0001C6 43                    3808 	.db #0x43	; 67	'C'
      0001C7 00                    3809 	.db #0x00	; 0
      0001C8 7F                    3810 	.db #0x7f	; 127
      0001C9 41                    3811 	.db #0x41	; 65	'A'
      0001CA 41                    3812 	.db #0x41	; 65	'A'
      0001CB 41                    3813 	.db #0x41	; 65	'A'
      0001CC 02                    3814 	.db #0x02	; 2
      0001CD 04                    3815 	.db #0x04	; 4
      0001CE 08                    3816 	.db #0x08	; 8
      0001CF 10                    3817 	.db #0x10	; 16
      0001D0 20                    3818 	.db #0x20	; 32
      0001D1 00                    3819 	.db #0x00	; 0
      0001D2 41                    3820 	.db #0x41	; 65	'A'
      0001D3 41                    3821 	.db #0x41	; 65	'A'
      0001D4 41                    3822 	.db #0x41	; 65	'A'
      0001D5 7F                    3823 	.db #0x7f	; 127
      0001D6 04                    3824 	.db #0x04	; 4
      0001D7 02                    3825 	.db #0x02	; 2
      0001D8 01                    3826 	.db #0x01	; 1
      0001D9 02                    3827 	.db #0x02	; 2
      0001DA 04                    3828 	.db #0x04	; 4
      0001DB 40                    3829 	.db #0x40	; 64
      0001DC 40                    3830 	.db #0x40	; 64
      0001DD 40                    3831 	.db #0x40	; 64
      0001DE 40                    3832 	.db #0x40	; 64
      0001DF 40                    3833 	.db #0x40	; 64
      0001E0 00                    3834 	.db #0x00	; 0
      0001E1 03                    3835 	.db #0x03	; 3
      0001E2 07                    3836 	.db #0x07	; 7
      0001E3 08                    3837 	.db #0x08	; 8
      0001E4 00                    3838 	.db #0x00	; 0
      0001E5 20                    3839 	.db #0x20	; 32
      0001E6 54                    3840 	.db #0x54	; 84	'T'
      0001E7 54                    3841 	.db #0x54	; 84	'T'
      0001E8 78                    3842 	.db #0x78	; 120	'x'
      0001E9 40                    3843 	.db #0x40	; 64
      0001EA 7F                    3844 	.db #0x7f	; 127
      0001EB 28                    3845 	.db #0x28	; 40
      0001EC 44                    3846 	.db #0x44	; 68	'D'
      0001ED 44                    3847 	.db #0x44	; 68	'D'
      0001EE 38                    3848 	.db #0x38	; 56	'8'
      0001EF 38                    3849 	.db #0x38	; 56	'8'
      0001F0 44                    3850 	.db #0x44	; 68	'D'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 71.
Hexadecimal [24-Bits]



      0001F1 44                    3851 	.db #0x44	; 68	'D'
      0001F2 44                    3852 	.db #0x44	; 68	'D'
      0001F3 28                    3853 	.db #0x28	; 40
      0001F4 38                    3854 	.db #0x38	; 56	'8'
      0001F5 44                    3855 	.db #0x44	; 68	'D'
      0001F6 44                    3856 	.db #0x44	; 68	'D'
      0001F7 28                    3857 	.db #0x28	; 40
      0001F8 7F                    3858 	.db #0x7f	; 127
      0001F9 38                    3859 	.db #0x38	; 56	'8'
      0001FA 54                    3860 	.db #0x54	; 84	'T'
      0001FB 54                    3861 	.db #0x54	; 84	'T'
      0001FC 54                    3862 	.db #0x54	; 84	'T'
      0001FD 18                    3863 	.db #0x18	; 24
      0001FE 00                    3864 	.db #0x00	; 0
      0001FF 08                    3865 	.db #0x08	; 8
      000200 7E                    3866 	.db #0x7e	; 126
      000201 09                    3867 	.db #0x09	; 9
      000202 02                    3868 	.db #0x02	; 2
      000203 18                    3869 	.db #0x18	; 24
      000204 A4                    3870 	.db #0xa4	; 164
      000205 A4                    3871 	.db #0xa4	; 164
      000206 9C                    3872 	.db #0x9c	; 156
      000207 78                    3873 	.db #0x78	; 120	'x'
      000208 7F                    3874 	.db #0x7f	; 127
      000209 08                    3875 	.db #0x08	; 8
      00020A 04                    3876 	.db #0x04	; 4
      00020B 04                    3877 	.db #0x04	; 4
      00020C 78                    3878 	.db #0x78	; 120	'x'
      00020D 00                    3879 	.db #0x00	; 0
      00020E 44                    3880 	.db #0x44	; 68	'D'
      00020F 7D                    3881 	.db #0x7d	; 125
      000210 40                    3882 	.db #0x40	; 64
      000211 00                    3883 	.db #0x00	; 0
      000212 20                    3884 	.db #0x20	; 32
      000213 40                    3885 	.db #0x40	; 64
      000214 40                    3886 	.db #0x40	; 64
      000215 3D                    3887 	.db #0x3d	; 61
      000216 00                    3888 	.db #0x00	; 0
      000217 7F                    3889 	.db #0x7f	; 127
      000218 10                    3890 	.db #0x10	; 16
      000219 28                    3891 	.db #0x28	; 40
      00021A 44                    3892 	.db #0x44	; 68	'D'
      00021B 00                    3893 	.db #0x00	; 0
      00021C 00                    3894 	.db #0x00	; 0
      00021D 41                    3895 	.db #0x41	; 65	'A'
      00021E 7F                    3896 	.db #0x7f	; 127
      00021F 40                    3897 	.db #0x40	; 64
      000220 00                    3898 	.db #0x00	; 0
      000221 7C                    3899 	.db #0x7c	; 124
      000222 04                    3900 	.db #0x04	; 4
      000223 78                    3901 	.db #0x78	; 120	'x'
      000224 04                    3902 	.db #0x04	; 4
      000225 78                    3903 	.db #0x78	; 120	'x'
      000226 7C                    3904 	.db #0x7c	; 124
      000227 08                    3905 	.db #0x08	; 8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 72.
Hexadecimal [24-Bits]



      000228 04                    3906 	.db #0x04	; 4
      000229 04                    3907 	.db #0x04	; 4
      00022A 78                    3908 	.db #0x78	; 120	'x'
      00022B 38                    3909 	.db #0x38	; 56	'8'
      00022C 44                    3910 	.db #0x44	; 68	'D'
      00022D 44                    3911 	.db #0x44	; 68	'D'
      00022E 44                    3912 	.db #0x44	; 68	'D'
      00022F 38                    3913 	.db #0x38	; 56	'8'
      000230 FC                    3914 	.db #0xfc	; 252
      000231 18                    3915 	.db #0x18	; 24
      000232 24                    3916 	.db #0x24	; 36
      000233 24                    3917 	.db #0x24	; 36
      000234 18                    3918 	.db #0x18	; 24
      000235 18                    3919 	.db #0x18	; 24
      000236 24                    3920 	.db #0x24	; 36
      000237 24                    3921 	.db #0x24	; 36
      000238 18                    3922 	.db #0x18	; 24
      000239 FC                    3923 	.db #0xfc	; 252
      00023A 7C                    3924 	.db #0x7c	; 124
      00023B 08                    3925 	.db #0x08	; 8
      00023C 04                    3926 	.db #0x04	; 4
      00023D 04                    3927 	.db #0x04	; 4
      00023E 08                    3928 	.db #0x08	; 8
      00023F 48                    3929 	.db #0x48	; 72	'H'
      000240 54                    3930 	.db #0x54	; 84	'T'
      000241 54                    3931 	.db #0x54	; 84	'T'
      000242 54                    3932 	.db #0x54	; 84	'T'
      000243 24                    3933 	.db #0x24	; 36
      000244 04                    3934 	.db #0x04	; 4
      000245 04                    3935 	.db #0x04	; 4
      000246 3F                    3936 	.db #0x3f	; 63
      000247 44                    3937 	.db #0x44	; 68	'D'
      000248 24                    3938 	.db #0x24	; 36
      000249 3C                    3939 	.db #0x3c	; 60
      00024A 40                    3940 	.db #0x40	; 64
      00024B 40                    3941 	.db #0x40	; 64
      00024C 20                    3942 	.db #0x20	; 32
      00024D 7C                    3943 	.db #0x7c	; 124
      00024E 1C                    3944 	.db #0x1c	; 28
      00024F 20                    3945 	.db #0x20	; 32
      000250 40                    3946 	.db #0x40	; 64
      000251 20                    3947 	.db #0x20	; 32
      000252 1C                    3948 	.db #0x1c	; 28
      000253 3C                    3949 	.db #0x3c	; 60
      000254 40                    3950 	.db #0x40	; 64
      000255 30                    3951 	.db #0x30	; 48	'0'
      000256 40                    3952 	.db #0x40	; 64
      000257 3C                    3953 	.db #0x3c	; 60
      000258 44                    3954 	.db #0x44	; 68	'D'
      000259 28                    3955 	.db #0x28	; 40
      00025A 10                    3956 	.db #0x10	; 16
      00025B 28                    3957 	.db #0x28	; 40
      00025C 44                    3958 	.db #0x44	; 68	'D'
      00025D 4C                    3959 	.db #0x4c	; 76	'L'
      00025E 90                    3960 	.db #0x90	; 144
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 73.
Hexadecimal [24-Bits]



      00025F 90                    3961 	.db #0x90	; 144
      000260 90                    3962 	.db #0x90	; 144
      000261 7C                    3963 	.db #0x7c	; 124
      000262 44                    3964 	.db #0x44	; 68	'D'
      000263 64                    3965 	.db #0x64	; 100	'd'
      000264 54                    3966 	.db #0x54	; 84	'T'
      000265 4C                    3967 	.db #0x4c	; 76	'L'
      000266 44                    3968 	.db #0x44	; 68	'D'
      000267 00                    3969 	.db #0x00	; 0
      000268 08                    3970 	.db #0x08	; 8
      000269 36                    3971 	.db #0x36	; 54	'6'
      00026A 41                    3972 	.db #0x41	; 65	'A'
      00026B 00                    3973 	.db #0x00	; 0
      00026C 00                    3974 	.db #0x00	; 0
      00026D 00                    3975 	.db #0x00	; 0
      00026E 77                    3976 	.db #0x77	; 119	'w'
      00026F 00                    3977 	.db #0x00	; 0
      000270 00                    3978 	.db #0x00	; 0
      000271 00                    3979 	.db #0x00	; 0
      000272 41                    3980 	.db #0x41	; 65	'A'
      000273 36                    3981 	.db #0x36	; 54	'6'
      000274 08                    3982 	.db #0x08	; 8
      000275 00                    3983 	.db #0x00	; 0
      000276 02                    3984 	.db #0x02	; 2
      000277 01                    3985 	.db #0x01	; 1
      000278 02                    3986 	.db #0x02	; 2
      000279 04                    3987 	.db #0x04	; 4
      00027A 02                    3988 	.db #0x02	; 2
      00027B 3C                    3989 	.db #0x3c	; 60
      00027C 26                    3990 	.db #0x26	; 38
      00027D 23                    3991 	.db #0x23	; 35
      00027E 26                    3992 	.db #0x26	; 38
      00027F 3C                    3993 	.db #0x3c	; 60
      000280 1E                    3994 	.db #0x1e	; 30
      000281 A1                    3995 	.db #0xa1	; 161
      000282 A1                    3996 	.db #0xa1	; 161
      000283 61                    3997 	.db #0x61	; 97	'a'
      000284 12                    3998 	.db #0x12	; 18
      000285 3A                    3999 	.db #0x3a	; 58
      000286 40                    4000 	.db #0x40	; 64
      000287 40                    4001 	.db #0x40	; 64
      000288 20                    4002 	.db #0x20	; 32
      000289 7A                    4003 	.db #0x7a	; 122	'z'
      00028A 38                    4004 	.db #0x38	; 56	'8'
      00028B 54                    4005 	.db #0x54	; 84	'T'
      00028C 54                    4006 	.db #0x54	; 84	'T'
      00028D 55                    4007 	.db #0x55	; 85	'U'
      00028E 59                    4008 	.db #0x59	; 89	'Y'
      00028F 21                    4009 	.db #0x21	; 33
      000290 55                    4010 	.db #0x55	; 85	'U'
      000291 55                    4011 	.db #0x55	; 85	'U'
      000292 79                    4012 	.db #0x79	; 121	'y'
      000293 41                    4013 	.db #0x41	; 65	'A'
      000294 22                    4014 	.db #0x22	; 34
      000295 54                    4015 	.db #0x54	; 84	'T'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 74.
Hexadecimal [24-Bits]



      000296 54                    4016 	.db #0x54	; 84	'T'
      000297 78                    4017 	.db #0x78	; 120	'x'
      000298 42                    4018 	.db #0x42	; 66	'B'
      000299 21                    4019 	.db #0x21	; 33
      00029A 55                    4020 	.db #0x55	; 85	'U'
      00029B 54                    4021 	.db #0x54	; 84	'T'
      00029C 78                    4022 	.db #0x78	; 120	'x'
      00029D 40                    4023 	.db #0x40	; 64
      00029E 20                    4024 	.db #0x20	; 32
      00029F 54                    4025 	.db #0x54	; 84	'T'
      0002A0 55                    4026 	.db #0x55	; 85	'U'
      0002A1 79                    4027 	.db #0x79	; 121	'y'
      0002A2 40                    4028 	.db #0x40	; 64
      0002A3 0C                    4029 	.db #0x0c	; 12
      0002A4 1E                    4030 	.db #0x1e	; 30
      0002A5 52                    4031 	.db #0x52	; 82	'R'
      0002A6 72                    4032 	.db #0x72	; 114	'r'
      0002A7 12                    4033 	.db #0x12	; 18
      0002A8 39                    4034 	.db #0x39	; 57	'9'
      0002A9 55                    4035 	.db #0x55	; 85	'U'
      0002AA 55                    4036 	.db #0x55	; 85	'U'
      0002AB 55                    4037 	.db #0x55	; 85	'U'
      0002AC 59                    4038 	.db #0x59	; 89	'Y'
      0002AD 39                    4039 	.db #0x39	; 57	'9'
      0002AE 54                    4040 	.db #0x54	; 84	'T'
      0002AF 54                    4041 	.db #0x54	; 84	'T'
      0002B0 54                    4042 	.db #0x54	; 84	'T'
      0002B1 59                    4043 	.db #0x59	; 89	'Y'
      0002B2 39                    4044 	.db #0x39	; 57	'9'
      0002B3 55                    4045 	.db #0x55	; 85	'U'
      0002B4 54                    4046 	.db #0x54	; 84	'T'
      0002B5 54                    4047 	.db #0x54	; 84	'T'
      0002B6 58                    4048 	.db #0x58	; 88	'X'
      0002B7 00                    4049 	.db #0x00	; 0
      0002B8 00                    4050 	.db #0x00	; 0
      0002B9 45                    4051 	.db #0x45	; 69	'E'
      0002BA 7C                    4052 	.db #0x7c	; 124
      0002BB 41                    4053 	.db #0x41	; 65	'A'
      0002BC 00                    4054 	.db #0x00	; 0
      0002BD 02                    4055 	.db #0x02	; 2
      0002BE 45                    4056 	.db #0x45	; 69	'E'
      0002BF 7D                    4057 	.db #0x7d	; 125
      0002C0 42                    4058 	.db #0x42	; 66	'B'
      0002C1 00                    4059 	.db #0x00	; 0
      0002C2 01                    4060 	.db #0x01	; 1
      0002C3 45                    4061 	.db #0x45	; 69	'E'
      0002C4 7C                    4062 	.db #0x7c	; 124
      0002C5 40                    4063 	.db #0x40	; 64
      0002C6 7D                    4064 	.db #0x7d	; 125
      0002C7 12                    4065 	.db #0x12	; 18
      0002C8 11                    4066 	.db #0x11	; 17
      0002C9 12                    4067 	.db #0x12	; 18
      0002CA 7D                    4068 	.db #0x7d	; 125
      0002CB F0                    4069 	.db #0xf0	; 240
      0002CC 28                    4070 	.db #0x28	; 40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 75.
Hexadecimal [24-Bits]



      0002CD 25                    4071 	.db #0x25	; 37
      0002CE 28                    4072 	.db #0x28	; 40
      0002CF F0                    4073 	.db #0xf0	; 240
      0002D0 7C                    4074 	.db #0x7c	; 124
      0002D1 54                    4075 	.db #0x54	; 84	'T'
      0002D2 55                    4076 	.db #0x55	; 85	'U'
      0002D3 45                    4077 	.db #0x45	; 69	'E'
      0002D4 00                    4078 	.db #0x00	; 0
      0002D5 20                    4079 	.db #0x20	; 32
      0002D6 54                    4080 	.db #0x54	; 84	'T'
      0002D7 54                    4081 	.db #0x54	; 84	'T'
      0002D8 7C                    4082 	.db #0x7c	; 124
      0002D9 54                    4083 	.db #0x54	; 84	'T'
      0002DA 7C                    4084 	.db #0x7c	; 124
      0002DB 0A                    4085 	.db #0x0a	; 10
      0002DC 09                    4086 	.db #0x09	; 9
      0002DD 7F                    4087 	.db #0x7f	; 127
      0002DE 49                    4088 	.db #0x49	; 73	'I'
      0002DF 32                    4089 	.db #0x32	; 50	'2'
      0002E0 49                    4090 	.db #0x49	; 73	'I'
      0002E1 49                    4091 	.db #0x49	; 73	'I'
      0002E2 49                    4092 	.db #0x49	; 73	'I'
      0002E3 32                    4093 	.db #0x32	; 50	'2'
      0002E4 3A                    4094 	.db #0x3a	; 58
      0002E5 44                    4095 	.db #0x44	; 68	'D'
      0002E6 44                    4096 	.db #0x44	; 68	'D'
      0002E7 44                    4097 	.db #0x44	; 68	'D'
      0002E8 3A                    4098 	.db #0x3a	; 58
      0002E9 32                    4099 	.db #0x32	; 50	'2'
      0002EA 4A                    4100 	.db #0x4a	; 74	'J'
      0002EB 48                    4101 	.db #0x48	; 72	'H'
      0002EC 48                    4102 	.db #0x48	; 72	'H'
      0002ED 30                    4103 	.db #0x30	; 48	'0'
      0002EE 3A                    4104 	.db #0x3a	; 58
      0002EF 41                    4105 	.db #0x41	; 65	'A'
      0002F0 41                    4106 	.db #0x41	; 65	'A'
      0002F1 21                    4107 	.db #0x21	; 33
      0002F2 7A                    4108 	.db #0x7a	; 122	'z'
      0002F3 3A                    4109 	.db #0x3a	; 58
      0002F4 42                    4110 	.db #0x42	; 66	'B'
      0002F5 40                    4111 	.db #0x40	; 64
      0002F6 20                    4112 	.db #0x20	; 32
      0002F7 78                    4113 	.db #0x78	; 120	'x'
      0002F8 00                    4114 	.db #0x00	; 0
      0002F9 9D                    4115 	.db #0x9d	; 157
      0002FA A0                    4116 	.db #0xa0	; 160
      0002FB A0                    4117 	.db #0xa0	; 160
      0002FC 7D                    4118 	.db #0x7d	; 125
      0002FD 3D                    4119 	.db #0x3d	; 61
      0002FE 42                    4120 	.db #0x42	; 66	'B'
      0002FF 42                    4121 	.db #0x42	; 66	'B'
      000300 42                    4122 	.db #0x42	; 66	'B'
      000301 3D                    4123 	.db #0x3d	; 61
      000302 3D                    4124 	.db #0x3d	; 61
      000303 40                    4125 	.db #0x40	; 64
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 76.
Hexadecimal [24-Bits]



      000304 40                    4126 	.db #0x40	; 64
      000305 40                    4127 	.db #0x40	; 64
      000306 3D                    4128 	.db #0x3d	; 61
      000307 3C                    4129 	.db #0x3c	; 60
      000308 24                    4130 	.db #0x24	; 36
      000309 FF                    4131 	.db #0xff	; 255
      00030A 24                    4132 	.db #0x24	; 36
      00030B 24                    4133 	.db #0x24	; 36
      00030C 48                    4134 	.db #0x48	; 72	'H'
      00030D 7E                    4135 	.db #0x7e	; 126
      00030E 49                    4136 	.db #0x49	; 73	'I'
      00030F 43                    4137 	.db #0x43	; 67	'C'
      000310 66                    4138 	.db #0x66	; 102	'f'
      000311 2B                    4139 	.db #0x2b	; 43
      000312 2F                    4140 	.db #0x2f	; 47
      000313 FC                    4141 	.db #0xfc	; 252
      000314 2F                    4142 	.db #0x2f	; 47
      000315 2B                    4143 	.db #0x2b	; 43
      000316 FF                    4144 	.db #0xff	; 255
      000317 09                    4145 	.db #0x09	; 9
      000318 29                    4146 	.db #0x29	; 41
      000319 F6                    4147 	.db #0xf6	; 246
      00031A 20                    4148 	.db #0x20	; 32
      00031B C0                    4149 	.db #0xc0	; 192
      00031C 88                    4150 	.db #0x88	; 136
      00031D 7E                    4151 	.db #0x7e	; 126
      00031E 09                    4152 	.db #0x09	; 9
      00031F 03                    4153 	.db #0x03	; 3
      000320 20                    4154 	.db #0x20	; 32
      000321 54                    4155 	.db #0x54	; 84	'T'
      000322 54                    4156 	.db #0x54	; 84	'T'
      000323 79                    4157 	.db #0x79	; 121	'y'
      000324 41                    4158 	.db #0x41	; 65	'A'
      000325 00                    4159 	.db #0x00	; 0
      000326 00                    4160 	.db #0x00	; 0
      000327 44                    4161 	.db #0x44	; 68	'D'
      000328 7D                    4162 	.db #0x7d	; 125
      000329 41                    4163 	.db #0x41	; 65	'A'
      00032A 30                    4164 	.db #0x30	; 48	'0'
      00032B 48                    4165 	.db #0x48	; 72	'H'
      00032C 48                    4166 	.db #0x48	; 72	'H'
      00032D 4A                    4167 	.db #0x4a	; 74	'J'
      00032E 32                    4168 	.db #0x32	; 50	'2'
      00032F 38                    4169 	.db #0x38	; 56	'8'
      000330 40                    4170 	.db #0x40	; 64
      000331 40                    4171 	.db #0x40	; 64
      000332 22                    4172 	.db #0x22	; 34
      000333 7A                    4173 	.db #0x7a	; 122	'z'
      000334 00                    4174 	.db #0x00	; 0
      000335 7A                    4175 	.db #0x7a	; 122	'z'
      000336 0A                    4176 	.db #0x0a	; 10
      000337 0A                    4177 	.db #0x0a	; 10
      000338 72                    4178 	.db #0x72	; 114	'r'
      000339 7D                    4179 	.db #0x7d	; 125
      00033A 0D                    4180 	.db #0x0d	; 13
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 77.
Hexadecimal [24-Bits]



      00033B 19                    4181 	.db #0x19	; 25
      00033C 31                    4182 	.db #0x31	; 49	'1'
      00033D 7D                    4183 	.db #0x7d	; 125
      00033E 26                    4184 	.db #0x26	; 38
      00033F 29                    4185 	.db #0x29	; 41
      000340 29                    4186 	.db #0x29	; 41
      000341 2F                    4187 	.db #0x2f	; 47
      000342 28                    4188 	.db #0x28	; 40
      000343 26                    4189 	.db #0x26	; 38
      000344 29                    4190 	.db #0x29	; 41
      000345 29                    4191 	.db #0x29	; 41
      000346 29                    4192 	.db #0x29	; 41
      000347 26                    4193 	.db #0x26	; 38
      000348 30                    4194 	.db #0x30	; 48	'0'
      000349 48                    4195 	.db #0x48	; 72	'H'
      00034A 4D                    4196 	.db #0x4d	; 77	'M'
      00034B 40                    4197 	.db #0x40	; 64
      00034C 20                    4198 	.db #0x20	; 32
      00034D 38                    4199 	.db #0x38	; 56	'8'
      00034E 08                    4200 	.db #0x08	; 8
      00034F 08                    4201 	.db #0x08	; 8
      000350 08                    4202 	.db #0x08	; 8
      000351 08                    4203 	.db #0x08	; 8
      000352 08                    4204 	.db #0x08	; 8
      000353 08                    4205 	.db #0x08	; 8
      000354 08                    4206 	.db #0x08	; 8
      000355 08                    4207 	.db #0x08	; 8
      000356 38                    4208 	.db #0x38	; 56	'8'
      000357 2F                    4209 	.db #0x2f	; 47
      000358 10                    4210 	.db #0x10	; 16
      000359 C8                    4211 	.db #0xc8	; 200
      00035A AC                    4212 	.db #0xac	; 172
      00035B BA                    4213 	.db #0xba	; 186
      00035C 2F                    4214 	.db #0x2f	; 47
      00035D 10                    4215 	.db #0x10	; 16
      00035E 28                    4216 	.db #0x28	; 40
      00035F 34                    4217 	.db #0x34	; 52	'4'
      000360 FA                    4218 	.db #0xfa	; 250
      000361 00                    4219 	.db #0x00	; 0
      000362 00                    4220 	.db #0x00	; 0
      000363 7B                    4221 	.db #0x7b	; 123
      000364 00                    4222 	.db #0x00	; 0
      000365 00                    4223 	.db #0x00	; 0
      000366 08                    4224 	.db #0x08	; 8
      000367 14                    4225 	.db #0x14	; 20
      000368 2A                    4226 	.db #0x2a	; 42
      000369 14                    4227 	.db #0x14	; 20
      00036A 22                    4228 	.db #0x22	; 34
      00036B 22                    4229 	.db #0x22	; 34
      00036C 14                    4230 	.db #0x14	; 20
      00036D 2A                    4231 	.db #0x2a	; 42
      00036E 14                    4232 	.db #0x14	; 20
      00036F 08                    4233 	.db #0x08	; 8
      000370 AA                    4234 	.db #0xaa	; 170
      000371 00                    4235 	.db #0x00	; 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 78.
Hexadecimal [24-Bits]



      000372 55                    4236 	.db #0x55	; 85	'U'
      000373 00                    4237 	.db #0x00	; 0
      000374 AA                    4238 	.db #0xaa	; 170
      000375 AA                    4239 	.db #0xaa	; 170
      000376 55                    4240 	.db #0x55	; 85	'U'
      000377 AA                    4241 	.db #0xaa	; 170
      000378 55                    4242 	.db #0x55	; 85	'U'
      000379 AA                    4243 	.db #0xaa	; 170
      00037A 00                    4244 	.db #0x00	; 0
      00037B 00                    4245 	.db #0x00	; 0
      00037C 00                    4246 	.db #0x00	; 0
      00037D FF                    4247 	.db #0xff	; 255
      00037E 00                    4248 	.db #0x00	; 0
      00037F 10                    4249 	.db #0x10	; 16
      000380 10                    4250 	.db #0x10	; 16
      000381 10                    4251 	.db #0x10	; 16
      000382 FF                    4252 	.db #0xff	; 255
      000383 00                    4253 	.db #0x00	; 0
      000384 14                    4254 	.db #0x14	; 20
      000385 14                    4255 	.db #0x14	; 20
      000386 14                    4256 	.db #0x14	; 20
      000387 FF                    4257 	.db #0xff	; 255
      000388 00                    4258 	.db #0x00	; 0
      000389 10                    4259 	.db #0x10	; 16
      00038A 10                    4260 	.db #0x10	; 16
      00038B FF                    4261 	.db #0xff	; 255
      00038C 00                    4262 	.db #0x00	; 0
      00038D FF                    4263 	.db #0xff	; 255
      00038E 10                    4264 	.db #0x10	; 16
      00038F 10                    4265 	.db #0x10	; 16
      000390 F0                    4266 	.db #0xf0	; 240
      000391 10                    4267 	.db #0x10	; 16
      000392 F0                    4268 	.db #0xf0	; 240
      000393 14                    4269 	.db #0x14	; 20
      000394 14                    4270 	.db #0x14	; 20
      000395 14                    4271 	.db #0x14	; 20
      000396 FC                    4272 	.db #0xfc	; 252
      000397 00                    4273 	.db #0x00	; 0
      000398 14                    4274 	.db #0x14	; 20
      000399 14                    4275 	.db #0x14	; 20
      00039A F7                    4276 	.db #0xf7	; 247
      00039B 00                    4277 	.db #0x00	; 0
      00039C FF                    4278 	.db #0xff	; 255
      00039D 00                    4279 	.db #0x00	; 0
      00039E 00                    4280 	.db #0x00	; 0
      00039F FF                    4281 	.db #0xff	; 255
      0003A0 00                    4282 	.db #0x00	; 0
      0003A1 FF                    4283 	.db #0xff	; 255
      0003A2 14                    4284 	.db #0x14	; 20
      0003A3 14                    4285 	.db #0x14	; 20
      0003A4 F4                    4286 	.db #0xf4	; 244
      0003A5 04                    4287 	.db #0x04	; 4
      0003A6 FC                    4288 	.db #0xfc	; 252
      0003A7 14                    4289 	.db #0x14	; 20
      0003A8 14                    4290 	.db #0x14	; 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 79.
Hexadecimal [24-Bits]



      0003A9 17                    4291 	.db #0x17	; 23
      0003AA 10                    4292 	.db #0x10	; 16
      0003AB 1F                    4293 	.db #0x1f	; 31
      0003AC 10                    4294 	.db #0x10	; 16
      0003AD 10                    4295 	.db #0x10	; 16
      0003AE 1F                    4296 	.db #0x1f	; 31
      0003AF 10                    4297 	.db #0x10	; 16
      0003B0 1F                    4298 	.db #0x1f	; 31
      0003B1 14                    4299 	.db #0x14	; 20
      0003B2 14                    4300 	.db #0x14	; 20
      0003B3 14                    4301 	.db #0x14	; 20
      0003B4 1F                    4302 	.db #0x1f	; 31
      0003B5 00                    4303 	.db #0x00	; 0
      0003B6 10                    4304 	.db #0x10	; 16
      0003B7 10                    4305 	.db #0x10	; 16
      0003B8 10                    4306 	.db #0x10	; 16
      0003B9 F0                    4307 	.db #0xf0	; 240
      0003BA 00                    4308 	.db #0x00	; 0
      0003BB 00                    4309 	.db #0x00	; 0
      0003BC 00                    4310 	.db #0x00	; 0
      0003BD 00                    4311 	.db #0x00	; 0
      0003BE 1F                    4312 	.db #0x1f	; 31
      0003BF 10                    4313 	.db #0x10	; 16
      0003C0 10                    4314 	.db #0x10	; 16
      0003C1 10                    4315 	.db #0x10	; 16
      0003C2 10                    4316 	.db #0x10	; 16
      0003C3 1F                    4317 	.db #0x1f	; 31
      0003C4 10                    4318 	.db #0x10	; 16
      0003C5 10                    4319 	.db #0x10	; 16
      0003C6 10                    4320 	.db #0x10	; 16
      0003C7 10                    4321 	.db #0x10	; 16
      0003C8 F0                    4322 	.db #0xf0	; 240
      0003C9 10                    4323 	.db #0x10	; 16
      0003CA 00                    4324 	.db #0x00	; 0
      0003CB 00                    4325 	.db #0x00	; 0
      0003CC 00                    4326 	.db #0x00	; 0
      0003CD FF                    4327 	.db #0xff	; 255
      0003CE 10                    4328 	.db #0x10	; 16
      0003CF 10                    4329 	.db #0x10	; 16
      0003D0 10                    4330 	.db #0x10	; 16
      0003D1 10                    4331 	.db #0x10	; 16
      0003D2 10                    4332 	.db #0x10	; 16
      0003D3 10                    4333 	.db #0x10	; 16
      0003D4 10                    4334 	.db #0x10	; 16
      0003D5 10                    4335 	.db #0x10	; 16
      0003D6 10                    4336 	.db #0x10	; 16
      0003D7 FF                    4337 	.db #0xff	; 255
      0003D8 10                    4338 	.db #0x10	; 16
      0003D9 00                    4339 	.db #0x00	; 0
      0003DA 00                    4340 	.db #0x00	; 0
      0003DB 00                    4341 	.db #0x00	; 0
      0003DC FF                    4342 	.db #0xff	; 255
      0003DD 14                    4343 	.db #0x14	; 20
      0003DE 00                    4344 	.db #0x00	; 0
      0003DF 00                    4345 	.db #0x00	; 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 80.
Hexadecimal [24-Bits]



      0003E0 FF                    4346 	.db #0xff	; 255
      0003E1 00                    4347 	.db #0x00	; 0
      0003E2 FF                    4348 	.db #0xff	; 255
      0003E3 00                    4349 	.db #0x00	; 0
      0003E4 00                    4350 	.db #0x00	; 0
      0003E5 1F                    4351 	.db #0x1f	; 31
      0003E6 10                    4352 	.db #0x10	; 16
      0003E7 17                    4353 	.db #0x17	; 23
      0003E8 00                    4354 	.db #0x00	; 0
      0003E9 00                    4355 	.db #0x00	; 0
      0003EA FC                    4356 	.db #0xfc	; 252
      0003EB 04                    4357 	.db #0x04	; 4
      0003EC F4                    4358 	.db #0xf4	; 244
      0003ED 14                    4359 	.db #0x14	; 20
      0003EE 14                    4360 	.db #0x14	; 20
      0003EF 17                    4361 	.db #0x17	; 23
      0003F0 10                    4362 	.db #0x10	; 16
      0003F1 17                    4363 	.db #0x17	; 23
      0003F2 14                    4364 	.db #0x14	; 20
      0003F3 14                    4365 	.db #0x14	; 20
      0003F4 F4                    4366 	.db #0xf4	; 244
      0003F5 04                    4367 	.db #0x04	; 4
      0003F6 F4                    4368 	.db #0xf4	; 244
      0003F7 00                    4369 	.db #0x00	; 0
      0003F8 00                    4370 	.db #0x00	; 0
      0003F9 FF                    4371 	.db #0xff	; 255
      0003FA 00                    4372 	.db #0x00	; 0
      0003FB F7                    4373 	.db #0xf7	; 247
      0003FC 14                    4374 	.db #0x14	; 20
      0003FD 14                    4375 	.db #0x14	; 20
      0003FE 14                    4376 	.db #0x14	; 20
      0003FF 14                    4377 	.db #0x14	; 20
      000400 14                    4378 	.db #0x14	; 20
      000401 14                    4379 	.db #0x14	; 20
      000402 14                    4380 	.db #0x14	; 20
      000403 F7                    4381 	.db #0xf7	; 247
      000404 00                    4382 	.db #0x00	; 0
      000405 F7                    4383 	.db #0xf7	; 247
      000406 14                    4384 	.db #0x14	; 20
      000407 14                    4385 	.db #0x14	; 20
      000408 14                    4386 	.db #0x14	; 20
      000409 17                    4387 	.db #0x17	; 23
      00040A 14                    4388 	.db #0x14	; 20
      00040B 10                    4389 	.db #0x10	; 16
      00040C 10                    4390 	.db #0x10	; 16
      00040D 1F                    4391 	.db #0x1f	; 31
      00040E 10                    4392 	.db #0x10	; 16
      00040F 1F                    4393 	.db #0x1f	; 31
      000410 14                    4394 	.db #0x14	; 20
      000411 14                    4395 	.db #0x14	; 20
      000412 14                    4396 	.db #0x14	; 20
      000413 F4                    4397 	.db #0xf4	; 244
      000414 14                    4398 	.db #0x14	; 20
      000415 10                    4399 	.db #0x10	; 16
      000416 10                    4400 	.db #0x10	; 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 81.
Hexadecimal [24-Bits]



      000417 F0                    4401 	.db #0xf0	; 240
      000418 10                    4402 	.db #0x10	; 16
      000419 F0                    4403 	.db #0xf0	; 240
      00041A 00                    4404 	.db #0x00	; 0
      00041B 00                    4405 	.db #0x00	; 0
      00041C 1F                    4406 	.db #0x1f	; 31
      00041D 10                    4407 	.db #0x10	; 16
      00041E 1F                    4408 	.db #0x1f	; 31
      00041F 00                    4409 	.db #0x00	; 0
      000420 00                    4410 	.db #0x00	; 0
      000421 00                    4411 	.db #0x00	; 0
      000422 1F                    4412 	.db #0x1f	; 31
      000423 14                    4413 	.db #0x14	; 20
      000424 00                    4414 	.db #0x00	; 0
      000425 00                    4415 	.db #0x00	; 0
      000426 00                    4416 	.db #0x00	; 0
      000427 FC                    4417 	.db #0xfc	; 252
      000428 14                    4418 	.db #0x14	; 20
      000429 00                    4419 	.db #0x00	; 0
      00042A 00                    4420 	.db #0x00	; 0
      00042B F0                    4421 	.db #0xf0	; 240
      00042C 10                    4422 	.db #0x10	; 16
      00042D F0                    4423 	.db #0xf0	; 240
      00042E 10                    4424 	.db #0x10	; 16
      00042F 10                    4425 	.db #0x10	; 16
      000430 FF                    4426 	.db #0xff	; 255
      000431 10                    4427 	.db #0x10	; 16
      000432 FF                    4428 	.db #0xff	; 255
      000433 14                    4429 	.db #0x14	; 20
      000434 14                    4430 	.db #0x14	; 20
      000435 14                    4431 	.db #0x14	; 20
      000436 FF                    4432 	.db #0xff	; 255
      000437 14                    4433 	.db #0x14	; 20
      000438 10                    4434 	.db #0x10	; 16
      000439 10                    4435 	.db #0x10	; 16
      00043A 10                    4436 	.db #0x10	; 16
      00043B 1F                    4437 	.db #0x1f	; 31
      00043C 00                    4438 	.db #0x00	; 0
      00043D 00                    4439 	.db #0x00	; 0
      00043E 00                    4440 	.db #0x00	; 0
      00043F 00                    4441 	.db #0x00	; 0
      000440 F0                    4442 	.db #0xf0	; 240
      000441 10                    4443 	.db #0x10	; 16
      000442 FF                    4444 	.db #0xff	; 255
      000443 FF                    4445 	.db #0xff	; 255
      000444 FF                    4446 	.db #0xff	; 255
      000445 FF                    4447 	.db #0xff	; 255
      000446 FF                    4448 	.db #0xff	; 255
      000447 F0                    4449 	.db #0xf0	; 240
      000448 F0                    4450 	.db #0xf0	; 240
      000449 F0                    4451 	.db #0xf0	; 240
      00044A F0                    4452 	.db #0xf0	; 240
      00044B F0                    4453 	.db #0xf0	; 240
      00044C FF                    4454 	.db #0xff	; 255
      00044D FF                    4455 	.db #0xff	; 255
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 82.
Hexadecimal [24-Bits]



      00044E FF                    4456 	.db #0xff	; 255
      00044F 00                    4457 	.db #0x00	; 0
      000450 00                    4458 	.db #0x00	; 0
      000451 00                    4459 	.db #0x00	; 0
      000452 00                    4460 	.db #0x00	; 0
      000453 00                    4461 	.db #0x00	; 0
      000454 FF                    4462 	.db #0xff	; 255
      000455 FF                    4463 	.db #0xff	; 255
      000456 0F                    4464 	.db #0x0f	; 15
      000457 0F                    4465 	.db #0x0f	; 15
      000458 0F                    4466 	.db #0x0f	; 15
      000459 0F                    4467 	.db #0x0f	; 15
      00045A 0F                    4468 	.db #0x0f	; 15
      00045B 38                    4469 	.db #0x38	; 56	'8'
      00045C 44                    4470 	.db #0x44	; 68	'D'
      00045D 44                    4471 	.db #0x44	; 68	'D'
      00045E 38                    4472 	.db #0x38	; 56	'8'
      00045F 44                    4473 	.db #0x44	; 68	'D'
      000460 FC                    4474 	.db #0xfc	; 252
      000461 4A                    4475 	.db #0x4a	; 74	'J'
      000462 4A                    4476 	.db #0x4a	; 74	'J'
      000463 4A                    4477 	.db #0x4a	; 74	'J'
      000464 34                    4478 	.db #0x34	; 52	'4'
      000465 7E                    4479 	.db #0x7e	; 126
      000466 02                    4480 	.db #0x02	; 2
      000467 02                    4481 	.db #0x02	; 2
      000468 06                    4482 	.db #0x06	; 6
      000469 06                    4483 	.db #0x06	; 6
      00046A 02                    4484 	.db #0x02	; 2
      00046B 7E                    4485 	.db #0x7e	; 126
      00046C 02                    4486 	.db #0x02	; 2
      00046D 7E                    4487 	.db #0x7e	; 126
      00046E 02                    4488 	.db #0x02	; 2
      00046F 63                    4489 	.db #0x63	; 99	'c'
      000470 55                    4490 	.db #0x55	; 85	'U'
      000471 49                    4491 	.db #0x49	; 73	'I'
      000472 41                    4492 	.db #0x41	; 65	'A'
      000473 63                    4493 	.db #0x63	; 99	'c'
      000474 38                    4494 	.db #0x38	; 56	'8'
      000475 44                    4495 	.db #0x44	; 68	'D'
      000476 44                    4496 	.db #0x44	; 68	'D'
      000477 3C                    4497 	.db #0x3c	; 60
      000478 04                    4498 	.db #0x04	; 4
      000479 40                    4499 	.db #0x40	; 64
      00047A 7E                    4500 	.db #0x7e	; 126
      00047B 20                    4501 	.db #0x20	; 32
      00047C 1E                    4502 	.db #0x1e	; 30
      00047D 20                    4503 	.db #0x20	; 32
      00047E 06                    4504 	.db #0x06	; 6
      00047F 02                    4505 	.db #0x02	; 2
      000480 7E                    4506 	.db #0x7e	; 126
      000481 02                    4507 	.db #0x02	; 2
      000482 02                    4508 	.db #0x02	; 2
      000483 99                    4509 	.db #0x99	; 153
      000484 A5                    4510 	.db #0xa5	; 165
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 83.
Hexadecimal [24-Bits]



      000485 E7                    4511 	.db #0xe7	; 231
      000486 A5                    4512 	.db #0xa5	; 165
      000487 99                    4513 	.db #0x99	; 153
      000488 1C                    4514 	.db #0x1c	; 28
      000489 2A                    4515 	.db #0x2a	; 42
      00048A 49                    4516 	.db #0x49	; 73	'I'
      00048B 2A                    4517 	.db #0x2a	; 42
      00048C 1C                    4518 	.db #0x1c	; 28
      00048D 4C                    4519 	.db #0x4c	; 76	'L'
      00048E 72                    4520 	.db #0x72	; 114	'r'
      00048F 01                    4521 	.db #0x01	; 1
      000490 72                    4522 	.db #0x72	; 114	'r'
      000491 4C                    4523 	.db #0x4c	; 76	'L'
      000492 30                    4524 	.db #0x30	; 48	'0'
      000493 4A                    4525 	.db #0x4a	; 74	'J'
      000494 4D                    4526 	.db #0x4d	; 77	'M'
      000495 4D                    4527 	.db #0x4d	; 77	'M'
      000496 30                    4528 	.db #0x30	; 48	'0'
      000497 30                    4529 	.db #0x30	; 48	'0'
      000498 48                    4530 	.db #0x48	; 72	'H'
      000499 78                    4531 	.db #0x78	; 120	'x'
      00049A 48                    4532 	.db #0x48	; 72	'H'
      00049B 30                    4533 	.db #0x30	; 48	'0'
      00049C BC                    4534 	.db #0xbc	; 188
      00049D 62                    4535 	.db #0x62	; 98	'b'
      00049E 5A                    4536 	.db #0x5a	; 90	'Z'
      00049F 46                    4537 	.db #0x46	; 70	'F'
      0004A0 3D                    4538 	.db #0x3d	; 61
      0004A1 3E                    4539 	.db #0x3e	; 62
      0004A2 49                    4540 	.db #0x49	; 73	'I'
      0004A3 49                    4541 	.db #0x49	; 73	'I'
      0004A4 49                    4542 	.db #0x49	; 73	'I'
      0004A5 00                    4543 	.db #0x00	; 0
      0004A6 7E                    4544 	.db #0x7e	; 126
      0004A7 01                    4545 	.db #0x01	; 1
      0004A8 01                    4546 	.db #0x01	; 1
      0004A9 01                    4547 	.db #0x01	; 1
      0004AA 7E                    4548 	.db #0x7e	; 126
      0004AB 2A                    4549 	.db #0x2a	; 42
      0004AC 2A                    4550 	.db #0x2a	; 42
      0004AD 2A                    4551 	.db #0x2a	; 42
      0004AE 2A                    4552 	.db #0x2a	; 42
      0004AF 2A                    4553 	.db #0x2a	; 42
      0004B0 44                    4554 	.db #0x44	; 68	'D'
      0004B1 44                    4555 	.db #0x44	; 68	'D'
      0004B2 5F                    4556 	.db #0x5f	; 95
      0004B3 44                    4557 	.db #0x44	; 68	'D'
      0004B4 44                    4558 	.db #0x44	; 68	'D'
      0004B5 40                    4559 	.db #0x40	; 64
      0004B6 51                    4560 	.db #0x51	; 81	'Q'
      0004B7 4A                    4561 	.db #0x4a	; 74	'J'
      0004B8 44                    4562 	.db #0x44	; 68	'D'
      0004B9 40                    4563 	.db #0x40	; 64
      0004BA 40                    4564 	.db #0x40	; 64
      0004BB 44                    4565 	.db #0x44	; 68	'D'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 84.
Hexadecimal [24-Bits]



      0004BC 4A                    4566 	.db #0x4a	; 74	'J'
      0004BD 51                    4567 	.db #0x51	; 81	'Q'
      0004BE 40                    4568 	.db #0x40	; 64
      0004BF 00                    4569 	.db #0x00	; 0
      0004C0 00                    4570 	.db #0x00	; 0
      0004C1 FF                    4571 	.db #0xff	; 255
      0004C2 01                    4572 	.db #0x01	; 1
      0004C3 03                    4573 	.db #0x03	; 3
      0004C4 E0                    4574 	.db #0xe0	; 224
      0004C5 80                    4575 	.db #0x80	; 128
      0004C6 FF                    4576 	.db #0xff	; 255
      0004C7 00                    4577 	.db #0x00	; 0
      0004C8 00                    4578 	.db #0x00	; 0
      0004C9 08                    4579 	.db #0x08	; 8
      0004CA 08                    4580 	.db #0x08	; 8
      0004CB 6B                    4581 	.db #0x6b	; 107	'k'
      0004CC 6B                    4582 	.db #0x6b	; 107	'k'
      0004CD 08                    4583 	.db #0x08	; 8
      0004CE 36                    4584 	.db #0x36	; 54	'6'
      0004CF 12                    4585 	.db #0x12	; 18
      0004D0 36                    4586 	.db #0x36	; 54	'6'
      0004D1 24                    4587 	.db #0x24	; 36
      0004D2 36                    4588 	.db #0x36	; 54	'6'
      0004D3 06                    4589 	.db #0x06	; 6
      0004D4 0F                    4590 	.db #0x0f	; 15
      0004D5 09                    4591 	.db #0x09	; 9
      0004D6 0F                    4592 	.db #0x0f	; 15
      0004D7 06                    4593 	.db #0x06	; 6
      0004D8 00                    4594 	.db #0x00	; 0
      0004D9 00                    4595 	.db #0x00	; 0
      0004DA 18                    4596 	.db #0x18	; 24
      0004DB 18                    4597 	.db #0x18	; 24
      0004DC 00                    4598 	.db #0x00	; 0
      0004DD 00                    4599 	.db #0x00	; 0
      0004DE 00                    4600 	.db #0x00	; 0
      0004DF 10                    4601 	.db #0x10	; 16
      0004E0 10                    4602 	.db #0x10	; 16
      0004E1 00                    4603 	.db #0x00	; 0
      0004E2 30                    4604 	.db #0x30	; 48	'0'
      0004E3 40                    4605 	.db #0x40	; 64
      0004E4 FF                    4606 	.db #0xff	; 255
      0004E5 01                    4607 	.db #0x01	; 1
      0004E6 01                    4608 	.db #0x01	; 1
      0004E7 00                    4609 	.db #0x00	; 0
      0004E8 1F                    4610 	.db #0x1f	; 31
      0004E9 01                    4611 	.db #0x01	; 1
      0004EA 01                    4612 	.db #0x01	; 1
      0004EB 1E                    4613 	.db #0x1e	; 30
      0004EC 00                    4614 	.db #0x00	; 0
      0004ED 19                    4615 	.db #0x19	; 25
      0004EE 1D                    4616 	.db #0x1d	; 29
      0004EF 17                    4617 	.db #0x17	; 23
      0004F0 12                    4618 	.db #0x12	; 18
      0004F1 00                    4619 	.db #0x00	; 0
      0004F2 3C                    4620 	.db #0x3c	; 60
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Intel 8051), page 85.
Hexadecimal [24-Bits]



      0004F3 3C                    4621 	.db #0x3c	; 60
      0004F4 3C                    4622 	.db #0x3c	; 60
      0004F5 3C                    4623 	.db #0x3c	; 60
      0004F6 00                    4624 	.db #0x00	; 0
      0004F7 00                    4625 	.db #0x00	; 0
      0004F8 00                    4626 	.db #0x00	; 0
      0004F9 00                    4627 	.db #0x00	; 0
      0004FA 00                    4628 	.db #0x00	; 0
                                   4629 	.area CONST   (CODE)
      0004FB                       4630 ___str_0:
      0004FB 57 65 6C 63 6F 6D 65  4631 	.ascii "Welcome"
      000502 0A                    4632 	.db 0x0a
      000503 00                    4633 	.db 0x00
                                   4634 	.area CSEG    (CODE)
                                   4635 	.area CONST   (CODE)
      000504                       4636 ___str_1:
      000504 45 43 45 4E 2D 34 33  4637 	.ascii "ECEN-4330"
             33 30
      00050D 0A                    4638 	.db 0x0a
      00050E 00                    4639 	.db 0x00
                                   4640 	.area CSEG    (CODE)
                                   4641 	.area CONST   (CODE)
      00050F                       4642 ___str_2:
      00050F 52 6F 74 61 74 69 6F  4643 	.ascii "Rotation 0"
             6E 20 30
      000519 00                    4644 	.db 0x00
                                   4645 	.area CSEG    (CODE)
                                   4646 	.area CONST   (CODE)
      00051A                       4647 ___str_3:
      00051A 52 6F 74 61 74 69 6F  4648 	.ascii "Rotation 1"
             6E 20 31
      000524 00                    4649 	.db 0x00
                                   4650 	.area CSEG    (CODE)
                                   4651 	.area CONST   (CODE)
      000525                       4652 ___str_4:
      000525 52 6F 74 61 74 69 6F  4653 	.ascii "Rotation 2"
             6E 20 32
      00052F 00                    4654 	.db 0x00
                                   4655 	.area CSEG    (CODE)
                                   4656 	.area CONST   (CODE)
      000530                       4657 ___str_5:
      000530 52 6F 74 61 74 69 6F  4658 	.ascii "Rotation 3"
             6E 20 33
      00053A 00                    4659 	.db 0x00
                                   4660 	.area CSEG    (CODE)
                                   4661 	.area CONST   (CODE)
      00053B                       4662 ___str_6:
      00053B 46 72 65 65 20 54 79  4663 	.ascii "Free Type: "
             70 65 3A 20
      000546 0A                    4664 	.db 0x0a
      000547 00                    4665 	.db 0x00
                                   4666 	.area CSEG    (CODE)
                                   4667 	.area XINIT   (CODE)
                                   4668 	.area CABS    (ABS,CODE)
