                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _basic
                                     23 	.globl _writeSomeLines
                                     24 	.globl _convertAsciiHex
                                     25 	.globl _write
                                     26 	.globl _drawChar
                                     27 	.globl _setRotation
                                     28 	.globl _ioread8
                                     29 	.globl _iowrite8
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _B
                                    106 	.globl _ACC
                                    107 	.globl _PSW
                                    108 	.globl _IP
                                    109 	.globl _P3
                                    110 	.globl _IE
                                    111 	.globl _P2
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _P1
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _P0
                                    126 	.globl _printFind_PARM_4
                                    127 	.globl _printFind_PARM_2
                                    128 	.globl __height
                                    129 	.globl __width
                                    130 	.globl _printCount_PARM_5
                                    131 	.globl _printCount_PARM_4
                                    132 	.globl _printCount_PARM_3
                                    133 	.globl _printCount_PARM_2
                                    134 	.globl _printFind_PARM_3
                                    135 	.globl _drawChar_PARM_6
                                    136 	.globl _drawChar_PARM_5
                                    137 	.globl _drawChar_PARM_4
                                    138 	.globl _drawChar_PARM_3
                                    139 	.globl _drawChar_PARM_2
                                    140 	.globl _fillRect_PARM_5
                                    141 	.globl _fillRect_PARM_4
                                    142 	.globl _fillRect_PARM_3
                                    143 	.globl _fillRect_PARM_2
                                    144 	.globl _testCircles_PARM_2
                                    145 	.globl _drawCircle_PARM_4
                                    146 	.globl _drawCircle_PARM_3
                                    147 	.globl _drawCircle_PARM_2
                                    148 	.globl _drawPixel_PARM_3
                                    149 	.globl _drawPixel_PARM_2
                                    150 	.globl _textbgcolor
                                    151 	.globl _textcolor
                                    152 	.globl _rotation
                                    153 	.globl _textsize
                                    154 	.globl _cursor_y
                                    155 	.globl _cursor_x
                                    156 	.globl _read_ram_address
                                    157 	.globl _light_address
                                    158 	.globl _temp_address
                                    159 	.globl _seg7_address
                                    160 	.globl _lcd_address
                                    161 	.globl _rowloc
                                    162 	.globl _colloc
                                    163 	.globl _delay
                                    164 	.globl _writeRegister8
                                    165 	.globl _writeRegister16
                                    166 	.globl _setCursor
                                    167 	.globl _setTextColor
                                    168 	.globl _setTextSize
                                    169 	.globl _setAddress
                                    170 	.globl _TFT_LCD_INIT
                                    171 	.globl _drawPixel
                                    172 	.globl _drawCircle
                                    173 	.globl _testCircles
                                    174 	.globl _fillRect
                                    175 	.globl _fillScreen
                                    176 	.globl _LCD_string_write
                                    177 	.globl _testRAM
                                    178 	.globl _freeType
                                    179 	.globl _keyDetect
                                    180 	.globl _reverse
                                    181 	.globl _asciiToDec
                                    182 	.globl _asciiToHex
                                    183 	.globl _getAddress
                                    184 	.globl _getByte
                                    185 	.globl _check
                                    186 	.globl _move
                                    187 	.globl _editByte
                                    188 	.globl _edit
                                    189 	.globl _printFind
                                    190 	.globl _find
                                    191 	.globl _printCount
                                    192 	.globl _count
                                    193 	.globl _readTemp
                                    194 	.globl _readLight
                                    195 	.globl _displayTemp
                                    196 	.globl _displayLight
                                    197 	.globl _temperature
                                    198 	.globl _light
                                    199 ;--------------------------------------------------------
                                    200 ; special function registers
                                    201 ;--------------------------------------------------------
                                    202 	.area RSEG    (ABS,DATA)
      000000                        203 	.org 0x0000
                           000080   204 _P0	=	0x0080
                           000081   205 _SP	=	0x0081
                           000082   206 _DPL	=	0x0082
                           000083   207 _DPH	=	0x0083
                           000087   208 _PCON	=	0x0087
                           000088   209 _TCON	=	0x0088
                           000089   210 _TMOD	=	0x0089
                           00008A   211 _TL0	=	0x008a
                           00008B   212 _TL1	=	0x008b
                           00008C   213 _TH0	=	0x008c
                           00008D   214 _TH1	=	0x008d
                           000090   215 _P1	=	0x0090
                           000098   216 _SCON	=	0x0098
                           000099   217 _SBUF	=	0x0099
                           0000A0   218 _P2	=	0x00a0
                           0000A8   219 _IE	=	0x00a8
                           0000B0   220 _P3	=	0x00b0
                           0000B8   221 _IP	=	0x00b8
                           0000D0   222 _PSW	=	0x00d0
                           0000E0   223 _ACC	=	0x00e0
                           0000F0   224 _B	=	0x00f0
                                    225 ;--------------------------------------------------------
                                    226 ; special function bits
                                    227 ;--------------------------------------------------------
                                    228 	.area RSEG    (ABS,DATA)
      000000                        229 	.org 0x0000
                           000080   230 _P0_0	=	0x0080
                           000081   231 _P0_1	=	0x0081
                           000082   232 _P0_2	=	0x0082
                           000083   233 _P0_3	=	0x0083
                           000084   234 _P0_4	=	0x0084
                           000085   235 _P0_5	=	0x0085
                           000086   236 _P0_6	=	0x0086
                           000087   237 _P0_7	=	0x0087
                           000088   238 _IT0	=	0x0088
                           000089   239 _IE0	=	0x0089
                           00008A   240 _IT1	=	0x008a
                           00008B   241 _IE1	=	0x008b
                           00008C   242 _TR0	=	0x008c
                           00008D   243 _TF0	=	0x008d
                           00008E   244 _TR1	=	0x008e
                           00008F   245 _TF1	=	0x008f
                           000090   246 _P1_0	=	0x0090
                           000091   247 _P1_1	=	0x0091
                           000092   248 _P1_2	=	0x0092
                           000093   249 _P1_3	=	0x0093
                           000094   250 _P1_4	=	0x0094
                           000095   251 _P1_5	=	0x0095
                           000096   252 _P1_6	=	0x0096
                           000097   253 _P1_7	=	0x0097
                           000098   254 _RI	=	0x0098
                           000099   255 _TI	=	0x0099
                           00009A   256 _RB8	=	0x009a
                           00009B   257 _TB8	=	0x009b
                           00009C   258 _REN	=	0x009c
                           00009D   259 _SM2	=	0x009d
                           00009E   260 _SM1	=	0x009e
                           00009F   261 _SM0	=	0x009f
                           0000A0   262 _P2_0	=	0x00a0
                           0000A1   263 _P2_1	=	0x00a1
                           0000A2   264 _P2_2	=	0x00a2
                           0000A3   265 _P2_3	=	0x00a3
                           0000A4   266 _P2_4	=	0x00a4
                           0000A5   267 _P2_5	=	0x00a5
                           0000A6   268 _P2_6	=	0x00a6
                           0000A7   269 _P2_7	=	0x00a7
                           0000A8   270 _EX0	=	0x00a8
                           0000A9   271 _ET0	=	0x00a9
                           0000AA   272 _EX1	=	0x00aa
                           0000AB   273 _ET1	=	0x00ab
                           0000AC   274 _ES	=	0x00ac
                           0000AF   275 _EA	=	0x00af
                           0000B0   276 _P3_0	=	0x00b0
                           0000B1   277 _P3_1	=	0x00b1
                           0000B2   278 _P3_2	=	0x00b2
                           0000B3   279 _P3_3	=	0x00b3
                           0000B4   280 _P3_4	=	0x00b4
                           0000B5   281 _P3_5	=	0x00b5
                           0000B6   282 _P3_6	=	0x00b6
                           0000B7   283 _P3_7	=	0x00b7
                           0000B0   284 _RXD	=	0x00b0
                           0000B1   285 _TXD	=	0x00b1
                           0000B2   286 _INT0	=	0x00b2
                           0000B3   287 _INT1	=	0x00b3
                           0000B4   288 _T0	=	0x00b4
                           0000B5   289 _T1	=	0x00b5
                           0000B6   290 _WR	=	0x00b6
                           0000B7   291 _RD	=	0x00b7
                           0000B8   292 _PX0	=	0x00b8
                           0000B9   293 _PT0	=	0x00b9
                           0000BA   294 _PX1	=	0x00ba
                           0000BB   295 _PT1	=	0x00bb
                           0000BC   296 _PS	=	0x00bc
                           0000D0   297 _P	=	0x00d0
                           0000D1   298 _F1	=	0x00d1
                           0000D2   299 _OV	=	0x00d2
                           0000D3   300 _RS0	=	0x00d3
                           0000D4   301 _RS1	=	0x00d4
                           0000D5   302 _F0	=	0x00d5
                           0000D6   303 _AC	=	0x00d6
                           0000D7   304 _CY	=	0x00d7
                                    305 ;--------------------------------------------------------
                                    306 ; overlayable register banks
                                    307 ;--------------------------------------------------------
                                    308 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        309 	.ds 8
                                    310 ;--------------------------------------------------------
                                    311 ; internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area DSEG    (DATA)
      000000                        314 _colloc::
      000000                        315 	.ds 1
      000001                        316 _rowloc::
      000001                        317 	.ds 1
      000002                        318 _lcd_address::
      000002                        319 	.ds 2
      000004                        320 _seg7_address::
      000004                        321 	.ds 2
      000006                        322 _temp_address::
      000006                        323 	.ds 2
      000008                        324 _light_address::
      000008                        325 	.ds 2
      00000A                        326 _read_ram_address::
      00000A                        327 	.ds 2
      00000C                        328 _cursor_x::
      00000C                        329 	.ds 2
      00000E                        330 _cursor_y::
      00000E                        331 	.ds 2
      000010                        332 _textsize::
      000010                        333 	.ds 1
      000011                        334 _rotation::
      000011                        335 	.ds 1
      000012                        336 _textcolor::
      000012                        337 	.ds 2
      000014                        338 _textbgcolor::
      000014                        339 	.ds 2
      000016                        340 _drawPixel_PARM_2:
      000016                        341 	.ds 2
      000018                        342 _drawPixel_PARM_3:
      000018                        343 	.ds 2
      00001A                        344 _drawCircle_PARM_2:
      00001A                        345 	.ds 2
      00001C                        346 _drawCircle_PARM_3:
      00001C                        347 	.ds 2
      00001E                        348 _drawCircle_PARM_4:
      00001E                        349 	.ds 2
      000020                        350 _drawCircle_x0_65536_105:
      000020                        351 	.ds 2
      000022                        352 _drawCircle_sloc0_1_0:
      000022                        353 	.ds 2
      000024                        354 _drawCircle_sloc1_1_0:
      000024                        355 	.ds 2
      000026                        356 _drawCircle_sloc2_1_0:
      000026                        357 	.ds 2
      000028                        358 _drawCircle_sloc3_1_0:
      000028                        359 	.ds 2
      00002A                        360 _drawCircle_sloc4_1_0:
      00002A                        361 	.ds 2
      00002C                        362 _testCircles_PARM_2:
      00002C                        363 	.ds 2
      00002E                        364 _testCircles_radius_65536_109:
      00002E                        365 	.ds 1
      00002F                        366 _testCircles_sloc0_1_0:
      00002F                        367 	.ds 2
      000031                        368 _fillRect_PARM_2:
      000031                        369 	.ds 2
      000033                        370 _fillRect_PARM_3:
      000033                        371 	.ds 2
      000035                        372 _fillRect_PARM_4:
      000035                        373 	.ds 2
      000037                        374 _fillRect_PARM_5:
      000037                        375 	.ds 2
      000039                        376 _drawChar_PARM_2:
      000039                        377 	.ds 2
      00003B                        378 _drawChar_PARM_3:
      00003B                        379 	.ds 1
      00003C                        380 _drawChar_PARM_4:
      00003C                        381 	.ds 2
      00003E                        382 _drawChar_PARM_5:
      00003E                        383 	.ds 2
      000040                        384 _drawChar_PARM_6:
      000040                        385 	.ds 1
      000041                        386 _drawChar_sloc1_1_0:
      000041                        387 	.ds 2
      000043                        388 _drawChar_sloc2_1_0:
      000043                        389 	.ds 2
      000045                        390 _drawChar_sloc3_1_0:
      000045                        391 	.ds 1
      000046                        392 _drawChar_sloc4_1_0:
      000046                        393 	.ds 1
      000047                        394 _drawChar_sloc5_1_0:
      000047                        395 	.ds 1
      000048                        396 _asciiToHex_store_65536_202:
      000048                        397 	.ds 2
      00004A                        398 _move_target_65537_249:
      00004A                        399 	.ds 2
      00004C                        400 _move_sloc0_1_0:
      00004C                        401 	.ds 2
      00004E                        402 _move_sloc1_1_0:
      00004E                        403 	.ds 2
      000050                        404 _printFind_PARM_3:
      000050                        405 	.ds 1
      000051                        406 _printFind_start_65536_261:
      000051                        407 	.ds 2
      000053                        408 _printFind_sloc0_1_0:
      000053                        409 	.ds 2
      000055                        410 _find_sloc0_1_0:
      000055                        411 	.ds 2
      000057                        412 _find_sloc1_1_0:
      000057                        413 	.ds 2
      000059                        414 _find_sloc2_1_0:
      000059                        415 	.ds 1
      00005A                        416 _printCount_PARM_2:
      00005A                        417 	.ds 1
      00005B                        418 _printCount_PARM_3:
      00005B                        419 	.ds 1
      00005C                        420 _printCount_PARM_4:
      00005C                        421 	.ds 1
      00005D                        422 _printCount_PARM_5:
      00005D                        423 	.ds 1
      00005E                        424 _count_key_65537_288:
      00005E                        425 	.ds 1
      00005F                        426 _count_n_65537_288:
      00005F                        427 	.ds 1
      000060                        428 _count_size_65537_288:
      000060                        429 	.ds 1
      000061                        430 _count_index_65537_288:
      000061                        431 	.ds 1
      000062                        432 _count_pages_65537_288:
      000062                        433 	.ds 1
      000063                        434 _count_sloc0_1_0:
      000063                        435 	.ds 1
      000064                        436 _count_sloc1_1_0:
      000064                        437 	.ds 1
      000065                        438 _count_sloc2_1_0:
      000065                        439 	.ds 1
      000066                        440 _count_sloc3_1_0:
      000066                        441 	.ds 1
      000067                        442 _count_sloc4_1_0:
      000067                        443 	.ds 1
                                    444 ;--------------------------------------------------------
                                    445 ; overlayable items in internal ram
                                    446 ;--------------------------------------------------------
                                    447 	.area	OSEG    (OVR,DATA)
      000000                        448 _iowrite8_PARM_2:
      000000                        449 	.ds 1
                                    450 	.area	OSEG    (OVR,DATA)
                                    451 	.area	OSEG    (OVR,DATA)
                                    452 	.area	OSEG    (OVR,DATA)
      000000                        453 _writeRegister8_PARM_2:
      000000                        454 	.ds 1
                                    455 	.area	OSEG    (OVR,DATA)
      000000                        456 _writeRegister16_PARM_2:
      000000                        457 	.ds 2
                                    458 	.area	OSEG    (OVR,DATA)
      000000                        459 _setCursor_PARM_2:
      000000                        460 	.ds 2
                                    461 	.area	OSEG    (OVR,DATA)
      000000                        462 _setTextColor_PARM_2:
      000000                        463 	.ds 2
                                    464 	.area	OSEG    (OVR,DATA)
                                    465 	.area	OSEG    (OVR,DATA)
      000000                        466 _setAddress_PARM_2:
      000000                        467 	.ds 2
      000002                        468 _setAddress_PARM_3:
      000002                        469 	.ds 2
      000004                        470 _setAddress_PARM_4:
      000004                        471 	.ds 2
                                    472 	.area	OSEG    (OVR,DATA)
                                    473 	.area	OSEG    (OVR,DATA)
                                    474 	.area	OSEG    (OVR,DATA)
                                    475 	.area	OSEG    (OVR,DATA)
                                    476 ;--------------------------------------------------------
                                    477 ; Stack segment in internal ram
                                    478 ;--------------------------------------------------------
                                    479 	.area	SSEG
      000000                        480 __start__stack:
      000000                        481 	.ds	1
                                    482 
                                    483 ;--------------------------------------------------------
                                    484 ; indirectly addressable internal ram data
                                    485 ;--------------------------------------------------------
                                    486 	.area ISEG    (DATA)
                                    487 ;--------------------------------------------------------
                                    488 ; absolute internal ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area IABS    (ABS,DATA)
                                    491 	.area IABS    (ABS,DATA)
                                    492 ;--------------------------------------------------------
                                    493 ; bit data
                                    494 ;--------------------------------------------------------
                                    495 	.area BSEG    (BIT)
      000000                        496 _drawChar_sloc0_1_0:
      000000                        497 	.ds 1
      000001                        498 _convertAsciiHex_sloc0_1_0:
      000001                        499 	.ds 1
                                    500 ;--------------------------------------------------------
                                    501 ; paged external ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area PSEG    (PAG,XDATA)
                                    504 ;--------------------------------------------------------
                                    505 ; external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area XSEG    (XDATA)
      000000                        508 __width::
      000000                        509 	.ds 2
      000002                        510 __height::
      000002                        511 	.ds 2
      000004                        512 _drawCircle_f_65536_106:
      000004                        513 	.ds 2
      000006                        514 _testCircles_x_65536_110:
      000006                        515 	.ds 2
      000008                        516 _testCircles_y_65536_110:
      000008                        517 	.ds 2
      00000A                        518 _drawChar_line_196609_153:
      00000A                        519 	.ds 1
      00000B                        520 _testRAM_d_65536_174:
      00000B                        521 	.ds 1
      00000C                        522 _freeType_count_65536_178:
      00000C                        523 	.ds 1
      00000D                        524 _reverse_rev_65536_196:
      00000D                        525 	.ds 2
      00000F                        526 _reverse_val_65536_196:
      00000F                        527 	.ds 2
      000011                        528 _asciiToDec_d_65536_198:
      000011                        529 	.ds 1
      000012                        530 _asciiToDec_val_65536_199:
      000012                        531 	.ds 1
      000013                        532 _asciiToDec_id_65536_199:
      000013                        533 	.ds 2
      000015                        534 _getAddress_address_65536_228:
      000015                        535 	.ds 2
      000017                        536 _getByte_byte_65536_231:
      000017                        537 	.ds 1
      000018                        538 _check_checker_65537_235:
      000018                        539 	.ds 1
      000019                        540 _check_error_65537_235:
      000019                        541 	.ds 1
      00001A                        542 _editByte_add_65536_253:
      00001A                        543 	.ds 2
      00001C                        544 _edit_input_65537_256:
      00001C                        545 	.ds 1
      00001D                        546 _printFind_PARM_2:
      00001D                        547 	.ds 1
      00001E                        548 _printFind_PARM_4:
      00001E                        549 	.ds 1
      00001F                        550 _find_page_65537_268:
      00001F                        551 	.ds 1
      000020                        552 _find_index_65537_268:
      000020                        553 	.ds 1
      000021                        554 _find_address_65537_268:
      000021                        555 	.ds 2
      000023                        556 _count_page_65537_288:
      000023                        557 	.ds 1
                                    558 ;--------------------------------------------------------
                                    559 ; absolute external ram data
                                    560 ;--------------------------------------------------------
                                    561 	.area XABS    (ABS,XDATA)
                                    562 ;--------------------------------------------------------
                                    563 ; external initialized ram data
                                    564 ;--------------------------------------------------------
                                    565 	.area XISEG   (XDATA)
                                    566 	.area HOME    (CODE)
                                    567 	.area GSINIT0 (CODE)
                                    568 	.area GSINIT1 (CODE)
                                    569 	.area GSINIT2 (CODE)
                                    570 	.area GSINIT3 (CODE)
                                    571 	.area GSINIT4 (CODE)
                                    572 	.area GSINIT5 (CODE)
                                    573 	.area GSINIT  (CODE)
                                    574 	.area GSFINAL (CODE)
                                    575 	.area CSEG    (CODE)
                                    576 ;--------------------------------------------------------
                                    577 ; interrupt vector
                                    578 ;--------------------------------------------------------
                                    579 	.area HOME    (CODE)
      000000                        580 __interrupt_vect:
      000000 02r00r00         [24]  581 	ljmp	__sdcc_gsinit_startup
                                    582 ;--------------------------------------------------------
                                    583 ; global & static initialisations
                                    584 ;--------------------------------------------------------
                                    585 	.area HOME    (CODE)
                                    586 	.area GSINIT  (CODE)
                                    587 	.area GSFINAL (CODE)
                                    588 	.area GSINIT  (CODE)
                                    589 	.globl __sdcc_gsinit_startup
                                    590 	.globl __sdcc_program_startup
                                    591 	.globl __start__stack
                                    592 	.globl __mcs51_genXINIT
                                    593 	.globl __mcs51_genXRAMCLEAR
                                    594 	.globl __mcs51_genRAMCLEAR
                                    595 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  596 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  597 	mov	(_lcd_address + 1),#0x40
                                    598 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  599 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  600 	mov	(_seg7_address + 1),#0x80
                                    601 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  602 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  603 	mov	(_temp_address + 1),#0xc0
                                    604 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  605 	clr	a
      000013 F5*08            [12]  606 	mov	_light_address,a
      000015 F5*09            [12]  607 	mov	(_light_address + 1),a
                                    608 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  609 	ljmp	__sdcc_program_startup
                                    610 ;--------------------------------------------------------
                                    611 ; Home
                                    612 ;--------------------------------------------------------
                                    613 	.area HOME    (CODE)
                                    614 	.area HOME    (CODE)
      000003                        615 __sdcc_program_startup:
      000003 02r1Dr99         [24]  616 	ljmp	_main
                                    617 ;	return from main will return to caller
                                    618 ;--------------------------------------------------------
                                    619 ; code
                                    620 ;--------------------------------------------------------
                                    621 	.area CSEG    (CODE)
                                    622 ;------------------------------------------------------------
                                    623 ;Allocation info for local variables in function 'iowrite8'
                                    624 ;------------------------------------------------------------
                                    625 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    626 ;map_address               Allocated to registers r6 r7 
                                    627 ;------------------------------------------------------------
                                    628 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    629 ;	-----------------------------------------
                                    630 ;	 function iowrite8
                                    631 ;	-----------------------------------------
      000000                        632 _iowrite8:
                           000007   633 	ar7 = 0x07
                           000006   634 	ar6 = 0x06
                           000005   635 	ar5 = 0x05
                           000004   636 	ar4 = 0x04
                           000003   637 	ar3 = 0x03
                           000002   638 	ar2 = 0x02
                           000001   639 	ar1 = 0x01
                           000000   640 	ar0 = 0x00
      000000 AE 82            [24]  641 	mov	r6,dpl
      000002 AF 83            [24]  642 	mov	r7,dph
                                    643 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    644 ;	assignBit
      000004 D2 B4            [12]  645 	setb	_P3_4
                                    646 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  647 	mov	dpl,r6
      000008 8F 83            [24]  648 	mov	dph,r7
      00000A E5*00            [12]  649 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  650 	movx	@dptr,a
                                    651 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    652 ;	assignBit
      00000D C2 B4            [12]  653 	clr	_P3_4
                                    654 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  655 	ret
                                    656 ;------------------------------------------------------------
                                    657 ;Allocation info for local variables in function 'ioread8'
                                    658 ;------------------------------------------------------------
                                    659 ;map_address               Allocated to registers r6 r7 
                                    660 ;val                       Allocated to registers r6 
                                    661 ;------------------------------------------------------------
                                    662 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    663 ;	-----------------------------------------
                                    664 ;	 function ioread8
                                    665 ;	-----------------------------------------
      000010                        666 _ioread8:
      000010 AE 82            [24]  667 	mov	r6,dpl
      000012 AF 83            [24]  668 	mov	r7,dph
                                    669 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    670 ;	assignBit
      000014 D2 B4            [12]  671 	setb	_P3_4
                                    672 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      000016 8E 82            [24]  673 	mov	dpl,r6
      000018 8F 83            [24]  674 	mov	dph,r7
      00001A E0               [24]  675 	movx	a,@dptr
      00001B FE               [12]  676 	mov	r6,a
                                    677 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    678 ;	assignBit
      00001C C2 B4            [12]  679 	clr	_P3_4
                                    680 ;	ecen4330_lcd_v3.c:67: return val;
      00001E 8E 82            [24]  681 	mov	dpl,r6
                                    682 ;	ecen4330_lcd_v3.c:68: }
      000020 22               [24]  683 	ret
                                    684 ;------------------------------------------------------------
                                    685 ;Allocation info for local variables in function 'delay'
                                    686 ;------------------------------------------------------------
                                    687 ;i                         Allocated with name '_delay_i_65536_29'
                                    688 ;j                         Allocated with name '_delay_j_65536_29'
                                    689 ;d                         Allocated to registers r6 r7 
                                    690 ;------------------------------------------------------------
                                    691 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d)
                                    692 ;	-----------------------------------------
                                    693 ;	 function delay
                                    694 ;	-----------------------------------------
      000021                        695 _delay:
      000021 AE 82            [24]  696 	mov	r6,dpl
      000023 AF 83            [24]  697 	mov	r7,dph
                                    698 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000025 7C 00            [12]  699 	mov	r4,#0x00
      000027 7D 00            [12]  700 	mov	r5,#0x00
      000029                        701 00107$:
      000029 8C 02            [24]  702 	mov	ar2,r4
      00002B 8D 03            [24]  703 	mov	ar3,r5
      00002D C3               [12]  704 	clr	c
      00002E EA               [12]  705 	mov	a,r2
      00002F 9E               [12]  706 	subb	a,r6
      000030 EB               [12]  707 	mov	a,r3
      000031 64 80            [12]  708 	xrl	a,#0x80
      000033 8F F0            [24]  709 	mov	b,r7
      000035 63 F0 80         [24]  710 	xrl	b,#0x80
      000038 95 F0            [12]  711 	subb	a,b
      00003A 50 14            [24]  712 	jnc	00109$
                                    713 ;	ecen4330_lcd_v3.c:77: for (j=0;j<1000;j++);
      00003C 7A E8            [12]  714 	mov	r2,#0xe8
      00003E 7B 03            [12]  715 	mov	r3,#0x03
      000040                        716 00105$:
      000040 1A               [12]  717 	dec	r2
      000041 BA FF 01         [24]  718 	cjne	r2,#0xff,00130$
      000044 1B               [12]  719 	dec	r3
      000045                        720 00130$:
      000045 EA               [12]  721 	mov	a,r2
      000046 4B               [12]  722 	orl	a,r3
      000047 70 F7            [24]  723 	jnz	00105$
                                    724 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000049 0C               [12]  725 	inc	r4
      00004A BC 00 DC         [24]  726 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  727 	inc	r5
      00004E 80 D9            [24]  728 	sjmp	00107$
      000050                        729 00109$:
                                    730 ;	ecen4330_lcd_v3.c:79: }
      000050 22               [24]  731 	ret
                                    732 ;------------------------------------------------------------
                                    733 ;Allocation info for local variables in function 'writeRegister8'
                                    734 ;------------------------------------------------------------
                                    735 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    736 ;a                         Allocated to registers r7 
                                    737 ;------------------------------------------------------------
                                    738 ;	ecen4330_lcd_v3.c:89: void writeRegister8 (uint8_t a, uint8_t d) {
                                    739 ;	-----------------------------------------
                                    740 ;	 function writeRegister8
                                    741 ;	-----------------------------------------
      000051                        742 _writeRegister8:
      000051 AF 82            [24]  743 	mov	r7,dpl
                                    744 ;	ecen4330_lcd_v3.c:90: CD = __CMD__;
                                    745 ;	assignBit
      000053 C2 B5            [12]  746 	clr	_P3_5
                                    747 ;	ecen4330_lcd_v3.c:91: write8(a);
                                    748 ;	assignBit
      000055 D2 B4            [12]  749 	setb	_P3_4
      000057 85*02 82         [24]  750 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  751 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  752 	mov	a,r7
      00005E F0               [24]  753 	movx	@dptr,a
                                    754 ;	assignBit
      00005F C2 B4            [12]  755 	clr	_P3_4
                                    756 ;	ecen4330_lcd_v3.c:92: CD = __DATA__;
                                    757 ;	assignBit
      000061 D2 B5            [12]  758 	setb	_P3_5
                                    759 ;	ecen4330_lcd_v3.c:93: write8(d);
                                    760 ;	assignBit
      000063 D2 B4            [12]  761 	setb	_P3_4
      000065 85*02 82         [24]  762 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  763 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  764 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  765 	movx	@dptr,a
                                    766 ;	assignBit
      00006E C2 B4            [12]  767 	clr	_P3_4
                                    768 ;	ecen4330_lcd_v3.c:94: }
      000070 22               [24]  769 	ret
                                    770 ;------------------------------------------------------------
                                    771 ;Allocation info for local variables in function 'writeRegister16'
                                    772 ;------------------------------------------------------------
                                    773 ;hi                        Allocated with name '_writeRegister16_hi_65536_38'
                                    774 ;lo                        Allocated with name '_writeRegister16_lo_65536_38'
                                    775 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    776 ;a                         Allocated to registers r6 r7 
                                    777 ;------------------------------------------------------------
                                    778 ;	ecen4330_lcd_v3.c:98: void writeRegister16 (uint16_t a, uint16_t d) {
                                    779 ;	-----------------------------------------
                                    780 ;	 function writeRegister16
                                    781 ;	-----------------------------------------
      000071                        782 _writeRegister16:
      000071 AE 82            [24]  783 	mov	r6,dpl
      000073 AF 83            [24]  784 	mov	r7,dph
                                    785 ;	ecen4330_lcd_v3.c:100: hi = (a) >> 8;
      000075 8F 05            [24]  786 	mov	ar5,r7
                                    787 ;	ecen4330_lcd_v3.c:101: lo = (a);
                                    788 ;	ecen4330_lcd_v3.c:102: write8Reg(hi);
                                    789 ;	assignBit
      000077 C2 B5            [12]  790 	clr	_P3_5
                                    791 ;	assignBit
      000079 D2 B4            [12]  792 	setb	_P3_4
      00007B 85*02 82         [24]  793 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  794 	mov	dph,(_lcd_address + 1)
      000081 ED               [12]  795 	mov	a,r5
      000082 F0               [24]  796 	movx	@dptr,a
                                    797 ;	assignBit
      000083 C2 B4            [12]  798 	clr	_P3_4
                                    799 ;	ecen4330_lcd_v3.c:103: write8Reg(lo);
                                    800 ;	assignBit
      000085 C2 B5            [12]  801 	clr	_P3_5
                                    802 ;	assignBit
      000087 D2 B4            [12]  803 	setb	_P3_4
      000089 85*02 82         [24]  804 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  805 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  806 	mov	a,r6
      000090 F0               [24]  807 	movx	@dptr,a
                                    808 ;	assignBit
      000091 C2 B4            [12]  809 	clr	_P3_4
                                    810 ;	ecen4330_lcd_v3.c:104: hi = (d) >> 8;
      000093 AF*01            [24]  811 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    812 ;	ecen4330_lcd_v3.c:105: lo = (d);
      000095 AE*00            [24]  813 	mov	r6,_writeRegister16_PARM_2
                                    814 ;	ecen4330_lcd_v3.c:106: CD = 1 ;
                                    815 ;	assignBit
      000097 D2 B5            [12]  816 	setb	_P3_5
                                    817 ;	ecen4330_lcd_v3.c:107: write8Data(hi);
                                    818 ;	assignBit
      000099 D2 B5            [12]  819 	setb	_P3_5
                                    820 ;	assignBit
      00009B D2 B4            [12]  821 	setb	_P3_4
      00009D 85*02 82         [24]  822 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  823 	mov	dph,(_lcd_address + 1)
      0000A3 EF               [12]  824 	mov	a,r7
      0000A4 F0               [24]  825 	movx	@dptr,a
                                    826 ;	assignBit
      0000A5 C2 B4            [12]  827 	clr	_P3_4
                                    828 ;	ecen4330_lcd_v3.c:108: write8Data(lo);
                                    829 ;	assignBit
      0000A7 D2 B5            [12]  830 	setb	_P3_5
                                    831 ;	assignBit
      0000A9 D2 B4            [12]  832 	setb	_P3_4
      0000AB 85*02 82         [24]  833 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  834 	mov	dph,(_lcd_address + 1)
      0000B1 EE               [12]  835 	mov	a,r6
      0000B2 F0               [24]  836 	movx	@dptr,a
                                    837 ;	assignBit
      0000B3 C2 B4            [12]  838 	clr	_P3_4
                                    839 ;	ecen4330_lcd_v3.c:109: }
      0000B5 22               [24]  840 	ret
                                    841 ;------------------------------------------------------------
                                    842 ;Allocation info for local variables in function 'setCursor'
                                    843 ;------------------------------------------------------------
                                    844 ;y                         Allocated with name '_setCursor_PARM_2'
                                    845 ;x                         Allocated to registers 
                                    846 ;------------------------------------------------------------
                                    847 ;	ecen4330_lcd_v3.c:117: void setCursor (uint16_t x, uint16_t y) {
                                    848 ;	-----------------------------------------
                                    849 ;	 function setCursor
                                    850 ;	-----------------------------------------
      0000B6                        851 _setCursor:
      0000B6 85 82*0C         [24]  852 	mov	_cursor_x,dpl
      0000B9 85 83*0D         [24]  853 	mov	(_cursor_x + 1),dph
                                    854 ;	ecen4330_lcd_v3.c:119: cursor_y = y;
      0000BC 85*00*0E         [24]  855 	mov	_cursor_y,_setCursor_PARM_2
      0000BF 85*01*0F         [24]  856 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    857 ;	ecen4330_lcd_v3.c:120: }
      0000C2 22               [24]  858 	ret
                                    859 ;------------------------------------------------------------
                                    860 ;Allocation info for local variables in function 'setTextColor'
                                    861 ;------------------------------------------------------------
                                    862 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    863 ;x                         Allocated to registers 
                                    864 ;------------------------------------------------------------
                                    865 ;	ecen4330_lcd_v3.c:127: void setTextColor (uint16_t x, uint16_t y) {
                                    866 ;	-----------------------------------------
                                    867 ;	 function setTextColor
                                    868 ;	-----------------------------------------
      0000C3                        869 _setTextColor:
      0000C3 85 82*12         [24]  870 	mov	_textcolor,dpl
      0000C6 85 83*13         [24]  871 	mov	(_textcolor + 1),dph
                                    872 ;	ecen4330_lcd_v3.c:129: textbgcolor = y;
      0000C9 85*00*14         [24]  873 	mov	_textbgcolor,_setTextColor_PARM_2
      0000CC 85*01*15         [24]  874 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    875 ;	ecen4330_lcd_v3.c:130: }
      0000CF 22               [24]  876 	ret
                                    877 ;------------------------------------------------------------
                                    878 ;Allocation info for local variables in function 'setTextSize'
                                    879 ;------------------------------------------------------------
                                    880 ;s                         Allocated to registers r7 
                                    881 ;------------------------------------------------------------
                                    882 ;	ecen4330_lcd_v3.c:137: void setTextSize (uint8_t s) {
                                    883 ;	-----------------------------------------
                                    884 ;	 function setTextSize
                                    885 ;	-----------------------------------------
      0000D0                        886 _setTextSize:
                                    887 ;	ecen4330_lcd_v3.c:138: if (s > 8) return;
      0000D0 E5 82            [12]  888 	mov	a,dpl
      0000D2 FF               [12]  889 	mov	r7,a
      0000D3 24 F7            [12]  890 	add	a,#0xff - 0x08
      0000D5 50 01            [24]  891 	jnc	00102$
      0000D7 22               [24]  892 	ret
      0000D8                        893 00102$:
                                    894 ;	ecen4330_lcd_v3.c:139: textsize = (s>0) ? s : 1 ;
      0000D8 EF               [12]  895 	mov	a,r7
      0000D9 60 06            [24]  896 	jz	00105$
      0000DB 8F 06            [24]  897 	mov	ar6,r7
      0000DD 7F 00            [12]  898 	mov	r7,#0x00
      0000DF 80 04            [24]  899 	sjmp	00106$
      0000E1                        900 00105$:
      0000E1 7E 01            [12]  901 	mov	r6,#0x01
      0000E3 7F 00            [12]  902 	mov	r7,#0x00
      0000E5                        903 00106$:
      0000E5 8E*10            [24]  904 	mov	_textsize,r6
                                    905 ;	ecen4330_lcd_v3.c:140: }
      0000E7 22               [24]  906 	ret
                                    907 ;------------------------------------------------------------
                                    908 ;Allocation info for local variables in function 'setRotation'
                                    909 ;------------------------------------------------------------
                                    910 ;flag                      Allocated to registers r7 
                                    911 ;------------------------------------------------------------
                                    912 ;	ecen4330_lcd_v3.c:152: void setRotation (uint8_t flag) {
                                    913 ;	-----------------------------------------
                                    914 ;	 function setRotation
                                    915 ;	-----------------------------------------
      0000E8                        916 _setRotation:
                                    917 ;	ecen4330_lcd_v3.c:153: switch(flag) {
      0000E8 E5 82            [12]  918 	mov	a,dpl
      0000EA FF               [12]  919 	mov	r7,a
      0000EB 24 FC            [12]  920 	add	a,#0xff - 0x03
      0000ED 40 6A            [24]  921 	jc	00105$
      0000EF EF               [12]  922 	mov	a,r7
      0000F0 2F               [12]  923 	add	a,r7
                                    924 ;	ecen4330_lcd_v3.c:154: case 0:
      0000F1 90r00rF5         [24]  925 	mov	dptr,#00115$
      0000F4 73               [24]  926 	jmp	@a+dptr
      0000F5                        927 00115$:
      0000F5 80 06            [24]  928 	sjmp	00101$
      0000F7 80 1B            [24]  929 	sjmp	00102$
      0000F9 80 30            [24]  930 	sjmp	00103$
      0000FB 80 45            [24]  931 	sjmp	00104$
      0000FD                        932 00101$:
                                    933 ;	ecen4330_lcd_v3.c:155: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000FD 7F 48            [12]  934 	mov	r7,#0x48
                                    935 ;	ecen4330_lcd_v3.c:156: _width = TFTWIDTH;
      0000FF 90r00r00         [24]  936 	mov	dptr,#__width
      000102 74 F0            [12]  937 	mov	a,#0xf0
      000104 F0               [24]  938 	movx	@dptr,a
      000105 E4               [12]  939 	clr	a
      000106 A3               [24]  940 	inc	dptr
      000107 F0               [24]  941 	movx	@dptr,a
                                    942 ;	ecen4330_lcd_v3.c:157: _height = TFTHEIGHT;
      000108 90r00r02         [24]  943 	mov	dptr,#__height
      00010B 74 40            [12]  944 	mov	a,#0x40
      00010D F0               [24]  945 	movx	@dptr,a
      00010E 74 01            [12]  946 	mov	a,#0x01
      000110 A3               [24]  947 	inc	dptr
      000111 F0               [24]  948 	movx	@dptr,a
                                    949 ;	ecen4330_lcd_v3.c:158: break;
                                    950 ;	ecen4330_lcd_v3.c:159: case 1:
      000112 80 5A            [24]  951 	sjmp	00106$
      000114                        952 00102$:
                                    953 ;	ecen4330_lcd_v3.c:160: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000114 7F 28            [12]  954 	mov	r7,#0x28
                                    955 ;	ecen4330_lcd_v3.c:161: _width = TFTHEIGHT;
      000116 90r00r00         [24]  956 	mov	dptr,#__width
      000119 74 40            [12]  957 	mov	a,#0x40
      00011B F0               [24]  958 	movx	@dptr,a
      00011C 74 01            [12]  959 	mov	a,#0x01
      00011E A3               [24]  960 	inc	dptr
      00011F F0               [24]  961 	movx	@dptr,a
                                    962 ;	ecen4330_lcd_v3.c:162: _height = TFTWIDTH;
      000120 90r00r02         [24]  963 	mov	dptr,#__height
      000123 74 F0            [12]  964 	mov	a,#0xf0
      000125 F0               [24]  965 	movx	@dptr,a
      000126 E4               [12]  966 	clr	a
      000127 A3               [24]  967 	inc	dptr
      000128 F0               [24]  968 	movx	@dptr,a
                                    969 ;	ecen4330_lcd_v3.c:163: break;
                                    970 ;	ecen4330_lcd_v3.c:164: case 2:
      000129 80 43            [24]  971 	sjmp	00106$
      00012B                        972 00103$:
                                    973 ;	ecen4330_lcd_v3.c:165: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00012B 7F 88            [12]  974 	mov	r7,#0x88
                                    975 ;	ecen4330_lcd_v3.c:166: _width = TFTWIDTH;
      00012D 90r00r00         [24]  976 	mov	dptr,#__width
      000130 74 F0            [12]  977 	mov	a,#0xf0
      000132 F0               [24]  978 	movx	@dptr,a
      000133 E4               [12]  979 	clr	a
      000134 A3               [24]  980 	inc	dptr
      000135 F0               [24]  981 	movx	@dptr,a
                                    982 ;	ecen4330_lcd_v3.c:167: _height = TFTHEIGHT;
      000136 90r00r02         [24]  983 	mov	dptr,#__height
      000139 74 40            [12]  984 	mov	a,#0x40
      00013B F0               [24]  985 	movx	@dptr,a
      00013C 74 01            [12]  986 	mov	a,#0x01
      00013E A3               [24]  987 	inc	dptr
      00013F F0               [24]  988 	movx	@dptr,a
                                    989 ;	ecen4330_lcd_v3.c:168: break;
                                    990 ;	ecen4330_lcd_v3.c:169: case 3:
      000140 80 2C            [24]  991 	sjmp	00106$
      000142                        992 00104$:
                                    993 ;	ecen4330_lcd_v3.c:170: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000142 7F E8            [12]  994 	mov	r7,#0xe8
                                    995 ;	ecen4330_lcd_v3.c:171: _width = TFTHEIGHT;
      000144 90r00r00         [24]  996 	mov	dptr,#__width
      000147 74 40            [12]  997 	mov	a,#0x40
      000149 F0               [24]  998 	movx	@dptr,a
      00014A 74 01            [12]  999 	mov	a,#0x01
      00014C A3               [24] 1000 	inc	dptr
      00014D F0               [24] 1001 	movx	@dptr,a
                                   1002 ;	ecen4330_lcd_v3.c:172: _height = TFTWIDTH;
      00014E 90r00r02         [24] 1003 	mov	dptr,#__height
      000151 74 F0            [12] 1004 	mov	a,#0xf0
      000153 F0               [24] 1005 	movx	@dptr,a
      000154 E4               [12] 1006 	clr	a
      000155 A3               [24] 1007 	inc	dptr
      000156 F0               [24] 1008 	movx	@dptr,a
                                   1009 ;	ecen4330_lcd_v3.c:173: break;
                                   1010 ;	ecen4330_lcd_v3.c:174: default:
      000157 80 15            [24] 1011 	sjmp	00106$
      000159                       1012 00105$:
                                   1013 ;	ecen4330_lcd_v3.c:175: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000159 7F 48            [12] 1014 	mov	r7,#0x48
                                   1015 ;	ecen4330_lcd_v3.c:176: _width = TFTWIDTH;
      00015B 90r00r00         [24] 1016 	mov	dptr,#__width
      00015E 74 F0            [12] 1017 	mov	a,#0xf0
      000160 F0               [24] 1018 	movx	@dptr,a
      000161 E4               [12] 1019 	clr	a
      000162 A3               [24] 1020 	inc	dptr
      000163 F0               [24] 1021 	movx	@dptr,a
                                   1022 ;	ecen4330_lcd_v3.c:177: _height = TFTHEIGHT;
      000164 90r00r02         [24] 1023 	mov	dptr,#__height
      000167 74 40            [12] 1024 	mov	a,#0x40
      000169 F0               [24] 1025 	movx	@dptr,a
      00016A 74 01            [12] 1026 	mov	a,#0x01
      00016C A3               [24] 1027 	inc	dptr
      00016D F0               [24] 1028 	movx	@dptr,a
                                   1029 ;	ecen4330_lcd_v3.c:179: }
      00016E                       1030 00106$:
                                   1031 ;	ecen4330_lcd_v3.c:180: writeRegister8(ILI9341_MEMCONTROL, flag);
      00016E 8F*00            [24] 1032 	mov	_writeRegister8_PARM_2,r7
      000170 75 82 36         [24] 1033 	mov	dpl,#0x36
                                   1034 ;	ecen4330_lcd_v3.c:181: }
      000173 02r00r51         [24] 1035 	ljmp	_writeRegister8
                                   1036 ;------------------------------------------------------------
                                   1037 ;Allocation info for local variables in function 'setAddress'
                                   1038 ;------------------------------------------------------------
                                   1039 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1040 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1041 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1042 ;x1                        Allocated to registers r6 r7 
                                   1043 ;------------------------------------------------------------
                                   1044 ;	ecen4330_lcd_v3.c:183: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                   1045 ;	-----------------------------------------
                                   1046 ;	 function setAddress
                                   1047 ;	-----------------------------------------
      000176                       1048 _setAddress:
      000176 AE 82            [24] 1049 	mov	r6,dpl
      000178 AF 83            [24] 1050 	mov	r7,dph
                                   1051 ;	ecen4330_lcd_v3.c:184: write8Reg(0x2A);
                                   1052 ;	assignBit
      00017A C2 B5            [12] 1053 	clr	_P3_5
                                   1054 ;	assignBit
      00017C D2 B4            [12] 1055 	setb	_P3_4
      00017E 85*02 82         [24] 1056 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1057 	mov	dph,(_lcd_address + 1)
      000184 74 2A            [12] 1058 	mov	a,#0x2a
      000186 F0               [24] 1059 	movx	@dptr,a
                                   1060 ;	assignBit
      000187 C2 B4            [12] 1061 	clr	_P3_4
                                   1062 ;	ecen4330_lcd_v3.c:185: write8Data(x1 >> 8);
                                   1063 ;	assignBit
      000189 D2 B5            [12] 1064 	setb	_P3_5
                                   1065 ;	assignBit
      00018B D2 B4            [12] 1066 	setb	_P3_4
      00018D 85*02 82         [24] 1067 	mov	dpl,_lcd_address
      000190 85*03 83         [24] 1068 	mov	dph,(_lcd_address + 1)
      000193 8F 05            [24] 1069 	mov	ar5,r7
      000195 ED               [12] 1070 	mov	a,r5
      000196 F0               [24] 1071 	movx	@dptr,a
                                   1072 ;	assignBit
      000197 C2 B4            [12] 1073 	clr	_P3_4
                                   1074 ;	ecen4330_lcd_v3.c:186: write8Data(x1);
                                   1075 ;	assignBit
      000199 D2 B5            [12] 1076 	setb	_P3_5
                                   1077 ;	assignBit
      00019B D2 B4            [12] 1078 	setb	_P3_4
      00019D 85*02 82         [24] 1079 	mov	dpl,_lcd_address
      0001A0 85*03 83         [24] 1080 	mov	dph,(_lcd_address + 1)
      0001A3 EE               [12] 1081 	mov	a,r6
      0001A4 F0               [24] 1082 	movx	@dptr,a
                                   1083 ;	assignBit
      0001A5 C2 B4            [12] 1084 	clr	_P3_4
                                   1085 ;	ecen4330_lcd_v3.c:187: write8Data(x2 >> 8);
                                   1086 ;	assignBit
      0001A7 D2 B5            [12] 1087 	setb	_P3_5
                                   1088 ;	assignBit
      0001A9 D2 B4            [12] 1089 	setb	_P3_4
      0001AB 85*02 82         [24] 1090 	mov	dpl,_lcd_address
      0001AE 85*03 83         [24] 1091 	mov	dph,(_lcd_address + 1)
      0001B1 E5*03            [12] 1092 	mov	a,(_setAddress_PARM_3 + 1)
      0001B3 F0               [24] 1093 	movx	@dptr,a
                                   1094 ;	assignBit
      0001B4 C2 B4            [12] 1095 	clr	_P3_4
                                   1096 ;	ecen4330_lcd_v3.c:188: write8Data(x2);
                                   1097 ;	assignBit
      0001B6 D2 B5            [12] 1098 	setb	_P3_5
                                   1099 ;	assignBit
      0001B8 D2 B4            [12] 1100 	setb	_P3_4
      0001BA 85*02 82         [24] 1101 	mov	dpl,_lcd_address
      0001BD 85*03 83         [24] 1102 	mov	dph,(_lcd_address + 1)
      0001C0 E5*02            [12] 1103 	mov	a,_setAddress_PARM_3
      0001C2 F0               [24] 1104 	movx	@dptr,a
                                   1105 ;	assignBit
      0001C3 C2 B4            [12] 1106 	clr	_P3_4
                                   1107 ;	ecen4330_lcd_v3.c:190: write8Reg(0x2B);
                                   1108 ;	assignBit
      0001C5 C2 B5            [12] 1109 	clr	_P3_5
                                   1110 ;	assignBit
      0001C7 D2 B4            [12] 1111 	setb	_P3_4
      0001C9 85*02 82         [24] 1112 	mov	dpl,_lcd_address
      0001CC 85*03 83         [24] 1113 	mov	dph,(_lcd_address + 1)
      0001CF 74 2B            [12] 1114 	mov	a,#0x2b
      0001D1 F0               [24] 1115 	movx	@dptr,a
                                   1116 ;	assignBit
      0001D2 C2 B4            [12] 1117 	clr	_P3_4
                                   1118 ;	ecen4330_lcd_v3.c:191: write8Data(y1 >> 8);
                                   1119 ;	assignBit
      0001D4 D2 B5            [12] 1120 	setb	_P3_5
                                   1121 ;	assignBit
      0001D6 D2 B4            [12] 1122 	setb	_P3_4
      0001D8 85*02 82         [24] 1123 	mov	dpl,_lcd_address
      0001DB 85*03 83         [24] 1124 	mov	dph,(_lcd_address + 1)
      0001DE E5*01            [12] 1125 	mov	a,(_setAddress_PARM_2 + 1)
      0001E0 F0               [24] 1126 	movx	@dptr,a
                                   1127 ;	assignBit
      0001E1 C2 B4            [12] 1128 	clr	_P3_4
                                   1129 ;	ecen4330_lcd_v3.c:192: write8Data(y1);
                                   1130 ;	assignBit
      0001E3 D2 B5            [12] 1131 	setb	_P3_5
                                   1132 ;	assignBit
      0001E5 D2 B4            [12] 1133 	setb	_P3_4
      0001E7 85*02 82         [24] 1134 	mov	dpl,_lcd_address
      0001EA 85*03 83         [24] 1135 	mov	dph,(_lcd_address + 1)
      0001ED E5*00            [12] 1136 	mov	a,_setAddress_PARM_2
      0001EF F0               [24] 1137 	movx	@dptr,a
                                   1138 ;	assignBit
      0001F0 C2 B4            [12] 1139 	clr	_P3_4
                                   1140 ;	ecen4330_lcd_v3.c:193: write8Data(y2 >> 8);
                                   1141 ;	assignBit
      0001F2 D2 B5            [12] 1142 	setb	_P3_5
                                   1143 ;	assignBit
      0001F4 D2 B4            [12] 1144 	setb	_P3_4
      0001F6 85*02 82         [24] 1145 	mov	dpl,_lcd_address
      0001F9 85*03 83         [24] 1146 	mov	dph,(_lcd_address + 1)
      0001FC E5*05            [12] 1147 	mov	a,(_setAddress_PARM_4 + 1)
      0001FE F0               [24] 1148 	movx	@dptr,a
                                   1149 ;	assignBit
      0001FF C2 B4            [12] 1150 	clr	_P3_4
                                   1151 ;	ecen4330_lcd_v3.c:194: write8Data(y2);
                                   1152 ;	assignBit
      000201 D2 B5            [12] 1153 	setb	_P3_5
                                   1154 ;	assignBit
      000203 D2 B4            [12] 1155 	setb	_P3_4
      000205 85*02 82         [24] 1156 	mov	dpl,_lcd_address
      000208 85*03 83         [24] 1157 	mov	dph,(_lcd_address + 1)
      00020B E5*04            [12] 1158 	mov	a,_setAddress_PARM_4
      00020D F0               [24] 1159 	movx	@dptr,a
                                   1160 ;	assignBit
      00020E C2 B4            [12] 1161 	clr	_P3_4
                                   1162 ;	ecen4330_lcd_v3.c:195: }
      000210 22               [24] 1163 	ret
                                   1164 ;------------------------------------------------------------
                                   1165 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1166 ;------------------------------------------------------------
                                   1167 ;	ecen4330_lcd_v3.c:201: void TFT_LCD_INIT (void) {
                                   1168 ;	-----------------------------------------
                                   1169 ;	 function TFT_LCD_INIT
                                   1170 ;	-----------------------------------------
      000211                       1171 _TFT_LCD_INIT:
                                   1172 ;	ecen4330_lcd_v3.c:202: _width = TFTWIDTH;
      000211 90r00r00         [24] 1173 	mov	dptr,#__width
      000214 74 F0            [12] 1174 	mov	a,#0xf0
      000216 F0               [24] 1175 	movx	@dptr,a
      000217 E4               [12] 1176 	clr	a
      000218 A3               [24] 1177 	inc	dptr
      000219 F0               [24] 1178 	movx	@dptr,a
                                   1179 ;	ecen4330_lcd_v3.c:203: _height = TFTHEIGHT;
      00021A 90r00r02         [24] 1180 	mov	dptr,#__height
      00021D 74 40            [12] 1181 	mov	a,#0x40
      00021F F0               [24] 1182 	movx	@dptr,a
      000220 74 01            [12] 1183 	mov	a,#0x01
      000222 A3               [24] 1184 	inc	dptr
      000223 F0               [24] 1185 	movx	@dptr,a
                                   1186 ;	ecen4330_lcd_v3.c:205: IOM = 0;
                                   1187 ;	assignBit
      000224 C2 B4            [12] 1188 	clr	_P3_4
                                   1189 ;	ecen4330_lcd_v3.c:206: CD = 1;
                                   1190 ;	assignBit
      000226 D2 B5            [12] 1191 	setb	_P3_5
                                   1192 ;	ecen4330_lcd_v3.c:208: write8Reg(0x00);
                                   1193 ;	assignBit
      000228 C2 B5            [12] 1194 	clr	_P3_5
                                   1195 ;	assignBit
      00022A D2 B4            [12] 1196 	setb	_P3_4
      00022C 85*02 82         [24] 1197 	mov	dpl,_lcd_address
      00022F 85*03 83         [24] 1198 	mov	dph,(_lcd_address + 1)
      000232 E4               [12] 1199 	clr	a
      000233 F0               [24] 1200 	movx	@dptr,a
                                   1201 ;	assignBit
      000234 C2 B4            [12] 1202 	clr	_P3_4
                                   1203 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1204 ;	assignBit
      000236 D2 B5            [12] 1205 	setb	_P3_5
                                   1206 ;	assignBit
      000238 D2 B4            [12] 1207 	setb	_P3_4
      00023A 85*02 82         [24] 1208 	mov	dpl,_lcd_address
      00023D 85*03 83         [24] 1209 	mov	dph,(_lcd_address + 1)
      000240 E4               [12] 1210 	clr	a
      000241 F0               [24] 1211 	movx	@dptr,a
                                   1212 ;	assignBit
      000242 C2 B4            [12] 1213 	clr	_P3_4
                                   1214 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1215 ;	assignBit
      000244 D2 B5            [12] 1216 	setb	_P3_5
                                   1217 ;	assignBit
      000246 D2 B4            [12] 1218 	setb	_P3_4
      000248 85*02 82         [24] 1219 	mov	dpl,_lcd_address
      00024B 85*03 83         [24] 1220 	mov	dph,(_lcd_address + 1)
      00024E E4               [12] 1221 	clr	a
      00024F F0               [24] 1222 	movx	@dptr,a
                                   1223 ;	assignBit
      000250 C2 B4            [12] 1224 	clr	_P3_4
                                   1225 ;	ecen4330_lcd_v3.c:211: write8Data(0x00);
                                   1226 ;	assignBit
      000252 D2 B5            [12] 1227 	setb	_P3_5
                                   1228 ;	assignBit
      000254 D2 B4            [12] 1229 	setb	_P3_4
      000256 85*02 82         [24] 1230 	mov	dpl,_lcd_address
      000259 85*03 83         [24] 1231 	mov	dph,(_lcd_address + 1)
      00025C E4               [12] 1232 	clr	a
      00025D F0               [24] 1233 	movx	@dptr,a
                                   1234 ;	assignBit
      00025E C2 B4            [12] 1235 	clr	_P3_4
                                   1236 ;	ecen4330_lcd_v3.c:212: delay(200);
      000260 90 00 C8         [24] 1237 	mov	dptr,#0x00c8
      000263 12r00r21         [24] 1238 	lcall	_delay
                                   1239 ;	ecen4330_lcd_v3.c:214: writeRegister8(ILI9341_SOFTRESET, 0);
      000266 75*00 00         [24] 1240 	mov	_writeRegister8_PARM_2,#0x00
      000269 75 82 01         [24] 1241 	mov	dpl,#0x01
      00026C 12r00r51         [24] 1242 	lcall	_writeRegister8
                                   1243 ;	ecen4330_lcd_v3.c:215: delay(50);
      00026F 90 00 32         [24] 1244 	mov	dptr,#0x0032
      000272 12r00r21         [24] 1245 	lcall	_delay
                                   1246 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000275 75*00 00         [24] 1247 	mov	_writeRegister8_PARM_2,#0x00
      000278 75 82 28         [24] 1248 	mov	dpl,#0x28
      00027B 12r00r51         [24] 1249 	lcall	_writeRegister8
                                   1250 ;	ecen4330_lcd_v3.c:217: delay(10);
      00027E 90 00 0A         [24] 1251 	mov	dptr,#0x000a
      000281 12r00r21         [24] 1252 	lcall	_delay
                                   1253 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000284 75*00 23         [24] 1254 	mov	_writeRegister8_PARM_2,#0x23
      000287 75 82 C0         [24] 1255 	mov	dpl,#0xc0
      00028A 12r00r51         [24] 1256 	lcall	_writeRegister8
                                   1257 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00028D 75*00 11         [24] 1258 	mov	_writeRegister8_PARM_2,#0x11
      000290 75 82 C1         [24] 1259 	mov	dpl,#0xc1
      000293 12r00r51         [24] 1260 	lcall	_writeRegister8
                                   1261 ;	ecen4330_lcd_v3.c:221: write8Reg(ILI9341_VCOMCONTROL1);
                                   1262 ;	assignBit
      000296 C2 B5            [12] 1263 	clr	_P3_5
                                   1264 ;	assignBit
      000298 D2 B4            [12] 1265 	setb	_P3_4
      00029A 85*02 82         [24] 1266 	mov	dpl,_lcd_address
      00029D 85*03 83         [24] 1267 	mov	dph,(_lcd_address + 1)
      0002A0 74 C5            [12] 1268 	mov	a,#0xc5
      0002A2 F0               [24] 1269 	movx	@dptr,a
                                   1270 ;	assignBit
      0002A3 C2 B4            [12] 1271 	clr	_P3_4
                                   1272 ;	ecen4330_lcd_v3.c:222: write8Data(0x3d);
                                   1273 ;	assignBit
      0002A5 D2 B5            [12] 1274 	setb	_P3_5
                                   1275 ;	assignBit
      0002A7 D2 B4            [12] 1276 	setb	_P3_4
      0002A9 85*02 82         [24] 1277 	mov	dpl,_lcd_address
      0002AC 85*03 83         [24] 1278 	mov	dph,(_lcd_address + 1)
      0002AF 74 3D            [12] 1279 	mov	a,#0x3d
      0002B1 F0               [24] 1280 	movx	@dptr,a
                                   1281 ;	assignBit
      0002B2 C2 B4            [12] 1282 	clr	_P3_4
                                   1283 ;	ecen4330_lcd_v3.c:223: write8Data(0x30);
                                   1284 ;	assignBit
      0002B4 D2 B5            [12] 1285 	setb	_P3_5
                                   1286 ;	assignBit
      0002B6 D2 B4            [12] 1287 	setb	_P3_4
      0002B8 85*02 82         [24] 1288 	mov	dpl,_lcd_address
      0002BB 85*03 83         [24] 1289 	mov	dph,(_lcd_address + 1)
      0002BE 74 30            [12] 1290 	mov	a,#0x30
      0002C0 F0               [24] 1291 	movx	@dptr,a
                                   1292 ;	assignBit
      0002C1 C2 B4            [12] 1293 	clr	_P3_4
                                   1294 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002C3 75*00 AA         [24] 1295 	mov	_writeRegister8_PARM_2,#0xaa
      0002C6 75 82 C7         [24] 1296 	mov	dpl,#0xc7
      0002C9 12r00r51         [24] 1297 	lcall	_writeRegister8
                                   1298 ;	ecen4330_lcd_v3.c:225: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002CC 75*00 88         [24] 1299 	mov	_writeRegister8_PARM_2,#0x88
      0002CF 75 82 36         [24] 1300 	mov	dpl,#0x36
      0002D2 12r00r51         [24] 1301 	lcall	_writeRegister8
                                   1302 ;	ecen4330_lcd_v3.c:226: write8Reg(ILI9341_PIXELFORMAT);
                                   1303 ;	assignBit
      0002D5 C2 B5            [12] 1304 	clr	_P3_5
                                   1305 ;	assignBit
      0002D7 D2 B4            [12] 1306 	setb	_P3_4
      0002D9 85*02 82         [24] 1307 	mov	dpl,_lcd_address
      0002DC 85*03 83         [24] 1308 	mov	dph,(_lcd_address + 1)
      0002DF 74 3A            [12] 1309 	mov	a,#0x3a
      0002E1 F0               [24] 1310 	movx	@dptr,a
                                   1311 ;	assignBit
      0002E2 C2 B4            [12] 1312 	clr	_P3_4
                                   1313 ;	ecen4330_lcd_v3.c:227: write8Data(0x55);write8Data(0x00);
                                   1314 ;	assignBit
      0002E4 D2 B5            [12] 1315 	setb	_P3_5
                                   1316 ;	assignBit
      0002E6 D2 B4            [12] 1317 	setb	_P3_4
      0002E8 85*02 82         [24] 1318 	mov	dpl,_lcd_address
      0002EB 85*03 83         [24] 1319 	mov	dph,(_lcd_address + 1)
      0002EE 74 55            [12] 1320 	mov	a,#0x55
      0002F0 F0               [24] 1321 	movx	@dptr,a
                                   1322 ;	assignBit
      0002F1 C2 B4            [12] 1323 	clr	_P3_4
                                   1324 ;	assignBit
      0002F3 D2 B5            [12] 1325 	setb	_P3_5
                                   1326 ;	assignBit
      0002F5 D2 B4            [12] 1327 	setb	_P3_4
      0002F7 85*02 82         [24] 1328 	mov	dpl,_lcd_address
      0002FA 85*03 83         [24] 1329 	mov	dph,(_lcd_address + 1)
      0002FD E4               [12] 1330 	clr	a
      0002FE F0               [24] 1331 	movx	@dptr,a
                                   1332 ;	assignBit
      0002FF C2 B4            [12] 1333 	clr	_P3_4
                                   1334 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000301 75*00 1B         [24] 1335 	mov	_writeRegister16_PARM_2,#0x1b
      000304 75*01 00         [24] 1336 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000307 90 00 B1         [24] 1337 	mov	dptr,#0x00b1
      00030A 12r00r71         [24] 1338 	lcall	_writeRegister16
                                   1339 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00030D 75*00 07         [24] 1340 	mov	_writeRegister8_PARM_2,#0x07
      000310 75 82 B7         [24] 1341 	mov	dpl,#0xb7
      000313 12r00r51         [24] 1342 	lcall	_writeRegister8
                                   1343 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      000316 75*00 00         [24] 1344 	mov	_writeRegister8_PARM_2,#0x00
      000319 75 82 11         [24] 1345 	mov	dpl,#0x11
      00031C 12r00r51         [24] 1346 	lcall	_writeRegister8
                                   1347 ;	ecen4330_lcd_v3.c:233: delay(150);
      00031F 90 00 96         [24] 1348 	mov	dptr,#0x0096
      000322 12r00r21         [24] 1349 	lcall	_delay
                                   1350 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      000325 75*00 00         [24] 1351 	mov	_writeRegister8_PARM_2,#0x00
      000328 75 82 29         [24] 1352 	mov	dpl,#0x29
      00032B 12r00r51         [24] 1353 	lcall	_writeRegister8
                                   1354 ;	ecen4330_lcd_v3.c:235: delay(500);
      00032E 90 01 F4         [24] 1355 	mov	dptr,#0x01f4
      000331 12r00r21         [24] 1356 	lcall	_delay
                                   1357 ;	ecen4330_lcd_v3.c:236: setAddress(0,0,_width-1,_height-1);
      000334 90r00r00         [24] 1358 	mov	dptr,#__width
      000337 E0               [24] 1359 	movx	a,@dptr
      000338 FE               [12] 1360 	mov	r6,a
      000339 A3               [24] 1361 	inc	dptr
      00033A E0               [24] 1362 	movx	a,@dptr
      00033B FF               [12] 1363 	mov	r7,a
      00033C 1E               [12] 1364 	dec	r6
      00033D BE FF 01         [24] 1365 	cjne	r6,#0xff,00103$
      000340 1F               [12] 1366 	dec	r7
      000341                       1367 00103$:
      000341 8E*02            [24] 1368 	mov	_setAddress_PARM_3,r6
      000343 8F*03            [24] 1369 	mov	(_setAddress_PARM_3 + 1),r7
      000345 90r00r02         [24] 1370 	mov	dptr,#__height
      000348 E0               [24] 1371 	movx	a,@dptr
      000349 FE               [12] 1372 	mov	r6,a
      00034A A3               [24] 1373 	inc	dptr
      00034B E0               [24] 1374 	movx	a,@dptr
      00034C FF               [12] 1375 	mov	r7,a
      00034D 1E               [12] 1376 	dec	r6
      00034E BE FF 01         [24] 1377 	cjne	r6,#0xff,00104$
      000351 1F               [12] 1378 	dec	r7
      000352                       1379 00104$:
      000352 8E*04            [24] 1380 	mov	_setAddress_PARM_4,r6
      000354 8F*05            [24] 1381 	mov	(_setAddress_PARM_4 + 1),r7
      000356 E4               [12] 1382 	clr	a
      000357 F5*00            [12] 1383 	mov	_setAddress_PARM_2,a
      000359 F5*01            [12] 1384 	mov	(_setAddress_PARM_2 + 1),a
      00035B 90 00 00         [24] 1385 	mov	dptr,#0x0000
                                   1386 ;	ecen4330_lcd_v3.c:237: }
      00035E 02r01r76         [24] 1387 	ljmp	_setAddress
                                   1388 ;------------------------------------------------------------
                                   1389 ;Allocation info for local variables in function 'drawPixel'
                                   1390 ;------------------------------------------------------------
                                   1391 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1392 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1393 ;x3                        Allocated to registers r6 r7 
                                   1394 ;------------------------------------------------------------
                                   1395 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1396 ;	-----------------------------------------
                                   1397 ;	 function drawPixel
                                   1398 ;	-----------------------------------------
      000361                       1399 _drawPixel:
      000361 AE 82            [24] 1400 	mov	r6,dpl
      000363 AF 83            [24] 1401 	mov	r7,dph
                                   1402 ;	ecen4330_lcd_v3.c:248: setAddress(x3,y3,x3+1,y3+1);
      000365 8E 04            [24] 1403 	mov	ar4,r6
      000367 8F 05            [24] 1404 	mov	ar5,r7
      000369 0C               [12] 1405 	inc	r4
      00036A BC 00 01         [24] 1406 	cjne	r4,#0x00,00103$
      00036D 0D               [12] 1407 	inc	r5
      00036E                       1408 00103$:
      00036E 8C*02            [24] 1409 	mov	_setAddress_PARM_3,r4
      000370 8D*03            [24] 1410 	mov	(_setAddress_PARM_3 + 1),r5
      000372 AC*16            [24] 1411 	mov	r4,_drawPixel_PARM_2
      000374 AD*17            [24] 1412 	mov	r5,(_drawPixel_PARM_2 + 1)
      000376 0C               [12] 1413 	inc	r4
      000377 BC 00 01         [24] 1414 	cjne	r4,#0x00,00104$
      00037A 0D               [12] 1415 	inc	r5
      00037B                       1416 00104$:
      00037B 8C*04            [24] 1417 	mov	_setAddress_PARM_4,r4
      00037D 8D*05            [24] 1418 	mov	(_setAddress_PARM_4 + 1),r5
      00037F 85*16*00         [24] 1419 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000382 85*17*01         [24] 1420 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000385 8E 82            [24] 1421 	mov	dpl,r6
      000387 8F 83            [24] 1422 	mov	dph,r7
      000389 12r01r76         [24] 1423 	lcall	_setAddress
                                   1424 ;	ecen4330_lcd_v3.c:250: CD=0; write8(0x2C);
                                   1425 ;	assignBit
      00038C C2 B5            [12] 1426 	clr	_P3_5
                                   1427 ;	assignBit
      00038E D2 B4            [12] 1428 	setb	_P3_4
      000390 85*02 82         [24] 1429 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1430 	mov	dph,(_lcd_address + 1)
      000396 74 2C            [12] 1431 	mov	a,#0x2c
      000398 F0               [24] 1432 	movx	@dptr,a
                                   1433 ;	assignBit
      000399 C2 B4            [12] 1434 	clr	_P3_4
                                   1435 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1436 ;	assignBit
      00039B D2 B5            [12] 1437 	setb	_P3_5
                                   1438 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1439 ;	assignBit
      00039D D2 B4            [12] 1440 	setb	_P3_4
      00039F 85*02 82         [24] 1441 	mov	dpl,_lcd_address
      0003A2 85*03 83         [24] 1442 	mov	dph,(_lcd_address + 1)
      0003A5 E5*19            [12] 1443 	mov	a,(_drawPixel_PARM_3 + 1)
      0003A7 F0               [24] 1444 	movx	@dptr,a
                                   1445 ;	assignBit
      0003A8 C2 B4            [12] 1446 	clr	_P3_4
                                   1447 ;	assignBit
      0003AA D2 B4            [12] 1448 	setb	_P3_4
      0003AC 85*02 82         [24] 1449 	mov	dpl,_lcd_address
      0003AF 85*03 83         [24] 1450 	mov	dph,(_lcd_address + 1)
      0003B2 E5*18            [12] 1451 	mov	a,_drawPixel_PARM_3
      0003B4 F0               [24] 1452 	movx	@dptr,a
                                   1453 ;	assignBit
      0003B5 C2 B4            [12] 1454 	clr	_P3_4
                                   1455 ;	ecen4330_lcd_v3.c:254: }
      0003B7 22               [24] 1456 	ret
                                   1457 ;------------------------------------------------------------
                                   1458 ;Allocation info for local variables in function 'drawCircle'
                                   1459 ;------------------------------------------------------------
                                   1460 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1461 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1462 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1463 ;x0                        Allocated with name '_drawCircle_x0_65536_105'
                                   1464 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1465 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1466 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1467 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1468 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1469 ;f                         Allocated with name '_drawCircle_f_65536_106'
                                   1470 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_106'
                                   1471 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_106'
                                   1472 ;x                         Allocated with name '_drawCircle_x_65536_106'
                                   1473 ;y                         Allocated with name '_drawCircle_y_65536_106'
                                   1474 ;------------------------------------------------------------
                                   1475 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1476 ;	-----------------------------------------
                                   1477 ;	 function drawCircle
                                   1478 ;	-----------------------------------------
      0003B8                       1479 _drawCircle:
      0003B8 85 82*20         [24] 1480 	mov	_drawCircle_x0_65536_105,dpl
      0003BB 85 83*21         [24] 1481 	mov	(_drawCircle_x0_65536_105 + 1),dph
                                   1482 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003BE 74 01            [12] 1483 	mov	a,#0x01
      0003C0 C3               [12] 1484 	clr	c
      0003C1 95*1C            [12] 1485 	subb	a,_drawCircle_PARM_3
      0003C3 FC               [12] 1486 	mov	r4,a
      0003C4 E4               [12] 1487 	clr	a
      0003C5 95*1D            [12] 1488 	subb	a,(_drawCircle_PARM_3 + 1)
      0003C7 FD               [12] 1489 	mov	r5,a
      0003C8 90r00r04         [24] 1490 	mov	dptr,#_drawCircle_f_65536_106
      0003CB EC               [12] 1491 	mov	a,r4
      0003CC F0               [24] 1492 	movx	@dptr,a
      0003CD ED               [12] 1493 	mov	a,r5
      0003CE A3               [24] 1494 	inc	dptr
      0003CF F0               [24] 1495 	movx	@dptr,a
                                   1496 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003D0 85*1C*00         [24] 1497 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003D3 85*1D*01         [24] 1498 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003D6 90 FF FE         [24] 1499 	mov	dptr,#0xfffe
      0003D9 12r00r00         [24] 1500 	lcall	__mulint
      0003DC AC 82            [24] 1501 	mov	r4,dpl
      0003DE AD 83            [24] 1502 	mov	r5,dph
                                   1503 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      0003E0 AA*1C            [24] 1504 	mov	r2,_drawCircle_PARM_3
      0003E2 AB*1D            [24] 1505 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1506 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      0003E4 E5*1C            [12] 1507 	mov	a,_drawCircle_PARM_3
      0003E6 25*1A            [12] 1508 	add	a,_drawCircle_PARM_2
      0003E8 F5*16            [12] 1509 	mov	_drawPixel_PARM_2,a
      0003EA E5*1D            [12] 1510 	mov	a,(_drawCircle_PARM_3 + 1)
      0003EC 35*1B            [12] 1511 	addc	a,(_drawCircle_PARM_2 + 1)
      0003EE F5*17            [12] 1512 	mov	(_drawPixel_PARM_2 + 1),a
      0003F0 85*1E*18         [24] 1513 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F3 85*1F*19         [24] 1514 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F6 85*20 82         [24] 1515 	mov	dpl,_drawCircle_x0_65536_105
      0003F9 85*21 83         [24] 1516 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      0003FC C0 05            [24] 1517 	push	ar5
      0003FE C0 04            [24] 1518 	push	ar4
      000400 C0 03            [24] 1519 	push	ar3
      000402 C0 02            [24] 1520 	push	ar2
      000404 12r03r61         [24] 1521 	lcall	_drawPixel
                                   1522 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      000407 E5*1A            [12] 1523 	mov	a,_drawCircle_PARM_2
      000409 C3               [12] 1524 	clr	c
      00040A 95*1C            [12] 1525 	subb	a,_drawCircle_PARM_3
      00040C F5*16            [12] 1526 	mov	_drawPixel_PARM_2,a
      00040E E5*1B            [12] 1527 	mov	a,(_drawCircle_PARM_2 + 1)
      000410 95*1D            [12] 1528 	subb	a,(_drawCircle_PARM_3 + 1)
      000412 F5*17            [12] 1529 	mov	(_drawPixel_PARM_2 + 1),a
      000414 85*1E*18         [24] 1530 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000417 85*1F*19         [24] 1531 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041A 85*20 82         [24] 1532 	mov	dpl,_drawCircle_x0_65536_105
      00041D 85*21 83         [24] 1533 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      000420 12r03r61         [24] 1534 	lcall	_drawPixel
                                   1535 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000423 E5*1C            [12] 1536 	mov	a,_drawCircle_PARM_3
      000425 25*20            [12] 1537 	add	a,_drawCircle_x0_65536_105
      000427 F5 82            [12] 1538 	mov	dpl,a
      000429 E5*1D            [12] 1539 	mov	a,(_drawCircle_PARM_3 + 1)
      00042B 35*21            [12] 1540 	addc	a,(_drawCircle_x0_65536_105 + 1)
      00042D F5 83            [12] 1541 	mov	dph,a
      00042F 85*1A*16         [24] 1542 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000432 85*1B*17         [24] 1543 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000435 85*1E*18         [24] 1544 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000438 85*1F*19         [24] 1545 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043B 12r03r61         [24] 1546 	lcall	_drawPixel
                                   1547 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      00043E E5*20            [12] 1548 	mov	a,_drawCircle_x0_65536_105
      000440 C3               [12] 1549 	clr	c
      000441 95*1C            [12] 1550 	subb	a,_drawCircle_PARM_3
      000443 F5 82            [12] 1551 	mov	dpl,a
      000445 E5*21            [12] 1552 	mov	a,(_drawCircle_x0_65536_105 + 1)
      000447 95*1D            [12] 1553 	subb	a,(_drawCircle_PARM_3 + 1)
      000449 F5 83            [12] 1554 	mov	dph,a
      00044B 85*1A*16         [24] 1555 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00044E 85*1B*17         [24] 1556 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000451 85*1E*18         [24] 1557 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000454 85*1F*19         [24] 1558 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000457 12r03r61         [24] 1559 	lcall	_drawPixel
      00045A D0 02            [24] 1560 	pop	ar2
      00045C D0 03            [24] 1561 	pop	ar3
      00045E D0 04            [24] 1562 	pop	ar4
      000460 D0 05            [24] 1563 	pop	ar5
                                   1564 ;	ecen4330_lcd_v3.c:276: while (x<y) {
      000462 78 00            [12] 1565 	mov	r0,#0x00
      000464 79 00            [12] 1566 	mov	r1,#0x00
      000466 75*22 01         [24] 1567 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1568 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000469 89*23            [24] 1569 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      00046B                       1570 00103$:
      00046B C3               [12] 1571 	clr	c
      00046C E8               [12] 1572 	mov	a,r0
      00046D 9A               [12] 1573 	subb	a,r2
      00046E E9               [12] 1574 	mov	a,r1
      00046F 64 80            [12] 1575 	xrl	a,#0x80
      000471 8B F0            [24] 1576 	mov	b,r3
      000473 63 F0 80         [24] 1577 	xrl	b,#0x80
      000476 95 F0            [12] 1578 	subb	a,b
      000478 40 01            [24] 1579 	jc	00121$
      00047A 22               [24] 1580 	ret
      00047B                       1581 00121$:
                                   1582 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      00047B 90r00r04         [24] 1583 	mov	dptr,#_drawCircle_f_65536_106
      00047E E0               [24] 1584 	movx	a,@dptr
      00047F F5*24            [12] 1585 	mov	_drawCircle_sloc1_1_0,a
      000481 A3               [24] 1586 	inc	dptr
      000482 E0               [24] 1587 	movx	a,@dptr
      000483 F5*25            [12] 1588 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000485 20 E7 18         [24] 1589 	jb	acc.7,00102$
                                   1590 ;	ecen4330_lcd_v3.c:278: y--;
      000488 1A               [12] 1591 	dec	r2
      000489 BA FF 01         [24] 1592 	cjne	r2,#0xff,00123$
      00048C 1B               [12] 1593 	dec	r3
      00048D                       1594 00123$:
                                   1595 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      00048D 74 02            [12] 1596 	mov	a,#0x02
      00048F 2C               [12] 1597 	add	a,r4
      000490 FC               [12] 1598 	mov	r4,a
      000491 E4               [12] 1599 	clr	a
      000492 3D               [12] 1600 	addc	a,r5
      000493 FD               [12] 1601 	mov	r5,a
                                   1602 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      000494 90r00r04         [24] 1603 	mov	dptr,#_drawCircle_f_65536_106
      000497 EC               [12] 1604 	mov	a,r4
      000498 25*24            [12] 1605 	add	a,_drawCircle_sloc1_1_0
      00049A F0               [24] 1606 	movx	@dptr,a
      00049B ED               [12] 1607 	mov	a,r5
      00049C 35*25            [12] 1608 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00049E A3               [24] 1609 	inc	dptr
      00049F F0               [24] 1610 	movx	@dptr,a
      0004A0                       1611 00102$:
                                   1612 ;	ecen4330_lcd_v3.c:282: x++;
      0004A0 C0 04            [24] 1613 	push	ar4
      0004A2 C0 05            [24] 1614 	push	ar5
      0004A4 08               [12] 1615 	inc	r0
      0004A5 B8 00 01         [24] 1616 	cjne	r0,#0x00,00124$
      0004A8 09               [12] 1617 	inc	r1
      0004A9                       1618 00124$:
                                   1619 ;	ecen4330_lcd_v3.c:283: ddF_x += 2;
      0004A9 74 02            [12] 1620 	mov	a,#0x02
      0004AB 25*22            [12] 1621 	add	a,_drawCircle_sloc0_1_0
      0004AD F5*22            [12] 1622 	mov	_drawCircle_sloc0_1_0,a
      0004AF E4               [12] 1623 	clr	a
      0004B0 35*23            [12] 1624 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004B2 F5*23            [12] 1625 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1626 ;	ecen4330_lcd_v3.c:284: f += ddF_x;
      0004B4 90r00r04         [24] 1627 	mov	dptr,#_drawCircle_f_65536_106
      0004B7 E0               [24] 1628 	movx	a,@dptr
      0004B8 FE               [12] 1629 	mov	r6,a
      0004B9 A3               [24] 1630 	inc	dptr
      0004BA E0               [24] 1631 	movx	a,@dptr
      0004BB FF               [12] 1632 	mov	r7,a
      0004BC 90r00r04         [24] 1633 	mov	dptr,#_drawCircle_f_65536_106
      0004BF E5*22            [12] 1634 	mov	a,_drawCircle_sloc0_1_0
      0004C1 2E               [12] 1635 	add	a,r6
      0004C2 F0               [24] 1636 	movx	@dptr,a
      0004C3 E5*23            [12] 1637 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004C5 3F               [12] 1638 	addc	a,r7
      0004C6 A3               [24] 1639 	inc	dptr
      0004C7 F0               [24] 1640 	movx	@dptr,a
                                   1641 ;	ecen4330_lcd_v3.c:286: drawPixel(x0 + x, y0 + y, color);
      0004C8 AE*20            [24] 1642 	mov	r6,_drawCircle_x0_65536_105
      0004CA AF*21            [24] 1643 	mov	r7,(_drawCircle_x0_65536_105 + 1)
      0004CC E8               [12] 1644 	mov	a,r0
      0004CD 2E               [12] 1645 	add	a,r6
      0004CE FC               [12] 1646 	mov	r4,a
      0004CF E9               [12] 1647 	mov	a,r1
      0004D0 3F               [12] 1648 	addc	a,r7
      0004D1 FD               [12] 1649 	mov	r5,a
      0004D2 8C*24            [24] 1650 	mov	_drawCircle_sloc1_1_0,r4
      0004D4 8D*25            [24] 1651 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004D6 85*1A*26         [24] 1652 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004D9 85*1B*27         [24] 1653 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      0004DC EA               [12] 1654 	mov	a,r2
      0004DD 25*26            [12] 1655 	add	a,_drawCircle_sloc2_1_0
      0004DF FC               [12] 1656 	mov	r4,a
      0004E0 EB               [12] 1657 	mov	a,r3
      0004E1 35*27            [12] 1658 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004E3 FD               [12] 1659 	mov	r5,a
      0004E4 8C*28            [24] 1660 	mov	_drawCircle_sloc3_1_0,r4
      0004E6 8D*29            [24] 1661 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004E8 85*28*16         [24] 1662 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004EB 85*29*17         [24] 1663 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EE 85*1E*18         [24] 1664 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004F1 85*1F*19         [24] 1665 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F4 85*24 82         [24] 1666 	mov	dpl,_drawCircle_sloc1_1_0
      0004F7 85*25 83         [24] 1667 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004FA C0 07            [24] 1668 	push	ar7
      0004FC C0 06            [24] 1669 	push	ar6
      0004FE C0 05            [24] 1670 	push	ar5
      000500 C0 04            [24] 1671 	push	ar4
      000502 C0 03            [24] 1672 	push	ar3
      000504 C0 02            [24] 1673 	push	ar2
      000506 C0 01            [24] 1674 	push	ar1
      000508 C0 00            [24] 1675 	push	ar0
      00050A 12r03r61         [24] 1676 	lcall	_drawPixel
      00050D D0 00            [24] 1677 	pop	ar0
      00050F D0 01            [24] 1678 	pop	ar1
      000511 D0 02            [24] 1679 	pop	ar2
      000513 D0 03            [24] 1680 	pop	ar3
      000515 D0 04            [24] 1681 	pop	ar4
      000517 D0 05            [24] 1682 	pop	ar5
      000519 D0 06            [24] 1683 	pop	ar6
      00051B D0 07            [24] 1684 	pop	ar7
                                   1685 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 - x, y0 + y, color);
      00051D EE               [12] 1686 	mov	a,r6
      00051E C3               [12] 1687 	clr	c
      00051F 98               [12] 1688 	subb	a,r0
      000520 FC               [12] 1689 	mov	r4,a
      000521 EF               [12] 1690 	mov	a,r7
      000522 99               [12] 1691 	subb	a,r1
      000523 FD               [12] 1692 	mov	r5,a
      000524 8C*2A            [24] 1693 	mov	_drawCircle_sloc4_1_0,r4
      000526 8D*2B            [24] 1694 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000528 85*28*16         [24] 1695 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      00052B 85*29*17         [24] 1696 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      00052E 85*1E*18         [24] 1697 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000531 85*1F*19         [24] 1698 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000534 85*2A 82         [24] 1699 	mov	dpl,_drawCircle_sloc4_1_0
      000537 85*2B 83         [24] 1700 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00053A C0 07            [24] 1701 	push	ar7
      00053C C0 06            [24] 1702 	push	ar6
      00053E C0 05            [24] 1703 	push	ar5
      000540 C0 04            [24] 1704 	push	ar4
      000542 C0 03            [24] 1705 	push	ar3
      000544 C0 02            [24] 1706 	push	ar2
      000546 C0 01            [24] 1707 	push	ar1
      000548 C0 00            [24] 1708 	push	ar0
      00054A 12r03r61         [24] 1709 	lcall	_drawPixel
      00054D D0 00            [24] 1710 	pop	ar0
      00054F D0 01            [24] 1711 	pop	ar1
      000551 D0 02            [24] 1712 	pop	ar2
      000553 D0 03            [24] 1713 	pop	ar3
      000555 D0 04            [24] 1714 	pop	ar4
      000557 D0 05            [24] 1715 	pop	ar5
                                   1716 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 + x, y0 - y, color);
      000559 E5*26            [12] 1717 	mov	a,_drawCircle_sloc2_1_0
      00055B C3               [12] 1718 	clr	c
      00055C 9A               [12] 1719 	subb	a,r2
      00055D FC               [12] 1720 	mov	r4,a
      00055E E5*27            [12] 1721 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000560 9B               [12] 1722 	subb	a,r3
      000561 FD               [12] 1723 	mov	r5,a
      000562 8C*16            [24] 1724 	mov	_drawPixel_PARM_2,r4
      000564 8D*17            [24] 1725 	mov	(_drawPixel_PARM_2 + 1),r5
      000566 85*1E*18         [24] 1726 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000569 85*1F*19         [24] 1727 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00056C 85*24 82         [24] 1728 	mov	dpl,_drawCircle_sloc1_1_0
      00056F 85*25 83         [24] 1729 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000572 C0 05            [24] 1730 	push	ar5
      000574 C0 04            [24] 1731 	push	ar4
      000576 C0 03            [24] 1732 	push	ar3
      000578 C0 02            [24] 1733 	push	ar2
      00057A C0 01            [24] 1734 	push	ar1
      00057C C0 00            [24] 1735 	push	ar0
      00057E 12r03r61         [24] 1736 	lcall	_drawPixel
      000581 D0 00            [24] 1737 	pop	ar0
      000583 D0 01            [24] 1738 	pop	ar1
      000585 D0 02            [24] 1739 	pop	ar2
      000587 D0 03            [24] 1740 	pop	ar3
      000589 D0 04            [24] 1741 	pop	ar4
      00058B D0 05            [24] 1742 	pop	ar5
                                   1743 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 - x, y0 - y, color);
      00058D 8C*16            [24] 1744 	mov	_drawPixel_PARM_2,r4
      00058F 8D*17            [24] 1745 	mov	(_drawPixel_PARM_2 + 1),r5
      000591 85*1E*18         [24] 1746 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000594 85*1F*19         [24] 1747 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000597 85*2A 82         [24] 1748 	mov	dpl,_drawCircle_sloc4_1_0
      00059A 85*2B 83         [24] 1749 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059D C0 05            [24] 1750 	push	ar5
      00059F C0 04            [24] 1751 	push	ar4
      0005A1 C0 03            [24] 1752 	push	ar3
      0005A3 C0 02            [24] 1753 	push	ar2
      0005A5 C0 01            [24] 1754 	push	ar1
      0005A7 C0 00            [24] 1755 	push	ar0
      0005A9 12r03r61         [24] 1756 	lcall	_drawPixel
      0005AC D0 00            [24] 1757 	pop	ar0
      0005AE D0 01            [24] 1758 	pop	ar1
      0005B0 D0 02            [24] 1759 	pop	ar2
      0005B2 D0 03            [24] 1760 	pop	ar3
      0005B4 D0 04            [24] 1761 	pop	ar4
      0005B6 D0 05            [24] 1762 	pop	ar5
      0005B8 D0 06            [24] 1763 	pop	ar6
      0005BA D0 07            [24] 1764 	pop	ar7
                                   1765 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 + y, y0 + x, color);
      0005BC EA               [12] 1766 	mov	a,r2
      0005BD 2E               [12] 1767 	add	a,r6
      0005BE FC               [12] 1768 	mov	r4,a
      0005BF EB               [12] 1769 	mov	a,r3
      0005C0 3F               [12] 1770 	addc	a,r7
      0005C1 FD               [12] 1771 	mov	r5,a
      0005C2 8C*2A            [24] 1772 	mov	_drawCircle_sloc4_1_0,r4
      0005C4 8D*2B            [24] 1773 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005C6 E8               [12] 1774 	mov	a,r0
      0005C7 25*26            [12] 1775 	add	a,_drawCircle_sloc2_1_0
      0005C9 FC               [12] 1776 	mov	r4,a
      0005CA E9               [12] 1777 	mov	a,r1
      0005CB 35*27            [12] 1778 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005CD FD               [12] 1779 	mov	r5,a
      0005CE 8C*16            [24] 1780 	mov	_drawPixel_PARM_2,r4
      0005D0 8D*17            [24] 1781 	mov	(_drawPixel_PARM_2 + 1),r5
      0005D2 85*1E*18         [24] 1782 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005D5 85*1F*19         [24] 1783 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005D8 85*2A 82         [24] 1784 	mov	dpl,_drawCircle_sloc4_1_0
      0005DB 85*2B 83         [24] 1785 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005DE C0 07            [24] 1786 	push	ar7
      0005E0 C0 06            [24] 1787 	push	ar6
      0005E2 C0 05            [24] 1788 	push	ar5
      0005E4 C0 04            [24] 1789 	push	ar4
      0005E6 C0 03            [24] 1790 	push	ar3
      0005E8 C0 02            [24] 1791 	push	ar2
      0005EA C0 01            [24] 1792 	push	ar1
      0005EC C0 00            [24] 1793 	push	ar0
      0005EE 12r03r61         [24] 1794 	lcall	_drawPixel
      0005F1 D0 00            [24] 1795 	pop	ar0
      0005F3 D0 01            [24] 1796 	pop	ar1
      0005F5 D0 02            [24] 1797 	pop	ar2
      0005F7 D0 03            [24] 1798 	pop	ar3
      0005F9 D0 04            [24] 1799 	pop	ar4
      0005FB D0 05            [24] 1800 	pop	ar5
      0005FD D0 06            [24] 1801 	pop	ar6
      0005FF D0 07            [24] 1802 	pop	ar7
                                   1803 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 - y, y0 + x, color);
      000601 EE               [12] 1804 	mov	a,r6
      000602 C3               [12] 1805 	clr	c
      000603 9A               [12] 1806 	subb	a,r2
      000604 FE               [12] 1807 	mov	r6,a
      000605 EF               [12] 1808 	mov	a,r7
      000606 9B               [12] 1809 	subb	a,r3
      000607 FF               [12] 1810 	mov	r7,a
      000608 8C*16            [24] 1811 	mov	_drawPixel_PARM_2,r4
      00060A 8D*17            [24] 1812 	mov	(_drawPixel_PARM_2 + 1),r5
      00060C 85*1E*18         [24] 1813 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00060F 85*1F*19         [24] 1814 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000612 8E 82            [24] 1815 	mov	dpl,r6
      000614 8F 83            [24] 1816 	mov	dph,r7
      000616 C0 07            [24] 1817 	push	ar7
      000618 C0 06            [24] 1818 	push	ar6
      00061A C0 05            [24] 1819 	push	ar5
      00061C C0 04            [24] 1820 	push	ar4
      00061E C0 03            [24] 1821 	push	ar3
      000620 C0 02            [24] 1822 	push	ar2
      000622 C0 01            [24] 1823 	push	ar1
      000624 C0 00            [24] 1824 	push	ar0
      000626 12r03r61         [24] 1825 	lcall	_drawPixel
      000629 D0 00            [24] 1826 	pop	ar0
      00062B D0 01            [24] 1827 	pop	ar1
      00062D D0 02            [24] 1828 	pop	ar2
      00062F D0 03            [24] 1829 	pop	ar3
      000631 D0 04            [24] 1830 	pop	ar4
      000633 D0 05            [24] 1831 	pop	ar5
                                   1832 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 + y, y0 - x, color);
      000635 E5*26            [12] 1833 	mov	a,_drawCircle_sloc2_1_0
      000637 C3               [12] 1834 	clr	c
      000638 98               [12] 1835 	subb	a,r0
      000639 FC               [12] 1836 	mov	r4,a
      00063A E5*27            [12] 1837 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00063C 99               [12] 1838 	subb	a,r1
      00063D FD               [12] 1839 	mov	r5,a
      00063E 8C*16            [24] 1840 	mov	_drawPixel_PARM_2,r4
      000640 8D*17            [24] 1841 	mov	(_drawPixel_PARM_2 + 1),r5
      000642 85*1E*18         [24] 1842 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000645 85*1F*19         [24] 1843 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000648 85*2A 82         [24] 1844 	mov	dpl,_drawCircle_sloc4_1_0
      00064B 85*2B 83         [24] 1845 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00064E C0 05            [24] 1846 	push	ar5
      000650 C0 04            [24] 1847 	push	ar4
      000652 C0 03            [24] 1848 	push	ar3
      000654 C0 02            [24] 1849 	push	ar2
      000656 C0 01            [24] 1850 	push	ar1
      000658 C0 00            [24] 1851 	push	ar0
      00065A 12r03r61         [24] 1852 	lcall	_drawPixel
      00065D D0 00            [24] 1853 	pop	ar0
      00065F D0 01            [24] 1854 	pop	ar1
      000661 D0 02            [24] 1855 	pop	ar2
      000663 D0 03            [24] 1856 	pop	ar3
      000665 D0 04            [24] 1857 	pop	ar4
      000667 D0 05            [24] 1858 	pop	ar5
      000669 D0 06            [24] 1859 	pop	ar6
      00066B D0 07            [24] 1860 	pop	ar7
                                   1861 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 - y, y0 - x, color);
      00066D 8C*16            [24] 1862 	mov	_drawPixel_PARM_2,r4
      00066F 8D*17            [24] 1863 	mov	(_drawPixel_PARM_2 + 1),r5
      000671 85*1E*18         [24] 1864 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000674 85*1F*19         [24] 1865 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000677 8E 82            [24] 1866 	mov	dpl,r6
      000679 8F 83            [24] 1867 	mov	dph,r7
      00067B C0 05            [24] 1868 	push	ar5
      00067D C0 04            [24] 1869 	push	ar4
      00067F C0 03            [24] 1870 	push	ar3
      000681 C0 02            [24] 1871 	push	ar2
      000683 C0 01            [24] 1872 	push	ar1
      000685 C0 00            [24] 1873 	push	ar0
      000687 12r03r61         [24] 1874 	lcall	_drawPixel
      00068A D0 00            [24] 1875 	pop	ar0
      00068C D0 01            [24] 1876 	pop	ar1
      00068E D0 02            [24] 1877 	pop	ar2
      000690 D0 03            [24] 1878 	pop	ar3
      000692 D0 04            [24] 1879 	pop	ar4
      000694 D0 05            [24] 1880 	pop	ar5
      000696 D0 05            [24] 1881 	pop	ar5
      000698 D0 04            [24] 1882 	pop	ar4
                                   1883 ;	ecen4330_lcd_v3.c:295: }
      00069A 02r04r6B         [24] 1884 	ljmp	00103$
                                   1885 ;------------------------------------------------------------
                                   1886 ;Allocation info for local variables in function 'testCircles'
                                   1887 ;------------------------------------------------------------
                                   1888 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1889 ;radius                    Allocated with name '_testCircles_radius_65536_109'
                                   1890 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1891 ;x                         Allocated with name '_testCircles_x_65536_110'
                                   1892 ;y                         Allocated with name '_testCircles_y_65536_110'
                                   1893 ;r2                        Allocated with name '_testCircles_r2_65536_110'
                                   1894 ;w                         Allocated with name '_testCircles_w_65536_110'
                                   1895 ;h                         Allocated with name '_testCircles_h_65536_110'
                                   1896 ;------------------------------------------------------------
                                   1897 ;	ecen4330_lcd_v3.c:303: void testCircles (uint8_t radius, uint16_t color) {
                                   1898 ;	-----------------------------------------
                                   1899 ;	 function testCircles
                                   1900 ;	-----------------------------------------
      00069D                       1901 _testCircles:
      00069D 85 82*2E         [24] 1902 	mov	_testCircles_radius_65536_109,dpl
                                   1903 ;	ecen4330_lcd_v3.c:304: __xdata int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006A0 AD*2E            [24] 1904 	mov	r5,_testCircles_radius_65536_109
      0006A2 7E 00            [12] 1905 	mov	r6,#0x00
      0006A4 ED               [12] 1906 	mov	a,r5
      0006A5 2D               [12] 1907 	add	a,r5
      0006A6 FB               [12] 1908 	mov	r3,a
      0006A7 EE               [12] 1909 	mov	a,r6
      0006A8 33               [12] 1910 	rlc	a
      0006A9 FC               [12] 1911 	mov	r4,a
      0006AA 90r00r00         [24] 1912 	mov	dptr,#__width
      0006AD E0               [24] 1913 	movx	a,@dptr
      0006AE F9               [12] 1914 	mov	r1,a
      0006AF A3               [24] 1915 	inc	dptr
      0006B0 E0               [24] 1916 	movx	a,@dptr
      0006B1 FA               [12] 1917 	mov	r2,a
      0006B2 ED               [12] 1918 	mov	a,r5
      0006B3 29               [12] 1919 	add	a,r1
      0006B4 F9               [12] 1920 	mov	r1,a
      0006B5 EE               [12] 1921 	mov	a,r6
      0006B6 3A               [12] 1922 	addc	a,r2
      0006B7 FA               [12] 1923 	mov	r2,a
      0006B8 90r00r02         [24] 1924 	mov	dptr,#__height
      0006BB E0               [24] 1925 	movx	a,@dptr
      0006BC FF               [12] 1926 	mov	r7,a
      0006BD A3               [24] 1927 	inc	dptr
      0006BE E0               [24] 1928 	movx	a,@dptr
      0006BF F8               [12] 1929 	mov	r0,a
      0006C0 ED               [12] 1930 	mov	a,r5
      0006C1 2F               [12] 1931 	add	a,r7
      0006C2 FF               [12] 1932 	mov	r7,a
      0006C3 EE               [12] 1933 	mov	a,r6
      0006C4 38               [12] 1934 	addc	a,r0
      0006C5 FE               [12] 1935 	mov	r6,a
                                   1936 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      0006C6 90r00r06         [24] 1937 	mov	dptr,#_testCircles_x_65536_110
      0006C9 E4               [12] 1938 	clr	a
      0006CA F0               [24] 1939 	movx	@dptr,a
      0006CB A3               [24] 1940 	inc	dptr
      0006CC F0               [24] 1941 	movx	@dptr,a
      0006CD                       1942 00107$:
      0006CD 90r00r06         [24] 1943 	mov	dptr,#_testCircles_x_65536_110
      0006D0 E0               [24] 1944 	movx	a,@dptr
      0006D1 F8               [12] 1945 	mov	r0,a
      0006D2 A3               [24] 1946 	inc	dptr
      0006D3 E0               [24] 1947 	movx	a,@dptr
      0006D4 FD               [12] 1948 	mov	r5,a
      0006D5 C3               [12] 1949 	clr	c
      0006D6 E8               [12] 1950 	mov	a,r0
      0006D7 99               [12] 1951 	subb	a,r1
      0006D8 ED               [12] 1952 	mov	a,r5
      0006D9 64 80            [12] 1953 	xrl	a,#0x80
      0006DB 8A F0            [24] 1954 	mov	b,r2
      0006DD 63 F0 80         [24] 1955 	xrl	b,#0x80
      0006E0 95 F0            [12] 1956 	subb	a,b
      0006E2 40 01            [24] 1957 	jc	00127$
      0006E4 22               [24] 1958 	ret
      0006E5                       1959 00127$:
                                   1960 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      0006E5 90r00r08         [24] 1961 	mov	dptr,#_testCircles_y_65536_110
      0006E8 E4               [12] 1962 	clr	a
      0006E9 F0               [24] 1963 	movx	@dptr,a
      0006EA A3               [24] 1964 	inc	dptr
      0006EB F0               [24] 1965 	movx	@dptr,a
      0006EC                       1966 00104$:
      0006EC 90r00r08         [24] 1967 	mov	dptr,#_testCircles_y_65536_110
      0006EF E0               [24] 1968 	movx	a,@dptr
      0006F0 F5*2F            [12] 1969 	mov	_testCircles_sloc0_1_0,a
      0006F2 A3               [24] 1970 	inc	dptr
      0006F3 E0               [24] 1971 	movx	a,@dptr
      0006F4 F5*30            [12] 1972 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006F6 C3               [12] 1973 	clr	c
      0006F7 E5*2F            [12] 1974 	mov	a,_testCircles_sloc0_1_0
      0006F9 9F               [12] 1975 	subb	a,r7
      0006FA E5*30            [12] 1976 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006FC 64 80            [12] 1977 	xrl	a,#0x80
      0006FE 8E F0            [24] 1978 	mov	b,r6
      000700 63 F0 80         [24] 1979 	xrl	b,#0x80
      000703 95 F0            [12] 1980 	subb	a,b
      000705 50 47            [24] 1981 	jnc	00108$
                                   1982 ;	ecen4330_lcd_v3.c:308: drawCircle(x, y, radius, color);
      000707 88 82            [24] 1983 	mov	dpl,r0
      000709 8D 83            [24] 1984 	mov	dph,r5
      00070B 85*2F*1A         [24] 1985 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      00070E 85*30*1B         [24] 1986 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000711 85*2E*1C         [24] 1987 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_109
      000714 75*1D 00         [24] 1988 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000717 85*2C*1E         [24] 1989 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00071A 85*2D*1F         [24] 1990 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      00071D C0 07            [24] 1991 	push	ar7
      00071F C0 06            [24] 1992 	push	ar6
      000721 C0 05            [24] 1993 	push	ar5
      000723 C0 04            [24] 1994 	push	ar4
      000725 C0 03            [24] 1995 	push	ar3
      000727 C0 02            [24] 1996 	push	ar2
      000729 C0 01            [24] 1997 	push	ar1
      00072B C0 00            [24] 1998 	push	ar0
      00072D 12r03rB8         [24] 1999 	lcall	_drawCircle
      000730 D0 00            [24] 2000 	pop	ar0
      000732 D0 01            [24] 2001 	pop	ar1
      000734 D0 02            [24] 2002 	pop	ar2
      000736 D0 03            [24] 2003 	pop	ar3
      000738 D0 04            [24] 2004 	pop	ar4
      00073A D0 05            [24] 2005 	pop	ar5
      00073C D0 06            [24] 2006 	pop	ar6
      00073E D0 07            [24] 2007 	pop	ar7
                                   2008 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      000740 90r00r08         [24] 2009 	mov	dptr,#_testCircles_y_65536_110
      000743 EB               [12] 2010 	mov	a,r3
      000744 25*2F            [12] 2011 	add	a,_testCircles_sloc0_1_0
      000746 F0               [24] 2012 	movx	@dptr,a
      000747 EC               [12] 2013 	mov	a,r4
      000748 35*30            [12] 2014 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00074A A3               [24] 2015 	inc	dptr
      00074B F0               [24] 2016 	movx	@dptr,a
      00074C 80 9E            [24] 2017 	sjmp	00104$
      00074E                       2018 00108$:
                                   2019 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      00074E 90r00r06         [24] 2020 	mov	dptr,#_testCircles_x_65536_110
      000751 E0               [24] 2021 	movx	a,@dptr
      000752 F8               [12] 2022 	mov	r0,a
      000753 A3               [24] 2023 	inc	dptr
      000754 E0               [24] 2024 	movx	a,@dptr
      000755 FD               [12] 2025 	mov	r5,a
      000756 90r00r06         [24] 2026 	mov	dptr,#_testCircles_x_65536_110
      000759 EB               [12] 2027 	mov	a,r3
      00075A 28               [12] 2028 	add	a,r0
      00075B F0               [24] 2029 	movx	@dptr,a
      00075C EC               [12] 2030 	mov	a,r4
      00075D 3D               [12] 2031 	addc	a,r5
      00075E A3               [24] 2032 	inc	dptr
      00075F F0               [24] 2033 	movx	@dptr,a
                                   2034 ;	ecen4330_lcd_v3.c:311: }
      000760 02r06rCD         [24] 2035 	ljmp	00107$
                                   2036 ;------------------------------------------------------------
                                   2037 ;Allocation info for local variables in function 'fillRect'
                                   2038 ;------------------------------------------------------------
                                   2039 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2040 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2041 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2042 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2043 ;x                         Allocated to registers 
                                   2044 ;------------------------------------------------------------
                                   2045 ;	ecen4330_lcd_v3.c:313: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2046 ;	-----------------------------------------
                                   2047 ;	 function fillRect
                                   2048 ;	-----------------------------------------
      000763                       2049 _fillRect:
      000763 AE 82            [24] 2050 	mov	r6,dpl
      000765 AF 83            [24] 2051 	mov	r7,dph
                                   2052 ;	ecen4330_lcd_v3.c:314: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000767 8E 04            [24] 2053 	mov	ar4,r6
      000769 8F 05            [24] 2054 	mov	ar5,r7
      00076B C3               [12] 2055 	clr	c
      00076C EC               [12] 2056 	mov	a,r4
      00076D 94 F0            [12] 2057 	subb	a,#0xf0
      00076F ED               [12] 2058 	mov	a,r5
      000770 94 00            [12] 2059 	subb	a,#0x00
      000772 50 0D            [24] 2060 	jnc	00101$
      000774 AC*31            [24] 2061 	mov	r4,_fillRect_PARM_2
      000776 AD*32            [24] 2062 	mov	r5,(_fillRect_PARM_2 + 1)
      000778 C3               [12] 2063 	clr	c
      000779 EC               [12] 2064 	mov	a,r4
      00077A 94 40            [12] 2065 	subb	a,#0x40
      00077C ED               [12] 2066 	mov	a,r5
      00077D 94 01            [12] 2067 	subb	a,#0x01
      00077F 40 01            [24] 2068 	jc	00102$
      000781                       2069 00101$:
                                   2070 ;	ecen4330_lcd_v3.c:316: return;
      000781 22               [24] 2071 	ret
      000782                       2072 00102$:
                                   2073 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH)
      000782 E5*33            [12] 2074 	mov	a,_fillRect_PARM_3
      000784 2E               [12] 2075 	add	a,r6
      000785 FC               [12] 2076 	mov	r4,a
      000786 E5*34            [12] 2077 	mov	a,(_fillRect_PARM_3 + 1)
      000788 3F               [12] 2078 	addc	a,r7
      000789 FD               [12] 2079 	mov	r5,a
      00078A 1C               [12] 2080 	dec	r4
      00078B BC FF 01         [24] 2081 	cjne	r4,#0xff,00161$
      00078E 1D               [12] 2082 	dec	r5
      00078F                       2083 00161$:
      00078F C3               [12] 2084 	clr	c
      000790 EC               [12] 2085 	mov	a,r4
      000791 94 F0            [12] 2086 	subb	a,#0xf0
      000793 ED               [12] 2087 	mov	a,r5
      000794 94 00            [12] 2088 	subb	a,#0x00
      000796 40 0A            [24] 2089 	jc	00105$
                                   2090 ;	ecen4330_lcd_v3.c:321: w = TFTWIDTH-x;
      000798 74 F0            [12] 2091 	mov	a,#0xf0
      00079A C3               [12] 2092 	clr	c
      00079B 9E               [12] 2093 	subb	a,r6
      00079C F5*33            [12] 2094 	mov	_fillRect_PARM_3,a
      00079E E4               [12] 2095 	clr	a
      00079F 9F               [12] 2096 	subb	a,r7
      0007A0 F5*34            [12] 2097 	mov	(_fillRect_PARM_3 + 1),a
      0007A2                       2098 00105$:
                                   2099 ;	ecen4330_lcd_v3.c:324: if ((y+h-1) >= TFTHEIGHT)
      0007A2 E5*35            [12] 2100 	mov	a,_fillRect_PARM_4
      0007A4 25*31            [12] 2101 	add	a,_fillRect_PARM_2
      0007A6 FC               [12] 2102 	mov	r4,a
      0007A7 E5*36            [12] 2103 	mov	a,(_fillRect_PARM_4 + 1)
      0007A9 35*32            [12] 2104 	addc	a,(_fillRect_PARM_2 + 1)
      0007AB FD               [12] 2105 	mov	r5,a
      0007AC 1C               [12] 2106 	dec	r4
      0007AD BC FF 01         [24] 2107 	cjne	r4,#0xff,00163$
      0007B0 1D               [12] 2108 	dec	r5
      0007B1                       2109 00163$:
      0007B1 C3               [12] 2110 	clr	c
      0007B2 EC               [12] 2111 	mov	a,r4
      0007B3 94 40            [12] 2112 	subb	a,#0x40
      0007B5 ED               [12] 2113 	mov	a,r5
      0007B6 94 01            [12] 2114 	subb	a,#0x01
      0007B8 40 0D            [24] 2115 	jc	00107$
                                   2116 ;	ecen4330_lcd_v3.c:326: h = TFTHEIGHT-y;
      0007BA 74 40            [12] 2117 	mov	a,#0x40
      0007BC C3               [12] 2118 	clr	c
      0007BD 95*31            [12] 2119 	subb	a,_fillRect_PARM_2
      0007BF F5*35            [12] 2120 	mov	_fillRect_PARM_4,a
      0007C1 74 01            [12] 2121 	mov	a,#0x01
      0007C3 95*32            [12] 2122 	subb	a,(_fillRect_PARM_2 + 1)
      0007C5 F5*36            [12] 2123 	mov	(_fillRect_PARM_4 + 1),a
      0007C7                       2124 00107$:
                                   2125 ;	ecen4330_lcd_v3.c:329: setAddress(x, y, x+w-1, y+h-1);
      0007C7 E5*33            [12] 2126 	mov	a,_fillRect_PARM_3
      0007C9 2E               [12] 2127 	add	a,r6
      0007CA FC               [12] 2128 	mov	r4,a
      0007CB E5*34            [12] 2129 	mov	a,(_fillRect_PARM_3 + 1)
      0007CD 3F               [12] 2130 	addc	a,r7
      0007CE FD               [12] 2131 	mov	r5,a
      0007CF 1C               [12] 2132 	dec	r4
      0007D0 BC FF 01         [24] 2133 	cjne	r4,#0xff,00165$
      0007D3 1D               [12] 2134 	dec	r5
      0007D4                       2135 00165$:
      0007D4 8C*02            [24] 2136 	mov	_setAddress_PARM_3,r4
      0007D6 8D*03            [24] 2137 	mov	(_setAddress_PARM_3 + 1),r5
      0007D8 E5*35            [12] 2138 	mov	a,_fillRect_PARM_4
      0007DA 25*31            [12] 2139 	add	a,_fillRect_PARM_2
      0007DC FC               [12] 2140 	mov	r4,a
      0007DD E5*36            [12] 2141 	mov	a,(_fillRect_PARM_4 + 1)
      0007DF 35*32            [12] 2142 	addc	a,(_fillRect_PARM_2 + 1)
      0007E1 FD               [12] 2143 	mov	r5,a
      0007E2 1C               [12] 2144 	dec	r4
      0007E3 BC FF 01         [24] 2145 	cjne	r4,#0xff,00166$
      0007E6 1D               [12] 2146 	dec	r5
      0007E7                       2147 00166$:
      0007E7 8C*04            [24] 2148 	mov	_setAddress_PARM_4,r4
      0007E9 8D*05            [24] 2149 	mov	(_setAddress_PARM_4 + 1),r5
      0007EB 85*31*00         [24] 2150 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007EE 85*32*01         [24] 2151 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007F1 8E 82            [24] 2152 	mov	dpl,r6
      0007F3 8F 83            [24] 2153 	mov	dph,r7
      0007F5 12r01r76         [24] 2154 	lcall	_setAddress
                                   2155 ;	ecen4330_lcd_v3.c:332: write8Reg(0x2C);
                                   2156 ;	assignBit
      0007F8 C2 B5            [12] 2157 	clr	_P3_5
                                   2158 ;	assignBit
      0007FA D2 B4            [12] 2159 	setb	_P3_4
      0007FC 85*02 82         [24] 2160 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2161 	mov	dph,(_lcd_address + 1)
      000802 74 2C            [12] 2162 	mov	a,#0x2c
      000804 F0               [24] 2163 	movx	@dptr,a
                                   2164 ;	assignBit
      000805 C2 B4            [12] 2165 	clr	_P3_4
                                   2166 ;	ecen4330_lcd_v3.c:333: CD = 1;
                                   2167 ;	assignBit
      000807 D2 B5            [12] 2168 	setb	_P3_5
                                   2169 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      000809 AF*38            [24] 2170 	mov	r7,(_fillRect_PARM_5 + 1)
      00080B AD*35            [24] 2171 	mov	r5,_fillRect_PARM_4
      00080D AE*36            [24] 2172 	mov	r6,(_fillRect_PARM_4 + 1)
      00080F                       2173 00114$:
      00080F ED               [12] 2174 	mov	a,r5
      000810 4E               [12] 2175 	orl	a,r6
      000811 60 30            [24] 2176 	jz	00116$
                                   2177 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000813 AB*33            [24] 2178 	mov	r3,_fillRect_PARM_3
      000815 AC*34            [24] 2179 	mov	r4,(_fillRect_PARM_3 + 1)
      000817                       2180 00111$:
      000817 EB               [12] 2181 	mov	a,r3
      000818 4C               [12] 2182 	orl	a,r4
      000819 60 21            [24] 2183 	jz	00115$
                                   2184 ;	ecen4330_lcd_v3.c:339: write8(color>>8); write8(color);
                                   2185 ;	assignBit
      00081B D2 B4            [12] 2186 	setb	_P3_4
      00081D 85*02 82         [24] 2187 	mov	dpl,_lcd_address
      000820 85*03 83         [24] 2188 	mov	dph,(_lcd_address + 1)
      000823 EF               [12] 2189 	mov	a,r7
      000824 F0               [24] 2190 	movx	@dptr,a
                                   2191 ;	assignBit
      000825 C2 B4            [12] 2192 	clr	_P3_4
                                   2193 ;	assignBit
      000827 D2 B4            [12] 2194 	setb	_P3_4
      000829 85*02 82         [24] 2195 	mov	dpl,_lcd_address
      00082C 85*03 83         [24] 2196 	mov	dph,(_lcd_address + 1)
      00082F E5*37            [12] 2197 	mov	a,_fillRect_PARM_5
      000831 FA               [12] 2198 	mov	r2,a
      000832 F0               [24] 2199 	movx	@dptr,a
                                   2200 ;	assignBit
      000833 C2 B4            [12] 2201 	clr	_P3_4
                                   2202 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000835 1B               [12] 2203 	dec	r3
      000836 BB FF 01         [24] 2204 	cjne	r3,#0xff,00169$
      000839 1C               [12] 2205 	dec	r4
      00083A                       2206 00169$:
      00083A 80 DB            [24] 2207 	sjmp	00111$
      00083C                       2208 00115$:
                                   2209 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      00083C 1D               [12] 2210 	dec	r5
      00083D BD FF 01         [24] 2211 	cjne	r5,#0xff,00170$
      000840 1E               [12] 2212 	dec	r6
      000841                       2213 00170$:
      000841 80 CC            [24] 2214 	sjmp	00114$
      000843                       2215 00116$:
                                   2216 ;	ecen4330_lcd_v3.c:343: }
      000843 22               [24] 2217 	ret
                                   2218 ;------------------------------------------------------------
                                   2219 ;Allocation info for local variables in function 'fillScreen'
                                   2220 ;------------------------------------------------------------
                                   2221 ;Color                     Allocated to registers r6 r7 
                                   2222 ;len                       Allocated with name '_fillScreen_len_65536_129'
                                   2223 ;blocks                    Allocated with name '_fillScreen_blocks_65536_129'
                                   2224 ;i                         Allocated with name '_fillScreen_i_65536_129'
                                   2225 ;hi                        Allocated with name '_fillScreen_hi_65536_129'
                                   2226 ;lo                        Allocated with name '_fillScreen_lo_65536_129'
                                   2227 ;------------------------------------------------------------
                                   2228 ;	ecen4330_lcd_v3.c:350: void fillScreen (uint16_t Color) {
                                   2229 ;	-----------------------------------------
                                   2230 ;	 function fillScreen
                                   2231 ;	-----------------------------------------
      000844                       2232 _fillScreen:
      000844 AE 82            [24] 2233 	mov	r6,dpl
      000846 AF 83            [24] 2234 	mov	r7,dph
                                   2235 ;	ecen4330_lcd_v3.c:355: __xdata uint8_t  i, hi = Color >> 8,
      000848 8F 05            [24] 2236 	mov	ar5,r7
                                   2237 ;	ecen4330_lcd_v3.c:356: lo = Color;
                                   2238 ;	ecen4330_lcd_v3.c:359: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      00084A E4               [12] 2239 	clr	a
      00084B F5*00            [12] 2240 	mov	_setAddress_PARM_2,a
      00084D F5*01            [12] 2241 	mov	(_setAddress_PARM_2 + 1),a
      00084F 75*02 EF         [24] 2242 	mov	_setAddress_PARM_3,#0xef
                                   2243 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000852 F5*03            [12] 2244 	mov	(_setAddress_PARM_3 + 1),a
      000854 75*04 3F         [24] 2245 	mov	_setAddress_PARM_4,#0x3f
      000857 75*05 01         [24] 2246 	mov	(_setAddress_PARM_4 + 1),#0x01
      00085A 90 00 00         [24] 2247 	mov	dptr,#0x0000
      00085D C0 06            [24] 2248 	push	ar6
      00085F C0 05            [24] 2249 	push	ar5
      000861 12r01r76         [24] 2250 	lcall	_setAddress
      000864 D0 05            [24] 2251 	pop	ar5
      000866 D0 06            [24] 2252 	pop	ar6
                                   2253 ;	ecen4330_lcd_v3.c:361: write8Reg(0x2C);
                                   2254 ;	assignBit
      000868 C2 B5            [12] 2255 	clr	_P3_5
                                   2256 ;	assignBit
      00086A D2 B4            [12] 2257 	setb	_P3_4
      00086C 85*02 82         [24] 2258 	mov	dpl,_lcd_address
      00086F 85*03 83         [24] 2259 	mov	dph,(_lcd_address + 1)
      000872 74 2C            [12] 2260 	mov	a,#0x2c
      000874 F0               [24] 2261 	movx	@dptr,a
                                   2262 ;	assignBit
      000875 C2 B4            [12] 2263 	clr	_P3_4
                                   2264 ;	ecen4330_lcd_v3.c:362: CD = 1;
                                   2265 ;	assignBit
      000877 D2 B5            [12] 2266 	setb	_P3_5
                                   2267 ;	ecen4330_lcd_v3.c:363: write8(hi); write8(lo);
                                   2268 ;	assignBit
      000879 D2 B4            [12] 2269 	setb	_P3_4
      00087B 85*02 82         [24] 2270 	mov	dpl,_lcd_address
      00087E 85*03 83         [24] 2271 	mov	dph,(_lcd_address + 1)
      000881 ED               [12] 2272 	mov	a,r5
      000882 F0               [24] 2273 	movx	@dptr,a
                                   2274 ;	assignBit
      000883 C2 B4            [12] 2275 	clr	_P3_4
                                   2276 ;	assignBit
      000885 D2 B4            [12] 2277 	setb	_P3_4
      000887 85*02 82         [24] 2278 	mov	dpl,_lcd_address
      00088A 85*03 83         [24] 2279 	mov	dph,(_lcd_address + 1)
      00088D EE               [12] 2280 	mov	a,r6
      00088E F0               [24] 2281 	movx	@dptr,a
                                   2282 ;	assignBit
      00088F C2 B4            [12] 2283 	clr	_P3_4
                                   2284 ;	ecen4330_lcd_v3.c:366: while (blocks--) {
      000891 7C B0            [12] 2285 	mov	r4,#0xb0
      000893 7F 04            [12] 2286 	mov	r7,#0x04
      000895                       2287 00104$:
      000895 8C 02            [24] 2288 	mov	ar2,r4
      000897 8F 03            [24] 2289 	mov	ar3,r7
      000899 1C               [12] 2290 	dec	r4
      00089A BC FF 01         [24] 2291 	cjne	r4,#0xff,00140$
      00089D 1F               [12] 2292 	dec	r7
      00089E                       2293 00140$:
      00089E EA               [12] 2294 	mov	a,r2
      00089F 4B               [12] 2295 	orl	a,r3
      0008A0 60 66            [24] 2296 	jz	00106$
                                   2297 ;	ecen4330_lcd_v3.c:368: do {
      0008A2 7B 10            [12] 2298 	mov	r3,#0x10
      0008A4                       2299 00101$:
                                   2300 ;	ecen4330_lcd_v3.c:370: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2301 ;	assignBit
      0008A4 D2 B4            [12] 2302 	setb	_P3_4
      0008A6 85*02 82         [24] 2303 	mov	dpl,_lcd_address
      0008A9 85*03 83         [24] 2304 	mov	dph,(_lcd_address + 1)
      0008AC ED               [12] 2305 	mov	a,r5
      0008AD F0               [24] 2306 	movx	@dptr,a
                                   2307 ;	assignBit
      0008AE C2 B4            [12] 2308 	clr	_P3_4
                                   2309 ;	assignBit
      0008B0 D2 B4            [12] 2310 	setb	_P3_4
      0008B2 85*02 82         [24] 2311 	mov	dpl,_lcd_address
      0008B5 85*03 83         [24] 2312 	mov	dph,(_lcd_address + 1)
      0008B8 EE               [12] 2313 	mov	a,r6
      0008B9 F0               [24] 2314 	movx	@dptr,a
                                   2315 ;	assignBit
      0008BA C2 B4            [12] 2316 	clr	_P3_4
                                   2317 ;	assignBit
      0008BC D2 B4            [12] 2318 	setb	_P3_4
      0008BE 85*02 82         [24] 2319 	mov	dpl,_lcd_address
      0008C1 85*03 83         [24] 2320 	mov	dph,(_lcd_address + 1)
      0008C4 ED               [12] 2321 	mov	a,r5
      0008C5 F0               [24] 2322 	movx	@dptr,a
                                   2323 ;	assignBit
      0008C6 C2 B4            [12] 2324 	clr	_P3_4
                                   2325 ;	assignBit
      0008C8 D2 B4            [12] 2326 	setb	_P3_4
      0008CA 85*02 82         [24] 2327 	mov	dpl,_lcd_address
      0008CD 85*03 83         [24] 2328 	mov	dph,(_lcd_address + 1)
      0008D0 EE               [12] 2329 	mov	a,r6
      0008D1 F0               [24] 2330 	movx	@dptr,a
                                   2331 ;	assignBit
      0008D2 C2 B4            [12] 2332 	clr	_P3_4
                                   2333 ;	ecen4330_lcd_v3.c:371: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2334 ;	assignBit
      0008D4 D2 B4            [12] 2335 	setb	_P3_4
      0008D6 85*02 82         [24] 2336 	mov	dpl,_lcd_address
      0008D9 85*03 83         [24] 2337 	mov	dph,(_lcd_address + 1)
      0008DC ED               [12] 2338 	mov	a,r5
      0008DD F0               [24] 2339 	movx	@dptr,a
                                   2340 ;	assignBit
      0008DE C2 B4            [12] 2341 	clr	_P3_4
                                   2342 ;	assignBit
      0008E0 D2 B4            [12] 2343 	setb	_P3_4
      0008E2 85*02 82         [24] 2344 	mov	dpl,_lcd_address
      0008E5 85*03 83         [24] 2345 	mov	dph,(_lcd_address + 1)
      0008E8 EE               [12] 2346 	mov	a,r6
      0008E9 F0               [24] 2347 	movx	@dptr,a
                                   2348 ;	assignBit
      0008EA C2 B4            [12] 2349 	clr	_P3_4
                                   2350 ;	assignBit
      0008EC D2 B4            [12] 2351 	setb	_P3_4
      0008EE 85*02 82         [24] 2352 	mov	dpl,_lcd_address
      0008F1 85*03 83         [24] 2353 	mov	dph,(_lcd_address + 1)
      0008F4 ED               [12] 2354 	mov	a,r5
      0008F5 F0               [24] 2355 	movx	@dptr,a
                                   2356 ;	assignBit
      0008F6 C2 B4            [12] 2357 	clr	_P3_4
                                   2358 ;	assignBit
      0008F8 D2 B4            [12] 2359 	setb	_P3_4
      0008FA 85*02 82         [24] 2360 	mov	dpl,_lcd_address
      0008FD 85*03 83         [24] 2361 	mov	dph,(_lcd_address + 1)
      000900 EE               [12] 2362 	mov	a,r6
      000901 F0               [24] 2363 	movx	@dptr,a
                                   2364 ;	assignBit
      000902 C2 B4            [12] 2365 	clr	_P3_4
                                   2366 ;	ecen4330_lcd_v3.c:372: } while(--i);
      000904 DB 9E            [24] 2367 	djnz	r3,00101$
      000906 80 8D            [24] 2368 	sjmp	00104$
      000908                       2369 00106$:
                                   2370 ;	ecen4330_lcd_v3.c:374: for (i = (char)len & 63; i--; ) {
      000908 7F 3F            [12] 2371 	mov	r7,#0x3f
      00090A                       2372 00109$:
      00090A 8F 04            [24] 2373 	mov	ar4,r7
      00090C 1F               [12] 2374 	dec	r7
      00090D EC               [12] 2375 	mov	a,r4
      00090E 60 1A            [24] 2376 	jz	00111$
                                   2377 ;	ecen4330_lcd_v3.c:376: write8(hi); write8(lo);
                                   2378 ;	assignBit
      000910 D2 B4            [12] 2379 	setb	_P3_4
      000912 85*02 82         [24] 2380 	mov	dpl,_lcd_address
      000915 85*03 83         [24] 2381 	mov	dph,(_lcd_address + 1)
      000918 ED               [12] 2382 	mov	a,r5
      000919 F0               [24] 2383 	movx	@dptr,a
                                   2384 ;	assignBit
      00091A C2 B4            [12] 2385 	clr	_P3_4
                                   2386 ;	assignBit
      00091C D2 B4            [12] 2387 	setb	_P3_4
      00091E 85*02 82         [24] 2388 	mov	dpl,_lcd_address
      000921 85*03 83         [24] 2389 	mov	dph,(_lcd_address + 1)
      000924 EE               [12] 2390 	mov	a,r6
      000925 F0               [24] 2391 	movx	@dptr,a
                                   2392 ;	assignBit
      000926 C2 B4            [12] 2393 	clr	_P3_4
      000928 80 E0            [24] 2394 	sjmp	00109$
      00092A                       2395 00111$:
                                   2396 ;	ecen4330_lcd_v3.c:379: }
      00092A 22               [24] 2397 	ret
                                   2398 ;------------------------------------------------------------
                                   2399 ;Allocation info for local variables in function 'drawChar'
                                   2400 ;------------------------------------------------------------
                                   2401 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2402 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2403 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2404 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2405 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2406 ;x                         Allocated to registers r6 r7 
                                   2407 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2408 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2409 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2410 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2411 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2412 ;i                         Allocated with name '_drawChar_i_65537_151'
                                   2413 ;line                      Allocated with name '_drawChar_line_196609_153'
                                   2414 ;j                         Allocated with name '_drawChar_j_196610_156'
                                   2415 ;------------------------------------------------------------
                                   2416 ;	ecen4330_lcd_v3.c:390: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2417 ;	-----------------------------------------
                                   2418 ;	 function drawChar
                                   2419 ;	-----------------------------------------
      00092B                       2420 _drawChar:
      00092B AE 82            [24] 2421 	mov	r6,dpl
      00092D AF 83            [24] 2422 	mov	r7,dph
                                   2423 ;	ecen4330_lcd_v3.c:391: if ((x >=TFTWIDTH) ||
      00092F C3               [12] 2424 	clr	c
      000930 EE               [12] 2425 	mov	a,r6
      000931 94 F0            [12] 2426 	subb	a,#0xf0
      000933 EF               [12] 2427 	mov	a,r7
      000934 64 80            [12] 2428 	xrl	a,#0x80
      000936 94 80            [12] 2429 	subb	a,#0x80
      000938 50 67            [24] 2430 	jnc	00101$
                                   2431 ;	ecen4330_lcd_v3.c:392: (y >=TFTHEIGHT)           ||
      00093A AC*39            [24] 2432 	mov	r4,_drawChar_PARM_2
      00093C AD*3A            [24] 2433 	mov	r5,(_drawChar_PARM_2 + 1)
      00093E C3               [12] 2434 	clr	c
      00093F EC               [12] 2435 	mov	a,r4
      000940 94 40            [12] 2436 	subb	a,#0x40
      000942 ED               [12] 2437 	mov	a,r5
      000943 64 80            [12] 2438 	xrl	a,#0x80
      000945 94 81            [12] 2439 	subb	a,#0x81
      000947 50 58            [24] 2440 	jnc	00101$
                                   2441 ;	ecen4330_lcd_v3.c:393: ((x + 6 * size - 1) < 0) ||
      000949 AA*40            [24] 2442 	mov	r2,_drawChar_PARM_6
      00094B 7B 00            [12] 2443 	mov	r3,#0x00
      00094D 8A*00            [24] 2444 	mov	__mulint_PARM_2,r2
      00094F 8B*01            [24] 2445 	mov	(__mulint_PARM_2 + 1),r3
      000951 90 00 06         [24] 2446 	mov	dptr,#0x0006
      000954 C0 07            [24] 2447 	push	ar7
      000956 C0 06            [24] 2448 	push	ar6
      000958 C0 05            [24] 2449 	push	ar5
      00095A C0 04            [24] 2450 	push	ar4
      00095C C0 03            [24] 2451 	push	ar3
      00095E C0 02            [24] 2452 	push	ar2
      000960 12r00r00         [24] 2453 	lcall	__mulint
      000963 A8 82            [24] 2454 	mov	r0,dpl
      000965 A9 83            [24] 2455 	mov	r1,dph
      000967 D0 02            [24] 2456 	pop	ar2
      000969 D0 03            [24] 2457 	pop	ar3
      00096B D0 04            [24] 2458 	pop	ar4
      00096D D0 05            [24] 2459 	pop	ar5
      00096F D0 06            [24] 2460 	pop	ar6
      000971 D0 07            [24] 2461 	pop	ar7
      000973 E8               [12] 2462 	mov	a,r0
      000974 2E               [12] 2463 	add	a,r6
      000975 F8               [12] 2464 	mov	r0,a
      000976 E9               [12] 2465 	mov	a,r1
      000977 3F               [12] 2466 	addc	a,r7
      000978 F9               [12] 2467 	mov	r1,a
      000979 18               [12] 2468 	dec	r0
      00097A B8 FF 01         [24] 2469 	cjne	r0,#0xff,00176$
      00097D 19               [12] 2470 	dec	r1
      00097E                       2471 00176$:
      00097E E9               [12] 2472 	mov	a,r1
      00097F 20 E7 1F         [24] 2473 	jb	acc.7,00101$
                                   2474 ;	ecen4330_lcd_v3.c:394: ((y + 8 * size - 1) < 0))
      000982 EB               [12] 2475 	mov	a,r3
      000983 C4               [12] 2476 	swap	a
      000984 03               [12] 2477 	rr	a
      000985 54 F8            [12] 2478 	anl	a,#0xf8
      000987 CA               [12] 2479 	xch	a,r2
      000988 C4               [12] 2480 	swap	a
      000989 03               [12] 2481 	rr	a
      00098A CA               [12] 2482 	xch	a,r2
      00098B 6A               [12] 2483 	xrl	a,r2
      00098C CA               [12] 2484 	xch	a,r2
      00098D 54 F8            [12] 2485 	anl	a,#0xf8
      00098F CA               [12] 2486 	xch	a,r2
      000990 6A               [12] 2487 	xrl	a,r2
      000991 FB               [12] 2488 	mov	r3,a
      000992 EA               [12] 2489 	mov	a,r2
      000993 2C               [12] 2490 	add	a,r4
      000994 FA               [12] 2491 	mov	r2,a
      000995 EB               [12] 2492 	mov	a,r3
      000996 3D               [12] 2493 	addc	a,r5
      000997 FB               [12] 2494 	mov	r3,a
      000998 1A               [12] 2495 	dec	r2
      000999 BA FF 01         [24] 2496 	cjne	r2,#0xff,00178$
      00099C 1B               [12] 2497 	dec	r3
      00099D                       2498 00178$:
      00099D EB               [12] 2499 	mov	a,r3
      00099E 30 E7 01         [24] 2500 	jnb	acc.7,00138$
      0009A1                       2501 00101$:
                                   2502 ;	ecen4330_lcd_v3.c:396: return;
      0009A1 22               [24] 2503 	ret
                                   2504 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      0009A2                       2505 00138$:
      0009A2 74 01            [12] 2506 	mov	a,#0x01
      0009A4 B5*40 04         [24] 2507 	cjne	a,_drawChar_PARM_6,00180$
      0009A7 74 01            [12] 2508 	mov	a,#0x01
      0009A9 80 01            [24] 2509 	sjmp	00181$
      0009AB                       2510 00180$:
      0009AB E4               [12] 2511 	clr	a
      0009AC                       2512 00181$:
      0009AC FB               [12] 2513 	mov	r3,a
      0009AD 8B*47            [24] 2514 	mov	_drawChar_sloc5_1_0,r3
      0009AF E5*3C            [12] 2515 	mov	a,_drawChar_PARM_4
      0009B1 B5*3E 08         [24] 2516 	cjne	a,_drawChar_PARM_5,00182$
      0009B4 E5*3D            [12] 2517 	mov	a,(_drawChar_PARM_4 + 1)
      0009B6 B5*3F 03         [24] 2518 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009B9 D3               [12] 2519 	setb	c
      0009BA 80 01            [24] 2520 	sjmp	00183$
      0009BC                       2521 00182$:
      0009BC C3               [12] 2522 	clr	c
      0009BD                       2523 00183$:
      0009BD 92*00            [24] 2524 	mov	_drawChar_sloc0_1_0,c
      0009BF 79 00            [12] 2525 	mov	r1,#0x00
      0009C1                       2526 00124$:
                                   2527 ;	ecen4330_lcd_v3.c:405: if (i == 5)
      0009C1 B9 05 07         [24] 2528 	cjne	r1,#0x05,00107$
                                   2529 ;	ecen4330_lcd_v3.c:407: line = 0x0;
      0009C4 90r00r0A         [24] 2530 	mov	dptr,#_drawChar_line_196609_153
      0009C7 E4               [12] 2531 	clr	a
      0009C8 F0               [24] 2532 	movx	@dptr,a
      0009C9 80 49            [24] 2533 	sjmp	00136$
      0009CB                       2534 00107$:
                                   2535 ;	ecen4330_lcd_v3.c:411: line = pgm_read_byte(font+(c*5)+i);
      0009CB 85*3B*00         [24] 2536 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009CE 75*01 00         [24] 2537 	mov	(__mulint_PARM_2 + 1),#0x00
      0009D1 90 00 05         [24] 2538 	mov	dptr,#0x0005
      0009D4 C0 07            [24] 2539 	push	ar7
      0009D6 C0 06            [24] 2540 	push	ar6
      0009D8 C0 05            [24] 2541 	push	ar5
      0009DA C0 04            [24] 2542 	push	ar4
      0009DC C0 03            [24] 2543 	push	ar3
      0009DE C0 01            [24] 2544 	push	ar1
      0009E0 12r00r00         [24] 2545 	lcall	__mulint
      0009E3 A8 82            [24] 2546 	mov	r0,dpl
      0009E5 AA 83            [24] 2547 	mov	r2,dph
      0009E7 D0 01            [24] 2548 	pop	ar1
      0009E9 D0 03            [24] 2549 	pop	ar3
      0009EB D0 04            [24] 2550 	pop	ar4
      0009ED D0 05            [24] 2551 	pop	ar5
      0009EF D0 06            [24] 2552 	pop	ar6
      0009F1 D0 07            [24] 2553 	pop	ar7
      0009F3 E8               [12] 2554 	mov	a,r0
      0009F4 24r00            [12] 2555 	add	a,#_font
      0009F6 F5*41            [12] 2556 	mov	_drawChar_sloc1_1_0,a
      0009F8 EA               [12] 2557 	mov	a,r2
      0009F9 34s00            [12] 2558 	addc	a,#(_font >> 8)
      0009FB F5*42            [12] 2559 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009FD E9               [12] 2560 	mov	a,r1
      0009FE F8               [12] 2561 	mov	r0,a
      0009FF 33               [12] 2562 	rlc	a
      000A00 95 E0            [12] 2563 	subb	a,acc
      000A02 FA               [12] 2564 	mov	r2,a
      000A03 E8               [12] 2565 	mov	a,r0
      000A04 25*41            [12] 2566 	add	a,_drawChar_sloc1_1_0
      000A06 F5 82            [12] 2567 	mov	dpl,a
      000A08 EA               [12] 2568 	mov	a,r2
      000A09 35*42            [12] 2569 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A0B F5 83            [12] 2570 	mov	dph,a
      000A0D E4               [12] 2571 	clr	a
      000A0E 93               [24] 2572 	movc	a,@a+dptr
      000A0F FA               [12] 2573 	mov	r2,a
      000A10 90r00r0A         [24] 2574 	mov	dptr,#_drawChar_line_196609_153
      000A13 F0               [24] 2575 	movx	@dptr,a
                                   2576 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
                                   2577 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000A14                       2578 00136$:
      000A14 C2 D5            [12] 2579 	clr	F0
      000A16 85*40 F0         [24] 2580 	mov	b,_drawChar_PARM_6
      000A19 E9               [12] 2581 	mov	a,r1
      000A1A 30 E7 04         [24] 2582 	jnb	acc.7,00186$
      000A1D B2 D5            [12] 2583 	cpl	F0
      000A1F F4               [12] 2584 	cpl	a
      000A20 04               [12] 2585 	inc	a
      000A21                       2586 00186$:
      000A21 A4               [48] 2587 	mul	ab
      000A22 30 D5 0A         [24] 2588 	jnb	F0,00187$
      000A25 F4               [12] 2589 	cpl	a
      000A26 24 01            [12] 2590 	add	a,#0x01
      000A28 C5 F0            [12] 2591 	xch	a,b
      000A2A F4               [12] 2592 	cpl	a
      000A2B 34 00            [12] 2593 	addc	a,#0x00
      000A2D C5 F0            [12] 2594 	xch	a,b
      000A2F                       2595 00187$:
      000A2F 2E               [12] 2596 	add	a,r6
      000A30 F5*41            [12] 2597 	mov	_drawChar_sloc1_1_0,a
      000A32 EF               [12] 2598 	mov	a,r7
      000A33 35 F0            [12] 2599 	addc	a,b
      000A35 F5*42            [12] 2600 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A37 89 00            [24] 2601 	mov	ar0,r1
      000A39 85*41*43         [24] 2602 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A3C 85*42*44         [24] 2603 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A3F 89*45            [24] 2604 	mov	_drawChar_sloc3_1_0,r1
      000A41 75*46 00         [24] 2605 	mov	_drawChar_sloc4_1_0,#0x00
      000A44                       2606 00122$:
                                   2607 ;	ecen4330_lcd_v3.c:418: if (line & 0x1)
      000A44 90r00r0A         [24] 2608 	mov	dptr,#_drawChar_line_196609_153
      000A47 E0               [24] 2609 	movx	a,@dptr
      000A48 20 E0 03         [24] 2610 	jb	acc.0,00188$
      000A4B 02r0Br03         [24] 2611 	ljmp	00118$
      000A4E                       2612 00188$:
                                   2613 ;	ecen4330_lcd_v3.c:420: if (size == 1)
      000A4E EB               [12] 2614 	mov	a,r3
      000A4F 60 4E            [24] 2615 	jz	00110$
                                   2616 ;	ecen4330_lcd_v3.c:422: drawPixel(x+i, y+j, color);
      000A51 C0 00            [24] 2617 	push	ar0
      000A53 E5*45            [12] 2618 	mov	a,_drawChar_sloc3_1_0
      000A55 F8               [12] 2619 	mov	r0,a
      000A56 33               [12] 2620 	rlc	a
      000A57 95 E0            [12] 2621 	subb	a,acc
      000A59 FA               [12] 2622 	mov	r2,a
      000A5A E8               [12] 2623 	mov	a,r0
      000A5B 2E               [12] 2624 	add	a,r6
      000A5C F8               [12] 2625 	mov	r0,a
      000A5D EA               [12] 2626 	mov	a,r2
      000A5E 3F               [12] 2627 	addc	a,r7
      000A5F FA               [12] 2628 	mov	r2,a
      000A60 88 82            [24] 2629 	mov	dpl,r0
      000A62 8A 83            [24] 2630 	mov	dph,r2
      000A64 E5*46            [12] 2631 	mov	a,_drawChar_sloc4_1_0
      000A66 F8               [12] 2632 	mov	r0,a
      000A67 33               [12] 2633 	rlc	a
      000A68 95 E0            [12] 2634 	subb	a,acc
      000A6A FA               [12] 2635 	mov	r2,a
      000A6B E8               [12] 2636 	mov	a,r0
      000A6C 2C               [12] 2637 	add	a,r4
      000A6D F8               [12] 2638 	mov	r0,a
      000A6E EA               [12] 2639 	mov	a,r2
      000A6F 3D               [12] 2640 	addc	a,r5
      000A70 FA               [12] 2641 	mov	r2,a
      000A71 88*16            [24] 2642 	mov	_drawPixel_PARM_2,r0
      000A73 8A*17            [24] 2643 	mov	(_drawPixel_PARM_2 + 1),r2
      000A75 85*3C*18         [24] 2644 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A78 85*3D*19         [24] 2645 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A7B C0 07            [24] 2646 	push	ar7
      000A7D C0 06            [24] 2647 	push	ar6
      000A7F C0 05            [24] 2648 	push	ar5
      000A81 C0 04            [24] 2649 	push	ar4
      000A83 C0 03            [24] 2650 	push	ar3
      000A85 C0 01            [24] 2651 	push	ar1
      000A87 C0 00            [24] 2652 	push	ar0
      000A89 12r03r61         [24] 2653 	lcall	_drawPixel
      000A8C D0 00            [24] 2654 	pop	ar0
      000A8E D0 01            [24] 2655 	pop	ar1
      000A90 D0 03            [24] 2656 	pop	ar3
      000A92 D0 04            [24] 2657 	pop	ar4
      000A94 D0 05            [24] 2658 	pop	ar5
      000A96 D0 06            [24] 2659 	pop	ar6
      000A98 D0 07            [24] 2660 	pop	ar7
      000A9A D0 00            [24] 2661 	pop	ar0
      000A9C 02r0BrBA         [24] 2662 	ljmp	00119$
      000A9F                       2663 00110$:
                                   2664 ;	ecen4330_lcd_v3.c:425: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A9F C0 00            [24] 2665 	push	ar0
      000AA1 85*43 82         [24] 2666 	mov	dpl,_drawChar_sloc2_1_0
      000AA4 85*44 83         [24] 2667 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000AA7 C2 D5            [12] 2668 	clr	F0
      000AA9 85*40 F0         [24] 2669 	mov	b,_drawChar_PARM_6
      000AAC E5*46            [12] 2670 	mov	a,_drawChar_sloc4_1_0
      000AAE 30 E7 04         [24] 2671 	jnb	acc.7,00190$
      000AB1 B2 D5            [12] 2672 	cpl	F0
      000AB3 F4               [12] 2673 	cpl	a
      000AB4 04               [12] 2674 	inc	a
      000AB5                       2675 00190$:
      000AB5 A4               [48] 2676 	mul	ab
      000AB6 30 D5 0A         [24] 2677 	jnb	F0,00191$
      000AB9 F4               [12] 2678 	cpl	a
      000ABA 24 01            [12] 2679 	add	a,#0x01
      000ABC C5 F0            [12] 2680 	xch	a,b
      000ABE F4               [12] 2681 	cpl	a
      000ABF 34 00            [12] 2682 	addc	a,#0x00
      000AC1 C5 F0            [12] 2683 	xch	a,b
      000AC3                       2684 00191$:
      000AC3 2C               [12] 2685 	add	a,r4
      000AC4 F8               [12] 2686 	mov	r0,a
      000AC5 ED               [12] 2687 	mov	a,r5
      000AC6 35 F0            [12] 2688 	addc	a,b
      000AC8 FA               [12] 2689 	mov	r2,a
      000AC9 88*31            [24] 2690 	mov	_fillRect_PARM_2,r0
      000ACB 8A*32            [24] 2691 	mov	(_fillRect_PARM_2 + 1),r2
      000ACD A8*40            [24] 2692 	mov	r0,_drawChar_PARM_6
      000ACF 7A 00            [12] 2693 	mov	r2,#0x00
      000AD1 88*33            [24] 2694 	mov	_fillRect_PARM_3,r0
      000AD3 8A*34            [24] 2695 	mov	(_fillRect_PARM_3 + 1),r2
      000AD5 88*35            [24] 2696 	mov	_fillRect_PARM_4,r0
      000AD7 8A*36            [24] 2697 	mov	(_fillRect_PARM_4 + 1),r2
      000AD9 85*3C*37         [24] 2698 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000ADC 85*3D*38         [24] 2699 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000ADF C0 07            [24] 2700 	push	ar7
      000AE1 C0 06            [24] 2701 	push	ar6
      000AE3 C0 05            [24] 2702 	push	ar5
      000AE5 C0 04            [24] 2703 	push	ar4
      000AE7 C0 03            [24] 2704 	push	ar3
      000AE9 C0 01            [24] 2705 	push	ar1
      000AEB C0 00            [24] 2706 	push	ar0
      000AED 12r07r63         [24] 2707 	lcall	_fillRect
      000AF0 D0 00            [24] 2708 	pop	ar0
      000AF2 D0 01            [24] 2709 	pop	ar1
      000AF4 D0 03            [24] 2710 	pop	ar3
      000AF6 D0 04            [24] 2711 	pop	ar4
      000AF8 D0 05            [24] 2712 	pop	ar5
      000AFA D0 06            [24] 2713 	pop	ar6
      000AFC D0 07            [24] 2714 	pop	ar7
      000AFE D0 00            [24] 2715 	pop	ar0
      000B00 02r0BrBA         [24] 2716 	ljmp	00119$
      000B03                       2717 00118$:
                                   2718 ;	ecen4330_lcd_v3.c:427: } else if (bg != color)
      000B03 30*00 03         [24] 2719 	jnb	_drawChar_sloc0_1_0,00192$
      000B06 02r0BrBA         [24] 2720 	ljmp	00119$
      000B09                       2721 00192$:
                                   2722 ;	ecen4330_lcd_v3.c:429: if (size == 1)
      000B09 E5*47            [12] 2723 	mov	a,_drawChar_sloc5_1_0
      000B0B 60 4C            [24] 2724 	jz	00113$
                                   2725 ;	ecen4330_lcd_v3.c:431: drawPixel(x+i, y+j, bg);
      000B0D C0 03            [24] 2726 	push	ar3
      000B0F E8               [12] 2727 	mov	a,r0
      000B10 FA               [12] 2728 	mov	r2,a
      000B11 33               [12] 2729 	rlc	a
      000B12 95 E0            [12] 2730 	subb	a,acc
      000B14 FB               [12] 2731 	mov	r3,a
      000B15 EA               [12] 2732 	mov	a,r2
      000B16 2E               [12] 2733 	add	a,r6
      000B17 FA               [12] 2734 	mov	r2,a
      000B18 EB               [12] 2735 	mov	a,r3
      000B19 3F               [12] 2736 	addc	a,r7
      000B1A FB               [12] 2737 	mov	r3,a
      000B1B 8A 82            [24] 2738 	mov	dpl,r2
      000B1D 8B 83            [24] 2739 	mov	dph,r3
      000B1F E5*46            [12] 2740 	mov	a,_drawChar_sloc4_1_0
      000B21 FA               [12] 2741 	mov	r2,a
      000B22 33               [12] 2742 	rlc	a
      000B23 95 E0            [12] 2743 	subb	a,acc
      000B25 FB               [12] 2744 	mov	r3,a
      000B26 EA               [12] 2745 	mov	a,r2
      000B27 2C               [12] 2746 	add	a,r4
      000B28 FA               [12] 2747 	mov	r2,a
      000B29 EB               [12] 2748 	mov	a,r3
      000B2A 3D               [12] 2749 	addc	a,r5
      000B2B FB               [12] 2750 	mov	r3,a
      000B2C 8A*16            [24] 2751 	mov	_drawPixel_PARM_2,r2
      000B2E 8B*17            [24] 2752 	mov	(_drawPixel_PARM_2 + 1),r3
      000B30 85*3E*18         [24] 2753 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B33 85*3F*19         [24] 2754 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B36 C0 07            [24] 2755 	push	ar7
      000B38 C0 06            [24] 2756 	push	ar6
      000B3A C0 05            [24] 2757 	push	ar5
      000B3C C0 04            [24] 2758 	push	ar4
      000B3E C0 03            [24] 2759 	push	ar3
      000B40 C0 01            [24] 2760 	push	ar1
      000B42 C0 00            [24] 2761 	push	ar0
      000B44 12r03r61         [24] 2762 	lcall	_drawPixel
      000B47 D0 00            [24] 2763 	pop	ar0
      000B49 D0 01            [24] 2764 	pop	ar1
      000B4B D0 03            [24] 2765 	pop	ar3
      000B4D D0 04            [24] 2766 	pop	ar4
      000B4F D0 05            [24] 2767 	pop	ar5
      000B51 D0 06            [24] 2768 	pop	ar6
      000B53 D0 07            [24] 2769 	pop	ar7
      000B55 D0 03            [24] 2770 	pop	ar3
      000B57 80 61            [24] 2771 	sjmp	00119$
      000B59                       2772 00113$:
                                   2773 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000B59 C0 00            [24] 2774 	push	ar0
      000B5B 85*41 82         [24] 2775 	mov	dpl,_drawChar_sloc1_1_0
      000B5E 85*42 83         [24] 2776 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B61 C2 D5            [12] 2777 	clr	F0
      000B63 85*40 F0         [24] 2778 	mov	b,_drawChar_PARM_6
      000B66 E5*46            [12] 2779 	mov	a,_drawChar_sloc4_1_0
      000B68 30 E7 04         [24] 2780 	jnb	acc.7,00194$
      000B6B B2 D5            [12] 2781 	cpl	F0
      000B6D F4               [12] 2782 	cpl	a
      000B6E 04               [12] 2783 	inc	a
      000B6F                       2784 00194$:
      000B6F A4               [48] 2785 	mul	ab
      000B70 30 D5 0A         [24] 2786 	jnb	F0,00195$
      000B73 F4               [12] 2787 	cpl	a
      000B74 24 01            [12] 2788 	add	a,#0x01
      000B76 C5 F0            [12] 2789 	xch	a,b
      000B78 F4               [12] 2790 	cpl	a
      000B79 34 00            [12] 2791 	addc	a,#0x00
      000B7B C5 F0            [12] 2792 	xch	a,b
      000B7D                       2793 00195$:
      000B7D 2C               [12] 2794 	add	a,r4
      000B7E F8               [12] 2795 	mov	r0,a
      000B7F ED               [12] 2796 	mov	a,r5
      000B80 35 F0            [12] 2797 	addc	a,b
      000B82 FA               [12] 2798 	mov	r2,a
      000B83 88*31            [24] 2799 	mov	_fillRect_PARM_2,r0
      000B85 8A*32            [24] 2800 	mov	(_fillRect_PARM_2 + 1),r2
      000B87 A8*40            [24] 2801 	mov	r0,_drawChar_PARM_6
      000B89 7A 00            [12] 2802 	mov	r2,#0x00
      000B8B 88*33            [24] 2803 	mov	_fillRect_PARM_3,r0
      000B8D 8A*34            [24] 2804 	mov	(_fillRect_PARM_3 + 1),r2
      000B8F 88*35            [24] 2805 	mov	_fillRect_PARM_4,r0
      000B91 8A*36            [24] 2806 	mov	(_fillRect_PARM_4 + 1),r2
      000B93 85*3E*37         [24] 2807 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B96 85*3F*38         [24] 2808 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B99 C0 07            [24] 2809 	push	ar7
      000B9B C0 06            [24] 2810 	push	ar6
      000B9D C0 05            [24] 2811 	push	ar5
      000B9F C0 04            [24] 2812 	push	ar4
      000BA1 C0 03            [24] 2813 	push	ar3
      000BA3 C0 01            [24] 2814 	push	ar1
      000BA5 C0 00            [24] 2815 	push	ar0
      000BA7 12r07r63         [24] 2816 	lcall	_fillRect
      000BAA D0 00            [24] 2817 	pop	ar0
      000BAC D0 01            [24] 2818 	pop	ar1
      000BAE D0 03            [24] 2819 	pop	ar3
      000BB0 D0 04            [24] 2820 	pop	ar4
      000BB2 D0 05            [24] 2821 	pop	ar5
      000BB4 D0 06            [24] 2822 	pop	ar6
      000BB6 D0 07            [24] 2823 	pop	ar7
                                   2824 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BB8 D0 00            [24] 2825 	pop	ar0
                                   2826 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000BBA                       2827 00119$:
                                   2828 ;	ecen4330_lcd_v3.c:439: line >>= 1;
      000BBA 90r00r0A         [24] 2829 	mov	dptr,#_drawChar_line_196609_153
      000BBD E0               [24] 2830 	movx	a,@dptr
      000BBE C3               [12] 2831 	clr	c
      000BBF 13               [12] 2832 	rrc	a
      000BC0 FA               [12] 2833 	mov	r2,a
      000BC1 F0               [24] 2834 	movx	@dptr,a
                                   2835 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000BC2 05*46            [12] 2836 	inc	_drawChar_sloc4_1_0
      000BC4 C3               [12] 2837 	clr	c
      000BC5 E5*46            [12] 2838 	mov	a,_drawChar_sloc4_1_0
      000BC7 64 80            [12] 2839 	xrl	a,#0x80
      000BC9 94 88            [12] 2840 	subb	a,#0x88
      000BCB 50 03            [24] 2841 	jnc	00196$
      000BCD 02r0Ar44         [24] 2842 	ljmp	00122$
      000BD0                       2843 00196$:
                                   2844 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BD0 09               [12] 2845 	inc	r1
      000BD1 C3               [12] 2846 	clr	c
      000BD2 E9               [12] 2847 	mov	a,r1
      000BD3 64 80            [12] 2848 	xrl	a,#0x80
      000BD5 94 86            [12] 2849 	subb	a,#0x86
      000BD7 50 03            [24] 2850 	jnc	00197$
      000BD9 02r09rC1         [24] 2851 	ljmp	00124$
      000BDC                       2852 00197$:
                                   2853 ;	ecen4330_lcd_v3.c:443: }
      000BDC 22               [24] 2854 	ret
                                   2855 ;------------------------------------------------------------
                                   2856 ;Allocation info for local variables in function 'write'
                                   2857 ;------------------------------------------------------------
                                   2858 ;c                         Allocated to registers r7 
                                   2859 ;------------------------------------------------------------
                                   2860 ;	ecen4330_lcd_v3.c:450: void write (uint8_t c)
                                   2861 ;	-----------------------------------------
                                   2862 ;	 function write
                                   2863 ;	-----------------------------------------
      000BDD                       2864 _write:
      000BDD AF 82            [24] 2865 	mov	r7,dpl
                                   2866 ;	ecen4330_lcd_v3.c:452: if (c == '\n')
      000BDF BF 0A 26         [24] 2867 	cjne	r7,#0x0a,00105$
                                   2868 ;	ecen4330_lcd_v3.c:454: cursor_y += textsize*8;
      000BE2 AD*10            [24] 2869 	mov	r5,_textsize
      000BE4 E4               [12] 2870 	clr	a
      000BE5 C4               [12] 2871 	swap	a
      000BE6 03               [12] 2872 	rr	a
      000BE7 54 F8            [12] 2873 	anl	a,#0xf8
      000BE9 CD               [12] 2874 	xch	a,r5
      000BEA C4               [12] 2875 	swap	a
      000BEB 03               [12] 2876 	rr	a
      000BEC CD               [12] 2877 	xch	a,r5
      000BED 6D               [12] 2878 	xrl	a,r5
      000BEE CD               [12] 2879 	xch	a,r5
      000BEF 54 F8            [12] 2880 	anl	a,#0xf8
      000BF1 CD               [12] 2881 	xch	a,r5
      000BF2 6D               [12] 2882 	xrl	a,r5
      000BF3 FE               [12] 2883 	mov	r6,a
      000BF4 AB*0E            [24] 2884 	mov	r3,_cursor_y
      000BF6 AC*0F            [24] 2885 	mov	r4,(_cursor_y + 1)
      000BF8 ED               [12] 2886 	mov	a,r5
      000BF9 2B               [12] 2887 	add	a,r3
      000BFA FB               [12] 2888 	mov	r3,a
      000BFB EE               [12] 2889 	mov	a,r6
      000BFC 3C               [12] 2890 	addc	a,r4
      000BFD FC               [12] 2891 	mov	r4,a
      000BFE 8B*0E            [24] 2892 	mov	_cursor_y,r3
      000C00 8C*0F            [24] 2893 	mov	(_cursor_y + 1),r4
                                   2894 ;	ecen4330_lcd_v3.c:455: cursor_x  = 0;
      000C02 E4               [12] 2895 	clr	a
      000C03 F5*0C            [12] 2896 	mov	_cursor_x,a
      000C05 F5*0D            [12] 2897 	mov	(_cursor_x + 1),a
      000C07 22               [24] 2898 	ret
      000C08                       2899 00105$:
                                   2900 ;	ecen4330_lcd_v3.c:457: else if (c == '\r')
      000C08 BF 0D 01         [24] 2901 	cjne	r7,#0x0d,00119$
      000C0B 22               [24] 2902 	ret
      000C0C                       2903 00119$:
                                   2904 ;	ecen4330_lcd_v3.c:462: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C0C 85*0E*39         [24] 2905 	mov	_drawChar_PARM_2,_cursor_y
      000C0F 85*0F*3A         [24] 2906 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C12 8F*3B            [24] 2907 	mov	_drawChar_PARM_3,r7
      000C14 85*12*3C         [24] 2908 	mov	_drawChar_PARM_4,_textcolor
      000C17 85*13*3D         [24] 2909 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C1A 85*14*3E         [24] 2910 	mov	_drawChar_PARM_5,_textbgcolor
      000C1D 85*15*3F         [24] 2911 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C20 85*10*40         [24] 2912 	mov	_drawChar_PARM_6,_textsize
      000C23 85*0C 82         [24] 2913 	mov	dpl,_cursor_x
      000C26 85*0D 83         [24] 2914 	mov	dph,(_cursor_x + 1)
      000C29 12r09r2B         [24] 2915 	lcall	_drawChar
                                   2916 ;	ecen4330_lcd_v3.c:463: cursor_x += textsize*6;
      000C2C 85*10*00         [24] 2917 	mov	__mulint_PARM_2,_textsize
      000C2F 75*01 00         [24] 2918 	mov	(__mulint_PARM_2 + 1),#0x00
      000C32 90 00 06         [24] 2919 	mov	dptr,#0x0006
      000C35 12r00r00         [24] 2920 	lcall	__mulint
      000C38 AE 82            [24] 2921 	mov	r6,dpl
      000C3A AF 83            [24] 2922 	mov	r7,dph
      000C3C AC*0C            [24] 2923 	mov	r4,_cursor_x
      000C3E AD*0D            [24] 2924 	mov	r5,(_cursor_x + 1)
      000C40 EE               [12] 2925 	mov	a,r6
      000C41 2C               [12] 2926 	add	a,r4
      000C42 FC               [12] 2927 	mov	r4,a
      000C43 EF               [12] 2928 	mov	a,r7
      000C44 3D               [12] 2929 	addc	a,r5
      000C45 FD               [12] 2930 	mov	r5,a
      000C46 8C*0C            [24] 2931 	mov	_cursor_x,r4
      000C48 8D*0D            [24] 2932 	mov	(_cursor_x + 1),r5
                                   2933 ;	ecen4330_lcd_v3.c:465: }
      000C4A 22               [24] 2934 	ret
                                   2935 ;------------------------------------------------------------
                                   2936 ;Allocation info for local variables in function 'LCD_string_write'
                                   2937 ;------------------------------------------------------------
                                   2938 ;str                       Allocated to registers r5 r6 r7 
                                   2939 ;i                         Allocated with name '_LCD_string_write_i_65536_171'
                                   2940 ;------------------------------------------------------------
                                   2941 ;	ecen4330_lcd_v3.c:472: void LCD_string_write (int8_t *str)
                                   2942 ;	-----------------------------------------
                                   2943 ;	 function LCD_string_write
                                   2944 ;	-----------------------------------------
      000C4B                       2945 _LCD_string_write:
      000C4B AD 82            [24] 2946 	mov	r5,dpl
      000C4D AE 83            [24] 2947 	mov	r6,dph
      000C4F AF F0            [24] 2948 	mov	r7,b
                                   2949 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C51 7B 00            [12] 2950 	mov	r3,#0x00
      000C53 7C 00            [12] 2951 	mov	r4,#0x00
      000C55                       2952 00103$:
      000C55 EB               [12] 2953 	mov	a,r3
      000C56 2D               [12] 2954 	add	a,r5
      000C57 F8               [12] 2955 	mov	r0,a
      000C58 EC               [12] 2956 	mov	a,r4
      000C59 3E               [12] 2957 	addc	a,r6
      000C5A F9               [12] 2958 	mov	r1,a
      000C5B 8F 02            [24] 2959 	mov	ar2,r7
      000C5D 88 82            [24] 2960 	mov	dpl,r0
      000C5F 89 83            [24] 2961 	mov	dph,r1
      000C61 8A F0            [24] 2962 	mov	b,r2
      000C63 12r00r00         [24] 2963 	lcall	__gptrget
      000C66 FA               [12] 2964 	mov	r2,a
      000C67 60 20            [24] 2965 	jz	00105$
                                   2966 ;	ecen4330_lcd_v3.c:477: write(str[i]);
      000C69 8A 82            [24] 2967 	mov	dpl,r2
      000C6B C0 07            [24] 2968 	push	ar7
      000C6D C0 06            [24] 2969 	push	ar6
      000C6F C0 05            [24] 2970 	push	ar5
      000C71 C0 04            [24] 2971 	push	ar4
      000C73 C0 03            [24] 2972 	push	ar3
      000C75 12r0BrDD         [24] 2973 	lcall	_write
      000C78 D0 03            [24] 2974 	pop	ar3
      000C7A D0 04            [24] 2975 	pop	ar4
      000C7C D0 05            [24] 2976 	pop	ar5
      000C7E D0 06            [24] 2977 	pop	ar6
      000C80 D0 07            [24] 2978 	pop	ar7
                                   2979 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C82 0B               [12] 2980 	inc	r3
      000C83 BB 00 CF         [24] 2981 	cjne	r3,#0x00,00103$
      000C86 0C               [12] 2982 	inc	r4
      000C87 80 CC            [24] 2983 	sjmp	00103$
      000C89                       2984 00105$:
                                   2985 ;	ecen4330_lcd_v3.c:479: }
      000C89 22               [24] 2986 	ret
                                   2987 ;------------------------------------------------------------
                                   2988 ;Allocation info for local variables in function 'testRAM'
                                   2989 ;------------------------------------------------------------
                                   2990 ;d                         Allocated with name '_testRAM_d_65536_174'
                                   2991 ;i                         Allocated with name '_testRAM_i_65536_175'
                                   2992 ;ram_address               Allocated to registers 
                                   2993 ;------------------------------------------------------------
                                   2994 ;	ecen4330_lcd_v3.c:486: void testRAM (__xdata uint8_t d) {
                                   2995 ;	-----------------------------------------
                                   2996 ;	 function testRAM
                                   2997 ;	-----------------------------------------
      000C8A                       2998 _testRAM:
      000C8A E5 82            [12] 2999 	mov	a,dpl
      000C8C 90r00r0B         [24] 3000 	mov	dptr,#_testRAM_d_65536_174
      000C8F F0               [24] 3001 	movx	@dptr,a
                                   3002 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C90 E0               [24] 3003 	movx	a,@dptr
      000C91 FF               [12] 3004 	mov	r7,a
      000C92 7B 00            [12] 3005 	mov	r3,#0x00
      000C94 7C 00            [12] 3006 	mov	r4,#0x00
      000C96 7D 00            [12] 3007 	mov	r5,#0x00
      000C98 7E 00            [12] 3008 	mov	r6,#0x00
      000C9A                       3009 00102$:
                                   3010 ;	ecen4330_lcd_v3.c:491: IOM = 0;
                                   3011 ;	assignBit
      000C9A C2 B4            [12] 3012 	clr	_P3_4
                                   3013 ;	ecen4330_lcd_v3.c:492: ram_address = (uint8_t __xdata*)(i);
      000C9C 8B 82            [24] 3014 	mov	dpl,r3
      000C9E 8C 83            [24] 3015 	mov	dph,r4
                                   3016 ;	ecen4330_lcd_v3.c:493: *ram_address = d;
      000CA0 EF               [12] 3017 	mov	a,r7
      000CA1 F0               [24] 3018 	movx	@dptr,a
                                   3019 ;	ecen4330_lcd_v3.c:494: IOM = 1;
                                   3020 ;	assignBit
      000CA2 D2 B4            [12] 3021 	setb	_P3_4
                                   3022 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CA4 0B               [12] 3023 	inc	r3
      000CA5 BB 00 09         [24] 3024 	cjne	r3,#0x00,00111$
      000CA8 0C               [12] 3025 	inc	r4
      000CA9 BC 00 05         [24] 3026 	cjne	r4,#0x00,00111$
      000CAC 0D               [12] 3027 	inc	r5
      000CAD BD 00 01         [24] 3028 	cjne	r5,#0x00,00111$
      000CB0 0E               [12] 3029 	inc	r6
      000CB1                       3030 00111$:
      000CB1 C3               [12] 3031 	clr	c
      000CB2 EB               [12] 3032 	mov	a,r3
      000CB3 94 FF            [12] 3033 	subb	a,#0xff
      000CB5 EC               [12] 3034 	mov	a,r4
      000CB6 94 FF            [12] 3035 	subb	a,#0xff
      000CB8 ED               [12] 3036 	mov	a,r5
      000CB9 94 00            [12] 3037 	subb	a,#0x00
      000CBB EE               [12] 3038 	mov	a,r6
      000CBC 94 00            [12] 3039 	subb	a,#0x00
      000CBE 40 DA            [24] 3040 	jc	00102$
                                   3041 ;	ecen4330_lcd_v3.c:496: }
      000CC0 22               [24] 3042 	ret
                                   3043 ;------------------------------------------------------------
                                   3044 ;Allocation info for local variables in function 'freeType'
                                   3045 ;------------------------------------------------------------
                                   3046 ;count                     Allocated with name '_freeType_count_65536_178'
                                   3047 ;d                         Allocated with name '_freeType_d_65536_178'
                                   3048 ;------------------------------------------------------------
                                   3049 ;	ecen4330_lcd_v3.c:502: void freeType () {
                                   3050 ;	-----------------------------------------
                                   3051 ;	 function freeType
                                   3052 ;	-----------------------------------------
      000CC1                       3053 _freeType:
                                   3054 ;	ecen4330_lcd_v3.c:503: __xdata uint8_t count = 0;
      000CC1 90r00r0C         [24] 3055 	mov	dptr,#_freeType_count_65536_178
      000CC4 E4               [12] 3056 	clr	a
      000CC5 F0               [24] 3057 	movx	@dptr,a
                                   3058 ;	ecen4330_lcd_v3.c:505: while (1) {
      000CC6                       3059 00105$:
                                   3060 ;	ecen4330_lcd_v3.c:508: if (count == 8) {
      000CC6 90r00r0C         [24] 3061 	mov	dptr,#_freeType_count_65536_178
      000CC9 E0               [24] 3062 	movx	a,@dptr
      000CCA FF               [12] 3063 	mov	r7,a
      000CCB BF 08 0D         [24] 3064 	cjne	r7,#0x08,00102$
                                   3065 ;	ecen4330_lcd_v3.c:510: count = 0;
      000CCE 90r00r0C         [24] 3066 	mov	dptr,#_freeType_count_65536_178
      000CD1 E4               [12] 3067 	clr	a
      000CD2 F0               [24] 3068 	movx	@dptr,a
                                   3069 ;	ecen4330_lcd_v3.c:511: write(d);
      000CD3 75 82 0A         [24] 3070 	mov	dpl,#0x0a
      000CD6 12r0BrDD         [24] 3071 	lcall	_write
      000CD9 80 06            [24] 3072 	sjmp	00103$
      000CDB                       3073 00102$:
                                   3074 ;	ecen4330_lcd_v3.c:514: d = keyDetect();
      000CDB 12r0CrEA         [24] 3075 	lcall	_keyDetect
                                   3076 ;	ecen4330_lcd_v3.c:515: write(d);
      000CDE 12r0BrDD         [24] 3077 	lcall	_write
      000CE1                       3078 00103$:
                                   3079 ;	ecen4330_lcd_v3.c:518: count++;
      000CE1 90r00r0C         [24] 3080 	mov	dptr,#_freeType_count_65536_178
      000CE4 E0               [24] 3081 	movx	a,@dptr
      000CE5 24 01            [12] 3082 	add	a,#0x01
      000CE7 F0               [24] 3083 	movx	@dptr,a
                                   3084 ;	ecen4330_lcd_v3.c:520: }
      000CE8 80 DC            [24] 3085 	sjmp	00105$
                                   3086 ;------------------------------------------------------------
                                   3087 ;Allocation info for local variables in function 'keyDetect'
                                   3088 ;------------------------------------------------------------
                                   3089 ;	ecen4330_lcd_v3.c:527: uint8_t keyDetect () {
                                   3090 ;	-----------------------------------------
                                   3091 ;	 function keyDetect
                                   3092 ;	-----------------------------------------
      000CEA                       3093 _keyDetect:
                                   3094 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xF0;
      000CEA 75 90 F0         [24] 3095 	mov	_P1,#0xf0
                                   3096 ;	ecen4330_lcd_v3.c:529: do
      000CED                       3097 00101$:
                                   3098 ;	ecen4330_lcd_v3.c:531: __KEYPAD_PORT__ = 0xF0;
      000CED 75 90 F0         [24] 3099 	mov	_P1,#0xf0
                                   3100 ;	ecen4330_lcd_v3.c:532: colloc = __KEYPAD_PORT__;
      000CF0 85 90*00         [24] 3101 	mov	_colloc,_P1
                                   3102 ;	ecen4330_lcd_v3.c:533: colloc&= 0xF0;
      000CF3 53*00 F0         [24] 3103 	anl	_colloc,#0xf0
                                   3104 ;	ecen4330_lcd_v3.c:534: } while (colloc != 0xF0);
      000CF6 74 F0            [12] 3105 	mov	a,#0xf0
      000CF8 B5*00 F2         [24] 3106 	cjne	a,_colloc,00101$
                                   3107 ;	ecen4330_lcd_v3.c:538: do
      000CFB                       3108 00104$:
                                   3109 ;	ecen4330_lcd_v3.c:540: delay(20);
      000CFB 90 00 14         [24] 3110 	mov	dptr,#0x0014
      000CFE 12r00r21         [24] 3111 	lcall	_delay
                                   3112 ;	ecen4330_lcd_v3.c:541: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D01 E5 90            [12] 3113 	mov	a,_P1
      000D03 54 F0            [12] 3114 	anl	a,#0xf0
      000D05 F5*00            [12] 3115 	mov	_colloc,a
                                   3116 ;	ecen4330_lcd_v3.c:542: } while (colloc == 0xF0);
      000D07 74 F0            [12] 3117 	mov	a,#0xf0
      000D09 B5*00 02         [24] 3118 	cjne	a,_colloc,00178$
      000D0C 80 ED            [24] 3119 	sjmp	00104$
      000D0E                       3120 00178$:
                                   3121 ;	ecen4330_lcd_v3.c:544: delay(1);
      000D0E 90 00 01         [24] 3122 	mov	dptr,#0x0001
      000D11 12r00r21         [24] 3123 	lcall	_delay
                                   3124 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D14 E5 90            [12] 3125 	mov	a,_P1
      000D16 54 F0            [12] 3126 	anl	a,#0xf0
      000D18 F5*00            [12] 3127 	mov	_colloc,a
                                   3128 ;	ecen4330_lcd_v3.c:546: } while (colloc == 0xF0);
      000D1A 74 F0            [12] 3129 	mov	a,#0xf0
      000D1C B5*00 02         [24] 3130 	cjne	a,_colloc,00179$
      000D1F 80 DA            [24] 3131 	sjmp	00104$
      000D21                       3132 00179$:
                                   3133 ;	ecen4330_lcd_v3.c:548: while (1)
      000D21                       3134 00119$:
                                   3135 ;	ecen4330_lcd_v3.c:550: __KEYPAD_PORT__= 0xFE;
      000D21 75 90 FE         [24] 3136 	mov	_P1,#0xfe
                                   3137 ;	ecen4330_lcd_v3.c:551: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D24 E5 90            [12] 3138 	mov	a,_P1
      000D26 54 F0            [12] 3139 	anl	a,#0xf0
      000D28 F5*00            [12] 3140 	mov	_colloc,a
                                   3141 ;	ecen4330_lcd_v3.c:552: if (colloc != 0xF0)
      000D2A 74 F0            [12] 3142 	mov	a,#0xf0
      000D2C B5*00 02         [24] 3143 	cjne	a,_colloc,00180$
      000D2F 80 05            [24] 3144 	sjmp	00111$
      000D31                       3145 00180$:
                                   3146 ;	ecen4330_lcd_v3.c:554: rowloc = 0;
      000D31 75*01 00         [24] 3147 	mov	_rowloc,#0x00
                                   3148 ;	ecen4330_lcd_v3.c:555: break;
      000D34 80 3D            [24] 3149 	sjmp	00120$
      000D36                       3150 00111$:
                                   3151 ;	ecen4330_lcd_v3.c:558: __KEYPAD_PORT__ = 0xFD;
      000D36 75 90 FD         [24] 3152 	mov	_P1,#0xfd
                                   3153 ;	ecen4330_lcd_v3.c:559: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D39 E5 90            [12] 3154 	mov	a,_P1
      000D3B 54 F0            [12] 3155 	anl	a,#0xf0
      000D3D F5*00            [12] 3156 	mov	_colloc,a
                                   3157 ;	ecen4330_lcd_v3.c:560: if (colloc != 0xF0)
      000D3F 74 F0            [12] 3158 	mov	a,#0xf0
      000D41 B5*00 02         [24] 3159 	cjne	a,_colloc,00181$
      000D44 80 05            [24] 3160 	sjmp	00113$
      000D46                       3161 00181$:
                                   3162 ;	ecen4330_lcd_v3.c:562: rowloc = 1;
      000D46 75*01 01         [24] 3163 	mov	_rowloc,#0x01
                                   3164 ;	ecen4330_lcd_v3.c:563: break;
      000D49 80 28            [24] 3165 	sjmp	00120$
      000D4B                       3166 00113$:
                                   3167 ;	ecen4330_lcd_v3.c:566: __KEYPAD_PORT__ = 0xFB;
      000D4B 75 90 FB         [24] 3168 	mov	_P1,#0xfb
                                   3169 ;	ecen4330_lcd_v3.c:567: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D4E E5 90            [12] 3170 	mov	a,_P1
      000D50 54 F0            [12] 3171 	anl	a,#0xf0
      000D52 F5*00            [12] 3172 	mov	_colloc,a
                                   3173 ;	ecen4330_lcd_v3.c:568: if (colloc != 0xF0)
      000D54 74 F0            [12] 3174 	mov	a,#0xf0
      000D56 B5*00 02         [24] 3175 	cjne	a,_colloc,00182$
      000D59 80 05            [24] 3176 	sjmp	00115$
      000D5B                       3177 00182$:
                                   3178 ;	ecen4330_lcd_v3.c:570: rowloc = 2;
      000D5B 75*01 02         [24] 3179 	mov	_rowloc,#0x02
                                   3180 ;	ecen4330_lcd_v3.c:571: break;
      000D5E 80 13            [24] 3181 	sjmp	00120$
      000D60                       3182 00115$:
                                   3183 ;	ecen4330_lcd_v3.c:574: __KEYPAD_PORT__ = 0xF7;
      000D60 75 90 F7         [24] 3184 	mov	_P1,#0xf7
                                   3185 ;	ecen4330_lcd_v3.c:575: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D63 E5 90            [12] 3186 	mov	a,_P1
      000D65 54 F0            [12] 3187 	anl	a,#0xf0
      000D67 F5*00            [12] 3188 	mov	_colloc,a
                                   3189 ;	ecen4330_lcd_v3.c:576: if (colloc != 0xF0)
      000D69 74 F0            [12] 3190 	mov	a,#0xf0
      000D6B B5*00 02         [24] 3191 	cjne	a,_colloc,00183$
      000D6E 80 B1            [24] 3192 	sjmp	00119$
      000D70                       3193 00183$:
                                   3194 ;	ecen4330_lcd_v3.c:578: rowloc = 3;
      000D70 75*01 03         [24] 3195 	mov	_rowloc,#0x03
                                   3196 ;	ecen4330_lcd_v3.c:579: break;
      000D73                       3197 00120$:
                                   3198 ;	ecen4330_lcd_v3.c:583: if (colloc == 0xE0)
      000D73 74 E0            [12] 3199 	mov	a,#0xe0
      000D75 B5*00 15         [24] 3200 	cjne	a,_colloc,00128$
                                   3201 ;	ecen4330_lcd_v3.c:585: return (keypad[rowloc][0]);
      000D78 E5*01            [12] 3202 	mov	a,_rowloc
      000D7A 75 F0 04         [24] 3203 	mov	b,#0x04
      000D7D A4               [48] 3204 	mul	ab
      000D7E 24rFB            [12] 3205 	add	a,#_keypad
      000D80 F5 82            [12] 3206 	mov	dpl,a
      000D82 74s04            [12] 3207 	mov	a,#(_keypad >> 8)
      000D84 35 F0            [12] 3208 	addc	a,b
      000D86 F5 83            [12] 3209 	mov	dph,a
      000D88 E4               [12] 3210 	clr	a
      000D89 93               [24] 3211 	movc	a,@a+dptr
      000D8A F5 82            [12] 3212 	mov	dpl,a
      000D8C 22               [24] 3213 	ret
      000D8D                       3214 00128$:
                                   3215 ;	ecen4330_lcd_v3.c:587: else if (colloc == 0xD0)
      000D8D 74 D0            [12] 3216 	mov	a,#0xd0
      000D8F B5*00 18         [24] 3217 	cjne	a,_colloc,00125$
                                   3218 ;	ecen4330_lcd_v3.c:589: return (keypad[rowloc][1]);
      000D92 E5*01            [12] 3219 	mov	a,_rowloc
      000D94 75 F0 04         [24] 3220 	mov	b,#0x04
      000D97 A4               [48] 3221 	mul	ab
      000D98 24rFB            [12] 3222 	add	a,#_keypad
      000D9A FE               [12] 3223 	mov	r6,a
      000D9B 74s04            [12] 3224 	mov	a,#(_keypad >> 8)
      000D9D 35 F0            [12] 3225 	addc	a,b
      000D9F FF               [12] 3226 	mov	r7,a
      000DA0 8E 82            [24] 3227 	mov	dpl,r6
      000DA2 8F 83            [24] 3228 	mov	dph,r7
      000DA4 A3               [24] 3229 	inc	dptr
      000DA5 E4               [12] 3230 	clr	a
      000DA6 93               [24] 3231 	movc	a,@a+dptr
      000DA7 F5 82            [12] 3232 	mov	dpl,a
      000DA9 22               [24] 3233 	ret
      000DAA                       3234 00125$:
                                   3235 ;	ecen4330_lcd_v3.c:591: else if (colloc == 0xB0)
      000DAA 74 B0            [12] 3236 	mov	a,#0xb0
      000DAC B5*00 19         [24] 3237 	cjne	a,_colloc,00122$
                                   3238 ;	ecen4330_lcd_v3.c:593: return (keypad[rowloc][2]);
      000DAF E5*01            [12] 3239 	mov	a,_rowloc
      000DB1 75 F0 04         [24] 3240 	mov	b,#0x04
      000DB4 A4               [48] 3241 	mul	ab
      000DB5 24rFB            [12] 3242 	add	a,#_keypad
      000DB7 FE               [12] 3243 	mov	r6,a
      000DB8 74s04            [12] 3244 	mov	a,#(_keypad >> 8)
      000DBA 35 F0            [12] 3245 	addc	a,b
      000DBC FF               [12] 3246 	mov	r7,a
      000DBD 8E 82            [24] 3247 	mov	dpl,r6
      000DBF 8F 83            [24] 3248 	mov	dph,r7
      000DC1 A3               [24] 3249 	inc	dptr
      000DC2 A3               [24] 3250 	inc	dptr
      000DC3 E4               [12] 3251 	clr	a
      000DC4 93               [24] 3252 	movc	a,@a+dptr
      000DC5 F5 82            [12] 3253 	mov	dpl,a
      000DC7 22               [24] 3254 	ret
      000DC8                       3255 00122$:
                                   3256 ;	ecen4330_lcd_v3.c:597: return (keypad[rowloc][3]);
      000DC8 E5*01            [12] 3257 	mov	a,_rowloc
      000DCA 75 F0 04         [24] 3258 	mov	b,#0x04
      000DCD A4               [48] 3259 	mul	ab
      000DCE 24rFB            [12] 3260 	add	a,#_keypad
      000DD0 FE               [12] 3261 	mov	r6,a
      000DD1 74s04            [12] 3262 	mov	a,#(_keypad >> 8)
      000DD3 35 F0            [12] 3263 	addc	a,b
      000DD5 FF               [12] 3264 	mov	r7,a
      000DD6 8E 82            [24] 3265 	mov	dpl,r6
      000DD8 8F 83            [24] 3266 	mov	dph,r7
      000DDA A3               [24] 3267 	inc	dptr
      000DDB A3               [24] 3268 	inc	dptr
      000DDC A3               [24] 3269 	inc	dptr
      000DDD E4               [12] 3270 	clr	a
      000DDE 93               [24] 3271 	movc	a,@a+dptr
                                   3272 ;	ecen4330_lcd_v3.c:599: }
      000DDF F5 82            [12] 3273 	mov	dpl,a
      000DE1 22               [24] 3274 	ret
                                   3275 ;------------------------------------------------------------
                                   3276 ;Allocation info for local variables in function 'reverse'
                                   3277 ;------------------------------------------------------------
                                   3278 ;d                         Allocated to registers r7 
                                   3279 ;rev                       Allocated with name '_reverse_rev_65536_196'
                                   3280 ;val                       Allocated with name '_reverse_val_65536_196'
                                   3281 ;------------------------------------------------------------
                                   3282 ;	ecen4330_lcd_v3.c:601: uint16_t reverse (uint8_t d) {
                                   3283 ;	-----------------------------------------
                                   3284 ;	 function reverse
                                   3285 ;	-----------------------------------------
      000DE2                       3286 _reverse:
      000DE2 AF 82            [24] 3287 	mov	r7,dpl
                                   3288 ;	ecen4330_lcd_v3.c:602: __xdata uint16_t rev = 0;
      000DE4 90r00r0D         [24] 3289 	mov	dptr,#_reverse_rev_65536_196
      000DE7 E4               [12] 3290 	clr	a
      000DE8 F0               [24] 3291 	movx	@dptr,a
      000DE9 A3               [24] 3292 	inc	dptr
      000DEA F0               [24] 3293 	movx	@dptr,a
                                   3294 ;	ecen4330_lcd_v3.c:604: while (d >= 1) {
      000DEB                       3295 00101$:
      000DEB BF 01 00         [24] 3296 	cjne	r7,#0x01,00114$
      000DEE                       3297 00114$:
      000DEE 40 63            [24] 3298 	jc	00103$
                                   3299 ;	ecen4330_lcd_v3.c:606: val = d%10;
      000DF0 8F 05            [24] 3300 	mov	ar5,r7
      000DF2 7E 00            [12] 3301 	mov	r6,#0x00
      000DF4 75*00 0A         [24] 3302 	mov	__modsint_PARM_2,#0x0a
                                   3303 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DF7 8E*01            [24] 3304 	mov	(__modsint_PARM_2 + 1),r6
      000DF9 8D 82            [24] 3305 	mov	dpl,r5
      000DFB 8E 83            [24] 3306 	mov	dph,r6
      000DFD C0 06            [24] 3307 	push	ar6
      000DFF C0 05            [24] 3308 	push	ar5
      000E01 12r00r00         [24] 3309 	lcall	__modsint
      000E04 AB 82            [24] 3310 	mov	r3,dpl
      000E06 AC 83            [24] 3311 	mov	r4,dph
      000E08 D0 05            [24] 3312 	pop	ar5
      000E0A D0 06            [24] 3313 	pop	ar6
      000E0C 90r00r0F         [24] 3314 	mov	dptr,#_reverse_val_65536_196
      000E0F EB               [12] 3315 	mov	a,r3
      000E10 F0               [24] 3316 	movx	@dptr,a
      000E11 EC               [12] 3317 	mov	a,r4
      000E12 A3               [24] 3318 	inc	dptr
      000E13 F0               [24] 3319 	movx	@dptr,a
                                   3320 ;	ecen4330_lcd_v3.c:607: d = d/10;
      000E14 75*00 0A         [24] 3321 	mov	__divsint_PARM_2,#0x0a
      000E17 75*01 00         [24] 3322 	mov	(__divsint_PARM_2 + 1),#0x00
      000E1A 8D 82            [24] 3323 	mov	dpl,r5
      000E1C 8E 83            [24] 3324 	mov	dph,r6
      000E1E 12r00r00         [24] 3325 	lcall	__divsint
      000E21 AD 82            [24] 3326 	mov	r5,dpl
      000E23 8D 07            [24] 3327 	mov	ar7,r5
                                   3328 ;	ecen4330_lcd_v3.c:608: rev = rev * 10 + val;
      000E25 90r00r0D         [24] 3329 	mov	dptr,#_reverse_rev_65536_196
      000E28 E0               [24] 3330 	movx	a,@dptr
      000E29 FD               [12] 3331 	mov	r5,a
      000E2A A3               [24] 3332 	inc	dptr
      000E2B E0               [24] 3333 	movx	a,@dptr
      000E2C FE               [12] 3334 	mov	r6,a
      000E2D 8D*00            [24] 3335 	mov	__mulint_PARM_2,r5
      000E2F 8E*01            [24] 3336 	mov	(__mulint_PARM_2 + 1),r6
      000E31 90 00 0A         [24] 3337 	mov	dptr,#0x000a
      000E34 C0 07            [24] 3338 	push	ar7
      000E36 12r00r00         [24] 3339 	lcall	__mulint
      000E39 AD 82            [24] 3340 	mov	r5,dpl
      000E3B AE 83            [24] 3341 	mov	r6,dph
      000E3D D0 07            [24] 3342 	pop	ar7
      000E3F 90r00r0F         [24] 3343 	mov	dptr,#_reverse_val_65536_196
      000E42 E0               [24] 3344 	movx	a,@dptr
      000E43 FB               [12] 3345 	mov	r3,a
      000E44 A3               [24] 3346 	inc	dptr
      000E45 E0               [24] 3347 	movx	a,@dptr
      000E46 FC               [12] 3348 	mov	r4,a
      000E47 90r00r0D         [24] 3349 	mov	dptr,#_reverse_rev_65536_196
      000E4A EB               [12] 3350 	mov	a,r3
      000E4B 2D               [12] 3351 	add	a,r5
      000E4C F0               [24] 3352 	movx	@dptr,a
      000E4D EC               [12] 3353 	mov	a,r4
      000E4E 3E               [12] 3354 	addc	a,r6
      000E4F A3               [24] 3355 	inc	dptr
      000E50 F0               [24] 3356 	movx	@dptr,a
      000E51 80 98            [24] 3357 	sjmp	00101$
      000E53                       3358 00103$:
                                   3359 ;	ecen4330_lcd_v3.c:610: return rev;
      000E53 90r00r0D         [24] 3360 	mov	dptr,#_reverse_rev_65536_196
      000E56 E0               [24] 3361 	movx	a,@dptr
      000E57 FE               [12] 3362 	mov	r6,a
      000E58 A3               [24] 3363 	inc	dptr
      000E59 E0               [24] 3364 	movx	a,@dptr
                                   3365 ;	ecen4330_lcd_v3.c:611: }
      000E5A 8E 82            [24] 3366 	mov	dpl,r6
      000E5C F5 83            [12] 3367 	mov	dph,a
      000E5E 22               [24] 3368 	ret
                                   3369 ;------------------------------------------------------------
                                   3370 ;Allocation info for local variables in function 'asciiToDec'
                                   3371 ;------------------------------------------------------------
                                   3372 ;d                         Allocated with name '_asciiToDec_d_65536_198'
                                   3373 ;val                       Allocated with name '_asciiToDec_val_65536_199'
                                   3374 ;id                        Allocated with name '_asciiToDec_id_65536_199'
                                   3375 ;------------------------------------------------------------
                                   3376 ;	ecen4330_lcd_v3.c:618: void asciiToDec (__xdata uint8_t d) {
                                   3377 ;	-----------------------------------------
                                   3378 ;	 function asciiToDec
                                   3379 ;	-----------------------------------------
      000E5F                       3380 _asciiToDec:
      000E5F E5 82            [12] 3381 	mov	a,dpl
      000E61 90r00r11         [24] 3382 	mov	dptr,#_asciiToDec_d_65536_198
      000E64 F0               [24] 3383 	movx	@dptr,a
                                   3384 ;	ecen4330_lcd_v3.c:621: id = reverse(d);
      000E65 E0               [24] 3385 	movx	a,@dptr
      000E66 F5 82            [12] 3386 	mov	dpl,a
      000E68 12r0DrE2         [24] 3387 	lcall	_reverse
      000E6B E5 82            [12] 3388 	mov	a,dpl
      000E6D 85 83 F0         [24] 3389 	mov	b,dph
      000E70 90r00r13         [24] 3390 	mov	dptr,#_asciiToDec_id_65536_199
      000E73 F0               [24] 3391 	movx	@dptr,a
      000E74 E5 F0            [12] 3392 	mov	a,b
      000E76 A3               [24] 3393 	inc	dptr
      000E77 F0               [24] 3394 	movx	@dptr,a
                                   3395 ;	ecen4330_lcd_v3.c:622: while (id >= 1){
      000E78                       3396 00101$:
      000E78 90r00r13         [24] 3397 	mov	dptr,#_asciiToDec_id_65536_199
      000E7B E0               [24] 3398 	movx	a,@dptr
      000E7C FE               [12] 3399 	mov	r6,a
      000E7D A3               [24] 3400 	inc	dptr
      000E7E E0               [24] 3401 	movx	a,@dptr
      000E7F FF               [12] 3402 	mov	r7,a
      000E80 C3               [12] 3403 	clr	c
      000E81 EE               [12] 3404 	mov	a,r6
      000E82 94 01            [12] 3405 	subb	a,#0x01
      000E84 EF               [12] 3406 	mov	a,r7
      000E85 94 00            [12] 3407 	subb	a,#0x00
      000E87 40 42            [24] 3408 	jc	00104$
                                   3409 ;	ecen4330_lcd_v3.c:624: val = id % 10;
      000E89 75*00 0A         [24] 3410 	mov	__moduint_PARM_2,#0x0a
      000E8C 75*01 00         [24] 3411 	mov	(__moduint_PARM_2 + 1),#0x00
      000E8F 8E 82            [24] 3412 	mov	dpl,r6
      000E91 8F 83            [24] 3413 	mov	dph,r7
      000E93 C0 07            [24] 3414 	push	ar7
      000E95 C0 06            [24] 3415 	push	ar6
      000E97 12r00r00         [24] 3416 	lcall	__moduint
      000E9A AC 82            [24] 3417 	mov	r4,dpl
      000E9C D0 06            [24] 3418 	pop	ar6
      000E9E D0 07            [24] 3419 	pop	ar7
      000EA0 90r00r12         [24] 3420 	mov	dptr,#_asciiToDec_val_65536_199
      000EA3 EC               [12] 3421 	mov	a,r4
      000EA4 F0               [24] 3422 	movx	@dptr,a
                                   3423 ;	ecen4330_lcd_v3.c:625: id = id/10;
      000EA5 75*00 0A         [24] 3424 	mov	__divuint_PARM_2,#0x0a
      000EA8 75*01 00         [24] 3425 	mov	(__divuint_PARM_2 + 1),#0x00
      000EAB 8E 82            [24] 3426 	mov	dpl,r6
      000EAD 8F 83            [24] 3427 	mov	dph,r7
      000EAF 12r00r00         [24] 3428 	lcall	__divuint
      000EB2 AE 82            [24] 3429 	mov	r6,dpl
      000EB4 AF 83            [24] 3430 	mov	r7,dph
      000EB6 90r00r13         [24] 3431 	mov	dptr,#_asciiToDec_id_65536_199
      000EB9 EE               [12] 3432 	mov	a,r6
      000EBA F0               [24] 3433 	movx	@dptr,a
      000EBB EF               [12] 3434 	mov	a,r7
      000EBC A3               [24] 3435 	inc	dptr
      000EBD F0               [24] 3436 	movx	@dptr,a
                                   3437 ;	ecen4330_lcd_v3.c:626: write(val + '0');
      000EBE 90r00r12         [24] 3438 	mov	dptr,#_asciiToDec_val_65536_199
      000EC1 E0               [24] 3439 	movx	a,@dptr
      000EC2 24 30            [12] 3440 	add	a,#0x30
      000EC4 F5 82            [12] 3441 	mov	dpl,a
      000EC6 12r0BrDD         [24] 3442 	lcall	_write
      000EC9 80 AD            [24] 3443 	sjmp	00101$
      000ECB                       3444 00104$:
                                   3445 ;	ecen4330_lcd_v3.c:629: }
      000ECB 22               [24] 3446 	ret
                                   3447 ;------------------------------------------------------------
                                   3448 ;Allocation info for local variables in function 'asciiToHex'
                                   3449 ;------------------------------------------------------------
                                   3450 ;d                         Allocated to registers r7 
                                   3451 ;val                       Allocated to registers r2 
                                   3452 ;store                     Allocated with name '_asciiToHex_store_65536_202'
                                   3453 ;i                         Allocated to registers r6 
                                   3454 ;------------------------------------------------------------
                                   3455 ;	ecen4330_lcd_v3.c:636: void asciiToHex (uint8_t d) {
                                   3456 ;	-----------------------------------------
                                   3457 ;	 function asciiToHex
                                   3458 ;	-----------------------------------------
      000ECC                       3459 _asciiToHex:
      000ECC AF 82            [24] 3460 	mov	r7,dpl
                                   3461 ;	ecen4330_lcd_v3.c:640: store[0] = 0;
      000ECE 75*48 00         [24] 3462 	mov	_asciiToHex_store_65536_202,#0x00
                                   3463 ;	ecen4330_lcd_v3.c:641: store[1] = 0;
      000ED1 75*49 00         [24] 3464 	mov	(_asciiToHex_store_65536_202 + 0x0001),#0x00
                                   3465 ;	ecen4330_lcd_v3.c:642: while (d >= 1) {
      000ED4 7E 00            [12] 3466 	mov	r6,#0x00
      000ED6                       3467 00104$:
      000ED6 BF 01 00         [24] 3468 	cjne	r7,#0x01,00122$
      000ED9                       3469 00122$:
      000ED9 40 5A            [24] 3470 	jc	00106$
                                   3471 ;	ecen4330_lcd_v3.c:644: val = d % 16;
      000EDB 8F 04            [24] 3472 	mov	ar4,r7
      000EDD 7D 00            [12] 3473 	mov	r5,#0x00
      000EDF 74 0F            [12] 3474 	mov	a,#0x0f
      000EE1 5C               [12] 3475 	anl	a,r4
      000EE2 FA               [12] 3476 	mov	r2,a
                                   3477 ;	ecen4330_lcd_v3.c:645: d = d/16;
      000EE3 75*00 10         [24] 3478 	mov	__divsint_PARM_2,#0x10
                                   3479 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EE6 8D*01            [24] 3480 	mov	(__divsint_PARM_2 + 1),r5
      000EE8 8C 82            [24] 3481 	mov	dpl,r4
      000EEA 8D 83            [24] 3482 	mov	dph,r5
      000EEC C0 06            [24] 3483 	push	ar6
      000EEE C0 02            [24] 3484 	push	ar2
      000EF0 12r00r00         [24] 3485 	lcall	__divsint
      000EF3 AC 82            [24] 3486 	mov	r4,dpl
      000EF5 D0 02            [24] 3487 	pop	ar2
      000EF7 D0 06            [24] 3488 	pop	ar6
      000EF9 8C 07            [24] 3489 	mov	ar7,r4
                                   3490 ;	ecen4330_lcd_v3.c:646: if (val <= 9) {
      000EFB EA               [12] 3491 	mov	a,r2
      000EFC 24 F6            [12] 3492 	add	a,#0xff - 0x09
      000EFE 40 0C            [24] 3493 	jc	00102$
                                   3494 ;	ecen4330_lcd_v3.c:648: store[i] = val + '0';
      000F00 EE               [12] 3495 	mov	a,r6
      000F01 24r48            [12] 3496 	add	a,#_asciiToHex_store_65536_202
      000F03 F9               [12] 3497 	mov	r1,a
      000F04 8A 05            [24] 3498 	mov	ar5,r2
      000F06 74 30            [12] 3499 	mov	a,#0x30
      000F08 2D               [12] 3500 	add	a,r5
      000F09 F7               [12] 3501 	mov	@r1,a
      000F0A 80 26            [24] 3502 	sjmp	00103$
      000F0C                       3503 00102$:
                                   3504 ;	ecen4330_lcd_v3.c:651: store[i] = (val%10) + 'A';
      000F0C EE               [12] 3505 	mov	a,r6
      000F0D 24r48            [12] 3506 	add	a,#_asciiToHex_store_65536_202
      000F0F F9               [12] 3507 	mov	r1,a
      000F10 7D 00            [12] 3508 	mov	r5,#0x00
      000F12 75*00 0A         [24] 3509 	mov	__modsint_PARM_2,#0x0a
                                   3510 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F15 8D*01            [24] 3511 	mov	(__modsint_PARM_2 + 1),r5
      000F17 8A 82            [24] 3512 	mov	dpl,r2
      000F19 8D 83            [24] 3513 	mov	dph,r5
      000F1B C0 07            [24] 3514 	push	ar7
      000F1D C0 06            [24] 3515 	push	ar6
      000F1F C0 01            [24] 3516 	push	ar1
      000F21 12r00r00         [24] 3517 	lcall	__modsint
      000F24 AC 82            [24] 3518 	mov	r4,dpl
      000F26 AD 83            [24] 3519 	mov	r5,dph
      000F28 D0 01            [24] 3520 	pop	ar1
      000F2A D0 06            [24] 3521 	pop	ar6
      000F2C D0 07            [24] 3522 	pop	ar7
      000F2E 74 41            [12] 3523 	mov	a,#0x41
      000F30 2C               [12] 3524 	add	a,r4
      000F31 F7               [12] 3525 	mov	@r1,a
      000F32                       3526 00103$:
                                   3527 ;	ecen4330_lcd_v3.c:653: i++;
      000F32 0E               [12] 3528 	inc	r6
      000F33 80 A1            [24] 3529 	sjmp	00104$
      000F35                       3530 00106$:
                                   3531 ;	ecen4330_lcd_v3.c:655: write(store[1]);
      000F35 85*49 82         [24] 3532 	mov	dpl,(_asciiToHex_store_65536_202 + 0x0001)
      000F38 12r0BrDD         [24] 3533 	lcall	_write
                                   3534 ;	ecen4330_lcd_v3.c:656: write(store[0]);
      000F3B 85*48 82         [24] 3535 	mov	dpl,_asciiToHex_store_65536_202
                                   3536 ;	ecen4330_lcd_v3.c:657: }
      000F3E 02r0BrDD         [24] 3537 	ljmp	_write
                                   3538 ;------------------------------------------------------------
                                   3539 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3540 ;------------------------------------------------------------
                                   3541 ;d                         Allocated to registers r7 
                                   3542 ;------------------------------------------------------------
                                   3543 ;	ecen4330_lcd_v3.c:665: uint8_t convertAsciiHex(uint8_t d) {
                                   3544 ;	-----------------------------------------
                                   3545 ;	 function convertAsciiHex
                                   3546 ;	-----------------------------------------
      000F41                       3547 _convertAsciiHex:
                                   3548 ;	ecen4330_lcd_v3.c:666: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F41 E5 82            [12] 3549 	mov	a,dpl
      000F43 FF               [12] 3550 	mov	r7,a
      000F44 24 C6            [12] 3551 	add	a,#0xff - 0x39
      000F46 92*01            [24] 3552 	mov	_convertAsciiHex_sloc0_1_0,c
      000F48 40 08            [24] 3553 	jc	00103$
      000F4A 8F 06            [24] 3554 	mov	ar6,r7
      000F4C EE               [12] 3555 	mov	a,r6
      000F4D 24 D0            [12] 3556 	add	a,#0xd0
      000F4F FE               [12] 3557 	mov	r6,a
      000F50 80 04            [24] 3558 	sjmp	00104$
      000F52                       3559 00103$:
      000F52 74 C9            [12] 3560 	mov	a,#0xc9
      000F54 2F               [12] 3561 	add	a,r7
      000F55 FE               [12] 3562 	mov	r6,a
      000F56                       3563 00104$:
      000F56 8E 82            [24] 3564 	mov	dpl,r6
                                   3565 ;	ecen4330_lcd_v3.c:667: }
      000F58 22               [24] 3566 	ret
                                   3567 ;------------------------------------------------------------
                                   3568 ;Allocation info for local variables in function 'writeSomeLines'
                                   3569 ;------------------------------------------------------------
                                   3570 ;	ecen4330_lcd_v3.c:673: void writeSomeLines () {
                                   3571 ;	-----------------------------------------
                                   3572 ;	 function writeSomeLines
                                   3573 ;	-----------------------------------------
      000F59                       3574 _writeSomeLines:
                                   3575 ;	ecen4330_lcd_v3.c:674: fillScreen(RED);
      000F59 90 F8 00         [24] 3576 	mov	dptr,#0xf800
      000F5C 12r08r44         [24] 3577 	lcall	_fillScreen
                                   3578 ;	ecen4330_lcd_v3.c:676: delay(20);
      000F5F 90 00 14         [24] 3579 	mov	dptr,#0x0014
      000F62 12r00r21         [24] 3580 	lcall	_delay
                                   3581 ;	ecen4330_lcd_v3.c:677: fillScreen(GREEN);
      000F65 90 07 E0         [24] 3582 	mov	dptr,#0x07e0
      000F68 12r08r44         [24] 3583 	lcall	_fillScreen
                                   3584 ;	ecen4330_lcd_v3.c:679: delay(20);
      000F6B 90 00 14         [24] 3585 	mov	dptr,#0x0014
      000F6E 12r00r21         [24] 3586 	lcall	_delay
                                   3587 ;	ecen4330_lcd_v3.c:681: setRotation(0);
      000F71 75 82 00         [24] 3588 	mov	dpl,#0x00
      000F74 12r00rE8         [24] 3589 	lcall	_setRotation
                                   3590 ;	ecen4330_lcd_v3.c:682: fillScreen(BLACK);
      000F77 90 00 00         [24] 3591 	mov	dptr,#0x0000
      000F7A 12r08r44         [24] 3592 	lcall	_fillScreen
                                   3593 ;	ecen4330_lcd_v3.c:683: testCircles(20, RED);
      000F7D 75*2C 00         [24] 3594 	mov	_testCircles_PARM_2,#0x00
      000F80 75*2D F8         [24] 3595 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F83 75 82 14         [24] 3596 	mov	dpl,#0x14
      000F86 12r06r9D         [24] 3597 	lcall	_testCircles
                                   3598 ;	ecen4330_lcd_v3.c:684: delay(100);
      000F89 90 00 64         [24] 3599 	mov	dptr,#0x0064
      000F8C 12r00r21         [24] 3600 	lcall	_delay
                                   3601 ;	ecen4330_lcd_v3.c:685: fillScreen(BLACK);
      000F8F 90 00 00         [24] 3602 	mov	dptr,#0x0000
      000F92 12r08r44         [24] 3603 	lcall	_fillScreen
                                   3604 ;	ecen4330_lcd_v3.c:686: setTextSize(5);
      000F95 75 82 05         [24] 3605 	mov	dpl,#0x05
      000F98 12r00rD0         [24] 3606 	lcall	_setTextSize
                                   3607 ;	ecen4330_lcd_v3.c:687: setTextColor(CYAN, BLACK);
      000F9B E4               [12] 3608 	clr	a
      000F9C F5*00            [12] 3609 	mov	_setTextColor_PARM_2,a
      000F9E F5*01            [12] 3610 	mov	(_setTextColor_PARM_2 + 1),a
      000FA0 90 07 FF         [24] 3611 	mov	dptr,#0x07ff
      000FA3 12r00rC3         [24] 3612 	lcall	_setTextColor
                                   3613 ;	ecen4330_lcd_v3.c:688: LCD_string_write("Welcome\n");
      000FA6 90r05r0B         [24] 3614 	mov	dptr,#___str_0
      000FA9 75 F0 80         [24] 3615 	mov	b,#0x80
      000FAC 12r0Cr4B         [24] 3616 	lcall	_LCD_string_write
                                   3617 ;	ecen4330_lcd_v3.c:689: setTextSize(3);
      000FAF 75 82 03         [24] 3618 	mov	dpl,#0x03
      000FB2 12r00rD0         [24] 3619 	lcall	_setTextSize
                                   3620 ;	ecen4330_lcd_v3.c:690: LCD_string_write("ECEN-4330\n");
      000FB5 90r05r14         [24] 3621 	mov	dptr,#___str_1
      000FB8 75 F0 80         [24] 3622 	mov	b,#0x80
      000FBB 12r0Cr4B         [24] 3623 	lcall	_LCD_string_write
                                   3624 ;	ecen4330_lcd_v3.c:691: LCD_string_write("Rotation 0");
      000FBE 90r05r1F         [24] 3625 	mov	dptr,#___str_2
      000FC1 75 F0 80         [24] 3626 	mov	b,#0x80
      000FC4 12r0Cr4B         [24] 3627 	lcall	_LCD_string_write
                                   3628 ;	ecen4330_lcd_v3.c:692: delay(200);
      000FC7 90 00 C8         [24] 3629 	mov	dptr,#0x00c8
      000FCA 12r00r21         [24] 3630 	lcall	_delay
                                   3631 ;	ecen4330_lcd_v3.c:693: fillScreen(BLACK);
      000FCD 90 00 00         [24] 3632 	mov	dptr,#0x0000
      000FD0 12r08r44         [24] 3633 	lcall	_fillScreen
                                   3634 ;	ecen4330_lcd_v3.c:694: setRotation(1);
      000FD3 75 82 01         [24] 3635 	mov	dpl,#0x01
      000FD6 12r00rE8         [24] 3636 	lcall	_setRotation
                                   3637 ;	ecen4330_lcd_v3.c:695: setCursor(0,0);
      000FD9 E4               [12] 3638 	clr	a
      000FDA F5*00            [12] 3639 	mov	_setCursor_PARM_2,a
      000FDC F5*01            [12] 3640 	mov	(_setCursor_PARM_2 + 1),a
      000FDE 90 00 00         [24] 3641 	mov	dptr,#0x0000
      000FE1 12r00rB6         [24] 3642 	lcall	_setCursor
                                   3643 ;	ecen4330_lcd_v3.c:696: LCD_string_write("Rotation 1");
      000FE4 90r05r2A         [24] 3644 	mov	dptr,#___str_3
      000FE7 75 F0 80         [24] 3645 	mov	b,#0x80
      000FEA 12r0Cr4B         [24] 3646 	lcall	_LCD_string_write
                                   3647 ;	ecen4330_lcd_v3.c:697: delay(500);
      000FED 90 01 F4         [24] 3648 	mov	dptr,#0x01f4
      000FF0 12r00r21         [24] 3649 	lcall	_delay
                                   3650 ;	ecen4330_lcd_v3.c:698: fillScreen(BLACK);
      000FF3 90 00 00         [24] 3651 	mov	dptr,#0x0000
      000FF6 12r08r44         [24] 3652 	lcall	_fillScreen
                                   3653 ;	ecen4330_lcd_v3.c:699: setRotation(2);
      000FF9 75 82 02         [24] 3654 	mov	dpl,#0x02
      000FFC 12r00rE8         [24] 3655 	lcall	_setRotation
                                   3656 ;	ecen4330_lcd_v3.c:700: setCursor(0,0);
      000FFF E4               [12] 3657 	clr	a
      001000 F5*00            [12] 3658 	mov	_setCursor_PARM_2,a
      001002 F5*01            [12] 3659 	mov	(_setCursor_PARM_2 + 1),a
      001004 90 00 00         [24] 3660 	mov	dptr,#0x0000
      001007 12r00rB6         [24] 3661 	lcall	_setCursor
                                   3662 ;	ecen4330_lcd_v3.c:701: LCD_string_write("Rotation 2");
      00100A 90r05r35         [24] 3663 	mov	dptr,#___str_4
      00100D 75 F0 80         [24] 3664 	mov	b,#0x80
      001010 12r0Cr4B         [24] 3665 	lcall	_LCD_string_write
                                   3666 ;	ecen4330_lcd_v3.c:702: delay(500);
      001013 90 01 F4         [24] 3667 	mov	dptr,#0x01f4
      001016 12r00r21         [24] 3668 	lcall	_delay
                                   3669 ;	ecen4330_lcd_v3.c:703: fillScreen(BLACK);
      001019 90 00 00         [24] 3670 	mov	dptr,#0x0000
      00101C 12r08r44         [24] 3671 	lcall	_fillScreen
                                   3672 ;	ecen4330_lcd_v3.c:704: setRotation(3);
      00101F 75 82 03         [24] 3673 	mov	dpl,#0x03
      001022 12r00rE8         [24] 3674 	lcall	_setRotation
                                   3675 ;	ecen4330_lcd_v3.c:705: setCursor(0,0);
      001025 E4               [12] 3676 	clr	a
      001026 F5*00            [12] 3677 	mov	_setCursor_PARM_2,a
      001028 F5*01            [12] 3678 	mov	(_setCursor_PARM_2 + 1),a
      00102A 90 00 00         [24] 3679 	mov	dptr,#0x0000
      00102D 12r00rB6         [24] 3680 	lcall	_setCursor
                                   3681 ;	ecen4330_lcd_v3.c:706: delay(200);
      001030 90 00 C8         [24] 3682 	mov	dptr,#0x00c8
      001033 12r00r21         [24] 3683 	lcall	_delay
                                   3684 ;	ecen4330_lcd_v3.c:707: LCD_string_write("Rotation 3");
      001036 90r05r40         [24] 3685 	mov	dptr,#___str_5
      001039 75 F0 80         [24] 3686 	mov	b,#0x80
      00103C 12r0Cr4B         [24] 3687 	lcall	_LCD_string_write
                                   3688 ;	ecen4330_lcd_v3.c:708: delay(200);
      00103F 90 00 C8         [24] 3689 	mov	dptr,#0x00c8
                                   3690 ;	ecen4330_lcd_v3.c:709: }
      001042 02r00r21         [24] 3691 	ljmp	_delay
                                   3692 ;------------------------------------------------------------
                                   3693 ;Allocation info for local variables in function 'getAddress'
                                   3694 ;------------------------------------------------------------
                                   3695 ;input                     Allocated with name '_getAddress_input_65536_228'
                                   3696 ;hex                       Allocated with name '_getAddress_hex_65536_228'
                                   3697 ;i                         Allocated with name '_getAddress_i_65536_228'
                                   3698 ;address                   Allocated with name '_getAddress_address_65536_228'
                                   3699 ;------------------------------------------------------------
                                   3700 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3701 ;	-----------------------------------------
                                   3702 ;	 function getAddress
                                   3703 ;	-----------------------------------------
      001045                       3704 _getAddress:
                                   3705 ;	getFunctions.c:16: address = 0;
      001045 90r00r15         [24] 3706 	mov	dptr,#_getAddress_address_65536_228
      001048 E4               [12] 3707 	clr	a
      001049 F0               [24] 3708 	movx	@dptr,a
      00104A A3               [24] 3709 	inc	dptr
      00104B F0               [24] 3710 	movx	@dptr,a
                                   3711 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00104C 7F 00            [12] 3712 	mov	r7,#0x00
      00104E                       3713 00104$:
                                   3714 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      00104E C0 07            [24] 3715 	push	ar7
      001050 12r0CrEA         [24] 3716 	lcall	_keyDetect
                                   3717 ;	getFunctions.c:21: write(input);						// display nibble to user
      001053 AE 82            [24] 3718 	mov  r6,dpl
      001055 C0 06            [24] 3719 	push	ar6
      001057 12r0BrDD         [24] 3720 	lcall	_write
      00105A D0 06            [24] 3721 	pop	ar6
                                   3722 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      00105C 8E 82            [24] 3723 	mov	dpl,r6
      00105E 12r0Fr41         [24] 3724 	lcall	_convertAsciiHex
      001061 AE 82            [24] 3725 	mov	r6,dpl
      001063 D0 07            [24] 3726 	pop	ar7
                                   3727 ;	getFunctions.c:25: address = address | hex;
      001065 90r00r15         [24] 3728 	mov	dptr,#_getAddress_address_65536_228
      001068 E0               [24] 3729 	movx	a,@dptr
      001069 FC               [12] 3730 	mov	r4,a
      00106A A3               [24] 3731 	inc	dptr
      00106B E0               [24] 3732 	movx	a,@dptr
      00106C FD               [12] 3733 	mov	r5,a
      00106D 7B 00            [12] 3734 	mov	r3,#0x00
      00106F 90r00r15         [24] 3735 	mov	dptr,#_getAddress_address_65536_228
      001072 EE               [12] 3736 	mov	a,r6
      001073 4C               [12] 3737 	orl	a,r4
      001074 F0               [24] 3738 	movx	@dptr,a
      001075 EB               [12] 3739 	mov	a,r3
      001076 4D               [12] 3740 	orl	a,r5
      001077 A3               [24] 3741 	inc	dptr
      001078 F0               [24] 3742 	movx	@dptr,a
                                   3743 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      001079 BF 03 02         [24] 3744 	cjne	r7,#0x03,00121$
      00107C 80 1C            [24] 3745 	sjmp	00105$
      00107E                       3746 00121$:
      00107E 90r00r15         [24] 3747 	mov	dptr,#_getAddress_address_65536_228
      001081 E0               [24] 3748 	movx	a,@dptr
      001082 FD               [12] 3749 	mov	r5,a
      001083 A3               [24] 3750 	inc	dptr
      001084 E0               [24] 3751 	movx	a,@dptr
      001085 C4               [12] 3752 	swap	a
      001086 54 F0            [12] 3753 	anl	a,#0xf0
      001088 CD               [12] 3754 	xch	a,r5
      001089 C4               [12] 3755 	swap	a
      00108A CD               [12] 3756 	xch	a,r5
      00108B 6D               [12] 3757 	xrl	a,r5
      00108C CD               [12] 3758 	xch	a,r5
      00108D 54 F0            [12] 3759 	anl	a,#0xf0
      00108F CD               [12] 3760 	xch	a,r5
      001090 6D               [12] 3761 	xrl	a,r5
      001091 FE               [12] 3762 	mov	r6,a
      001092 90r00r15         [24] 3763 	mov	dptr,#_getAddress_address_65536_228
      001095 ED               [12] 3764 	mov	a,r5
      001096 F0               [24] 3765 	movx	@dptr,a
      001097 EE               [12] 3766 	mov	a,r6
      001098 A3               [24] 3767 	inc	dptr
      001099 F0               [24] 3768 	movx	@dptr,a
      00109A                       3769 00105$:
                                   3770 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00109A 0F               [12] 3771 	inc	r7
      00109B BF 04 00         [24] 3772 	cjne	r7,#0x04,00122$
      00109E                       3773 00122$:
      00109E 40 AE            [24] 3774 	jc	00104$
                                   3775 ;	getFunctions.c:28: return address;
      0010A0 90r00r15         [24] 3776 	mov	dptr,#_getAddress_address_65536_228
      0010A3 E0               [24] 3777 	movx	a,@dptr
      0010A4 FE               [12] 3778 	mov	r6,a
      0010A5 A3               [24] 3779 	inc	dptr
      0010A6 E0               [24] 3780 	movx	a,@dptr
                                   3781 ;	getFunctions.c:29: }
      0010A7 8E 82            [24] 3782 	mov	dpl,r6
      0010A9 F5 83            [12] 3783 	mov	dph,a
      0010AB 22               [24] 3784 	ret
                                   3785 ;------------------------------------------------------------
                                   3786 ;Allocation info for local variables in function 'getByte'
                                   3787 ;------------------------------------------------------------
                                   3788 ;input                     Allocated with name '_getByte_input_65536_231'
                                   3789 ;hex                       Allocated with name '_getByte_hex_65536_231'
                                   3790 ;byte                      Allocated with name '_getByte_byte_65536_231'
                                   3791 ;i                         Allocated with name '_getByte_i_65536_231'
                                   3792 ;------------------------------------------------------------
                                   3793 ;	getFunctions.c:36: uint8_t getByte() {
                                   3794 ;	-----------------------------------------
                                   3795 ;	 function getByte
                                   3796 ;	-----------------------------------------
      0010AC                       3797 _getByte:
                                   3798 ;	getFunctions.c:40: byte = 0;
      0010AC 90r00r17         [24] 3799 	mov	dptr,#_getByte_byte_65536_231
      0010AF E4               [12] 3800 	clr	a
      0010B0 F0               [24] 3801 	movx	@dptr,a
                                   3802 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010B1 7F 00            [12] 3803 	mov	r7,#0x00
      0010B3                       3804 00104$:
                                   3805 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      0010B3 C0 07            [24] 3806 	push	ar7
      0010B5 12r0CrEA         [24] 3807 	lcall	_keyDetect
                                   3808 ;	getFunctions.c:45: write(input);						// display nibble to user
      0010B8 AE 82            [24] 3809 	mov  r6,dpl
      0010BA C0 06            [24] 3810 	push	ar6
      0010BC 12r0BrDD         [24] 3811 	lcall	_write
      0010BF D0 06            [24] 3812 	pop	ar6
                                   3813 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      0010C1 8E 82            [24] 3814 	mov	dpl,r6
      0010C3 12r0Fr41         [24] 3815 	lcall	_convertAsciiHex
      0010C6 AE 82            [24] 3816 	mov	r6,dpl
      0010C8 D0 07            [24] 3817 	pop	ar7
                                   3818 ;	getFunctions.c:49: byte = byte | hex;
      0010CA 90r00r17         [24] 3819 	mov	dptr,#_getByte_byte_65536_231
      0010CD E0               [24] 3820 	movx	a,@dptr
      0010CE 4E               [12] 3821 	orl	a,r6
      0010CF F0               [24] 3822 	movx	@dptr,a
                                   3823 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010D0 BF 01 02         [24] 3824 	cjne	r7,#0x01,00121$
      0010D3 80 09            [24] 3825 	sjmp	00105$
      0010D5                       3826 00121$:
      0010D5 90r00r17         [24] 3827 	mov	dptr,#_getByte_byte_65536_231
      0010D8 E0               [24] 3828 	movx	a,@dptr
      0010D9 C4               [12] 3829 	swap	a
      0010DA 54 F0            [12] 3830 	anl	a,#0xf0
      0010DC FE               [12] 3831 	mov	r6,a
      0010DD F0               [24] 3832 	movx	@dptr,a
      0010DE                       3833 00105$:
                                   3834 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010DE 0F               [12] 3835 	inc	r7
      0010DF BF 02 00         [24] 3836 	cjne	r7,#0x02,00122$
      0010E2                       3837 00122$:
      0010E2 40 CF            [24] 3838 	jc	00104$
                                   3839 ;	getFunctions.c:52: return byte;
      0010E4 90r00r17         [24] 3840 	mov	dptr,#_getByte_byte_65536_231
      0010E7 E0               [24] 3841 	movx	a,@dptr
                                   3842 ;	getFunctions.c:53: }
      0010E8 F5 82            [12] 3843 	mov	dpl,a
      0010EA 22               [24] 3844 	ret
                                   3845 ;------------------------------------------------------------
                                   3846 ;Allocation info for local variables in function 'check'
                                   3847 ;------------------------------------------------------------
                                   3848 ;ramAddress                Allocated to registers r4 r5 
                                   3849 ;checker                   Allocated with name '_check_checker_65537_235'
                                   3850 ;fetched                   Allocated with name '_check_fetched_65537_235'
                                   3851 ;i                         Allocated with name '_check_i_65537_235'
                                   3852 ;error                     Allocated with name '_check_error_65537_235'
                                   3853 ;------------------------------------------------------------
                                   3854 ;	check.c:6: void check() {
                                   3855 ;	-----------------------------------------
                                   3856 ;	 function check
                                   3857 ;	-----------------------------------------
      0010EB                       3858 _check:
                                   3859 ;	check.c:8: fillScreen(GRAY);
      0010EB 90 D6 BA         [24] 3860 	mov	dptr,#0xd6ba
      0010EE 12r08r44         [24] 3861 	lcall	_fillScreen
                                   3862 ;	check.c:9: setCursor(0, 0);
      0010F1 E4               [12] 3863 	clr	a
      0010F2 F5*00            [12] 3864 	mov	_setCursor_PARM_2,a
      0010F4 F5*01            [12] 3865 	mov	(_setCursor_PARM_2 + 1),a
      0010F6 90 00 00         [24] 3866 	mov	dptr,#0x0000
      0010F9 12r00rB6         [24] 3867 	lcall	_setCursor
                                   3868 ;	check.c:10: setTextSize(2);
      0010FC 75 82 02         [24] 3869 	mov	dpl,#0x02
      0010FF 12r00rD0         [24] 3870 	lcall	_setTextSize
                                   3871 ;	check.c:17: __xdata bool error = false;
      001102 90r00r19         [24] 3872 	mov	dptr,#_check_error_65537_235
      001105 E4               [12] 3873 	clr	a
      001106 F0               [24] 3874 	movx	@dptr,a
                                   3875 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      001107 90r05r4B         [24] 3876 	mov	dptr,#___str_6
      00110A 75 F0 80         [24] 3877 	mov	b,#0x80
      00110D 12r0Cr4B         [24] 3878 	lcall	_LCD_string_write
                                   3879 ;	check.c:22: checker = getByte();
      001110 12r10rAC         [24] 3880 	lcall	_getByte
      001113 E5 82            [12] 3881 	mov	a,dpl
      001115 90r00r18         [24] 3882 	mov	dptr,#_check_checker_65537_235
      001118 F0               [24] 3883 	movx	@dptr,a
                                   3884 ;	check.c:23: write('\n');
      001119 75 82 0A         [24] 3885 	mov	dpl,#0x0a
      00111C 12r0BrDD         [24] 3886 	lcall	_write
                                   3887 ;	check.c:24: LCD_string_write("In progress...\n");
      00111F 90r05r60         [24] 3888 	mov	dptr,#___str_7
      001122 75 F0 80         [24] 3889 	mov	b,#0x80
      001125 12r0Cr4B         [24] 3890 	lcall	_LCD_string_write
                                   3891 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001128 7E 00            [12] 3892 	mov	r6,#0x00
      00112A 7F 00            [12] 3893 	mov	r7,#0x00
      00112C                       3894 00112$:
                                   3895 ;	check.c:30: IOM = 0;
                                   3896 ;	assignBit
      00112C C2 B4            [12] 3897 	clr	_P3_4
                                   3898 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      00112E 8E 04            [24] 3899 	mov	ar4,r6
      001130 8F 05            [24] 3900 	mov	ar5,r7
                                   3901 ;	check.c:32: *ramAddress = checker;
      001132 90r00r18         [24] 3902 	mov	dptr,#_check_checker_65537_235
      001135 E0               [24] 3903 	movx	a,@dptr
      001136 FB               [12] 3904 	mov	r3,a
      001137 F9               [12] 3905 	mov	r1,a
      001138 7A 00            [12] 3906 	mov	r2,#0x00
      00113A 8C 82            [24] 3907 	mov	dpl,r4
      00113C 8D 83            [24] 3908 	mov	dph,r5
      00113E E9               [12] 3909 	mov	a,r1
      00113F F0               [24] 3910 	movx	@dptr,a
      001140 EA               [12] 3911 	mov	a,r2
      001141 A3               [24] 3912 	inc	dptr
      001142 F0               [24] 3913 	movx	@dptr,a
                                   3914 ;	check.c:33: fetched = *ramAddress;
                                   3915 ;	check.c:34: IOM = 1;
                                   3916 ;	assignBit
      001143 D2 B4            [12] 3917 	setb	_P3_4
                                   3918 ;	check.c:35: if (fetched != checker) {
      001145 E9               [12] 3919 	mov	a,r1
      001146 B5 03 02         [24] 3920 	cjne	a,ar3,00136$
      001149 80 43            [24] 3921 	sjmp	00104$
      00114B                       3922 00136$:
                                   3923 ;	check.c:36: asciiToHex(checker);
      00114B 8B 82            [24] 3924 	mov	dpl,r3
      00114D C0 05            [24] 3925 	push	ar5
      00114F C0 04            [24] 3926 	push	ar4
      001151 C0 01            [24] 3927 	push	ar1
      001153 12r0ErCC         [24] 3928 	lcall	_asciiToHex
                                   3929 ;	check.c:37: write(' ');
      001156 75 82 20         [24] 3930 	mov	dpl,#0x20
      001159 12r0BrDD         [24] 3931 	lcall	_write
      00115C D0 01            [24] 3932 	pop	ar1
                                   3933 ;	check.c:38: asciiToHex(fetched);
      00115E 89 82            [24] 3934 	mov	dpl,r1
      001160 12r0ErCC         [24] 3935 	lcall	_asciiToHex
                                   3936 ;	check.c:39: write(' ');
      001163 75 82 20         [24] 3937 	mov	dpl,#0x20
      001166 12r0BrDD         [24] 3938 	lcall	_write
      001169 D0 04            [24] 3939 	pop	ar4
      00116B D0 05            [24] 3940 	pop	ar5
                                   3941 ;	check.c:40: asciiToHex(*ramAddress);
      00116D 8C 82            [24] 3942 	mov	dpl,r4
      00116F 8D 83            [24] 3943 	mov	dph,r5
      001171 E0               [24] 3944 	movx	a,@dptr
      001172 F5 82            [12] 3945 	mov	dpl,a
      001174 12r0ErCC         [24] 3946 	lcall	_asciiToHex
                                   3947 ;	check.c:41: write('\n');
      001177 75 82 0A         [24] 3948 	mov	dpl,#0x0a
      00117A 12r0BrDD         [24] 3949 	lcall	_write
                                   3950 ;	check.c:42: LCD_string_write("Memory check failed\n");
      00117D 90r05r70         [24] 3951 	mov	dptr,#___str_8
      001180 75 F0 80         [24] 3952 	mov	b,#0x80
      001183 12r0Cr4B         [24] 3953 	lcall	_LCD_string_write
                                   3954 ;	check.c:43: error = true;
      001186 90r00r19         [24] 3955 	mov	dptr,#_check_error_65537_235
      001189 74 01            [12] 3956 	mov	a,#0x01
      00118B F0               [24] 3957 	movx	@dptr,a
                                   3958 ;	check.c:44: break;
      00118C 80 78            [24] 3959 	sjmp	00106$
      00118E                       3960 00104$:
                                   3961 ;	check.c:46: IOM = 0;
                                   3962 ;	assignBit
      00118E C2 B4            [12] 3963 	clr	_P3_4
                                   3964 ;	check.c:47: checker = ~checker;
      001190 90r00r18         [24] 3965 	mov	dptr,#_check_checker_65537_235
      001193 EB               [12] 3966 	mov	a,r3
      001194 F4               [12] 3967 	cpl	a
      001195 F0               [24] 3968 	movx	@dptr,a
                                   3969 ;	check.c:48: *ramAddress = checker;
      001196 E0               [24] 3970 	movx	a,@dptr
      001197 FB               [12] 3971 	mov	r3,a
      001198 F9               [12] 3972 	mov	r1,a
      001199 7A 00            [12] 3973 	mov	r2,#0x00
      00119B 8C 82            [24] 3974 	mov	dpl,r4
      00119D 8D 83            [24] 3975 	mov	dph,r5
      00119F E9               [12] 3976 	mov	a,r1
      0011A0 F0               [24] 3977 	movx	@dptr,a
      0011A1 EA               [12] 3978 	mov	a,r2
      0011A2 A3               [24] 3979 	inc	dptr
      0011A3 F0               [24] 3980 	movx	@dptr,a
                                   3981 ;	check.c:49: fetched = *ramAddress;
                                   3982 ;	check.c:50: IOM = 1;
                                   3983 ;	assignBit
      0011A4 D2 B4            [12] 3984 	setb	_P3_4
                                   3985 ;	check.c:51: if (fetched != checker) {
      0011A6 E9               [12] 3986 	mov	a,r1
      0011A7 B5 03 02         [24] 3987 	cjne	a,ar3,00137$
      0011AA 80 45            [24] 3988 	sjmp	00113$
      0011AC                       3989 00137$:
                                   3990 ;	check.c:52: asciiToHex(~checker);
      0011AC EB               [12] 3991 	mov	a,r3
      0011AD F4               [12] 3992 	cpl	a
      0011AE F5 82            [12] 3993 	mov	dpl,a
      0011B0 C0 05            [24] 3994 	push	ar5
      0011B2 C0 04            [24] 3995 	push	ar4
      0011B4 C0 01            [24] 3996 	push	ar1
      0011B6 12r0ErCC         [24] 3997 	lcall	_asciiToHex
                                   3998 ;	check.c:53: write(' ');
      0011B9 75 82 20         [24] 3999 	mov	dpl,#0x20
      0011BC 12r0BrDD         [24] 4000 	lcall	_write
      0011BF D0 01            [24] 4001 	pop	ar1
                                   4002 ;	check.c:54: asciiToHex(fetched);
      0011C1 89 82            [24] 4003 	mov	dpl,r1
      0011C3 12r0ErCC         [24] 4004 	lcall	_asciiToHex
                                   4005 ;	check.c:55: write(' ');
      0011C6 75 82 20         [24] 4006 	mov	dpl,#0x20
      0011C9 12r0BrDD         [24] 4007 	lcall	_write
      0011CC D0 04            [24] 4008 	pop	ar4
      0011CE D0 05            [24] 4009 	pop	ar5
                                   4010 ;	check.c:56: asciiToHex(*ramAddress);
      0011D0 8C 82            [24] 4011 	mov	dpl,r4
      0011D2 8D 83            [24] 4012 	mov	dph,r5
      0011D4 E0               [24] 4013 	movx	a,@dptr
      0011D5 F5 82            [12] 4014 	mov	dpl,a
      0011D7 12r0ErCC         [24] 4015 	lcall	_asciiToHex
                                   4016 ;	check.c:57: write('\n');
      0011DA 75 82 0A         [24] 4017 	mov	dpl,#0x0a
      0011DD 12r0BrDD         [24] 4018 	lcall	_write
                                   4019 ;	check.c:58: LCD_string_write("Memory check failed\n");
      0011E0 90r05r70         [24] 4020 	mov	dptr,#___str_8
      0011E3 75 F0 80         [24] 4021 	mov	b,#0x80
      0011E6 12r0Cr4B         [24] 4022 	lcall	_LCD_string_write
                                   4023 ;	check.c:59: error = true;
      0011E9 90r00r19         [24] 4024 	mov	dptr,#_check_error_65537_235
      0011EC 74 01            [12] 4025 	mov	a,#0x01
      0011EE F0               [24] 4026 	movx	@dptr,a
                                   4027 ;	check.c:60: break;
      0011EF 80 15            [24] 4028 	sjmp	00106$
      0011F1                       4029 00113$:
                                   4030 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0011F1 0E               [12] 4031 	inc	r6
      0011F2 BE 00 01         [24] 4032 	cjne	r6,#0x00,00138$
      0011F5 0F               [12] 4033 	inc	r7
      0011F6                       4034 00138$:
      0011F6 8E 04            [24] 4035 	mov	ar4,r6
      0011F8 8F 05            [24] 4036 	mov	ar5,r7
      0011FA C3               [12] 4037 	clr	c
      0011FB EC               [12] 4038 	mov	a,r4
      0011FC 94 FF            [12] 4039 	subb	a,#0xff
      0011FE ED               [12] 4040 	mov	a,r5
      0011FF 94 FF            [12] 4041 	subb	a,#0xff
      001201 50 03            [24] 4042 	jnc	00139$
      001203 02r11r2C         [24] 4043 	ljmp	00112$
      001206                       4044 00139$:
      001206                       4045 00106$:
                                   4046 ;	check.c:68: if (error != false) {
      001206 90r00r19         [24] 4047 	mov	dptr,#_check_error_65537_235
      001209 E0               [24] 4048 	movx	a,@dptr
      00120A 60 09            [24] 4049 	jz	00108$
                                   4050 ;	check.c:69: LCD_string_write("Success!\n");
      00120C 90r05r85         [24] 4051 	mov	dptr,#___str_9
      00120F 75 F0 80         [24] 4052 	mov	b,#0x80
      001212 12r0Cr4B         [24] 4053 	lcall	_LCD_string_write
      001215                       4054 00108$:
                                   4055 ;	check.c:73: LCD_string_write("Press 1 for menu\n");
      001215 90r05r8F         [24] 4056 	mov	dptr,#___str_10
      001218 75 F0 80         [24] 4057 	mov	b,#0x80
      00121B 12r0Cr4B         [24] 4058 	lcall	_LCD_string_write
                                   4059 ;	check.c:75: do {
      00121E                       4060 00109$:
                                   4061 ;	check.c:76: checker = keyDetect();
      00121E 12r0CrEA         [24] 4062 	lcall	_keyDetect
      001221 AF 82            [24] 4063 	mov	r7,dpl
                                   4064 ;	check.c:77: } while (checker != '1');
      001223 BF 31 F8         [24] 4065 	cjne	r7,#0x31,00109$
                                   4066 ;	check.c:78: }
      001226 22               [24] 4067 	ret
                                   4068 ;------------------------------------------------------------
                                   4069 ;Allocation info for local variables in function 'basic'
                                   4070 ;------------------------------------------------------------
                                   4071 ;ramAddress                Allocated to registers 
                                   4072 ;val                       Allocated with name '_basic_val_65537_244'
                                   4073 ;fetched                   Allocated with name '_basic_fetched_65537_244'
                                   4074 ;add                       Allocated with name '_basic_add_65537_244'
                                   4075 ;------------------------------------------------------------
                                   4076 ;	check.c:84: void basic() {
                                   4077 ;	-----------------------------------------
                                   4078 ;	 function basic
                                   4079 ;	-----------------------------------------
      001227                       4080 _basic:
                                   4081 ;	check.c:86: fillScreen(GRAY);
      001227 90 D6 BA         [24] 4082 	mov	dptr,#0xd6ba
      00122A 12r08r44         [24] 4083 	lcall	_fillScreen
                                   4084 ;	check.c:87: setCursor(0, 0);
      00122D E4               [12] 4085 	clr	a
      00122E F5*00            [12] 4086 	mov	_setCursor_PARM_2,a
      001230 F5*01            [12] 4087 	mov	(_setCursor_PARM_2 + 1),a
      001232 90 00 00         [24] 4088 	mov	dptr,#0x0000
      001235 12r00rB6         [24] 4089 	lcall	_setCursor
                                   4090 ;	check.c:88: setTextSize(2);
      001238 75 82 02         [24] 4091 	mov	dpl,#0x02
      00123B 12r00rD0         [24] 4092 	lcall	_setTextSize
                                   4093 ;	check.c:97: LCD_string_write("Enter byte\n");
      00123E 90r05rA1         [24] 4094 	mov	dptr,#___str_11
      001241 75 F0 80         [24] 4095 	mov	b,#0x80
      001244 12r0Cr4B         [24] 4096 	lcall	_LCD_string_write
                                   4097 ;	check.c:98: val = getByte();
      001247 12r10rAC         [24] 4098 	lcall	_getByte
      00124A AF 82            [24] 4099 	mov	r7,dpl
                                   4100 ;	check.c:99: write('\n');
      00124C 75 82 0A         [24] 4101 	mov	dpl,#0x0a
      00124F C0 07            [24] 4102 	push	ar7
      001251 12r0BrDD         [24] 4103 	lcall	_write
                                   4104 ;	check.c:102: LCD_string_write("Enter address\n");
      001254 90r05rAD         [24] 4105 	mov	dptr,#___str_12
      001257 75 F0 80         [24] 4106 	mov	b,#0x80
      00125A 12r0Cr4B         [24] 4107 	lcall	_LCD_string_write
                                   4108 ;	check.c:103: add = getAddress();
      00125D 12r10r45         [24] 4109 	lcall	_getAddress
      001260 AD 82            [24] 4110 	mov	r5,dpl
      001262 AE 83            [24] 4111 	mov	r6,dph
                                   4112 ;	check.c:104: write('\n');
      001264 75 82 0A         [24] 4113 	mov	dpl,#0x0a
      001267 C0 06            [24] 4114 	push	ar6
      001269 C0 05            [24] 4115 	push	ar5
      00126B 12r0BrDD         [24] 4116 	lcall	_write
                                   4117 ;	check.c:105: LCD_string_write("In progress\n");
      00126E 90r05rBC         [24] 4118 	mov	dptr,#___str_13
      001271 75 F0 80         [24] 4119 	mov	b,#0x80
      001274 12r0Cr4B         [24] 4120 	lcall	_LCD_string_write
      001277 D0 05            [24] 4121 	pop	ar5
      001279 D0 06            [24] 4122 	pop	ar6
      00127B D0 07            [24] 4123 	pop	ar7
                                   4124 ;	check.c:107: IOM = 0;
                                   4125 ;	assignBit
      00127D C2 B4            [12] 4126 	clr	_P3_4
                                   4127 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      00127F 8D 82            [24] 4128 	mov	dpl,r5
      001281 8E 83            [24] 4129 	mov	dph,r6
                                   4130 ;	check.c:111: *ramAddress = val;
      001283 8F 05            [24] 4131 	mov	ar5,r7
      001285 7E 00            [12] 4132 	mov	r6,#0x00
      001287 ED               [12] 4133 	mov	a,r5
      001288 F0               [24] 4134 	movx	@dptr,a
      001289 EE               [12] 4135 	mov	a,r6
      00128A A3               [24] 4136 	inc	dptr
      00128B F0               [24] 4137 	movx	@dptr,a
                                   4138 ;	check.c:114: fetched = *ramAddress;
                                   4139 ;	check.c:116: IOM = 1;
                                   4140 ;	assignBit
      00128C D2 B4            [12] 4141 	setb	_P3_4
                                   4142 ;	check.c:119: if (fetched == val) {
      00128E ED               [12] 4143 	mov	a,r5
      00128F B5 07 10         [24] 4144 	cjne	a,ar7,00102$
                                   4145 ;	check.c:120: asciiToHex(fetched);
      001292 8D 82            [24] 4146 	mov	dpl,r5
      001294 12r0ErCC         [24] 4147 	lcall	_asciiToHex
                                   4148 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      001297 90r05rC9         [24] 4149 	mov	dptr,#___str_14
      00129A 75 F0 80         [24] 4150 	mov	b,#0x80
      00129D 12r0Cr4B         [24] 4151 	lcall	_LCD_string_write
      0012A0 80 09            [24] 4152 	sjmp	00103$
      0012A2                       4153 00102$:
                                   4154 ;	check.c:123: LCD_string_write("Check failed\n");
      0012A2 90r05rDD         [24] 4155 	mov	dptr,#___str_15
      0012A5 75 F0 80         [24] 4156 	mov	b,#0x80
      0012A8 12r0Cr4B         [24] 4157 	lcall	_LCD_string_write
      0012AB                       4158 00103$:
                                   4159 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      0012AB 90r05r8F         [24] 4160 	mov	dptr,#___str_10
      0012AE 75 F0 80         [24] 4161 	mov	b,#0x80
      0012B1 12r0Cr4B         [24] 4162 	lcall	_LCD_string_write
                                   4163 ;	check.c:128: do {
      0012B4                       4164 00104$:
                                   4165 ;	check.c:129: fetched = keyDetect();
      0012B4 12r0CrEA         [24] 4166 	lcall	_keyDetect
      0012B7 AF 82            [24] 4167 	mov	r7,dpl
                                   4168 ;	check.c:130: } while (fetched != '1');
      0012B9 BF 31 F8         [24] 4169 	cjne	r7,#0x31,00104$
                                   4170 ;	check.c:131: }
      0012BC 22               [24] 4171 	ret
                                   4172 ;------------------------------------------------------------
                                   4173 ;Allocation info for local variables in function 'move'
                                   4174 ;------------------------------------------------------------
                                   4175 ;origin                    Allocated to registers 
                                   4176 ;target                    Allocated with name '_move_target_65537_249'
                                   4177 ;sloc0                     Allocated with name '_move_sloc0_1_0'
                                   4178 ;sloc1                     Allocated with name '_move_sloc1_1_0'
                                   4179 ;startAdd                  Allocated with name '_move_startAdd_65537_249'
                                   4180 ;targetAdd                 Allocated with name '_move_targetAdd_65537_249'
                                   4181 ;i                         Allocated with name '_move_i_65537_249'
                                   4182 ;size                      Allocated with name '_move_size_65537_249'
                                   4183 ;o                         Allocated with name '_move_o_65537_249'
                                   4184 ;------------------------------------------------------------
                                   4185 ;	move.c:5: void move() {
                                   4186 ;	-----------------------------------------
                                   4187 ;	 function move
                                   4188 ;	-----------------------------------------
      0012BD                       4189 _move:
                                   4190 ;	move.c:7: fillScreen(GRAY);
      0012BD 90 D6 BA         [24] 4191 	mov	dptr,#0xd6ba
      0012C0 12r08r44         [24] 4192 	lcall	_fillScreen
                                   4193 ;	move.c:8: setCursor(0, 0);
      0012C3 E4               [12] 4194 	clr	a
      0012C4 F5*00            [12] 4195 	mov	_setCursor_PARM_2,a
      0012C6 F5*01            [12] 4196 	mov	(_setCursor_PARM_2 + 1),a
      0012C8 90 00 00         [24] 4197 	mov	dptr,#0x0000
      0012CB 12r00rB6         [24] 4198 	lcall	_setCursor
                                   4199 ;	move.c:18: setTextSize(2);
      0012CE 75 82 02         [24] 4200 	mov	dpl,#0x02
      0012D1 12r00rD0         [24] 4201 	lcall	_setTextSize
                                   4202 ;	move.c:19: LCD_string_write("Enter start address:\n");
      0012D4 90r05rEB         [24] 4203 	mov	dptr,#___str_16
      0012D7 75 F0 80         [24] 4204 	mov	b,#0x80
      0012DA 12r0Cr4B         [24] 4205 	lcall	_LCD_string_write
                                   4206 ;	move.c:20: startAdd = getAddress();
      0012DD 12r10r45         [24] 4207 	lcall	_getAddress
      0012E0 AE 82            [24] 4208 	mov	r6,dpl
      0012E2 AF 83            [24] 4209 	mov	r7,dph
                                   4210 ;	move.c:21: write('\n');
      0012E4 75 82 0A         [24] 4211 	mov	dpl,#0x0a
      0012E7 C0 07            [24] 4212 	push	ar7
      0012E9 C0 06            [24] 4213 	push	ar6
      0012EB 12r0BrDD         [24] 4214 	lcall	_write
                                   4215 ;	move.c:24: LCD_string_write("Enter target address:\n");
      0012EE 90r06r01         [24] 4216 	mov	dptr,#___str_17
      0012F1 75 F0 80         [24] 4217 	mov	b,#0x80
      0012F4 12r0Cr4B         [24] 4218 	lcall	_LCD_string_write
                                   4219 ;	move.c:25: targetAdd = getAddress();
      0012F7 12r10r45         [24] 4220 	lcall	_getAddress
      0012FA AC 82            [24] 4221 	mov	r4,dpl
      0012FC AD 83            [24] 4222 	mov	r5,dph
                                   4223 ;	move.c:26: write('\n');
      0012FE 75 82 0A         [24] 4224 	mov	dpl,#0x0a
      001301 C0 05            [24] 4225 	push	ar5
      001303 C0 04            [24] 4226 	push	ar4
      001305 12r0BrDD         [24] 4227 	lcall	_write
                                   4228 ;	move.c:29: LCD_string_write("Enter size:\n");
      001308 90r06r18         [24] 4229 	mov	dptr,#___str_18
      00130B 75 F0 80         [24] 4230 	mov	b,#0x80
      00130E 12r0Cr4B         [24] 4231 	lcall	_LCD_string_write
                                   4232 ;	move.c:30: size = getByte();
      001311 12r10rAC         [24] 4233 	lcall	_getByte
      001314 AB 82            [24] 4234 	mov	r3,dpl
                                   4235 ;	move.c:31: write('\n');
      001316 75 82 0A         [24] 4236 	mov	dpl,#0x0a
      001319 C0 03            [24] 4237 	push	ar3
      00131B 12r0BrDD         [24] 4238 	lcall	_write
                                   4239 ;	move.c:34: LCD_string_write("Move in progress...\n");
      00131E 90r06r25         [24] 4240 	mov	dptr,#___str_19
      001321 75 F0 80         [24] 4241 	mov	b,#0x80
      001324 12r0Cr4B         [24] 4242 	lcall	_LCD_string_write
      001327 D0 03            [24] 4243 	pop	ar3
      001329 D0 04            [24] 4244 	pop	ar4
      00132B D0 05            [24] 4245 	pop	ar5
      00132D D0 06            [24] 4246 	pop	ar6
      00132F D0 07            [24] 4247 	pop	ar7
                                   4248 ;	move.c:37: for (i = 0; i < size; i++) {
      001331 7A 00            [12] 4249 	mov	r2,#0x00
      001333                       4250 00109$:
      001333 C3               [12] 4251 	clr	c
      001334 EA               [12] 4252 	mov	a,r2
      001335 9B               [12] 4253 	subb	a,r3
      001336 50 6D            [24] 4254 	jnc	00104$
                                   4255 ;	move.c:39: if ((i + startAdd == __END_RAM__) || (i + targetAdd == __END_RAM__)) break;
      001338 C0 03            [24] 4256 	push	ar3
      00133A 8A*4E            [24] 4257 	mov	_move_sloc1_1_0,r2
      00133C 75*4F 00         [24] 4258 	mov	(_move_sloc1_1_0 + 1),#0x00
      00133F 85*4E*4C         [24] 4259 	mov	_move_sloc0_1_0,_move_sloc1_1_0
      001342 85*4F*4D         [24] 4260 	mov	(_move_sloc0_1_0 + 1),(_move_sloc1_1_0 + 1)
      001345 EE               [12] 4261 	mov	a,r6
      001346 25*4C            [12] 4262 	add	a,_move_sloc0_1_0
      001348 F9               [12] 4263 	mov	r1,a
      001349 EF               [12] 4264 	mov	a,r7
      00134A 35*4D            [12] 4265 	addc	a,(_move_sloc0_1_0 + 1)
      00134C FB               [12] 4266 	mov	r3,a
      00134D B9 FF 07         [24] 4267 	cjne	r1,#0xff,00135$
      001350 BB FF 04         [24] 4268 	cjne	r3,#0xff,00135$
      001353 D0 03            [24] 4269 	pop	ar3
      001355 80 4E            [24] 4270 	sjmp	00104$
      001357                       4271 00135$:
      001357 D0 03            [24] 4272 	pop	ar3
      001359 EC               [12] 4273 	mov	a,r4
      00135A 25*4C            [12] 4274 	add	a,_move_sloc0_1_0
      00135C F8               [12] 4275 	mov	r0,a
      00135D ED               [12] 4276 	mov	a,r5
      00135E 35*4D            [12] 4277 	addc	a,(_move_sloc0_1_0 + 1)
      001360 F9               [12] 4278 	mov	r1,a
      001361 B8 FF 05         [24] 4279 	cjne	r0,#0xff,00136$
      001364 B9 FF 02         [24] 4280 	cjne	r1,#0xff,00136$
      001367 80 3C            [24] 4281 	sjmp	00104$
      001369                       4282 00136$:
                                   4283 ;	move.c:44: IOM = 0;
      001369 C0 03            [24] 4284 	push	ar3
                                   4285 ;	assignBit
      00136B C2 B4            [12] 4286 	clr	_P3_4
                                   4287 ;	move.c:45: origin = (uint16_t __xdata*)(startAdd + i);
      00136D 8E*4C            [24] 4288 	mov	_move_sloc0_1_0,r6
      00136F 8F*4D            [24] 4289 	mov	(_move_sloc0_1_0 + 1),r7
      001371 E5*4E            [12] 4290 	mov	a,_move_sloc1_1_0
      001373 25*4C            [12] 4291 	add	a,_move_sloc0_1_0
      001375 F8               [12] 4292 	mov	r0,a
      001376 E5*4F            [12] 4293 	mov	a,(_move_sloc1_1_0 + 1)
      001378 35*4D            [12] 4294 	addc	a,(_move_sloc0_1_0 + 1)
      00137A FB               [12] 4295 	mov	r3,a
      00137B 88 82            [24] 4296 	mov	dpl,r0
      00137D 8B 83            [24] 4297 	mov	dph,r3
                                   4298 ;	move.c:46: target = (uint16_t __xdata*)(targetAdd + i);
      00137F 8C 01            [24] 4299 	mov	ar1,r4
      001381 8D 03            [24] 4300 	mov	ar3,r5
      001383 E5*4E            [12] 4301 	mov	a,_move_sloc1_1_0
      001385 29               [12] 4302 	add	a,r1
      001386 F9               [12] 4303 	mov	r1,a
      001387 E5*4F            [12] 4304 	mov	a,(_move_sloc1_1_0 + 1)
      001389 3B               [12] 4305 	addc	a,r3
      00138A FB               [12] 4306 	mov	r3,a
      00138B 89*4A            [24] 4307 	mov	_move_target_65537_249,r1
      00138D 8B*4B            [24] 4308 	mov	(_move_target_65537_249 + 1),r3
                                   4309 ;	move.c:47: o = *origin;
      00138F E0               [24] 4310 	movx	a,@dptr
      001390 F8               [12] 4311 	mov	r0,a
                                   4312 ;	move.c:48: *target = o;
      001391 7B 00            [12] 4313 	mov	r3,#0x00
      001393 85*4A 82         [24] 4314 	mov	dpl,_move_target_65537_249
      001396 85*4B 83         [24] 4315 	mov	dph,(_move_target_65537_249 + 1)
      001399 E8               [12] 4316 	mov	a,r0
      00139A F0               [24] 4317 	movx	@dptr,a
      00139B EB               [12] 4318 	mov	a,r3
      00139C A3               [24] 4319 	inc	dptr
      00139D F0               [24] 4320 	movx	@dptr,a
                                   4321 ;	move.c:49: IOM = 1;
                                   4322 ;	assignBit
      00139E D2 B4            [12] 4323 	setb	_P3_4
                                   4324 ;	move.c:37: for (i = 0; i < size; i++) {
      0013A0 0A               [12] 4325 	inc	r2
      0013A1 D0 03            [24] 4326 	pop	ar3
      0013A3 80 8E            [24] 4327 	sjmp	00109$
      0013A5                       4328 00104$:
                                   4329 ;	move.c:56: LCD_string_write("Done!\n");
      0013A5 90r06r3A         [24] 4330 	mov	dptr,#___str_20
      0013A8 75 F0 80         [24] 4331 	mov	b,#0x80
      0013AB 12r0Cr4B         [24] 4332 	lcall	_LCD_string_write
                                   4333 ;	move.c:57: LCD_string_write("Press 1 for menu\n");
      0013AE 90r05r8F         [24] 4334 	mov	dptr,#___str_10
      0013B1 75 F0 80         [24] 4335 	mov	b,#0x80
      0013B4 12r0Cr4B         [24] 4336 	lcall	_LCD_string_write
                                   4337 ;	move.c:59: do {
      0013B7                       4338 00105$:
                                   4339 ;	move.c:60: size = keyDetect();
      0013B7 12r0CrEA         [24] 4340 	lcall	_keyDetect
      0013BA AF 82            [24] 4341 	mov	r7,dpl
                                   4342 ;	move.c:61: } while (size != '1');
      0013BC BF 31 F8         [24] 4343 	cjne	r7,#0x31,00105$
                                   4344 ;	move.c:62: }
      0013BF 22               [24] 4345 	ret
                                   4346 ;------------------------------------------------------------
                                   4347 ;Allocation info for local variables in function 'editByte'
                                   4348 ;------------------------------------------------------------
                                   4349 ;ramAddress                Allocated to registers r6 r7 
                                   4350 ;add                       Allocated with name '_editByte_add_65536_253'
                                   4351 ;val                       Allocated with name '_editByte_val_65536_254'
                                   4352 ;new                       Allocated with name '_editByte_new_65536_254'
                                   4353 ;high                      Allocated with name '_editByte_high_65536_254'
                                   4354 ;low                       Allocated with name '_editByte_low_65536_254'
                                   4355 ;------------------------------------------------------------
                                   4356 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   4357 ;	-----------------------------------------
                                   4358 ;	 function editByte
                                   4359 ;	-----------------------------------------
      0013C0                       4360 _editByte:
      0013C0 AF 83            [24] 4361 	mov	r7,dph
      0013C2 E5 82            [12] 4362 	mov	a,dpl
      0013C4 90r00r1A         [24] 4363 	mov	dptr,#_editByte_add_65536_253
      0013C7 F0               [24] 4364 	movx	@dptr,a
      0013C8 EF               [12] 4365 	mov	a,r7
      0013C9 A3               [24] 4366 	inc	dptr
      0013CA F0               [24] 4367 	movx	@dptr,a
                                   4368 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      0013CB 90r00r1A         [24] 4369 	mov	dptr,#_editByte_add_65536_253
      0013CE E0               [24] 4370 	movx	a,@dptr
      0013CF FE               [12] 4371 	mov	r6,a
      0013D0 A3               [24] 4372 	inc	dptr
      0013D1 E0               [24] 4373 	movx	a,@dptr
      0013D2 FF               [12] 4374 	mov	r7,a
      0013D3 FC               [12] 4375 	mov	r4,a
                                   4376 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      0013D4 8E 05            [24] 4377 	mov	ar5,r6
                                   4378 ;	edit.c:16: asciiToHex(high);
      0013D6 8C 82            [24] 4379 	mov	dpl,r4
      0013D8 C0 07            [24] 4380 	push	ar7
      0013DA C0 06            [24] 4381 	push	ar6
      0013DC C0 05            [24] 4382 	push	ar5
      0013DE C0 04            [24] 4383 	push	ar4
      0013E0 12r0ErCC         [24] 4384 	lcall	_asciiToHex
      0013E3 D0 04            [24] 4385 	pop	ar4
      0013E5 D0 05            [24] 4386 	pop	ar5
                                   4387 ;	edit.c:17: asciiToHex(low);
      0013E7 8D 82            [24] 4388 	mov	dpl,r5
      0013E9 C0 05            [24] 4389 	push	ar5
      0013EB C0 04            [24] 4390 	push	ar4
      0013ED 12r0ErCC         [24] 4391 	lcall	_asciiToHex
                                   4392 ;	edit.c:19: LCD_string_write(": ");
      0013F0 90r06r41         [24] 4393 	mov	dptr,#___str_21
      0013F3 75 F0 80         [24] 4394 	mov	b,#0x80
      0013F6 12r0Cr4B         [24] 4395 	lcall	_LCD_string_write
      0013F9 D0 04            [24] 4396 	pop	ar4
      0013FB D0 05            [24] 4397 	pop	ar5
      0013FD D0 06            [24] 4398 	pop	ar6
      0013FF D0 07            [24] 4399 	pop	ar7
                                   4400 ;	edit.c:22: IOM = 0;
                                   4401 ;	assignBit
      001401 C2 B4            [12] 4402 	clr	_P3_4
                                   4403 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   4404 ;	edit.c:24: val = *ramAddress;
      001403 8E 82            [24] 4405 	mov	dpl,r6
      001405 8F 83            [24] 4406 	mov	dph,r7
      001407 E0               [24] 4407 	movx	a,@dptr
      001408 FB               [12] 4408 	mov	r3,a
                                   4409 ;	edit.c:25: IOM = 1;
                                   4410 ;	assignBit
      001409 D2 B4            [12] 4411 	setb	_P3_4
                                   4412 ;	edit.c:28: asciiToHex(val);
      00140B 8B 82            [24] 4413 	mov	dpl,r3
      00140D C0 07            [24] 4414 	push	ar7
      00140F C0 06            [24] 4415 	push	ar6
      001411 C0 05            [24] 4416 	push	ar5
      001413 C0 04            [24] 4417 	push	ar4
      001415 12r0ErCC         [24] 4418 	lcall	_asciiToHex
                                   4419 ;	edit.c:31: write('\n');
      001418 75 82 0A         [24] 4420 	mov	dpl,#0x0a
      00141B 12r0BrDD         [24] 4421 	lcall	_write
                                   4422 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      00141E 90r06r44         [24] 4423 	mov	dptr,#___str_22
      001421 75 F0 80         [24] 4424 	mov	b,#0x80
      001424 12r0Cr4B         [24] 4425 	lcall	_LCD_string_write
                                   4426 ;	edit.c:33: new = getByte();
      001427 12r10rAC         [24] 4427 	lcall	_getByte
      00142A AB 82            [24] 4428 	mov	r3,dpl
                                   4429 ;	edit.c:34: write('\n');
      00142C 75 82 0A         [24] 4430 	mov	dpl,#0x0a
      00142F C0 03            [24] 4431 	push	ar3
      001431 12r0BrDD         [24] 4432 	lcall	_write
      001434 D0 03            [24] 4433 	pop	ar3
      001436 D0 04            [24] 4434 	pop	ar4
      001438 D0 05            [24] 4435 	pop	ar5
      00143A D0 06            [24] 4436 	pop	ar6
      00143C D0 07            [24] 4437 	pop	ar7
                                   4438 ;	edit.c:37: IOM = 0;
                                   4439 ;	assignBit
      00143E C2 B4            [12] 4440 	clr	_P3_4
                                   4441 ;	edit.c:38: *ramAddress = new;
      001440 7A 00            [12] 4442 	mov	r2,#0x00
      001442 8E 82            [24] 4443 	mov	dpl,r6
      001444 8F 83            [24] 4444 	mov	dph,r7
      001446 EB               [12] 4445 	mov	a,r3
      001447 F0               [24] 4446 	movx	@dptr,a
      001448 EA               [12] 4447 	mov	a,r2
      001449 A3               [24] 4448 	inc	dptr
      00144A F0               [24] 4449 	movx	@dptr,a
                                   4450 ;	edit.c:39: val = *ramAddress;
                                   4451 ;	edit.c:40: IOM = 1;
                                   4452 ;	assignBit
      00144B D2 B4            [12] 4453 	setb	_P3_4
                                   4454 ;	edit.c:43: asciiToHex(high);
      00144D 8C 82            [24] 4455 	mov	dpl,r4
      00144F C0 05            [24] 4456 	push	ar5
      001451 C0 03            [24] 4457 	push	ar3
      001453 12r0ErCC         [24] 4458 	lcall	_asciiToHex
      001456 D0 03            [24] 4459 	pop	ar3
      001458 D0 05            [24] 4460 	pop	ar5
                                   4461 ;	edit.c:44: asciiToHex(low);
      00145A 8D 82            [24] 4462 	mov	dpl,r5
      00145C C0 03            [24] 4463 	push	ar3
      00145E 12r0ErCC         [24] 4464 	lcall	_asciiToHex
                                   4465 ;	edit.c:45: LCD_string_write(": ");
      001461 90r06r41         [24] 4466 	mov	dptr,#___str_21
      001464 75 F0 80         [24] 4467 	mov	b,#0x80
      001467 12r0Cr4B         [24] 4468 	lcall	_LCD_string_write
      00146A D0 03            [24] 4469 	pop	ar3
                                   4470 ;	edit.c:46: asciiToHex(val);
      00146C 8B 82            [24] 4471 	mov	dpl,r3
      00146E 12r0ErCC         [24] 4472 	lcall	_asciiToHex
                                   4473 ;	edit.c:47: write('\n');
      001471 75 82 0A         [24] 4474 	mov	dpl,#0x0a
                                   4475 ;	edit.c:49: }
      001474 02r0BrDD         [24] 4476 	ljmp	_write
                                   4477 ;------------------------------------------------------------
                                   4478 ;Allocation info for local variables in function 'edit'
                                   4479 ;------------------------------------------------------------
                                   4480 ;input                     Allocated with name '_edit_input_65537_256'
                                   4481 ;add                       Allocated with name '_edit_add_65537_256'
                                   4482 ;------------------------------------------------------------
                                   4483 ;	edit.c:55: void edit() {
                                   4484 ;	-----------------------------------------
                                   4485 ;	 function edit
                                   4486 ;	-----------------------------------------
      001477                       4487 _edit:
                                   4488 ;	edit.c:57: fillScreen(GRAY);
      001477 90 D6 BA         [24] 4489 	mov	dptr,#0xd6ba
      00147A 12r08r44         [24] 4490 	lcall	_fillScreen
                                   4491 ;	edit.c:58: setCursor(0, 0);
      00147D E4               [12] 4492 	clr	a
      00147E F5*00            [12] 4493 	mov	_setCursor_PARM_2,a
      001480 F5*01            [12] 4494 	mov	(_setCursor_PARM_2 + 1),a
      001482 90 00 00         [24] 4495 	mov	dptr,#0x0000
      001485 12r00rB6         [24] 4496 	lcall	_setCursor
                                   4497 ;	edit.c:59: setTextSize(2);
      001488 75 82 02         [24] 4498 	mov	dpl,#0x02
      00148B 12r00rD0         [24] 4499 	lcall	_setTextSize
                                   4500 ;	edit.c:66: LCD_string_write("Enter address:\n");
      00148E 90r06r55         [24] 4501 	mov	dptr,#___str_23
      001491 75 F0 80         [24] 4502 	mov	b,#0x80
      001494 12r0Cr4B         [24] 4503 	lcall	_LCD_string_write
                                   4504 ;	edit.c:67: add = getAddress();
      001497 12r10r45         [24] 4505 	lcall	_getAddress
      00149A AE 82            [24] 4506 	mov	r6,dpl
      00149C AF 83            [24] 4507 	mov	r7,dph
                                   4508 ;	edit.c:68: write('\n');
      00149E 75 82 0A         [24] 4509 	mov	dpl,#0x0a
      0014A1 C0 07            [24] 4510 	push	ar7
      0014A3 C0 06            [24] 4511 	push	ar6
      0014A5 12r0BrDD         [24] 4512 	lcall	_write
      0014A8 D0 06            [24] 4513 	pop	ar6
      0014AA D0 07            [24] 4514 	pop	ar7
                                   4515 ;	edit.c:71: editByte(add);
      0014AC 8E 82            [24] 4516 	mov	dpl,r6
      0014AE 8F 83            [24] 4517 	mov	dph,r7
      0014B0 C0 07            [24] 4518 	push	ar7
      0014B2 C0 06            [24] 4519 	push	ar6
      0014B4 12r13rC0         [24] 4520 	lcall	_editByte
      0014B7 D0 06            [24] 4521 	pop	ar6
      0014B9 D0 07            [24] 4522 	pop	ar7
                                   4523 ;	edit.c:74: do {
      0014BB                       4524 00111$:
                                   4525 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      0014BB 90r05r8F         [24] 4526 	mov	dptr,#___str_10
      0014BE 75 F0 80         [24] 4527 	mov	b,#0x80
      0014C1 C0 07            [24] 4528 	push	ar7
      0014C3 C0 06            [24] 4529 	push	ar6
      0014C5 12r0Cr4B         [24] 4530 	lcall	_LCD_string_write
                                   4531 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      0014C8 90r06r65         [24] 4532 	mov	dptr,#___str_24
      0014CB 75 F0 80         [24] 4533 	mov	b,#0x80
      0014CE 12r0Cr4B         [24] 4534 	lcall	_LCD_string_write
                                   4535 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      0014D1 90r06r7C         [24] 4536 	mov	dptr,#___str_25
      0014D4 75 F0 80         [24] 4537 	mov	b,#0x80
      0014D7 12r0Cr4B         [24] 4538 	lcall	_LCD_string_write
                                   4539 ;	edit.c:78: input = keyDetect();
      0014DA 12r0CrEA         [24] 4540 	lcall	_keyDetect
      0014DD AD 82            [24] 4541 	mov	r5,dpl
      0014DF D0 06            [24] 4542 	pop	ar6
      0014E1 D0 07            [24] 4543 	pop	ar7
      0014E3 90r00r1C         [24] 4544 	mov	dptr,#_edit_input_65537_256
      0014E6 ED               [12] 4545 	mov	a,r5
      0014E7 F0               [24] 4546 	movx	@dptr,a
                                   4547 ;	edit.c:80: if (input == '1') {
      0014E8 BD 31 01         [24] 4548 	cjne	r5,#0x31,00141$
      0014EB 22               [24] 4549 	ret
      0014EC                       4550 00141$:
                                   4551 ;	edit.c:82: } else if (input =='2') {
      0014EC BD 32 2F         [24] 4552 	cjne	r5,#0x32,00104$
                                   4553 ;	edit.c:83: fillScreen(GRAY);
      0014EF 90 D6 BA         [24] 4554 	mov	dptr,#0xd6ba
      0014F2 C0 07            [24] 4555 	push	ar7
      0014F4 C0 06            [24] 4556 	push	ar6
      0014F6 12r08r44         [24] 4557 	lcall	_fillScreen
                                   4558 ;	edit.c:84: setCursor(0, 0);
      0014F9 E4               [12] 4559 	clr	a
      0014FA F5*00            [12] 4560 	mov	_setCursor_PARM_2,a
      0014FC F5*01            [12] 4561 	mov	(_setCursor_PARM_2 + 1),a
      0014FE 90 00 00         [24] 4562 	mov	dptr,#0x0000
      001501 12r00rB6         [24] 4563 	lcall	_setCursor
      001504 D0 06            [24] 4564 	pop	ar6
      001506 D0 07            [24] 4565 	pop	ar7
                                   4566 ;	edit.c:86: editByte(add);
      001508 8E 82            [24] 4567 	mov	dpl,r6
      00150A 8F 83            [24] 4568 	mov	dph,r7
      00150C C0 07            [24] 4569 	push	ar7
      00150E C0 06            [24] 4570 	push	ar6
      001510 12r13rC0         [24] 4571 	lcall	_editByte
      001513 D0 06            [24] 4572 	pop	ar6
      001515 D0 07            [24] 4573 	pop	ar7
                                   4574 ;	edit.c:88: input = 0;
      001517 90r00r1C         [24] 4575 	mov	dptr,#_edit_input_65537_256
      00151A E4               [12] 4576 	clr	a
      00151B F0               [24] 4577 	movx	@dptr,a
      00151C 80 35            [24] 4578 	sjmp	00112$
      00151E                       4579 00104$:
                                   4580 ;	edit.c:89: } else if (input == '3') {
      00151E BD 33 32         [24] 4581 	cjne	r5,#0x33,00112$
                                   4582 ;	edit.c:90: fillScreen(GRAY);
      001521 90 D6 BA         [24] 4583 	mov	dptr,#0xd6ba
      001524 C0 07            [24] 4584 	push	ar7
      001526 C0 06            [24] 4585 	push	ar6
      001528 12r08r44         [24] 4586 	lcall	_fillScreen
                                   4587 ;	edit.c:91: setCursor(0, 0);
      00152B E4               [12] 4588 	clr	a
      00152C F5*00            [12] 4589 	mov	_setCursor_PARM_2,a
      00152E F5*01            [12] 4590 	mov	(_setCursor_PARM_2 + 1),a
      001530 90 00 00         [24] 4591 	mov	dptr,#0x0000
      001533 12r00rB6         [24] 4592 	lcall	_setCursor
      001536 D0 06            [24] 4593 	pop	ar6
      001538 D0 07            [24] 4594 	pop	ar7
                                   4595 ;	edit.c:93: editByte(++add);
      00153A 0E               [12] 4596 	inc	r6
      00153B BE 00 01         [24] 4597 	cjne	r6,#0x00,00146$
      00153E 0F               [12] 4598 	inc	r7
      00153F                       4599 00146$:
      00153F 8E 82            [24] 4600 	mov	dpl,r6
      001541 8F 83            [24] 4601 	mov	dph,r7
      001543 C0 07            [24] 4602 	push	ar7
      001545 C0 06            [24] 4603 	push	ar6
      001547 12r13rC0         [24] 4604 	lcall	_editByte
      00154A D0 06            [24] 4605 	pop	ar6
      00154C D0 07            [24] 4606 	pop	ar7
                                   4607 ;	edit.c:95: input = 0;
      00154E 90r00r1C         [24] 4608 	mov	dptr,#_edit_input_65537_256
      001551 E4               [12] 4609 	clr	a
      001552 F0               [24] 4610 	movx	@dptr,a
      001553                       4611 00112$:
                                   4612 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      001553 90r00r1C         [24] 4613 	mov	dptr,#_edit_input_65537_256
      001556 E0               [24] 4614 	movx	a,@dptr
      001557 FD               [12] 4615 	mov	r5,a
      001558 BD 31 01         [24] 4616 	cjne	r5,#0x31,00147$
      00155B 22               [24] 4617 	ret
      00155C                       4618 00147$:
      00155C BD 32 01         [24] 4619 	cjne	r5,#0x32,00148$
      00155F 22               [24] 4620 	ret
      001560                       4621 00148$:
      001560 BD 33 01         [24] 4622 	cjne	r5,#0x33,00149$
      001563 22               [24] 4623 	ret
      001564                       4624 00149$:
      001564 02r14rBB         [24] 4625 	ljmp	00111$
                                   4626 ;	edit.c:99: }
      001567 22               [24] 4627 	ret
                                   4628 ;------------------------------------------------------------
                                   4629 ;Allocation info for local variables in function 'printFind'
                                   4630 ;------------------------------------------------------------
                                   4631 ;key                       Allocated with name '_printFind_PARM_3'
                                   4632 ;start                     Allocated with name '_printFind_start_65536_261'
                                   4633 ;ramAddress                Allocated to registers 
                                   4634 ;sloc0                     Allocated with name '_printFind_sloc0_1_0'
                                   4635 ;num                       Allocated with name '_printFind_PARM_2'
                                   4636 ;index                     Allocated with name '_printFind_PARM_4'
                                   4637 ;i                         Allocated with name '_printFind_i_65537_263'
                                   4638 ;found                     Allocated with name '_printFind_found_65537_263'
                                   4639 ;high                      Allocated with name '_printFind_high_65537_263'
                                   4640 ;low                       Allocated with name '_printFind_low_65537_263'
                                   4641 ;------------------------------------------------------------
                                   4642 ;	find3.c:1: void printFind(uint16_t start, __xdata uint8_t num, uint8_t key, __xdata uint8_t index) {
                                   4643 ;	-----------------------------------------
                                   4644 ;	 function printFind
                                   4645 ;	-----------------------------------------
      001568                       4646 _printFind:
      001568 85 82*51         [24] 4647 	mov	_printFind_start_65536_261,dpl
      00156B 85 83*52         [24] 4648 	mov	(_printFind_start_65536_261 + 1),dph
                                   4649 ;	find3.c:3: fillScreen(GRAY);
      00156E 90 D6 BA         [24] 4650 	mov	dptr,#0xd6ba
      001571 12r08r44         [24] 4651 	lcall	_fillScreen
                                   4652 ;	find3.c:4: setCursor(0, 0);
      001574 E4               [12] 4653 	clr	a
      001575 F5*00            [12] 4654 	mov	_setCursor_PARM_2,a
      001577 F5*01            [12] 4655 	mov	(_setCursor_PARM_2 + 1),a
      001579 90 00 00         [24] 4656 	mov	dptr,#0x0000
      00157C 12r00rB6         [24] 4657 	lcall	_setCursor
                                   4658 ;	find3.c:5: setTextSize(2);
      00157F 75 82 02         [24] 4659 	mov	dpl,#0x02
      001582 12r00rD0         [24] 4660 	lcall	_setTextSize
                                   4661 ;	find3.c:15: for (i = 0; i < num; i++) {
      001585 90r00r1D         [24] 4662 	mov	dptr,#_printFind_PARM_2
      001588 E0               [24] 4663 	movx	a,@dptr
      001589 FD               [12] 4664 	mov	r5,a
      00158A 90r00r1E         [24] 4665 	mov	dptr,#_printFind_PARM_4
      00158D E0               [24] 4666 	movx	a,@dptr
      00158E FC               [12] 4667 	mov	r4,a
      00158F 7B 00            [12] 4668 	mov	r3,#0x00
      001591                       4669 00107$:
      001591 C3               [12] 4670 	clr	c
      001592 EB               [12] 4671 	mov	a,r3
      001593 9D               [12] 4672 	subb	a,r5
      001594 40 01            [24] 4673 	jc	00128$
      001596 22               [24] 4674 	ret
      001597                       4675 00128$:
                                   4676 ;	find3.c:16: if (start + i == __END_RAM__) break;
      001597 8B 01            [24] 4677 	mov	ar1,r3
      001599 7A 00            [12] 4678 	mov	r2,#0x00
      00159B 85*51*53         [24] 4679 	mov	_printFind_sloc0_1_0,_printFind_start_65536_261
      00159E 85*52*54         [24] 4680 	mov	(_printFind_sloc0_1_0 + 1),(_printFind_start_65536_261 + 1)
      0015A1 E9               [12] 4681 	mov	a,r1
      0015A2 25*53            [12] 4682 	add	a,_printFind_sloc0_1_0
      0015A4 F8               [12] 4683 	mov	r0,a
      0015A5 EA               [12] 4684 	mov	a,r2
      0015A6 35*54            [12] 4685 	addc	a,(_printFind_sloc0_1_0 + 1)
      0015A8 FF               [12] 4686 	mov	r7,a
      0015A9 B8 FF 04         [24] 4687 	cjne	r0,#0xff,00129$
      0015AC BF FF 01         [24] 4688 	cjne	r7,#0xff,00129$
      0015AF 22               [24] 4689 	ret
      0015B0                       4690 00129$:
                                   4691 ;	find3.c:18: IOM = 0;
                                   4692 ;	assignBit
      0015B0 C2 B4            [12] 4693 	clr	_P3_4
                                   4694 ;	find3.c:19: ramAddress = (uint16_t __xdata*)(start + i);
      0015B2 E9               [12] 4695 	mov	a,r1
      0015B3 25*53            [12] 4696 	add	a,_printFind_sloc0_1_0
      0015B5 FE               [12] 4697 	mov	r6,a
      0015B6 EA               [12] 4698 	mov	a,r2
      0015B7 35*54            [12] 4699 	addc	a,(_printFind_sloc0_1_0 + 1)
      0015B9 FF               [12] 4700 	mov	r7,a
      0015BA 8E 82            [24] 4701 	mov	dpl,r6
      0015BC 8F 83            [24] 4702 	mov	dph,r7
                                   4703 ;	find3.c:20: found = *ramAddress;
      0015BE E0               [24] 4704 	movx	a,@dptr
                                   4705 ;	find3.c:23: if (found == key) {
      0015BF FF               [12] 4706 	mov	r7,a
      0015C0 B5*50 5A         [24] 4707 	cjne	a,_printFind_PARM_3,00108$
                                   4708 ;	find3.c:26: asciiToHex(index++);
      0015C3 8C 82            [24] 4709 	mov	dpl,r4
      0015C5 0C               [12] 4710 	inc	r4
      0015C6 C0 05            [24] 4711 	push	ar5
      0015C8 C0 04            [24] 4712 	push	ar4
      0015CA C0 03            [24] 4713 	push	ar3
      0015CC C0 02            [24] 4714 	push	ar2
      0015CE C0 01            [24] 4715 	push	ar1
      0015D0 12r0ErCC         [24] 4716 	lcall	_asciiToHex
                                   4717 ;	find3.c:27: LCD_string_write(": ");
      0015D3 90r06r41         [24] 4718 	mov	dptr,#___str_21
      0015D6 75 F0 80         [24] 4719 	mov	b,#0x80
      0015D9 12r0Cr4B         [24] 4720 	lcall	_LCD_string_write
      0015DC D0 01            [24] 4721 	pop	ar1
      0015DE D0 02            [24] 4722 	pop	ar2
      0015E0 D0 03            [24] 4723 	pop	ar3
      0015E2 D0 04            [24] 4724 	pop	ar4
      0015E4 D0 05            [24] 4725 	pop	ar5
                                   4726 ;	find3.c:29: high = HIGHBYTE(start + i);
      0015E6 E9               [12] 4727 	mov	a,r1
      0015E7 25*53            [12] 4728 	add	a,_printFind_sloc0_1_0
      0015E9 EA               [12] 4729 	mov	a,r2
      0015EA 35*54            [12] 4730 	addc	a,(_printFind_sloc0_1_0 + 1)
      0015EC F5 82            [12] 4731 	mov	dpl,a
                                   4732 ;	find3.c:30: low = LOWBYTE(start + i);
      0015EE AE*51            [24] 4733 	mov	r6,_printFind_start_65536_261
      0015F0 EB               [12] 4734 	mov	a,r3
      0015F1 2E               [12] 4735 	add	a,r6
      0015F2 FE               [12] 4736 	mov	r6,a
                                   4737 ;	find3.c:33: asciiToHex(high);
      0015F3 C0 06            [24] 4738 	push	ar6
      0015F5 C0 05            [24] 4739 	push	ar5
      0015F7 C0 04            [24] 4740 	push	ar4
      0015F9 C0 03            [24] 4741 	push	ar3
      0015FB 12r0ErCC         [24] 4742 	lcall	_asciiToHex
      0015FE D0 03            [24] 4743 	pop	ar3
      001600 D0 04            [24] 4744 	pop	ar4
      001602 D0 05            [24] 4745 	pop	ar5
      001604 D0 06            [24] 4746 	pop	ar6
                                   4747 ;	find3.c:34: asciiToHex(low);
      001606 8E 82            [24] 4748 	mov	dpl,r6
      001608 C0 05            [24] 4749 	push	ar5
      00160A C0 04            [24] 4750 	push	ar4
      00160C C0 03            [24] 4751 	push	ar3
      00160E 12r0ErCC         [24] 4752 	lcall	_asciiToHex
                                   4753 ;	find3.c:36: write('\n');
      001611 75 82 0A         [24] 4754 	mov	dpl,#0x0a
      001614 12r0BrDD         [24] 4755 	lcall	_write
      001617 D0 03            [24] 4756 	pop	ar3
      001619 D0 04            [24] 4757 	pop	ar4
      00161B D0 05            [24] 4758 	pop	ar5
      00161D                       4759 00108$:
                                   4760 ;	find3.c:15: for (i = 0; i < num; i++) {
      00161D 0B               [12] 4761 	inc	r3
                                   4762 ;	find3.c:39: }
      00161E 02r15r91         [24] 4763 	ljmp	00107$
                                   4764 ;------------------------------------------------------------
                                   4765 ;Allocation info for local variables in function 'find'
                                   4766 ;------------------------------------------------------------
                                   4767 ;ramAddress                Allocated to registers 
                                   4768 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   4769 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   4770 ;sloc2                     Allocated with name '_find_sloc2_1_0'
                                   4771 ;key                       Allocated with name '_find_key_65537_268'
                                   4772 ;i                         Allocated with name '_find_i_65537_268'
                                   4773 ;n                         Allocated with name '_find_n_65537_268'
                                   4774 ;size                      Allocated with name '_find_size_65537_268'
                                   4775 ;input                     Allocated with name '_find_input_65537_268'
                                   4776 ;page                      Allocated with name '_find_page_65537_268'
                                   4777 ;index                     Allocated with name '_find_index_65537_268'
                                   4778 ;pages                     Allocated with name '_find_pages_65537_268'
                                   4779 ;address                   Allocated with name '_find_address_65537_268'
                                   4780 ;------------------------------------------------------------
                                   4781 ;	find3.c:43: void find() {
                                   4782 ;	-----------------------------------------
                                   4783 ;	 function find
                                   4784 ;	-----------------------------------------
      001621                       4785 _find:
                                   4786 ;	find3.c:45: fillScreen(GRAY);
      001621 90 D6 BA         [24] 4787 	mov	dptr,#0xd6ba
      001624 12r08r44         [24] 4788 	lcall	_fillScreen
                                   4789 ;	find3.c:46: setCursor(0, 0);
      001627 E4               [12] 4790 	clr	a
      001628 F5*00            [12] 4791 	mov	_setCursor_PARM_2,a
      00162A F5*01            [12] 4792 	mov	(_setCursor_PARM_2 + 1),a
      00162C 90 00 00         [24] 4793 	mov	dptr,#0x0000
      00162F 12r00rB6         [24] 4794 	lcall	_setCursor
                                   4795 ;	find3.c:47: setTextSize(2);
      001632 75 82 02         [24] 4796 	mov	dpl,#0x02
      001635 12r00rD0         [24] 4797 	lcall	_setTextSize
                                   4798 ;	find3.c:56: __xdata uint8_t page = 1;
      001638 90r00r1F         [24] 4799 	mov	dptr,#_find_page_65537_268
      00163B 74 01            [12] 4800 	mov	a,#0x01
      00163D F0               [24] 4801 	movx	@dptr,a
                                   4802 ;	find3.c:63: LCD_string_write("Enter byte to search:\n");
      00163E 90r06r9A         [24] 4803 	mov	dptr,#___str_26
      001641 75 F0 80         [24] 4804 	mov	b,#0x80
      001644 12r0Cr4B         [24] 4805 	lcall	_LCD_string_write
                                   4806 ;	find3.c:64: key = getByte();
      001647 12r10rAC         [24] 4807 	lcall	_getByte
      00164A AF 82            [24] 4808 	mov	r7,dpl
                                   4809 ;	find3.c:65: write('\n');
      00164C 75 82 0A         [24] 4810 	mov	dpl,#0x0a
      00164F C0 07            [24] 4811 	push	ar7
      001651 12r0BrDD         [24] 4812 	lcall	_write
                                   4813 ;	find3.c:68: LCD_string_write("Enter start address:\n");
      001654 90r05rEB         [24] 4814 	mov	dptr,#___str_16
      001657 75 F0 80         [24] 4815 	mov	b,#0x80
      00165A 12r0Cr4B         [24] 4816 	lcall	_LCD_string_write
                                   4817 ;	find3.c:69: address = getAddress();
      00165D 12r10r45         [24] 4818 	lcall	_getAddress
      001660 AD 82            [24] 4819 	mov	r5,dpl
      001662 AE 83            [24] 4820 	mov	r6,dph
      001664 90r00r21         [24] 4821 	mov	dptr,#_find_address_65537_268
      001667 ED               [12] 4822 	mov	a,r5
      001668 F0               [24] 4823 	movx	@dptr,a
      001669 EE               [12] 4824 	mov	a,r6
      00166A A3               [24] 4825 	inc	dptr
      00166B F0               [24] 4826 	movx	@dptr,a
                                   4827 ;	find3.c:70: write('\n');
      00166C 75 82 0A         [24] 4828 	mov	dpl,#0x0a
      00166F C0 06            [24] 4829 	push	ar6
      001671 C0 05            [24] 4830 	push	ar5
      001673 12r0BrDD         [24] 4831 	lcall	_write
                                   4832 ;	find3.c:73: LCD_string_write("Enter block size:\n");
      001676 90r06rB1         [24] 4833 	mov	dptr,#___str_27
      001679 75 F0 80         [24] 4834 	mov	b,#0x80
      00167C 12r0Cr4B         [24] 4835 	lcall	_LCD_string_write
                                   4836 ;	find3.c:74: size = getByte();
      00167F 12r10rAC         [24] 4837 	lcall	_getByte
      001682 AC 82            [24] 4838 	mov	r4,dpl
                                   4839 ;	find3.c:75: write('\n');
      001684 75 82 0A         [24] 4840 	mov	dpl,#0x0a
      001687 C0 04            [24] 4841 	push	ar4
      001689 12r0BrDD         [24] 4842 	lcall	_write
      00168C D0 04            [24] 4843 	pop	ar4
      00168E D0 05            [24] 4844 	pop	ar5
      001690 D0 06            [24] 4845 	pop	ar6
      001692 D0 07            [24] 4846 	pop	ar7
                                   4847 ;	find3.c:78: for (i = 0; i < size; i++) {
      001694 7B 00            [12] 4848 	mov	r3,#0x00
      001696 7A 00            [12] 4849 	mov	r2,#0x00
      001698                       4850 00135$:
      001698 C3               [12] 4851 	clr	c
      001699 EA               [12] 4852 	mov	a,r2
      00169A 9C               [12] 4853 	subb	a,r4
      00169B 50 31            [24] 4854 	jnc	00103$
                                   4855 ;	find3.c:79: IOM = 0;
      00169D C0 04            [24] 4856 	push	ar4
                                   4857 ;	assignBit
      00169F C2 B4            [12] 4858 	clr	_P3_4
                                   4859 ;	find3.c:80: ramAddress = (uint16_t __xdata*)(address + i);
      0016A1 8A*55            [24] 4860 	mov	_find_sloc0_1_0,r2
      0016A3 75*56 00         [24] 4861 	mov	(_find_sloc0_1_0 + 1),#0x00
      0016A6 8D*57            [24] 4862 	mov	_find_sloc1_1_0,r5
      0016A8 8E*58            [24] 4863 	mov	(_find_sloc1_1_0 + 1),r6
      0016AA A8*55            [24] 4864 	mov	r0,_find_sloc0_1_0
      0016AC AC*56            [24] 4865 	mov	r4,(_find_sloc0_1_0 + 1)
      0016AE E8               [12] 4866 	mov	a,r0
      0016AF 25*57            [12] 4867 	add	a,_find_sloc1_1_0
      0016B1 F8               [12] 4868 	mov	r0,a
      0016B2 EC               [12] 4869 	mov	a,r4
      0016B3 35*58            [12] 4870 	addc	a,(_find_sloc1_1_0 + 1)
      0016B5 FC               [12] 4871 	mov	r4,a
      0016B6 88 82            [24] 4872 	mov	dpl,r0
      0016B8 8C 83            [24] 4873 	mov	dph,r4
                                   4874 ;	find3.c:81: input = *ramAddress;
      0016BA E0               [24] 4875 	movx	a,@dptr
      0016BB FC               [12] 4876 	mov	r4,a
                                   4877 ;	find3.c:82: IOM = 1;
                                   4878 ;	assignBit
      0016BC D2 B4            [12] 4879 	setb	_P3_4
                                   4880 ;	find3.c:84: if (input == key) n++;
      0016BE EC               [12] 4881 	mov	a,r4
      0016BF B5 07 02         [24] 4882 	cjne	a,ar7,00217$
      0016C2 80 04            [24] 4883 	sjmp	00218$
      0016C4                       4884 00217$:
      0016C4 D0 04            [24] 4885 	pop	ar4
      0016C6 80 03            [24] 4886 	sjmp	00136$
      0016C8                       4887 00218$:
      0016C8 D0 04            [24] 4888 	pop	ar4
      0016CA 0B               [12] 4889 	inc	r3
      0016CB                       4890 00136$:
                                   4891 ;	find3.c:78: for (i = 0; i < size; i++) {
      0016CB 0A               [12] 4892 	inc	r2
      0016CC 80 CA            [24] 4893 	sjmp	00135$
      0016CE                       4894 00103$:
                                   4895 ;	find3.c:87: pages = size / NUM;
      0016CE 7A 00            [12] 4896 	mov	r2,#0x00
      0016D0 75*00 0F         [24] 4897 	mov	__divsint_PARM_2,#0x0f
                                   4898 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0016D3 8A*01            [24] 4899 	mov	(__divsint_PARM_2 + 1),r2
      0016D5 8C 82            [24] 4900 	mov	dpl,r4
      0016D7 8A 83            [24] 4901 	mov	dph,r2
      0016D9 C0 07            [24] 4902 	push	ar7
      0016DB C0 06            [24] 4903 	push	ar6
      0016DD C0 05            [24] 4904 	push	ar5
      0016DF C0 03            [24] 4905 	push	ar3
      0016E1 12r00r00         [24] 4906 	lcall	__divsint
      0016E4 AA 82            [24] 4907 	mov	r2,dpl
      0016E6 D0 03            [24] 4908 	pop	ar3
      0016E8 D0 05            [24] 4909 	pop	ar5
      0016EA D0 06            [24] 4910 	pop	ar6
      0016EC D0 07            [24] 4911 	pop	ar7
                                   4912 ;	find3.c:91: printFind(address, NUM, key, index);
      0016EE 90r00r1D         [24] 4913 	mov	dptr,#_printFind_PARM_2
      0016F1 74 0F            [12] 4914 	mov	a,#0x0f
      0016F3 F0               [24] 4915 	movx	@dptr,a
      0016F4 8F*50            [24] 4916 	mov	_printFind_PARM_3,r7
      0016F6 90r00r1E         [24] 4917 	mov	dptr,#_printFind_PARM_4
      0016F9 E4               [12] 4918 	clr	a
      0016FA F0               [24] 4919 	movx	@dptr,a
      0016FB 8D 82            [24] 4920 	mov	dpl,r5
      0016FD 8E 83            [24] 4921 	mov	dph,r6
      0016FF C0 07            [24] 4922 	push	ar7
      001701 C0 03            [24] 4923 	push	ar3
      001703 C0 02            [24] 4924 	push	ar2
      001705 12r15r68         [24] 4925 	lcall	_printFind
      001708 D0 02            [24] 4926 	pop	ar2
      00170A D0 03            [24] 4927 	pop	ar3
      00170C D0 07            [24] 4928 	pop	ar7
                                   4929 ;	find3.c:92: index += NUM;
      00170E 90r00r20         [24] 4930 	mov	dptr,#_find_index_65537_268
      001711 74 0F            [12] 4931 	mov	a,#0x0f
      001713 F0               [24] 4932 	movx	@dptr,a
                                   4933 ;	find3.c:98: do {
      001714 C3               [12] 4934 	clr	c
      001715 9B               [12] 4935 	subb	a,r3
      001716 E4               [12] 4936 	clr	a
      001717 33               [12] 4937 	rlc	a
      001718 FE               [12] 4938 	mov	r6,a
      001719 8E*59            [24] 4939 	mov	_find_sloc2_1_0,r6
      00171B 8E*55            [24] 4940 	mov	_find_sloc0_1_0,r6
      00171D 8E 01            [24] 4941 	mov	ar1,r6
      00171F                       4942 00131$:
                                   4943 ;	find3.c:100: if (n == 0) {
      00171F EB               [12] 4944 	mov	a,r3
      001720 70 20            [24] 4945 	jnz	00117$
                                   4946 ;	find3.c:101: LCD_string_write("None found!\n");
      001722 90r06rC4         [24] 4947 	mov	dptr,#___str_28
      001725 75 F0 80         [24] 4948 	mov	b,#0x80
      001728 C0 07            [24] 4949 	push	ar7
      00172A C0 06            [24] 4950 	push	ar6
      00172C C0 03            [24] 4951 	push	ar3
      00172E C0 02            [24] 4952 	push	ar2
      001730 C0 01            [24] 4953 	push	ar1
      001732 12r0Cr4B         [24] 4954 	lcall	_LCD_string_write
      001735 D0 01            [24] 4955 	pop	ar1
      001737 D0 02            [24] 4956 	pop	ar2
      001739 D0 03            [24] 4957 	pop	ar3
      00173B D0 06            [24] 4958 	pop	ar6
      00173D D0 07            [24] 4959 	pop	ar7
      00173F 02r17rD5         [24] 4960 	ljmp	00118$
      001742                       4961 00117$:
                                   4962 ;	find3.c:102: } else if (page != 1 && page != pages && n > NUM) {
      001742 90r00r1F         [24] 4963 	mov	dptr,#_find_page_65537_268
      001745 E0               [24] 4964 	movx	a,@dptr
      001746 F8               [12] 4965 	mov	r0,a
      001747 B8 01 02         [24] 4966 	cjne	r0,#0x01,00220$
      00174A 80 33            [24] 4967 	sjmp	00112$
      00174C                       4968 00220$:
      00174C E8               [12] 4969 	mov	a,r0
      00174D B5 02 02         [24] 4970 	cjne	a,ar2,00221$
      001750 80 2D            [24] 4971 	sjmp	00112$
      001752                       4972 00221$:
      001752 EB               [12] 4973 	mov	a,r3
      001753 24 F0            [12] 4974 	add	a,#0xff - 0x0f
      001755 50 28            [24] 4975 	jnc	00112$
                                   4976 ;	find3.c:103: LCD_string_write("Press A for previous\n");
      001757 90r06rD1         [24] 4977 	mov	dptr,#___str_29
      00175A 75 F0 80         [24] 4978 	mov	b,#0x80
      00175D C0 07            [24] 4979 	push	ar7
      00175F C0 06            [24] 4980 	push	ar6
      001761 C0 03            [24] 4981 	push	ar3
      001763 C0 02            [24] 4982 	push	ar2
      001765 C0 01            [24] 4983 	push	ar1
      001767 12r0Cr4B         [24] 4984 	lcall	_LCD_string_write
                                   4985 ;	find3.c:104: LCD_string_write("Press B for next\n");
      00176A 90r06rE7         [24] 4986 	mov	dptr,#___str_30
      00176D 75 F0 80         [24] 4987 	mov	b,#0x80
      001770 12r0Cr4B         [24] 4988 	lcall	_LCD_string_write
      001773 D0 01            [24] 4989 	pop	ar1
      001775 D0 02            [24] 4990 	pop	ar2
      001777 D0 03            [24] 4991 	pop	ar3
      001779 D0 06            [24] 4992 	pop	ar6
      00177B D0 07            [24] 4993 	pop	ar7
      00177D 80 56            [24] 4994 	sjmp	00118$
      00177F                       4995 00112$:
                                   4996 ;	find3.c:105: } else if (page != pages && n > NUM) {
      00177F 90r00r1F         [24] 4997 	mov	dptr,#_find_page_65537_268
      001782 E0               [24] 4998 	movx	a,@dptr
      001783 B5 02 02         [24] 4999 	cjne	a,ar2,00223$
      001786 80 22            [24] 5000 	sjmp	00108$
      001788                       5001 00223$:
      001788 EE               [12] 5002 	mov	a,r6
      001789 60 1F            [24] 5003 	jz	00108$
                                   5004 ;	find3.c:106: LCD_string_write("Press B for next\n");
      00178B 90r06rE7         [24] 5005 	mov	dptr,#___str_30
      00178E 75 F0 80         [24] 5006 	mov	b,#0x80
      001791 C0 07            [24] 5007 	push	ar7
      001793 C0 06            [24] 5008 	push	ar6
      001795 C0 03            [24] 5009 	push	ar3
      001797 C0 02            [24] 5010 	push	ar2
      001799 C0 01            [24] 5011 	push	ar1
      00179B 12r0Cr4B         [24] 5012 	lcall	_LCD_string_write
      00179E D0 01            [24] 5013 	pop	ar1
      0017A0 D0 02            [24] 5014 	pop	ar2
      0017A2 D0 03            [24] 5015 	pop	ar3
      0017A4 D0 06            [24] 5016 	pop	ar6
      0017A6 D0 07            [24] 5017 	pop	ar7
      0017A8 80 2B            [24] 5018 	sjmp	00118$
      0017AA                       5019 00108$:
                                   5020 ;	find3.c:107: } else if (page != 1 && n > NUM) {
      0017AA 90r00r1F         [24] 5021 	mov	dptr,#_find_page_65537_268
      0017AD E0               [24] 5022 	movx	a,@dptr
      0017AE F8               [12] 5023 	mov	r0,a
      0017AF B8 01 02         [24] 5024 	cjne	r0,#0x01,00225$
      0017B2 80 21            [24] 5025 	sjmp	00118$
      0017B4                       5026 00225$:
      0017B4 E5*59            [12] 5027 	mov	a,_find_sloc2_1_0
      0017B6 60 1D            [24] 5028 	jz	00118$
                                   5029 ;	find3.c:108: LCD_string_write("Press A for previous\n");
      0017B8 90r06rD1         [24] 5030 	mov	dptr,#___str_29
      0017BB 75 F0 80         [24] 5031 	mov	b,#0x80
      0017BE C0 07            [24] 5032 	push	ar7
      0017C0 C0 06            [24] 5033 	push	ar6
      0017C2 C0 03            [24] 5034 	push	ar3
      0017C4 C0 02            [24] 5035 	push	ar2
      0017C6 C0 01            [24] 5036 	push	ar1
      0017C8 12r0Cr4B         [24] 5037 	lcall	_LCD_string_write
      0017CB D0 01            [24] 5038 	pop	ar1
      0017CD D0 02            [24] 5039 	pop	ar2
      0017CF D0 03            [24] 5040 	pop	ar3
      0017D1 D0 06            [24] 5041 	pop	ar6
      0017D3 D0 07            [24] 5042 	pop	ar7
      0017D5                       5043 00118$:
                                   5044 ;	find3.c:112: LCD_string_write("Press 1 for menu\n");
      0017D5 90r05r8F         [24] 5045 	mov	dptr,#___str_10
      0017D8 75 F0 80         [24] 5046 	mov	b,#0x80
      0017DB C0 07            [24] 5047 	push	ar7
      0017DD C0 06            [24] 5048 	push	ar6
      0017DF C0 03            [24] 5049 	push	ar3
      0017E1 C0 02            [24] 5050 	push	ar2
      0017E3 C0 01            [24] 5051 	push	ar1
      0017E5 12r0Cr4B         [24] 5052 	lcall	_LCD_string_write
                                   5053 ;	find3.c:115: input = keyDetect();
      0017E8 12r0CrEA         [24] 5054 	lcall	_keyDetect
      0017EB A8 82            [24] 5055 	mov	r0,dpl
      0017ED D0 01            [24] 5056 	pop	ar1
      0017EF D0 02            [24] 5057 	pop	ar2
      0017F1 D0 03            [24] 5058 	pop	ar3
      0017F3 D0 06            [24] 5059 	pop	ar6
      0017F5 D0 07            [24] 5060 	pop	ar7
                                   5061 ;	find3.c:118: if (input == '1') {
      0017F7 B8 31 01         [24] 5062 	cjne	r0,#0x31,00227$
      0017FA 22               [24] 5063 	ret
      0017FB                       5064 00227$:
                                   5065 ;	find3.c:120: } else if (input == 'B' && page != pages && n > NUM) {
      0017FB B8 42 71         [24] 5066 	cjne	r0,#0x42,00124$
      0017FE 90r00r1F         [24] 5067 	mov	dptr,#_find_page_65537_268
      001801 E0               [24] 5068 	movx	a,@dptr
      001802 F5*57            [12] 5069 	mov	_find_sloc1_1_0,a
      001804 EA               [12] 5070 	mov	a,r2
      001805 B5*57 02         [24] 5071 	cjne	a,_find_sloc1_1_0,00230$
      001808 80 65            [24] 5072 	sjmp	00124$
      00180A                       5073 00230$:
      00180A E5*55            [12] 5074 	mov	a,_find_sloc0_1_0
      00180C 60 61            [24] 5075 	jz	00124$
                                   5076 ;	find3.c:121: index += NUM;
      00180E C0 01            [24] 5077 	push	ar1
      001810 90r00r20         [24] 5078 	mov	dptr,#_find_index_65537_268
      001813 E0               [24] 5079 	movx	a,@dptr
      001814 24 0F            [12] 5080 	add	a,#0x0f
      001816 F0               [24] 5081 	movx	@dptr,a
                                   5082 ;	find3.c:122: address += NUM;
      001817 90r00r21         [24] 5083 	mov	dptr,#_find_address_65537_268
      00181A E0               [24] 5084 	movx	a,@dptr
      00181B F9               [12] 5085 	mov	r1,a
      00181C A3               [24] 5086 	inc	dptr
      00181D E0               [24] 5087 	movx	a,@dptr
      00181E FC               [12] 5088 	mov	r4,a
      00181F 74 0F            [12] 5089 	mov	a,#0x0f
      001821 29               [12] 5090 	add	a,r1
      001822 F9               [12] 5091 	mov	r1,a
      001823 E4               [12] 5092 	clr	a
      001824 3C               [12] 5093 	addc	a,r4
      001825 FC               [12] 5094 	mov	r4,a
      001826 90r00r21         [24] 5095 	mov	dptr,#_find_address_65537_268
      001829 E9               [12] 5096 	mov	a,r1
      00182A F0               [24] 5097 	movx	@dptr,a
      00182B EC               [12] 5098 	mov	a,r4
      00182C A3               [24] 5099 	inc	dptr
      00182D F0               [24] 5100 	movx	@dptr,a
                                   5101 ;	find3.c:123: printFind(address, NUM, key, index);
      00182E 90r00r21         [24] 5102 	mov	dptr,#_find_address_65537_268
      001831 E0               [24] 5103 	movx	a,@dptr
      001832 F9               [12] 5104 	mov	r1,a
      001833 A3               [24] 5105 	inc	dptr
      001834 E0               [24] 5106 	movx	a,@dptr
      001835 FC               [12] 5107 	mov	r4,a
      001836 90r00r20         [24] 5108 	mov	dptr,#_find_index_65537_268
      001839 E0               [24] 5109 	movx	a,@dptr
      00183A FD               [12] 5110 	mov	r5,a
      00183B 90r00r1D         [24] 5111 	mov	dptr,#_printFind_PARM_2
      00183E 74 0F            [12] 5112 	mov	a,#0x0f
      001840 F0               [24] 5113 	movx	@dptr,a
      001841 8F*50            [24] 5114 	mov	_printFind_PARM_3,r7
      001843 90r00r1E         [24] 5115 	mov	dptr,#_printFind_PARM_4
      001846 ED               [12] 5116 	mov	a,r5
      001847 F0               [24] 5117 	movx	@dptr,a
      001848 89 82            [24] 5118 	mov	dpl,r1
      00184A 8C 83            [24] 5119 	mov	dph,r4
      00184C C0 07            [24] 5120 	push	ar7
      00184E C0 06            [24] 5121 	push	ar6
      001850 C0 03            [24] 5122 	push	ar3
      001852 C0 02            [24] 5123 	push	ar2
      001854 C0 01            [24] 5124 	push	ar1
      001856 12r15r68         [24] 5125 	lcall	_printFind
      001859 D0 01            [24] 5126 	pop	ar1
      00185B D0 02            [24] 5127 	pop	ar2
      00185D D0 03            [24] 5128 	pop	ar3
      00185F D0 06            [24] 5129 	pop	ar6
      001861 D0 07            [24] 5130 	pop	ar7
                                   5131 ;	find3.c:124: page++;
      001863 90r00r1F         [24] 5132 	mov	dptr,#_find_page_65537_268
      001866 E5*57            [12] 5133 	mov	a,_find_sloc1_1_0
      001868 04               [12] 5134 	inc	a
      001869 F0               [24] 5135 	movx	@dptr,a
      00186A D0 01            [24] 5136 	pop	ar1
      00186C 02r17r1F         [24] 5137 	ljmp	00131$
      00186F                       5138 00124$:
                                   5139 ;	find3.c:125: } else if (input == 'A' && page != 1 && n > NUM) {
      00186F B8 41 02         [24] 5140 	cjne	r0,#0x41,00232$
      001872 80 03            [24] 5141 	sjmp	00233$
      001874                       5142 00232$:
      001874 02r17r1F         [24] 5143 	ljmp	00131$
      001877                       5144 00233$:
      001877 90r00r1F         [24] 5145 	mov	dptr,#_find_page_65537_268
      00187A E0               [24] 5146 	movx	a,@dptr
      00187B FD               [12] 5147 	mov	r5,a
      00187C BD 01 03         [24] 5148 	cjne	r5,#0x01,00234$
      00187F 02r17r1F         [24] 5149 	ljmp	00131$
      001882                       5150 00234$:
      001882 E9               [12] 5151 	mov	a,r1
      001883 70 03            [24] 5152 	jnz	00235$
      001885 02r17r1F         [24] 5153 	ljmp	00131$
      001888                       5154 00235$:
                                   5155 ;	find3.c:126: index -= NUM;
      001888 C0 01            [24] 5156 	push	ar1
      00188A 90r00r20         [24] 5157 	mov	dptr,#_find_index_65537_268
      00188D E0               [24] 5158 	movx	a,@dptr
      00188E 24 F1            [12] 5159 	add	a,#0xf1
      001890 F0               [24] 5160 	movx	@dptr,a
                                   5161 ;	find3.c:127: address -= NUM;
      001891 90r00r21         [24] 5162 	mov	dptr,#_find_address_65537_268
      001894 E0               [24] 5163 	movx	a,@dptr
      001895 F8               [12] 5164 	mov	r0,a
      001896 A3               [24] 5165 	inc	dptr
      001897 E0               [24] 5166 	movx	a,@dptr
      001898 FC               [12] 5167 	mov	r4,a
      001899 E8               [12] 5168 	mov	a,r0
      00189A 24 F1            [12] 5169 	add	a,#0xf1
      00189C F8               [12] 5170 	mov	r0,a
      00189D EC               [12] 5171 	mov	a,r4
      00189E 34 FF            [12] 5172 	addc	a,#0xff
      0018A0 FC               [12] 5173 	mov	r4,a
      0018A1 90r00r21         [24] 5174 	mov	dptr,#_find_address_65537_268
      0018A4 E8               [12] 5175 	mov	a,r0
      0018A5 F0               [24] 5176 	movx	@dptr,a
      0018A6 EC               [12] 5177 	mov	a,r4
      0018A7 A3               [24] 5178 	inc	dptr
      0018A8 F0               [24] 5179 	movx	@dptr,a
                                   5180 ;	find3.c:128: printFind(address, NUM, key, index);
      0018A9 90r00r21         [24] 5181 	mov	dptr,#_find_address_65537_268
      0018AC E0               [24] 5182 	movx	a,@dptr
      0018AD F8               [12] 5183 	mov	r0,a
      0018AE A3               [24] 5184 	inc	dptr
      0018AF E0               [24] 5185 	movx	a,@dptr
      0018B0 FC               [12] 5186 	mov	r4,a
      0018B1 90r00r20         [24] 5187 	mov	dptr,#_find_index_65537_268
      0018B4 E0               [24] 5188 	movx	a,@dptr
      0018B5 F9               [12] 5189 	mov	r1,a
      0018B6 90r00r1D         [24] 5190 	mov	dptr,#_printFind_PARM_2
      0018B9 74 0F            [12] 5191 	mov	a,#0x0f
      0018BB F0               [24] 5192 	movx	@dptr,a
      0018BC 8F*50            [24] 5193 	mov	_printFind_PARM_3,r7
      0018BE 90r00r1E         [24] 5194 	mov	dptr,#_printFind_PARM_4
      0018C1 E9               [12] 5195 	mov	a,r1
      0018C2 F0               [24] 5196 	movx	@dptr,a
      0018C3 88 82            [24] 5197 	mov	dpl,r0
      0018C5 8C 83            [24] 5198 	mov	dph,r4
      0018C7 C0 07            [24] 5199 	push	ar7
      0018C9 C0 06            [24] 5200 	push	ar6
      0018CB C0 05            [24] 5201 	push	ar5
      0018CD C0 03            [24] 5202 	push	ar3
      0018CF C0 02            [24] 5203 	push	ar2
      0018D1 C0 01            [24] 5204 	push	ar1
      0018D3 12r15r68         [24] 5205 	lcall	_printFind
      0018D6 D0 01            [24] 5206 	pop	ar1
      0018D8 D0 02            [24] 5207 	pop	ar2
      0018DA D0 03            [24] 5208 	pop	ar3
      0018DC D0 05            [24] 5209 	pop	ar5
      0018DE D0 06            [24] 5210 	pop	ar6
      0018E0 D0 07            [24] 5211 	pop	ar7
                                   5212 ;	find3.c:129: page--;
      0018E2 ED               [12] 5213 	mov	a,r5
      0018E3 14               [12] 5214 	dec	a
      0018E4 90r00r1F         [24] 5215 	mov	dptr,#_find_page_65537_268
      0018E7 F0               [24] 5216 	movx	@dptr,a
                                   5217 ;	find3.c:131: } while (1);
      0018E8 D0 01            [24] 5218 	pop	ar1
                                   5219 ;	find3.c:132: }
      0018EA 02r17r1F         [24] 5220 	ljmp	00131$
                                   5221 ;------------------------------------------------------------
                                   5222 ;Allocation info for local variables in function 'printCount'
                                   5223 ;------------------------------------------------------------
                                   5224 ;num                       Allocated with name '_printCount_PARM_2'
                                   5225 ;key                       Allocated with name '_printCount_PARM_3'
                                   5226 ;index                     Allocated with name '_printCount_PARM_4'
                                   5227 ;count                     Allocated with name '_printCount_PARM_5'
                                   5228 ;start                     Allocated to registers r6 r7 
                                   5229 ;i                         Allocated to registers r4 
                                   5230 ;found                     Allocated to registers r3 
                                   5231 ;high                      Allocated to registers r2 
                                   5232 ;low                       Allocated to registers r1 
                                   5233 ;ramAddress                Allocated to registers 
                                   5234 ;------------------------------------------------------------
                                   5235 ;	count3.c:1: void printCount(uint16_t start, uint8_t num, uint8_t key, uint8_t index, uint8_t count) {
                                   5236 ;	-----------------------------------------
                                   5237 ;	 function printCount
                                   5238 ;	-----------------------------------------
      0018ED                       5239 _printCount:
      0018ED AE 82            [24] 5240 	mov	r6,dpl
      0018EF AF 83            [24] 5241 	mov	r7,dph
                                   5242 ;	count3.c:3: fillScreen(GRAY);
      0018F1 90 D6 BA         [24] 5243 	mov	dptr,#0xd6ba
      0018F4 C0 07            [24] 5244 	push	ar7
      0018F6 C0 06            [24] 5245 	push	ar6
      0018F8 12r08r44         [24] 5246 	lcall	_fillScreen
                                   5247 ;	count3.c:4: setCursor(0, 0);
      0018FB E4               [12] 5248 	clr	a
      0018FC F5*00            [12] 5249 	mov	_setCursor_PARM_2,a
      0018FE F5*01            [12] 5250 	mov	(_setCursor_PARM_2 + 1),a
      001900 90 00 00         [24] 5251 	mov	dptr,#0x0000
      001903 12r00rB6         [24] 5252 	lcall	_setCursor
                                   5253 ;	count3.c:5: setTextSize(2);
      001906 75 82 02         [24] 5254 	mov	dpl,#0x02
      001909 12r00rD0         [24] 5255 	lcall	_setTextSize
      00190C D0 06            [24] 5256 	pop	ar6
      00190E D0 07            [24] 5257 	pop	ar7
                                   5258 ;	count3.c:14: if (count == 0) {
      001910 E5*5D            [12] 5259 	mov	a,_printCount_PARM_5
      001912 70 13            [24] 5260 	jnz	00102$
                                   5261 ;	count3.c:15: LCD_string_write("No matches found\n");
      001914 90r06rF9         [24] 5262 	mov	dptr,#___str_31
      001917 75 F0 80         [24] 5263 	mov	b,#0x80
      00191A C0 07            [24] 5264 	push	ar7
      00191C C0 06            [24] 5265 	push	ar6
      00191E 12r0Cr4B         [24] 5266 	lcall	_LCD_string_write
      001921 D0 06            [24] 5267 	pop	ar6
      001923 D0 07            [24] 5268 	pop	ar7
      001925 80 17            [24] 5269 	sjmp	00115$
      001927                       5270 00102$:
                                   5271 ;	count3.c:17: asciiToHex(count);
      001927 85*5D 82         [24] 5272 	mov	dpl,_printCount_PARM_5
      00192A C0 07            [24] 5273 	push	ar7
      00192C C0 06            [24] 5274 	push	ar6
      00192E 12r0ErCC         [24] 5275 	lcall	_asciiToHex
                                   5276 ;	count3.c:18: LCD_string_write(" matches found\n");
      001931 90r07r0B         [24] 5277 	mov	dptr,#___str_32
      001934 75 F0 80         [24] 5278 	mov	b,#0x80
      001937 12r0Cr4B         [24] 5279 	lcall	_LCD_string_write
      00193A D0 06            [24] 5280 	pop	ar6
      00193C D0 07            [24] 5281 	pop	ar7
                                   5282 ;	count3.c:22: for (i = 0; i < num; i++) {
      00193E                       5283 00115$:
      00193E AD*5C            [24] 5284 	mov	r5,_printCount_PARM_4
      001940 7C 00            [12] 5285 	mov	r4,#0x00
      001942                       5286 00108$:
      001942 C3               [12] 5287 	clr	c
      001943 EC               [12] 5288 	mov	a,r4
      001944 95*5A            [12] 5289 	subb	a,_printCount_PARM_2
      001946 40 01            [24] 5290 	jc	00130$
      001948 22               [24] 5291 	ret
      001949                       5292 00130$:
                                   5293 ;	count3.c:25: IOM = 0;
                                   5294 ;	assignBit
      001949 C2 B4            [12] 5295 	clr	_P3_4
                                   5296 ;	count3.c:26: ramAddress = (uint16_t __xdata*)(start + i);
      00194B 8C 02            [24] 5297 	mov	ar2,r4
      00194D 7B 00            [12] 5298 	mov	r3,#0x00
      00194F 8E 00            [24] 5299 	mov	ar0,r6
      001951 8F 01            [24] 5300 	mov	ar1,r7
      001953 EA               [12] 5301 	mov	a,r2
      001954 28               [12] 5302 	add	a,r0
      001955 F8               [12] 5303 	mov	r0,a
      001956 EB               [12] 5304 	mov	a,r3
      001957 39               [12] 5305 	addc	a,r1
      001958 F9               [12] 5306 	mov	r1,a
      001959 88 82            [24] 5307 	mov	dpl,r0
      00195B 89 83            [24] 5308 	mov	dph,r1
                                   5309 ;	count3.c:27: found = *ramAddress;
      00195D E0               [24] 5310 	movx	a,@dptr
      00195E FB               [12] 5311 	mov	r3,a
                                   5312 ;	count3.c:30: high = HIGHBYTE(start + i);
      00195F 89 02            [24] 5313 	mov	ar2,r1
                                   5314 ;	count3.c:31: low = LOWBYTE(start + i);
      001961 8E 01            [24] 5315 	mov	ar1,r6
      001963 EC               [12] 5316 	mov	a,r4
      001964 29               [12] 5317 	add	a,r1
      001965 F9               [12] 5318 	mov	r1,a
                                   5319 ;	count3.c:42: if (found == key) {
      001966 EB               [12] 5320 	mov	a,r3
      001967 B5*5B 3B         [24] 5321 	cjne	a,_printCount_PARM_3,00109$
                                   5322 ;	count3.c:44: asciiToHex(index++);
      00196A 8D 82            [24] 5323 	mov	dpl,r5
      00196C 0D               [12] 5324 	inc	r5
      00196D C0 07            [24] 5325 	push	ar7
      00196F C0 06            [24] 5326 	push	ar6
      001971 C0 05            [24] 5327 	push	ar5
      001973 C0 04            [24] 5328 	push	ar4
      001975 C0 02            [24] 5329 	push	ar2
      001977 C0 01            [24] 5330 	push	ar1
      001979 12r0ErCC         [24] 5331 	lcall	_asciiToHex
                                   5332 ;	count3.c:45: LCD_string_write(": ");
      00197C 90r06r41         [24] 5333 	mov	dptr,#___str_21
      00197F 75 F0 80         [24] 5334 	mov	b,#0x80
      001982 12r0Cr4B         [24] 5335 	lcall	_LCD_string_write
      001985 D0 01            [24] 5336 	pop	ar1
      001987 D0 02            [24] 5337 	pop	ar2
                                   5338 ;	count3.c:48: asciiToHex(high);
      001989 8A 82            [24] 5339 	mov	dpl,r2
      00198B C0 01            [24] 5340 	push	ar1
      00198D 12r0ErCC         [24] 5341 	lcall	_asciiToHex
      001990 D0 01            [24] 5342 	pop	ar1
                                   5343 ;	count3.c:49: asciiToHex(low);
      001992 89 82            [24] 5344 	mov	dpl,r1
      001994 12r0ErCC         [24] 5345 	lcall	_asciiToHex
                                   5346 ;	count3.c:50: write('\n');
      001997 75 82 0A         [24] 5347 	mov	dpl,#0x0a
      00199A 12r0BrDD         [24] 5348 	lcall	_write
      00199D D0 04            [24] 5349 	pop	ar4
      00199F D0 05            [24] 5350 	pop	ar5
      0019A1 D0 06            [24] 5351 	pop	ar6
      0019A3 D0 07            [24] 5352 	pop	ar7
      0019A5                       5353 00109$:
                                   5354 ;	count3.c:22: for (i = 0; i < num; i++) {
      0019A5 0C               [12] 5355 	inc	r4
                                   5356 ;	count3.c:53: }
      0019A6 02r19r42         [24] 5357 	ljmp	00108$
                                   5358 ;------------------------------------------------------------
                                   5359 ;Allocation info for local variables in function 'count'
                                   5360 ;------------------------------------------------------------
                                   5361 ;key                       Allocated with name '_count_key_65537_288'
                                   5362 ;i                         Allocated to registers r2 
                                   5363 ;n                         Allocated with name '_count_n_65537_288'
                                   5364 ;found                     Allocated to registers r4 
                                   5365 ;size                      Allocated with name '_count_size_65537_288'
                                   5366 ;index                     Allocated with name '_count_index_65537_288'
                                   5367 ;pages                     Allocated with name '_count_pages_65537_288'
                                   5368 ;address                   Allocated to registers r5 r6 
                                   5369 ;ramAddress                Allocated to registers 
                                   5370 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                   5371 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                   5372 ;sloc2                     Allocated with name '_count_sloc2_1_0'
                                   5373 ;sloc3                     Allocated with name '_count_sloc3_1_0'
                                   5374 ;sloc4                     Allocated with name '_count_sloc4_1_0'
                                   5375 ;input                     Allocated with name '_count_input_65537_288'
                                   5376 ;page                      Allocated with name '_count_page_65537_288'
                                   5377 ;------------------------------------------------------------
                                   5378 ;	count3.c:55: void count() {
                                   5379 ;	-----------------------------------------
                                   5380 ;	 function count
                                   5381 ;	-----------------------------------------
      0019A9                       5382 _count:
                                   5383 ;	count3.c:57: fillScreen(GRAY);
      0019A9 90 D6 BA         [24] 5384 	mov	dptr,#0xd6ba
      0019AC 12r08r44         [24] 5385 	lcall	_fillScreen
                                   5386 ;	count3.c:58: setCursor(0, 0);
      0019AF E4               [12] 5387 	clr	a
      0019B0 F5*00            [12] 5388 	mov	_setCursor_PARM_2,a
      0019B2 F5*01            [12] 5389 	mov	(_setCursor_PARM_2 + 1),a
      0019B4 90 00 00         [24] 5390 	mov	dptr,#0x0000
      0019B7 12r00rB6         [24] 5391 	lcall	_setCursor
                                   5392 ;	count3.c:59: setTextSize(2);
      0019BA 75 82 02         [24] 5393 	mov	dpl,#0x02
      0019BD 12r00rD0         [24] 5394 	lcall	_setTextSize
                                   5395 ;	count3.c:68: __xdata uint8_t page = 1;
      0019C0 90r00r23         [24] 5396 	mov	dptr,#_count_page_65537_288
      0019C3 74 01            [12] 5397 	mov	a,#0x01
      0019C5 F0               [24] 5398 	movx	@dptr,a
                                   5399 ;	count3.c:75: LCD_string_write("Enter byte to count:\n");
      0019C6 90r07r1B         [24] 5400 	mov	dptr,#___str_33
      0019C9 75 F0 80         [24] 5401 	mov	b,#0x80
      0019CC 12r0Cr4B         [24] 5402 	lcall	_LCD_string_write
                                   5403 ;	count3.c:76: key = getByte();
      0019CF 12r10rAC         [24] 5404 	lcall	_getByte
      0019D2 85 82*5E         [24] 5405 	mov	_count_key_65537_288,dpl
                                   5406 ;	count3.c:77: write('\n');
      0019D5 75 82 0A         [24] 5407 	mov	dpl,#0x0a
      0019D8 12r0BrDD         [24] 5408 	lcall	_write
                                   5409 ;	count3.c:80: LCD_string_write("Enter start address:\n");
      0019DB 90r05rEB         [24] 5410 	mov	dptr,#___str_16
      0019DE 75 F0 80         [24] 5411 	mov	b,#0x80
      0019E1 12r0Cr4B         [24] 5412 	lcall	_LCD_string_write
                                   5413 ;	count3.c:81: address = getAddress();
      0019E4 12r10r45         [24] 5414 	lcall	_getAddress
      0019E7 AD 82            [24] 5415 	mov	r5,dpl
      0019E9 AE 83            [24] 5416 	mov	r6,dph
                                   5417 ;	count3.c:82: write('\n');
      0019EB 75 82 0A         [24] 5418 	mov	dpl,#0x0a
      0019EE C0 06            [24] 5419 	push	ar6
      0019F0 C0 05            [24] 5420 	push	ar5
      0019F2 12r0BrDD         [24] 5421 	lcall	_write
                                   5422 ;	count3.c:85: LCD_string_write("Enter block size:\n");
      0019F5 90r06rB1         [24] 5423 	mov	dptr,#___str_27
      0019F8 75 F0 80         [24] 5424 	mov	b,#0x80
      0019FB 12r0Cr4B         [24] 5425 	lcall	_LCD_string_write
                                   5426 ;	count3.c:86: size = getByte();
      0019FE 12r10rAC         [24] 5427 	lcall	_getByte
      001A01 85 82*60         [24] 5428 	mov	_count_size_65537_288,dpl
                                   5429 ;	count3.c:87: write('\n');
      001A04 75 82 0A         [24] 5430 	mov	dpl,#0x0a
      001A07 12r0BrDD         [24] 5431 	lcall	_write
      001A0A D0 05            [24] 5432 	pop	ar5
      001A0C D0 06            [24] 5433 	pop	ar6
                                   5434 ;	count3.c:90: for (i = 0; i < size; i++) {
      001A0E 75*5F 00         [24] 5435 	mov	_count_n_65537_288,#0x00
      001A11 7A 00            [12] 5436 	mov	r2,#0x00
      001A13                       5437 00132$:
      001A13 C3               [12] 5438 	clr	c
      001A14 EA               [12] 5439 	mov	a,r2
      001A15 95*60            [12] 5440 	subb	a,_count_size_65537_288
      001A17 50 21            [24] 5441 	jnc	00154$
                                   5442 ;	count3.c:91: IOM = 0;
                                   5443 ;	assignBit
      001A19 C2 B4            [12] 5444 	clr	_P3_4
                                   5445 ;	count3.c:92: ramAddress = (uint16_t __xdata*)(address + i);
      001A1B 8A 00            [24] 5446 	mov	ar0,r2
      001A1D 79 00            [12] 5447 	mov	r1,#0x00
      001A1F 8D 03            [24] 5448 	mov	ar3,r5
      001A21 8E 04            [24] 5449 	mov	ar4,r6
      001A23 E8               [12] 5450 	mov	a,r0
      001A24 2B               [12] 5451 	add	a,r3
      001A25 FB               [12] 5452 	mov	r3,a
      001A26 E9               [12] 5453 	mov	a,r1
      001A27 3C               [12] 5454 	addc	a,r4
      001A28 FC               [12] 5455 	mov	r4,a
      001A29 8B 82            [24] 5456 	mov	dpl,r3
      001A2B 8C 83            [24] 5457 	mov	dph,r4
                                   5458 ;	count3.c:93: found = *ramAddress;
      001A2D E0               [24] 5459 	movx	a,@dptr
      001A2E FC               [12] 5460 	mov	r4,a
                                   5461 ;	count3.c:94: IOM = 1;
                                   5462 ;	assignBit
      001A2F D2 B4            [12] 5463 	setb	_P3_4
                                   5464 ;	count3.c:96: if (found == key) n++;
      001A31 EC               [12] 5465 	mov	a,r4
      001A32 B5*5E 02         [24] 5466 	cjne	a,_count_key_65537_288,00133$
      001A35 05*5F            [12] 5467 	inc	_count_n_65537_288
      001A37                       5468 00133$:
                                   5469 ;	count3.c:90: for (i = 0; i < size; i++) {
      001A37 0A               [12] 5470 	inc	r2
      001A38 80 D9            [24] 5471 	sjmp	00132$
      001A3A                       5472 00154$:
      001A3A AC*5F            [24] 5473 	mov	r4,_count_n_65537_288
                                   5474 ;	count3.c:101: printCount(address, NUM, key, index, n);
      001A3C 75*5A 0F         [24] 5475 	mov	_printCount_PARM_2,#0x0f
      001A3F 85*5E*5B         [24] 5476 	mov	_printCount_PARM_3,_count_key_65537_288
      001A42 75*5C 00         [24] 5477 	mov	_printCount_PARM_4,#0x00
      001A45 85*5F*5D         [24] 5478 	mov	_printCount_PARM_5,_count_n_65537_288
      001A48 8D 82            [24] 5479 	mov	dpl,r5
      001A4A 8E 83            [24] 5480 	mov	dph,r6
      001A4C C0 06            [24] 5481 	push	ar6
      001A4E C0 05            [24] 5482 	push	ar5
      001A50 C0 04            [24] 5483 	push	ar4
      001A52 12r18rED         [24] 5484 	lcall	_printCount
                                   5485 ;	count3.c:102: index += NUM;
      001A55 75*61 0F         [24] 5486 	mov	_count_index_65537_288,#0x0f
                                   5487 ;	count3.c:108: pages = size / NUM;
      001A58 A9*60            [24] 5488 	mov	r1,_count_size_65537_288
      001A5A 7A 00            [12] 5489 	mov	r2,#0x00
      001A5C 75*00 0F         [24] 5490 	mov	__divsint_PARM_2,#0x0f
                                   5491 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001A5F 8A*01            [24] 5492 	mov	(__divsint_PARM_2 + 1),r2
      001A61 89 82            [24] 5493 	mov	dpl,r1
      001A63 8A 83            [24] 5494 	mov	dph,r2
      001A65 12r00r00         [24] 5495 	lcall	__divsint
      001A68 A9 82            [24] 5496 	mov	r1,dpl
      001A6A D0 04            [24] 5497 	pop	ar4
      001A6C D0 05            [24] 5498 	pop	ar5
      001A6E D0 06            [24] 5499 	pop	ar6
      001A70 89*62            [24] 5500 	mov	_count_pages_65537_288,r1
                                   5501 ;	count3.c:111: do {
      001A72 C3               [12] 5502 	clr	c
      001A73 74 0F            [12] 5503 	mov	a,#0x0f
      001A75 95*5F            [12] 5504 	subb	a,_count_n_65537_288
      001A77 E4               [12] 5505 	clr	a
      001A78 33               [12] 5506 	rlc	a
      001A79 FA               [12] 5507 	mov	r2,a
      001A7A F8               [12] 5508 	mov	r0,a
      001A7B 8A*63            [24] 5509 	mov	_count_sloc0_1_0,r2
      001A7D 8A*64            [24] 5510 	mov	_count_sloc1_1_0,r2
      001A7F 8A*65            [24] 5511 	mov	_count_sloc2_1_0,r2
      001A81                       5512 00128$:
                                   5513 ;	count3.c:113: if (page != 1 && page != pages && n > NUM) {
      001A81 90r00r23         [24] 5514 	mov	dptr,#_count_page_65537_288
      001A84 E0               [24] 5515 	movx	a,@dptr
      001A85 F5*66            [12] 5516 	mov	_count_sloc3_1_0,a
      001A87 74 01            [12] 5517 	mov	a,#0x01
      001A89 B5*66 02         [24] 5518 	cjne	a,_count_sloc3_1_0,00212$
      001A8C 80 32            [24] 5519 	sjmp	00112$
      001A8E                       5520 00212$:
      001A8E E5*62            [12] 5521 	mov	a,_count_pages_65537_288
      001A90 B5*66 02         [24] 5522 	cjne	a,_count_sloc3_1_0,00213$
      001A93 80 2B            [24] 5523 	sjmp	00112$
      001A95                       5524 00213$:
      001A95 EA               [12] 5525 	mov	a,r2
      001A96 60 28            [24] 5526 	jz	00112$
                                   5527 ;	count3.c:114: LCD_string_write("Press A for previous\n");
      001A98 90r06rD1         [24] 5528 	mov	dptr,#___str_29
      001A9B 75 F0 80         [24] 5529 	mov	b,#0x80
      001A9E C0 06            [24] 5530 	push	ar6
      001AA0 C0 05            [24] 5531 	push	ar5
      001AA2 C0 04            [24] 5532 	push	ar4
      001AA4 C0 02            [24] 5533 	push	ar2
      001AA6 C0 00            [24] 5534 	push	ar0
      001AA8 12r0Cr4B         [24] 5535 	lcall	_LCD_string_write
                                   5536 ;	count3.c:115: LCD_string_write("Press B for next\n");
      001AAB 90r06rE7         [24] 5537 	mov	dptr,#___str_30
      001AAE 75 F0 80         [24] 5538 	mov	b,#0x80
      001AB1 12r0Cr4B         [24] 5539 	lcall	_LCD_string_write
      001AB4 D0 00            [24] 5540 	pop	ar0
      001AB6 D0 02            [24] 5541 	pop	ar2
      001AB8 D0 04            [24] 5542 	pop	ar4
      001ABA D0 05            [24] 5543 	pop	ar5
      001ABC D0 06            [24] 5544 	pop	ar6
      001ABE 80 57            [24] 5545 	sjmp	00113$
      001AC0                       5546 00112$:
                                   5547 ;	count3.c:116: } else if (page != pages && n > NUM) {
      001AC0 90r00r23         [24] 5548 	mov	dptr,#_count_page_65537_288
      001AC3 E0               [24] 5549 	movx	a,@dptr
      001AC4 F5*66            [12] 5550 	mov	_count_sloc3_1_0,a
      001AC6 E5*62            [12] 5551 	mov	a,_count_pages_65537_288
      001AC8 B5*66 02         [24] 5552 	cjne	a,_count_sloc3_1_0,00215$
      001ACB 80 22            [24] 5553 	sjmp	00108$
      001ACD                       5554 00215$:
      001ACD E8               [12] 5555 	mov	a,r0
      001ACE 60 1F            [24] 5556 	jz	00108$
                                   5557 ;	count3.c:117: LCD_string_write("Press B for next\n");
      001AD0 90r06rE7         [24] 5558 	mov	dptr,#___str_30
      001AD3 75 F0 80         [24] 5559 	mov	b,#0x80
      001AD6 C0 06            [24] 5560 	push	ar6
      001AD8 C0 05            [24] 5561 	push	ar5
      001ADA C0 04            [24] 5562 	push	ar4
      001ADC C0 02            [24] 5563 	push	ar2
      001ADE C0 00            [24] 5564 	push	ar0
      001AE0 12r0Cr4B         [24] 5565 	lcall	_LCD_string_write
      001AE3 D0 00            [24] 5566 	pop	ar0
      001AE5 D0 02            [24] 5567 	pop	ar2
      001AE7 D0 04            [24] 5568 	pop	ar4
      001AE9 D0 05            [24] 5569 	pop	ar5
      001AEB D0 06            [24] 5570 	pop	ar6
      001AED 80 28            [24] 5571 	sjmp	00113$
      001AEF                       5572 00108$:
                                   5573 ;	count3.c:118: } else if (page != 1 && n > NUM) {
      001AEF 74 01            [12] 5574 	mov	a,#0x01
      001AF1 B5*66 02         [24] 5575 	cjne	a,_count_sloc3_1_0,00217$
      001AF4 80 21            [24] 5576 	sjmp	00113$
      001AF6                       5577 00217$:
      001AF6 E5*63            [12] 5578 	mov	a,_count_sloc0_1_0
      001AF8 60 1D            [24] 5579 	jz	00113$
                                   5580 ;	count3.c:119: LCD_string_write("Press A for previous\n");
      001AFA 90r06rD1         [24] 5581 	mov	dptr,#___str_29
      001AFD 75 F0 80         [24] 5582 	mov	b,#0x80
      001B00 C0 06            [24] 5583 	push	ar6
      001B02 C0 05            [24] 5584 	push	ar5
      001B04 C0 04            [24] 5585 	push	ar4
      001B06 C0 02            [24] 5586 	push	ar2
      001B08 C0 00            [24] 5587 	push	ar0
      001B0A 12r0Cr4B         [24] 5588 	lcall	_LCD_string_write
      001B0D D0 00            [24] 5589 	pop	ar0
      001B0F D0 02            [24] 5590 	pop	ar2
      001B11 D0 04            [24] 5591 	pop	ar4
      001B13 D0 05            [24] 5592 	pop	ar5
      001B15 D0 06            [24] 5593 	pop	ar6
      001B17                       5594 00113$:
                                   5595 ;	count3.c:123: LCD_string_write("Press 1 for menu\n");
      001B17 90r05r8F         [24] 5596 	mov	dptr,#___str_10
      001B1A 75 F0 80         [24] 5597 	mov	b,#0x80
      001B1D C0 06            [24] 5598 	push	ar6
      001B1F C0 05            [24] 5599 	push	ar5
      001B21 C0 04            [24] 5600 	push	ar4
      001B23 C0 02            [24] 5601 	push	ar2
      001B25 C0 00            [24] 5602 	push	ar0
      001B27 12r0Cr4B         [24] 5603 	lcall	_LCD_string_write
                                   5604 ;	count3.c:126: input = keyDetect();
      001B2A 12r0CrEA         [24] 5605 	lcall	_keyDetect
      001B2D 85 82*66         [24] 5606 	mov	_count_sloc3_1_0,dpl
      001B30 D0 00            [24] 5607 	pop	ar0
      001B32 D0 02            [24] 5608 	pop	ar2
      001B34 D0 04            [24] 5609 	pop	ar4
      001B36 D0 05            [24] 5610 	pop	ar5
      001B38 D0 06            [24] 5611 	pop	ar6
                                   5612 ;	count3.c:129: if (input == '1') {
      001B3A 74 31            [12] 5613 	mov	a,#0x31
      001B3C B5*66 01         [24] 5614 	cjne	a,_count_sloc3_1_0,00219$
      001B3F 22               [24] 5615 	ret
      001B40                       5616 00219$:
                                   5617 ;	count3.c:131: } else if (input == 'B' && page != pages && n > NUM) {
      001B40 74 42            [12] 5618 	mov	a,#0x42
      001B42 B5*66 57         [24] 5619 	cjne	a,_count_sloc3_1_0,00121$
      001B45 90r00r23         [24] 5620 	mov	dptr,#_count_page_65537_288
      001B48 E0               [24] 5621 	movx	a,@dptr
      001B49 F5*67            [12] 5622 	mov	_count_sloc4_1_0,a
      001B4B E5*62            [12] 5623 	mov	a,_count_pages_65537_288
      001B4D B5*67 02         [24] 5624 	cjne	a,_count_sloc4_1_0,00222$
      001B50 80 4A            [24] 5625 	sjmp	00121$
      001B52                       5626 00222$:
      001B52 E5*64            [12] 5627 	mov	a,_count_sloc1_1_0
      001B54 60 46            [24] 5628 	jz	00121$
                                   5629 ;	count3.c:132: index += NUM;
      001B56 A9*61            [24] 5630 	mov	r1,_count_index_65537_288
      001B58 74 0F            [12] 5631 	mov	a,#0x0f
      001B5A 29               [12] 5632 	add	a,r1
      001B5B F5*61            [12] 5633 	mov	_count_index_65537_288,a
                                   5634 ;	count3.c:133: address += NUM;
      001B5D 8D 01            [24] 5635 	mov	ar1,r5
      001B5F 8E 07            [24] 5636 	mov	ar7,r6
      001B61 74 0F            [12] 5637 	mov	a,#0x0f
      001B63 29               [12] 5638 	add	a,r1
      001B64 F9               [12] 5639 	mov	r1,a
      001B65 E4               [12] 5640 	clr	a
      001B66 3F               [12] 5641 	addc	a,r7
      001B67 FF               [12] 5642 	mov	r7,a
      001B68 89 05            [24] 5643 	mov	ar5,r1
      001B6A 8F 06            [24] 5644 	mov	ar6,r7
                                   5645 ;	count3.c:134: printCount(address, NUM, key, index, n);
      001B6C 75*5A 0F         [24] 5646 	mov	_printCount_PARM_2,#0x0f
      001B6F 85*5E*5B         [24] 5647 	mov	_printCount_PARM_3,_count_key_65537_288
      001B72 85*61*5C         [24] 5648 	mov	_printCount_PARM_4,_count_index_65537_288
      001B75 8C*5D            [24] 5649 	mov	_printCount_PARM_5,r4
      001B77 8D 82            [24] 5650 	mov	dpl,r5
      001B79 8E 83            [24] 5651 	mov	dph,r6
      001B7B C0 06            [24] 5652 	push	ar6
      001B7D C0 05            [24] 5653 	push	ar5
      001B7F C0 04            [24] 5654 	push	ar4
      001B81 C0 02            [24] 5655 	push	ar2
      001B83 C0 00            [24] 5656 	push	ar0
      001B85 12r18rED         [24] 5657 	lcall	_printCount
      001B88 D0 00            [24] 5658 	pop	ar0
      001B8A D0 02            [24] 5659 	pop	ar2
      001B8C D0 04            [24] 5660 	pop	ar4
      001B8E D0 05            [24] 5661 	pop	ar5
      001B90 D0 06            [24] 5662 	pop	ar6
                                   5663 ;	count3.c:135: page++;
      001B92 90r00r23         [24] 5664 	mov	dptr,#_count_page_65537_288
      001B95 E5*67            [12] 5665 	mov	a,_count_sloc4_1_0
      001B97 04               [12] 5666 	inc	a
      001B98 F0               [24] 5667 	movx	@dptr,a
      001B99 02r1Ar81         [24] 5668 	ljmp	00128$
      001B9C                       5669 00121$:
                                   5670 ;	count3.c:136: } else if (input == 'A' && page != 1 && n > NUM) {
      001B9C 74 41            [12] 5671 	mov	a,#0x41
      001B9E B5*66 02         [24] 5672 	cjne	a,_count_sloc3_1_0,00224$
      001BA1 80 03            [24] 5673 	sjmp	00225$
      001BA3                       5674 00224$:
      001BA3 02r1Ar81         [24] 5675 	ljmp	00128$
      001BA6                       5676 00225$:
      001BA6 90r00r23         [24] 5677 	mov	dptr,#_count_page_65537_288
      001BA9 E0               [24] 5678 	movx	a,@dptr
      001BAA FF               [12] 5679 	mov	r7,a
      001BAB BF 01 03         [24] 5680 	cjne	r7,#0x01,00226$
      001BAE 02r1Ar81         [24] 5681 	ljmp	00128$
      001BB1                       5682 00226$:
      001BB1 E5*65            [12] 5683 	mov	a,_count_sloc2_1_0
      001BB3 70 03            [24] 5684 	jnz	00227$
      001BB5 02r1Ar81         [24] 5685 	ljmp	00128$
      001BB8                       5686 00227$:
                                   5687 ;	count3.c:137: index -= NUM;
      001BB8 E5*61            [12] 5688 	mov	a,_count_index_65537_288
      001BBA 24 F1            [12] 5689 	add	a,#0xf1
      001BBC F5*61            [12] 5690 	mov	_count_index_65537_288,a
                                   5691 ;	count3.c:138: address -= NUM;
      001BBE 8D 01            [24] 5692 	mov	ar1,r5
      001BC0 8E 03            [24] 5693 	mov	ar3,r6
      001BC2 E9               [12] 5694 	mov	a,r1
      001BC3 24 F1            [12] 5695 	add	a,#0xf1
      001BC5 F9               [12] 5696 	mov	r1,a
      001BC6 EB               [12] 5697 	mov	a,r3
      001BC7 34 FF            [12] 5698 	addc	a,#0xff
      001BC9 FB               [12] 5699 	mov	r3,a
      001BCA 89 05            [24] 5700 	mov	ar5,r1
      001BCC 8B 06            [24] 5701 	mov	ar6,r3
                                   5702 ;	count3.c:139: printCount(address, NUM, key, index, n);
      001BCE 75*5A 0F         [24] 5703 	mov	_printCount_PARM_2,#0x0f
      001BD1 85*5E*5B         [24] 5704 	mov	_printCount_PARM_3,_count_key_65537_288
      001BD4 85*61*5C         [24] 5705 	mov	_printCount_PARM_4,_count_index_65537_288
      001BD7 8C*5D            [24] 5706 	mov	_printCount_PARM_5,r4
      001BD9 8D 82            [24] 5707 	mov	dpl,r5
      001BDB 8E 83            [24] 5708 	mov	dph,r6
      001BDD C0 07            [24] 5709 	push	ar7
      001BDF C0 06            [24] 5710 	push	ar6
      001BE1 C0 05            [24] 5711 	push	ar5
      001BE3 C0 04            [24] 5712 	push	ar4
      001BE5 C0 02            [24] 5713 	push	ar2
      001BE7 C0 00            [24] 5714 	push	ar0
      001BE9 12r18rED         [24] 5715 	lcall	_printCount
      001BEC D0 00            [24] 5716 	pop	ar0
      001BEE D0 02            [24] 5717 	pop	ar2
      001BF0 D0 04            [24] 5718 	pop	ar4
      001BF2 D0 05            [24] 5719 	pop	ar5
      001BF4 D0 06            [24] 5720 	pop	ar6
      001BF6 D0 07            [24] 5721 	pop	ar7
                                   5722 ;	count3.c:140: page--;
      001BF8 EF               [12] 5723 	mov	a,r7
      001BF9 14               [12] 5724 	dec	a
      001BFA 90r00r23         [24] 5725 	mov	dptr,#_count_page_65537_288
      001BFD F0               [24] 5726 	movx	@dptr,a
                                   5727 ;	count3.c:142: } while (1);
                                   5728 ;	count3.c:143: }
      001BFE 02r1Ar81         [24] 5729 	ljmp	00128$
                                   5730 ;------------------------------------------------------------
                                   5731 ;Allocation info for local variables in function 'readTemp'
                                   5732 ;------------------------------------------------------------
                                   5733 ;val                       Allocated with name '_readTemp_val_65536_298'
                                   5734 ;address                   Allocated to registers 
                                   5735 ;------------------------------------------------------------
                                   5736 ;	analog.c:6: uint8_t readTemp() {
                                   5737 ;	-----------------------------------------
                                   5738 ;	 function readTemp
                                   5739 ;	-----------------------------------------
      001C01                       5740 _readTemp:
                                   5741 ;	analog.c:9: IOM = 1;
                                   5742 ;	assignBit
      001C01 D2 B4            [12] 5743 	setb	_P3_4
                                   5744 ;	analog.c:10: address = (uint16_t __xdata*)(temp_address);
      001C03 85*06 82         [24] 5745 	mov	dpl,_temp_address
      001C06 85*07 83         [24] 5746 	mov	dph,(_temp_address + 1)
                                   5747 ;	analog.c:11: val = *address;
      001C09 E0               [24] 5748 	movx	a,@dptr
                                   5749 ;	analog.c:13: return val;
                                   5750 ;	analog.c:14: }
      001C0A F5 82            [12] 5751 	mov	dpl,a
      001C0C 22               [24] 5752 	ret
                                   5753 ;------------------------------------------------------------
                                   5754 ;Allocation info for local variables in function 'readLight'
                                   5755 ;------------------------------------------------------------
                                   5756 ;val                       Allocated with name '_readLight_val_65536_299'
                                   5757 ;address                   Allocated to registers 
                                   5758 ;------------------------------------------------------------
                                   5759 ;	analog.c:21: uint8_t readLight() {
                                   5760 ;	-----------------------------------------
                                   5761 ;	 function readLight
                                   5762 ;	-----------------------------------------
      001C0D                       5763 _readLight:
                                   5764 ;	analog.c:24: IOM = 1;
                                   5765 ;	assignBit
      001C0D D2 B4            [12] 5766 	setb	_P3_4
                                   5767 ;	analog.c:25: address = (uint16_t __xdata*)(light_address);
      001C0F 85*08 82         [24] 5768 	mov	dpl,_light_address
      001C12 85*09 83         [24] 5769 	mov	dph,(_light_address + 1)
                                   5770 ;	analog.c:26: val = *address;
      001C15 E0               [24] 5771 	movx	a,@dptr
                                   5772 ;	analog.c:28: return val;
                                   5773 ;	analog.c:29: }
      001C16 F5 82            [12] 5774 	mov	dpl,a
      001C18 22               [24] 5775 	ret
                                   5776 ;------------------------------------------------------------
                                   5777 ;Allocation info for local variables in function 'displayTemp'
                                   5778 ;------------------------------------------------------------
                                   5779 ;t                         Allocated to registers r7 
                                   5780 ;------------------------------------------------------------
                                   5781 ;	analog.c:36: void displayTemp(uint8_t t) {
                                   5782 ;	-----------------------------------------
                                   5783 ;	 function displayTemp
                                   5784 ;	-----------------------------------------
      001C19                       5785 _displayTemp:
      001C19 AF 82            [24] 5786 	mov	r7,dpl
                                   5787 ;	analog.c:38: fillScreen(GRAY);
      001C1B 90 D6 BA         [24] 5788 	mov	dptr,#0xd6ba
      001C1E C0 07            [24] 5789 	push	ar7
      001C20 12r08r44         [24] 5790 	lcall	_fillScreen
                                   5791 ;	analog.c:39: setCursor(0, 0);
      001C23 E4               [12] 5792 	clr	a
      001C24 F5*00            [12] 5793 	mov	_setCursor_PARM_2,a
      001C26 F5*01            [12] 5794 	mov	(_setCursor_PARM_2 + 1),a
      001C28 90 00 00         [24] 5795 	mov	dptr,#0x0000
      001C2B 12r00rB6         [24] 5796 	lcall	_setCursor
                                   5797 ;	analog.c:41: LCD_string_write("Temperature: ");
      001C2E 90r07r31         [24] 5798 	mov	dptr,#___str_34
      001C31 75 F0 80         [24] 5799 	mov	b,#0x80
      001C34 12r0Cr4B         [24] 5800 	lcall	_LCD_string_write
      001C37 D0 07            [24] 5801 	pop	ar7
                                   5802 ;	analog.c:43: asciiToHex(t);
      001C39 8F 82            [24] 5803 	mov	dpl,r7
      001C3B 12r0ErCC         [24] 5804 	lcall	_asciiToHex
                                   5805 ;	analog.c:45: write('\n');
      001C3E 75 82 0A         [24] 5806 	mov	dpl,#0x0a
      001C41 12r0BrDD         [24] 5807 	lcall	_write
                                   5808 ;	analog.c:46: LCD_string_write("Press 1 for menu\n");
      001C44 90r05r8F         [24] 5809 	mov	dptr,#___str_10
      001C47 75 F0 80         [24] 5810 	mov	b,#0x80
      001C4A 12r0Cr4B         [24] 5811 	lcall	_LCD_string_write
                                   5812 ;	analog.c:47: LCD_string_write("Press key to refresh\n");
      001C4D 90r07r3F         [24] 5813 	mov	dptr,#___str_35
      001C50 75 F0 80         [24] 5814 	mov	b,#0x80
                                   5815 ;	analog.c:48: }
      001C53 02r0Cr4B         [24] 5816 	ljmp	_LCD_string_write
                                   5817 ;------------------------------------------------------------
                                   5818 ;Allocation info for local variables in function 'displayLight'
                                   5819 ;------------------------------------------------------------
                                   5820 ;l                         Allocated to registers r7 
                                   5821 ;------------------------------------------------------------
                                   5822 ;	analog.c:55: void displayLight(uint8_t l) {
                                   5823 ;	-----------------------------------------
                                   5824 ;	 function displayLight
                                   5825 ;	-----------------------------------------
      001C56                       5826 _displayLight:
      001C56 AF 82            [24] 5827 	mov	r7,dpl
                                   5828 ;	analog.c:57: fillScreen(GRAY);
      001C58 90 D6 BA         [24] 5829 	mov	dptr,#0xd6ba
      001C5B C0 07            [24] 5830 	push	ar7
      001C5D 12r08r44         [24] 5831 	lcall	_fillScreen
                                   5832 ;	analog.c:58: setCursor(0, 0);
      001C60 E4               [12] 5833 	clr	a
      001C61 F5*00            [12] 5834 	mov	_setCursor_PARM_2,a
      001C63 F5*01            [12] 5835 	mov	(_setCursor_PARM_2 + 1),a
      001C65 90 00 00         [24] 5836 	mov	dptr,#0x0000
      001C68 12r00rB6         [24] 5837 	lcall	_setCursor
                                   5838 ;	analog.c:60: LCD_string_write("Light level: ");
      001C6B 90r07r55         [24] 5839 	mov	dptr,#___str_36
      001C6E 75 F0 80         [24] 5840 	mov	b,#0x80
      001C71 12r0Cr4B         [24] 5841 	lcall	_LCD_string_write
      001C74 D0 07            [24] 5842 	pop	ar7
                                   5843 ;	analog.c:62: asciiToHex(l);
      001C76 8F 82            [24] 5844 	mov	dpl,r7
      001C78 12r0ErCC         [24] 5845 	lcall	_asciiToHex
                                   5846 ;	analog.c:64: write('\n');
      001C7B 75 82 0A         [24] 5847 	mov	dpl,#0x0a
      001C7E 12r0BrDD         [24] 5848 	lcall	_write
                                   5849 ;	analog.c:65: LCD_string_write("Press 1 for menu\n");
      001C81 90r05r8F         [24] 5850 	mov	dptr,#___str_10
      001C84 75 F0 80         [24] 5851 	mov	b,#0x80
      001C87 12r0Cr4B         [24] 5852 	lcall	_LCD_string_write
                                   5853 ;	analog.c:66: LCD_string_write("Press key to refresh\n");
      001C8A 90r07r3F         [24] 5854 	mov	dptr,#___str_35
      001C8D 75 F0 80         [24] 5855 	mov	b,#0x80
                                   5856 ;	analog.c:67: }
      001C90 02r0Cr4B         [24] 5857 	ljmp	_LCD_string_write
                                   5858 ;------------------------------------------------------------
                                   5859 ;Allocation info for local variables in function 'temperature'
                                   5860 ;------------------------------------------------------------
                                   5861 ;temp                      Allocated to registers 
                                   5862 ;input                     Allocated with name '_temperature_input_65537_305'
                                   5863 ;------------------------------------------------------------
                                   5864 ;	analog.c:74: void temperature() {
                                   5865 ;	-----------------------------------------
                                   5866 ;	 function temperature
                                   5867 ;	-----------------------------------------
      001C93                       5868 _temperature:
                                   5869 ;	analog.c:76: fillScreen(GRAY);
      001C93 90 D6 BA         [24] 5870 	mov	dptr,#0xd6ba
      001C96 12r08r44         [24] 5871 	lcall	_fillScreen
                                   5872 ;	analog.c:77: setCursor(0, 0);
      001C99 E4               [12] 5873 	clr	a
      001C9A F5*00            [12] 5874 	mov	_setCursor_PARM_2,a
      001C9C F5*01            [12] 5875 	mov	(_setCursor_PARM_2 + 1),a
      001C9E 90 00 00         [24] 5876 	mov	dptr,#0x0000
      001CA1 12r00rB6         [24] 5877 	lcall	_setCursor
                                   5878 ;	analog.c:78: setTextSize(2);
      001CA4 75 82 02         [24] 5879 	mov	dpl,#0x02
      001CA7 12r00rD0         [24] 5880 	lcall	_setTextSize
                                   5881 ;	analog.c:86: temp = ioread8(temp_address);
      001CAA 85*06 82         [24] 5882 	mov	dpl,_temp_address
      001CAD 85*07 83         [24] 5883 	mov	dph,(_temp_address + 1)
      001CB0 12r00r10         [24] 5884 	lcall	_ioread8
                                   5885 ;	analog.c:88: displayTemp(temp);
      001CB3 12r1Cr19         [24] 5886 	lcall	_displayTemp
                                   5887 ;	analog.c:91: while (1) {
      001CB6                       5888 00104$:
                                   5889 ;	analog.c:92: input = keyDetect();
      001CB6 12r0CrEA         [24] 5890 	lcall	_keyDetect
      001CB9 AF 82            [24] 5891 	mov	r7,dpl
                                   5892 ;	analog.c:94: if (input == '1') break;
      001CBB BF 31 01         [24] 5893 	cjne	r7,#0x31,00118$
      001CBE 22               [24] 5894 	ret
      001CBF                       5895 00118$:
                                   5896 ;	analog.c:98: temp = ioread8(temp_address);
      001CBF 85*06 82         [24] 5897 	mov	dpl,_temp_address
      001CC2 85*07 83         [24] 5898 	mov	dph,(_temp_address + 1)
      001CC5 12r00r10         [24] 5899 	lcall	_ioread8
                                   5900 ;	analog.c:99: displayTemp(temp);
      001CC8 12r1Cr19         [24] 5901 	lcall	_displayTemp
                                   5902 ;	analog.c:101: }
      001CCB 80 E9            [24] 5903 	sjmp	00104$
                                   5904 ;------------------------------------------------------------
                                   5905 ;Allocation info for local variables in function 'light'
                                   5906 ;------------------------------------------------------------
                                   5907 ;light                     Allocated to registers 
                                   5908 ;input                     Allocated with name '_light_input_65537_308'
                                   5909 ;------------------------------------------------------------
                                   5910 ;	analog.c:108: void light() {
                                   5911 ;	-----------------------------------------
                                   5912 ;	 function light
                                   5913 ;	-----------------------------------------
      001CCD                       5914 _light:
                                   5915 ;	analog.c:110: fillScreen(GRAY);
      001CCD 90 D6 BA         [24] 5916 	mov	dptr,#0xd6ba
      001CD0 12r08r44         [24] 5917 	lcall	_fillScreen
                                   5918 ;	analog.c:111: setCursor(0, 0);
      001CD3 E4               [12] 5919 	clr	a
      001CD4 F5*00            [12] 5920 	mov	_setCursor_PARM_2,a
      001CD6 F5*01            [12] 5921 	mov	(_setCursor_PARM_2 + 1),a
      001CD8 90 00 00         [24] 5922 	mov	dptr,#0x0000
      001CDB 12r00rB6         [24] 5923 	lcall	_setCursor
                                   5924 ;	analog.c:112: setTextSize(2);
      001CDE 75 82 02         [24] 5925 	mov	dpl,#0x02
      001CE1 12r00rD0         [24] 5926 	lcall	_setTextSize
                                   5927 ;	analog.c:120: light = ioread8(light_address);
      001CE4 85*08 82         [24] 5928 	mov	dpl,_light_address
      001CE7 85*09 83         [24] 5929 	mov	dph,(_light_address + 1)
      001CEA 12r00r10         [24] 5930 	lcall	_ioread8
                                   5931 ;	analog.c:122: displayLight(light);
      001CED 12r1Cr56         [24] 5932 	lcall	_displayLight
                                   5933 ;	analog.c:125: while (1) {
      001CF0                       5934 00104$:
                                   5935 ;	analog.c:126: input = keyDetect();
      001CF0 12r0CrEA         [24] 5936 	lcall	_keyDetect
      001CF3 AF 82            [24] 5937 	mov	r7,dpl
                                   5938 ;	analog.c:128: if (input == '1') break;
      001CF5 BF 31 01         [24] 5939 	cjne	r7,#0x31,00118$
      001CF8 22               [24] 5940 	ret
      001CF9                       5941 00118$:
                                   5942 ;	analog.c:132: light = ioread8(light_address);
      001CF9 85*08 82         [24] 5943 	mov	dpl,_light_address
      001CFC 85*09 83         [24] 5944 	mov	dph,(_light_address + 1)
      001CFF 12r00r10         [24] 5945 	lcall	_ioread8
                                   5946 ;	analog.c:133: displayLight(light);
      001D02 12r1Cr56         [24] 5947 	lcall	_displayLight
                                   5948 ;	analog.c:135: }
      001D05 80 E9            [24] 5949 	sjmp	00104$
                                   5950 ;------------------------------------------------------------
                                   5951 ;Allocation info for local variables in function 'menu'
                                   5952 ;------------------------------------------------------------
                                   5953 ;	main.c:31: void menu(void) {
                                   5954 ;	-----------------------------------------
                                   5955 ;	 function menu
                                   5956 ;	-----------------------------------------
      001D07                       5957 _menu:
                                   5958 ;	main.c:33: setRotation(2);
      001D07 75 82 02         [24] 5959 	mov	dpl,#0x02
      001D0A 12r00rE8         [24] 5960 	lcall	_setRotation
                                   5961 ;	main.c:34: setTextSize(3);
      001D0D 75 82 03         [24] 5962 	mov	dpl,#0x03
      001D10 12r00rD0         [24] 5963 	lcall	_setTextSize
                                   5964 ;	main.c:35: fillScreen(GRAY);
      001D13 90 D6 BA         [24] 5965 	mov	dptr,#0xd6ba
      001D16 12r08r44         [24] 5966 	lcall	_fillScreen
                                   5967 ;	main.c:36: setTextColor(BLACK, GRAY);
      001D19 75*00 BA         [24] 5968 	mov	_setTextColor_PARM_2,#0xba
      001D1C 75*01 D6         [24] 5969 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001D1F 90 00 00         [24] 5970 	mov	dptr,#0x0000
      001D22 12r00rC3         [24] 5971 	lcall	_setTextColor
                                   5972 ;	main.c:37: setCursor(0, 0);
      001D25 E4               [12] 5973 	clr	a
      001D26 F5*00            [12] 5974 	mov	_setCursor_PARM_2,a
      001D28 F5*01            [12] 5975 	mov	(_setCursor_PARM_2 + 1),a
      001D2A 90 00 00         [24] 5976 	mov	dptr,#0x0000
      001D2D 12r00rB6         [24] 5977 	lcall	_setCursor
                                   5978 ;	main.c:40: LCD_string_write("Brandon Cline\n");
      001D30 90r07r63         [24] 5979 	mov	dptr,#___str_37
      001D33 75 F0 80         [24] 5980 	mov	b,#0x80
      001D36 12r0Cr4B         [24] 5981 	lcall	_LCD_string_write
                                   5982 ;	main.c:41: LCD_string_write("ECEN 4330\n");
      001D39 90r07r72         [24] 5983 	mov	dptr,#___str_38
      001D3C 75 F0 80         [24] 5984 	mov	b,#0x80
      001D3F 12r0Cr4B         [24] 5985 	lcall	_LCD_string_write
                                   5986 ;	main.c:43: setTextSize(2);
      001D42 75 82 02         [24] 5987 	mov	dpl,#0x02
      001D45 12r00rD0         [24] 5988 	lcall	_setTextSize
                                   5989 ;	main.c:47: LCD_string_write("1: Basic check\n");
      001D48 90r07r7D         [24] 5990 	mov	dptr,#___str_39
      001D4B 75 F0 80         [24] 5991 	mov	b,#0x80
      001D4E 12r0Cr4B         [24] 5992 	lcall	_LCD_string_write
                                   5993 ;	main.c:49: LCD_string_write("2: Dump\n");
      001D51 90r07r8D         [24] 5994 	mov	dptr,#___str_40
      001D54 75 F0 80         [24] 5995 	mov	b,#0x80
      001D57 12r0Cr4B         [24] 5996 	lcall	_LCD_string_write
                                   5997 ;	main.c:51: LCD_string_write("3: Check\n");
      001D5A 90r07r96         [24] 5998 	mov	dptr,#___str_41
      001D5D 75 F0 80         [24] 5999 	mov	b,#0x80
      001D60 12r0Cr4B         [24] 6000 	lcall	_LCD_string_write
                                   6001 ;	main.c:53: LCD_string_write("A: Move\n");
      001D63 90r07rA0         [24] 6002 	mov	dptr,#___str_42
      001D66 75 F0 80         [24] 6003 	mov	b,#0x80
      001D69 12r0Cr4B         [24] 6004 	lcall	_LCD_string_write
                                   6005 ;	main.c:55: LCD_string_write("4: Edit\n");
      001D6C 90r07rA9         [24] 6006 	mov	dptr,#___str_43
      001D6F 75 F0 80         [24] 6007 	mov	b,#0x80
      001D72 12r0Cr4B         [24] 6008 	lcall	_LCD_string_write
                                   6009 ;	main.c:57: LCD_string_write("5: Find\n");
      001D75 90r07rB2         [24] 6010 	mov	dptr,#___str_44
      001D78 75 F0 80         [24] 6011 	mov	b,#0x80
      001D7B 12r0Cr4B         [24] 6012 	lcall	_LCD_string_write
                                   6013 ;	main.c:59: LCD_string_write("6: Count\n");
      001D7E 90r07rBB         [24] 6014 	mov	dptr,#___str_45
      001D81 75 F0 80         [24] 6015 	mov	b,#0x80
      001D84 12r0Cr4B         [24] 6016 	lcall	_LCD_string_write
                                   6017 ;	main.c:62: LCD_string_write("B: Temperature\n");
      001D87 90r07rC5         [24] 6018 	mov	dptr,#___str_46
      001D8A 75 F0 80         [24] 6019 	mov	b,#0x80
      001D8D 12r0Cr4B         [24] 6020 	lcall	_LCD_string_write
                                   6021 ;	main.c:64: LCD_string_write("7: Light\n");
      001D90 90r07rD5         [24] 6022 	mov	dptr,#___str_47
      001D93 75 F0 80         [24] 6023 	mov	b,#0x80
                                   6024 ;	main.c:65: }
      001D96 02r0Cr4B         [24] 6025 	ljmp	_LCD_string_write
                                   6026 ;------------------------------------------------------------
                                   6027 ;Allocation info for local variables in function 'main'
                                   6028 ;------------------------------------------------------------
                                   6029 ;input                     Allocated with name '_main_input_65536_313'
                                   6030 ;------------------------------------------------------------
                                   6031 ;	main.c:67: void main(void) {
                                   6032 ;	-----------------------------------------
                                   6033 ;	 function main
                                   6034 ;	-----------------------------------------
      001D99                       6035 _main:
                                   6036 ;	main.c:72: iowrite8(seg7_address, 0x00);
      001D99 75*00 00         [24] 6037 	mov	_iowrite8_PARM_2,#0x00
      001D9C 85*04 82         [24] 6038 	mov	dpl,_seg7_address
      001D9F 85*05 83         [24] 6039 	mov	dph,(_seg7_address + 1)
      001DA2 12r00r00         [24] 6040 	lcall	_iowrite8
                                   6041 ;	main.c:75: TFT_LCD_INIT();
      001DA5 12r02r11         [24] 6042 	lcall	_TFT_LCD_INIT
                                   6043 ;	main.c:76: fillScreen(BLACK);
      001DA8 90 00 00         [24] 6044 	mov	dptr,#0x0000
      001DAB 12r08r44         [24] 6045 	lcall	_fillScreen
                                   6046 ;	main.c:77: setRotation(0);
      001DAE 75 82 00         [24] 6047 	mov	dpl,#0x00
      001DB1 12r00rE8         [24] 6048 	lcall	_setRotation
                                   6049 ;	main.c:78: testCircles(20, BLUE);
      001DB4 75*2C 1F         [24] 6050 	mov	_testCircles_PARM_2,#0x1f
      001DB7 75*2D 00         [24] 6051 	mov	(_testCircles_PARM_2 + 1),#0x00
      001DBA 75 82 14         [24] 6052 	mov	dpl,#0x14
      001DBD 12r06r9D         [24] 6053 	lcall	_testCircles
                                   6054 ;	main.c:80: while (1) {
      001DC0                       6055 00111$:
                                   6056 ;	main.c:82: menu();
      001DC0 12r1Dr07         [24] 6057 	lcall	_menu
                                   6058 ;	main.c:85: input = keyDetect();
      001DC3 12r0CrEA         [24] 6059 	lcall	_keyDetect
      001DC6 AF 82            [24] 6060 	mov	r7,dpl
                                   6061 ;	main.c:89: switch(input) {
      001DC8 BF 31 02         [24] 6062 	cjne	r7,#0x31,00147$
      001DCB 80 1E            [24] 6063 	sjmp	00101$
      001DCD                       6064 00147$:
      001DCD BF 33 02         [24] 6065 	cjne	r7,#0x33,00148$
      001DD0 80 1E            [24] 6066 	sjmp	00102$
      001DD2                       6067 00148$:
      001DD2 BF 34 02         [24] 6068 	cjne	r7,#0x34,00149$
      001DD5 80 23            [24] 6069 	sjmp	00104$
      001DD7                       6070 00149$:
      001DD7 BF 36 02         [24] 6071 	cjne	r7,#0x36,00150$
      001DDA 80 23            [24] 6072 	sjmp	00105$
      001DDC                       6073 00150$:
      001DDC BF 37 02         [24] 6074 	cjne	r7,#0x37,00151$
      001DDF 80 28            [24] 6075 	sjmp	00107$
      001DE1                       6076 00151$:
      001DE1 BF 41 02         [24] 6077 	cjne	r7,#0x41,00152$
      001DE4 80 0F            [24] 6078 	sjmp	00103$
      001DE6                       6079 00152$:
                                   6080 ;	main.c:90: case '1': basic(); break;
      001DE6 BF 42 D7         [24] 6081 	cjne	r7,#0x42,00111$
      001DE9 80 19            [24] 6082 	sjmp	00106$
      001DEB                       6083 00101$:
      001DEB 12r12r27         [24] 6084 	lcall	_basic
                                   6085 ;	main.c:92: case '3': check(); break;
      001DEE 80 D0            [24] 6086 	sjmp	00111$
      001DF0                       6087 00102$:
      001DF0 12r10rEB         [24] 6088 	lcall	_check
                                   6089 ;	main.c:93: case 'A': move(); break;
      001DF3 80 CB            [24] 6090 	sjmp	00111$
      001DF5                       6091 00103$:
      001DF5 12r12rBD         [24] 6092 	lcall	_move
                                   6093 ;	main.c:94: case '4': edit(); break;
      001DF8 80 C6            [24] 6094 	sjmp	00111$
      001DFA                       6095 00104$:
      001DFA 12r14r77         [24] 6096 	lcall	_edit
                                   6097 ;	main.c:96: case '6': count(); break;
      001DFD 80 C1            [24] 6098 	sjmp	00111$
      001DFF                       6099 00105$:
      001DFF 12r19rA9         [24] 6100 	lcall	_count
                                   6101 ;	main.c:97: case 'B': temperature(); break;
      001E02 80 BC            [24] 6102 	sjmp	00111$
      001E04                       6103 00106$:
      001E04 12r1Cr93         [24] 6104 	lcall	_temperature
                                   6105 ;	main.c:98: case '7': light(); break;
      001E07 80 B7            [24] 6106 	sjmp	00111$
      001E09                       6107 00107$:
      001E09 12r1CrCD         [24] 6108 	lcall	_light
                                   6109 ;	main.c:100: }
                                   6110 ;	main.c:102: }
      001E0C 80 B2            [24] 6111 	sjmp	00111$
                                   6112 	.area CSEG    (CODE)
                                   6113 	.area CONST   (CODE)
      000000                       6114 _font:
      000000 00                    6115 	.db #0x00	; 0
      000001 00                    6116 	.db #0x00	; 0
      000002 00                    6117 	.db #0x00	; 0
      000003 00                    6118 	.db #0x00	; 0
      000004 00                    6119 	.db #0x00	; 0
      000005 3E                    6120 	.db #0x3e	; 62
      000006 5B                    6121 	.db #0x5b	; 91
      000007 4F                    6122 	.db #0x4f	; 79	'O'
      000008 5B                    6123 	.db #0x5b	; 91
      000009 3E                    6124 	.db #0x3e	; 62
      00000A 3E                    6125 	.db #0x3e	; 62
      00000B 6B                    6126 	.db #0x6b	; 107	'k'
      00000C 4F                    6127 	.db #0x4f	; 79	'O'
      00000D 6B                    6128 	.db #0x6b	; 107	'k'
      00000E 3E                    6129 	.db #0x3e	; 62
      00000F 1C                    6130 	.db #0x1c	; 28
      000010 3E                    6131 	.db #0x3e	; 62
      000011 7C                    6132 	.db #0x7c	; 124
      000012 3E                    6133 	.db #0x3e	; 62
      000013 1C                    6134 	.db #0x1c	; 28
      000014 18                    6135 	.db #0x18	; 24
      000015 3C                    6136 	.db #0x3c	; 60
      000016 7E                    6137 	.db #0x7e	; 126
      000017 3C                    6138 	.db #0x3c	; 60
      000018 18                    6139 	.db #0x18	; 24
      000019 1C                    6140 	.db #0x1c	; 28
      00001A 57                    6141 	.db #0x57	; 87	'W'
      00001B 7D                    6142 	.db #0x7d	; 125
      00001C 57                    6143 	.db #0x57	; 87	'W'
      00001D 1C                    6144 	.db #0x1c	; 28
      00001E 1C                    6145 	.db #0x1c	; 28
      00001F 5E                    6146 	.db #0x5e	; 94
      000020 7F                    6147 	.db #0x7f	; 127
      000021 5E                    6148 	.db #0x5e	; 94
      000022 1C                    6149 	.db #0x1c	; 28
      000023 00                    6150 	.db #0x00	; 0
      000024 18                    6151 	.db #0x18	; 24
      000025 3C                    6152 	.db #0x3c	; 60
      000026 18                    6153 	.db #0x18	; 24
      000027 00                    6154 	.db #0x00	; 0
      000028 FF                    6155 	.db #0xff	; 255
      000029 E7                    6156 	.db #0xe7	; 231
      00002A C3                    6157 	.db #0xc3	; 195
      00002B E7                    6158 	.db #0xe7	; 231
      00002C FF                    6159 	.db #0xff	; 255
      00002D 00                    6160 	.db #0x00	; 0
      00002E 18                    6161 	.db #0x18	; 24
      00002F 24                    6162 	.db #0x24	; 36
      000030 18                    6163 	.db #0x18	; 24
      000031 00                    6164 	.db #0x00	; 0
      000032 FF                    6165 	.db #0xff	; 255
      000033 E7                    6166 	.db #0xe7	; 231
      000034 DB                    6167 	.db #0xdb	; 219
      000035 E7                    6168 	.db #0xe7	; 231
      000036 FF                    6169 	.db #0xff	; 255
      000037 30                    6170 	.db #0x30	; 48	'0'
      000038 48                    6171 	.db #0x48	; 72	'H'
      000039 3A                    6172 	.db #0x3a	; 58
      00003A 06                    6173 	.db #0x06	; 6
      00003B 0E                    6174 	.db #0x0e	; 14
      00003C 26                    6175 	.db #0x26	; 38
      00003D 29                    6176 	.db #0x29	; 41
      00003E 79                    6177 	.db #0x79	; 121	'y'
      00003F 29                    6178 	.db #0x29	; 41
      000040 26                    6179 	.db #0x26	; 38
      000041 40                    6180 	.db #0x40	; 64
      000042 7F                    6181 	.db #0x7f	; 127
      000043 05                    6182 	.db #0x05	; 5
      000044 05                    6183 	.db #0x05	; 5
      000045 07                    6184 	.db #0x07	; 7
      000046 40                    6185 	.db #0x40	; 64
      000047 7F                    6186 	.db #0x7f	; 127
      000048 05                    6187 	.db #0x05	; 5
      000049 25                    6188 	.db #0x25	; 37
      00004A 3F                    6189 	.db #0x3f	; 63
      00004B 5A                    6190 	.db #0x5a	; 90	'Z'
      00004C 3C                    6191 	.db #0x3c	; 60
      00004D E7                    6192 	.db #0xe7	; 231
      00004E 3C                    6193 	.db #0x3c	; 60
      00004F 5A                    6194 	.db #0x5a	; 90	'Z'
      000050 7F                    6195 	.db #0x7f	; 127
      000051 3E                    6196 	.db #0x3e	; 62
      000052 1C                    6197 	.db #0x1c	; 28
      000053 1C                    6198 	.db #0x1c	; 28
      000054 08                    6199 	.db #0x08	; 8
      000055 08                    6200 	.db #0x08	; 8
      000056 1C                    6201 	.db #0x1c	; 28
      000057 1C                    6202 	.db #0x1c	; 28
      000058 3E                    6203 	.db #0x3e	; 62
      000059 7F                    6204 	.db #0x7f	; 127
      00005A 14                    6205 	.db #0x14	; 20
      00005B 22                    6206 	.db #0x22	; 34
      00005C 7F                    6207 	.db #0x7f	; 127
      00005D 22                    6208 	.db #0x22	; 34
      00005E 14                    6209 	.db #0x14	; 20
      00005F 5F                    6210 	.db #0x5f	; 95
      000060 5F                    6211 	.db #0x5f	; 95
      000061 00                    6212 	.db #0x00	; 0
      000062 5F                    6213 	.db #0x5f	; 95
      000063 5F                    6214 	.db #0x5f	; 95
      000064 06                    6215 	.db #0x06	; 6
      000065 09                    6216 	.db #0x09	; 9
      000066 7F                    6217 	.db #0x7f	; 127
      000067 01                    6218 	.db #0x01	; 1
      000068 7F                    6219 	.db #0x7f	; 127
      000069 00                    6220 	.db #0x00	; 0
      00006A 66                    6221 	.db #0x66	; 102	'f'
      00006B 89                    6222 	.db #0x89	; 137
      00006C 95                    6223 	.db #0x95	; 149
      00006D 6A                    6224 	.db #0x6a	; 106	'j'
      00006E 60                    6225 	.db #0x60	; 96
      00006F 60                    6226 	.db #0x60	; 96
      000070 60                    6227 	.db #0x60	; 96
      000071 60                    6228 	.db #0x60	; 96
      000072 60                    6229 	.db #0x60	; 96
      000073 94                    6230 	.db #0x94	; 148
      000074 A2                    6231 	.db #0xa2	; 162
      000075 FF                    6232 	.db #0xff	; 255
      000076 A2                    6233 	.db #0xa2	; 162
      000077 94                    6234 	.db #0x94	; 148
      000078 08                    6235 	.db #0x08	; 8
      000079 04                    6236 	.db #0x04	; 4
      00007A 7E                    6237 	.db #0x7e	; 126
      00007B 04                    6238 	.db #0x04	; 4
      00007C 08                    6239 	.db #0x08	; 8
      00007D 10                    6240 	.db #0x10	; 16
      00007E 20                    6241 	.db #0x20	; 32
      00007F 7E                    6242 	.db #0x7e	; 126
      000080 20                    6243 	.db #0x20	; 32
      000081 10                    6244 	.db #0x10	; 16
      000082 08                    6245 	.db #0x08	; 8
      000083 08                    6246 	.db #0x08	; 8
      000084 2A                    6247 	.db #0x2a	; 42
      000085 1C                    6248 	.db #0x1c	; 28
      000086 08                    6249 	.db #0x08	; 8
      000087 08                    6250 	.db #0x08	; 8
      000088 1C                    6251 	.db #0x1c	; 28
      000089 2A                    6252 	.db #0x2a	; 42
      00008A 08                    6253 	.db #0x08	; 8
      00008B 08                    6254 	.db #0x08	; 8
      00008C 1E                    6255 	.db #0x1e	; 30
      00008D 10                    6256 	.db #0x10	; 16
      00008E 10                    6257 	.db #0x10	; 16
      00008F 10                    6258 	.db #0x10	; 16
      000090 10                    6259 	.db #0x10	; 16
      000091 0C                    6260 	.db #0x0c	; 12
      000092 1E                    6261 	.db #0x1e	; 30
      000093 0C                    6262 	.db #0x0c	; 12
      000094 1E                    6263 	.db #0x1e	; 30
      000095 0C                    6264 	.db #0x0c	; 12
      000096 30                    6265 	.db #0x30	; 48	'0'
      000097 38                    6266 	.db #0x38	; 56	'8'
      000098 3E                    6267 	.db #0x3e	; 62
      000099 38                    6268 	.db #0x38	; 56	'8'
      00009A 30                    6269 	.db #0x30	; 48	'0'
      00009B 06                    6270 	.db #0x06	; 6
      00009C 0E                    6271 	.db #0x0e	; 14
      00009D 3E                    6272 	.db #0x3e	; 62
      00009E 0E                    6273 	.db #0x0e	; 14
      00009F 06                    6274 	.db #0x06	; 6
      0000A0 00                    6275 	.db #0x00	; 0
      0000A1 00                    6276 	.db #0x00	; 0
      0000A2 00                    6277 	.db #0x00	; 0
      0000A3 00                    6278 	.db #0x00	; 0
      0000A4 00                    6279 	.db #0x00	; 0
      0000A5 00                    6280 	.db #0x00	; 0
      0000A6 00                    6281 	.db #0x00	; 0
      0000A7 5F                    6282 	.db #0x5f	; 95
      0000A8 00                    6283 	.db #0x00	; 0
      0000A9 00                    6284 	.db #0x00	; 0
      0000AA 00                    6285 	.db #0x00	; 0
      0000AB 07                    6286 	.db #0x07	; 7
      0000AC 00                    6287 	.db #0x00	; 0
      0000AD 07                    6288 	.db #0x07	; 7
      0000AE 00                    6289 	.db #0x00	; 0
      0000AF 14                    6290 	.db #0x14	; 20
      0000B0 7F                    6291 	.db #0x7f	; 127
      0000B1 14                    6292 	.db #0x14	; 20
      0000B2 7F                    6293 	.db #0x7f	; 127
      0000B3 14                    6294 	.db #0x14	; 20
      0000B4 24                    6295 	.db #0x24	; 36
      0000B5 2A                    6296 	.db #0x2a	; 42
      0000B6 7F                    6297 	.db #0x7f	; 127
      0000B7 2A                    6298 	.db #0x2a	; 42
      0000B8 12                    6299 	.db #0x12	; 18
      0000B9 23                    6300 	.db #0x23	; 35
      0000BA 13                    6301 	.db #0x13	; 19
      0000BB 08                    6302 	.db #0x08	; 8
      0000BC 64                    6303 	.db #0x64	; 100	'd'
      0000BD 62                    6304 	.db #0x62	; 98	'b'
      0000BE 36                    6305 	.db #0x36	; 54	'6'
      0000BF 49                    6306 	.db #0x49	; 73	'I'
      0000C0 56                    6307 	.db #0x56	; 86	'V'
      0000C1 20                    6308 	.db #0x20	; 32
      0000C2 50                    6309 	.db #0x50	; 80	'P'
      0000C3 00                    6310 	.db #0x00	; 0
      0000C4 08                    6311 	.db #0x08	; 8
      0000C5 07                    6312 	.db #0x07	; 7
      0000C6 03                    6313 	.db #0x03	; 3
      0000C7 00                    6314 	.db #0x00	; 0
      0000C8 00                    6315 	.db #0x00	; 0
      0000C9 1C                    6316 	.db #0x1c	; 28
      0000CA 22                    6317 	.db #0x22	; 34
      0000CB 41                    6318 	.db #0x41	; 65	'A'
      0000CC 00                    6319 	.db #0x00	; 0
      0000CD 00                    6320 	.db #0x00	; 0
      0000CE 41                    6321 	.db #0x41	; 65	'A'
      0000CF 22                    6322 	.db #0x22	; 34
      0000D0 1C                    6323 	.db #0x1c	; 28
      0000D1 00                    6324 	.db #0x00	; 0
      0000D2 2A                    6325 	.db #0x2a	; 42
      0000D3 1C                    6326 	.db #0x1c	; 28
      0000D4 7F                    6327 	.db #0x7f	; 127
      0000D5 1C                    6328 	.db #0x1c	; 28
      0000D6 2A                    6329 	.db #0x2a	; 42
      0000D7 08                    6330 	.db #0x08	; 8
      0000D8 08                    6331 	.db #0x08	; 8
      0000D9 3E                    6332 	.db #0x3e	; 62
      0000DA 08                    6333 	.db #0x08	; 8
      0000DB 08                    6334 	.db #0x08	; 8
      0000DC 00                    6335 	.db #0x00	; 0
      0000DD 80                    6336 	.db #0x80	; 128
      0000DE 70                    6337 	.db #0x70	; 112	'p'
      0000DF 30                    6338 	.db #0x30	; 48	'0'
      0000E0 00                    6339 	.db #0x00	; 0
      0000E1 08                    6340 	.db #0x08	; 8
      0000E2 08                    6341 	.db #0x08	; 8
      0000E3 08                    6342 	.db #0x08	; 8
      0000E4 08                    6343 	.db #0x08	; 8
      0000E5 08                    6344 	.db #0x08	; 8
      0000E6 00                    6345 	.db #0x00	; 0
      0000E7 00                    6346 	.db #0x00	; 0
      0000E8 60                    6347 	.db #0x60	; 96
      0000E9 60                    6348 	.db #0x60	; 96
      0000EA 00                    6349 	.db #0x00	; 0
      0000EB 20                    6350 	.db #0x20	; 32
      0000EC 10                    6351 	.db #0x10	; 16
      0000ED 08                    6352 	.db #0x08	; 8
      0000EE 04                    6353 	.db #0x04	; 4
      0000EF 02                    6354 	.db #0x02	; 2
      0000F0 3E                    6355 	.db #0x3e	; 62
      0000F1 51                    6356 	.db #0x51	; 81	'Q'
      0000F2 49                    6357 	.db #0x49	; 73	'I'
      0000F3 45                    6358 	.db #0x45	; 69	'E'
      0000F4 3E                    6359 	.db #0x3e	; 62
      0000F5 00                    6360 	.db #0x00	; 0
      0000F6 42                    6361 	.db #0x42	; 66	'B'
      0000F7 7F                    6362 	.db #0x7f	; 127
      0000F8 40                    6363 	.db #0x40	; 64
      0000F9 00                    6364 	.db #0x00	; 0
      0000FA 72                    6365 	.db #0x72	; 114	'r'
      0000FB 49                    6366 	.db #0x49	; 73	'I'
      0000FC 49                    6367 	.db #0x49	; 73	'I'
      0000FD 49                    6368 	.db #0x49	; 73	'I'
      0000FE 46                    6369 	.db #0x46	; 70	'F'
      0000FF 21                    6370 	.db #0x21	; 33
      000100 41                    6371 	.db #0x41	; 65	'A'
      000101 49                    6372 	.db #0x49	; 73	'I'
      000102 4D                    6373 	.db #0x4d	; 77	'M'
      000103 33                    6374 	.db #0x33	; 51	'3'
      000104 18                    6375 	.db #0x18	; 24
      000105 14                    6376 	.db #0x14	; 20
      000106 12                    6377 	.db #0x12	; 18
      000107 7F                    6378 	.db #0x7f	; 127
      000108 10                    6379 	.db #0x10	; 16
      000109 27                    6380 	.db #0x27	; 39
      00010A 45                    6381 	.db #0x45	; 69	'E'
      00010B 45                    6382 	.db #0x45	; 69	'E'
      00010C 45                    6383 	.db #0x45	; 69	'E'
      00010D 39                    6384 	.db #0x39	; 57	'9'
      00010E 3C                    6385 	.db #0x3c	; 60
      00010F 4A                    6386 	.db #0x4a	; 74	'J'
      000110 49                    6387 	.db #0x49	; 73	'I'
      000111 49                    6388 	.db #0x49	; 73	'I'
      000112 31                    6389 	.db #0x31	; 49	'1'
      000113 41                    6390 	.db #0x41	; 65	'A'
      000114 21                    6391 	.db #0x21	; 33
      000115 11                    6392 	.db #0x11	; 17
      000116 09                    6393 	.db #0x09	; 9
      000117 07                    6394 	.db #0x07	; 7
      000118 36                    6395 	.db #0x36	; 54	'6'
      000119 49                    6396 	.db #0x49	; 73	'I'
      00011A 49                    6397 	.db #0x49	; 73	'I'
      00011B 49                    6398 	.db #0x49	; 73	'I'
      00011C 36                    6399 	.db #0x36	; 54	'6'
      00011D 46                    6400 	.db #0x46	; 70	'F'
      00011E 49                    6401 	.db #0x49	; 73	'I'
      00011F 49                    6402 	.db #0x49	; 73	'I'
      000120 29                    6403 	.db #0x29	; 41
      000121 1E                    6404 	.db #0x1e	; 30
      000122 00                    6405 	.db #0x00	; 0
      000123 00                    6406 	.db #0x00	; 0
      000124 14                    6407 	.db #0x14	; 20
      000125 00                    6408 	.db #0x00	; 0
      000126 00                    6409 	.db #0x00	; 0
      000127 00                    6410 	.db #0x00	; 0
      000128 40                    6411 	.db #0x40	; 64
      000129 34                    6412 	.db #0x34	; 52	'4'
      00012A 00                    6413 	.db #0x00	; 0
      00012B 00                    6414 	.db #0x00	; 0
      00012C 00                    6415 	.db #0x00	; 0
      00012D 08                    6416 	.db #0x08	; 8
      00012E 14                    6417 	.db #0x14	; 20
      00012F 22                    6418 	.db #0x22	; 34
      000130 41                    6419 	.db #0x41	; 65	'A'
      000131 14                    6420 	.db #0x14	; 20
      000132 14                    6421 	.db #0x14	; 20
      000133 14                    6422 	.db #0x14	; 20
      000134 14                    6423 	.db #0x14	; 20
      000135 14                    6424 	.db #0x14	; 20
      000136 00                    6425 	.db #0x00	; 0
      000137 41                    6426 	.db #0x41	; 65	'A'
      000138 22                    6427 	.db #0x22	; 34
      000139 14                    6428 	.db #0x14	; 20
      00013A 08                    6429 	.db #0x08	; 8
      00013B 02                    6430 	.db #0x02	; 2
      00013C 01                    6431 	.db #0x01	; 1
      00013D 59                    6432 	.db #0x59	; 89	'Y'
      00013E 09                    6433 	.db #0x09	; 9
      00013F 06                    6434 	.db #0x06	; 6
      000140 3E                    6435 	.db #0x3e	; 62
      000141 41                    6436 	.db #0x41	; 65	'A'
      000142 5D                    6437 	.db #0x5d	; 93
      000143 59                    6438 	.db #0x59	; 89	'Y'
      000144 4E                    6439 	.db #0x4e	; 78	'N'
      000145 7C                    6440 	.db #0x7c	; 124
      000146 12                    6441 	.db #0x12	; 18
      000147 11                    6442 	.db #0x11	; 17
      000148 12                    6443 	.db #0x12	; 18
      000149 7C                    6444 	.db #0x7c	; 124
      00014A 7F                    6445 	.db #0x7f	; 127
      00014B 49                    6446 	.db #0x49	; 73	'I'
      00014C 49                    6447 	.db #0x49	; 73	'I'
      00014D 49                    6448 	.db #0x49	; 73	'I'
      00014E 36                    6449 	.db #0x36	; 54	'6'
      00014F 3E                    6450 	.db #0x3e	; 62
      000150 41                    6451 	.db #0x41	; 65	'A'
      000151 41                    6452 	.db #0x41	; 65	'A'
      000152 41                    6453 	.db #0x41	; 65	'A'
      000153 22                    6454 	.db #0x22	; 34
      000154 7F                    6455 	.db #0x7f	; 127
      000155 41                    6456 	.db #0x41	; 65	'A'
      000156 41                    6457 	.db #0x41	; 65	'A'
      000157 41                    6458 	.db #0x41	; 65	'A'
      000158 3E                    6459 	.db #0x3e	; 62
      000159 7F                    6460 	.db #0x7f	; 127
      00015A 49                    6461 	.db #0x49	; 73	'I'
      00015B 49                    6462 	.db #0x49	; 73	'I'
      00015C 49                    6463 	.db #0x49	; 73	'I'
      00015D 41                    6464 	.db #0x41	; 65	'A'
      00015E 7F                    6465 	.db #0x7f	; 127
      00015F 09                    6466 	.db #0x09	; 9
      000160 09                    6467 	.db #0x09	; 9
      000161 09                    6468 	.db #0x09	; 9
      000162 01                    6469 	.db #0x01	; 1
      000163 3E                    6470 	.db #0x3e	; 62
      000164 41                    6471 	.db #0x41	; 65	'A'
      000165 41                    6472 	.db #0x41	; 65	'A'
      000166 51                    6473 	.db #0x51	; 81	'Q'
      000167 73                    6474 	.db #0x73	; 115	's'
      000168 7F                    6475 	.db #0x7f	; 127
      000169 08                    6476 	.db #0x08	; 8
      00016A 08                    6477 	.db #0x08	; 8
      00016B 08                    6478 	.db #0x08	; 8
      00016C 7F                    6479 	.db #0x7f	; 127
      00016D 00                    6480 	.db #0x00	; 0
      00016E 41                    6481 	.db #0x41	; 65	'A'
      00016F 7F                    6482 	.db #0x7f	; 127
      000170 41                    6483 	.db #0x41	; 65	'A'
      000171 00                    6484 	.db #0x00	; 0
      000172 20                    6485 	.db #0x20	; 32
      000173 40                    6486 	.db #0x40	; 64
      000174 41                    6487 	.db #0x41	; 65	'A'
      000175 3F                    6488 	.db #0x3f	; 63
      000176 01                    6489 	.db #0x01	; 1
      000177 7F                    6490 	.db #0x7f	; 127
      000178 08                    6491 	.db #0x08	; 8
      000179 14                    6492 	.db #0x14	; 20
      00017A 22                    6493 	.db #0x22	; 34
      00017B 41                    6494 	.db #0x41	; 65	'A'
      00017C 7F                    6495 	.db #0x7f	; 127
      00017D 40                    6496 	.db #0x40	; 64
      00017E 40                    6497 	.db #0x40	; 64
      00017F 40                    6498 	.db #0x40	; 64
      000180 40                    6499 	.db #0x40	; 64
      000181 7F                    6500 	.db #0x7f	; 127
      000182 02                    6501 	.db #0x02	; 2
      000183 1C                    6502 	.db #0x1c	; 28
      000184 02                    6503 	.db #0x02	; 2
      000185 7F                    6504 	.db #0x7f	; 127
      000186 7F                    6505 	.db #0x7f	; 127
      000187 04                    6506 	.db #0x04	; 4
      000188 08                    6507 	.db #0x08	; 8
      000189 10                    6508 	.db #0x10	; 16
      00018A 7F                    6509 	.db #0x7f	; 127
      00018B 3E                    6510 	.db #0x3e	; 62
      00018C 41                    6511 	.db #0x41	; 65	'A'
      00018D 41                    6512 	.db #0x41	; 65	'A'
      00018E 41                    6513 	.db #0x41	; 65	'A'
      00018F 3E                    6514 	.db #0x3e	; 62
      000190 7F                    6515 	.db #0x7f	; 127
      000191 09                    6516 	.db #0x09	; 9
      000192 09                    6517 	.db #0x09	; 9
      000193 09                    6518 	.db #0x09	; 9
      000194 06                    6519 	.db #0x06	; 6
      000195 3E                    6520 	.db #0x3e	; 62
      000196 41                    6521 	.db #0x41	; 65	'A'
      000197 51                    6522 	.db #0x51	; 81	'Q'
      000198 21                    6523 	.db #0x21	; 33
      000199 5E                    6524 	.db #0x5e	; 94
      00019A 7F                    6525 	.db #0x7f	; 127
      00019B 09                    6526 	.db #0x09	; 9
      00019C 19                    6527 	.db #0x19	; 25
      00019D 29                    6528 	.db #0x29	; 41
      00019E 46                    6529 	.db #0x46	; 70	'F'
      00019F 26                    6530 	.db #0x26	; 38
      0001A0 49                    6531 	.db #0x49	; 73	'I'
      0001A1 49                    6532 	.db #0x49	; 73	'I'
      0001A2 49                    6533 	.db #0x49	; 73	'I'
      0001A3 32                    6534 	.db #0x32	; 50	'2'
      0001A4 03                    6535 	.db #0x03	; 3
      0001A5 01                    6536 	.db #0x01	; 1
      0001A6 7F                    6537 	.db #0x7f	; 127
      0001A7 01                    6538 	.db #0x01	; 1
      0001A8 03                    6539 	.db #0x03	; 3
      0001A9 3F                    6540 	.db #0x3f	; 63
      0001AA 40                    6541 	.db #0x40	; 64
      0001AB 40                    6542 	.db #0x40	; 64
      0001AC 40                    6543 	.db #0x40	; 64
      0001AD 3F                    6544 	.db #0x3f	; 63
      0001AE 1F                    6545 	.db #0x1f	; 31
      0001AF 20                    6546 	.db #0x20	; 32
      0001B0 40                    6547 	.db #0x40	; 64
      0001B1 20                    6548 	.db #0x20	; 32
      0001B2 1F                    6549 	.db #0x1f	; 31
      0001B3 3F                    6550 	.db #0x3f	; 63
      0001B4 40                    6551 	.db #0x40	; 64
      0001B5 38                    6552 	.db #0x38	; 56	'8'
      0001B6 40                    6553 	.db #0x40	; 64
      0001B7 3F                    6554 	.db #0x3f	; 63
      0001B8 63                    6555 	.db #0x63	; 99	'c'
      0001B9 14                    6556 	.db #0x14	; 20
      0001BA 08                    6557 	.db #0x08	; 8
      0001BB 14                    6558 	.db #0x14	; 20
      0001BC 63                    6559 	.db #0x63	; 99	'c'
      0001BD 03                    6560 	.db #0x03	; 3
      0001BE 04                    6561 	.db #0x04	; 4
      0001BF 78                    6562 	.db #0x78	; 120	'x'
      0001C0 04                    6563 	.db #0x04	; 4
      0001C1 03                    6564 	.db #0x03	; 3
      0001C2 61                    6565 	.db #0x61	; 97	'a'
      0001C3 59                    6566 	.db #0x59	; 89	'Y'
      0001C4 49                    6567 	.db #0x49	; 73	'I'
      0001C5 4D                    6568 	.db #0x4d	; 77	'M'
      0001C6 43                    6569 	.db #0x43	; 67	'C'
      0001C7 00                    6570 	.db #0x00	; 0
      0001C8 7F                    6571 	.db #0x7f	; 127
      0001C9 41                    6572 	.db #0x41	; 65	'A'
      0001CA 41                    6573 	.db #0x41	; 65	'A'
      0001CB 41                    6574 	.db #0x41	; 65	'A'
      0001CC 02                    6575 	.db #0x02	; 2
      0001CD 04                    6576 	.db #0x04	; 4
      0001CE 08                    6577 	.db #0x08	; 8
      0001CF 10                    6578 	.db #0x10	; 16
      0001D0 20                    6579 	.db #0x20	; 32
      0001D1 00                    6580 	.db #0x00	; 0
      0001D2 41                    6581 	.db #0x41	; 65	'A'
      0001D3 41                    6582 	.db #0x41	; 65	'A'
      0001D4 41                    6583 	.db #0x41	; 65	'A'
      0001D5 7F                    6584 	.db #0x7f	; 127
      0001D6 04                    6585 	.db #0x04	; 4
      0001D7 02                    6586 	.db #0x02	; 2
      0001D8 01                    6587 	.db #0x01	; 1
      0001D9 02                    6588 	.db #0x02	; 2
      0001DA 04                    6589 	.db #0x04	; 4
      0001DB 40                    6590 	.db #0x40	; 64
      0001DC 40                    6591 	.db #0x40	; 64
      0001DD 40                    6592 	.db #0x40	; 64
      0001DE 40                    6593 	.db #0x40	; 64
      0001DF 40                    6594 	.db #0x40	; 64
      0001E0 00                    6595 	.db #0x00	; 0
      0001E1 03                    6596 	.db #0x03	; 3
      0001E2 07                    6597 	.db #0x07	; 7
      0001E3 08                    6598 	.db #0x08	; 8
      0001E4 00                    6599 	.db #0x00	; 0
      0001E5 20                    6600 	.db #0x20	; 32
      0001E6 54                    6601 	.db #0x54	; 84	'T'
      0001E7 54                    6602 	.db #0x54	; 84	'T'
      0001E8 78                    6603 	.db #0x78	; 120	'x'
      0001E9 40                    6604 	.db #0x40	; 64
      0001EA 7F                    6605 	.db #0x7f	; 127
      0001EB 28                    6606 	.db #0x28	; 40
      0001EC 44                    6607 	.db #0x44	; 68	'D'
      0001ED 44                    6608 	.db #0x44	; 68	'D'
      0001EE 38                    6609 	.db #0x38	; 56	'8'
      0001EF 38                    6610 	.db #0x38	; 56	'8'
      0001F0 44                    6611 	.db #0x44	; 68	'D'
      0001F1 44                    6612 	.db #0x44	; 68	'D'
      0001F2 44                    6613 	.db #0x44	; 68	'D'
      0001F3 28                    6614 	.db #0x28	; 40
      0001F4 38                    6615 	.db #0x38	; 56	'8'
      0001F5 44                    6616 	.db #0x44	; 68	'D'
      0001F6 44                    6617 	.db #0x44	; 68	'D'
      0001F7 28                    6618 	.db #0x28	; 40
      0001F8 7F                    6619 	.db #0x7f	; 127
      0001F9 38                    6620 	.db #0x38	; 56	'8'
      0001FA 54                    6621 	.db #0x54	; 84	'T'
      0001FB 54                    6622 	.db #0x54	; 84	'T'
      0001FC 54                    6623 	.db #0x54	; 84	'T'
      0001FD 18                    6624 	.db #0x18	; 24
      0001FE 00                    6625 	.db #0x00	; 0
      0001FF 08                    6626 	.db #0x08	; 8
      000200 7E                    6627 	.db #0x7e	; 126
      000201 09                    6628 	.db #0x09	; 9
      000202 02                    6629 	.db #0x02	; 2
      000203 18                    6630 	.db #0x18	; 24
      000204 A4                    6631 	.db #0xa4	; 164
      000205 A4                    6632 	.db #0xa4	; 164
      000206 9C                    6633 	.db #0x9c	; 156
      000207 78                    6634 	.db #0x78	; 120	'x'
      000208 7F                    6635 	.db #0x7f	; 127
      000209 08                    6636 	.db #0x08	; 8
      00020A 04                    6637 	.db #0x04	; 4
      00020B 04                    6638 	.db #0x04	; 4
      00020C 78                    6639 	.db #0x78	; 120	'x'
      00020D 00                    6640 	.db #0x00	; 0
      00020E 44                    6641 	.db #0x44	; 68	'D'
      00020F 7D                    6642 	.db #0x7d	; 125
      000210 40                    6643 	.db #0x40	; 64
      000211 00                    6644 	.db #0x00	; 0
      000212 20                    6645 	.db #0x20	; 32
      000213 40                    6646 	.db #0x40	; 64
      000214 40                    6647 	.db #0x40	; 64
      000215 3D                    6648 	.db #0x3d	; 61
      000216 00                    6649 	.db #0x00	; 0
      000217 7F                    6650 	.db #0x7f	; 127
      000218 10                    6651 	.db #0x10	; 16
      000219 28                    6652 	.db #0x28	; 40
      00021A 44                    6653 	.db #0x44	; 68	'D'
      00021B 00                    6654 	.db #0x00	; 0
      00021C 00                    6655 	.db #0x00	; 0
      00021D 41                    6656 	.db #0x41	; 65	'A'
      00021E 7F                    6657 	.db #0x7f	; 127
      00021F 40                    6658 	.db #0x40	; 64
      000220 00                    6659 	.db #0x00	; 0
      000221 7C                    6660 	.db #0x7c	; 124
      000222 04                    6661 	.db #0x04	; 4
      000223 78                    6662 	.db #0x78	; 120	'x'
      000224 04                    6663 	.db #0x04	; 4
      000225 78                    6664 	.db #0x78	; 120	'x'
      000226 7C                    6665 	.db #0x7c	; 124
      000227 08                    6666 	.db #0x08	; 8
      000228 04                    6667 	.db #0x04	; 4
      000229 04                    6668 	.db #0x04	; 4
      00022A 78                    6669 	.db #0x78	; 120	'x'
      00022B 38                    6670 	.db #0x38	; 56	'8'
      00022C 44                    6671 	.db #0x44	; 68	'D'
      00022D 44                    6672 	.db #0x44	; 68	'D'
      00022E 44                    6673 	.db #0x44	; 68	'D'
      00022F 38                    6674 	.db #0x38	; 56	'8'
      000230 FC                    6675 	.db #0xfc	; 252
      000231 18                    6676 	.db #0x18	; 24
      000232 24                    6677 	.db #0x24	; 36
      000233 24                    6678 	.db #0x24	; 36
      000234 18                    6679 	.db #0x18	; 24
      000235 18                    6680 	.db #0x18	; 24
      000236 24                    6681 	.db #0x24	; 36
      000237 24                    6682 	.db #0x24	; 36
      000238 18                    6683 	.db #0x18	; 24
      000239 FC                    6684 	.db #0xfc	; 252
      00023A 7C                    6685 	.db #0x7c	; 124
      00023B 08                    6686 	.db #0x08	; 8
      00023C 04                    6687 	.db #0x04	; 4
      00023D 04                    6688 	.db #0x04	; 4
      00023E 08                    6689 	.db #0x08	; 8
      00023F 48                    6690 	.db #0x48	; 72	'H'
      000240 54                    6691 	.db #0x54	; 84	'T'
      000241 54                    6692 	.db #0x54	; 84	'T'
      000242 54                    6693 	.db #0x54	; 84	'T'
      000243 24                    6694 	.db #0x24	; 36
      000244 04                    6695 	.db #0x04	; 4
      000245 04                    6696 	.db #0x04	; 4
      000246 3F                    6697 	.db #0x3f	; 63
      000247 44                    6698 	.db #0x44	; 68	'D'
      000248 24                    6699 	.db #0x24	; 36
      000249 3C                    6700 	.db #0x3c	; 60
      00024A 40                    6701 	.db #0x40	; 64
      00024B 40                    6702 	.db #0x40	; 64
      00024C 20                    6703 	.db #0x20	; 32
      00024D 7C                    6704 	.db #0x7c	; 124
      00024E 1C                    6705 	.db #0x1c	; 28
      00024F 20                    6706 	.db #0x20	; 32
      000250 40                    6707 	.db #0x40	; 64
      000251 20                    6708 	.db #0x20	; 32
      000252 1C                    6709 	.db #0x1c	; 28
      000253 3C                    6710 	.db #0x3c	; 60
      000254 40                    6711 	.db #0x40	; 64
      000255 30                    6712 	.db #0x30	; 48	'0'
      000256 40                    6713 	.db #0x40	; 64
      000257 3C                    6714 	.db #0x3c	; 60
      000258 44                    6715 	.db #0x44	; 68	'D'
      000259 28                    6716 	.db #0x28	; 40
      00025A 10                    6717 	.db #0x10	; 16
      00025B 28                    6718 	.db #0x28	; 40
      00025C 44                    6719 	.db #0x44	; 68	'D'
      00025D 4C                    6720 	.db #0x4c	; 76	'L'
      00025E 90                    6721 	.db #0x90	; 144
      00025F 90                    6722 	.db #0x90	; 144
      000260 90                    6723 	.db #0x90	; 144
      000261 7C                    6724 	.db #0x7c	; 124
      000262 44                    6725 	.db #0x44	; 68	'D'
      000263 64                    6726 	.db #0x64	; 100	'd'
      000264 54                    6727 	.db #0x54	; 84	'T'
      000265 4C                    6728 	.db #0x4c	; 76	'L'
      000266 44                    6729 	.db #0x44	; 68	'D'
      000267 00                    6730 	.db #0x00	; 0
      000268 08                    6731 	.db #0x08	; 8
      000269 36                    6732 	.db #0x36	; 54	'6'
      00026A 41                    6733 	.db #0x41	; 65	'A'
      00026B 00                    6734 	.db #0x00	; 0
      00026C 00                    6735 	.db #0x00	; 0
      00026D 00                    6736 	.db #0x00	; 0
      00026E 77                    6737 	.db #0x77	; 119	'w'
      00026F 00                    6738 	.db #0x00	; 0
      000270 00                    6739 	.db #0x00	; 0
      000271 00                    6740 	.db #0x00	; 0
      000272 41                    6741 	.db #0x41	; 65	'A'
      000273 36                    6742 	.db #0x36	; 54	'6'
      000274 08                    6743 	.db #0x08	; 8
      000275 00                    6744 	.db #0x00	; 0
      000276 02                    6745 	.db #0x02	; 2
      000277 01                    6746 	.db #0x01	; 1
      000278 02                    6747 	.db #0x02	; 2
      000279 04                    6748 	.db #0x04	; 4
      00027A 02                    6749 	.db #0x02	; 2
      00027B 3C                    6750 	.db #0x3c	; 60
      00027C 26                    6751 	.db #0x26	; 38
      00027D 23                    6752 	.db #0x23	; 35
      00027E 26                    6753 	.db #0x26	; 38
      00027F 3C                    6754 	.db #0x3c	; 60
      000280 1E                    6755 	.db #0x1e	; 30
      000281 A1                    6756 	.db #0xa1	; 161
      000282 A1                    6757 	.db #0xa1	; 161
      000283 61                    6758 	.db #0x61	; 97	'a'
      000284 12                    6759 	.db #0x12	; 18
      000285 3A                    6760 	.db #0x3a	; 58
      000286 40                    6761 	.db #0x40	; 64
      000287 40                    6762 	.db #0x40	; 64
      000288 20                    6763 	.db #0x20	; 32
      000289 7A                    6764 	.db #0x7a	; 122	'z'
      00028A 38                    6765 	.db #0x38	; 56	'8'
      00028B 54                    6766 	.db #0x54	; 84	'T'
      00028C 54                    6767 	.db #0x54	; 84	'T'
      00028D 55                    6768 	.db #0x55	; 85	'U'
      00028E 59                    6769 	.db #0x59	; 89	'Y'
      00028F 21                    6770 	.db #0x21	; 33
      000290 55                    6771 	.db #0x55	; 85	'U'
      000291 55                    6772 	.db #0x55	; 85	'U'
      000292 79                    6773 	.db #0x79	; 121	'y'
      000293 41                    6774 	.db #0x41	; 65	'A'
      000294 22                    6775 	.db #0x22	; 34
      000295 54                    6776 	.db #0x54	; 84	'T'
      000296 54                    6777 	.db #0x54	; 84	'T'
      000297 78                    6778 	.db #0x78	; 120	'x'
      000298 42                    6779 	.db #0x42	; 66	'B'
      000299 21                    6780 	.db #0x21	; 33
      00029A 55                    6781 	.db #0x55	; 85	'U'
      00029B 54                    6782 	.db #0x54	; 84	'T'
      00029C 78                    6783 	.db #0x78	; 120	'x'
      00029D 40                    6784 	.db #0x40	; 64
      00029E 20                    6785 	.db #0x20	; 32
      00029F 54                    6786 	.db #0x54	; 84	'T'
      0002A0 55                    6787 	.db #0x55	; 85	'U'
      0002A1 79                    6788 	.db #0x79	; 121	'y'
      0002A2 40                    6789 	.db #0x40	; 64
      0002A3 0C                    6790 	.db #0x0c	; 12
      0002A4 1E                    6791 	.db #0x1e	; 30
      0002A5 52                    6792 	.db #0x52	; 82	'R'
      0002A6 72                    6793 	.db #0x72	; 114	'r'
      0002A7 12                    6794 	.db #0x12	; 18
      0002A8 39                    6795 	.db #0x39	; 57	'9'
      0002A9 55                    6796 	.db #0x55	; 85	'U'
      0002AA 55                    6797 	.db #0x55	; 85	'U'
      0002AB 55                    6798 	.db #0x55	; 85	'U'
      0002AC 59                    6799 	.db #0x59	; 89	'Y'
      0002AD 39                    6800 	.db #0x39	; 57	'9'
      0002AE 54                    6801 	.db #0x54	; 84	'T'
      0002AF 54                    6802 	.db #0x54	; 84	'T'
      0002B0 54                    6803 	.db #0x54	; 84	'T'
      0002B1 59                    6804 	.db #0x59	; 89	'Y'
      0002B2 39                    6805 	.db #0x39	; 57	'9'
      0002B3 55                    6806 	.db #0x55	; 85	'U'
      0002B4 54                    6807 	.db #0x54	; 84	'T'
      0002B5 54                    6808 	.db #0x54	; 84	'T'
      0002B6 58                    6809 	.db #0x58	; 88	'X'
      0002B7 00                    6810 	.db #0x00	; 0
      0002B8 00                    6811 	.db #0x00	; 0
      0002B9 45                    6812 	.db #0x45	; 69	'E'
      0002BA 7C                    6813 	.db #0x7c	; 124
      0002BB 41                    6814 	.db #0x41	; 65	'A'
      0002BC 00                    6815 	.db #0x00	; 0
      0002BD 02                    6816 	.db #0x02	; 2
      0002BE 45                    6817 	.db #0x45	; 69	'E'
      0002BF 7D                    6818 	.db #0x7d	; 125
      0002C0 42                    6819 	.db #0x42	; 66	'B'
      0002C1 00                    6820 	.db #0x00	; 0
      0002C2 01                    6821 	.db #0x01	; 1
      0002C3 45                    6822 	.db #0x45	; 69	'E'
      0002C4 7C                    6823 	.db #0x7c	; 124
      0002C5 40                    6824 	.db #0x40	; 64
      0002C6 7D                    6825 	.db #0x7d	; 125
      0002C7 12                    6826 	.db #0x12	; 18
      0002C8 11                    6827 	.db #0x11	; 17
      0002C9 12                    6828 	.db #0x12	; 18
      0002CA 7D                    6829 	.db #0x7d	; 125
      0002CB F0                    6830 	.db #0xf0	; 240
      0002CC 28                    6831 	.db #0x28	; 40
      0002CD 25                    6832 	.db #0x25	; 37
      0002CE 28                    6833 	.db #0x28	; 40
      0002CF F0                    6834 	.db #0xf0	; 240
      0002D0 7C                    6835 	.db #0x7c	; 124
      0002D1 54                    6836 	.db #0x54	; 84	'T'
      0002D2 55                    6837 	.db #0x55	; 85	'U'
      0002D3 45                    6838 	.db #0x45	; 69	'E'
      0002D4 00                    6839 	.db #0x00	; 0
      0002D5 20                    6840 	.db #0x20	; 32
      0002D6 54                    6841 	.db #0x54	; 84	'T'
      0002D7 54                    6842 	.db #0x54	; 84	'T'
      0002D8 7C                    6843 	.db #0x7c	; 124
      0002D9 54                    6844 	.db #0x54	; 84	'T'
      0002DA 7C                    6845 	.db #0x7c	; 124
      0002DB 0A                    6846 	.db #0x0a	; 10
      0002DC 09                    6847 	.db #0x09	; 9
      0002DD 7F                    6848 	.db #0x7f	; 127
      0002DE 49                    6849 	.db #0x49	; 73	'I'
      0002DF 32                    6850 	.db #0x32	; 50	'2'
      0002E0 49                    6851 	.db #0x49	; 73	'I'
      0002E1 49                    6852 	.db #0x49	; 73	'I'
      0002E2 49                    6853 	.db #0x49	; 73	'I'
      0002E3 32                    6854 	.db #0x32	; 50	'2'
      0002E4 3A                    6855 	.db #0x3a	; 58
      0002E5 44                    6856 	.db #0x44	; 68	'D'
      0002E6 44                    6857 	.db #0x44	; 68	'D'
      0002E7 44                    6858 	.db #0x44	; 68	'D'
      0002E8 3A                    6859 	.db #0x3a	; 58
      0002E9 32                    6860 	.db #0x32	; 50	'2'
      0002EA 4A                    6861 	.db #0x4a	; 74	'J'
      0002EB 48                    6862 	.db #0x48	; 72	'H'
      0002EC 48                    6863 	.db #0x48	; 72	'H'
      0002ED 30                    6864 	.db #0x30	; 48	'0'
      0002EE 3A                    6865 	.db #0x3a	; 58
      0002EF 41                    6866 	.db #0x41	; 65	'A'
      0002F0 41                    6867 	.db #0x41	; 65	'A'
      0002F1 21                    6868 	.db #0x21	; 33
      0002F2 7A                    6869 	.db #0x7a	; 122	'z'
      0002F3 3A                    6870 	.db #0x3a	; 58
      0002F4 42                    6871 	.db #0x42	; 66	'B'
      0002F5 40                    6872 	.db #0x40	; 64
      0002F6 20                    6873 	.db #0x20	; 32
      0002F7 78                    6874 	.db #0x78	; 120	'x'
      0002F8 00                    6875 	.db #0x00	; 0
      0002F9 9D                    6876 	.db #0x9d	; 157
      0002FA A0                    6877 	.db #0xa0	; 160
      0002FB A0                    6878 	.db #0xa0	; 160
      0002FC 7D                    6879 	.db #0x7d	; 125
      0002FD 3D                    6880 	.db #0x3d	; 61
      0002FE 42                    6881 	.db #0x42	; 66	'B'
      0002FF 42                    6882 	.db #0x42	; 66	'B'
      000300 42                    6883 	.db #0x42	; 66	'B'
      000301 3D                    6884 	.db #0x3d	; 61
      000302 3D                    6885 	.db #0x3d	; 61
      000303 40                    6886 	.db #0x40	; 64
      000304 40                    6887 	.db #0x40	; 64
      000305 40                    6888 	.db #0x40	; 64
      000306 3D                    6889 	.db #0x3d	; 61
      000307 3C                    6890 	.db #0x3c	; 60
      000308 24                    6891 	.db #0x24	; 36
      000309 FF                    6892 	.db #0xff	; 255
      00030A 24                    6893 	.db #0x24	; 36
      00030B 24                    6894 	.db #0x24	; 36
      00030C 48                    6895 	.db #0x48	; 72	'H'
      00030D 7E                    6896 	.db #0x7e	; 126
      00030E 49                    6897 	.db #0x49	; 73	'I'
      00030F 43                    6898 	.db #0x43	; 67	'C'
      000310 66                    6899 	.db #0x66	; 102	'f'
      000311 2B                    6900 	.db #0x2b	; 43
      000312 2F                    6901 	.db #0x2f	; 47
      000313 FC                    6902 	.db #0xfc	; 252
      000314 2F                    6903 	.db #0x2f	; 47
      000315 2B                    6904 	.db #0x2b	; 43
      000316 FF                    6905 	.db #0xff	; 255
      000317 09                    6906 	.db #0x09	; 9
      000318 29                    6907 	.db #0x29	; 41
      000319 F6                    6908 	.db #0xf6	; 246
      00031A 20                    6909 	.db #0x20	; 32
      00031B C0                    6910 	.db #0xc0	; 192
      00031C 88                    6911 	.db #0x88	; 136
      00031D 7E                    6912 	.db #0x7e	; 126
      00031E 09                    6913 	.db #0x09	; 9
      00031F 03                    6914 	.db #0x03	; 3
      000320 20                    6915 	.db #0x20	; 32
      000321 54                    6916 	.db #0x54	; 84	'T'
      000322 54                    6917 	.db #0x54	; 84	'T'
      000323 79                    6918 	.db #0x79	; 121	'y'
      000324 41                    6919 	.db #0x41	; 65	'A'
      000325 00                    6920 	.db #0x00	; 0
      000326 00                    6921 	.db #0x00	; 0
      000327 44                    6922 	.db #0x44	; 68	'D'
      000328 7D                    6923 	.db #0x7d	; 125
      000329 41                    6924 	.db #0x41	; 65	'A'
      00032A 30                    6925 	.db #0x30	; 48	'0'
      00032B 48                    6926 	.db #0x48	; 72	'H'
      00032C 48                    6927 	.db #0x48	; 72	'H'
      00032D 4A                    6928 	.db #0x4a	; 74	'J'
      00032E 32                    6929 	.db #0x32	; 50	'2'
      00032F 38                    6930 	.db #0x38	; 56	'8'
      000330 40                    6931 	.db #0x40	; 64
      000331 40                    6932 	.db #0x40	; 64
      000332 22                    6933 	.db #0x22	; 34
      000333 7A                    6934 	.db #0x7a	; 122	'z'
      000334 00                    6935 	.db #0x00	; 0
      000335 7A                    6936 	.db #0x7a	; 122	'z'
      000336 0A                    6937 	.db #0x0a	; 10
      000337 0A                    6938 	.db #0x0a	; 10
      000338 72                    6939 	.db #0x72	; 114	'r'
      000339 7D                    6940 	.db #0x7d	; 125
      00033A 0D                    6941 	.db #0x0d	; 13
      00033B 19                    6942 	.db #0x19	; 25
      00033C 31                    6943 	.db #0x31	; 49	'1'
      00033D 7D                    6944 	.db #0x7d	; 125
      00033E 26                    6945 	.db #0x26	; 38
      00033F 29                    6946 	.db #0x29	; 41
      000340 29                    6947 	.db #0x29	; 41
      000341 2F                    6948 	.db #0x2f	; 47
      000342 28                    6949 	.db #0x28	; 40
      000343 26                    6950 	.db #0x26	; 38
      000344 29                    6951 	.db #0x29	; 41
      000345 29                    6952 	.db #0x29	; 41
      000346 29                    6953 	.db #0x29	; 41
      000347 26                    6954 	.db #0x26	; 38
      000348 30                    6955 	.db #0x30	; 48	'0'
      000349 48                    6956 	.db #0x48	; 72	'H'
      00034A 4D                    6957 	.db #0x4d	; 77	'M'
      00034B 40                    6958 	.db #0x40	; 64
      00034C 20                    6959 	.db #0x20	; 32
      00034D 38                    6960 	.db #0x38	; 56	'8'
      00034E 08                    6961 	.db #0x08	; 8
      00034F 08                    6962 	.db #0x08	; 8
      000350 08                    6963 	.db #0x08	; 8
      000351 08                    6964 	.db #0x08	; 8
      000352 08                    6965 	.db #0x08	; 8
      000353 08                    6966 	.db #0x08	; 8
      000354 08                    6967 	.db #0x08	; 8
      000355 08                    6968 	.db #0x08	; 8
      000356 38                    6969 	.db #0x38	; 56	'8'
      000357 2F                    6970 	.db #0x2f	; 47
      000358 10                    6971 	.db #0x10	; 16
      000359 C8                    6972 	.db #0xc8	; 200
      00035A AC                    6973 	.db #0xac	; 172
      00035B BA                    6974 	.db #0xba	; 186
      00035C 2F                    6975 	.db #0x2f	; 47
      00035D 10                    6976 	.db #0x10	; 16
      00035E 28                    6977 	.db #0x28	; 40
      00035F 34                    6978 	.db #0x34	; 52	'4'
      000360 FA                    6979 	.db #0xfa	; 250
      000361 00                    6980 	.db #0x00	; 0
      000362 00                    6981 	.db #0x00	; 0
      000363 7B                    6982 	.db #0x7b	; 123
      000364 00                    6983 	.db #0x00	; 0
      000365 00                    6984 	.db #0x00	; 0
      000366 08                    6985 	.db #0x08	; 8
      000367 14                    6986 	.db #0x14	; 20
      000368 2A                    6987 	.db #0x2a	; 42
      000369 14                    6988 	.db #0x14	; 20
      00036A 22                    6989 	.db #0x22	; 34
      00036B 22                    6990 	.db #0x22	; 34
      00036C 14                    6991 	.db #0x14	; 20
      00036D 2A                    6992 	.db #0x2a	; 42
      00036E 14                    6993 	.db #0x14	; 20
      00036F 08                    6994 	.db #0x08	; 8
      000370 AA                    6995 	.db #0xaa	; 170
      000371 00                    6996 	.db #0x00	; 0
      000372 55                    6997 	.db #0x55	; 85	'U'
      000373 00                    6998 	.db #0x00	; 0
      000374 AA                    6999 	.db #0xaa	; 170
      000375 AA                    7000 	.db #0xaa	; 170
      000376 55                    7001 	.db #0x55	; 85	'U'
      000377 AA                    7002 	.db #0xaa	; 170
      000378 55                    7003 	.db #0x55	; 85	'U'
      000379 AA                    7004 	.db #0xaa	; 170
      00037A 00                    7005 	.db #0x00	; 0
      00037B 00                    7006 	.db #0x00	; 0
      00037C 00                    7007 	.db #0x00	; 0
      00037D FF                    7008 	.db #0xff	; 255
      00037E 00                    7009 	.db #0x00	; 0
      00037F 10                    7010 	.db #0x10	; 16
      000380 10                    7011 	.db #0x10	; 16
      000381 10                    7012 	.db #0x10	; 16
      000382 FF                    7013 	.db #0xff	; 255
      000383 00                    7014 	.db #0x00	; 0
      000384 14                    7015 	.db #0x14	; 20
      000385 14                    7016 	.db #0x14	; 20
      000386 14                    7017 	.db #0x14	; 20
      000387 FF                    7018 	.db #0xff	; 255
      000388 00                    7019 	.db #0x00	; 0
      000389 10                    7020 	.db #0x10	; 16
      00038A 10                    7021 	.db #0x10	; 16
      00038B FF                    7022 	.db #0xff	; 255
      00038C 00                    7023 	.db #0x00	; 0
      00038D FF                    7024 	.db #0xff	; 255
      00038E 10                    7025 	.db #0x10	; 16
      00038F 10                    7026 	.db #0x10	; 16
      000390 F0                    7027 	.db #0xf0	; 240
      000391 10                    7028 	.db #0x10	; 16
      000392 F0                    7029 	.db #0xf0	; 240
      000393 14                    7030 	.db #0x14	; 20
      000394 14                    7031 	.db #0x14	; 20
      000395 14                    7032 	.db #0x14	; 20
      000396 FC                    7033 	.db #0xfc	; 252
      000397 00                    7034 	.db #0x00	; 0
      000398 14                    7035 	.db #0x14	; 20
      000399 14                    7036 	.db #0x14	; 20
      00039A F7                    7037 	.db #0xf7	; 247
      00039B 00                    7038 	.db #0x00	; 0
      00039C FF                    7039 	.db #0xff	; 255
      00039D 00                    7040 	.db #0x00	; 0
      00039E 00                    7041 	.db #0x00	; 0
      00039F FF                    7042 	.db #0xff	; 255
      0003A0 00                    7043 	.db #0x00	; 0
      0003A1 FF                    7044 	.db #0xff	; 255
      0003A2 14                    7045 	.db #0x14	; 20
      0003A3 14                    7046 	.db #0x14	; 20
      0003A4 F4                    7047 	.db #0xf4	; 244
      0003A5 04                    7048 	.db #0x04	; 4
      0003A6 FC                    7049 	.db #0xfc	; 252
      0003A7 14                    7050 	.db #0x14	; 20
      0003A8 14                    7051 	.db #0x14	; 20
      0003A9 17                    7052 	.db #0x17	; 23
      0003AA 10                    7053 	.db #0x10	; 16
      0003AB 1F                    7054 	.db #0x1f	; 31
      0003AC 10                    7055 	.db #0x10	; 16
      0003AD 10                    7056 	.db #0x10	; 16
      0003AE 1F                    7057 	.db #0x1f	; 31
      0003AF 10                    7058 	.db #0x10	; 16
      0003B0 1F                    7059 	.db #0x1f	; 31
      0003B1 14                    7060 	.db #0x14	; 20
      0003B2 14                    7061 	.db #0x14	; 20
      0003B3 14                    7062 	.db #0x14	; 20
      0003B4 1F                    7063 	.db #0x1f	; 31
      0003B5 00                    7064 	.db #0x00	; 0
      0003B6 10                    7065 	.db #0x10	; 16
      0003B7 10                    7066 	.db #0x10	; 16
      0003B8 10                    7067 	.db #0x10	; 16
      0003B9 F0                    7068 	.db #0xf0	; 240
      0003BA 00                    7069 	.db #0x00	; 0
      0003BB 00                    7070 	.db #0x00	; 0
      0003BC 00                    7071 	.db #0x00	; 0
      0003BD 00                    7072 	.db #0x00	; 0
      0003BE 1F                    7073 	.db #0x1f	; 31
      0003BF 10                    7074 	.db #0x10	; 16
      0003C0 10                    7075 	.db #0x10	; 16
      0003C1 10                    7076 	.db #0x10	; 16
      0003C2 10                    7077 	.db #0x10	; 16
      0003C3 1F                    7078 	.db #0x1f	; 31
      0003C4 10                    7079 	.db #0x10	; 16
      0003C5 10                    7080 	.db #0x10	; 16
      0003C6 10                    7081 	.db #0x10	; 16
      0003C7 10                    7082 	.db #0x10	; 16
      0003C8 F0                    7083 	.db #0xf0	; 240
      0003C9 10                    7084 	.db #0x10	; 16
      0003CA 00                    7085 	.db #0x00	; 0
      0003CB 00                    7086 	.db #0x00	; 0
      0003CC 00                    7087 	.db #0x00	; 0
      0003CD FF                    7088 	.db #0xff	; 255
      0003CE 10                    7089 	.db #0x10	; 16
      0003CF 10                    7090 	.db #0x10	; 16
      0003D0 10                    7091 	.db #0x10	; 16
      0003D1 10                    7092 	.db #0x10	; 16
      0003D2 10                    7093 	.db #0x10	; 16
      0003D3 10                    7094 	.db #0x10	; 16
      0003D4 10                    7095 	.db #0x10	; 16
      0003D5 10                    7096 	.db #0x10	; 16
      0003D6 10                    7097 	.db #0x10	; 16
      0003D7 FF                    7098 	.db #0xff	; 255
      0003D8 10                    7099 	.db #0x10	; 16
      0003D9 00                    7100 	.db #0x00	; 0
      0003DA 00                    7101 	.db #0x00	; 0
      0003DB 00                    7102 	.db #0x00	; 0
      0003DC FF                    7103 	.db #0xff	; 255
      0003DD 14                    7104 	.db #0x14	; 20
      0003DE 00                    7105 	.db #0x00	; 0
      0003DF 00                    7106 	.db #0x00	; 0
      0003E0 FF                    7107 	.db #0xff	; 255
      0003E1 00                    7108 	.db #0x00	; 0
      0003E2 FF                    7109 	.db #0xff	; 255
      0003E3 00                    7110 	.db #0x00	; 0
      0003E4 00                    7111 	.db #0x00	; 0
      0003E5 1F                    7112 	.db #0x1f	; 31
      0003E6 10                    7113 	.db #0x10	; 16
      0003E7 17                    7114 	.db #0x17	; 23
      0003E8 00                    7115 	.db #0x00	; 0
      0003E9 00                    7116 	.db #0x00	; 0
      0003EA FC                    7117 	.db #0xfc	; 252
      0003EB 04                    7118 	.db #0x04	; 4
      0003EC F4                    7119 	.db #0xf4	; 244
      0003ED 14                    7120 	.db #0x14	; 20
      0003EE 14                    7121 	.db #0x14	; 20
      0003EF 17                    7122 	.db #0x17	; 23
      0003F0 10                    7123 	.db #0x10	; 16
      0003F1 17                    7124 	.db #0x17	; 23
      0003F2 14                    7125 	.db #0x14	; 20
      0003F3 14                    7126 	.db #0x14	; 20
      0003F4 F4                    7127 	.db #0xf4	; 244
      0003F5 04                    7128 	.db #0x04	; 4
      0003F6 F4                    7129 	.db #0xf4	; 244
      0003F7 00                    7130 	.db #0x00	; 0
      0003F8 00                    7131 	.db #0x00	; 0
      0003F9 FF                    7132 	.db #0xff	; 255
      0003FA 00                    7133 	.db #0x00	; 0
      0003FB F7                    7134 	.db #0xf7	; 247
      0003FC 14                    7135 	.db #0x14	; 20
      0003FD 14                    7136 	.db #0x14	; 20
      0003FE 14                    7137 	.db #0x14	; 20
      0003FF 14                    7138 	.db #0x14	; 20
      000400 14                    7139 	.db #0x14	; 20
      000401 14                    7140 	.db #0x14	; 20
      000402 14                    7141 	.db #0x14	; 20
      000403 F7                    7142 	.db #0xf7	; 247
      000404 00                    7143 	.db #0x00	; 0
      000405 F7                    7144 	.db #0xf7	; 247
      000406 14                    7145 	.db #0x14	; 20
      000407 14                    7146 	.db #0x14	; 20
      000408 14                    7147 	.db #0x14	; 20
      000409 17                    7148 	.db #0x17	; 23
      00040A 14                    7149 	.db #0x14	; 20
      00040B 10                    7150 	.db #0x10	; 16
      00040C 10                    7151 	.db #0x10	; 16
      00040D 1F                    7152 	.db #0x1f	; 31
      00040E 10                    7153 	.db #0x10	; 16
      00040F 1F                    7154 	.db #0x1f	; 31
      000410 14                    7155 	.db #0x14	; 20
      000411 14                    7156 	.db #0x14	; 20
      000412 14                    7157 	.db #0x14	; 20
      000413 F4                    7158 	.db #0xf4	; 244
      000414 14                    7159 	.db #0x14	; 20
      000415 10                    7160 	.db #0x10	; 16
      000416 10                    7161 	.db #0x10	; 16
      000417 F0                    7162 	.db #0xf0	; 240
      000418 10                    7163 	.db #0x10	; 16
      000419 F0                    7164 	.db #0xf0	; 240
      00041A 00                    7165 	.db #0x00	; 0
      00041B 00                    7166 	.db #0x00	; 0
      00041C 1F                    7167 	.db #0x1f	; 31
      00041D 10                    7168 	.db #0x10	; 16
      00041E 1F                    7169 	.db #0x1f	; 31
      00041F 00                    7170 	.db #0x00	; 0
      000420 00                    7171 	.db #0x00	; 0
      000421 00                    7172 	.db #0x00	; 0
      000422 1F                    7173 	.db #0x1f	; 31
      000423 14                    7174 	.db #0x14	; 20
      000424 00                    7175 	.db #0x00	; 0
      000425 00                    7176 	.db #0x00	; 0
      000426 00                    7177 	.db #0x00	; 0
      000427 FC                    7178 	.db #0xfc	; 252
      000428 14                    7179 	.db #0x14	; 20
      000429 00                    7180 	.db #0x00	; 0
      00042A 00                    7181 	.db #0x00	; 0
      00042B F0                    7182 	.db #0xf0	; 240
      00042C 10                    7183 	.db #0x10	; 16
      00042D F0                    7184 	.db #0xf0	; 240
      00042E 10                    7185 	.db #0x10	; 16
      00042F 10                    7186 	.db #0x10	; 16
      000430 FF                    7187 	.db #0xff	; 255
      000431 10                    7188 	.db #0x10	; 16
      000432 FF                    7189 	.db #0xff	; 255
      000433 14                    7190 	.db #0x14	; 20
      000434 14                    7191 	.db #0x14	; 20
      000435 14                    7192 	.db #0x14	; 20
      000436 FF                    7193 	.db #0xff	; 255
      000437 14                    7194 	.db #0x14	; 20
      000438 10                    7195 	.db #0x10	; 16
      000439 10                    7196 	.db #0x10	; 16
      00043A 10                    7197 	.db #0x10	; 16
      00043B 1F                    7198 	.db #0x1f	; 31
      00043C 00                    7199 	.db #0x00	; 0
      00043D 00                    7200 	.db #0x00	; 0
      00043E 00                    7201 	.db #0x00	; 0
      00043F 00                    7202 	.db #0x00	; 0
      000440 F0                    7203 	.db #0xf0	; 240
      000441 10                    7204 	.db #0x10	; 16
      000442 FF                    7205 	.db #0xff	; 255
      000443 FF                    7206 	.db #0xff	; 255
      000444 FF                    7207 	.db #0xff	; 255
      000445 FF                    7208 	.db #0xff	; 255
      000446 FF                    7209 	.db #0xff	; 255
      000447 F0                    7210 	.db #0xf0	; 240
      000448 F0                    7211 	.db #0xf0	; 240
      000449 F0                    7212 	.db #0xf0	; 240
      00044A F0                    7213 	.db #0xf0	; 240
      00044B F0                    7214 	.db #0xf0	; 240
      00044C FF                    7215 	.db #0xff	; 255
      00044D FF                    7216 	.db #0xff	; 255
      00044E FF                    7217 	.db #0xff	; 255
      00044F 00                    7218 	.db #0x00	; 0
      000450 00                    7219 	.db #0x00	; 0
      000451 00                    7220 	.db #0x00	; 0
      000452 00                    7221 	.db #0x00	; 0
      000453 00                    7222 	.db #0x00	; 0
      000454 FF                    7223 	.db #0xff	; 255
      000455 FF                    7224 	.db #0xff	; 255
      000456 0F                    7225 	.db #0x0f	; 15
      000457 0F                    7226 	.db #0x0f	; 15
      000458 0F                    7227 	.db #0x0f	; 15
      000459 0F                    7228 	.db #0x0f	; 15
      00045A 0F                    7229 	.db #0x0f	; 15
      00045B 38                    7230 	.db #0x38	; 56	'8'
      00045C 44                    7231 	.db #0x44	; 68	'D'
      00045D 44                    7232 	.db #0x44	; 68	'D'
      00045E 38                    7233 	.db #0x38	; 56	'8'
      00045F 44                    7234 	.db #0x44	; 68	'D'
      000460 FC                    7235 	.db #0xfc	; 252
      000461 4A                    7236 	.db #0x4a	; 74	'J'
      000462 4A                    7237 	.db #0x4a	; 74	'J'
      000463 4A                    7238 	.db #0x4a	; 74	'J'
      000464 34                    7239 	.db #0x34	; 52	'4'
      000465 7E                    7240 	.db #0x7e	; 126
      000466 02                    7241 	.db #0x02	; 2
      000467 02                    7242 	.db #0x02	; 2
      000468 06                    7243 	.db #0x06	; 6
      000469 06                    7244 	.db #0x06	; 6
      00046A 02                    7245 	.db #0x02	; 2
      00046B 7E                    7246 	.db #0x7e	; 126
      00046C 02                    7247 	.db #0x02	; 2
      00046D 7E                    7248 	.db #0x7e	; 126
      00046E 02                    7249 	.db #0x02	; 2
      00046F 63                    7250 	.db #0x63	; 99	'c'
      000470 55                    7251 	.db #0x55	; 85	'U'
      000471 49                    7252 	.db #0x49	; 73	'I'
      000472 41                    7253 	.db #0x41	; 65	'A'
      000473 63                    7254 	.db #0x63	; 99	'c'
      000474 38                    7255 	.db #0x38	; 56	'8'
      000475 44                    7256 	.db #0x44	; 68	'D'
      000476 44                    7257 	.db #0x44	; 68	'D'
      000477 3C                    7258 	.db #0x3c	; 60
      000478 04                    7259 	.db #0x04	; 4
      000479 40                    7260 	.db #0x40	; 64
      00047A 7E                    7261 	.db #0x7e	; 126
      00047B 20                    7262 	.db #0x20	; 32
      00047C 1E                    7263 	.db #0x1e	; 30
      00047D 20                    7264 	.db #0x20	; 32
      00047E 06                    7265 	.db #0x06	; 6
      00047F 02                    7266 	.db #0x02	; 2
      000480 7E                    7267 	.db #0x7e	; 126
      000481 02                    7268 	.db #0x02	; 2
      000482 02                    7269 	.db #0x02	; 2
      000483 99                    7270 	.db #0x99	; 153
      000484 A5                    7271 	.db #0xa5	; 165
      000485 E7                    7272 	.db #0xe7	; 231
      000486 A5                    7273 	.db #0xa5	; 165
      000487 99                    7274 	.db #0x99	; 153
      000488 1C                    7275 	.db #0x1c	; 28
      000489 2A                    7276 	.db #0x2a	; 42
      00048A 49                    7277 	.db #0x49	; 73	'I'
      00048B 2A                    7278 	.db #0x2a	; 42
      00048C 1C                    7279 	.db #0x1c	; 28
      00048D 4C                    7280 	.db #0x4c	; 76	'L'
      00048E 72                    7281 	.db #0x72	; 114	'r'
      00048F 01                    7282 	.db #0x01	; 1
      000490 72                    7283 	.db #0x72	; 114	'r'
      000491 4C                    7284 	.db #0x4c	; 76	'L'
      000492 30                    7285 	.db #0x30	; 48	'0'
      000493 4A                    7286 	.db #0x4a	; 74	'J'
      000494 4D                    7287 	.db #0x4d	; 77	'M'
      000495 4D                    7288 	.db #0x4d	; 77	'M'
      000496 30                    7289 	.db #0x30	; 48	'0'
      000497 30                    7290 	.db #0x30	; 48	'0'
      000498 48                    7291 	.db #0x48	; 72	'H'
      000499 78                    7292 	.db #0x78	; 120	'x'
      00049A 48                    7293 	.db #0x48	; 72	'H'
      00049B 30                    7294 	.db #0x30	; 48	'0'
      00049C BC                    7295 	.db #0xbc	; 188
      00049D 62                    7296 	.db #0x62	; 98	'b'
      00049E 5A                    7297 	.db #0x5a	; 90	'Z'
      00049F 46                    7298 	.db #0x46	; 70	'F'
      0004A0 3D                    7299 	.db #0x3d	; 61
      0004A1 3E                    7300 	.db #0x3e	; 62
      0004A2 49                    7301 	.db #0x49	; 73	'I'
      0004A3 49                    7302 	.db #0x49	; 73	'I'
      0004A4 49                    7303 	.db #0x49	; 73	'I'
      0004A5 00                    7304 	.db #0x00	; 0
      0004A6 7E                    7305 	.db #0x7e	; 126
      0004A7 01                    7306 	.db #0x01	; 1
      0004A8 01                    7307 	.db #0x01	; 1
      0004A9 01                    7308 	.db #0x01	; 1
      0004AA 7E                    7309 	.db #0x7e	; 126
      0004AB 2A                    7310 	.db #0x2a	; 42
      0004AC 2A                    7311 	.db #0x2a	; 42
      0004AD 2A                    7312 	.db #0x2a	; 42
      0004AE 2A                    7313 	.db #0x2a	; 42
      0004AF 2A                    7314 	.db #0x2a	; 42
      0004B0 44                    7315 	.db #0x44	; 68	'D'
      0004B1 44                    7316 	.db #0x44	; 68	'D'
      0004B2 5F                    7317 	.db #0x5f	; 95
      0004B3 44                    7318 	.db #0x44	; 68	'D'
      0004B4 44                    7319 	.db #0x44	; 68	'D'
      0004B5 40                    7320 	.db #0x40	; 64
      0004B6 51                    7321 	.db #0x51	; 81	'Q'
      0004B7 4A                    7322 	.db #0x4a	; 74	'J'
      0004B8 44                    7323 	.db #0x44	; 68	'D'
      0004B9 40                    7324 	.db #0x40	; 64
      0004BA 40                    7325 	.db #0x40	; 64
      0004BB 44                    7326 	.db #0x44	; 68	'D'
      0004BC 4A                    7327 	.db #0x4a	; 74	'J'
      0004BD 51                    7328 	.db #0x51	; 81	'Q'
      0004BE 40                    7329 	.db #0x40	; 64
      0004BF 00                    7330 	.db #0x00	; 0
      0004C0 00                    7331 	.db #0x00	; 0
      0004C1 FF                    7332 	.db #0xff	; 255
      0004C2 01                    7333 	.db #0x01	; 1
      0004C3 03                    7334 	.db #0x03	; 3
      0004C4 E0                    7335 	.db #0xe0	; 224
      0004C5 80                    7336 	.db #0x80	; 128
      0004C6 FF                    7337 	.db #0xff	; 255
      0004C7 00                    7338 	.db #0x00	; 0
      0004C8 00                    7339 	.db #0x00	; 0
      0004C9 08                    7340 	.db #0x08	; 8
      0004CA 08                    7341 	.db #0x08	; 8
      0004CB 6B                    7342 	.db #0x6b	; 107	'k'
      0004CC 6B                    7343 	.db #0x6b	; 107	'k'
      0004CD 08                    7344 	.db #0x08	; 8
      0004CE 36                    7345 	.db #0x36	; 54	'6'
      0004CF 12                    7346 	.db #0x12	; 18
      0004D0 36                    7347 	.db #0x36	; 54	'6'
      0004D1 24                    7348 	.db #0x24	; 36
      0004D2 36                    7349 	.db #0x36	; 54	'6'
      0004D3 06                    7350 	.db #0x06	; 6
      0004D4 0F                    7351 	.db #0x0f	; 15
      0004D5 09                    7352 	.db #0x09	; 9
      0004D6 0F                    7353 	.db #0x0f	; 15
      0004D7 06                    7354 	.db #0x06	; 6
      0004D8 00                    7355 	.db #0x00	; 0
      0004D9 00                    7356 	.db #0x00	; 0
      0004DA 18                    7357 	.db #0x18	; 24
      0004DB 18                    7358 	.db #0x18	; 24
      0004DC 00                    7359 	.db #0x00	; 0
      0004DD 00                    7360 	.db #0x00	; 0
      0004DE 00                    7361 	.db #0x00	; 0
      0004DF 10                    7362 	.db #0x10	; 16
      0004E0 10                    7363 	.db #0x10	; 16
      0004E1 00                    7364 	.db #0x00	; 0
      0004E2 30                    7365 	.db #0x30	; 48	'0'
      0004E3 40                    7366 	.db #0x40	; 64
      0004E4 FF                    7367 	.db #0xff	; 255
      0004E5 01                    7368 	.db #0x01	; 1
      0004E6 01                    7369 	.db #0x01	; 1
      0004E7 00                    7370 	.db #0x00	; 0
      0004E8 1F                    7371 	.db #0x1f	; 31
      0004E9 01                    7372 	.db #0x01	; 1
      0004EA 01                    7373 	.db #0x01	; 1
      0004EB 1E                    7374 	.db #0x1e	; 30
      0004EC 00                    7375 	.db #0x00	; 0
      0004ED 19                    7376 	.db #0x19	; 25
      0004EE 1D                    7377 	.db #0x1d	; 29
      0004EF 17                    7378 	.db #0x17	; 23
      0004F0 12                    7379 	.db #0x12	; 18
      0004F1 00                    7380 	.db #0x00	; 0
      0004F2 3C                    7381 	.db #0x3c	; 60
      0004F3 3C                    7382 	.db #0x3c	; 60
      0004F4 3C                    7383 	.db #0x3c	; 60
      0004F5 3C                    7384 	.db #0x3c	; 60
      0004F6 00                    7385 	.db #0x00	; 0
      0004F7 00                    7386 	.db #0x00	; 0
      0004F8 00                    7387 	.db #0x00	; 0
      0004F9 00                    7388 	.db #0x00	; 0
      0004FA 00                    7389 	.db #0x00	; 0
      0004FB                       7390 _keypad:
      0004FB 31                    7391 	.db #0x31	; 49	'1'
      0004FC 34                    7392 	.db #0x34	; 52	'4'
      0004FD 37                    7393 	.db #0x37	; 55	'7'
      0004FE 46                    7394 	.db #0x46	; 70	'F'
      0004FF 32                    7395 	.db #0x32	; 50	'2'
      000500 35                    7396 	.db #0x35	; 53	'5'
      000501 38                    7397 	.db #0x38	; 56	'8'
      000502 30                    7398 	.db #0x30	; 48	'0'
      000503 33                    7399 	.db #0x33	; 51	'3'
      000504 36                    7400 	.db #0x36	; 54	'6'
      000505 39                    7401 	.db #0x39	; 57	'9'
      000506 45                    7402 	.db #0x45	; 69	'E'
      000507 41                    7403 	.db #0x41	; 65	'A'
      000508 42                    7404 	.db #0x42	; 66	'B'
      000509 43                    7405 	.db #0x43	; 67	'C'
      00050A 44                    7406 	.db #0x44	; 68	'D'
                                   7407 	.area CONST   (CODE)
      00050B                       7408 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  7409 	.ascii "Welcome"
      000512 0A                    7410 	.db 0x0a
      000513 00                    7411 	.db 0x00
                                   7412 	.area CSEG    (CODE)
                                   7413 	.area CONST   (CODE)
      000514                       7414 ___str_1:
      000514 45 43 45 4E 2D 34 33  7415 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    7416 	.db 0x0a
      00051E 00                    7417 	.db 0x00
                                   7418 	.area CSEG    (CODE)
                                   7419 	.area CONST   (CODE)
      00051F                       7420 ___str_2:
      00051F 52 6F 74 61 74 69 6F  7421 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    7422 	.db 0x00
                                   7423 	.area CSEG    (CODE)
                                   7424 	.area CONST   (CODE)
      00052A                       7425 ___str_3:
      00052A 52 6F 74 61 74 69 6F  7426 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    7427 	.db 0x00
                                   7428 	.area CSEG    (CODE)
                                   7429 	.area CONST   (CODE)
      000535                       7430 ___str_4:
      000535 52 6F 74 61 74 69 6F  7431 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    7432 	.db 0x00
                                   7433 	.area CSEG    (CODE)
                                   7434 	.area CONST   (CODE)
      000540                       7435 ___str_5:
      000540 52 6F 74 61 74 69 6F  7436 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    7437 	.db 0x00
                                   7438 	.area CSEG    (CODE)
                                   7439 	.area CONST   (CODE)
      00054B                       7440 ___str_6:
      00054B 45 6E 74 65 72 20 62  7441 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00055E 0A                    7442 	.db 0x0a
      00055F 00                    7443 	.db 0x00
                                   7444 	.area CSEG    (CODE)
                                   7445 	.area CONST   (CODE)
      000560                       7446 ___str_7:
      000560 49 6E 20 70 72 6F 67  7447 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00056E 0A                    7448 	.db 0x0a
      00056F 00                    7449 	.db 0x00
                                   7450 	.area CSEG    (CODE)
                                   7451 	.area CONST   (CODE)
      000570                       7452 ___str_8:
      000570 4D 65 6D 6F 72 79 20  7453 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000583 0A                    7454 	.db 0x0a
      000584 00                    7455 	.db 0x00
                                   7456 	.area CSEG    (CODE)
                                   7457 	.area CONST   (CODE)
      000585                       7458 ___str_9:
      000585 53 75 63 63 65 73 73  7459 	.ascii "Success!"
             21
      00058D 0A                    7460 	.db 0x0a
      00058E 00                    7461 	.db 0x00
                                   7462 	.area CSEG    (CODE)
                                   7463 	.area CONST   (CODE)
      00058F                       7464 ___str_10:
      00058F 50 72 65 73 73 20 31  7465 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00059F 0A                    7466 	.db 0x0a
      0005A0 00                    7467 	.db 0x00
                                   7468 	.area CSEG    (CODE)
                                   7469 	.area CONST   (CODE)
      0005A1                       7470 ___str_11:
      0005A1 45 6E 74 65 72 20 62  7471 	.ascii "Enter byte"
             79 74 65
      0005AB 0A                    7472 	.db 0x0a
      0005AC 00                    7473 	.db 0x00
                                   7474 	.area CSEG    (CODE)
                                   7475 	.area CONST   (CODE)
      0005AD                       7476 ___str_12:
      0005AD 45 6E 74 65 72 20 61  7477 	.ascii "Enter address"
             64 64 72 65 73 73
      0005BA 0A                    7478 	.db 0x0a
      0005BB 00                    7479 	.db 0x00
                                   7480 	.area CSEG    (CODE)
                                   7481 	.area CONST   (CODE)
      0005BC                       7482 ___str_13:
      0005BC 49 6E 20 70 72 6F 67  7483 	.ascii "In progress"
             72 65 73 73
      0005C7 0A                    7484 	.db 0x0a
      0005C8 00                    7485 	.db 0x00
                                   7486 	.area CSEG    (CODE)
                                   7487 	.area CONST   (CODE)
      0005C9                       7488 ___str_14:
      0005C9 20 66 65 74 63 68 65  7489 	.ascii " fetched!"
             64 21
      0005D2 0A                    7490 	.db 0x0a
      0005D3 53 75 63 63 65 73 73  7491 	.ascii "Success!"
             21
      0005DB 0A                    7492 	.db 0x0a
      0005DC 00                    7493 	.db 0x00
                                   7494 	.area CSEG    (CODE)
                                   7495 	.area CONST   (CODE)
      0005DD                       7496 ___str_15:
      0005DD 43 68 65 63 6B 20 66  7497 	.ascii "Check failed"
             61 69 6C 65 64
      0005E9 0A                    7498 	.db 0x0a
      0005EA 00                    7499 	.db 0x00
                                   7500 	.area CSEG    (CODE)
                                   7501 	.area CONST   (CODE)
      0005EB                       7502 ___str_16:
      0005EB 45 6E 74 65 72 20 73  7503 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      0005FF 0A                    7504 	.db 0x0a
      000600 00                    7505 	.db 0x00
                                   7506 	.area CSEG    (CODE)
                                   7507 	.area CONST   (CODE)
      000601                       7508 ___str_17:
      000601 45 6E 74 65 72 20 74  7509 	.ascii "Enter target address:"
             61 72 67 65 74 20 61
             64 64 72 65 73 73 3A
      000616 0A                    7510 	.db 0x0a
      000617 00                    7511 	.db 0x00
                                   7512 	.area CSEG    (CODE)
                                   7513 	.area CONST   (CODE)
      000618                       7514 ___str_18:
      000618 45 6E 74 65 72 20 73  7515 	.ascii "Enter size:"
             69 7A 65 3A
      000623 0A                    7516 	.db 0x0a
      000624 00                    7517 	.db 0x00
                                   7518 	.area CSEG    (CODE)
                                   7519 	.area CONST   (CODE)
      000625                       7520 ___str_19:
      000625 4D 6F 76 65 20 69 6E  7521 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      000638 0A                    7522 	.db 0x0a
      000639 00                    7523 	.db 0x00
                                   7524 	.area CSEG    (CODE)
                                   7525 	.area CONST   (CODE)
      00063A                       7526 ___str_20:
      00063A 44 6F 6E 65 21        7527 	.ascii "Done!"
      00063F 0A                    7528 	.db 0x0a
      000640 00                    7529 	.db 0x00
                                   7530 	.area CSEG    (CODE)
                                   7531 	.area CONST   (CODE)
      000641                       7532 ___str_21:
      000641 3A 20                 7533 	.ascii ": "
      000643 00                    7534 	.db 0x00
                                   7535 	.area CSEG    (CODE)
                                   7536 	.area CONST   (CODE)
      000644                       7537 ___str_22:
      000644 45 6E 74 65 72 20 6E  7538 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      000653 0A                    7539 	.db 0x0a
      000654 00                    7540 	.db 0x00
                                   7541 	.area CSEG    (CODE)
                                   7542 	.area CONST   (CODE)
      000655                       7543 ___str_23:
      000655 45 6E 74 65 72 20 61  7544 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      000663 0A                    7545 	.db 0x0a
      000664 00                    7546 	.db 0x00
                                   7547 	.area CSEG    (CODE)
                                   7548 	.area CONST   (CODE)
      000665                       7549 ___str_24:
      000665 50 72 65 73 73 20 32  7550 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      00067A 0A                    7551 	.db 0x0a
      00067B 00                    7552 	.db 0x00
                                   7553 	.area CSEG    (CODE)
                                   7554 	.area CONST   (CODE)
      00067C                       7555 ___str_25:
      00067C 50 72 65 73 73 20 33  7556 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      000698 0A                    7557 	.db 0x0a
      000699 00                    7558 	.db 0x00
                                   7559 	.area CSEG    (CODE)
                                   7560 	.area CONST   (CODE)
      00069A                       7561 ___str_26:
      00069A 45 6E 74 65 72 20 62  7562 	.ascii "Enter byte to search:"
             79 74 65 20 74 6F 20
             73 65 61 72 63 68 3A
      0006AF 0A                    7563 	.db 0x0a
      0006B0 00                    7564 	.db 0x00
                                   7565 	.area CSEG    (CODE)
                                   7566 	.area CONST   (CODE)
      0006B1                       7567 ___str_27:
      0006B1 45 6E 74 65 72 20 62  7568 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0006C2 0A                    7569 	.db 0x0a
      0006C3 00                    7570 	.db 0x00
                                   7571 	.area CSEG    (CODE)
                                   7572 	.area CONST   (CODE)
      0006C4                       7573 ___str_28:
      0006C4 4E 6F 6E 65 20 66 6F  7574 	.ascii "None found!"
             75 6E 64 21
      0006CF 0A                    7575 	.db 0x0a
      0006D0 00                    7576 	.db 0x00
                                   7577 	.area CSEG    (CODE)
                                   7578 	.area CONST   (CODE)
      0006D1                       7579 ___str_29:
      0006D1 50 72 65 73 73 20 41  7580 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0006E5 0A                    7581 	.db 0x0a
      0006E6 00                    7582 	.db 0x00
                                   7583 	.area CSEG    (CODE)
                                   7584 	.area CONST   (CODE)
      0006E7                       7585 ___str_30:
      0006E7 50 72 65 73 73 20 42  7586 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0006F7 0A                    7587 	.db 0x0a
      0006F8 00                    7588 	.db 0x00
                                   7589 	.area CSEG    (CODE)
                                   7590 	.area CONST   (CODE)
      0006F9                       7591 ___str_31:
      0006F9 4E 6F 20 6D 61 74 63  7592 	.ascii "No matches found"
             68 65 73 20 66 6F 75
             6E 64
      000709 0A                    7593 	.db 0x0a
      00070A 00                    7594 	.db 0x00
                                   7595 	.area CSEG    (CODE)
                                   7596 	.area CONST   (CODE)
      00070B                       7597 ___str_32:
      00070B 20 6D 61 74 63 68 65  7598 	.ascii " matches found"
             73 20 66 6F 75 6E 64
      000719 0A                    7599 	.db 0x0a
      00071A 00                    7600 	.db 0x00
                                   7601 	.area CSEG    (CODE)
                                   7602 	.area CONST   (CODE)
      00071B                       7603 ___str_33:
      00071B 45 6E 74 65 72 20 62  7604 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      00072F 0A                    7605 	.db 0x0a
      000730 00                    7606 	.db 0x00
                                   7607 	.area CSEG    (CODE)
                                   7608 	.area CONST   (CODE)
      000731                       7609 ___str_34:
      000731 54 65 6D 70 65 72 61  7610 	.ascii "Temperature: "
             74 75 72 65 3A 20
      00073E 00                    7611 	.db 0x00
                                   7612 	.area CSEG    (CODE)
                                   7613 	.area CONST   (CODE)
      00073F                       7614 ___str_35:
      00073F 50 72 65 73 73 20 6B  7615 	.ascii "Press key to refresh"
             65 79 20 74 6F 20 72
             65 66 72 65 73 68
      000753 0A                    7616 	.db 0x0a
      000754 00                    7617 	.db 0x00
                                   7618 	.area CSEG    (CODE)
                                   7619 	.area CONST   (CODE)
      000755                       7620 ___str_36:
      000755 4C 69 67 68 74 20 6C  7621 	.ascii "Light level: "
             65 76 65 6C 3A 20
      000762 00                    7622 	.db 0x00
                                   7623 	.area CSEG    (CODE)
                                   7624 	.area CONST   (CODE)
      000763                       7625 ___str_37:
      000763 42 72 61 6E 64 6F 6E  7626 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      000770 0A                    7627 	.db 0x0a
      000771 00                    7628 	.db 0x00
                                   7629 	.area CSEG    (CODE)
                                   7630 	.area CONST   (CODE)
      000772                       7631 ___str_38:
      000772 45 43 45 4E 20 34 33  7632 	.ascii "ECEN 4330"
             33 30
      00077B 0A                    7633 	.db 0x0a
      00077C 00                    7634 	.db 0x00
                                   7635 	.area CSEG    (CODE)
                                   7636 	.area CONST   (CODE)
      00077D                       7637 ___str_39:
      00077D 31 3A 20 42 61 73 69  7638 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      00078B 0A                    7639 	.db 0x0a
      00078C 00                    7640 	.db 0x00
                                   7641 	.area CSEG    (CODE)
                                   7642 	.area CONST   (CODE)
      00078D                       7643 ___str_40:
      00078D 32 3A 20 44 75 6D 70  7644 	.ascii "2: Dump"
      000794 0A                    7645 	.db 0x0a
      000795 00                    7646 	.db 0x00
                                   7647 	.area CSEG    (CODE)
                                   7648 	.area CONST   (CODE)
      000796                       7649 ___str_41:
      000796 33 3A 20 43 68 65 63  7650 	.ascii "3: Check"
             6B
      00079E 0A                    7651 	.db 0x0a
      00079F 00                    7652 	.db 0x00
                                   7653 	.area CSEG    (CODE)
                                   7654 	.area CONST   (CODE)
      0007A0                       7655 ___str_42:
      0007A0 41 3A 20 4D 6F 76 65  7656 	.ascii "A: Move"
      0007A7 0A                    7657 	.db 0x0a
      0007A8 00                    7658 	.db 0x00
                                   7659 	.area CSEG    (CODE)
                                   7660 	.area CONST   (CODE)
      0007A9                       7661 ___str_43:
      0007A9 34 3A 20 45 64 69 74  7662 	.ascii "4: Edit"
      0007B0 0A                    7663 	.db 0x0a
      0007B1 00                    7664 	.db 0x00
                                   7665 	.area CSEG    (CODE)
                                   7666 	.area CONST   (CODE)
      0007B2                       7667 ___str_44:
      0007B2 35 3A 20 46 69 6E 64  7668 	.ascii "5: Find"
      0007B9 0A                    7669 	.db 0x0a
      0007BA 00                    7670 	.db 0x00
                                   7671 	.area CSEG    (CODE)
                                   7672 	.area CONST   (CODE)
      0007BB                       7673 ___str_45:
      0007BB 36 3A 20 43 6F 75 6E  7674 	.ascii "6: Count"
             74
      0007C3 0A                    7675 	.db 0x0a
      0007C4 00                    7676 	.db 0x00
                                   7677 	.area CSEG    (CODE)
                                   7678 	.area CONST   (CODE)
      0007C5                       7679 ___str_46:
      0007C5 42 3A 20 54 65 6D 70  7680 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      0007D3 0A                    7681 	.db 0x0a
      0007D4 00                    7682 	.db 0x00
                                   7683 	.area CSEG    (CODE)
                                   7684 	.area CONST   (CODE)
      0007D5                       7685 ___str_47:
      0007D5 37 3A 20 4C 69 67 68  7686 	.ascii "7: Light"
             74
      0007DD 0A                    7687 	.db 0x0a
      0007DE 00                    7688 	.db 0x00
                                   7689 	.area CSEG    (CODE)
                                   7690 	.area XINIT   (CODE)
                                   7691 	.area CABS    (ABS,CODE)
