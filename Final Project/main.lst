                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _editByte
                                     23 	.globl _basic
                                     24 	.globl _dumpPage
                                     25 	.globl _writeSomeLines
                                     26 	.globl _convertAsciiHex
                                     27 	.globl _write
                                     28 	.globl _drawChar
                                     29 	.globl _setRotation
                                     30 	.globl _iowrite8
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _F1
                                     38 	.globl _P
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _B
                                    107 	.globl _ACC
                                    108 	.globl _PSW
                                    109 	.globl _IP
                                    110 	.globl _P3
                                    111 	.globl _IE
                                    112 	.globl _P2
                                    113 	.globl _SBUF
                                    114 	.globl _SCON
                                    115 	.globl _P1
                                    116 	.globl _TH1
                                    117 	.globl _TH0
                                    118 	.globl _TL1
                                    119 	.globl _TL0
                                    120 	.globl _TMOD
                                    121 	.globl _TCON
                                    122 	.globl _PCON
                                    123 	.globl _DPH
                                    124 	.globl _DPL
                                    125 	.globl _SP
                                    126 	.globl _P0
                                    127 	.globl _dumpPage_PARM_3
                                    128 	.globl _dumpPage_PARM_2
                                    129 	.globl _drawChar_PARM_6
                                    130 	.globl _drawChar_PARM_5
                                    131 	.globl _drawChar_PARM_4
                                    132 	.globl _drawChar_PARM_3
                                    133 	.globl _drawChar_PARM_2
                                    134 	.globl _fillRect_PARM_5
                                    135 	.globl _fillRect_PARM_4
                                    136 	.globl _fillRect_PARM_3
                                    137 	.globl _fillRect_PARM_2
                                    138 	.globl _testCircles_PARM_2
                                    139 	.globl _drawCircle_PARM_4
                                    140 	.globl _drawCircle_PARM_3
                                    141 	.globl _drawCircle_PARM_2
                                    142 	.globl _drawPixel_PARM_3
                                    143 	.globl _drawPixel_PARM_2
                                    144 	.globl __height
                                    145 	.globl __width
                                    146 	.globl _textbgcolor
                                    147 	.globl _textcolor
                                    148 	.globl _rotation
                                    149 	.globl _textsize
                                    150 	.globl _cursor_y
                                    151 	.globl _cursor_x
                                    152 	.globl _read_ram_address
                                    153 	.globl _light_address
                                    154 	.globl _temp_address
                                    155 	.globl _seg7_address
                                    156 	.globl _lcd_address
                                    157 	.globl _rowloc
                                    158 	.globl _colloc
                                    159 	.globl _delay
                                    160 	.globl _writeRegister8
                                    161 	.globl _writeRegister16
                                    162 	.globl _setCursor
                                    163 	.globl _setTextColor
                                    164 	.globl _setTextSize
                                    165 	.globl _setAddress
                                    166 	.globl _TFT_LCD_INIT
                                    167 	.globl _drawPixel
                                    168 	.globl _drawCircle
                                    169 	.globl _testCircles
                                    170 	.globl _fillRect
                                    171 	.globl _fillScreen
                                    172 	.globl _LCD_string_write
                                    173 	.globl _testRAM
                                    174 	.globl _freeType
                                    175 	.globl _keyDetect
                                    176 	.globl _reverse
                                    177 	.globl _asciiToDec
                                    178 	.globl _asciiToHex
                                    179 	.globl _getAddress
                                    180 	.globl _getByte
                                    181 	.globl _dump
                                    182 	.globl _check
                                    183 	.globl _move
                                    184 	.globl _edit
                                    185 	.globl _count
                                    186 	.globl _readTemp
                                    187 	.globl _readLight
                                    188 	.globl _displayTemp
                                    189 	.globl _displayLight
                                    190 	.globl _temperature
                                    191 	.globl _light
                                    192 ;--------------------------------------------------------
                                    193 ; special function registers
                                    194 ;--------------------------------------------------------
                                    195 	.area RSEG    (ABS,DATA)
      000000                        196 	.org 0x0000
                           000080   197 _P0	=	0x0080
                           000081   198 _SP	=	0x0081
                           000082   199 _DPL	=	0x0082
                           000083   200 _DPH	=	0x0083
                           000087   201 _PCON	=	0x0087
                           000088   202 _TCON	=	0x0088
                           000089   203 _TMOD	=	0x0089
                           00008A   204 _TL0	=	0x008a
                           00008B   205 _TL1	=	0x008b
                           00008C   206 _TH0	=	0x008c
                           00008D   207 _TH1	=	0x008d
                           000090   208 _P1	=	0x0090
                           000098   209 _SCON	=	0x0098
                           000099   210 _SBUF	=	0x0099
                           0000A0   211 _P2	=	0x00a0
                           0000A8   212 _IE	=	0x00a8
                           0000B0   213 _P3	=	0x00b0
                           0000B8   214 _IP	=	0x00b8
                           0000D0   215 _PSW	=	0x00d0
                           0000E0   216 _ACC	=	0x00e0
                           0000F0   217 _B	=	0x00f0
                                    218 ;--------------------------------------------------------
                                    219 ; special function bits
                                    220 ;--------------------------------------------------------
                                    221 	.area RSEG    (ABS,DATA)
      000000                        222 	.org 0x0000
                           000080   223 _P0_0	=	0x0080
                           000081   224 _P0_1	=	0x0081
                           000082   225 _P0_2	=	0x0082
                           000083   226 _P0_3	=	0x0083
                           000084   227 _P0_4	=	0x0084
                           000085   228 _P0_5	=	0x0085
                           000086   229 _P0_6	=	0x0086
                           000087   230 _P0_7	=	0x0087
                           000088   231 _IT0	=	0x0088
                           000089   232 _IE0	=	0x0089
                           00008A   233 _IT1	=	0x008a
                           00008B   234 _IE1	=	0x008b
                           00008C   235 _TR0	=	0x008c
                           00008D   236 _TF0	=	0x008d
                           00008E   237 _TR1	=	0x008e
                           00008F   238 _TF1	=	0x008f
                           000090   239 _P1_0	=	0x0090
                           000091   240 _P1_1	=	0x0091
                           000092   241 _P1_2	=	0x0092
                           000093   242 _P1_3	=	0x0093
                           000094   243 _P1_4	=	0x0094
                           000095   244 _P1_5	=	0x0095
                           000096   245 _P1_6	=	0x0096
                           000097   246 _P1_7	=	0x0097
                           000098   247 _RI	=	0x0098
                           000099   248 _TI	=	0x0099
                           00009A   249 _RB8	=	0x009a
                           00009B   250 _TB8	=	0x009b
                           00009C   251 _REN	=	0x009c
                           00009D   252 _SM2	=	0x009d
                           00009E   253 _SM1	=	0x009e
                           00009F   254 _SM0	=	0x009f
                           0000A0   255 _P2_0	=	0x00a0
                           0000A1   256 _P2_1	=	0x00a1
                           0000A2   257 _P2_2	=	0x00a2
                           0000A3   258 _P2_3	=	0x00a3
                           0000A4   259 _P2_4	=	0x00a4
                           0000A5   260 _P2_5	=	0x00a5
                           0000A6   261 _P2_6	=	0x00a6
                           0000A7   262 _P2_7	=	0x00a7
                           0000A8   263 _EX0	=	0x00a8
                           0000A9   264 _ET0	=	0x00a9
                           0000AA   265 _EX1	=	0x00aa
                           0000AB   266 _ET1	=	0x00ab
                           0000AC   267 _ES	=	0x00ac
                           0000AF   268 _EA	=	0x00af
                           0000B0   269 _P3_0	=	0x00b0
                           0000B1   270 _P3_1	=	0x00b1
                           0000B2   271 _P3_2	=	0x00b2
                           0000B3   272 _P3_3	=	0x00b3
                           0000B4   273 _P3_4	=	0x00b4
                           0000B5   274 _P3_5	=	0x00b5
                           0000B6   275 _P3_6	=	0x00b6
                           0000B7   276 _P3_7	=	0x00b7
                           0000B0   277 _RXD	=	0x00b0
                           0000B1   278 _TXD	=	0x00b1
                           0000B2   279 _INT0	=	0x00b2
                           0000B3   280 _INT1	=	0x00b3
                           0000B4   281 _T0	=	0x00b4
                           0000B5   282 _T1	=	0x00b5
                           0000B6   283 _WR	=	0x00b6
                           0000B7   284 _RD	=	0x00b7
                           0000B8   285 _PX0	=	0x00b8
                           0000B9   286 _PT0	=	0x00b9
                           0000BA   287 _PX1	=	0x00ba
                           0000BB   288 _PT1	=	0x00bb
                           0000BC   289 _PS	=	0x00bc
                           0000D0   290 _P	=	0x00d0
                           0000D1   291 _F1	=	0x00d1
                           0000D2   292 _OV	=	0x00d2
                           0000D3   293 _RS0	=	0x00d3
                           0000D4   294 _RS1	=	0x00d4
                           0000D5   295 _F0	=	0x00d5
                           0000D6   296 _AC	=	0x00d6
                           0000D7   297 _CY	=	0x00d7
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable register banks
                                    300 ;--------------------------------------------------------
                                    301 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        302 	.ds 8
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
      000000                        307 _colloc::
      000000                        308 	.ds 1
      000001                        309 _rowloc::
      000001                        310 	.ds 1
      000002                        311 _lcd_address::
      000002                        312 	.ds 2
      000004                        313 _seg7_address::
      000004                        314 	.ds 2
      000006                        315 _temp_address::
      000006                        316 	.ds 2
      000008                        317 _light_address::
      000008                        318 	.ds 2
      00000A                        319 _read_ram_address::
      00000A                        320 	.ds 2
      00000C                        321 _cursor_x::
      00000C                        322 	.ds 2
      00000E                        323 _cursor_y::
      00000E                        324 	.ds 2
      000010                        325 _textsize::
      000010                        326 	.ds 1
      000011                        327 _rotation::
      000011                        328 	.ds 1
      000012                        329 _textcolor::
      000012                        330 	.ds 2
      000014                        331 _textbgcolor::
      000014                        332 	.ds 2
      000016                        333 __width::
      000016                        334 	.ds 2
      000018                        335 __height::
      000018                        336 	.ds 2
      00001A                        337 _drawPixel_PARM_2:
      00001A                        338 	.ds 2
      00001C                        339 _drawPixel_PARM_3:
      00001C                        340 	.ds 2
      00001E                        341 _drawCircle_PARM_2:
      00001E                        342 	.ds 2
      000020                        343 _drawCircle_PARM_3:
      000020                        344 	.ds 2
      000022                        345 _drawCircle_PARM_4:
      000022                        346 	.ds 2
      000024                        347 _drawCircle_x0_65536_103:
      000024                        348 	.ds 2
      000026                        349 _drawCircle_f_65536_104:
      000026                        350 	.ds 2
      000028                        351 _drawCircle_ddF_x_65536_104:
      000028                        352 	.ds 2
      00002A                        353 _drawCircle_x_65536_104:
      00002A                        354 	.ds 2
      00002C                        355 _drawCircle_sloc0_1_0:
      00002C                        356 	.ds 2
      00002E                        357 _drawCircle_sloc1_1_0:
      00002E                        358 	.ds 2
      000030                        359 _drawCircle_sloc2_1_0:
      000030                        360 	.ds 2
      000032                        361 _testCircles_PARM_2:
      000032                        362 	.ds 2
      000034                        363 _testCircles_w_65536_108:
      000034                        364 	.ds 2
      000036                        365 _testCircles_h_65536_108:
      000036                        366 	.ds 2
      000038                        367 _fillRect_PARM_2:
      000038                        368 	.ds 2
      00003A                        369 _fillRect_PARM_3:
      00003A                        370 	.ds 2
      00003C                        371 _fillRect_PARM_4:
      00003C                        372 	.ds 2
      00003E                        373 _fillRect_PARM_5:
      00003E                        374 	.ds 2
      000040                        375 _drawChar_PARM_2:
      000040                        376 	.ds 2
      000042                        377 _drawChar_PARM_3:
      000042                        378 	.ds 1
      000043                        379 _drawChar_PARM_4:
      000043                        380 	.ds 2
      000045                        381 _drawChar_PARM_5:
      000045                        382 	.ds 2
      000047                        383 _drawChar_PARM_6:
      000047                        384 	.ds 1
      000048                        385 _drawChar_i_65537_149:
      000048                        386 	.ds 1
      000049                        387 _drawChar_line_196609_151:
      000049                        388 	.ds 1
      00004A                        389 _drawChar_j_196610_154:
      00004A                        390 	.ds 1
      00004B                        391 _drawChar_sloc1_1_0:
      00004B                        392 	.ds 2
      00004D                        393 _drawChar_sloc2_1_0:
      00004D                        394 	.ds 2
      00004F                        395 _asciiToHex_store_65536_200:
      00004F                        396 	.ds 2
      000051                        397 _dumpPage_PARM_2:
      000051                        398 	.ds 1
      000052                        399 _dumpPage_PARM_3:
      000052                        400 	.ds 1
      000053                        401 _dumpPage_start_65536_227:
      000053                        402 	.ds 2
      000055                        403 _dump_sloc0_1_0:
      000055                        404 	.ds 1
      000056                        405 _dump_sloc1_1_0:
      000056                        406 	.ds 2
      000058                        407 _dump_sloc2_1_0:
      000058                        408 	.ds 1
      000059                        409 _move_target_65537_265:
      000059                        410 	.ds 2
                                    411 ;--------------------------------------------------------
                                    412 ; overlayable items in internal ram
                                    413 ;--------------------------------------------------------
                                    414 	.area	OSEG    (OVR,DATA)
      000000                        415 _iowrite8_PARM_2:
      000000                        416 	.ds 1
                                    417 	.area	OSEG    (OVR,DATA)
                                    418 	.area	OSEG    (OVR,DATA)
      000000                        419 _writeRegister8_PARM_2:
      000000                        420 	.ds 1
                                    421 	.area	OSEG    (OVR,DATA)
      000000                        422 _writeRegister16_PARM_2:
      000000                        423 	.ds 2
                                    424 	.area	OSEG    (OVR,DATA)
      000000                        425 _setCursor_PARM_2:
      000000                        426 	.ds 2
                                    427 	.area	OSEG    (OVR,DATA)
      000000                        428 _setTextColor_PARM_2:
      000000                        429 	.ds 2
                                    430 	.area	OSEG    (OVR,DATA)
                                    431 	.area	OSEG    (OVR,DATA)
      000000                        432 _setAddress_PARM_2:
      000000                        433 	.ds 2
      000002                        434 _setAddress_PARM_3:
      000002                        435 	.ds 2
      000004                        436 _setAddress_PARM_4:
      000004                        437 	.ds 2
                                    438 	.area	OSEG    (OVR,DATA)
                                    439 	.area	OSEG    (OVR,DATA)
                                    440 ;--------------------------------------------------------
                                    441 ; Stack segment in internal ram
                                    442 ;--------------------------------------------------------
                                    443 	.area	SSEG
      000000                        444 __start__stack:
      000000                        445 	.ds	1
                                    446 
                                    447 ;--------------------------------------------------------
                                    448 ; indirectly addressable internal ram data
                                    449 ;--------------------------------------------------------
                                    450 	.area ISEG    (DATA)
                                    451 ;--------------------------------------------------------
                                    452 ; absolute internal ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area IABS    (ABS,DATA)
                                    455 	.area IABS    (ABS,DATA)
                                    456 ;--------------------------------------------------------
                                    457 ; bit data
                                    458 ;--------------------------------------------------------
                                    459 	.area BSEG    (BIT)
      000000                        460 _drawChar_sloc0_1_0:
      000000                        461 	.ds 1
      000001                        462 _convertAsciiHex_sloc0_1_0:
      000001                        463 	.ds 1
                                    464 ;--------------------------------------------------------
                                    465 ; paged external ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area PSEG    (PAG,XDATA)
                                    468 ;--------------------------------------------------------
                                    469 ; external ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area XSEG    (XDATA)
      000000                        472 _dumpPage_i_65537_229:
      000000                        473 	.ds 2
      000002                        474 _dumpPage_data_65537_229:
      000002                        475 	.ds 1
      000003                        476 _dump_type_65537_235:
      000003                        477 	.ds 1
      000004                        478 _dump_page_65537_235:
      000004                        479 	.ds 1
      000005                        480 _check_checker_65537_251:
      000005                        481 	.ds 1
      000006                        482 _check_error_65537_251:
      000006                        483 	.ds 1
      000007                        484 _edit_input_65537_272:
      000007                        485 	.ds 1
                                    486 ;--------------------------------------------------------
                                    487 ; absolute external ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area XABS    (ABS,XDATA)
                                    490 ;--------------------------------------------------------
                                    491 ; external initialized ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area XISEG   (XDATA)
                                    494 	.area HOME    (CODE)
                                    495 	.area GSINIT0 (CODE)
                                    496 	.area GSINIT1 (CODE)
                                    497 	.area GSINIT2 (CODE)
                                    498 	.area GSINIT3 (CODE)
                                    499 	.area GSINIT4 (CODE)
                                    500 	.area GSINIT5 (CODE)
                                    501 	.area GSINIT  (CODE)
                                    502 	.area GSFINAL (CODE)
                                    503 	.area CSEG    (CODE)
                                    504 ;--------------------------------------------------------
                                    505 ; interrupt vector
                                    506 ;--------------------------------------------------------
                                    507 	.area HOME    (CODE)
      000000                        508 __interrupt_vect:
      000000 02r00r00         [24]  509 	ljmp	__sdcc_gsinit_startup
                                    510 ;--------------------------------------------------------
                                    511 ; global & static initialisations
                                    512 ;--------------------------------------------------------
                                    513 	.area HOME    (CODE)
                                    514 	.area GSINIT  (CODE)
                                    515 	.area GSFINAL (CODE)
                                    516 	.area GSINIT  (CODE)
                                    517 	.globl __sdcc_gsinit_startup
                                    518 	.globl __sdcc_program_startup
                                    519 	.globl __start__stack
                                    520 	.globl __mcs51_genXINIT
                                    521 	.globl __mcs51_genXRAMCLEAR
                                    522 	.globl __mcs51_genRAMCLEAR
                                    523 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  524 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  525 	mov	(_lcd_address + 1),#0x40
                                    526 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  527 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  528 	mov	(_seg7_address + 1),#0x80
                                    529 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  530 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  531 	mov	(_temp_address + 1),#0xc0
                                    532 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  533 	clr	a
      000013 F5*08            [12]  534 	mov	_light_address,a
      000015 F5*09            [12]  535 	mov	(_light_address + 1),a
                                    536 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  537 	ljmp	__sdcc_program_startup
                                    538 ;--------------------------------------------------------
                                    539 ; Home
                                    540 ;--------------------------------------------------------
                                    541 	.area HOME    (CODE)
                                    542 	.area HOME    (CODE)
      000003                        543 __sdcc_program_startup:
      000003 02r19rB6         [24]  544 	ljmp	_main
                                    545 ;	return from main will return to caller
                                    546 ;--------------------------------------------------------
                                    547 ; code
                                    548 ;--------------------------------------------------------
                                    549 	.area CSEG    (CODE)
                                    550 ;------------------------------------------------------------
                                    551 ;Allocation info for local variables in function 'iowrite8'
                                    552 ;------------------------------------------------------------
                                    553 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    554 ;map_address               Allocated to registers r6 r7 
                                    555 ;------------------------------------------------------------
                                    556 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    557 ;	-----------------------------------------
                                    558 ;	 function iowrite8
                                    559 ;	-----------------------------------------
      000000                        560 _iowrite8:
                           000007   561 	ar7 = 0x07
                           000006   562 	ar6 = 0x06
                           000005   563 	ar5 = 0x05
                           000004   564 	ar4 = 0x04
                           000003   565 	ar3 = 0x03
                           000002   566 	ar2 = 0x02
                           000001   567 	ar1 = 0x01
                           000000   568 	ar0 = 0x00
      000000 AE 82            [24]  569 	mov	r6,dpl
      000002 AF 83            [24]  570 	mov	r7,dph
                                    571 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    572 ;	assignBit
      000004 D2 B4            [12]  573 	setb	_P3_4
                                    574 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  575 	mov	dpl,r6
      000008 8F 83            [24]  576 	mov	dph,r7
      00000A E5*00            [12]  577 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  578 	movx	@dptr,a
                                    579 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    580 ;	assignBit
      00000D C2 B4            [12]  581 	clr	_P3_4
                                    582 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'delay'
                                    586 ;------------------------------------------------------------
                                    587 ;d                         Allocated to registers r6 r7 
                                    588 ;i                         Allocated to registers r4 r5 
                                    589 ;j                         Allocated to registers r2 r3 
                                    590 ;------------------------------------------------------------
                                    591 ;	ecen4330_lcd_v3.c:58: void delay (int16_t d)
                                    592 ;	-----------------------------------------
                                    593 ;	 function delay
                                    594 ;	-----------------------------------------
      000010                        595 _delay:
      000010 AE 82            [24]  596 	mov	r6,dpl
      000012 AF 83            [24]  597 	mov	r7,dph
                                    598 ;	ecen4330_lcd_v3.c:61: for (i=0;i<d;i++)
      000014 7C 00            [12]  599 	mov	r4,#0x00
      000016 7D 00            [12]  600 	mov	r5,#0x00
      000018                        601 00107$:
      000018 8C 02            [24]  602 	mov	ar2,r4
      00001A 8D 03            [24]  603 	mov	ar3,r5
      00001C C3               [12]  604 	clr	c
      00001D EA               [12]  605 	mov	a,r2
      00001E 9E               [12]  606 	subb	a,r6
      00001F EB               [12]  607 	mov	a,r3
      000020 64 80            [12]  608 	xrl	a,#0x80
      000022 8F F0            [24]  609 	mov	b,r7
      000024 63 F0 80         [24]  610 	xrl	b,#0x80
      000027 95 F0            [12]  611 	subb	a,b
      000029 50 14            [24]  612 	jnc	00109$
                                    613 ;	ecen4330_lcd_v3.c:63: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  614 	mov	r2,#0xe8
      00002D 7B 03            [12]  615 	mov	r3,#0x03
      00002F                        616 00105$:
      00002F 1A               [12]  617 	dec	r2
      000030 BA FF 01         [24]  618 	cjne	r2,#0xff,00130$
      000033 1B               [12]  619 	dec	r3
      000034                        620 00130$:
      000034 EA               [12]  621 	mov	a,r2
      000035 4B               [12]  622 	orl	a,r3
      000036 70 F7            [24]  623 	jnz	00105$
                                    624 ;	ecen4330_lcd_v3.c:61: for (i=0;i<d;i++)
      000038 0C               [12]  625 	inc	r4
      000039 BC 00 DC         [24]  626 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  627 	inc	r5
      00003D 80 D9            [24]  628 	sjmp	00107$
      00003F                        629 00109$:
                                    630 ;	ecen4330_lcd_v3.c:65: }
      00003F 22               [24]  631 	ret
                                    632 ;------------------------------------------------------------
                                    633 ;Allocation info for local variables in function 'writeRegister8'
                                    634 ;------------------------------------------------------------
                                    635 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    636 ;a                         Allocated to registers r7 
                                    637 ;------------------------------------------------------------
                                    638 ;	ecen4330_lcd_v3.c:75: void writeRegister8 (uint8_t a, uint8_t d) {
                                    639 ;	-----------------------------------------
                                    640 ;	 function writeRegister8
                                    641 ;	-----------------------------------------
      000040                        642 _writeRegister8:
      000040 AF 82            [24]  643 	mov	r7,dpl
                                    644 ;	ecen4330_lcd_v3.c:76: CD = __CMD__;
                                    645 ;	assignBit
      000042 C2 B5            [12]  646 	clr	_P3_5
                                    647 ;	ecen4330_lcd_v3.c:77: write8(a);
                                    648 ;	assignBit
      000044 D2 B4            [12]  649 	setb	_P3_4
      000046 85*02 82         [24]  650 	mov	dpl,_lcd_address
      000049 85*03 83         [24]  651 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  652 	mov	a,r7
      00004D F0               [24]  653 	movx	@dptr,a
                                    654 ;	assignBit
      00004E C2 B4            [12]  655 	clr	_P3_4
                                    656 ;	ecen4330_lcd_v3.c:78: CD = __DATA__;
                                    657 ;	assignBit
      000050 D2 B5            [12]  658 	setb	_P3_5
                                    659 ;	ecen4330_lcd_v3.c:79: write8(d);
                                    660 ;	assignBit
      000052 D2 B4            [12]  661 	setb	_P3_4
      000054 85*02 82         [24]  662 	mov	dpl,_lcd_address
      000057 85*03 83         [24]  663 	mov	dph,(_lcd_address + 1)
      00005A E5*00            [12]  664 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  665 	movx	@dptr,a
                                    666 ;	assignBit
      00005D C2 B4            [12]  667 	clr	_P3_4
                                    668 ;	ecen4330_lcd_v3.c:80: }
      00005F 22               [24]  669 	ret
                                    670 ;------------------------------------------------------------
                                    671 ;Allocation info for local variables in function 'writeRegister16'
                                    672 ;------------------------------------------------------------
                                    673 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    674 ;a                         Allocated to registers r6 r7 
                                    675 ;hi                        Allocated to registers r7 
                                    676 ;lo                        Allocated to registers r6 
                                    677 ;------------------------------------------------------------
                                    678 ;	ecen4330_lcd_v3.c:84: void writeRegister16 (uint16_t a, uint16_t d) {
                                    679 ;	-----------------------------------------
                                    680 ;	 function writeRegister16
                                    681 ;	-----------------------------------------
      000060                        682 _writeRegister16:
      000060 AE 82            [24]  683 	mov	r6,dpl
      000062 AF 83            [24]  684 	mov	r7,dph
                                    685 ;	ecen4330_lcd_v3.c:86: hi = (a) >> 8;
      000064 8F 05            [24]  686 	mov	ar5,r7
                                    687 ;	ecen4330_lcd_v3.c:87: lo = (a);
                                    688 ;	ecen4330_lcd_v3.c:88: write8Reg(hi);
                                    689 ;	assignBit
      000066 C2 B5            [12]  690 	clr	_P3_5
                                    691 ;	assignBit
      000068 D2 B4            [12]  692 	setb	_P3_4
      00006A 85*02 82         [24]  693 	mov	dpl,_lcd_address
      00006D 85*03 83         [24]  694 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  695 	mov	a,r5
      000071 F0               [24]  696 	movx	@dptr,a
                                    697 ;	assignBit
      000072 C2 B4            [12]  698 	clr	_P3_4
                                    699 ;	ecen4330_lcd_v3.c:89: write8Reg(lo);
                                    700 ;	assignBit
      000074 C2 B5            [12]  701 	clr	_P3_5
                                    702 ;	assignBit
      000076 D2 B4            [12]  703 	setb	_P3_4
      000078 85*02 82         [24]  704 	mov	dpl,_lcd_address
      00007B 85*03 83         [24]  705 	mov	dph,(_lcd_address + 1)
      00007E EE               [12]  706 	mov	a,r6
      00007F F0               [24]  707 	movx	@dptr,a
                                    708 ;	assignBit
      000080 C2 B4            [12]  709 	clr	_P3_4
                                    710 ;	ecen4330_lcd_v3.c:90: hi = (d) >> 8;
      000082 AF*01            [24]  711 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    712 ;	ecen4330_lcd_v3.c:91: lo = (d);
      000084 AE*00            [24]  713 	mov	r6,_writeRegister16_PARM_2
                                    714 ;	ecen4330_lcd_v3.c:92: CD = 1 ;
                                    715 ;	assignBit
      000086 D2 B5            [12]  716 	setb	_P3_5
                                    717 ;	ecen4330_lcd_v3.c:93: write8Data(hi);
                                    718 ;	assignBit
      000088 D2 B5            [12]  719 	setb	_P3_5
                                    720 ;	assignBit
      00008A D2 B4            [12]  721 	setb	_P3_4
      00008C 85*02 82         [24]  722 	mov	dpl,_lcd_address
      00008F 85*03 83         [24]  723 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  724 	mov	a,r7
      000093 F0               [24]  725 	movx	@dptr,a
                                    726 ;	assignBit
      000094 C2 B4            [12]  727 	clr	_P3_4
                                    728 ;	ecen4330_lcd_v3.c:94: write8Data(lo);
                                    729 ;	assignBit
      000096 D2 B5            [12]  730 	setb	_P3_5
                                    731 ;	assignBit
      000098 D2 B4            [12]  732 	setb	_P3_4
      00009A 85*02 82         [24]  733 	mov	dpl,_lcd_address
      00009D 85*03 83         [24]  734 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  735 	mov	a,r6
      0000A1 F0               [24]  736 	movx	@dptr,a
                                    737 ;	assignBit
      0000A2 C2 B4            [12]  738 	clr	_P3_4
                                    739 ;	ecen4330_lcd_v3.c:95: }
      0000A4 22               [24]  740 	ret
                                    741 ;------------------------------------------------------------
                                    742 ;Allocation info for local variables in function 'setCursor'
                                    743 ;------------------------------------------------------------
                                    744 ;y                         Allocated with name '_setCursor_PARM_2'
                                    745 ;x                         Allocated to registers 
                                    746 ;------------------------------------------------------------
                                    747 ;	ecen4330_lcd_v3.c:103: void setCursor (uint16_t x, uint16_t y) {
                                    748 ;	-----------------------------------------
                                    749 ;	 function setCursor
                                    750 ;	-----------------------------------------
      0000A5                        751 _setCursor:
      0000A5 85 82*0C         [24]  752 	mov	_cursor_x,dpl
      0000A8 85 83*0D         [24]  753 	mov	(_cursor_x + 1),dph
                                    754 ;	ecen4330_lcd_v3.c:105: cursor_y = y;
      0000AB 85*00*0E         [24]  755 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85*01*0F         [24]  756 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    757 ;	ecen4330_lcd_v3.c:106: }
      0000B1 22               [24]  758 	ret
                                    759 ;------------------------------------------------------------
                                    760 ;Allocation info for local variables in function 'setTextColor'
                                    761 ;------------------------------------------------------------
                                    762 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    763 ;x                         Allocated to registers 
                                    764 ;------------------------------------------------------------
                                    765 ;	ecen4330_lcd_v3.c:113: void setTextColor (uint16_t x, uint16_t y) {
                                    766 ;	-----------------------------------------
                                    767 ;	 function setTextColor
                                    768 ;	-----------------------------------------
      0000B2                        769 _setTextColor:
      0000B2 85 82*12         [24]  770 	mov	_textcolor,dpl
      0000B5 85 83*13         [24]  771 	mov	(_textcolor + 1),dph
                                    772 ;	ecen4330_lcd_v3.c:115: textbgcolor = y;
      0000B8 85*00*14         [24]  773 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85*01*15         [24]  774 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    775 ;	ecen4330_lcd_v3.c:116: }
      0000BE 22               [24]  776 	ret
                                    777 ;------------------------------------------------------------
                                    778 ;Allocation info for local variables in function 'setTextSize'
                                    779 ;------------------------------------------------------------
                                    780 ;s                         Allocated to registers r7 
                                    781 ;------------------------------------------------------------
                                    782 ;	ecen4330_lcd_v3.c:123: void setTextSize (uint8_t s) {
                                    783 ;	-----------------------------------------
                                    784 ;	 function setTextSize
                                    785 ;	-----------------------------------------
      0000BF                        786 _setTextSize:
                                    787 ;	ecen4330_lcd_v3.c:124: if (s > 8) return;
      0000BF E5 82            [12]  788 	mov	a,dpl
      0000C1 FF               [12]  789 	mov	r7,a
      0000C2 24 F7            [12]  790 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  791 	jnc	00102$
      0000C6 22               [24]  792 	ret
      0000C7                        793 00102$:
                                    794 ;	ecen4330_lcd_v3.c:125: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  795 	mov	a,r7
      0000C8 60 06            [24]  796 	jz	00105$
      0000CA 8F 06            [24]  797 	mov	ar6,r7
      0000CC 7F 00            [12]  798 	mov	r7,#0x00
      0000CE 80 04            [24]  799 	sjmp	00106$
      0000D0                        800 00105$:
      0000D0 7E 01            [12]  801 	mov	r6,#0x01
      0000D2 7F 00            [12]  802 	mov	r7,#0x00
      0000D4                        803 00106$:
      0000D4 8E*10            [24]  804 	mov	_textsize,r6
                                    805 ;	ecen4330_lcd_v3.c:126: }
      0000D6 22               [24]  806 	ret
                                    807 ;------------------------------------------------------------
                                    808 ;Allocation info for local variables in function 'setRotation'
                                    809 ;------------------------------------------------------------
                                    810 ;flag                      Allocated to registers r7 
                                    811 ;------------------------------------------------------------
                                    812 ;	ecen4330_lcd_v3.c:138: void setRotation (uint8_t flag) {
                                    813 ;	-----------------------------------------
                                    814 ;	 function setRotation
                                    815 ;	-----------------------------------------
      0000D7                        816 _setRotation:
                                    817 ;	ecen4330_lcd_v3.c:139: switch(flag) {
      0000D7 E5 82            [12]  818 	mov	a,dpl
      0000D9 FF               [12]  819 	mov	r7,a
      0000DA 24 FC            [12]  820 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  821 	jc	00105$
      0000DE EF               [12]  822 	mov	a,r7
      0000DF 2F               [12]  823 	add	a,r7
                                    824 ;	ecen4330_lcd_v3.c:140: case 0:
      0000E0 90r00rE4         [24]  825 	mov	dptr,#00115$
      0000E3 73               [24]  826 	jmp	@a+dptr
      0000E4                        827 00115$:
      0000E4 80 06            [24]  828 	sjmp	00101$
      0000E6 80 14            [24]  829 	sjmp	00102$
      0000E8 80 22            [24]  830 	sjmp	00103$
      0000EA 80 30            [24]  831 	sjmp	00104$
      0000EC                        832 00101$:
                                    833 ;	ecen4330_lcd_v3.c:141: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  834 	mov	r7,#0x48
                                    835 ;	ecen4330_lcd_v3.c:142: _width = TFTWIDTH;
      0000EE 75*16 F0         [24]  836 	mov	__width,#0xf0
      0000F1 75*17 00         [24]  837 	mov	(__width + 1),#0x00
                                    838 ;	ecen4330_lcd_v3.c:143: _height = TFTHEIGHT;
      0000F4 75*18 40         [24]  839 	mov	__height,#0x40
      0000F7 75*19 01         [24]  840 	mov	(__height + 1),#0x01
                                    841 ;	ecen4330_lcd_v3.c:144: break;
                                    842 ;	ecen4330_lcd_v3.c:145: case 1:
      0000FA 80 3E            [24]  843 	sjmp	00106$
      0000FC                        844 00102$:
                                    845 ;	ecen4330_lcd_v3.c:146: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  846 	mov	r7,#0x28
                                    847 ;	ecen4330_lcd_v3.c:147: _width = TFTHEIGHT;
      0000FE 75*16 40         [24]  848 	mov	__width,#0x40
      000101 75*17 01         [24]  849 	mov	(__width + 1),#0x01
                                    850 ;	ecen4330_lcd_v3.c:148: _height = TFTWIDTH;
      000104 75*18 F0         [24]  851 	mov	__height,#0xf0
      000107 75*19 00         [24]  852 	mov	(__height + 1),#0x00
                                    853 ;	ecen4330_lcd_v3.c:149: break;
                                    854 ;	ecen4330_lcd_v3.c:150: case 2:
      00010A 80 2E            [24]  855 	sjmp	00106$
      00010C                        856 00103$:
                                    857 ;	ecen4330_lcd_v3.c:151: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  858 	mov	r7,#0x88
                                    859 ;	ecen4330_lcd_v3.c:152: _width = TFTWIDTH;
      00010E 75*16 F0         [24]  860 	mov	__width,#0xf0
      000111 75*17 00         [24]  861 	mov	(__width + 1),#0x00
                                    862 ;	ecen4330_lcd_v3.c:153: _height = TFTHEIGHT;
      000114 75*18 40         [24]  863 	mov	__height,#0x40
      000117 75*19 01         [24]  864 	mov	(__height + 1),#0x01
                                    865 ;	ecen4330_lcd_v3.c:154: break;
                                    866 ;	ecen4330_lcd_v3.c:155: case 3:
      00011A 80 1E            [24]  867 	sjmp	00106$
      00011C                        868 00104$:
                                    869 ;	ecen4330_lcd_v3.c:156: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  870 	mov	r7,#0xe8
                                    871 ;	ecen4330_lcd_v3.c:157: _width = TFTHEIGHT;
      00011E 75*16 40         [24]  872 	mov	__width,#0x40
      000121 75*17 01         [24]  873 	mov	(__width + 1),#0x01
                                    874 ;	ecen4330_lcd_v3.c:158: _height = TFTWIDTH;
      000124 75*18 F0         [24]  875 	mov	__height,#0xf0
      000127 75*19 00         [24]  876 	mov	(__height + 1),#0x00
                                    877 ;	ecen4330_lcd_v3.c:159: break;
                                    878 ;	ecen4330_lcd_v3.c:160: default:
      00012A 80 0E            [24]  879 	sjmp	00106$
      00012C                        880 00105$:
                                    881 ;	ecen4330_lcd_v3.c:161: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  882 	mov	r7,#0x48
                                    883 ;	ecen4330_lcd_v3.c:162: _width = TFTWIDTH;
      00012E 75*16 F0         [24]  884 	mov	__width,#0xf0
      000131 75*17 00         [24]  885 	mov	(__width + 1),#0x00
                                    886 ;	ecen4330_lcd_v3.c:163: _height = TFTHEIGHT;
      000134 75*18 40         [24]  887 	mov	__height,#0x40
      000137 75*19 01         [24]  888 	mov	(__height + 1),#0x01
                                    889 ;	ecen4330_lcd_v3.c:165: }
      00013A                        890 00106$:
                                    891 ;	ecen4330_lcd_v3.c:166: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F*00            [24]  892 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  893 	mov	dpl,#0x36
                                    894 ;	ecen4330_lcd_v3.c:167: }
      00013F 02r00r40         [24]  895 	ljmp	_writeRegister8
                                    896 ;------------------------------------------------------------
                                    897 ;Allocation info for local variables in function 'setAddress'
                                    898 ;------------------------------------------------------------
                                    899 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    900 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    901 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    902 ;x1                        Allocated to registers r6 r7 
                                    903 ;------------------------------------------------------------
                                    904 ;	ecen4330_lcd_v3.c:169: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    905 ;	-----------------------------------------
                                    906 ;	 function setAddress
                                    907 ;	-----------------------------------------
      000142                        908 _setAddress:
      000142 AE 82            [24]  909 	mov	r6,dpl
      000144 AF 83            [24]  910 	mov	r7,dph
                                    911 ;	ecen4330_lcd_v3.c:170: write8Reg(0x2A);
                                    912 ;	assignBit
      000146 C2 B5            [12]  913 	clr	_P3_5
                                    914 ;	assignBit
      000148 D2 B4            [12]  915 	setb	_P3_4
      00014A 85*02 82         [24]  916 	mov	dpl,_lcd_address
      00014D 85*03 83         [24]  917 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  918 	mov	a,#0x2a
      000152 F0               [24]  919 	movx	@dptr,a
                                    920 ;	assignBit
      000153 C2 B4            [12]  921 	clr	_P3_4
                                    922 ;	ecen4330_lcd_v3.c:171: write8Data(x1 >> 8);
                                    923 ;	assignBit
      000155 D2 B5            [12]  924 	setb	_P3_5
                                    925 ;	assignBit
      000157 D2 B4            [12]  926 	setb	_P3_4
      000159 85*02 82         [24]  927 	mov	dpl,_lcd_address
      00015C 85*03 83         [24]  928 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  929 	mov	ar5,r7
      000161 ED               [12]  930 	mov	a,r5
      000162 F0               [24]  931 	movx	@dptr,a
                                    932 ;	assignBit
      000163 C2 B4            [12]  933 	clr	_P3_4
                                    934 ;	ecen4330_lcd_v3.c:172: write8Data(x1);
                                    935 ;	assignBit
      000165 D2 B5            [12]  936 	setb	_P3_5
                                    937 ;	assignBit
      000167 D2 B4            [12]  938 	setb	_P3_4
      000169 85*02 82         [24]  939 	mov	dpl,_lcd_address
      00016C 85*03 83         [24]  940 	mov	dph,(_lcd_address + 1)
      00016F EE               [12]  941 	mov	a,r6
      000170 F0               [24]  942 	movx	@dptr,a
                                    943 ;	assignBit
      000171 C2 B4            [12]  944 	clr	_P3_4
                                    945 ;	ecen4330_lcd_v3.c:173: write8Data(x2 >> 8);
                                    946 ;	assignBit
      000173 D2 B5            [12]  947 	setb	_P3_5
                                    948 ;	assignBit
      000175 D2 B4            [12]  949 	setb	_P3_4
      000177 85*02 82         [24]  950 	mov	dpl,_lcd_address
      00017A 85*03 83         [24]  951 	mov	dph,(_lcd_address + 1)
      00017D E5*03            [12]  952 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24]  953 	movx	@dptr,a
                                    954 ;	assignBit
      000180 C2 B4            [12]  955 	clr	_P3_4
                                    956 ;	ecen4330_lcd_v3.c:174: write8Data(x2);
                                    957 ;	assignBit
      000182 D2 B5            [12]  958 	setb	_P3_5
                                    959 ;	assignBit
      000184 D2 B4            [12]  960 	setb	_P3_4
      000186 85*02 82         [24]  961 	mov	dpl,_lcd_address
      000189 85*03 83         [24]  962 	mov	dph,(_lcd_address + 1)
      00018C E5*02            [12]  963 	mov	a,_setAddress_PARM_3
      00018E F0               [24]  964 	movx	@dptr,a
                                    965 ;	assignBit
      00018F C2 B4            [12]  966 	clr	_P3_4
                                    967 ;	ecen4330_lcd_v3.c:176: write8Reg(0x2B);
                                    968 ;	assignBit
      000191 C2 B5            [12]  969 	clr	_P3_5
                                    970 ;	assignBit
      000193 D2 B4            [12]  971 	setb	_P3_4
      000195 85*02 82         [24]  972 	mov	dpl,_lcd_address
      000198 85*03 83         [24]  973 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12]  974 	mov	a,#0x2b
      00019D F0               [24]  975 	movx	@dptr,a
                                    976 ;	assignBit
      00019E C2 B4            [12]  977 	clr	_P3_4
                                    978 ;	ecen4330_lcd_v3.c:177: write8Data(y1 >> 8);
                                    979 ;	assignBit
      0001A0 D2 B5            [12]  980 	setb	_P3_5
                                    981 ;	assignBit
      0001A2 D2 B4            [12]  982 	setb	_P3_4
      0001A4 85*02 82         [24]  983 	mov	dpl,_lcd_address
      0001A7 85*03 83         [24]  984 	mov	dph,(_lcd_address + 1)
      0001AA E5*01            [12]  985 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24]  986 	movx	@dptr,a
                                    987 ;	assignBit
      0001AD C2 B4            [12]  988 	clr	_P3_4
                                    989 ;	ecen4330_lcd_v3.c:178: write8Data(y1);
                                    990 ;	assignBit
      0001AF D2 B5            [12]  991 	setb	_P3_5
                                    992 ;	assignBit
      0001B1 D2 B4            [12]  993 	setb	_P3_4
      0001B3 85*02 82         [24]  994 	mov	dpl,_lcd_address
      0001B6 85*03 83         [24]  995 	mov	dph,(_lcd_address + 1)
      0001B9 E5*00            [12]  996 	mov	a,_setAddress_PARM_2
      0001BB F0               [24]  997 	movx	@dptr,a
                                    998 ;	assignBit
      0001BC C2 B4            [12]  999 	clr	_P3_4
                                   1000 ;	ecen4330_lcd_v3.c:179: write8Data(y2 >> 8);
                                   1001 ;	assignBit
      0001BE D2 B5            [12] 1002 	setb	_P3_5
                                   1003 ;	assignBit
      0001C0 D2 B4            [12] 1004 	setb	_P3_4
      0001C2 85*02 82         [24] 1005 	mov	dpl,_lcd_address
      0001C5 85*03 83         [24] 1006 	mov	dph,(_lcd_address + 1)
      0001C8 E5*05            [12] 1007 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24] 1008 	movx	@dptr,a
                                   1009 ;	assignBit
      0001CB C2 B4            [12] 1010 	clr	_P3_4
                                   1011 ;	ecen4330_lcd_v3.c:180: write8Data(y2);
                                   1012 ;	assignBit
      0001CD D2 B5            [12] 1013 	setb	_P3_5
                                   1014 ;	assignBit
      0001CF D2 B4            [12] 1015 	setb	_P3_4
      0001D1 85*02 82         [24] 1016 	mov	dpl,_lcd_address
      0001D4 85*03 83         [24] 1017 	mov	dph,(_lcd_address + 1)
      0001D7 E5*04            [12] 1018 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24] 1019 	movx	@dptr,a
                                   1020 ;	assignBit
      0001DA C2 B4            [12] 1021 	clr	_P3_4
                                   1022 ;	ecen4330_lcd_v3.c:181: }
      0001DC 22               [24] 1023 	ret
                                   1024 ;------------------------------------------------------------
                                   1025 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1026 ;------------------------------------------------------------
                                   1027 ;	ecen4330_lcd_v3.c:187: void TFT_LCD_INIT (void) {
                                   1028 ;	-----------------------------------------
                                   1029 ;	 function TFT_LCD_INIT
                                   1030 ;	-----------------------------------------
      0001DD                       1031 _TFT_LCD_INIT:
                                   1032 ;	ecen4330_lcd_v3.c:188: _width = TFTWIDTH;
      0001DD 75*16 F0         [24] 1033 	mov	__width,#0xf0
      0001E0 75*17 00         [24] 1034 	mov	(__width + 1),#0x00
                                   1035 ;	ecen4330_lcd_v3.c:189: _height = TFTHEIGHT;
      0001E3 75*18 40         [24] 1036 	mov	__height,#0x40
      0001E6 75*19 01         [24] 1037 	mov	(__height + 1),#0x01
                                   1038 ;	ecen4330_lcd_v3.c:191: IOM = 0;
                                   1039 ;	assignBit
      0001E9 C2 B4            [12] 1040 	clr	_P3_4
                                   1041 ;	ecen4330_lcd_v3.c:192: CD = 1;
                                   1042 ;	assignBit
      0001EB D2 B5            [12] 1043 	setb	_P3_5
                                   1044 ;	ecen4330_lcd_v3.c:194: write8Reg(0x00);
                                   1045 ;	assignBit
      0001ED C2 B5            [12] 1046 	clr	_P3_5
                                   1047 ;	assignBit
      0001EF D2 B4            [12] 1048 	setb	_P3_4
      0001F1 85*02 82         [24] 1049 	mov	dpl,_lcd_address
      0001F4 85*03 83         [24] 1050 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1051 	clr	a
      0001F8 F0               [24] 1052 	movx	@dptr,a
                                   1053 ;	assignBit
      0001F9 C2 B4            [12] 1054 	clr	_P3_4
                                   1055 ;	ecen4330_lcd_v3.c:195: write8Data(0x00);
                                   1056 ;	assignBit
      0001FB D2 B5            [12] 1057 	setb	_P3_5
                                   1058 ;	assignBit
      0001FD D2 B4            [12] 1059 	setb	_P3_4
      0001FF 85*02 82         [24] 1060 	mov	dpl,_lcd_address
      000202 85*03 83         [24] 1061 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1062 	clr	a
      000206 F0               [24] 1063 	movx	@dptr,a
                                   1064 ;	assignBit
      000207 C2 B4            [12] 1065 	clr	_P3_4
                                   1066 ;	ecen4330_lcd_v3.c:196: write8Data(0x00);
                                   1067 ;	assignBit
      000209 D2 B5            [12] 1068 	setb	_P3_5
                                   1069 ;	assignBit
      00020B D2 B4            [12] 1070 	setb	_P3_4
      00020D 85*02 82         [24] 1071 	mov	dpl,_lcd_address
      000210 85*03 83         [24] 1072 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1073 	clr	a
      000214 F0               [24] 1074 	movx	@dptr,a
                                   1075 ;	assignBit
      000215 C2 B4            [12] 1076 	clr	_P3_4
                                   1077 ;	ecen4330_lcd_v3.c:197: write8Data(0x00);
                                   1078 ;	assignBit
      000217 D2 B5            [12] 1079 	setb	_P3_5
                                   1080 ;	assignBit
      000219 D2 B4            [12] 1081 	setb	_P3_4
      00021B 85*02 82         [24] 1082 	mov	dpl,_lcd_address
      00021E 85*03 83         [24] 1083 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1084 	clr	a
      000222 F0               [24] 1085 	movx	@dptr,a
                                   1086 ;	assignBit
      000223 C2 B4            [12] 1087 	clr	_P3_4
                                   1088 ;	ecen4330_lcd_v3.c:198: delay(200);
      000225 90 00 C8         [24] 1089 	mov	dptr,#0x00c8
      000228 12r00r10         [24] 1090 	lcall	_delay
                                   1091 ;	ecen4330_lcd_v3.c:200: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75*00 00         [24] 1092 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1093 	mov	dpl,#0x01
      000231 12r00r40         [24] 1094 	lcall	_writeRegister8
                                   1095 ;	ecen4330_lcd_v3.c:201: delay(50);
      000234 90 00 32         [24] 1096 	mov	dptr,#0x0032
      000237 12r00r10         [24] 1097 	lcall	_delay
                                   1098 ;	ecen4330_lcd_v3.c:202: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75*00 00         [24] 1099 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1100 	mov	dpl,#0x28
      000240 12r00r40         [24] 1101 	lcall	_writeRegister8
                                   1102 ;	ecen4330_lcd_v3.c:203: delay(10);
      000243 90 00 0A         [24] 1103 	mov	dptr,#0x000a
      000246 12r00r10         [24] 1104 	lcall	_delay
                                   1105 ;	ecen4330_lcd_v3.c:205: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75*00 23         [24] 1106 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1107 	mov	dpl,#0xc0
      00024F 12r00r40         [24] 1108 	lcall	_writeRegister8
                                   1109 ;	ecen4330_lcd_v3.c:206: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75*00 11         [24] 1110 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1111 	mov	dpl,#0xc1
      000258 12r00r40         [24] 1112 	lcall	_writeRegister8
                                   1113 ;	ecen4330_lcd_v3.c:207: write8Reg(ILI9341_VCOMCONTROL1);
                                   1114 ;	assignBit
      00025B C2 B5            [12] 1115 	clr	_P3_5
                                   1116 ;	assignBit
      00025D D2 B4            [12] 1117 	setb	_P3_4
      00025F 85*02 82         [24] 1118 	mov	dpl,_lcd_address
      000262 85*03 83         [24] 1119 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1120 	mov	a,#0xc5
      000267 F0               [24] 1121 	movx	@dptr,a
                                   1122 ;	assignBit
      000268 C2 B4            [12] 1123 	clr	_P3_4
                                   1124 ;	ecen4330_lcd_v3.c:208: write8Data(0x3d);
                                   1125 ;	assignBit
      00026A D2 B5            [12] 1126 	setb	_P3_5
                                   1127 ;	assignBit
      00026C D2 B4            [12] 1128 	setb	_P3_4
      00026E 85*02 82         [24] 1129 	mov	dpl,_lcd_address
      000271 85*03 83         [24] 1130 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1131 	mov	a,#0x3d
      000276 F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	assignBit
      000277 C2 B4            [12] 1134 	clr	_P3_4
                                   1135 ;	ecen4330_lcd_v3.c:209: write8Data(0x30);
                                   1136 ;	assignBit
      000279 D2 B5            [12] 1137 	setb	_P3_5
                                   1138 ;	assignBit
      00027B D2 B4            [12] 1139 	setb	_P3_4
      00027D 85*02 82         [24] 1140 	mov	dpl,_lcd_address
      000280 85*03 83         [24] 1141 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1142 	mov	a,#0x30
      000285 F0               [24] 1143 	movx	@dptr,a
                                   1144 ;	assignBit
      000286 C2 B4            [12] 1145 	clr	_P3_4
                                   1146 ;	ecen4330_lcd_v3.c:210: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75*00 AA         [24] 1147 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1148 	mov	dpl,#0xc7
      00028E 12r00r40         [24] 1149 	lcall	_writeRegister8
                                   1150 ;	ecen4330_lcd_v3.c:211: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75*00 88         [24] 1151 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1152 	mov	dpl,#0x36
      000297 12r00r40         [24] 1153 	lcall	_writeRegister8
                                   1154 ;	ecen4330_lcd_v3.c:212: write8Reg(ILI9341_PIXELFORMAT);
                                   1155 ;	assignBit
      00029A C2 B5            [12] 1156 	clr	_P3_5
                                   1157 ;	assignBit
      00029C D2 B4            [12] 1158 	setb	_P3_4
      00029E 85*02 82         [24] 1159 	mov	dpl,_lcd_address
      0002A1 85*03 83         [24] 1160 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1161 	mov	a,#0x3a
      0002A6 F0               [24] 1162 	movx	@dptr,a
                                   1163 ;	assignBit
      0002A7 C2 B4            [12] 1164 	clr	_P3_4
                                   1165 ;	ecen4330_lcd_v3.c:213: write8Data(0x55);write8Data(0x00);
                                   1166 ;	assignBit
      0002A9 D2 B5            [12] 1167 	setb	_P3_5
                                   1168 ;	assignBit
      0002AB D2 B4            [12] 1169 	setb	_P3_4
      0002AD 85*02 82         [24] 1170 	mov	dpl,_lcd_address
      0002B0 85*03 83         [24] 1171 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1172 	mov	a,#0x55
      0002B5 F0               [24] 1173 	movx	@dptr,a
                                   1174 ;	assignBit
      0002B6 C2 B4            [12] 1175 	clr	_P3_4
                                   1176 ;	assignBit
      0002B8 D2 B5            [12] 1177 	setb	_P3_5
                                   1178 ;	assignBit
      0002BA D2 B4            [12] 1179 	setb	_P3_4
      0002BC 85*02 82         [24] 1180 	mov	dpl,_lcd_address
      0002BF 85*03 83         [24] 1181 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1182 	clr	a
      0002C3 F0               [24] 1183 	movx	@dptr,a
                                   1184 ;	assignBit
      0002C4 C2 B4            [12] 1185 	clr	_P3_4
                                   1186 ;	ecen4330_lcd_v3.c:214: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75*00 1B         [24] 1187 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75*01 00         [24] 1188 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1189 	mov	dptr,#0x00b1
      0002CF 12r00r60         [24] 1190 	lcall	_writeRegister16
                                   1191 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75*00 07         [24] 1192 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1193 	mov	dpl,#0xb7
      0002D8 12r00r40         [24] 1194 	lcall	_writeRegister8
                                   1195 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75*00 00         [24] 1196 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1197 	mov	dpl,#0x11
      0002E1 12r00r40         [24] 1198 	lcall	_writeRegister8
                                   1199 ;	ecen4330_lcd_v3.c:219: delay(150);
      0002E4 90 00 96         [24] 1200 	mov	dptr,#0x0096
      0002E7 12r00r10         [24] 1201 	lcall	_delay
                                   1202 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75*00 00         [24] 1203 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1204 	mov	dpl,#0x29
      0002F0 12r00r40         [24] 1205 	lcall	_writeRegister8
                                   1206 ;	ecen4330_lcd_v3.c:221: delay(500);
      0002F3 90 01 F4         [24] 1207 	mov	dptr,#0x01f4
      0002F6 12r00r10         [24] 1208 	lcall	_delay
                                   1209 ;	ecen4330_lcd_v3.c:222: setAddress(0,0,_width-1,_height-1);
      0002F9 AE*16            [24] 1210 	mov	r6,__width
      0002FB AF*17            [24] 1211 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1212 	dec	r6
      0002FE BE FF 01         [24] 1213 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1214 	dec	r7
      000302                       1215 00103$:
      000302 8E*02            [24] 1216 	mov	_setAddress_PARM_3,r6
      000304 8F*03            [24] 1217 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE*18            [24] 1218 	mov	r6,__height
      000308 AF*19            [24] 1219 	mov	r7,(__height + 1)
      00030A 1E               [12] 1220 	dec	r6
      00030B BE FF 01         [24] 1221 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1222 	dec	r7
      00030F                       1223 00104$:
      00030F 8E*04            [24] 1224 	mov	_setAddress_PARM_4,r6
      000311 8F*05            [24] 1225 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1226 	clr	a
      000314 F5*00            [12] 1227 	mov	_setAddress_PARM_2,a
      000316 F5*01            [12] 1228 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1229 	mov	dptr,#0x0000
                                   1230 ;	ecen4330_lcd_v3.c:223: }
      00031B 02r01r42         [24] 1231 	ljmp	_setAddress
                                   1232 ;------------------------------------------------------------
                                   1233 ;Allocation info for local variables in function 'drawPixel'
                                   1234 ;------------------------------------------------------------
                                   1235 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1236 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1237 ;x3                        Allocated to registers r6 r7 
                                   1238 ;------------------------------------------------------------
                                   1239 ;	ecen4330_lcd_v3.c:232: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1240 ;	-----------------------------------------
                                   1241 ;	 function drawPixel
                                   1242 ;	-----------------------------------------
      00031E                       1243 _drawPixel:
      00031E AE 82            [24] 1244 	mov	r6,dpl
      000320 AF 83            [24] 1245 	mov	r7,dph
                                   1246 ;	ecen4330_lcd_v3.c:234: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1247 	mov	ar4,r6
      000324 8F 05            [24] 1248 	mov	ar5,r7
      000326 0C               [12] 1249 	inc	r4
      000327 BC 00 01         [24] 1250 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1251 	inc	r5
      00032B                       1252 00103$:
      00032B 8C*02            [24] 1253 	mov	_setAddress_PARM_3,r4
      00032D 8D*03            [24] 1254 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC*1A            [24] 1255 	mov	r4,_drawPixel_PARM_2
      000331 AD*1B            [24] 1256 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1257 	inc	r4
      000334 BC 00 01         [24] 1258 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1259 	inc	r5
      000338                       1260 00104$:
      000338 8C*04            [24] 1261 	mov	_setAddress_PARM_4,r4
      00033A 8D*05            [24] 1262 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85*1A*00         [24] 1263 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85*1B*01         [24] 1264 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1265 	mov	dpl,r6
      000344 8F 83            [24] 1266 	mov	dph,r7
      000346 12r01r42         [24] 1267 	lcall	_setAddress
                                   1268 ;	ecen4330_lcd_v3.c:236: CD=0; write8(0x2C);
                                   1269 ;	assignBit
      000349 C2 B5            [12] 1270 	clr	_P3_5
                                   1271 ;	assignBit
      00034B D2 B4            [12] 1272 	setb	_P3_4
      00034D 85*02 82         [24] 1273 	mov	dpl,_lcd_address
      000350 85*03 83         [24] 1274 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1275 	mov	a,#0x2c
      000355 F0               [24] 1276 	movx	@dptr,a
                                   1277 ;	assignBit
      000356 C2 B4            [12] 1278 	clr	_P3_4
                                   1279 ;	ecen4330_lcd_v3.c:238: CD = 1;
                                   1280 ;	assignBit
      000358 D2 B5            [12] 1281 	setb	_P3_5
                                   1282 ;	ecen4330_lcd_v3.c:239: write8(color1>>8);write8(color1);
                                   1283 ;	assignBit
      00035A D2 B4            [12] 1284 	setb	_P3_4
      00035C 85*02 82         [24] 1285 	mov	dpl,_lcd_address
      00035F 85*03 83         [24] 1286 	mov	dph,(_lcd_address + 1)
      000362 E5*1D            [12] 1287 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1288 	movx	@dptr,a
                                   1289 ;	assignBit
      000365 C2 B4            [12] 1290 	clr	_P3_4
                                   1291 ;	assignBit
      000367 D2 B4            [12] 1292 	setb	_P3_4
      000369 85*02 82         [24] 1293 	mov	dpl,_lcd_address
      00036C 85*03 83         [24] 1294 	mov	dph,(_lcd_address + 1)
      00036F E5*1C            [12] 1295 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1296 	movx	@dptr,a
                                   1297 ;	assignBit
      000372 C2 B4            [12] 1298 	clr	_P3_4
                                   1299 ;	ecen4330_lcd_v3.c:240: }
      000374 22               [24] 1300 	ret
                                   1301 ;------------------------------------------------------------
                                   1302 ;Allocation info for local variables in function 'drawCircle'
                                   1303 ;------------------------------------------------------------
                                   1304 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1305 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1306 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1307 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1308 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1309 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1310 ;ddF_y                     Allocated to registers r2 r3 
                                   1311 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1312 ;y                         Allocated to registers r0 r1 
                                   1313 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1314 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1315 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1316 ;------------------------------------------------------------
                                   1317 ;	ecen4330_lcd_v3.c:250: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1318 ;	-----------------------------------------
                                   1319 ;	 function drawCircle
                                   1320 ;	-----------------------------------------
      000375                       1321 _drawCircle:
      000375 85 82*24         [24] 1322 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83*25         [24] 1323 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1324 ;	ecen4330_lcd_v3.c:251: int f = 1 - r;
      00037B 74 01            [12] 1325 	mov	a,#0x01
      00037D C3               [12] 1326 	clr	c
      00037E 95*20            [12] 1327 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1328 	mov	r4,a
      000381 E4               [12] 1329 	clr	a
      000382 95*21            [12] 1330 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1331 	mov	r5,a
      000385 8C*26            [24] 1332 	mov	_drawCircle_f_65536_104,r4
      000387 8D*27            [24] 1333 	mov	(_drawCircle_f_65536_104 + 1),r5
                                   1334 ;	ecen4330_lcd_v3.c:253: int ddF_y = -2 * r;
      000389 85*20*00         [24] 1335 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00038C 85*21*01         [24] 1336 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00038F 90 FF FE         [24] 1337 	mov	dptr,#0xfffe
      000392 12r00r00         [24] 1338 	lcall	__mulint
      000395 AA 82            [24] 1339 	mov	r2,dpl
      000397 AB 83            [24] 1340 	mov	r3,dph
                                   1341 ;	ecen4330_lcd_v3.c:255: int y = r;
      000399 A8*20            [24] 1342 	mov	r0,_drawCircle_PARM_3
      00039B A9*21            [24] 1343 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   1344 ;	ecen4330_lcd_v3.c:257: drawPixel(x0  , y0+r, color);
      00039D E5*20            [12] 1345 	mov	a,_drawCircle_PARM_3
      00039F 25*1E            [12] 1346 	add	a,_drawCircle_PARM_2
      0003A1 F5*1A            [12] 1347 	mov	_drawPixel_PARM_2,a
      0003A3 E5*21            [12] 1348 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A5 35*1F            [12] 1349 	addc	a,(_drawCircle_PARM_2 + 1)
      0003A7 F5*1B            [12] 1350 	mov	(_drawPixel_PARM_2 + 1),a
      0003A9 85*22*1C         [24] 1351 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003AC 85*23*1D         [24] 1352 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003AF 85*24 82         [24] 1353 	mov	dpl,_drawCircle_x0_65536_103
      0003B2 85*25 83         [24] 1354 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B5 C0 03            [24] 1355 	push	ar3
      0003B7 C0 02            [24] 1356 	push	ar2
      0003B9 C0 01            [24] 1357 	push	ar1
      0003BB C0 00            [24] 1358 	push	ar0
      0003BD 12r03r1E         [24] 1359 	lcall	_drawPixel
                                   1360 ;	ecen4330_lcd_v3.c:258: drawPixel(x0  , y0-r, color);
      0003C0 E5*1E            [12] 1361 	mov	a,_drawCircle_PARM_2
      0003C2 C3               [12] 1362 	clr	c
      0003C3 95*20            [12] 1363 	subb	a,_drawCircle_PARM_3
      0003C5 F5*1A            [12] 1364 	mov	_drawPixel_PARM_2,a
      0003C7 E5*1F            [12] 1365 	mov	a,(_drawCircle_PARM_2 + 1)
      0003C9 95*21            [12] 1366 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CB F5*1B            [12] 1367 	mov	(_drawPixel_PARM_2 + 1),a
      0003CD 85*22*1C         [24] 1368 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D0 85*23*1D         [24] 1369 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D3 85*24 82         [24] 1370 	mov	dpl,_drawCircle_x0_65536_103
      0003D6 85*25 83         [24] 1371 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003D9 12r03r1E         [24] 1372 	lcall	_drawPixel
                                   1373 ;	ecen4330_lcd_v3.c:259: drawPixel(x0+r, y0  , color);
      0003DC E5*20            [12] 1374 	mov	a,_drawCircle_PARM_3
      0003DE 25*24            [12] 1375 	add	a,_drawCircle_x0_65536_103
      0003E0 F5 82            [12] 1376 	mov	dpl,a
      0003E2 E5*21            [12] 1377 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E4 35*25            [12] 1378 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003E6 F5 83            [12] 1379 	mov	dph,a
      0003E8 85*1E*1A         [24] 1380 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EB 85*1F*1B         [24] 1381 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003EE 85*22*1C         [24] 1382 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F1 85*23*1D         [24] 1383 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F4 12r03r1E         [24] 1384 	lcall	_drawPixel
                                   1385 ;	ecen4330_lcd_v3.c:260: drawPixel(x0-r, y0  , color);
      0003F7 E5*24            [12] 1386 	mov	a,_drawCircle_x0_65536_103
      0003F9 C3               [12] 1387 	clr	c
      0003FA 95*20            [12] 1388 	subb	a,_drawCircle_PARM_3
      0003FC F5 82            [12] 1389 	mov	dpl,a
      0003FE E5*25            [12] 1390 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000400 95*21            [12] 1391 	subb	a,(_drawCircle_PARM_3 + 1)
      000402 F5 83            [12] 1392 	mov	dph,a
      000404 85*1E*1A         [24] 1393 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000407 85*1F*1B         [24] 1394 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040A 85*22*1C         [24] 1395 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00040D 85*23*1D         [24] 1396 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000410 12r03r1E         [24] 1397 	lcall	_drawPixel
      000413 D0 00            [24] 1398 	pop	ar0
      000415 D0 01            [24] 1399 	pop	ar1
      000417 D0 02            [24] 1400 	pop	ar2
      000419 D0 03            [24] 1401 	pop	ar3
                                   1402 ;	ecen4330_lcd_v3.c:262: while (x<y) {
      00041B E4               [12] 1403 	clr	a
      00041C F5*2A            [12] 1404 	mov	_drawCircle_x_65536_104,a
      00041E F5*2B            [12] 1405 	mov	(_drawCircle_x_65536_104 + 1),a
      000420 75*28 01         [24] 1406 	mov	_drawCircle_ddF_x_65536_104,#0x01
                                   1407 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_104 + 1),#0x00
      000423 F5*29            [12] 1408 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
      000425                       1409 00103$:
      000425 C3               [12] 1410 	clr	c
      000426 E5*2A            [12] 1411 	mov	a,_drawCircle_x_65536_104
      000428 98               [12] 1412 	subb	a,r0
      000429 E5*2B            [12] 1413 	mov	a,(_drawCircle_x_65536_104 + 1)
      00042B 64 80            [12] 1414 	xrl	a,#0x80
      00042D 89 F0            [24] 1415 	mov	b,r1
      00042F 63 F0 80         [24] 1416 	xrl	b,#0x80
      000432 95 F0            [12] 1417 	subb	a,b
      000434 40 01            [24] 1418 	jc	00121$
      000436 22               [24] 1419 	ret
      000437                       1420 00121$:
                                   1421 ;	ecen4330_lcd_v3.c:263: if (f >= 0) {
      000437 E5*27            [12] 1422 	mov	a,(_drawCircle_f_65536_104 + 1)
      000439 20 E7 16         [24] 1423 	jb	acc.7,00102$
                                   1424 ;	ecen4330_lcd_v3.c:264: y--;
      00043C 18               [12] 1425 	dec	r0
      00043D B8 FF 01         [24] 1426 	cjne	r0,#0xff,00123$
      000440 19               [12] 1427 	dec	r1
      000441                       1428 00123$:
                                   1429 ;	ecen4330_lcd_v3.c:265: ddF_y += 2;
      000441 74 02            [12] 1430 	mov	a,#0x02
      000443 2A               [12] 1431 	add	a,r2
      000444 FA               [12] 1432 	mov	r2,a
      000445 E4               [12] 1433 	clr	a
      000446 3B               [12] 1434 	addc	a,r3
      000447 FB               [12] 1435 	mov	r3,a
                                   1436 ;	ecen4330_lcd_v3.c:266: f += ddF_y;
      000448 EA               [12] 1437 	mov	a,r2
      000449 25*26            [12] 1438 	add	a,_drawCircle_f_65536_104
      00044B F5*26            [12] 1439 	mov	_drawCircle_f_65536_104,a
      00044D EB               [12] 1440 	mov	a,r3
      00044E 35*27            [12] 1441 	addc	a,(_drawCircle_f_65536_104 + 1)
      000450 F5*27            [12] 1442 	mov	(_drawCircle_f_65536_104 + 1),a
      000452                       1443 00102$:
                                   1444 ;	ecen4330_lcd_v3.c:268: x++;
      000452 C0 02            [24] 1445 	push	ar2
      000454 C0 03            [24] 1446 	push	ar3
      000456 05*2A            [12] 1447 	inc	_drawCircle_x_65536_104
      000458 E4               [12] 1448 	clr	a
      000459 B5*2A 02         [24] 1449 	cjne	a,_drawCircle_x_65536_104,00124$
      00045C 05*2B            [12] 1450 	inc	(_drawCircle_x_65536_104 + 1)
      00045E                       1451 00124$:
                                   1452 ;	ecen4330_lcd_v3.c:269: ddF_x += 2;
      00045E 74 02            [12] 1453 	mov	a,#0x02
      000460 25*28            [12] 1454 	add	a,_drawCircle_ddF_x_65536_104
      000462 F5*28            [12] 1455 	mov	_drawCircle_ddF_x_65536_104,a
      000464 E4               [12] 1456 	clr	a
      000465 35*29            [12] 1457 	addc	a,(_drawCircle_ddF_x_65536_104 + 1)
      000467 F5*29            [12] 1458 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
                                   1459 ;	ecen4330_lcd_v3.c:270: f += ddF_x;
      000469 E5*28            [12] 1460 	mov	a,_drawCircle_ddF_x_65536_104
      00046B 25*26            [12] 1461 	add	a,_drawCircle_f_65536_104
      00046D F5*26            [12] 1462 	mov	_drawCircle_f_65536_104,a
      00046F E5*29            [12] 1463 	mov	a,(_drawCircle_ddF_x_65536_104 + 1)
      000471 35*27            [12] 1464 	addc	a,(_drawCircle_f_65536_104 + 1)
      000473 F5*27            [12] 1465 	mov	(_drawCircle_f_65536_104 + 1),a
                                   1466 ;	ecen4330_lcd_v3.c:272: drawPixel(x0 + x, y0 + y, color);
      000475 AC*24            [24] 1467 	mov	r4,_drawCircle_x0_65536_103
      000477 AD*25            [24] 1468 	mov	r5,(_drawCircle_x0_65536_103 + 1)
      000479 E5*2A            [12] 1469 	mov	a,_drawCircle_x_65536_104
      00047B 2C               [12] 1470 	add	a,r4
      00047C FE               [12] 1471 	mov	r6,a
      00047D E5*2B            [12] 1472 	mov	a,(_drawCircle_x_65536_104 + 1)
      00047F 3D               [12] 1473 	addc	a,r5
      000480 FF               [12] 1474 	mov	r7,a
      000481 8E*2C            [24] 1475 	mov	_drawCircle_sloc0_1_0,r6
      000483 8F*2D            [24] 1476 	mov	(_drawCircle_sloc0_1_0 + 1),r7
      000485 AA*1E            [24] 1477 	mov	r2,_drawCircle_PARM_2
      000487 AB*1F            [24] 1478 	mov	r3,(_drawCircle_PARM_2 + 1)
      000489 E8               [12] 1479 	mov	a,r0
      00048A 2A               [12] 1480 	add	a,r2
      00048B FE               [12] 1481 	mov	r6,a
      00048C E9               [12] 1482 	mov	a,r1
      00048D 3B               [12] 1483 	addc	a,r3
      00048E FF               [12] 1484 	mov	r7,a
      00048F 8E*2E            [24] 1485 	mov	_drawCircle_sloc1_1_0,r6
      000491 8F*2F            [24] 1486 	mov	(_drawCircle_sloc1_1_0 + 1),r7
      000493 85*2E*1A         [24] 1487 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      000496 85*2F*1B         [24] 1488 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      000499 85*22*1C         [24] 1489 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00049C 85*23*1D         [24] 1490 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00049F 85*2C 82         [24] 1491 	mov	dpl,_drawCircle_sloc0_1_0
      0004A2 85*2D 83         [24] 1492 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      0004A5 C0 05            [24] 1493 	push	ar5
      0004A7 C0 04            [24] 1494 	push	ar4
      0004A9 C0 03            [24] 1495 	push	ar3
      0004AB C0 02            [24] 1496 	push	ar2
      0004AD C0 01            [24] 1497 	push	ar1
      0004AF C0 00            [24] 1498 	push	ar0
      0004B1 12r03r1E         [24] 1499 	lcall	_drawPixel
      0004B4 D0 00            [24] 1500 	pop	ar0
      0004B6 D0 01            [24] 1501 	pop	ar1
      0004B8 D0 02            [24] 1502 	pop	ar2
      0004BA D0 03            [24] 1503 	pop	ar3
      0004BC D0 04            [24] 1504 	pop	ar4
      0004BE D0 05            [24] 1505 	pop	ar5
                                   1506 ;	ecen4330_lcd_v3.c:273: drawPixel(x0 - x, y0 + y, color);
      0004C0 EC               [12] 1507 	mov	a,r4
      0004C1 C3               [12] 1508 	clr	c
      0004C2 95*2A            [12] 1509 	subb	a,_drawCircle_x_65536_104
      0004C4 FE               [12] 1510 	mov	r6,a
      0004C5 ED               [12] 1511 	mov	a,r5
      0004C6 95*2B            [12] 1512 	subb	a,(_drawCircle_x_65536_104 + 1)
      0004C8 FF               [12] 1513 	mov	r7,a
      0004C9 8E*30            [24] 1514 	mov	_drawCircle_sloc2_1_0,r6
      0004CB 8F*31            [24] 1515 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      0004CD 85*2E*1A         [24] 1516 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      0004D0 85*2F*1B         [24] 1517 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      0004D3 85*22*1C         [24] 1518 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004D6 85*23*1D         [24] 1519 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004D9 85*30 82         [24] 1520 	mov	dpl,_drawCircle_sloc2_1_0
      0004DC 85*31 83         [24] 1521 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0004DF C0 05            [24] 1522 	push	ar5
      0004E1 C0 04            [24] 1523 	push	ar4
      0004E3 C0 03            [24] 1524 	push	ar3
      0004E5 C0 02            [24] 1525 	push	ar2
      0004E7 C0 01            [24] 1526 	push	ar1
      0004E9 C0 00            [24] 1527 	push	ar0
      0004EB 12r03r1E         [24] 1528 	lcall	_drawPixel
      0004EE D0 00            [24] 1529 	pop	ar0
      0004F0 D0 01            [24] 1530 	pop	ar1
      0004F2 D0 02            [24] 1531 	pop	ar2
      0004F4 D0 03            [24] 1532 	pop	ar3
      0004F6 D0 04            [24] 1533 	pop	ar4
      0004F8 D0 05            [24] 1534 	pop	ar5
                                   1535 ;	ecen4330_lcd_v3.c:274: drawPixel(x0 + x, y0 - y, color);
      0004FA EA               [12] 1536 	mov	a,r2
      0004FB C3               [12] 1537 	clr	c
      0004FC 98               [12] 1538 	subb	a,r0
      0004FD FE               [12] 1539 	mov	r6,a
      0004FE EB               [12] 1540 	mov	a,r3
      0004FF 99               [12] 1541 	subb	a,r1
      000500 FF               [12] 1542 	mov	r7,a
      000501 8E*1A            [24] 1543 	mov	_drawPixel_PARM_2,r6
      000503 8F*1B            [24] 1544 	mov	(_drawPixel_PARM_2 + 1),r7
      000505 85*22*1C         [24] 1545 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000508 85*23*1D         [24] 1546 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00050B 85*2C 82         [24] 1547 	mov	dpl,_drawCircle_sloc0_1_0
      00050E 85*2D 83         [24] 1548 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      000511 C0 07            [24] 1549 	push	ar7
      000513 C0 06            [24] 1550 	push	ar6
      000515 C0 05            [24] 1551 	push	ar5
      000517 C0 04            [24] 1552 	push	ar4
      000519 C0 03            [24] 1553 	push	ar3
      00051B C0 02            [24] 1554 	push	ar2
      00051D C0 01            [24] 1555 	push	ar1
      00051F C0 00            [24] 1556 	push	ar0
      000521 12r03r1E         [24] 1557 	lcall	_drawPixel
      000524 D0 00            [24] 1558 	pop	ar0
      000526 D0 01            [24] 1559 	pop	ar1
      000528 D0 02            [24] 1560 	pop	ar2
      00052A D0 03            [24] 1561 	pop	ar3
      00052C D0 04            [24] 1562 	pop	ar4
      00052E D0 05            [24] 1563 	pop	ar5
      000530 D0 06            [24] 1564 	pop	ar6
      000532 D0 07            [24] 1565 	pop	ar7
                                   1566 ;	ecen4330_lcd_v3.c:275: drawPixel(x0 - x, y0 - y, color);
      000534 8E*1A            [24] 1567 	mov	_drawPixel_PARM_2,r6
      000536 8F*1B            [24] 1568 	mov	(_drawPixel_PARM_2 + 1),r7
      000538 85*22*1C         [24] 1569 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00053B 85*23*1D         [24] 1570 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00053E 85*30 82         [24] 1571 	mov	dpl,_drawCircle_sloc2_1_0
      000541 85*31 83         [24] 1572 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000544 C0 05            [24] 1573 	push	ar5
      000546 C0 04            [24] 1574 	push	ar4
      000548 C0 03            [24] 1575 	push	ar3
      00054A C0 02            [24] 1576 	push	ar2
      00054C C0 01            [24] 1577 	push	ar1
      00054E C0 00            [24] 1578 	push	ar0
      000550 12r03r1E         [24] 1579 	lcall	_drawPixel
      000553 D0 00            [24] 1580 	pop	ar0
      000555 D0 01            [24] 1581 	pop	ar1
      000557 D0 02            [24] 1582 	pop	ar2
      000559 D0 03            [24] 1583 	pop	ar3
      00055B D0 04            [24] 1584 	pop	ar4
      00055D D0 05            [24] 1585 	pop	ar5
                                   1586 ;	ecen4330_lcd_v3.c:276: drawPixel(x0 + y, y0 + x, color);
      00055F E8               [12] 1587 	mov	a,r0
      000560 2C               [12] 1588 	add	a,r4
      000561 FE               [12] 1589 	mov	r6,a
      000562 E9               [12] 1590 	mov	a,r1
      000563 3D               [12] 1591 	addc	a,r5
      000564 FF               [12] 1592 	mov	r7,a
      000565 8E*30            [24] 1593 	mov	_drawCircle_sloc2_1_0,r6
      000567 8F*31            [24] 1594 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      000569 E5*2A            [12] 1595 	mov	a,_drawCircle_x_65536_104
      00056B 2A               [12] 1596 	add	a,r2
      00056C FE               [12] 1597 	mov	r6,a
      00056D E5*2B            [12] 1598 	mov	a,(_drawCircle_x_65536_104 + 1)
      00056F 3B               [12] 1599 	addc	a,r3
      000570 FF               [12] 1600 	mov	r7,a
      000571 8E*1A            [24] 1601 	mov	_drawPixel_PARM_2,r6
      000573 8F*1B            [24] 1602 	mov	(_drawPixel_PARM_2 + 1),r7
      000575 85*22*1C         [24] 1603 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000578 85*23*1D         [24] 1604 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00057B 85*30 82         [24] 1605 	mov	dpl,_drawCircle_sloc2_1_0
      00057E 85*31 83         [24] 1606 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000581 C0 07            [24] 1607 	push	ar7
      000583 C0 06            [24] 1608 	push	ar6
      000585 C0 05            [24] 1609 	push	ar5
      000587 C0 04            [24] 1610 	push	ar4
      000589 C0 03            [24] 1611 	push	ar3
      00058B C0 02            [24] 1612 	push	ar2
      00058D C0 01            [24] 1613 	push	ar1
      00058F C0 00            [24] 1614 	push	ar0
      000591 12r03r1E         [24] 1615 	lcall	_drawPixel
      000594 D0 00            [24] 1616 	pop	ar0
      000596 D0 01            [24] 1617 	pop	ar1
      000598 D0 02            [24] 1618 	pop	ar2
      00059A D0 03            [24] 1619 	pop	ar3
      00059C D0 04            [24] 1620 	pop	ar4
      00059E D0 05            [24] 1621 	pop	ar5
      0005A0 D0 06            [24] 1622 	pop	ar6
      0005A2 D0 07            [24] 1623 	pop	ar7
                                   1624 ;	ecen4330_lcd_v3.c:277: drawPixel(x0 - y, y0 + x, color);
      0005A4 EC               [12] 1625 	mov	a,r4
      0005A5 C3               [12] 1626 	clr	c
      0005A6 98               [12] 1627 	subb	a,r0
      0005A7 FC               [12] 1628 	mov	r4,a
      0005A8 ED               [12] 1629 	mov	a,r5
      0005A9 99               [12] 1630 	subb	a,r1
      0005AA FD               [12] 1631 	mov	r5,a
      0005AB 8E*1A            [24] 1632 	mov	_drawPixel_PARM_2,r6
      0005AD 8F*1B            [24] 1633 	mov	(_drawPixel_PARM_2 + 1),r7
      0005AF 85*22*1C         [24] 1634 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B2 85*23*1D         [24] 1635 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005B5 8C 82            [24] 1636 	mov	dpl,r4
      0005B7 8D 83            [24] 1637 	mov	dph,r5
      0005B9 C0 05            [24] 1638 	push	ar5
      0005BB C0 04            [24] 1639 	push	ar4
      0005BD C0 03            [24] 1640 	push	ar3
      0005BF C0 02            [24] 1641 	push	ar2
      0005C1 C0 01            [24] 1642 	push	ar1
      0005C3 C0 00            [24] 1643 	push	ar0
      0005C5 12r03r1E         [24] 1644 	lcall	_drawPixel
      0005C8 D0 00            [24] 1645 	pop	ar0
      0005CA D0 01            [24] 1646 	pop	ar1
      0005CC D0 02            [24] 1647 	pop	ar2
      0005CE D0 03            [24] 1648 	pop	ar3
                                   1649 ;	ecen4330_lcd_v3.c:278: drawPixel(x0 + y, y0 - x, color);
      0005D0 EA               [12] 1650 	mov	a,r2
      0005D1 C3               [12] 1651 	clr	c
      0005D2 95*2A            [12] 1652 	subb	a,_drawCircle_x_65536_104
      0005D4 FA               [12] 1653 	mov	r2,a
      0005D5 EB               [12] 1654 	mov	a,r3
      0005D6 95*2B            [12] 1655 	subb	a,(_drawCircle_x_65536_104 + 1)
      0005D8 FB               [12] 1656 	mov	r3,a
      0005D9 8A*1A            [24] 1657 	mov	_drawPixel_PARM_2,r2
      0005DB 8B*1B            [24] 1658 	mov	(_drawPixel_PARM_2 + 1),r3
      0005DD 85*22*1C         [24] 1659 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005E0 85*23*1D         [24] 1660 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005E3 85*30 82         [24] 1661 	mov	dpl,_drawCircle_sloc2_1_0
      0005E6 85*31 83         [24] 1662 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0005E9 C0 03            [24] 1663 	push	ar3
      0005EB C0 02            [24] 1664 	push	ar2
      0005ED C0 01            [24] 1665 	push	ar1
      0005EF C0 00            [24] 1666 	push	ar0
      0005F1 12r03r1E         [24] 1667 	lcall	_drawPixel
      0005F4 D0 00            [24] 1668 	pop	ar0
      0005F6 D0 01            [24] 1669 	pop	ar1
      0005F8 D0 02            [24] 1670 	pop	ar2
      0005FA D0 03            [24] 1671 	pop	ar3
      0005FC D0 04            [24] 1672 	pop	ar4
      0005FE D0 05            [24] 1673 	pop	ar5
                                   1674 ;	ecen4330_lcd_v3.c:279: drawPixel(x0 - y, y0 - x, color);
      000600 8A*1A            [24] 1675 	mov	_drawPixel_PARM_2,r2
      000602 8B*1B            [24] 1676 	mov	(_drawPixel_PARM_2 + 1),r3
      000604 85*22*1C         [24] 1677 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000607 85*23*1D         [24] 1678 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00060A 8C 82            [24] 1679 	mov	dpl,r4
      00060C 8D 83            [24] 1680 	mov	dph,r5
      00060E C0 03            [24] 1681 	push	ar3
      000610 C0 02            [24] 1682 	push	ar2
      000612 C0 01            [24] 1683 	push	ar1
      000614 C0 00            [24] 1684 	push	ar0
      000616 12r03r1E         [24] 1685 	lcall	_drawPixel
      000619 D0 00            [24] 1686 	pop	ar0
      00061B D0 01            [24] 1687 	pop	ar1
      00061D D0 02            [24] 1688 	pop	ar2
      00061F D0 03            [24] 1689 	pop	ar3
      000621 D0 03            [24] 1690 	pop	ar3
      000623 D0 02            [24] 1691 	pop	ar2
                                   1692 ;	ecen4330_lcd_v3.c:281: }
      000625 02r04r25         [24] 1693 	ljmp	00103$
                                   1694 ;------------------------------------------------------------
                                   1695 ;Allocation info for local variables in function 'testCircles'
                                   1696 ;------------------------------------------------------------
                                   1697 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1698 ;radius                    Allocated to registers r7 
                                   1699 ;x                         Allocated to registers r1 r2 
                                   1700 ;y                         Allocated to registers r0 r6 
                                   1701 ;r2                        Allocated to registers r3 r4 
                                   1702 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1703 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1704 ;------------------------------------------------------------
                                   1705 ;	ecen4330_lcd_v3.c:289: void testCircles (uint8_t radius, uint16_t color) {
                                   1706 ;	-----------------------------------------
                                   1707 ;	 function testCircles
                                   1708 ;	-----------------------------------------
      000628                       1709 _testCircles:
      000628 AF 82            [24] 1710 	mov	r7,dpl
                                   1711 ;	ecen4330_lcd_v3.c:290: int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00062A 8F 05            [24] 1712 	mov	ar5,r7
      00062C 7E 00            [12] 1713 	mov	r6,#0x00
      00062E ED               [12] 1714 	mov	a,r5
      00062F 2D               [12] 1715 	add	a,r5
      000630 FB               [12] 1716 	mov	r3,a
      000631 EE               [12] 1717 	mov	a,r6
      000632 33               [12] 1718 	rlc	a
      000633 FC               [12] 1719 	mov	r4,a
      000634 A9*16            [24] 1720 	mov	r1,__width
      000636 AA*17            [24] 1721 	mov	r2,(__width + 1)
      000638 ED               [12] 1722 	mov	a,r5
      000639 29               [12] 1723 	add	a,r1
      00063A F5*34            [12] 1724 	mov	_testCircles_w_65536_108,a
      00063C EE               [12] 1725 	mov	a,r6
      00063D 3A               [12] 1726 	addc	a,r2
      00063E F5*35            [12] 1727 	mov	(_testCircles_w_65536_108 + 1),a
      000640 A8*18            [24] 1728 	mov	r0,__height
      000642 AA*19            [24] 1729 	mov	r2,(__height + 1)
      000644 ED               [12] 1730 	mov	a,r5
      000645 28               [12] 1731 	add	a,r0
      000646 F5*36            [12] 1732 	mov	_testCircles_h_65536_108,a
      000648 EE               [12] 1733 	mov	a,r6
      000649 3A               [12] 1734 	addc	a,r2
      00064A F5*37            [12] 1735 	mov	(_testCircles_h_65536_108 + 1),a
                                   1736 ;	ecen4330_lcd_v3.c:292: for(x=0; x<w; x+=r2) {
      00064C 79 00            [12] 1737 	mov	r1,#0x00
      00064E 7A 00            [12] 1738 	mov	r2,#0x00
      000650                       1739 00107$:
      000650 C3               [12] 1740 	clr	c
      000651 E9               [12] 1741 	mov	a,r1
      000652 95*34            [12] 1742 	subb	a,_testCircles_w_65536_108
      000654 EA               [12] 1743 	mov	a,r2
      000655 64 80            [12] 1744 	xrl	a,#0x80
      000657 85*35 F0         [24] 1745 	mov	b,(_testCircles_w_65536_108 + 1)
      00065A 63 F0 80         [24] 1746 	xrl	b,#0x80
      00065D 95 F0            [12] 1747 	subb	a,b
      00065F 50 57            [24] 1748 	jnc	00109$
                                   1749 ;	ecen4330_lcd_v3.c:293: for(y=0; y<h; y+=r2) {
      000661 78 00            [12] 1750 	mov	r0,#0x00
      000663 7E 00            [12] 1751 	mov	r6,#0x00
      000665                       1752 00104$:
      000665 C3               [12] 1753 	clr	c
      000666 E8               [12] 1754 	mov	a,r0
      000667 95*36            [12] 1755 	subb	a,_testCircles_h_65536_108
      000669 EE               [12] 1756 	mov	a,r6
      00066A 64 80            [12] 1757 	xrl	a,#0x80
      00066C 85*37 F0         [24] 1758 	mov	b,(_testCircles_h_65536_108 + 1)
      00066F 63 F0 80         [24] 1759 	xrl	b,#0x80
      000672 95 F0            [12] 1760 	subb	a,b
      000674 50 3A            [24] 1761 	jnc	00108$
                                   1762 ;	ecen4330_lcd_v3.c:294: drawCircle(x, y, radius, color);
      000676 89 82            [24] 1763 	mov	dpl,r1
      000678 8A 83            [24] 1764 	mov	dph,r2
      00067A 88*1E            [24] 1765 	mov	_drawCircle_PARM_2,r0
      00067C 8E*1F            [24] 1766 	mov	(_drawCircle_PARM_2 + 1),r6
      00067E 8F*20            [24] 1767 	mov	_drawCircle_PARM_3,r7
      000680 75*21 00         [24] 1768 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000683 85*32*22         [24] 1769 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000686 85*33*23         [24] 1770 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000689 C0 07            [24] 1771 	push	ar7
      00068B C0 06            [24] 1772 	push	ar6
      00068D C0 04            [24] 1773 	push	ar4
      00068F C0 03            [24] 1774 	push	ar3
      000691 C0 02            [24] 1775 	push	ar2
      000693 C0 01            [24] 1776 	push	ar1
      000695 C0 00            [24] 1777 	push	ar0
      000697 12r03r75         [24] 1778 	lcall	_drawCircle
      00069A D0 00            [24] 1779 	pop	ar0
      00069C D0 01            [24] 1780 	pop	ar1
      00069E D0 02            [24] 1781 	pop	ar2
      0006A0 D0 03            [24] 1782 	pop	ar3
      0006A2 D0 04            [24] 1783 	pop	ar4
      0006A4 D0 06            [24] 1784 	pop	ar6
      0006A6 D0 07            [24] 1785 	pop	ar7
                                   1786 ;	ecen4330_lcd_v3.c:293: for(y=0; y<h; y+=r2) {
      0006A8 EB               [12] 1787 	mov	a,r3
      0006A9 28               [12] 1788 	add	a,r0
      0006AA F8               [12] 1789 	mov	r0,a
      0006AB EC               [12] 1790 	mov	a,r4
      0006AC 3E               [12] 1791 	addc	a,r6
      0006AD FE               [12] 1792 	mov	r6,a
      0006AE 80 B5            [24] 1793 	sjmp	00104$
      0006B0                       1794 00108$:
                                   1795 ;	ecen4330_lcd_v3.c:292: for(x=0; x<w; x+=r2) {
      0006B0 EB               [12] 1796 	mov	a,r3
      0006B1 29               [12] 1797 	add	a,r1
      0006B2 F9               [12] 1798 	mov	r1,a
      0006B3 EC               [12] 1799 	mov	a,r4
      0006B4 3A               [12] 1800 	addc	a,r2
      0006B5 FA               [12] 1801 	mov	r2,a
      0006B6 80 98            [24] 1802 	sjmp	00107$
      0006B8                       1803 00109$:
                                   1804 ;	ecen4330_lcd_v3.c:297: }
      0006B8 22               [24] 1805 	ret
                                   1806 ;------------------------------------------------------------
                                   1807 ;Allocation info for local variables in function 'fillRect'
                                   1808 ;------------------------------------------------------------
                                   1809 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1810 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1811 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1812 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1813 ;x                         Allocated to registers 
                                   1814 ;------------------------------------------------------------
                                   1815 ;	ecen4330_lcd_v3.c:299: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1816 ;	-----------------------------------------
                                   1817 ;	 function fillRect
                                   1818 ;	-----------------------------------------
      0006B9                       1819 _fillRect:
      0006B9 AE 82            [24] 1820 	mov	r6,dpl
      0006BB AF 83            [24] 1821 	mov	r7,dph
                                   1822 ;	ecen4330_lcd_v3.c:300: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0006BD 8E 04            [24] 1823 	mov	ar4,r6
      0006BF 8F 05            [24] 1824 	mov	ar5,r7
      0006C1 C3               [12] 1825 	clr	c
      0006C2 EC               [12] 1826 	mov	a,r4
      0006C3 94 F0            [12] 1827 	subb	a,#0xf0
      0006C5 ED               [12] 1828 	mov	a,r5
      0006C6 94 00            [12] 1829 	subb	a,#0x00
      0006C8 50 0D            [24] 1830 	jnc	00101$
      0006CA AC*38            [24] 1831 	mov	r4,_fillRect_PARM_2
      0006CC AD*39            [24] 1832 	mov	r5,(_fillRect_PARM_2 + 1)
      0006CE C3               [12] 1833 	clr	c
      0006CF EC               [12] 1834 	mov	a,r4
      0006D0 94 40            [12] 1835 	subb	a,#0x40
      0006D2 ED               [12] 1836 	mov	a,r5
      0006D3 94 01            [12] 1837 	subb	a,#0x01
      0006D5 40 01            [24] 1838 	jc	00102$
      0006D7                       1839 00101$:
                                   1840 ;	ecen4330_lcd_v3.c:302: return;
      0006D7 22               [24] 1841 	ret
      0006D8                       1842 00102$:
                                   1843 ;	ecen4330_lcd_v3.c:305: if ((x+w-1) >= TFTWIDTH)
      0006D8 E5*3A            [12] 1844 	mov	a,_fillRect_PARM_3
      0006DA 2E               [12] 1845 	add	a,r6
      0006DB FC               [12] 1846 	mov	r4,a
      0006DC E5*3B            [12] 1847 	mov	a,(_fillRect_PARM_3 + 1)
      0006DE 3F               [12] 1848 	addc	a,r7
      0006DF FD               [12] 1849 	mov	r5,a
      0006E0 1C               [12] 1850 	dec	r4
      0006E1 BC FF 01         [24] 1851 	cjne	r4,#0xff,00161$
      0006E4 1D               [12] 1852 	dec	r5
      0006E5                       1853 00161$:
      0006E5 C3               [12] 1854 	clr	c
      0006E6 EC               [12] 1855 	mov	a,r4
      0006E7 94 F0            [12] 1856 	subb	a,#0xf0
      0006E9 ED               [12] 1857 	mov	a,r5
      0006EA 94 00            [12] 1858 	subb	a,#0x00
      0006EC 40 0A            [24] 1859 	jc	00105$
                                   1860 ;	ecen4330_lcd_v3.c:307: w = TFTWIDTH-x;
      0006EE 74 F0            [12] 1861 	mov	a,#0xf0
      0006F0 C3               [12] 1862 	clr	c
      0006F1 9E               [12] 1863 	subb	a,r6
      0006F2 F5*3A            [12] 1864 	mov	_fillRect_PARM_3,a
      0006F4 E4               [12] 1865 	clr	a
      0006F5 9F               [12] 1866 	subb	a,r7
      0006F6 F5*3B            [12] 1867 	mov	(_fillRect_PARM_3 + 1),a
      0006F8                       1868 00105$:
                                   1869 ;	ecen4330_lcd_v3.c:310: if ((y+h-1) >= TFTHEIGHT)
      0006F8 E5*3C            [12] 1870 	mov	a,_fillRect_PARM_4
      0006FA 25*38            [12] 1871 	add	a,_fillRect_PARM_2
      0006FC FC               [12] 1872 	mov	r4,a
      0006FD E5*3D            [12] 1873 	mov	a,(_fillRect_PARM_4 + 1)
      0006FF 35*39            [12] 1874 	addc	a,(_fillRect_PARM_2 + 1)
      000701 FD               [12] 1875 	mov	r5,a
      000702 1C               [12] 1876 	dec	r4
      000703 BC FF 01         [24] 1877 	cjne	r4,#0xff,00163$
      000706 1D               [12] 1878 	dec	r5
      000707                       1879 00163$:
      000707 C3               [12] 1880 	clr	c
      000708 EC               [12] 1881 	mov	a,r4
      000709 94 40            [12] 1882 	subb	a,#0x40
      00070B ED               [12] 1883 	mov	a,r5
      00070C 94 01            [12] 1884 	subb	a,#0x01
      00070E 40 0D            [24] 1885 	jc	00107$
                                   1886 ;	ecen4330_lcd_v3.c:312: h = TFTHEIGHT-y;
      000710 74 40            [12] 1887 	mov	a,#0x40
      000712 C3               [12] 1888 	clr	c
      000713 95*38            [12] 1889 	subb	a,_fillRect_PARM_2
      000715 F5*3C            [12] 1890 	mov	_fillRect_PARM_4,a
      000717 74 01            [12] 1891 	mov	a,#0x01
      000719 95*39            [12] 1892 	subb	a,(_fillRect_PARM_2 + 1)
      00071B F5*3D            [12] 1893 	mov	(_fillRect_PARM_4 + 1),a
      00071D                       1894 00107$:
                                   1895 ;	ecen4330_lcd_v3.c:315: setAddress(x, y, x+w-1, y+h-1);
      00071D E5*3A            [12] 1896 	mov	a,_fillRect_PARM_3
      00071F 2E               [12] 1897 	add	a,r6
      000720 FC               [12] 1898 	mov	r4,a
      000721 E5*3B            [12] 1899 	mov	a,(_fillRect_PARM_3 + 1)
      000723 3F               [12] 1900 	addc	a,r7
      000724 FD               [12] 1901 	mov	r5,a
      000725 1C               [12] 1902 	dec	r4
      000726 BC FF 01         [24] 1903 	cjne	r4,#0xff,00165$
      000729 1D               [12] 1904 	dec	r5
      00072A                       1905 00165$:
      00072A 8C*02            [24] 1906 	mov	_setAddress_PARM_3,r4
      00072C 8D*03            [24] 1907 	mov	(_setAddress_PARM_3 + 1),r5
      00072E E5*3C            [12] 1908 	mov	a,_fillRect_PARM_4
      000730 25*38            [12] 1909 	add	a,_fillRect_PARM_2
      000732 FC               [12] 1910 	mov	r4,a
      000733 E5*3D            [12] 1911 	mov	a,(_fillRect_PARM_4 + 1)
      000735 35*39            [12] 1912 	addc	a,(_fillRect_PARM_2 + 1)
      000737 FD               [12] 1913 	mov	r5,a
      000738 1C               [12] 1914 	dec	r4
      000739 BC FF 01         [24] 1915 	cjne	r4,#0xff,00166$
      00073C 1D               [12] 1916 	dec	r5
      00073D                       1917 00166$:
      00073D 8C*04            [24] 1918 	mov	_setAddress_PARM_4,r4
      00073F 8D*05            [24] 1919 	mov	(_setAddress_PARM_4 + 1),r5
      000741 85*38*00         [24] 1920 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000744 85*39*01         [24] 1921 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000747 8E 82            [24] 1922 	mov	dpl,r6
      000749 8F 83            [24] 1923 	mov	dph,r7
      00074B 12r01r42         [24] 1924 	lcall	_setAddress
                                   1925 ;	ecen4330_lcd_v3.c:318: write8Reg(0x2C);
                                   1926 ;	assignBit
      00074E C2 B5            [12] 1927 	clr	_P3_5
                                   1928 ;	assignBit
      000750 D2 B4            [12] 1929 	setb	_P3_4
      000752 85*02 82         [24] 1930 	mov	dpl,_lcd_address
      000755 85*03 83         [24] 1931 	mov	dph,(_lcd_address + 1)
      000758 74 2C            [12] 1932 	mov	a,#0x2c
      00075A F0               [24] 1933 	movx	@dptr,a
                                   1934 ;	assignBit
      00075B C2 B4            [12] 1935 	clr	_P3_4
                                   1936 ;	ecen4330_lcd_v3.c:319: CD = 1;
                                   1937 ;	assignBit
      00075D D2 B5            [12] 1938 	setb	_P3_5
                                   1939 ;	ecen4330_lcd_v3.c:320: for(y=h; y>0; y--)
      00075F AF*3F            [24] 1940 	mov	r7,(_fillRect_PARM_5 + 1)
      000761 AD*3C            [24] 1941 	mov	r5,_fillRect_PARM_4
      000763 AE*3D            [24] 1942 	mov	r6,(_fillRect_PARM_4 + 1)
      000765                       1943 00114$:
      000765 ED               [12] 1944 	mov	a,r5
      000766 4E               [12] 1945 	orl	a,r6
      000767 60 30            [24] 1946 	jz	00116$
                                   1947 ;	ecen4330_lcd_v3.c:322: for(x=w; x>0; x--)
      000769 AB*3A            [24] 1948 	mov	r3,_fillRect_PARM_3
      00076B AC*3B            [24] 1949 	mov	r4,(_fillRect_PARM_3 + 1)
      00076D                       1950 00111$:
      00076D EB               [12] 1951 	mov	a,r3
      00076E 4C               [12] 1952 	orl	a,r4
      00076F 60 21            [24] 1953 	jz	00115$
                                   1954 ;	ecen4330_lcd_v3.c:325: write8(color>>8); write8(color);
                                   1955 ;	assignBit
      000771 D2 B4            [12] 1956 	setb	_P3_4
      000773 85*02 82         [24] 1957 	mov	dpl,_lcd_address
      000776 85*03 83         [24] 1958 	mov	dph,(_lcd_address + 1)
      000779 EF               [12] 1959 	mov	a,r7
      00077A F0               [24] 1960 	movx	@dptr,a
                                   1961 ;	assignBit
      00077B C2 B4            [12] 1962 	clr	_P3_4
                                   1963 ;	assignBit
      00077D D2 B4            [12] 1964 	setb	_P3_4
      00077F 85*02 82         [24] 1965 	mov	dpl,_lcd_address
      000782 85*03 83         [24] 1966 	mov	dph,(_lcd_address + 1)
      000785 E5*3E            [12] 1967 	mov	a,_fillRect_PARM_5
      000787 FA               [12] 1968 	mov	r2,a
      000788 F0               [24] 1969 	movx	@dptr,a
                                   1970 ;	assignBit
      000789 C2 B4            [12] 1971 	clr	_P3_4
                                   1972 ;	ecen4330_lcd_v3.c:322: for(x=w; x>0; x--)
      00078B 1B               [12] 1973 	dec	r3
      00078C BB FF 01         [24] 1974 	cjne	r3,#0xff,00169$
      00078F 1C               [12] 1975 	dec	r4
      000790                       1976 00169$:
      000790 80 DB            [24] 1977 	sjmp	00111$
      000792                       1978 00115$:
                                   1979 ;	ecen4330_lcd_v3.c:320: for(y=h; y>0; y--)
      000792 1D               [12] 1980 	dec	r5
      000793 BD FF 01         [24] 1981 	cjne	r5,#0xff,00170$
      000796 1E               [12] 1982 	dec	r6
      000797                       1983 00170$:
      000797 80 CC            [24] 1984 	sjmp	00114$
      000799                       1985 00116$:
                                   1986 ;	ecen4330_lcd_v3.c:329: }
      000799 22               [24] 1987 	ret
                                   1988 ;------------------------------------------------------------
                                   1989 ;Allocation info for local variables in function 'fillScreen'
                                   1990 ;------------------------------------------------------------
                                   1991 ;Color                     Allocated to registers r6 r7 
                                   1992 ;len                       Allocated to registers 
                                   1993 ;blocks                    Allocated to registers r4 r7 
                                   1994 ;i                         Allocated to registers r3 
                                   1995 ;hi                        Allocated to registers r5 
                                   1996 ;lo                        Allocated to registers r6 
                                   1997 ;------------------------------------------------------------
                                   1998 ;	ecen4330_lcd_v3.c:336: void fillScreen (uint16_t Color) {
                                   1999 ;	-----------------------------------------
                                   2000 ;	 function fillScreen
                                   2001 ;	-----------------------------------------
      00079A                       2002 _fillScreen:
      00079A AE 82            [24] 2003 	mov	r6,dpl
      00079C AF 83            [24] 2004 	mov	r7,dph
                                   2005 ;	ecen4330_lcd_v3.c:341: uint8_t  i, hi = Color >> 8,
      00079E 8F 05            [24] 2006 	mov	ar5,r7
                                   2007 ;	ecen4330_lcd_v3.c:342: lo = Color;
                                   2008 ;	ecen4330_lcd_v3.c:345: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007A0 E4               [12] 2009 	clr	a
      0007A1 F5*00            [12] 2010 	mov	_setAddress_PARM_2,a
      0007A3 F5*01            [12] 2011 	mov	(_setAddress_PARM_2 + 1),a
      0007A5 75*02 EF         [24] 2012 	mov	_setAddress_PARM_3,#0xef
                                   2013 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007A8 F5*03            [12] 2014 	mov	(_setAddress_PARM_3 + 1),a
      0007AA 75*04 3F         [24] 2015 	mov	_setAddress_PARM_4,#0x3f
      0007AD 75*05 01         [24] 2016 	mov	(_setAddress_PARM_4 + 1),#0x01
      0007B0 90 00 00         [24] 2017 	mov	dptr,#0x0000
      0007B3 C0 06            [24] 2018 	push	ar6
      0007B5 C0 05            [24] 2019 	push	ar5
      0007B7 12r01r42         [24] 2020 	lcall	_setAddress
      0007BA D0 05            [24] 2021 	pop	ar5
      0007BC D0 06            [24] 2022 	pop	ar6
                                   2023 ;	ecen4330_lcd_v3.c:347: write8Reg(0x2C);
                                   2024 ;	assignBit
      0007BE C2 B5            [12] 2025 	clr	_P3_5
                                   2026 ;	assignBit
      0007C0 D2 B4            [12] 2027 	setb	_P3_4
      0007C2 85*02 82         [24] 2028 	mov	dpl,_lcd_address
      0007C5 85*03 83         [24] 2029 	mov	dph,(_lcd_address + 1)
      0007C8 74 2C            [12] 2030 	mov	a,#0x2c
      0007CA F0               [24] 2031 	movx	@dptr,a
                                   2032 ;	assignBit
      0007CB C2 B4            [12] 2033 	clr	_P3_4
                                   2034 ;	ecen4330_lcd_v3.c:348: CD = 1;
                                   2035 ;	assignBit
      0007CD D2 B5            [12] 2036 	setb	_P3_5
                                   2037 ;	ecen4330_lcd_v3.c:349: write8(hi); write8(lo);
                                   2038 ;	assignBit
      0007CF D2 B4            [12] 2039 	setb	_P3_4
      0007D1 85*02 82         [24] 2040 	mov	dpl,_lcd_address
      0007D4 85*03 83         [24] 2041 	mov	dph,(_lcd_address + 1)
      0007D7 ED               [12] 2042 	mov	a,r5
      0007D8 F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	assignBit
      0007D9 C2 B4            [12] 2045 	clr	_P3_4
                                   2046 ;	assignBit
      0007DB D2 B4            [12] 2047 	setb	_P3_4
      0007DD 85*02 82         [24] 2048 	mov	dpl,_lcd_address
      0007E0 85*03 83         [24] 2049 	mov	dph,(_lcd_address + 1)
      0007E3 EE               [12] 2050 	mov	a,r6
      0007E4 F0               [24] 2051 	movx	@dptr,a
                                   2052 ;	assignBit
      0007E5 C2 B4            [12] 2053 	clr	_P3_4
                                   2054 ;	ecen4330_lcd_v3.c:352: while (blocks--) {
      0007E7 7C B0            [12] 2055 	mov	r4,#0xb0
      0007E9 7F 04            [12] 2056 	mov	r7,#0x04
      0007EB                       2057 00104$:
      0007EB 8C 02            [24] 2058 	mov	ar2,r4
      0007ED 8F 03            [24] 2059 	mov	ar3,r7
      0007EF 1C               [12] 2060 	dec	r4
      0007F0 BC FF 01         [24] 2061 	cjne	r4,#0xff,00140$
      0007F3 1F               [12] 2062 	dec	r7
      0007F4                       2063 00140$:
      0007F4 EA               [12] 2064 	mov	a,r2
      0007F5 4B               [12] 2065 	orl	a,r3
      0007F6 60 66            [24] 2066 	jz	00106$
                                   2067 ;	ecen4330_lcd_v3.c:354: do {
      0007F8 7B 10            [12] 2068 	mov	r3,#0x10
      0007FA                       2069 00101$:
                                   2070 ;	ecen4330_lcd_v3.c:356: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2071 ;	assignBit
      0007FA D2 B4            [12] 2072 	setb	_P3_4
      0007FC 85*02 82         [24] 2073 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2074 	mov	dph,(_lcd_address + 1)
      000802 ED               [12] 2075 	mov	a,r5
      000803 F0               [24] 2076 	movx	@dptr,a
                                   2077 ;	assignBit
      000804 C2 B4            [12] 2078 	clr	_P3_4
                                   2079 ;	assignBit
      000806 D2 B4            [12] 2080 	setb	_P3_4
      000808 85*02 82         [24] 2081 	mov	dpl,_lcd_address
      00080B 85*03 83         [24] 2082 	mov	dph,(_lcd_address + 1)
      00080E EE               [12] 2083 	mov	a,r6
      00080F F0               [24] 2084 	movx	@dptr,a
                                   2085 ;	assignBit
      000810 C2 B4            [12] 2086 	clr	_P3_4
                                   2087 ;	assignBit
      000812 D2 B4            [12] 2088 	setb	_P3_4
      000814 85*02 82         [24] 2089 	mov	dpl,_lcd_address
      000817 85*03 83         [24] 2090 	mov	dph,(_lcd_address + 1)
      00081A ED               [12] 2091 	mov	a,r5
      00081B F0               [24] 2092 	movx	@dptr,a
                                   2093 ;	assignBit
      00081C C2 B4            [12] 2094 	clr	_P3_4
                                   2095 ;	assignBit
      00081E D2 B4            [12] 2096 	setb	_P3_4
      000820 85*02 82         [24] 2097 	mov	dpl,_lcd_address
      000823 85*03 83         [24] 2098 	mov	dph,(_lcd_address + 1)
      000826 EE               [12] 2099 	mov	a,r6
      000827 F0               [24] 2100 	movx	@dptr,a
                                   2101 ;	assignBit
      000828 C2 B4            [12] 2102 	clr	_P3_4
                                   2103 ;	ecen4330_lcd_v3.c:357: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2104 ;	assignBit
      00082A D2 B4            [12] 2105 	setb	_P3_4
      00082C 85*02 82         [24] 2106 	mov	dpl,_lcd_address
      00082F 85*03 83         [24] 2107 	mov	dph,(_lcd_address + 1)
      000832 ED               [12] 2108 	mov	a,r5
      000833 F0               [24] 2109 	movx	@dptr,a
                                   2110 ;	assignBit
      000834 C2 B4            [12] 2111 	clr	_P3_4
                                   2112 ;	assignBit
      000836 D2 B4            [12] 2113 	setb	_P3_4
      000838 85*02 82         [24] 2114 	mov	dpl,_lcd_address
      00083B 85*03 83         [24] 2115 	mov	dph,(_lcd_address + 1)
      00083E EE               [12] 2116 	mov	a,r6
      00083F F0               [24] 2117 	movx	@dptr,a
                                   2118 ;	assignBit
      000840 C2 B4            [12] 2119 	clr	_P3_4
                                   2120 ;	assignBit
      000842 D2 B4            [12] 2121 	setb	_P3_4
      000844 85*02 82         [24] 2122 	mov	dpl,_lcd_address
      000847 85*03 83         [24] 2123 	mov	dph,(_lcd_address + 1)
      00084A ED               [12] 2124 	mov	a,r5
      00084B F0               [24] 2125 	movx	@dptr,a
                                   2126 ;	assignBit
      00084C C2 B4            [12] 2127 	clr	_P3_4
                                   2128 ;	assignBit
      00084E D2 B4            [12] 2129 	setb	_P3_4
      000850 85*02 82         [24] 2130 	mov	dpl,_lcd_address
      000853 85*03 83         [24] 2131 	mov	dph,(_lcd_address + 1)
      000856 EE               [12] 2132 	mov	a,r6
      000857 F0               [24] 2133 	movx	@dptr,a
                                   2134 ;	assignBit
      000858 C2 B4            [12] 2135 	clr	_P3_4
                                   2136 ;	ecen4330_lcd_v3.c:358: } while(--i);
      00085A DB 9E            [24] 2137 	djnz	r3,00101$
      00085C 80 8D            [24] 2138 	sjmp	00104$
      00085E                       2139 00106$:
                                   2140 ;	ecen4330_lcd_v3.c:360: for (i = (char)len & 63; i--; ) {
      00085E 7F 3F            [12] 2141 	mov	r7,#0x3f
      000860                       2142 00109$:
      000860 8F 04            [24] 2143 	mov	ar4,r7
      000862 1F               [12] 2144 	dec	r7
      000863 EC               [12] 2145 	mov	a,r4
      000864 60 1A            [24] 2146 	jz	00111$
                                   2147 ;	ecen4330_lcd_v3.c:362: write8(hi); write8(lo);
                                   2148 ;	assignBit
      000866 D2 B4            [12] 2149 	setb	_P3_4
      000868 85*02 82         [24] 2150 	mov	dpl,_lcd_address
      00086B 85*03 83         [24] 2151 	mov	dph,(_lcd_address + 1)
      00086E ED               [12] 2152 	mov	a,r5
      00086F F0               [24] 2153 	movx	@dptr,a
                                   2154 ;	assignBit
      000870 C2 B4            [12] 2155 	clr	_P3_4
                                   2156 ;	assignBit
      000872 D2 B4            [12] 2157 	setb	_P3_4
      000874 85*02 82         [24] 2158 	mov	dpl,_lcd_address
      000877 85*03 83         [24] 2159 	mov	dph,(_lcd_address + 1)
      00087A EE               [12] 2160 	mov	a,r6
      00087B F0               [24] 2161 	movx	@dptr,a
                                   2162 ;	assignBit
      00087C C2 B4            [12] 2163 	clr	_P3_4
      00087E 80 E0            [24] 2164 	sjmp	00109$
      000880                       2165 00111$:
                                   2166 ;	ecen4330_lcd_v3.c:365: }
      000880 22               [24] 2167 	ret
                                   2168 ;------------------------------------------------------------
                                   2169 ;Allocation info for local variables in function 'drawChar'
                                   2170 ;------------------------------------------------------------
                                   2171 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2172 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2173 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2174 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2175 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2176 ;x                         Allocated to registers r6 r7 
                                   2177 ;i                         Allocated with name '_drawChar_i_65537_149'
                                   2178 ;line                      Allocated with name '_drawChar_line_196609_151'
                                   2179 ;j                         Allocated with name '_drawChar_j_196610_154'
                                   2180 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2181 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2182 ;------------------------------------------------------------
                                   2183 ;	ecen4330_lcd_v3.c:376: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2184 ;	-----------------------------------------
                                   2185 ;	 function drawChar
                                   2186 ;	-----------------------------------------
      000881                       2187 _drawChar:
      000881 AE 82            [24] 2188 	mov	r6,dpl
      000883 AF 83            [24] 2189 	mov	r7,dph
                                   2190 ;	ecen4330_lcd_v3.c:377: if ((x >=TFTWIDTH) ||
      000885 C3               [12] 2191 	clr	c
      000886 EE               [12] 2192 	mov	a,r6
      000887 94 F0            [12] 2193 	subb	a,#0xf0
      000889 EF               [12] 2194 	mov	a,r7
      00088A 64 80            [12] 2195 	xrl	a,#0x80
      00088C 94 80            [12] 2196 	subb	a,#0x80
      00088E 50 67            [24] 2197 	jnc	00101$
                                   2198 ;	ecen4330_lcd_v3.c:378: (y >=TFTHEIGHT)           ||
      000890 AC*40            [24] 2199 	mov	r4,_drawChar_PARM_2
      000892 AD*41            [24] 2200 	mov	r5,(_drawChar_PARM_2 + 1)
      000894 C3               [12] 2201 	clr	c
      000895 EC               [12] 2202 	mov	a,r4
      000896 94 40            [12] 2203 	subb	a,#0x40
      000898 ED               [12] 2204 	mov	a,r5
      000899 64 80            [12] 2205 	xrl	a,#0x80
      00089B 94 81            [12] 2206 	subb	a,#0x81
      00089D 50 58            [24] 2207 	jnc	00101$
                                   2208 ;	ecen4330_lcd_v3.c:379: ((x + 6 * size - 1) < 0) ||
      00089F AA*47            [24] 2209 	mov	r2,_drawChar_PARM_6
      0008A1 7B 00            [12] 2210 	mov	r3,#0x00
      0008A3 8A*00            [24] 2211 	mov	__mulint_PARM_2,r2
      0008A5 8B*01            [24] 2212 	mov	(__mulint_PARM_2 + 1),r3
      0008A7 90 00 06         [24] 2213 	mov	dptr,#0x0006
      0008AA C0 07            [24] 2214 	push	ar7
      0008AC C0 06            [24] 2215 	push	ar6
      0008AE C0 05            [24] 2216 	push	ar5
      0008B0 C0 04            [24] 2217 	push	ar4
      0008B2 C0 03            [24] 2218 	push	ar3
      0008B4 C0 02            [24] 2219 	push	ar2
      0008B6 12r00r00         [24] 2220 	lcall	__mulint
      0008B9 A8 82            [24] 2221 	mov	r0,dpl
      0008BB A9 83            [24] 2222 	mov	r1,dph
      0008BD D0 02            [24] 2223 	pop	ar2
      0008BF D0 03            [24] 2224 	pop	ar3
      0008C1 D0 04            [24] 2225 	pop	ar4
      0008C3 D0 05            [24] 2226 	pop	ar5
      0008C5 D0 06            [24] 2227 	pop	ar6
      0008C7 D0 07            [24] 2228 	pop	ar7
      0008C9 E8               [12] 2229 	mov	a,r0
      0008CA 2E               [12] 2230 	add	a,r6
      0008CB F8               [12] 2231 	mov	r0,a
      0008CC E9               [12] 2232 	mov	a,r1
      0008CD 3F               [12] 2233 	addc	a,r7
      0008CE F9               [12] 2234 	mov	r1,a
      0008CF 18               [12] 2235 	dec	r0
      0008D0 B8 FF 01         [24] 2236 	cjne	r0,#0xff,00176$
      0008D3 19               [12] 2237 	dec	r1
      0008D4                       2238 00176$:
      0008D4 E9               [12] 2239 	mov	a,r1
      0008D5 20 E7 1F         [24] 2240 	jb	acc.7,00101$
                                   2241 ;	ecen4330_lcd_v3.c:380: ((y + 8 * size - 1) < 0))
      0008D8 EB               [12] 2242 	mov	a,r3
      0008D9 C4               [12] 2243 	swap	a
      0008DA 03               [12] 2244 	rr	a
      0008DB 54 F8            [12] 2245 	anl	a,#0xf8
      0008DD CA               [12] 2246 	xch	a,r2
      0008DE C4               [12] 2247 	swap	a
      0008DF 03               [12] 2248 	rr	a
      0008E0 CA               [12] 2249 	xch	a,r2
      0008E1 6A               [12] 2250 	xrl	a,r2
      0008E2 CA               [12] 2251 	xch	a,r2
      0008E3 54 F8            [12] 2252 	anl	a,#0xf8
      0008E5 CA               [12] 2253 	xch	a,r2
      0008E6 6A               [12] 2254 	xrl	a,r2
      0008E7 FB               [12] 2255 	mov	r3,a
      0008E8 EA               [12] 2256 	mov	a,r2
      0008E9 2C               [12] 2257 	add	a,r4
      0008EA FA               [12] 2258 	mov	r2,a
      0008EB EB               [12] 2259 	mov	a,r3
      0008EC 3D               [12] 2260 	addc	a,r5
      0008ED FB               [12] 2261 	mov	r3,a
      0008EE 1A               [12] 2262 	dec	r2
      0008EF BA FF 01         [24] 2263 	cjne	r2,#0xff,00178$
      0008F2 1B               [12] 2264 	dec	r3
      0008F3                       2265 00178$:
      0008F3 EB               [12] 2266 	mov	a,r3
      0008F4 30 E7 01         [24] 2267 	jnb	acc.7,00138$
      0008F7                       2268 00101$:
                                   2269 ;	ecen4330_lcd_v3.c:382: return;
      0008F7 22               [24] 2270 	ret
                                   2271 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      0008F8                       2272 00138$:
      0008F8 74 01            [12] 2273 	mov	a,#0x01
      0008FA B5*47 04         [24] 2274 	cjne	a,_drawChar_PARM_6,00180$
      0008FD 74 01            [12] 2275 	mov	a,#0x01
      0008FF 80 01            [24] 2276 	sjmp	00181$
      000901                       2277 00180$:
      000901 E4               [12] 2278 	clr	a
      000902                       2279 00181$:
      000902 FB               [12] 2280 	mov	r3,a
      000903 FA               [12] 2281 	mov	r2,a
      000904 E5*43            [12] 2282 	mov	a,_drawChar_PARM_4
      000906 B5*45 08         [24] 2283 	cjne	a,_drawChar_PARM_5,00182$
      000909 E5*44            [12] 2284 	mov	a,(_drawChar_PARM_4 + 1)
      00090B B5*46 03         [24] 2285 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      00090E D3               [12] 2286 	setb	c
      00090F 80 01            [24] 2287 	sjmp	00183$
      000911                       2288 00182$:
      000911 C3               [12] 2289 	clr	c
      000912                       2290 00183$:
      000912 92*00            [24] 2291 	mov	_drawChar_sloc0_1_0,c
      000914 75*48 00         [24] 2292 	mov	_drawChar_i_65537_149,#0x00
      000917                       2293 00124$:
                                   2294 ;	ecen4330_lcd_v3.c:391: if (i == 5)
      000917 74 05            [12] 2295 	mov	a,#0x05
      000919 B5*48 05         [24] 2296 	cjne	a,_drawChar_i_65537_149,00107$
                                   2297 ;	ecen4330_lcd_v3.c:393: line = 0x0;
      00091C 75*49 00         [24] 2298 	mov	_drawChar_line_196609_151,#0x00
      00091F 80 47            [24] 2299 	sjmp	00136$
      000921                       2300 00107$:
                                   2301 ;	ecen4330_lcd_v3.c:397: line = pgm_read_byte(font+(c*5)+i);
      000921 C0 02            [24] 2302 	push	ar2
      000923 85*42*00         [24] 2303 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000926 75*01 00         [24] 2304 	mov	(__mulint_PARM_2 + 1),#0x00
      000929 90 00 05         [24] 2305 	mov	dptr,#0x0005
      00092C C0 07            [24] 2306 	push	ar7
      00092E C0 06            [24] 2307 	push	ar6
      000930 C0 05            [24] 2308 	push	ar5
      000932 C0 04            [24] 2309 	push	ar4
      000934 C0 03            [24] 2310 	push	ar3
      000936 12r00r00         [24] 2311 	lcall	__mulint
      000939 A9 82            [24] 2312 	mov	r1,dpl
      00093B AA 83            [24] 2313 	mov	r2,dph
      00093D D0 03            [24] 2314 	pop	ar3
      00093F D0 04            [24] 2315 	pop	ar4
      000941 D0 05            [24] 2316 	pop	ar5
      000943 D0 06            [24] 2317 	pop	ar6
      000945 D0 07            [24] 2318 	pop	ar7
      000947 E9               [12] 2319 	mov	a,r1
      000948 24r00            [12] 2320 	add	a,#_font
      00094A F5*4B            [12] 2321 	mov	_drawChar_sloc1_1_0,a
      00094C EA               [12] 2322 	mov	a,r2
      00094D 34s00            [12] 2323 	addc	a,#(_font >> 8)
      00094F F5*4C            [12] 2324 	mov	(_drawChar_sloc1_1_0 + 1),a
      000951 E5*48            [12] 2325 	mov	a,_drawChar_i_65537_149
      000953 F9               [12] 2326 	mov	r1,a
      000954 33               [12] 2327 	rlc	a
      000955 95 E0            [12] 2328 	subb	a,acc
      000957 FA               [12] 2329 	mov	r2,a
      000958 E9               [12] 2330 	mov	a,r1
      000959 25*4B            [12] 2331 	add	a,_drawChar_sloc1_1_0
      00095B F5 82            [12] 2332 	mov	dpl,a
      00095D EA               [12] 2333 	mov	a,r2
      00095E 35*4C            [12] 2334 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000960 F5 83            [12] 2335 	mov	dph,a
      000962 E4               [12] 2336 	clr	a
      000963 93               [24] 2337 	movc	a,@a+dptr
      000964 F5*49            [12] 2338 	mov	_drawChar_line_196609_151,a
                                   2339 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000966 D0 02            [24] 2340 	pop	ar2
                                   2341 ;	ecen4330_lcd_v3.c:402: for (j = 0; j<8; j++)
      000968                       2342 00136$:
      000968 C2 D5            [12] 2343 	clr	F0
      00096A 85*47 F0         [24] 2344 	mov	b,_drawChar_PARM_6
      00096D E5*48            [12] 2345 	mov	a,_drawChar_i_65537_149
      00096F 30 E7 04         [24] 2346 	jnb	acc.7,00186$
      000972 B2 D5            [12] 2347 	cpl	F0
      000974 F4               [12] 2348 	cpl	a
      000975 04               [12] 2349 	inc	a
      000976                       2350 00186$:
      000976 A4               [48] 2351 	mul	ab
      000977 30 D5 0A         [24] 2352 	jnb	F0,00187$
      00097A F4               [12] 2353 	cpl	a
      00097B 24 01            [12] 2354 	add	a,#0x01
      00097D C5 F0            [12] 2355 	xch	a,b
      00097F F4               [12] 2356 	cpl	a
      000980 34 00            [12] 2357 	addc	a,#0x00
      000982 C5 F0            [12] 2358 	xch	a,b
      000984                       2359 00187$:
      000984 2E               [12] 2360 	add	a,r6
      000985 F5*4B            [12] 2361 	mov	_drawChar_sloc1_1_0,a
      000987 EF               [12] 2362 	mov	a,r7
      000988 35 F0            [12] 2363 	addc	a,b
      00098A F5*4C            [12] 2364 	mov	(_drawChar_sloc1_1_0 + 1),a
      00098C 85*4B*4D         [24] 2365 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      00098F 85*4C*4E         [24] 2366 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000992 75*4A 00         [24] 2367 	mov	_drawChar_j_196610_154,#0x00
      000995                       2368 00122$:
                                   2369 ;	ecen4330_lcd_v3.c:404: if (line & 0x1)
      000995 E5*49            [12] 2370 	mov	a,_drawChar_line_196609_151
      000997 20 E0 03         [24] 2371 	jb	acc.0,00188$
      00099A 02r0Ar42         [24] 2372 	ljmp	00118$
      00099D                       2373 00188$:
                                   2374 ;	ecen4330_lcd_v3.c:406: if (size == 1)
      00099D EB               [12] 2375 	mov	a,r3
      00099E 60 46            [24] 2376 	jz	00110$
                                   2377 ;	ecen4330_lcd_v3.c:408: drawPixel(x+i, y+j, color);
      0009A0 E5*48            [12] 2378 	mov	a,_drawChar_i_65537_149
      0009A2 F8               [12] 2379 	mov	r0,a
      0009A3 33               [12] 2380 	rlc	a
      0009A4 95 E0            [12] 2381 	subb	a,acc
      0009A6 F9               [12] 2382 	mov	r1,a
      0009A7 E8               [12] 2383 	mov	a,r0
      0009A8 2E               [12] 2384 	add	a,r6
      0009A9 F8               [12] 2385 	mov	r0,a
      0009AA E9               [12] 2386 	mov	a,r1
      0009AB 3F               [12] 2387 	addc	a,r7
      0009AC F9               [12] 2388 	mov	r1,a
      0009AD 88 82            [24] 2389 	mov	dpl,r0
      0009AF 89 83            [24] 2390 	mov	dph,r1
      0009B1 E5*4A            [12] 2391 	mov	a,_drawChar_j_196610_154
      0009B3 F8               [12] 2392 	mov	r0,a
      0009B4 33               [12] 2393 	rlc	a
      0009B5 95 E0            [12] 2394 	subb	a,acc
      0009B7 F9               [12] 2395 	mov	r1,a
      0009B8 E8               [12] 2396 	mov	a,r0
      0009B9 2C               [12] 2397 	add	a,r4
      0009BA F8               [12] 2398 	mov	r0,a
      0009BB E9               [12] 2399 	mov	a,r1
      0009BC 3D               [12] 2400 	addc	a,r5
      0009BD F9               [12] 2401 	mov	r1,a
      0009BE 88*1A            [24] 2402 	mov	_drawPixel_PARM_2,r0
      0009C0 89*1B            [24] 2403 	mov	(_drawPixel_PARM_2 + 1),r1
      0009C2 85*43*1C         [24] 2404 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009C5 85*44*1D         [24] 2405 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009C8 C0 07            [24] 2406 	push	ar7
      0009CA C0 06            [24] 2407 	push	ar6
      0009CC C0 05            [24] 2408 	push	ar5
      0009CE C0 04            [24] 2409 	push	ar4
      0009D0 C0 03            [24] 2410 	push	ar3
      0009D2 C0 02            [24] 2411 	push	ar2
      0009D4 12r03r1E         [24] 2412 	lcall	_drawPixel
      0009D7 D0 02            [24] 2413 	pop	ar2
      0009D9 D0 03            [24] 2414 	pop	ar3
      0009DB D0 04            [24] 2415 	pop	ar4
      0009DD D0 05            [24] 2416 	pop	ar5
      0009DF D0 06            [24] 2417 	pop	ar6
      0009E1 D0 07            [24] 2418 	pop	ar7
      0009E3 02r0ArE9         [24] 2419 	ljmp	00119$
      0009E6                       2420 00110$:
                                   2421 ;	ecen4330_lcd_v3.c:411: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009E6 85*4D 82         [24] 2422 	mov	dpl,_drawChar_sloc2_1_0
      0009E9 85*4E 83         [24] 2423 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      0009EC C2 D5            [12] 2424 	clr	F0
      0009EE 85*47 F0         [24] 2425 	mov	b,_drawChar_PARM_6
      0009F1 E5*4A            [12] 2426 	mov	a,_drawChar_j_196610_154
      0009F3 30 E7 04         [24] 2427 	jnb	acc.7,00190$
      0009F6 B2 D5            [12] 2428 	cpl	F0
      0009F8 F4               [12] 2429 	cpl	a
      0009F9 04               [12] 2430 	inc	a
      0009FA                       2431 00190$:
      0009FA A4               [48] 2432 	mul	ab
      0009FB 30 D5 0A         [24] 2433 	jnb	F0,00191$
      0009FE F4               [12] 2434 	cpl	a
      0009FF 24 01            [12] 2435 	add	a,#0x01
      000A01 C5 F0            [12] 2436 	xch	a,b
      000A03 F4               [12] 2437 	cpl	a
      000A04 34 00            [12] 2438 	addc	a,#0x00
      000A06 C5 F0            [12] 2439 	xch	a,b
      000A08                       2440 00191$:
      000A08 2C               [12] 2441 	add	a,r4
      000A09 F8               [12] 2442 	mov	r0,a
      000A0A ED               [12] 2443 	mov	a,r5
      000A0B 35 F0            [12] 2444 	addc	a,b
      000A0D F9               [12] 2445 	mov	r1,a
      000A0E 88*38            [24] 2446 	mov	_fillRect_PARM_2,r0
      000A10 89*39            [24] 2447 	mov	(_fillRect_PARM_2 + 1),r1
      000A12 A8*47            [24] 2448 	mov	r0,_drawChar_PARM_6
      000A14 79 00            [12] 2449 	mov	r1,#0x00
      000A16 88*3A            [24] 2450 	mov	_fillRect_PARM_3,r0
      000A18 89*3B            [24] 2451 	mov	(_fillRect_PARM_3 + 1),r1
      000A1A 88*3C            [24] 2452 	mov	_fillRect_PARM_4,r0
      000A1C 89*3D            [24] 2453 	mov	(_fillRect_PARM_4 + 1),r1
      000A1E 85*43*3E         [24] 2454 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A21 85*44*3F         [24] 2455 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A24 C0 07            [24] 2456 	push	ar7
      000A26 C0 06            [24] 2457 	push	ar6
      000A28 C0 05            [24] 2458 	push	ar5
      000A2A C0 04            [24] 2459 	push	ar4
      000A2C C0 03            [24] 2460 	push	ar3
      000A2E C0 02            [24] 2461 	push	ar2
      000A30 12r06rB9         [24] 2462 	lcall	_fillRect
      000A33 D0 02            [24] 2463 	pop	ar2
      000A35 D0 03            [24] 2464 	pop	ar3
      000A37 D0 04            [24] 2465 	pop	ar4
      000A39 D0 05            [24] 2466 	pop	ar5
      000A3B D0 06            [24] 2467 	pop	ar6
      000A3D D0 07            [24] 2468 	pop	ar7
      000A3F 02r0ArE9         [24] 2469 	ljmp	00119$
      000A42                       2470 00118$:
                                   2471 ;	ecen4330_lcd_v3.c:413: } else if (bg != color)
      000A42 30*00 03         [24] 2472 	jnb	_drawChar_sloc0_1_0,00192$
      000A45 02r0ArE9         [24] 2473 	ljmp	00119$
      000A48                       2474 00192$:
                                   2475 ;	ecen4330_lcd_v3.c:415: if (size == 1)
      000A48 EA               [12] 2476 	mov	a,r2
      000A49 60 45            [24] 2477 	jz	00113$
                                   2478 ;	ecen4330_lcd_v3.c:417: drawPixel(x+i, y+j, bg);
      000A4B E5*48            [12] 2479 	mov	a,_drawChar_i_65537_149
      000A4D F8               [12] 2480 	mov	r0,a
      000A4E 33               [12] 2481 	rlc	a
      000A4F 95 E0            [12] 2482 	subb	a,acc
      000A51 F9               [12] 2483 	mov	r1,a
      000A52 E8               [12] 2484 	mov	a,r0
      000A53 2E               [12] 2485 	add	a,r6
      000A54 F8               [12] 2486 	mov	r0,a
      000A55 E9               [12] 2487 	mov	a,r1
      000A56 3F               [12] 2488 	addc	a,r7
      000A57 F9               [12] 2489 	mov	r1,a
      000A58 88 82            [24] 2490 	mov	dpl,r0
      000A5A 89 83            [24] 2491 	mov	dph,r1
      000A5C E5*4A            [12] 2492 	mov	a,_drawChar_j_196610_154
      000A5E F8               [12] 2493 	mov	r0,a
      000A5F 33               [12] 2494 	rlc	a
      000A60 95 E0            [12] 2495 	subb	a,acc
      000A62 F9               [12] 2496 	mov	r1,a
      000A63 E8               [12] 2497 	mov	a,r0
      000A64 2C               [12] 2498 	add	a,r4
      000A65 F8               [12] 2499 	mov	r0,a
      000A66 E9               [12] 2500 	mov	a,r1
      000A67 3D               [12] 2501 	addc	a,r5
      000A68 F9               [12] 2502 	mov	r1,a
      000A69 88*1A            [24] 2503 	mov	_drawPixel_PARM_2,r0
      000A6B 89*1B            [24] 2504 	mov	(_drawPixel_PARM_2 + 1),r1
      000A6D 85*45*1C         [24] 2505 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A70 85*46*1D         [24] 2506 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A73 C0 07            [24] 2507 	push	ar7
      000A75 C0 06            [24] 2508 	push	ar6
      000A77 C0 05            [24] 2509 	push	ar5
      000A79 C0 04            [24] 2510 	push	ar4
      000A7B C0 03            [24] 2511 	push	ar3
      000A7D C0 02            [24] 2512 	push	ar2
      000A7F 12r03r1E         [24] 2513 	lcall	_drawPixel
      000A82 D0 02            [24] 2514 	pop	ar2
      000A84 D0 03            [24] 2515 	pop	ar3
      000A86 D0 04            [24] 2516 	pop	ar4
      000A88 D0 05            [24] 2517 	pop	ar5
      000A8A D0 06            [24] 2518 	pop	ar6
      000A8C D0 07            [24] 2519 	pop	ar7
      000A8E 80 59            [24] 2520 	sjmp	00119$
      000A90                       2521 00113$:
                                   2522 ;	ecen4330_lcd_v3.c:421: fillRect(x+i*size, y+j*size, size, size, bg);
      000A90 85*4B 82         [24] 2523 	mov	dpl,_drawChar_sloc1_1_0
      000A93 85*4C 83         [24] 2524 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000A96 C2 D5            [12] 2525 	clr	F0
      000A98 85*47 F0         [24] 2526 	mov	b,_drawChar_PARM_6
      000A9B E5*4A            [12] 2527 	mov	a,_drawChar_j_196610_154
      000A9D 30 E7 04         [24] 2528 	jnb	acc.7,00194$
      000AA0 B2 D5            [12] 2529 	cpl	F0
      000AA2 F4               [12] 2530 	cpl	a
      000AA3 04               [12] 2531 	inc	a
      000AA4                       2532 00194$:
      000AA4 A4               [48] 2533 	mul	ab
      000AA5 30 D5 0A         [24] 2534 	jnb	F0,00195$
      000AA8 F4               [12] 2535 	cpl	a
      000AA9 24 01            [12] 2536 	add	a,#0x01
      000AAB C5 F0            [12] 2537 	xch	a,b
      000AAD F4               [12] 2538 	cpl	a
      000AAE 34 00            [12] 2539 	addc	a,#0x00
      000AB0 C5 F0            [12] 2540 	xch	a,b
      000AB2                       2541 00195$:
      000AB2 2C               [12] 2542 	add	a,r4
      000AB3 F8               [12] 2543 	mov	r0,a
      000AB4 ED               [12] 2544 	mov	a,r5
      000AB5 35 F0            [12] 2545 	addc	a,b
      000AB7 F9               [12] 2546 	mov	r1,a
      000AB8 88*38            [24] 2547 	mov	_fillRect_PARM_2,r0
      000ABA 89*39            [24] 2548 	mov	(_fillRect_PARM_2 + 1),r1
      000ABC A8*47            [24] 2549 	mov	r0,_drawChar_PARM_6
      000ABE 79 00            [12] 2550 	mov	r1,#0x00
      000AC0 88*3A            [24] 2551 	mov	_fillRect_PARM_3,r0
      000AC2 89*3B            [24] 2552 	mov	(_fillRect_PARM_3 + 1),r1
      000AC4 88*3C            [24] 2553 	mov	_fillRect_PARM_4,r0
      000AC6 89*3D            [24] 2554 	mov	(_fillRect_PARM_4 + 1),r1
      000AC8 85*45*3E         [24] 2555 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000ACB 85*46*3F         [24] 2556 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000ACE C0 07            [24] 2557 	push	ar7
      000AD0 C0 06            [24] 2558 	push	ar6
      000AD2 C0 05            [24] 2559 	push	ar5
      000AD4 C0 04            [24] 2560 	push	ar4
      000AD6 C0 03            [24] 2561 	push	ar3
      000AD8 C0 02            [24] 2562 	push	ar2
      000ADA 12r06rB9         [24] 2563 	lcall	_fillRect
      000ADD D0 02            [24] 2564 	pop	ar2
      000ADF D0 03            [24] 2565 	pop	ar3
      000AE1 D0 04            [24] 2566 	pop	ar4
      000AE3 D0 05            [24] 2567 	pop	ar5
      000AE5 D0 06            [24] 2568 	pop	ar6
      000AE7 D0 07            [24] 2569 	pop	ar7
      000AE9                       2570 00119$:
                                   2571 ;	ecen4330_lcd_v3.c:425: line >>= 1;
      000AE9 E5*49            [12] 2572 	mov	a,_drawChar_line_196609_151
      000AEB C3               [12] 2573 	clr	c
      000AEC 13               [12] 2574 	rrc	a
      000AED F5*49            [12] 2575 	mov	_drawChar_line_196609_151,a
                                   2576 ;	ecen4330_lcd_v3.c:402: for (j = 0; j<8; j++)
      000AEF 05*4A            [12] 2577 	inc	_drawChar_j_196610_154
      000AF1 C3               [12] 2578 	clr	c
      000AF2 E5*4A            [12] 2579 	mov	a,_drawChar_j_196610_154
      000AF4 64 80            [12] 2580 	xrl	a,#0x80
      000AF6 94 88            [12] 2581 	subb	a,#0x88
      000AF8 50 03            [24] 2582 	jnc	00196$
      000AFA 02r09r95         [24] 2583 	ljmp	00122$
      000AFD                       2584 00196$:
                                   2585 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000AFD 05*48            [12] 2586 	inc	_drawChar_i_65537_149
      000AFF C3               [12] 2587 	clr	c
      000B00 E5*48            [12] 2588 	mov	a,_drawChar_i_65537_149
      000B02 64 80            [12] 2589 	xrl	a,#0x80
      000B04 94 86            [12] 2590 	subb	a,#0x86
      000B06 50 03            [24] 2591 	jnc	00197$
      000B08 02r09r17         [24] 2592 	ljmp	00124$
      000B0B                       2593 00197$:
                                   2594 ;	ecen4330_lcd_v3.c:429: }
      000B0B 22               [24] 2595 	ret
                                   2596 ;------------------------------------------------------------
                                   2597 ;Allocation info for local variables in function 'write'
                                   2598 ;------------------------------------------------------------
                                   2599 ;c                         Allocated to registers r7 
                                   2600 ;------------------------------------------------------------
                                   2601 ;	ecen4330_lcd_v3.c:436: void write (uint8_t c)
                                   2602 ;	-----------------------------------------
                                   2603 ;	 function write
                                   2604 ;	-----------------------------------------
      000B0C                       2605 _write:
      000B0C AF 82            [24] 2606 	mov	r7,dpl
                                   2607 ;	ecen4330_lcd_v3.c:438: if (c == '\n')
      000B0E BF 0A 26         [24] 2608 	cjne	r7,#0x0a,00105$
                                   2609 ;	ecen4330_lcd_v3.c:440: cursor_y += textsize*8;
      000B11 AD*10            [24] 2610 	mov	r5,_textsize
      000B13 E4               [12] 2611 	clr	a
      000B14 C4               [12] 2612 	swap	a
      000B15 03               [12] 2613 	rr	a
      000B16 54 F8            [12] 2614 	anl	a,#0xf8
      000B18 CD               [12] 2615 	xch	a,r5
      000B19 C4               [12] 2616 	swap	a
      000B1A 03               [12] 2617 	rr	a
      000B1B CD               [12] 2618 	xch	a,r5
      000B1C 6D               [12] 2619 	xrl	a,r5
      000B1D CD               [12] 2620 	xch	a,r5
      000B1E 54 F8            [12] 2621 	anl	a,#0xf8
      000B20 CD               [12] 2622 	xch	a,r5
      000B21 6D               [12] 2623 	xrl	a,r5
      000B22 FE               [12] 2624 	mov	r6,a
      000B23 AB*0E            [24] 2625 	mov	r3,_cursor_y
      000B25 AC*0F            [24] 2626 	mov	r4,(_cursor_y + 1)
      000B27 ED               [12] 2627 	mov	a,r5
      000B28 2B               [12] 2628 	add	a,r3
      000B29 FB               [12] 2629 	mov	r3,a
      000B2A EE               [12] 2630 	mov	a,r6
      000B2B 3C               [12] 2631 	addc	a,r4
      000B2C FC               [12] 2632 	mov	r4,a
      000B2D 8B*0E            [24] 2633 	mov	_cursor_y,r3
      000B2F 8C*0F            [24] 2634 	mov	(_cursor_y + 1),r4
                                   2635 ;	ecen4330_lcd_v3.c:441: cursor_x  = 0;
      000B31 E4               [12] 2636 	clr	a
      000B32 F5*0C            [12] 2637 	mov	_cursor_x,a
      000B34 F5*0D            [12] 2638 	mov	(_cursor_x + 1),a
      000B36 22               [24] 2639 	ret
      000B37                       2640 00105$:
                                   2641 ;	ecen4330_lcd_v3.c:443: else if (c == '\r')
      000B37 BF 0D 01         [24] 2642 	cjne	r7,#0x0d,00119$
      000B3A 22               [24] 2643 	ret
      000B3B                       2644 00119$:
                                   2645 ;	ecen4330_lcd_v3.c:448: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B3B 85*0E*40         [24] 2646 	mov	_drawChar_PARM_2,_cursor_y
      000B3E 85*0F*41         [24] 2647 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B41 8F*42            [24] 2648 	mov	_drawChar_PARM_3,r7
      000B43 85*12*43         [24] 2649 	mov	_drawChar_PARM_4,_textcolor
      000B46 85*13*44         [24] 2650 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B49 85*14*45         [24] 2651 	mov	_drawChar_PARM_5,_textbgcolor
      000B4C 85*15*46         [24] 2652 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B4F 85*10*47         [24] 2653 	mov	_drawChar_PARM_6,_textsize
      000B52 85*0C 82         [24] 2654 	mov	dpl,_cursor_x
      000B55 85*0D 83         [24] 2655 	mov	dph,(_cursor_x + 1)
      000B58 12r08r81         [24] 2656 	lcall	_drawChar
                                   2657 ;	ecen4330_lcd_v3.c:449: cursor_x += textsize*6;
      000B5B 85*10*00         [24] 2658 	mov	__mulint_PARM_2,_textsize
      000B5E 75*01 00         [24] 2659 	mov	(__mulint_PARM_2 + 1),#0x00
      000B61 90 00 06         [24] 2660 	mov	dptr,#0x0006
      000B64 12r00r00         [24] 2661 	lcall	__mulint
      000B67 AE 82            [24] 2662 	mov	r6,dpl
      000B69 AF 83            [24] 2663 	mov	r7,dph
      000B6B AC*0C            [24] 2664 	mov	r4,_cursor_x
      000B6D AD*0D            [24] 2665 	mov	r5,(_cursor_x + 1)
      000B6F EE               [12] 2666 	mov	a,r6
      000B70 2C               [12] 2667 	add	a,r4
      000B71 FC               [12] 2668 	mov	r4,a
      000B72 EF               [12] 2669 	mov	a,r7
      000B73 3D               [12] 2670 	addc	a,r5
      000B74 FD               [12] 2671 	mov	r5,a
      000B75 8C*0C            [24] 2672 	mov	_cursor_x,r4
      000B77 8D*0D            [24] 2673 	mov	(_cursor_x + 1),r5
                                   2674 ;	ecen4330_lcd_v3.c:451: }
      000B79 22               [24] 2675 	ret
                                   2676 ;------------------------------------------------------------
                                   2677 ;Allocation info for local variables in function 'LCD_string_write'
                                   2678 ;------------------------------------------------------------
                                   2679 ;str                       Allocated to registers r5 r6 r7 
                                   2680 ;i                         Allocated to registers r3 r4 
                                   2681 ;------------------------------------------------------------
                                   2682 ;	ecen4330_lcd_v3.c:458: void LCD_string_write (int8_t *str)
                                   2683 ;	-----------------------------------------
                                   2684 ;	 function LCD_string_write
                                   2685 ;	-----------------------------------------
      000B7A                       2686 _LCD_string_write:
      000B7A AD 82            [24] 2687 	mov	r5,dpl
      000B7C AE 83            [24] 2688 	mov	r6,dph
      000B7E AF F0            [24] 2689 	mov	r7,b
                                   2690 ;	ecen4330_lcd_v3.c:461: for (i=0;str[i]!=0;i++)
      000B80 7B 00            [12] 2691 	mov	r3,#0x00
      000B82 7C 00            [12] 2692 	mov	r4,#0x00
      000B84                       2693 00103$:
      000B84 EB               [12] 2694 	mov	a,r3
      000B85 2D               [12] 2695 	add	a,r5
      000B86 F8               [12] 2696 	mov	r0,a
      000B87 EC               [12] 2697 	mov	a,r4
      000B88 3E               [12] 2698 	addc	a,r6
      000B89 F9               [12] 2699 	mov	r1,a
      000B8A 8F 02            [24] 2700 	mov	ar2,r7
      000B8C 88 82            [24] 2701 	mov	dpl,r0
      000B8E 89 83            [24] 2702 	mov	dph,r1
      000B90 8A F0            [24] 2703 	mov	b,r2
      000B92 12r00r00         [24] 2704 	lcall	__gptrget
      000B95 FA               [12] 2705 	mov	r2,a
      000B96 60 20            [24] 2706 	jz	00105$
                                   2707 ;	ecen4330_lcd_v3.c:463: write(str[i]);
      000B98 8A 82            [24] 2708 	mov	dpl,r2
      000B9A C0 07            [24] 2709 	push	ar7
      000B9C C0 06            [24] 2710 	push	ar6
      000B9E C0 05            [24] 2711 	push	ar5
      000BA0 C0 04            [24] 2712 	push	ar4
      000BA2 C0 03            [24] 2713 	push	ar3
      000BA4 12r0Br0C         [24] 2714 	lcall	_write
      000BA7 D0 03            [24] 2715 	pop	ar3
      000BA9 D0 04            [24] 2716 	pop	ar4
      000BAB D0 05            [24] 2717 	pop	ar5
      000BAD D0 06            [24] 2718 	pop	ar6
      000BAF D0 07            [24] 2719 	pop	ar7
                                   2720 ;	ecen4330_lcd_v3.c:461: for (i=0;str[i]!=0;i++)
      000BB1 0B               [12] 2721 	inc	r3
      000BB2 BB 00 CF         [24] 2722 	cjne	r3,#0x00,00103$
      000BB5 0C               [12] 2723 	inc	r4
      000BB6 80 CC            [24] 2724 	sjmp	00103$
      000BB8                       2725 00105$:
                                   2726 ;	ecen4330_lcd_v3.c:465: }
      000BB8 22               [24] 2727 	ret
                                   2728 ;------------------------------------------------------------
                                   2729 ;Allocation info for local variables in function 'testRAM'
                                   2730 ;------------------------------------------------------------
                                   2731 ;d                         Allocated to registers r7 
                                   2732 ;i                         Allocated to registers r3 r4 r5 r6 
                                   2733 ;ram_address               Allocated to registers 
                                   2734 ;------------------------------------------------------------
                                   2735 ;	ecen4330_lcd_v3.c:472: void testRAM (uint8_t d) {
                                   2736 ;	-----------------------------------------
                                   2737 ;	 function testRAM
                                   2738 ;	-----------------------------------------
      000BB9                       2739 _testRAM:
      000BB9 AF 82            [24] 2740 	mov	r7,dpl
                                   2741 ;	ecen4330_lcd_v3.c:476: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BBB 7B 00            [12] 2742 	mov	r3,#0x00
      000BBD 7C 00            [12] 2743 	mov	r4,#0x00
      000BBF 7D 00            [12] 2744 	mov	r5,#0x00
      000BC1 7E 00            [12] 2745 	mov	r6,#0x00
      000BC3                       2746 00102$:
                                   2747 ;	ecen4330_lcd_v3.c:477: IOM = 0;
                                   2748 ;	assignBit
      000BC3 C2 B4            [12] 2749 	clr	_P3_4
                                   2750 ;	ecen4330_lcd_v3.c:478: ram_address = (uint8_t __xdata*)(i);
      000BC5 8B 82            [24] 2751 	mov	dpl,r3
      000BC7 8C 83            [24] 2752 	mov	dph,r4
                                   2753 ;	ecen4330_lcd_v3.c:479: *ram_address = d;
      000BC9 EF               [12] 2754 	mov	a,r7
      000BCA F0               [24] 2755 	movx	@dptr,a
                                   2756 ;	ecen4330_lcd_v3.c:480: IOM = 1;
                                   2757 ;	assignBit
      000BCB D2 B4            [12] 2758 	setb	_P3_4
                                   2759 ;	ecen4330_lcd_v3.c:476: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BCD 0B               [12] 2760 	inc	r3
      000BCE BB 00 09         [24] 2761 	cjne	r3,#0x00,00111$
      000BD1 0C               [12] 2762 	inc	r4
      000BD2 BC 00 05         [24] 2763 	cjne	r4,#0x00,00111$
      000BD5 0D               [12] 2764 	inc	r5
      000BD6 BD 00 01         [24] 2765 	cjne	r5,#0x00,00111$
      000BD9 0E               [12] 2766 	inc	r6
      000BDA                       2767 00111$:
      000BDA C3               [12] 2768 	clr	c
      000BDB EB               [12] 2769 	mov	a,r3
      000BDC 94 FF            [12] 2770 	subb	a,#0xff
      000BDE EC               [12] 2771 	mov	a,r4
      000BDF 94 FF            [12] 2772 	subb	a,#0xff
      000BE1 ED               [12] 2773 	mov	a,r5
      000BE2 94 00            [12] 2774 	subb	a,#0x00
      000BE4 EE               [12] 2775 	mov	a,r6
      000BE5 94 00            [12] 2776 	subb	a,#0x00
      000BE7 40 DA            [24] 2777 	jc	00102$
                                   2778 ;	ecen4330_lcd_v3.c:482: }
      000BE9 22               [24] 2779 	ret
                                   2780 ;------------------------------------------------------------
                                   2781 ;Allocation info for local variables in function 'freeType'
                                   2782 ;------------------------------------------------------------
                                   2783 ;count                     Allocated to registers r7 
                                   2784 ;d                         Allocated to registers 
                                   2785 ;------------------------------------------------------------
                                   2786 ;	ecen4330_lcd_v3.c:488: void freeType () {
                                   2787 ;	-----------------------------------------
                                   2788 ;	 function freeType
                                   2789 ;	-----------------------------------------
      000BEA                       2790 _freeType:
                                   2791 ;	ecen4330_lcd_v3.c:489: uint8_t count = 0;
      000BEA 7F 00            [12] 2792 	mov	r7,#0x00
                                   2793 ;	ecen4330_lcd_v3.c:491: while (1) {
      000BEC                       2794 00105$:
                                   2795 ;	ecen4330_lcd_v3.c:494: if (count == 8) {
      000BEC BF 08 0E         [24] 2796 	cjne	r7,#0x08,00102$
                                   2797 ;	ecen4330_lcd_v3.c:496: count = 0;
      000BEF 7F 00            [12] 2798 	mov	r7,#0x00
                                   2799 ;	ecen4330_lcd_v3.c:497: write(d);
      000BF1 75 82 0A         [24] 2800 	mov	dpl,#0x0a
      000BF4 C0 07            [24] 2801 	push	ar7
      000BF6 12r0Br0C         [24] 2802 	lcall	_write
      000BF9 D0 07            [24] 2803 	pop	ar7
      000BFB 80 0A            [24] 2804 	sjmp	00103$
      000BFD                       2805 00102$:
                                   2806 ;	ecen4330_lcd_v3.c:500: d = keyDetect();
      000BFD C0 07            [24] 2807 	push	ar7
      000BFF 12r0Cr0A         [24] 2808 	lcall	_keyDetect
                                   2809 ;	ecen4330_lcd_v3.c:501: write(d);
      000C02 12r0Br0C         [24] 2810 	lcall	_write
      000C05 D0 07            [24] 2811 	pop	ar7
      000C07                       2812 00103$:
                                   2813 ;	ecen4330_lcd_v3.c:504: count++;
      000C07 0F               [12] 2814 	inc	r7
                                   2815 ;	ecen4330_lcd_v3.c:506: }
      000C08 80 E2            [24] 2816 	sjmp	00105$
                                   2817 ;------------------------------------------------------------
                                   2818 ;Allocation info for local variables in function 'keyDetect'
                                   2819 ;------------------------------------------------------------
                                   2820 ;	ecen4330_lcd_v3.c:513: uint8_t keyDetect () {
                                   2821 ;	-----------------------------------------
                                   2822 ;	 function keyDetect
                                   2823 ;	-----------------------------------------
      000C0A                       2824 _keyDetect:
                                   2825 ;	ecen4330_lcd_v3.c:514: __KEYPAD_PORT__ = 0xF0;
      000C0A 75 90 F0         [24] 2826 	mov	_P1,#0xf0
                                   2827 ;	ecen4330_lcd_v3.c:515: do
      000C0D                       2828 00101$:
                                   2829 ;	ecen4330_lcd_v3.c:517: __KEYPAD_PORT__ = 0xF0;
      000C0D 75 90 F0         [24] 2830 	mov	_P1,#0xf0
                                   2831 ;	ecen4330_lcd_v3.c:518: colloc = __KEYPAD_PORT__;
      000C10 85 90*00         [24] 2832 	mov	_colloc,_P1
                                   2833 ;	ecen4330_lcd_v3.c:519: colloc&= 0xF0;
      000C13 53*00 F0         [24] 2834 	anl	_colloc,#0xf0
                                   2835 ;	ecen4330_lcd_v3.c:520: } while (colloc != 0xF0);
      000C16 74 F0            [12] 2836 	mov	a,#0xf0
      000C18 B5*00 F2         [24] 2837 	cjne	a,_colloc,00101$
                                   2838 ;	ecen4330_lcd_v3.c:524: do
      000C1B                       2839 00104$:
                                   2840 ;	ecen4330_lcd_v3.c:526: delay(20);
      000C1B 90 00 14         [24] 2841 	mov	dptr,#0x0014
      000C1E 12r00r10         [24] 2842 	lcall	_delay
                                   2843 ;	ecen4330_lcd_v3.c:527: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C21 E5 90            [12] 2844 	mov	a,_P1
      000C23 54 F0            [12] 2845 	anl	a,#0xf0
      000C25 F5*00            [12] 2846 	mov	_colloc,a
                                   2847 ;	ecen4330_lcd_v3.c:528: } while (colloc == 0xF0);
      000C27 74 F0            [12] 2848 	mov	a,#0xf0
      000C29 B5*00 02         [24] 2849 	cjne	a,_colloc,00178$
      000C2C 80 ED            [24] 2850 	sjmp	00104$
      000C2E                       2851 00178$:
                                   2852 ;	ecen4330_lcd_v3.c:530: delay(1);
      000C2E 90 00 01         [24] 2853 	mov	dptr,#0x0001
      000C31 12r00r10         [24] 2854 	lcall	_delay
                                   2855 ;	ecen4330_lcd_v3.c:531: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C34 E5 90            [12] 2856 	mov	a,_P1
      000C36 54 F0            [12] 2857 	anl	a,#0xf0
      000C38 F5*00            [12] 2858 	mov	_colloc,a
                                   2859 ;	ecen4330_lcd_v3.c:532: } while (colloc == 0xF0);
      000C3A 74 F0            [12] 2860 	mov	a,#0xf0
      000C3C B5*00 02         [24] 2861 	cjne	a,_colloc,00179$
      000C3F 80 DA            [24] 2862 	sjmp	00104$
      000C41                       2863 00179$:
                                   2864 ;	ecen4330_lcd_v3.c:534: while (1)
      000C41                       2865 00119$:
                                   2866 ;	ecen4330_lcd_v3.c:536: __KEYPAD_PORT__= 0xFE;
      000C41 75 90 FE         [24] 2867 	mov	_P1,#0xfe
                                   2868 ;	ecen4330_lcd_v3.c:537: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C44 E5 90            [12] 2869 	mov	a,_P1
      000C46 54 F0            [12] 2870 	anl	a,#0xf0
      000C48 F5*00            [12] 2871 	mov	_colloc,a
                                   2872 ;	ecen4330_lcd_v3.c:538: if (colloc != 0xF0)
      000C4A 74 F0            [12] 2873 	mov	a,#0xf0
      000C4C B5*00 02         [24] 2874 	cjne	a,_colloc,00180$
      000C4F 80 05            [24] 2875 	sjmp	00111$
      000C51                       2876 00180$:
                                   2877 ;	ecen4330_lcd_v3.c:540: rowloc = 0;
      000C51 75*01 00         [24] 2878 	mov	_rowloc,#0x00
                                   2879 ;	ecen4330_lcd_v3.c:541: break;
      000C54 80 3D            [24] 2880 	sjmp	00120$
      000C56                       2881 00111$:
                                   2882 ;	ecen4330_lcd_v3.c:544: __KEYPAD_PORT__ = 0xFD;
      000C56 75 90 FD         [24] 2883 	mov	_P1,#0xfd
                                   2884 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C59 E5 90            [12] 2885 	mov	a,_P1
      000C5B 54 F0            [12] 2886 	anl	a,#0xf0
      000C5D F5*00            [12] 2887 	mov	_colloc,a
                                   2888 ;	ecen4330_lcd_v3.c:546: if (colloc != 0xF0)
      000C5F 74 F0            [12] 2889 	mov	a,#0xf0
      000C61 B5*00 02         [24] 2890 	cjne	a,_colloc,00181$
      000C64 80 05            [24] 2891 	sjmp	00113$
      000C66                       2892 00181$:
                                   2893 ;	ecen4330_lcd_v3.c:548: rowloc = 1;
      000C66 75*01 01         [24] 2894 	mov	_rowloc,#0x01
                                   2895 ;	ecen4330_lcd_v3.c:549: break;
      000C69 80 28            [24] 2896 	sjmp	00120$
      000C6B                       2897 00113$:
                                   2898 ;	ecen4330_lcd_v3.c:552: __KEYPAD_PORT__ = 0xFB;
      000C6B 75 90 FB         [24] 2899 	mov	_P1,#0xfb
                                   2900 ;	ecen4330_lcd_v3.c:553: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C6E E5 90            [12] 2901 	mov	a,_P1
      000C70 54 F0            [12] 2902 	anl	a,#0xf0
      000C72 F5*00            [12] 2903 	mov	_colloc,a
                                   2904 ;	ecen4330_lcd_v3.c:554: if (colloc != 0xF0)
      000C74 74 F0            [12] 2905 	mov	a,#0xf0
      000C76 B5*00 02         [24] 2906 	cjne	a,_colloc,00182$
      000C79 80 05            [24] 2907 	sjmp	00115$
      000C7B                       2908 00182$:
                                   2909 ;	ecen4330_lcd_v3.c:556: rowloc = 2;
      000C7B 75*01 02         [24] 2910 	mov	_rowloc,#0x02
                                   2911 ;	ecen4330_lcd_v3.c:557: break;
      000C7E 80 13            [24] 2912 	sjmp	00120$
      000C80                       2913 00115$:
                                   2914 ;	ecen4330_lcd_v3.c:560: __KEYPAD_PORT__ = 0xF7;
      000C80 75 90 F7         [24] 2915 	mov	_P1,#0xf7
                                   2916 ;	ecen4330_lcd_v3.c:561: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C83 E5 90            [12] 2917 	mov	a,_P1
      000C85 54 F0            [12] 2918 	anl	a,#0xf0
      000C87 F5*00            [12] 2919 	mov	_colloc,a
                                   2920 ;	ecen4330_lcd_v3.c:562: if (colloc != 0xF0)
      000C89 74 F0            [12] 2921 	mov	a,#0xf0
      000C8B B5*00 02         [24] 2922 	cjne	a,_colloc,00183$
      000C8E 80 B1            [24] 2923 	sjmp	00119$
      000C90                       2924 00183$:
                                   2925 ;	ecen4330_lcd_v3.c:564: rowloc = 3;
      000C90 75*01 03         [24] 2926 	mov	_rowloc,#0x03
                                   2927 ;	ecen4330_lcd_v3.c:565: break;
      000C93                       2928 00120$:
                                   2929 ;	ecen4330_lcd_v3.c:569: if (colloc == 0xE0)
      000C93 74 E0            [12] 2930 	mov	a,#0xe0
      000C95 B5*00 15         [24] 2931 	cjne	a,_colloc,00128$
                                   2932 ;	ecen4330_lcd_v3.c:571: return (keypad[rowloc][0]);
      000C98 E5*01            [12] 2933 	mov	a,_rowloc
      000C9A 75 F0 04         [24] 2934 	mov	b,#0x04
      000C9D A4               [48] 2935 	mul	ab
      000C9E 24rFB            [12] 2936 	add	a,#_keypad
      000CA0 F5 82            [12] 2937 	mov	dpl,a
      000CA2 74s04            [12] 2938 	mov	a,#(_keypad >> 8)
      000CA4 35 F0            [12] 2939 	addc	a,b
      000CA6 F5 83            [12] 2940 	mov	dph,a
      000CA8 E4               [12] 2941 	clr	a
      000CA9 93               [24] 2942 	movc	a,@a+dptr
      000CAA F5 82            [12] 2943 	mov	dpl,a
      000CAC 22               [24] 2944 	ret
      000CAD                       2945 00128$:
                                   2946 ;	ecen4330_lcd_v3.c:573: else if (colloc == 0xD0)
      000CAD 74 D0            [12] 2947 	mov	a,#0xd0
      000CAF B5*00 18         [24] 2948 	cjne	a,_colloc,00125$
                                   2949 ;	ecen4330_lcd_v3.c:575: return (keypad[rowloc][1]);
      000CB2 E5*01            [12] 2950 	mov	a,_rowloc
      000CB4 75 F0 04         [24] 2951 	mov	b,#0x04
      000CB7 A4               [48] 2952 	mul	ab
      000CB8 24rFB            [12] 2953 	add	a,#_keypad
      000CBA FE               [12] 2954 	mov	r6,a
      000CBB 74s04            [12] 2955 	mov	a,#(_keypad >> 8)
      000CBD 35 F0            [12] 2956 	addc	a,b
      000CBF FF               [12] 2957 	mov	r7,a
      000CC0 8E 82            [24] 2958 	mov	dpl,r6
      000CC2 8F 83            [24] 2959 	mov	dph,r7
      000CC4 A3               [24] 2960 	inc	dptr
      000CC5 E4               [12] 2961 	clr	a
      000CC6 93               [24] 2962 	movc	a,@a+dptr
      000CC7 F5 82            [12] 2963 	mov	dpl,a
      000CC9 22               [24] 2964 	ret
      000CCA                       2965 00125$:
                                   2966 ;	ecen4330_lcd_v3.c:577: else if (colloc == 0xB0)
      000CCA 74 B0            [12] 2967 	mov	a,#0xb0
      000CCC B5*00 19         [24] 2968 	cjne	a,_colloc,00122$
                                   2969 ;	ecen4330_lcd_v3.c:579: return (keypad[rowloc][2]);
      000CCF E5*01            [12] 2970 	mov	a,_rowloc
      000CD1 75 F0 04         [24] 2971 	mov	b,#0x04
      000CD4 A4               [48] 2972 	mul	ab
      000CD5 24rFB            [12] 2973 	add	a,#_keypad
      000CD7 FE               [12] 2974 	mov	r6,a
      000CD8 74s04            [12] 2975 	mov	a,#(_keypad >> 8)
      000CDA 35 F0            [12] 2976 	addc	a,b
      000CDC FF               [12] 2977 	mov	r7,a
      000CDD 8E 82            [24] 2978 	mov	dpl,r6
      000CDF 8F 83            [24] 2979 	mov	dph,r7
      000CE1 A3               [24] 2980 	inc	dptr
      000CE2 A3               [24] 2981 	inc	dptr
      000CE3 E4               [12] 2982 	clr	a
      000CE4 93               [24] 2983 	movc	a,@a+dptr
      000CE5 F5 82            [12] 2984 	mov	dpl,a
      000CE7 22               [24] 2985 	ret
      000CE8                       2986 00122$:
                                   2987 ;	ecen4330_lcd_v3.c:583: return (keypad[rowloc][3]);
      000CE8 E5*01            [12] 2988 	mov	a,_rowloc
      000CEA 75 F0 04         [24] 2989 	mov	b,#0x04
      000CED A4               [48] 2990 	mul	ab
      000CEE 24rFB            [12] 2991 	add	a,#_keypad
      000CF0 FE               [12] 2992 	mov	r6,a
      000CF1 74s04            [12] 2993 	mov	a,#(_keypad >> 8)
      000CF3 35 F0            [12] 2994 	addc	a,b
      000CF5 FF               [12] 2995 	mov	r7,a
      000CF6 8E 82            [24] 2996 	mov	dpl,r6
      000CF8 8F 83            [24] 2997 	mov	dph,r7
      000CFA A3               [24] 2998 	inc	dptr
      000CFB A3               [24] 2999 	inc	dptr
      000CFC A3               [24] 3000 	inc	dptr
      000CFD E4               [12] 3001 	clr	a
      000CFE 93               [24] 3002 	movc	a,@a+dptr
                                   3003 ;	ecen4330_lcd_v3.c:585: }
      000CFF F5 82            [12] 3004 	mov	dpl,a
      000D01 22               [24] 3005 	ret
                                   3006 ;------------------------------------------------------------
                                   3007 ;Allocation info for local variables in function 'reverse'
                                   3008 ;------------------------------------------------------------
                                   3009 ;d                         Allocated to registers r7 
                                   3010 ;rev                       Allocated to registers r5 r6 
                                   3011 ;val                       Allocated to registers r1 r2 
                                   3012 ;------------------------------------------------------------
                                   3013 ;	ecen4330_lcd_v3.c:587: uint16_t reverse (uint8_t d) {
                                   3014 ;	-----------------------------------------
                                   3015 ;	 function reverse
                                   3016 ;	-----------------------------------------
      000D02                       3017 _reverse:
      000D02 AF 82            [24] 3018 	mov	r7,dpl
                                   3019 ;	ecen4330_lcd_v3.c:588: uint16_t rev = 0;
      000D04 7D 00            [12] 3020 	mov	r5,#0x00
      000D06 7E 00            [12] 3021 	mov	r6,#0x00
                                   3022 ;	ecen4330_lcd_v3.c:590: while (d >= 1) {
      000D08                       3023 00101$:
      000D08 BF 01 00         [24] 3024 	cjne	r7,#0x01,00114$
      000D0B                       3025 00114$:
      000D0B 40 5F            [24] 3026 	jc	00103$
                                   3027 ;	ecen4330_lcd_v3.c:592: val = d%10;
      000D0D 8F 03            [24] 3028 	mov	ar3,r7
      000D0F 7C 00            [12] 3029 	mov	r4,#0x00
      000D11 75*00 0A         [24] 3030 	mov	__modsint_PARM_2,#0x0a
                                   3031 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000D14 8C*01            [24] 3032 	mov	(__modsint_PARM_2 + 1),r4
      000D16 8B 82            [24] 3033 	mov	dpl,r3
      000D18 8C 83            [24] 3034 	mov	dph,r4
      000D1A C0 06            [24] 3035 	push	ar6
      000D1C C0 05            [24] 3036 	push	ar5
      000D1E C0 04            [24] 3037 	push	ar4
      000D20 C0 03            [24] 3038 	push	ar3
      000D22 12r00r00         [24] 3039 	lcall	__modsint
      000D25 A9 82            [24] 3040 	mov	r1,dpl
      000D27 AA 83            [24] 3041 	mov	r2,dph
      000D29 D0 03            [24] 3042 	pop	ar3
      000D2B D0 04            [24] 3043 	pop	ar4
                                   3044 ;	ecen4330_lcd_v3.c:593: d = d/10;
      000D2D 75*00 0A         [24] 3045 	mov	__divsint_PARM_2,#0x0a
      000D30 75*01 00         [24] 3046 	mov	(__divsint_PARM_2 + 1),#0x00
      000D33 8B 82            [24] 3047 	mov	dpl,r3
      000D35 8C 83            [24] 3048 	mov	dph,r4
      000D37 C0 02            [24] 3049 	push	ar2
      000D39 C0 01            [24] 3050 	push	ar1
      000D3B 12r00r00         [24] 3051 	lcall	__divsint
      000D3E AB 82            [24] 3052 	mov	r3,dpl
      000D40 D0 01            [24] 3053 	pop	ar1
      000D42 D0 02            [24] 3054 	pop	ar2
      000D44 D0 05            [24] 3055 	pop	ar5
      000D46 D0 06            [24] 3056 	pop	ar6
      000D48 8B 07            [24] 3057 	mov	ar7,r3
                                   3058 ;	ecen4330_lcd_v3.c:594: rev = rev * 10 + val;
      000D4A 8D*00            [24] 3059 	mov	__mulint_PARM_2,r5
      000D4C 8E*01            [24] 3060 	mov	(__mulint_PARM_2 + 1),r6
      000D4E 90 00 0A         [24] 3061 	mov	dptr,#0x000a
      000D51 C0 07            [24] 3062 	push	ar7
      000D53 C0 02            [24] 3063 	push	ar2
      000D55 C0 01            [24] 3064 	push	ar1
      000D57 12r00r00         [24] 3065 	lcall	__mulint
      000D5A AB 82            [24] 3066 	mov	r3,dpl
      000D5C AC 83            [24] 3067 	mov	r4,dph
      000D5E D0 01            [24] 3068 	pop	ar1
      000D60 D0 02            [24] 3069 	pop	ar2
      000D62 D0 07            [24] 3070 	pop	ar7
      000D64 E9               [12] 3071 	mov	a,r1
      000D65 2B               [12] 3072 	add	a,r3
      000D66 FD               [12] 3073 	mov	r5,a
      000D67 EA               [12] 3074 	mov	a,r2
      000D68 3C               [12] 3075 	addc	a,r4
      000D69 FE               [12] 3076 	mov	r6,a
      000D6A 80 9C            [24] 3077 	sjmp	00101$
      000D6C                       3078 00103$:
                                   3079 ;	ecen4330_lcd_v3.c:596: return rev;
      000D6C 8D 82            [24] 3080 	mov	dpl,r5
      000D6E 8E 83            [24] 3081 	mov	dph,r6
                                   3082 ;	ecen4330_lcd_v3.c:597: }
      000D70 22               [24] 3083 	ret
                                   3084 ;------------------------------------------------------------
                                   3085 ;Allocation info for local variables in function 'asciiToDec'
                                   3086 ;------------------------------------------------------------
                                   3087 ;d                         Allocated to registers 
                                   3088 ;val                       Allocated to registers r2 
                                   3089 ;id                        Allocated to registers r6 r7 
                                   3090 ;------------------------------------------------------------
                                   3091 ;	ecen4330_lcd_v3.c:604: void asciiToDec (uint8_t d) {
                                   3092 ;	-----------------------------------------
                                   3093 ;	 function asciiToDec
                                   3094 ;	-----------------------------------------
      000D71                       3095 _asciiToDec:
                                   3096 ;	ecen4330_lcd_v3.c:607: id = reverse(d);
      000D71 12r0Dr02         [24] 3097 	lcall	_reverse
      000D74 AE 82            [24] 3098 	mov	r6,dpl
      000D76 AF 83            [24] 3099 	mov	r7,dph
                                   3100 ;	ecen4330_lcd_v3.c:608: while (id >= 1){
      000D78                       3101 00101$:
      000D78 8E 04            [24] 3102 	mov	ar4,r6
      000D7A 8F 05            [24] 3103 	mov	ar5,r7
      000D7C C3               [12] 3104 	clr	c
      000D7D EC               [12] 3105 	mov	a,r4
      000D7E 94 01            [12] 3106 	subb	a,#0x01
      000D80 ED               [12] 3107 	mov	a,r5
      000D81 94 00            [12] 3108 	subb	a,#0x00
      000D83 40 42            [24] 3109 	jc	00103$
                                   3110 ;	ecen4330_lcd_v3.c:610: val = id % 10;
      000D85 75*00 0A         [24] 3111 	mov	__moduint_PARM_2,#0x0a
      000D88 75*01 00         [24] 3112 	mov	(__moduint_PARM_2 + 1),#0x00
      000D8B 8C 82            [24] 3113 	mov	dpl,r4
      000D8D 8D 83            [24] 3114 	mov	dph,r5
      000D8F C0 05            [24] 3115 	push	ar5
      000D91 C0 04            [24] 3116 	push	ar4
      000D93 12r00r00         [24] 3117 	lcall	__moduint
      000D96 AA 82            [24] 3118 	mov	r2,dpl
      000D98 D0 04            [24] 3119 	pop	ar4
      000D9A D0 05            [24] 3120 	pop	ar5
                                   3121 ;	ecen4330_lcd_v3.c:611: id = id/10;
      000D9C 75*00 0A         [24] 3122 	mov	__divuint_PARM_2,#0x0a
      000D9F 75*01 00         [24] 3123 	mov	(__divuint_PARM_2 + 1),#0x00
      000DA2 8C 82            [24] 3124 	mov	dpl,r4
      000DA4 8D 83            [24] 3125 	mov	dph,r5
      000DA6 C0 02            [24] 3126 	push	ar2
      000DA8 12r00r00         [24] 3127 	lcall	__divuint
      000DAB AC 82            [24] 3128 	mov	r4,dpl
      000DAD AD 83            [24] 3129 	mov	r5,dph
      000DAF D0 02            [24] 3130 	pop	ar2
      000DB1 8C 06            [24] 3131 	mov	ar6,r4
      000DB3 8D 07            [24] 3132 	mov	ar7,r5
                                   3133 ;	ecen4330_lcd_v3.c:612: write(val + '0');
      000DB5 74 30            [12] 3134 	mov	a,#0x30
      000DB7 2A               [12] 3135 	add	a,r2
      000DB8 F5 82            [12] 3136 	mov	dpl,a
      000DBA C0 07            [24] 3137 	push	ar7
      000DBC C0 06            [24] 3138 	push	ar6
      000DBE 12r0Br0C         [24] 3139 	lcall	_write
      000DC1 D0 06            [24] 3140 	pop	ar6
      000DC3 D0 07            [24] 3141 	pop	ar7
      000DC5 80 B1            [24] 3142 	sjmp	00101$
      000DC7                       3143 00103$:
                                   3144 ;	ecen4330_lcd_v3.c:614: write('\n');
      000DC7 75 82 0A         [24] 3145 	mov	dpl,#0x0a
                                   3146 ;	ecen4330_lcd_v3.c:615: }
      000DCA 02r0Br0C         [24] 3147 	ljmp	_write
                                   3148 ;------------------------------------------------------------
                                   3149 ;Allocation info for local variables in function 'asciiToHex'
                                   3150 ;------------------------------------------------------------
                                   3151 ;d                         Allocated to registers r7 
                                   3152 ;val                       Allocated to registers r7 
                                   3153 ;store                     Allocated with name '_asciiToHex_store_65536_200'
                                   3154 ;i                         Allocated to registers 
                                   3155 ;------------------------------------------------------------
                                   3156 ;	ecen4330_lcd_v3.c:622: void asciiToHex (uint8_t d) {
                                   3157 ;	-----------------------------------------
                                   3158 ;	 function asciiToHex
                                   3159 ;	-----------------------------------------
      000DCD                       3160 _asciiToHex:
      000DCD AF 82            [24] 3161 	mov	r7,dpl
                                   3162 ;	ecen4330_lcd_v3.c:626: store[0] = 0;
      000DCF 75*4F 00         [24] 3163 	mov	_asciiToHex_store_65536_200,#0x00
                                   3164 ;	ecen4330_lcd_v3.c:627: store[1] = 0;
      000DD2 75*50 00         [24] 3165 	mov	(_asciiToHex_store_65536_200 + 0x0001),#0x00
                                   3166 ;	ecen4330_lcd_v3.c:630: val = d % 16;
      000DD5 53 07 0F         [24] 3167 	anl	ar7,#0x0f
                                   3168 ;	ecen4330_lcd_v3.c:632: if (val <= 9) {
      000DD8 EF               [12] 3169 	mov	a,r7
      000DD9 24 F6            [12] 3170 	add	a,#0xff - 0x09
      000DDB 40 09            [24] 3171 	jc	00102$
                                   3172 ;	ecen4330_lcd_v3.c:634: store[i] = val + '0';
      000DDD 8F 06            [24] 3173 	mov	ar6,r7
      000DDF 74 30            [12] 3174 	mov	a,#0x30
      000DE1 2E               [12] 3175 	add	a,r6
      000DE2 F5*4F            [12] 3176 	mov	_asciiToHex_store_65536_200,a
      000DE4 80 17            [24] 3177 	sjmp	00103$
      000DE6                       3178 00102$:
                                   3179 ;	ecen4330_lcd_v3.c:637: store[i] = (val%10) + 'A';
      000DE6 7E 00            [12] 3180 	mov	r6,#0x00
      000DE8 75*00 0A         [24] 3181 	mov	__modsint_PARM_2,#0x0a
                                   3182 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DEB 8E*01            [24] 3183 	mov	(__modsint_PARM_2 + 1),r6
      000DED 8F 82            [24] 3184 	mov	dpl,r7
      000DEF 8E 83            [24] 3185 	mov	dph,r6
      000DF1 12r00r00         [24] 3186 	lcall	__modsint
      000DF4 AE 82            [24] 3187 	mov	r6,dpl
      000DF6 AF 83            [24] 3188 	mov	r7,dph
      000DF8 74 41            [12] 3189 	mov	a,#0x41
      000DFA 2E               [12] 3190 	add	a,r6
      000DFB F5*4F            [12] 3191 	mov	_asciiToHex_store_65536_200,a
      000DFD                       3192 00103$:
                                   3193 ;	ecen4330_lcd_v3.c:641: write(store[1]);
      000DFD 85*50 82         [24] 3194 	mov	dpl,(_asciiToHex_store_65536_200 + 0x0001)
      000E00 12r0Br0C         [24] 3195 	lcall	_write
                                   3196 ;	ecen4330_lcd_v3.c:642: write(store[0]);
      000E03 85*4F 82         [24] 3197 	mov	dpl,_asciiToHex_store_65536_200
                                   3198 ;	ecen4330_lcd_v3.c:643: }
      000E06 02r0Br0C         [24] 3199 	ljmp	_write
                                   3200 ;------------------------------------------------------------
                                   3201 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3202 ;------------------------------------------------------------
                                   3203 ;d                         Allocated to registers r7 
                                   3204 ;------------------------------------------------------------
                                   3205 ;	ecen4330_lcd_v3.c:651: uint8_t convertAsciiHex(uint8_t d) {
                                   3206 ;	-----------------------------------------
                                   3207 ;	 function convertAsciiHex
                                   3208 ;	-----------------------------------------
      000E09                       3209 _convertAsciiHex:
                                   3210 ;	ecen4330_lcd_v3.c:652: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000E09 E5 82            [12] 3211 	mov	a,dpl
      000E0B FF               [12] 3212 	mov	r7,a
      000E0C 24 C6            [12] 3213 	add	a,#0xff - 0x39
      000E0E 92*01            [24] 3214 	mov	_convertAsciiHex_sloc0_1_0,c
      000E10 40 08            [24] 3215 	jc	00103$
      000E12 8F 06            [24] 3216 	mov	ar6,r7
      000E14 EE               [12] 3217 	mov	a,r6
      000E15 24 D0            [12] 3218 	add	a,#0xd0
      000E17 FE               [12] 3219 	mov	r6,a
      000E18 80 04            [24] 3220 	sjmp	00104$
      000E1A                       3221 00103$:
      000E1A 74 C9            [12] 3222 	mov	a,#0xc9
      000E1C 2F               [12] 3223 	add	a,r7
      000E1D FE               [12] 3224 	mov	r6,a
      000E1E                       3225 00104$:
      000E1E 8E 82            [24] 3226 	mov	dpl,r6
                                   3227 ;	ecen4330_lcd_v3.c:653: }
      000E20 22               [24] 3228 	ret
                                   3229 ;------------------------------------------------------------
                                   3230 ;Allocation info for local variables in function 'writeSomeLines'
                                   3231 ;------------------------------------------------------------
                                   3232 ;	ecen4330_lcd_v3.c:659: void writeSomeLines () {
                                   3233 ;	-----------------------------------------
                                   3234 ;	 function writeSomeLines
                                   3235 ;	-----------------------------------------
      000E21                       3236 _writeSomeLines:
                                   3237 ;	ecen4330_lcd_v3.c:660: fillScreen(RED);
      000E21 90 F8 00         [24] 3238 	mov	dptr,#0xf800
      000E24 12r07r9A         [24] 3239 	lcall	_fillScreen
                                   3240 ;	ecen4330_lcd_v3.c:662: delay(20);
      000E27 90 00 14         [24] 3241 	mov	dptr,#0x0014
      000E2A 12r00r10         [24] 3242 	lcall	_delay
                                   3243 ;	ecen4330_lcd_v3.c:663: fillScreen(GREEN);
      000E2D 90 07 E0         [24] 3244 	mov	dptr,#0x07e0
      000E30 12r07r9A         [24] 3245 	lcall	_fillScreen
                                   3246 ;	ecen4330_lcd_v3.c:665: delay(20);
      000E33 90 00 14         [24] 3247 	mov	dptr,#0x0014
      000E36 12r00r10         [24] 3248 	lcall	_delay
                                   3249 ;	ecen4330_lcd_v3.c:667: setRotation(0);
      000E39 75 82 00         [24] 3250 	mov	dpl,#0x00
      000E3C 12r00rD7         [24] 3251 	lcall	_setRotation
                                   3252 ;	ecen4330_lcd_v3.c:668: fillScreen(BLACK);
      000E3F 90 00 00         [24] 3253 	mov	dptr,#0x0000
      000E42 12r07r9A         [24] 3254 	lcall	_fillScreen
                                   3255 ;	ecen4330_lcd_v3.c:669: testCircles(20, RED);
      000E45 75*32 00         [24] 3256 	mov	_testCircles_PARM_2,#0x00
      000E48 75*33 F8         [24] 3257 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000E4B 75 82 14         [24] 3258 	mov	dpl,#0x14
      000E4E 12r06r28         [24] 3259 	lcall	_testCircles
                                   3260 ;	ecen4330_lcd_v3.c:670: delay(100);
      000E51 90 00 64         [24] 3261 	mov	dptr,#0x0064
      000E54 12r00r10         [24] 3262 	lcall	_delay
                                   3263 ;	ecen4330_lcd_v3.c:671: fillScreen(BLACK);
      000E57 90 00 00         [24] 3264 	mov	dptr,#0x0000
      000E5A 12r07r9A         [24] 3265 	lcall	_fillScreen
                                   3266 ;	ecen4330_lcd_v3.c:672: setTextSize(5);
      000E5D 75 82 05         [24] 3267 	mov	dpl,#0x05
      000E60 12r00rBF         [24] 3268 	lcall	_setTextSize
                                   3269 ;	ecen4330_lcd_v3.c:673: setTextColor(CYAN, BLACK);
      000E63 E4               [12] 3270 	clr	a
      000E64 F5*00            [12] 3271 	mov	_setTextColor_PARM_2,a
      000E66 F5*01            [12] 3272 	mov	(_setTextColor_PARM_2 + 1),a
      000E68 90 07 FF         [24] 3273 	mov	dptr,#0x07ff
      000E6B 12r00rB2         [24] 3274 	lcall	_setTextColor
                                   3275 ;	ecen4330_lcd_v3.c:674: LCD_string_write("Welcome\n");
      000E6E 90r05r0B         [24] 3276 	mov	dptr,#___str_0
      000E71 75 F0 80         [24] 3277 	mov	b,#0x80
      000E74 12r0Br7A         [24] 3278 	lcall	_LCD_string_write
                                   3279 ;	ecen4330_lcd_v3.c:675: setTextSize(3);
      000E77 75 82 03         [24] 3280 	mov	dpl,#0x03
      000E7A 12r00rBF         [24] 3281 	lcall	_setTextSize
                                   3282 ;	ecen4330_lcd_v3.c:676: LCD_string_write("ECEN-4330\n");
      000E7D 90r05r14         [24] 3283 	mov	dptr,#___str_1
      000E80 75 F0 80         [24] 3284 	mov	b,#0x80
      000E83 12r0Br7A         [24] 3285 	lcall	_LCD_string_write
                                   3286 ;	ecen4330_lcd_v3.c:677: LCD_string_write("Rotation 0");
      000E86 90r05r1F         [24] 3287 	mov	dptr,#___str_2
      000E89 75 F0 80         [24] 3288 	mov	b,#0x80
      000E8C 12r0Br7A         [24] 3289 	lcall	_LCD_string_write
                                   3290 ;	ecen4330_lcd_v3.c:678: delay(200);
      000E8F 90 00 C8         [24] 3291 	mov	dptr,#0x00c8
      000E92 12r00r10         [24] 3292 	lcall	_delay
                                   3293 ;	ecen4330_lcd_v3.c:679: fillScreen(BLACK);
      000E95 90 00 00         [24] 3294 	mov	dptr,#0x0000
      000E98 12r07r9A         [24] 3295 	lcall	_fillScreen
                                   3296 ;	ecen4330_lcd_v3.c:680: setRotation(1);
      000E9B 75 82 01         [24] 3297 	mov	dpl,#0x01
      000E9E 12r00rD7         [24] 3298 	lcall	_setRotation
                                   3299 ;	ecen4330_lcd_v3.c:681: setCursor(0,0);
      000EA1 E4               [12] 3300 	clr	a
      000EA2 F5*00            [12] 3301 	mov	_setCursor_PARM_2,a
      000EA4 F5*01            [12] 3302 	mov	(_setCursor_PARM_2 + 1),a
      000EA6 90 00 00         [24] 3303 	mov	dptr,#0x0000
      000EA9 12r00rA5         [24] 3304 	lcall	_setCursor
                                   3305 ;	ecen4330_lcd_v3.c:682: LCD_string_write("Rotation 1");
      000EAC 90r05r2A         [24] 3306 	mov	dptr,#___str_3
      000EAF 75 F0 80         [24] 3307 	mov	b,#0x80
      000EB2 12r0Br7A         [24] 3308 	lcall	_LCD_string_write
                                   3309 ;	ecen4330_lcd_v3.c:683: delay(500);
      000EB5 90 01 F4         [24] 3310 	mov	dptr,#0x01f4
      000EB8 12r00r10         [24] 3311 	lcall	_delay
                                   3312 ;	ecen4330_lcd_v3.c:684: fillScreen(BLACK);
      000EBB 90 00 00         [24] 3313 	mov	dptr,#0x0000
      000EBE 12r07r9A         [24] 3314 	lcall	_fillScreen
                                   3315 ;	ecen4330_lcd_v3.c:685: setRotation(2);
      000EC1 75 82 02         [24] 3316 	mov	dpl,#0x02
      000EC4 12r00rD7         [24] 3317 	lcall	_setRotation
                                   3318 ;	ecen4330_lcd_v3.c:686: setCursor(0,0);
      000EC7 E4               [12] 3319 	clr	a
      000EC8 F5*00            [12] 3320 	mov	_setCursor_PARM_2,a
      000ECA F5*01            [12] 3321 	mov	(_setCursor_PARM_2 + 1),a
      000ECC 90 00 00         [24] 3322 	mov	dptr,#0x0000
      000ECF 12r00rA5         [24] 3323 	lcall	_setCursor
                                   3324 ;	ecen4330_lcd_v3.c:687: LCD_string_write("Rotation 2");
      000ED2 90r05r35         [24] 3325 	mov	dptr,#___str_4
      000ED5 75 F0 80         [24] 3326 	mov	b,#0x80
      000ED8 12r0Br7A         [24] 3327 	lcall	_LCD_string_write
                                   3328 ;	ecen4330_lcd_v3.c:688: delay(500);
      000EDB 90 01 F4         [24] 3329 	mov	dptr,#0x01f4
      000EDE 12r00r10         [24] 3330 	lcall	_delay
                                   3331 ;	ecen4330_lcd_v3.c:689: fillScreen(BLACK);
      000EE1 90 00 00         [24] 3332 	mov	dptr,#0x0000
      000EE4 12r07r9A         [24] 3333 	lcall	_fillScreen
                                   3334 ;	ecen4330_lcd_v3.c:690: setRotation(3);
      000EE7 75 82 03         [24] 3335 	mov	dpl,#0x03
      000EEA 12r00rD7         [24] 3336 	lcall	_setRotation
                                   3337 ;	ecen4330_lcd_v3.c:691: setCursor(0,0);
      000EED E4               [12] 3338 	clr	a
      000EEE F5*00            [12] 3339 	mov	_setCursor_PARM_2,a
      000EF0 F5*01            [12] 3340 	mov	(_setCursor_PARM_2 + 1),a
      000EF2 90 00 00         [24] 3341 	mov	dptr,#0x0000
      000EF5 12r00rA5         [24] 3342 	lcall	_setCursor
                                   3343 ;	ecen4330_lcd_v3.c:692: delay(200);
      000EF8 90 00 C8         [24] 3344 	mov	dptr,#0x00c8
      000EFB 12r00r10         [24] 3345 	lcall	_delay
                                   3346 ;	ecen4330_lcd_v3.c:693: LCD_string_write("Rotation 3");
      000EFE 90r05r40         [24] 3347 	mov	dptr,#___str_5
      000F01 75 F0 80         [24] 3348 	mov	b,#0x80
      000F04 12r0Br7A         [24] 3349 	lcall	_LCD_string_write
                                   3350 ;	ecen4330_lcd_v3.c:694: delay(200);
      000F07 90 00 C8         [24] 3351 	mov	dptr,#0x00c8
                                   3352 ;	ecen4330_lcd_v3.c:695: }
      000F0A 02r00r10         [24] 3353 	ljmp	_delay
                                   3354 ;------------------------------------------------------------
                                   3355 ;Allocation info for local variables in function 'getAddress'
                                   3356 ;------------------------------------------------------------
                                   3357 ;input                     Allocated to registers r4 
                                   3358 ;hex                       Allocated to registers r4 
                                   3359 ;i                         Allocated to registers r5 
                                   3360 ;address                   Allocated to registers r6 r7 
                                   3361 ;------------------------------------------------------------
                                   3362 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3363 ;	-----------------------------------------
                                   3364 ;	 function getAddress
                                   3365 ;	-----------------------------------------
      000F0D                       3366 _getAddress:
                                   3367 ;	getFunctions.c:16: address = 0;
      000F0D 7E 00            [12] 3368 	mov	r6,#0x00
      000F0F 7F 00            [12] 3369 	mov	r7,#0x00
                                   3370 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      000F11 7D 00            [12] 3371 	mov	r5,#0x00
      000F13                       3372 00104$:
                                   3373 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      000F13 C0 07            [24] 3374 	push	ar7
      000F15 C0 06            [24] 3375 	push	ar6
      000F17 C0 05            [24] 3376 	push	ar5
      000F19 12r0Cr0A         [24] 3377 	lcall	_keyDetect
                                   3378 ;	getFunctions.c:21: write(input);						// display nibble to user
      000F1C AC 82            [24] 3379 	mov  r4,dpl
      000F1E C0 04            [24] 3380 	push	ar4
      000F20 12r0Br0C         [24] 3381 	lcall	_write
      000F23 D0 04            [24] 3382 	pop	ar4
                                   3383 ;	getFunctions.c:22: hex = convertAsciiHex(input);			// convert ascii char to hex
      000F25 8C 82            [24] 3384 	mov	dpl,r4
      000F27 12r0Er09         [24] 3385 	lcall	_convertAsciiHex
      000F2A AC 82            [24] 3386 	mov	r4,dpl
      000F2C D0 05            [24] 3387 	pop	ar5
      000F2E D0 06            [24] 3388 	pop	ar6
      000F30 D0 07            [24] 3389 	pop	ar7
                                   3390 ;	getFunctions.c:25: address = address | hex;
      000F32 7B 00            [12] 3391 	mov	r3,#0x00
      000F34 EC               [12] 3392 	mov	a,r4
      000F35 42 06            [12] 3393 	orl	ar6,a
      000F37 EB               [12] 3394 	mov	a,r3
      000F38 42 07            [12] 3395 	orl	ar7,a
                                   3396 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      000F3A BD 03 02         [24] 3397 	cjne	r5,#0x03,00121$
      000F3D 80 0E            [24] 3398 	sjmp	00105$
      000F3F                       3399 00121$:
      000F3F EF               [12] 3400 	mov	a,r7
      000F40 C4               [12] 3401 	swap	a
      000F41 54 F0            [12] 3402 	anl	a,#0xf0
      000F43 CE               [12] 3403 	xch	a,r6
      000F44 C4               [12] 3404 	swap	a
      000F45 CE               [12] 3405 	xch	a,r6
      000F46 6E               [12] 3406 	xrl	a,r6
      000F47 CE               [12] 3407 	xch	a,r6
      000F48 54 F0            [12] 3408 	anl	a,#0xf0
      000F4A CE               [12] 3409 	xch	a,r6
      000F4B 6E               [12] 3410 	xrl	a,r6
      000F4C FF               [12] 3411 	mov	r7,a
      000F4D                       3412 00105$:
                                   3413 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      000F4D 0D               [12] 3414 	inc	r5
      000F4E BD 04 00         [24] 3415 	cjne	r5,#0x04,00122$
      000F51                       3416 00122$:
      000F51 40 C0            [24] 3417 	jc	00104$
                                   3418 ;	getFunctions.c:28: return address;
      000F53 8E 82            [24] 3419 	mov	dpl,r6
      000F55 8F 83            [24] 3420 	mov	dph,r7
                                   3421 ;	getFunctions.c:29: }
      000F57 22               [24] 3422 	ret
                                   3423 ;------------------------------------------------------------
                                   3424 ;Allocation info for local variables in function 'getByte'
                                   3425 ;------------------------------------------------------------
                                   3426 ;input                     Allocated to registers r5 
                                   3427 ;hex                       Allocated to registers r5 
                                   3428 ;byte                      Allocated to registers r7 
                                   3429 ;i                         Allocated to registers r6 
                                   3430 ;------------------------------------------------------------
                                   3431 ;	getFunctions.c:36: uint8_t getByte() {
                                   3432 ;	-----------------------------------------
                                   3433 ;	 function getByte
                                   3434 ;	-----------------------------------------
      000F58                       3435 _getByte:
                                   3436 ;	getFunctions.c:40: byte = 0;
      000F58 7F 00            [12] 3437 	mov	r7,#0x00
                                   3438 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      000F5A 7E 00            [12] 3439 	mov	r6,#0x00
      000F5C                       3440 00104$:
                                   3441 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      000F5C C0 07            [24] 3442 	push	ar7
      000F5E C0 06            [24] 3443 	push	ar6
      000F60 12r0Cr0A         [24] 3444 	lcall	_keyDetect
                                   3445 ;	getFunctions.c:45: write(input);						// display nibble to user
      000F63 AD 82            [24] 3446 	mov  r5,dpl
      000F65 C0 05            [24] 3447 	push	ar5
      000F67 12r0Br0C         [24] 3448 	lcall	_write
      000F6A D0 05            [24] 3449 	pop	ar5
                                   3450 ;	getFunctions.c:46: hex = convertAsciiHex(input);			// convert ascii char to hex
      000F6C 8D 82            [24] 3451 	mov	dpl,r5
      000F6E 12r0Er09         [24] 3452 	lcall	_convertAsciiHex
      000F71 AD 82            [24] 3453 	mov	r5,dpl
      000F73 D0 06            [24] 3454 	pop	ar6
      000F75 D0 07            [24] 3455 	pop	ar7
                                   3456 ;	getFunctions.c:49: byte = byte | hex;
      000F77 ED               [12] 3457 	mov	a,r5
      000F78 42 07            [12] 3458 	orl	ar7,a
                                   3459 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      000F7A BE 01 02         [24] 3460 	cjne	r6,#0x01,00121$
      000F7D 80 07            [24] 3461 	sjmp	00105$
      000F7F                       3462 00121$:
      000F7F 8F 05            [24] 3463 	mov	ar5,r7
      000F81 ED               [12] 3464 	mov	a,r5
      000F82 C4               [12] 3465 	swap	a
      000F83 54 F0            [12] 3466 	anl	a,#0xf0
      000F85 FF               [12] 3467 	mov	r7,a
      000F86                       3468 00105$:
                                   3469 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      000F86 0E               [12] 3470 	inc	r6
      000F87 BE 02 00         [24] 3471 	cjne	r6,#0x02,00122$
      000F8A                       3472 00122$:
      000F8A 40 D0            [24] 3473 	jc	00104$
                                   3474 ;	getFunctions.c:52: return byte;
      000F8C 8F 82            [24] 3475 	mov	dpl,r7
                                   3476 ;	getFunctions.c:53: }
      000F8E 22               [24] 3477 	ret
                                   3478 ;------------------------------------------------------------
                                   3479 ;Allocation info for local variables in function 'dumpPage'
                                   3480 ;------------------------------------------------------------
                                   3481 ;n                         Allocated with name '_dumpPage_PARM_2'
                                   3482 ;type                      Allocated with name '_dumpPage_PARM_3'
                                   3483 ;start                     Allocated with name '_dumpPage_start_65536_227'
                                   3484 ;ramAddress                Allocated to registers r6 r7 
                                   3485 ;i                         Allocated with name '_dumpPage_i_65537_229'
                                   3486 ;data                      Allocated with name '_dumpPage_data_65537_229'
                                   3487 ;j                         Allocated with name '_dumpPage_j_65537_229'
                                   3488 ;high                      Allocated with name '_dumpPage_high_65537_229'
                                   3489 ;low                       Allocated with name '_dumpPage_low_65537_229'
                                   3490 ;------------------------------------------------------------
                                   3491 ;	dump2.c:8: void dumpPage(uint16_t start, uint8_t n, uint8_t type/*, uint8_t page, bool direction*/) {
                                   3492 ;	-----------------------------------------
                                   3493 ;	 function dumpPage
                                   3494 ;	-----------------------------------------
      000F8F                       3495 _dumpPage:
      000F8F 85 82*53         [24] 3496 	mov	_dumpPage_start_65536_227,dpl
      000F92 85 83*54         [24] 3497 	mov	(_dumpPage_start_65536_227 + 1),dph
                                   3498 ;	dump2.c:10: fillScreen(GRAY);
      000F95 90 D6 BA         [24] 3499 	mov	dptr,#0xd6ba
      000F98 12r07r9A         [24] 3500 	lcall	_fillScreen
                                   3501 ;	dump2.c:11: setCursor(0, 0);
      000F9B E4               [12] 3502 	clr	a
      000F9C F5*00            [12] 3503 	mov	_setCursor_PARM_2,a
      000F9E F5*01            [12] 3504 	mov	(_setCursor_PARM_2 + 1),a
      000FA0 90 00 00         [24] 3505 	mov	dptr,#0x0000
      000FA3 12r00rA5         [24] 3506 	lcall	_setCursor
                                   3507 ;	dump2.c:12: setTextSize(2);
      000FA6 75 82 02         [24] 3508 	mov	dpl,#0x02
      000FA9 12r00rBF         [24] 3509 	lcall	_setTextSize
                                   3510 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      000FAC 90r00r00         [24] 3511 	mov	dptr,#_dumpPage_i_65537_229
      000FAF E4               [12] 3512 	clr	a
      000FB0 F0               [24] 3513 	movx	@dptr,a
      000FB1 A3               [24] 3514 	inc	dptr
      000FB2 F0               [24] 3515 	movx	@dptr,a
      000FB3 85*51 F0         [24] 3516 	mov	b,_dumpPage_PARM_2
      000FB6 E5*52            [12] 3517 	mov	a,_dumpPage_PARM_3
      000FB8 A4               [48] 3518 	mul	ab
      000FB9 FC               [12] 3519 	mov	r4,a
      000FBA AD F0            [24] 3520 	mov	r5,b
      000FBC                       3521 00109$:
      000FBC 90r00r00         [24] 3522 	mov	dptr,#_dumpPage_i_65537_229
      000FBF E0               [24] 3523 	movx	a,@dptr
      000FC0 FA               [12] 3524 	mov	r2,a
      000FC1 A3               [24] 3525 	inc	dptr
      000FC2 E0               [24] 3526 	movx	a,@dptr
      000FC3 FB               [12] 3527 	mov	r3,a
      000FC4 8A 00            [24] 3528 	mov	ar0,r2
      000FC6 8B 01            [24] 3529 	mov	ar1,r3
      000FC8 8C 06            [24] 3530 	mov	ar6,r4
      000FCA 8D 07            [24] 3531 	mov	ar7,r5
      000FCC C3               [12] 3532 	clr	c
      000FCD E8               [12] 3533 	mov	a,r0
      000FCE 9E               [12] 3534 	subb	a,r6
      000FCF E9               [12] 3535 	mov	a,r1
      000FD0 9F               [12] 3536 	subb	a,r7
      000FD1 40 01            [24] 3537 	jc	00134$
      000FD3 22               [24] 3538 	ret
      000FD4                       3539 00134$:
                                   3540 ;	dump2.c:25: if (i == __END_RAM__) break;
      000FD4 B8 FF 04         [24] 3541 	cjne	r0,#0xff,00135$
      000FD7 B9 FF 01         [24] 3542 	cjne	r1,#0xff,00135$
      000FDA 22               [24] 3543 	ret
      000FDB                       3544 00135$:
                                   3545 ;	dump2.c:28: IOM = 0;
                                   3546 ;	assignBit
      000FDB C2 B4            [12] 3547 	clr	_P3_4
                                   3548 ;	dump2.c:29: ramAddress = (uint16_t __xdata*)(i * type + start);
      000FDD 85*52*00         [24] 3549 	mov	__mulint_PARM_2,_dumpPage_PARM_3
      000FE0 75*01 00         [24] 3550 	mov	(__mulint_PARM_2 + 1),#0x00
      000FE3 8A 82            [24] 3551 	mov	dpl,r2
      000FE5 8B 83            [24] 3552 	mov	dph,r3
      000FE7 C0 05            [24] 3553 	push	ar5
      000FE9 C0 04            [24] 3554 	push	ar4
      000FEB C0 03            [24] 3555 	push	ar3
      000FED C0 02            [24] 3556 	push	ar2
      000FEF 12r00r00         [24] 3557 	lcall	__mulint
      000FF2 E5 82            [12] 3558 	mov	a,dpl
      000FF4 85 83 F0         [24] 3559 	mov	b,dph
      000FF7 D0 02            [24] 3560 	pop	ar2
      000FF9 D0 03            [24] 3561 	pop	ar3
      000FFB D0 04            [24] 3562 	pop	ar4
      000FFD D0 05            [24] 3563 	pop	ar5
      000FFF 25*53            [12] 3564 	add	a,_dumpPage_start_65536_227
      001001 FE               [12] 3565 	mov	r6,a
      001002 E5*54            [12] 3566 	mov	a,(_dumpPage_start_65536_227 + 1)
      001004 35 F0            [12] 3567 	addc	a,b
      001006 FF               [12] 3568 	mov	r7,a
                                   3569 ;	dump2.c:30: IOM = 1;
                                   3570 ;	assignBit
      001007 D2 B4            [12] 3571 	setb	_P3_4
                                   3572 ;	dump2.c:32: high = HIGHBYTE(start + i);
      001009 EA               [12] 3573 	mov	a,r2
      00100A 25*53            [12] 3574 	add	a,_dumpPage_start_65536_227
      00100C EB               [12] 3575 	mov	a,r3
      00100D 35*54            [12] 3576 	addc	a,(_dumpPage_start_65536_227 + 1)
      00100F F5 82            [12] 3577 	mov	dpl,a
                                   3578 ;	dump2.c:33: low = LOWBYTE(start + i);
      001011 A9*53            [24] 3579 	mov	r1,_dumpPage_start_65536_227
      001013 EA               [12] 3580 	mov	a,r2
      001014 29               [12] 3581 	add	a,r1
      001015 F9               [12] 3582 	mov	r1,a
                                   3583 ;	dump2.c:36: asciiToHex(high);
      001016 C0 07            [24] 3584 	push	ar7
      001018 C0 06            [24] 3585 	push	ar6
      00101A C0 05            [24] 3586 	push	ar5
      00101C C0 04            [24] 3587 	push	ar4
      00101E C0 01            [24] 3588 	push	ar1
      001020 12r0DrCD         [24] 3589 	lcall	_asciiToHex
      001023 D0 01            [24] 3590 	pop	ar1
                                   3591 ;	dump2.c:37: asciiToHex(low);
      001025 89 82            [24] 3592 	mov	dpl,r1
      001027 12r0DrCD         [24] 3593 	lcall	_asciiToHex
                                   3594 ;	dump2.c:39: LCD_string_write(": ");
      00102A 90r05r4B         [24] 3595 	mov	dptr,#___str_6
      00102D 75 F0 80         [24] 3596 	mov	b,#0x80
      001030 12r0Br7A         [24] 3597 	lcall	_LCD_string_write
      001033 D0 04            [24] 3598 	pop	ar4
      001035 D0 05            [24] 3599 	pop	ar5
      001037 D0 06            [24] 3600 	pop	ar6
      001039 D0 07            [24] 3601 	pop	ar7
                                   3602 ;	dump2.c:41: for (j = 0; j < type; j++) {
      00103B 7B 00            [12] 3603 	mov	r3,#0x00
      00103D                       3604 00106$:
      00103D C3               [12] 3605 	clr	c
      00103E EB               [12] 3606 	mov	a,r3
      00103F 95*52            [12] 3607 	subb	a,_dumpPage_PARM_3
      001041 50 34            [24] 3608 	jnc	00103$
                                   3609 ;	dump2.c:44: IOM = 0;
                                   3610 ;	assignBit
      001043 C2 B4            [12] 3611 	clr	_P3_4
                                   3612 ;	dump2.c:45: data = *ramAddress;
      001045 8E 82            [24] 3613 	mov	dpl,r6
      001047 8F 83            [24] 3614 	mov	dph,r7
      001049 E0               [24] 3615 	movx	a,@dptr
      00104A 90r00r02         [24] 3616 	mov	dptr,#_dumpPage_data_65537_229
      00104D F0               [24] 3617 	movx	@dptr,a
                                   3618 ;	dump2.c:46: &ramAddress++;
      00104E 74 02            [12] 3619 	mov	a,#0x02
      001050 2E               [12] 3620 	add	a,r6
      001051 FE               [12] 3621 	mov	r6,a
      001052 E4               [12] 3622 	clr	a
      001053 3F               [12] 3623 	addc	a,r7
      001054 FF               [12] 3624 	mov	r7,a
                                   3625 ;	dump2.c:47: IOM = 1;
                                   3626 ;	assignBit
      001055 D2 B4            [12] 3627 	setb	_P3_4
                                   3628 ;	dump2.c:49: asciiToHex(data);
      001057 90r00r02         [24] 3629 	mov	dptr,#_dumpPage_data_65537_229
      00105A E0               [24] 3630 	movx	a,@dptr
      00105B F5 82            [12] 3631 	mov	dpl,a
      00105D C0 07            [24] 3632 	push	ar7
      00105F C0 06            [24] 3633 	push	ar6
      001061 C0 05            [24] 3634 	push	ar5
      001063 C0 04            [24] 3635 	push	ar4
      001065 C0 03            [24] 3636 	push	ar3
      001067 12r0DrCD         [24] 3637 	lcall	_asciiToHex
      00106A D0 03            [24] 3638 	pop	ar3
      00106C D0 04            [24] 3639 	pop	ar4
      00106E D0 05            [24] 3640 	pop	ar5
      001070 D0 06            [24] 3641 	pop	ar6
      001072 D0 07            [24] 3642 	pop	ar7
                                   3643 ;	dump2.c:41: for (j = 0; j < type; j++) {
      001074 0B               [12] 3644 	inc	r3
      001075 80 C6            [24] 3645 	sjmp	00106$
      001077                       3646 00103$:
                                   3647 ;	dump2.c:52: write('\n');
      001077 75 82 0A         [24] 3648 	mov	dpl,#0x0a
      00107A C0 05            [24] 3649 	push	ar5
      00107C C0 04            [24] 3650 	push	ar4
      00107E 12r0Br0C         [24] 3651 	lcall	_write
      001081 D0 04            [24] 3652 	pop	ar4
      001083 D0 05            [24] 3653 	pop	ar5
                                   3654 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      001085 AE*52            [24] 3655 	mov	r6,_dumpPage_PARM_3
      001087 7F 00            [12] 3656 	mov	r7,#0x00
      001089 90r00r00         [24] 3657 	mov	dptr,#_dumpPage_i_65537_229
      00108C E0               [24] 3658 	movx	a,@dptr
      00108D FA               [12] 3659 	mov	r2,a
      00108E A3               [24] 3660 	inc	dptr
      00108F E0               [24] 3661 	movx	a,@dptr
      001090 FB               [12] 3662 	mov	r3,a
      001091 EE               [12] 3663 	mov	a,r6
      001092 2A               [12] 3664 	add	a,r2
      001093 FA               [12] 3665 	mov	r2,a
      001094 EF               [12] 3666 	mov	a,r7
      001095 3B               [12] 3667 	addc	a,r3
      001096 FB               [12] 3668 	mov	r3,a
      001097 90r00r00         [24] 3669 	mov	dptr,#_dumpPage_i_65537_229
      00109A EA               [12] 3670 	mov	a,r2
      00109B F0               [24] 3671 	movx	@dptr,a
      00109C EB               [12] 3672 	mov	a,r3
      00109D A3               [24] 3673 	inc	dptr
      00109E F0               [24] 3674 	movx	@dptr,a
                                   3675 ;	dump2.c:60: }
      00109F 02r0FrBC         [24] 3676 	ljmp	00109$
                                   3677 ;------------------------------------------------------------
                                   3678 ;Allocation info for local variables in function 'dump'
                                   3679 ;------------------------------------------------------------
                                   3680 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   3681 ;sloc1                     Allocated with name '_dump_sloc1_1_0'
                                   3682 ;sloc2                     Allocated with name '_dump_sloc2_1_0'
                                   3683 ;type                      Allocated with name '_dump_type_65537_235'
                                   3684 ;size                      Allocated with name '_dump_size_65537_235'
                                   3685 ;page                      Allocated with name '_dump_page_65537_235'
                                   3686 ;input                     Allocated with name '_dump_input_65537_235'
                                   3687 ;address                   Allocated with name '_dump_address_65537_235'
                                   3688 ;------------------------------------------------------------
                                   3689 ;	dump2.c:66: void dump() {
                                   3690 ;	-----------------------------------------
                                   3691 ;	 function dump
                                   3692 ;	-----------------------------------------
      0010A2                       3693 _dump:
                                   3694 ;	dump2.c:68: fillScreen(GRAY);
      0010A2 90 D6 BA         [24] 3695 	mov	dptr,#0xd6ba
      0010A5 12r07r9A         [24] 3696 	lcall	_fillScreen
                                   3697 ;	dump2.c:69: setCursor(0, 0);
      0010A8 E4               [12] 3698 	clr	a
      0010A9 F5*00            [12] 3699 	mov	_setCursor_PARM_2,a
      0010AB F5*01            [12] 3700 	mov	(_setCursor_PARM_2 + 1),a
      0010AD 90 00 00         [24] 3701 	mov	dptr,#0x0000
      0010B0 12r00rA5         [24] 3702 	lcall	_setCursor
                                   3703 ;	dump2.c:70: setTextSize(2);
      0010B3 75 82 02         [24] 3704 	mov	dpl,#0x02
      0010B6 12r00rBF         [24] 3705 	lcall	_setTextSize
                                   3706 ;	dump2.c:80: page = 1;
      0010B9 90r00r04         [24] 3707 	mov	dptr,#_dump_page_65537_235
      0010BC 74 01            [12] 3708 	mov	a,#0x01
      0010BE F0               [24] 3709 	movx	@dptr,a
                                   3710 ;	dump2.c:83: LCD_string_write("Enter start address:\n");
      0010BF 90r05r4E         [24] 3711 	mov	dptr,#___str_7
      0010C2 75 F0 80         [24] 3712 	mov	b,#0x80
      0010C5 12r0Br7A         [24] 3713 	lcall	_LCD_string_write
                                   3714 ;	dump2.c:84: address = getAddress();
      0010C8 12r0Fr0D         [24] 3715 	lcall	_getAddress
      0010CB AE 82            [24] 3716 	mov	r6,dpl
      0010CD AF 83            [24] 3717 	mov	r7,dph
                                   3718 ;	dump2.c:85: write('\n');
      0010CF 75 82 0A         [24] 3719 	mov	dpl,#0x0a
      0010D2 C0 07            [24] 3720 	push	ar7
      0010D4 C0 06            [24] 3721 	push	ar6
      0010D6 12r0Br0C         [24] 3722 	lcall	_write
                                   3723 ;	dump2.c:89: LCD_string_write("Enter data type\n");
      0010D9 90r05r64         [24] 3724 	mov	dptr,#___str_8
      0010DC 75 F0 80         [24] 3725 	mov	b,#0x80
      0010DF 12r0Br7A         [24] 3726 	lcall	_LCD_string_write
                                   3727 ;	dump2.c:90: LCD_string_write("B-Byte, A-Word,\n");
      0010E2 90r05r75         [24] 3728 	mov	dptr,#___str_9
      0010E5 75 F0 80         [24] 3729 	mov	b,#0x80
      0010E8 12r0Br7A         [24] 3730 	lcall	_LCD_string_write
                                   3731 ;	dump2.c:91: LCD_string_write("D-Double word\n");
      0010EB 90r05r86         [24] 3732 	mov	dptr,#___str_10
      0010EE 75 F0 80         [24] 3733 	mov	b,#0x80
      0010F1 12r0Br7A         [24] 3734 	lcall	_LCD_string_write
      0010F4 D0 06            [24] 3735 	pop	ar6
      0010F6 D0 07            [24] 3736 	pop	ar7
                                   3737 ;	dump2.c:94: do {
      0010F8                       3738 00108$:
                                   3739 ;	dump2.c:95: type = keyDetect();
      0010F8 C0 07            [24] 3740 	push	ar7
      0010FA C0 06            [24] 3741 	push	ar6
      0010FC 12r0Cr0A         [24] 3742 	lcall	_keyDetect
      0010FF AD 82            [24] 3743 	mov	r5,dpl
      001101 D0 06            [24] 3744 	pop	ar6
      001103 D0 07            [24] 3745 	pop	ar7
      001105 90r00r03         [24] 3746 	mov	dptr,#_dump_type_65537_235
      001108 ED               [12] 3747 	mov	a,r5
      001109 F0               [24] 3748 	movx	@dptr,a
                                   3749 ;	dump2.c:96: switch(type) {
      00110A BD 41 02         [24] 3750 	cjne	r5,#0x41,00197$
      00110D 80 23            [24] 3751 	sjmp	00102$
      00110F                       3752 00197$:
      00110F BD 42 02         [24] 3753 	cjne	r5,#0x42,00198$
      001112 80 05            [24] 3754 	sjmp	00101$
      001114                       3755 00198$:
                                   3756 ;	dump2.c:97: case 'B': {
      001114 BD 44 4B         [24] 3757 	cjne	r5,#0x44,00109$
      001117 80 32            [24] 3758 	sjmp	00103$
      001119                       3759 00101$:
                                   3760 ;	dump2.c:98: type = 1;
      001119 90r00r03         [24] 3761 	mov	dptr,#_dump_type_65537_235
      00111C 74 01            [12] 3762 	mov	a,#0x01
      00111E F0               [24] 3763 	movx	@dptr,a
                                   3764 ;	dump2.c:99: LCD_string_write("Byte\n");
      00111F 90r05r95         [24] 3765 	mov	dptr,#___str_11
      001122 75 F0 80         [24] 3766 	mov	b,#0x80
      001125 C0 07            [24] 3767 	push	ar7
      001127 C0 06            [24] 3768 	push	ar6
      001129 12r0Br7A         [24] 3769 	lcall	_LCD_string_write
      00112C D0 06            [24] 3770 	pop	ar6
      00112E D0 07            [24] 3771 	pop	ar7
                                   3772 ;	dump2.c:100: break;
                                   3773 ;	dump2.c:102: case 'A': {
      001130 80 30            [24] 3774 	sjmp	00109$
      001132                       3775 00102$:
                                   3776 ;	dump2.c:103: type = 2; 
      001132 90r00r03         [24] 3777 	mov	dptr,#_dump_type_65537_235
      001135 74 02            [12] 3778 	mov	a,#0x02
      001137 F0               [24] 3779 	movx	@dptr,a
                                   3780 ;	dump2.c:104: LCD_string_write("Word\n");
      001138 90r05r9B         [24] 3781 	mov	dptr,#___str_12
      00113B 75 F0 80         [24] 3782 	mov	b,#0x80
      00113E C0 07            [24] 3783 	push	ar7
      001140 C0 06            [24] 3784 	push	ar6
      001142 12r0Br7A         [24] 3785 	lcall	_LCD_string_write
      001145 D0 06            [24] 3786 	pop	ar6
      001147 D0 07            [24] 3787 	pop	ar7
                                   3788 ;	dump2.c:105: break;
                                   3789 ;	dump2.c:107: case 'D': {
      001149 80 17            [24] 3790 	sjmp	00109$
      00114B                       3791 00103$:
                                   3792 ;	dump2.c:108: type = 4;
      00114B 90r00r03         [24] 3793 	mov	dptr,#_dump_type_65537_235
      00114E 74 04            [12] 3794 	mov	a,#0x04
      001150 F0               [24] 3795 	movx	@dptr,a
                                   3796 ;	dump2.c:109: LCD_string_write("Double word\n");
      001151 90r05rA1         [24] 3797 	mov	dptr,#___str_13
      001154 75 F0 80         [24] 3798 	mov	b,#0x80
      001157 C0 07            [24] 3799 	push	ar7
      001159 C0 06            [24] 3800 	push	ar6
      00115B 12r0Br7A         [24] 3801 	lcall	_LCD_string_write
      00115E D0 06            [24] 3802 	pop	ar6
      001160 D0 07            [24] 3803 	pop	ar7
                                   3804 ;	dump2.c:113: }
      001162                       3805 00109$:
                                   3806 ;	dump2.c:114: } while(type != 1 && type != 2 && type != 4);
      001162 90r00r03         [24] 3807 	mov	dptr,#_dump_type_65537_235
      001165 E0               [24] 3808 	movx	a,@dptr
      001166 FD               [12] 3809 	mov	r5,a
      001167 BD 01 02         [24] 3810 	cjne	r5,#0x01,00200$
      00116A 80 0D            [24] 3811 	sjmp	00110$
      00116C                       3812 00200$:
      00116C BD 02 02         [24] 3813 	cjne	r5,#0x02,00201$
      00116F 80 08            [24] 3814 	sjmp	00110$
      001171                       3815 00201$:
      001171 BD 04 02         [24] 3816 	cjne	r5,#0x04,00202$
      001174 80 03            [24] 3817 	sjmp	00203$
      001176                       3818 00202$:
      001176 02r10rF8         [24] 3819 	ljmp	00108$
      001179                       3820 00203$:
      001179                       3821 00110$:
                                   3822 ;	dump2.c:117: LCD_string_write("Enter block size:\n");
      001179 90r05rAE         [24] 3823 	mov	dptr,#___str_14
      00117C 75 F0 80         [24] 3824 	mov	b,#0x80
      00117F C0 07            [24] 3825 	push	ar7
      001181 C0 06            [24] 3826 	push	ar6
      001183 12r0Br7A         [24] 3827 	lcall	_LCD_string_write
                                   3828 ;	dump2.c:118: size = getByte();
      001186 12r0Fr58         [24] 3829 	lcall	_getByte
      001189 AD 82            [24] 3830 	mov	r5,dpl
                                   3831 ;	dump2.c:119: write('\n');
      00118B 75 82 0A         [24] 3832 	mov	dpl,#0x0a
      00118E C0 05            [24] 3833 	push	ar5
      001190 12r0Br0C         [24] 3834 	lcall	_write
      001193 D0 05            [24] 3835 	pop	ar5
      001195 D0 06            [24] 3836 	pop	ar6
      001197 D0 07            [24] 3837 	pop	ar7
                                   3838 ;	dump2.c:124: if (size < NUM) {
      001199 BD 0F 00         [24] 3839 	cjne	r5,#0x0f,00204$
      00119C                       3840 00204$:
      00119C 50 1D            [24] 3841 	jnc	00112$
                                   3842 ;	dump2.c:125: dumpPage(address, size, type);
      00119E 90r00r03         [24] 3843 	mov	dptr,#_dump_type_65537_235
      0011A1 E0               [24] 3844 	movx	a,@dptr
      0011A2 F5*52            [12] 3845 	mov	_dumpPage_PARM_3,a
      0011A4 8D*51            [24] 3846 	mov	_dumpPage_PARM_2,r5
      0011A6 8E 82            [24] 3847 	mov	dpl,r6
      0011A8 8F 83            [24] 3848 	mov	dph,r7
      0011AA C0 07            [24] 3849 	push	ar7
      0011AC C0 06            [24] 3850 	push	ar6
      0011AE C0 05            [24] 3851 	push	ar5
      0011B0 12r0Fr8F         [24] 3852 	lcall	_dumpPage
      0011B3 D0 05            [24] 3853 	pop	ar5
      0011B5 D0 06            [24] 3854 	pop	ar6
      0011B7 D0 07            [24] 3855 	pop	ar7
      0011B9 80 1C            [24] 3856 	sjmp	00149$
      0011BB                       3857 00112$:
                                   3858 ;	dump2.c:127: dumpPage(address, NUM, type);
      0011BB 90r00r03         [24] 3859 	mov	dptr,#_dump_type_65537_235
      0011BE E0               [24] 3860 	movx	a,@dptr
      0011BF F5*52            [12] 3861 	mov	_dumpPage_PARM_3,a
      0011C1 75*51 0F         [24] 3862 	mov	_dumpPage_PARM_2,#0x0f
      0011C4 8E 82            [24] 3863 	mov	dpl,r6
      0011C6 8F 83            [24] 3864 	mov	dph,r7
      0011C8 C0 07            [24] 3865 	push	ar7
      0011CA C0 06            [24] 3866 	push	ar6
      0011CC C0 05            [24] 3867 	push	ar5
      0011CE 12r0Fr8F         [24] 3868 	lcall	_dumpPage
      0011D1 D0 05            [24] 3869 	pop	ar5
      0011D3 D0 06            [24] 3870 	pop	ar6
      0011D5 D0 07            [24] 3871 	pop	ar7
                                   3872 ;	dump2.c:130: do {
      0011D7                       3873 00149$:
      0011D7 C3               [12] 3874 	clr	c
      0011D8 74 0F            [12] 3875 	mov	a,#0x0f
      0011DA 9D               [12] 3876 	subb	a,r5
      0011DB E4               [12] 3877 	clr	a
      0011DC 33               [12] 3878 	rlc	a
      0011DD FC               [12] 3879 	mov	r4,a
      0011DE 8C*55            [24] 3880 	mov	_dump_sloc0_1_0,r4
      0011E0 90r00r03         [24] 3881 	mov	dptr,#_dump_type_65537_235
      0011E3 E0               [24] 3882 	movx	a,@dptr
      0011E4 F5*58            [12] 3883 	mov	_dump_sloc2_1_0,a
      0011E6 A9*58            [24] 3884 	mov	r1,_dump_sloc2_1_0
      0011E8                       3885 00132$:
                                   3886 ;	dump2.c:132: if (page != ((size / NUM) + 1) && size > NUM) {
      0011E8 C0 01            [24] 3887 	push	ar1
      0011EA 8D 00            [24] 3888 	mov	ar0,r5
      0011EC 79 00            [12] 3889 	mov	r1,#0x00
      0011EE 75*00 0F         [24] 3890 	mov	__divsint_PARM_2,#0x0f
                                   3891 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0011F1 89*01            [24] 3892 	mov	(__divsint_PARM_2 + 1),r1
      0011F3 88 82            [24] 3893 	mov	dpl,r0
      0011F5 89 83            [24] 3894 	mov	dph,r1
      0011F7 C0 07            [24] 3895 	push	ar7
      0011F9 C0 06            [24] 3896 	push	ar6
      0011FB C0 05            [24] 3897 	push	ar5
      0011FD C0 04            [24] 3898 	push	ar4
      0011FF C0 01            [24] 3899 	push	ar1
      001201 12r00r00         [24] 3900 	lcall	__divsint
      001204 E5 82            [12] 3901 	mov	a,dpl
      001206 85 83 F0         [24] 3902 	mov	b,dph
      001209 D0 01            [24] 3903 	pop	ar1
      00120B D0 04            [24] 3904 	pop	ar4
      00120D D0 05            [24] 3905 	pop	ar5
      00120F D0 06            [24] 3906 	pop	ar6
      001211 D0 07            [24] 3907 	pop	ar7
      001213 24 01            [12] 3908 	add	a,#0x01
      001215 F5*56            [12] 3909 	mov	_dump_sloc1_1_0,a
      001217 E4               [12] 3910 	clr	a
      001218 35 F0            [12] 3911 	addc	a,b
      00121A F5*57            [12] 3912 	mov	(_dump_sloc1_1_0 + 1),a
      00121C 90r00r04         [24] 3913 	mov	dptr,#_dump_page_65537_235
      00121F E0               [24] 3914 	movx	a,@dptr
      001220 7B 00            [12] 3915 	mov	r3,#0x00
      001222 B5*56 08         [24] 3916 	cjne	a,_dump_sloc1_1_0,00206$
      001225 EB               [12] 3917 	mov	a,r3
      001226 B5*57 04         [24] 3918 	cjne	a,(_dump_sloc1_1_0 + 1),00206$
      001229 D0 01            [24] 3919 	pop	ar1
      00122B 80 24            [24] 3920 	sjmp	00119$
      00122D                       3921 00206$:
      00122D D0 01            [24] 3922 	pop	ar1
      00122F EC               [12] 3923 	mov	a,r4
      001230 60 1F            [24] 3924 	jz	00119$
                                   3925 ;	dump2.c:133: LCD_string_write("Press B for next\n");
      001232 90r05rC1         [24] 3926 	mov	dptr,#___str_15
      001235 75 F0 80         [24] 3927 	mov	b,#0x80
      001238 C0 07            [24] 3928 	push	ar7
      00123A C0 06            [24] 3929 	push	ar6
      00123C C0 05            [24] 3930 	push	ar5
      00123E C0 04            [24] 3931 	push	ar4
      001240 C0 01            [24] 3932 	push	ar1
      001242 12r0Br7A         [24] 3933 	lcall	_LCD_string_write
      001245 D0 01            [24] 3934 	pop	ar1
      001247 D0 04            [24] 3935 	pop	ar4
      001249 D0 05            [24] 3936 	pop	ar5
      00124B D0 06            [24] 3937 	pop	ar6
      00124D D0 07            [24] 3938 	pop	ar7
      00124F 80 48            [24] 3939 	sjmp	00120$
      001251                       3940 00119$:
                                   3941 ;	dump2.c:134: } else if (page != 1 || size > NUM) { /***** this needs to be turned into an if else, if the page is the last page *****/
      001251 90r00r04         [24] 3942 	mov	dptr,#_dump_page_65537_235
      001254 E0               [24] 3943 	movx	a,@dptr
      001255 FB               [12] 3944 	mov	r3,a
      001256 BB 01 04         [24] 3945 	cjne	r3,#0x01,00114$
      001259 E5*55            [12] 3946 	mov	a,_dump_sloc0_1_0
      00125B 60 1F            [24] 3947 	jz	00115$
      00125D                       3948 00114$:
                                   3949 ;	dump2.c:135: LCD_string_write("Press A for previous\n");
      00125D 90r05rD3         [24] 3950 	mov	dptr,#___str_16
      001260 75 F0 80         [24] 3951 	mov	b,#0x80
      001263 C0 07            [24] 3952 	push	ar7
      001265 C0 06            [24] 3953 	push	ar6
      001267 C0 05            [24] 3954 	push	ar5
      001269 C0 04            [24] 3955 	push	ar4
      00126B C0 01            [24] 3956 	push	ar1
      00126D 12r0Br7A         [24] 3957 	lcall	_LCD_string_write
      001270 D0 01            [24] 3958 	pop	ar1
      001272 D0 04            [24] 3959 	pop	ar4
      001274 D0 05            [24] 3960 	pop	ar5
      001276 D0 06            [24] 3961 	pop	ar6
      001278 D0 07            [24] 3962 	pop	ar7
      00127A 80 1D            [24] 3963 	sjmp	00120$
      00127C                       3964 00115$:
                                   3965 ;	dump2.c:137: LCD_string_write("Press A for previous, B for next\n");
      00127C 90r05rE9         [24] 3966 	mov	dptr,#___str_17
      00127F 75 F0 80         [24] 3967 	mov	b,#0x80
      001282 C0 07            [24] 3968 	push	ar7
      001284 C0 06            [24] 3969 	push	ar6
      001286 C0 05            [24] 3970 	push	ar5
      001288 C0 04            [24] 3971 	push	ar4
      00128A C0 01            [24] 3972 	push	ar1
      00128C 12r0Br7A         [24] 3973 	lcall	_LCD_string_write
      00128F D0 01            [24] 3974 	pop	ar1
      001291 D0 04            [24] 3975 	pop	ar4
      001293 D0 05            [24] 3976 	pop	ar5
      001295 D0 06            [24] 3977 	pop	ar6
      001297 D0 07            [24] 3978 	pop	ar7
      001299                       3979 00120$:
                                   3980 ;	dump2.c:140: LCD_string_write("Press 1 for menu");
      001299 90r06r0B         [24] 3981 	mov	dptr,#___str_18
      00129C 75 F0 80         [24] 3982 	mov	b,#0x80
      00129F C0 07            [24] 3983 	push	ar7
      0012A1 C0 06            [24] 3984 	push	ar6
      0012A3 C0 05            [24] 3985 	push	ar5
      0012A5 C0 04            [24] 3986 	push	ar4
      0012A7 C0 01            [24] 3987 	push	ar1
      0012A9 12r0Br7A         [24] 3988 	lcall	_LCD_string_write
                                   3989 ;	dump2.c:142: input = keyDetect();
      0012AC 12r0Cr0A         [24] 3990 	lcall	_keyDetect
      0012AF AB 82            [24] 3991 	mov	r3,dpl
      0012B1 D0 01            [24] 3992 	pop	ar1
      0012B3 D0 04            [24] 3993 	pop	ar4
      0012B5 D0 05            [24] 3994 	pop	ar5
      0012B7 D0 06            [24] 3995 	pop	ar6
      0012B9 D0 07            [24] 3996 	pop	ar7
                                   3997 ;	dump2.c:147: if (input == 'B' && page != NUM) {			// next
      0012BB BB 42 47         [24] 3998 	cjne	r3,#0x42,00129$
      0012BE 90r00r04         [24] 3999 	mov	dptr,#_dump_page_65537_235
      0012C1 E0               [24] 4000 	movx	a,@dptr
      0012C2 F8               [12] 4001 	mov	r0,a
      0012C3 B8 0F 02         [24] 4002 	cjne	r0,#0x0f,00213$
      0012C6 80 3D            [24] 4003 	sjmp	00129$
      0012C8                       4004 00213$:
                                   4005 ;	dump2.c:148: dumpPage(address + NUM, NUM, type);
      0012C8 C0 01            [24] 4006 	push	ar1
      0012CA 8E 01            [24] 4007 	mov	ar1,r6
      0012CC 8F 02            [24] 4008 	mov	ar2,r7
      0012CE 74 0F            [12] 4009 	mov	a,#0x0f
      0012D0 29               [12] 4010 	add	a,r1
      0012D1 F9               [12] 4011 	mov	r1,a
      0012D2 E4               [12] 4012 	clr	a
      0012D3 3A               [12] 4013 	addc	a,r2
      0012D4 FA               [12] 4014 	mov	r2,a
      0012D5 89 82            [24] 4015 	mov	dpl,r1
      0012D7 8A 83            [24] 4016 	mov	dph,r2
      0012D9 75*51 0F         [24] 4017 	mov	_dumpPage_PARM_2,#0x0f
      0012DC 85*58*52         [24] 4018 	mov	_dumpPage_PARM_3,_dump_sloc2_1_0
      0012DF C0 07            [24] 4019 	push	ar7
      0012E1 C0 06            [24] 4020 	push	ar6
      0012E3 C0 05            [24] 4021 	push	ar5
      0012E5 C0 04            [24] 4022 	push	ar4
      0012E7 C0 01            [24] 4023 	push	ar1
      0012E9 C0 00            [24] 4024 	push	ar0
      0012EB 12r0Fr8F         [24] 4025 	lcall	_dumpPage
      0012EE D0 00            [24] 4026 	pop	ar0
      0012F0 D0 01            [24] 4027 	pop	ar1
      0012F2 D0 04            [24] 4028 	pop	ar4
      0012F4 D0 05            [24] 4029 	pop	ar5
      0012F6 D0 06            [24] 4030 	pop	ar6
      0012F8 D0 07            [24] 4031 	pop	ar7
                                   4032 ;	dump2.c:149: page++;
      0012FA 90r00r04         [24] 4033 	mov	dptr,#_dump_page_65537_235
      0012FD E8               [12] 4034 	mov	a,r0
      0012FE 04               [12] 4035 	inc	a
      0012FF F0               [24] 4036 	movx	@dptr,a
      001300 D0 01            [24] 4037 	pop	ar1
      001302 02r11rE8         [24] 4038 	ljmp	00132$
      001305                       4039 00129$:
                                   4040 ;	dump2.c:150: } else if (input == 'A' && page != 1) {		// previous
      001305 BB 41 47         [24] 4041 	cjne	r3,#0x41,00125$
      001308 90r00r04         [24] 4042 	mov	dptr,#_dump_page_65537_235
      00130B E0               [24] 4043 	movx	a,@dptr
      00130C FA               [12] 4044 	mov	r2,a
      00130D BA 01 02         [24] 4045 	cjne	r2,#0x01,00216$
      001310 80 3D            [24] 4046 	sjmp	00125$
      001312                       4047 00216$:
                                   4048 ;	dump2.c:151: dumpPage(address - NUM, NUM, type);
      001312 C0 04            [24] 4049 	push	ar4
      001314 8E 00            [24] 4050 	mov	ar0,r6
      001316 8F 04            [24] 4051 	mov	ar4,r7
      001318 E8               [12] 4052 	mov	a,r0
      001319 24 F1            [12] 4053 	add	a,#0xf1
      00131B F8               [12] 4054 	mov	r0,a
      00131C EC               [12] 4055 	mov	a,r4
      00131D 34 FF            [12] 4056 	addc	a,#0xff
      00131F FC               [12] 4057 	mov	r4,a
      001320 88 82            [24] 4058 	mov	dpl,r0
      001322 8C 83            [24] 4059 	mov	dph,r4
      001324 75*51 0F         [24] 4060 	mov	_dumpPage_PARM_2,#0x0f
      001327 89*52            [24] 4061 	mov	_dumpPage_PARM_3,r1
      001329 C0 07            [24] 4062 	push	ar7
      00132B C0 06            [24] 4063 	push	ar6
      00132D C0 05            [24] 4064 	push	ar5
      00132F C0 04            [24] 4065 	push	ar4
      001331 C0 02            [24] 4066 	push	ar2
      001333 C0 01            [24] 4067 	push	ar1
      001335 12r0Fr8F         [24] 4068 	lcall	_dumpPage
      001338 D0 01            [24] 4069 	pop	ar1
      00133A D0 02            [24] 4070 	pop	ar2
      00133C D0 04            [24] 4071 	pop	ar4
      00133E D0 05            [24] 4072 	pop	ar5
      001340 D0 06            [24] 4073 	pop	ar6
      001342 D0 07            [24] 4074 	pop	ar7
                                   4075 ;	dump2.c:152: page--;
      001344 EA               [12] 4076 	mov	a,r2
      001345 14               [12] 4077 	dec	a
      001346 90r00r04         [24] 4078 	mov	dptr,#_dump_page_65537_235
      001349 F0               [24] 4079 	movx	@dptr,a
      00134A D0 04            [24] 4080 	pop	ar4
      00134C 02r11rE8         [24] 4081 	ljmp	00132$
      00134F                       4082 00125$:
                                   4083 ;	dump2.c:153: } else if (input == '1') {					// main menu
      00134F BB 31 01         [24] 4084 	cjne	r3,#0x31,00217$
      001352 22               [24] 4085 	ret
      001353                       4086 00217$:
      001353 02r11rE8         [24] 4087 	ljmp	00132$
                                   4088 ;	dump2.c:157: } while (1);
                                   4089 ;	dump2.c:159: }
      001356 22               [24] 4090 	ret
                                   4091 ;------------------------------------------------------------
                                   4092 ;Allocation info for local variables in function 'check'
                                   4093 ;------------------------------------------------------------
                                   4094 ;ramAddress                Allocated to registers r4 r5 
                                   4095 ;checker                   Allocated with name '_check_checker_65537_251'
                                   4096 ;input                     Allocated with name '_check_input_65537_251'
                                   4097 ;fetched                   Allocated with name '_check_fetched_65537_251'
                                   4098 ;i                         Allocated with name '_check_i_65537_251'
                                   4099 ;error                     Allocated with name '_check_error_65537_251'
                                   4100 ;------------------------------------------------------------
                                   4101 ;	check.c:6: void check() {
                                   4102 ;	-----------------------------------------
                                   4103 ;	 function check
                                   4104 ;	-----------------------------------------
      001357                       4105 _check:
                                   4106 ;	check.c:8: fillScreen(GRAY);
      001357 90 D6 BA         [24] 4107 	mov	dptr,#0xd6ba
      00135A 12r07r9A         [24] 4108 	lcall	_fillScreen
                                   4109 ;	check.c:9: setCursor(0, 0);
      00135D E4               [12] 4110 	clr	a
      00135E F5*00            [12] 4111 	mov	_setCursor_PARM_2,a
      001360 F5*01            [12] 4112 	mov	(_setCursor_PARM_2 + 1),a
      001362 90 00 00         [24] 4113 	mov	dptr,#0x0000
      001365 12r00rA5         [24] 4114 	lcall	_setCursor
                                   4115 ;	check.c:10: setTextSize(2);
      001368 75 82 02         [24] 4116 	mov	dpl,#0x02
      00136B 12r00rBF         [24] 4117 	lcall	_setTextSize
                                   4118 ;	check.c:17: __xdata bool error = false;
      00136E 90r00r06         [24] 4119 	mov	dptr,#_check_error_65537_251
      001371 E4               [12] 4120 	clr	a
      001372 F0               [24] 4121 	movx	@dptr,a
                                   4122 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      001373 90r06r1C         [24] 4123 	mov	dptr,#___str_19
      001376 75 F0 80         [24] 4124 	mov	b,#0x80
      001379 12r0Br7A         [24] 4125 	lcall	_LCD_string_write
                                   4126 ;	check.c:22: checker = getByte();
      00137C 12r0Fr58         [24] 4127 	lcall	_getByte
      00137F E5 82            [12] 4128 	mov	a,dpl
      001381 90r00r05         [24] 4129 	mov	dptr,#_check_checker_65537_251
      001384 F0               [24] 4130 	movx	@dptr,a
                                   4131 ;	check.c:23: write('\n');
      001385 75 82 0A         [24] 4132 	mov	dpl,#0x0a
      001388 12r0Br0C         [24] 4133 	lcall	_write
                                   4134 ;	check.c:24: LCD_string_write("In progress...\n");
      00138B 90r06r31         [24] 4135 	mov	dptr,#___str_20
      00138E 75 F0 80         [24] 4136 	mov	b,#0x80
      001391 12r0Br7A         [24] 4137 	lcall	_LCD_string_write
                                   4138 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001394 7E 00            [12] 4139 	mov	r6,#0x00
      001396 7F 00            [12] 4140 	mov	r7,#0x00
      001398                       4141 00112$:
                                   4142 ;	check.c:30: IOM = 0;
                                   4143 ;	assignBit
      001398 C2 B4            [12] 4144 	clr	_P3_4
                                   4145 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      00139A 8E 04            [24] 4146 	mov	ar4,r6
      00139C 8F 05            [24] 4147 	mov	ar5,r7
                                   4148 ;	check.c:32: *ramAddress = checker;
      00139E 90r00r05         [24] 4149 	mov	dptr,#_check_checker_65537_251
      0013A1 E0               [24] 4150 	movx	a,@dptr
      0013A2 FB               [12] 4151 	mov	r3,a
      0013A3 F9               [12] 4152 	mov	r1,a
      0013A4 7A 00            [12] 4153 	mov	r2,#0x00
      0013A6 8C 82            [24] 4154 	mov	dpl,r4
      0013A8 8D 83            [24] 4155 	mov	dph,r5
      0013AA E9               [12] 4156 	mov	a,r1
      0013AB F0               [24] 4157 	movx	@dptr,a
      0013AC EA               [12] 4158 	mov	a,r2
      0013AD A3               [24] 4159 	inc	dptr
      0013AE F0               [24] 4160 	movx	@dptr,a
                                   4161 ;	check.c:33: fetched = *ramAddress;
                                   4162 ;	check.c:34: IOM = 1;
                                   4163 ;	assignBit
      0013AF D2 B4            [12] 4164 	setb	_P3_4
                                   4165 ;	check.c:35: if (fetched != checker) {
      0013B1 E9               [12] 4166 	mov	a,r1
      0013B2 B5 03 02         [24] 4167 	cjne	a,ar3,00136$
      0013B5 80 43            [24] 4168 	sjmp	00104$
      0013B7                       4169 00136$:
                                   4170 ;	check.c:36: asciiToHex(checker);
      0013B7 8B 82            [24] 4171 	mov	dpl,r3
      0013B9 C0 05            [24] 4172 	push	ar5
      0013BB C0 04            [24] 4173 	push	ar4
      0013BD C0 01            [24] 4174 	push	ar1
      0013BF 12r0DrCD         [24] 4175 	lcall	_asciiToHex
                                   4176 ;	check.c:37: write(' ');
      0013C2 75 82 20         [24] 4177 	mov	dpl,#0x20
      0013C5 12r0Br0C         [24] 4178 	lcall	_write
      0013C8 D0 01            [24] 4179 	pop	ar1
                                   4180 ;	check.c:38: asciiToHex(fetched);
      0013CA 89 82            [24] 4181 	mov	dpl,r1
      0013CC 12r0DrCD         [24] 4182 	lcall	_asciiToHex
                                   4183 ;	check.c:39: write(' ');
      0013CF 75 82 20         [24] 4184 	mov	dpl,#0x20
      0013D2 12r0Br0C         [24] 4185 	lcall	_write
      0013D5 D0 04            [24] 4186 	pop	ar4
      0013D7 D0 05            [24] 4187 	pop	ar5
                                   4188 ;	check.c:40: asciiToHex(*ramAddress);
      0013D9 8C 82            [24] 4189 	mov	dpl,r4
      0013DB 8D 83            [24] 4190 	mov	dph,r5
      0013DD E0               [24] 4191 	movx	a,@dptr
      0013DE F5 82            [12] 4192 	mov	dpl,a
      0013E0 12r0DrCD         [24] 4193 	lcall	_asciiToHex
                                   4194 ;	check.c:41: write('\n');
      0013E3 75 82 0A         [24] 4195 	mov	dpl,#0x0a
      0013E6 12r0Br0C         [24] 4196 	lcall	_write
                                   4197 ;	check.c:42: LCD_string_write("Memory check failed\n");
      0013E9 90r06r41         [24] 4198 	mov	dptr,#___str_21
      0013EC 75 F0 80         [24] 4199 	mov	b,#0x80
      0013EF 12r0Br7A         [24] 4200 	lcall	_LCD_string_write
                                   4201 ;	check.c:43: error = true;
      0013F2 90r00r06         [24] 4202 	mov	dptr,#_check_error_65537_251
      0013F5 74 01            [12] 4203 	mov	a,#0x01
      0013F7 F0               [24] 4204 	movx	@dptr,a
                                   4205 ;	check.c:44: break;
      0013F8 80 78            [24] 4206 	sjmp	00106$
      0013FA                       4207 00104$:
                                   4208 ;	check.c:46: IOM = 0;
                                   4209 ;	assignBit
      0013FA C2 B4            [12] 4210 	clr	_P3_4
                                   4211 ;	check.c:47: checker = ~checker;
      0013FC 90r00r05         [24] 4212 	mov	dptr,#_check_checker_65537_251
      0013FF EB               [12] 4213 	mov	a,r3
      001400 F4               [12] 4214 	cpl	a
      001401 F0               [24] 4215 	movx	@dptr,a
                                   4216 ;	check.c:48: *ramAddress = checker;
      001402 E0               [24] 4217 	movx	a,@dptr
      001403 FB               [12] 4218 	mov	r3,a
      001404 F9               [12] 4219 	mov	r1,a
      001405 7A 00            [12] 4220 	mov	r2,#0x00
      001407 8C 82            [24] 4221 	mov	dpl,r4
      001409 8D 83            [24] 4222 	mov	dph,r5
      00140B E9               [12] 4223 	mov	a,r1
      00140C F0               [24] 4224 	movx	@dptr,a
      00140D EA               [12] 4225 	mov	a,r2
      00140E A3               [24] 4226 	inc	dptr
      00140F F0               [24] 4227 	movx	@dptr,a
                                   4228 ;	check.c:49: fetched = *ramAddress;
                                   4229 ;	check.c:50: IOM = 1;
                                   4230 ;	assignBit
      001410 D2 B4            [12] 4231 	setb	_P3_4
                                   4232 ;	check.c:51: if (fetched != checker) {
      001412 E9               [12] 4233 	mov	a,r1
      001413 B5 03 02         [24] 4234 	cjne	a,ar3,00137$
      001416 80 45            [24] 4235 	sjmp	00113$
      001418                       4236 00137$:
                                   4237 ;	check.c:52: asciiToHex(~checker);
      001418 EB               [12] 4238 	mov	a,r3
      001419 F4               [12] 4239 	cpl	a
      00141A F5 82            [12] 4240 	mov	dpl,a
      00141C C0 05            [24] 4241 	push	ar5
      00141E C0 04            [24] 4242 	push	ar4
      001420 C0 01            [24] 4243 	push	ar1
      001422 12r0DrCD         [24] 4244 	lcall	_asciiToHex
                                   4245 ;	check.c:53: write(' ');
      001425 75 82 20         [24] 4246 	mov	dpl,#0x20
      001428 12r0Br0C         [24] 4247 	lcall	_write
      00142B D0 01            [24] 4248 	pop	ar1
                                   4249 ;	check.c:54: asciiToHex(fetched);
      00142D 89 82            [24] 4250 	mov	dpl,r1
      00142F 12r0DrCD         [24] 4251 	lcall	_asciiToHex
                                   4252 ;	check.c:55: write(' ');
      001432 75 82 20         [24] 4253 	mov	dpl,#0x20
      001435 12r0Br0C         [24] 4254 	lcall	_write
      001438 D0 04            [24] 4255 	pop	ar4
      00143A D0 05            [24] 4256 	pop	ar5
                                   4257 ;	check.c:56: asciiToHex(*ramAddress);
      00143C 8C 82            [24] 4258 	mov	dpl,r4
      00143E 8D 83            [24] 4259 	mov	dph,r5
      001440 E0               [24] 4260 	movx	a,@dptr
      001441 F5 82            [12] 4261 	mov	dpl,a
      001443 12r0DrCD         [24] 4262 	lcall	_asciiToHex
                                   4263 ;	check.c:57: write('\n');
      001446 75 82 0A         [24] 4264 	mov	dpl,#0x0a
      001449 12r0Br0C         [24] 4265 	lcall	_write
                                   4266 ;	check.c:58: LCD_string_write("Memory check failed\n");
      00144C 90r06r41         [24] 4267 	mov	dptr,#___str_21
      00144F 75 F0 80         [24] 4268 	mov	b,#0x80
      001452 12r0Br7A         [24] 4269 	lcall	_LCD_string_write
                                   4270 ;	check.c:59: error = true;
      001455 90r00r06         [24] 4271 	mov	dptr,#_check_error_65537_251
      001458 74 01            [12] 4272 	mov	a,#0x01
      00145A F0               [24] 4273 	movx	@dptr,a
                                   4274 ;	check.c:60: break;
      00145B 80 15            [24] 4275 	sjmp	00106$
      00145D                       4276 00113$:
                                   4277 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      00145D 0E               [12] 4278 	inc	r6
      00145E BE 00 01         [24] 4279 	cjne	r6,#0x00,00138$
      001461 0F               [12] 4280 	inc	r7
      001462                       4281 00138$:
      001462 8E 04            [24] 4282 	mov	ar4,r6
      001464 8F 05            [24] 4283 	mov	ar5,r7
      001466 C3               [12] 4284 	clr	c
      001467 EC               [12] 4285 	mov	a,r4
      001468 94 FF            [12] 4286 	subb	a,#0xff
      00146A ED               [12] 4287 	mov	a,r5
      00146B 94 FF            [12] 4288 	subb	a,#0xff
      00146D 50 03            [24] 4289 	jnc	00139$
      00146F 02r13r98         [24] 4290 	ljmp	00112$
      001472                       4291 00139$:
      001472                       4292 00106$:
                                   4293 ;	check.c:68: if (error != false) {
      001472 90r00r06         [24] 4294 	mov	dptr,#_check_error_65537_251
      001475 E0               [24] 4295 	movx	a,@dptr
      001476 60 09            [24] 4296 	jz	00108$
                                   4297 ;	check.c:69: LCD_string_write("Success!\n");
      001478 90r06r56         [24] 4298 	mov	dptr,#___str_22
      00147B 75 F0 80         [24] 4299 	mov	b,#0x80
      00147E 12r0Br7A         [24] 4300 	lcall	_LCD_string_write
      001481                       4301 00108$:
                                   4302 ;	check.c:73: LCD_string_write("Press 1 for menu");
      001481 90r06r0B         [24] 4303 	mov	dptr,#___str_18
      001484 75 F0 80         [24] 4304 	mov	b,#0x80
      001487 12r0Br7A         [24] 4305 	lcall	_LCD_string_write
                                   4306 ;	check.c:75: do {
      00148A                       4307 00109$:
                                   4308 ;	check.c:76: input = keyDetect();
      00148A 12r0Cr0A         [24] 4309 	lcall	_keyDetect
      00148D AF 82            [24] 4310 	mov	r7,dpl
                                   4311 ;	check.c:77: } while (input != '1');
      00148F BF 31 F8         [24] 4312 	cjne	r7,#0x31,00109$
                                   4313 ;	check.c:78: }
      001492 22               [24] 4314 	ret
                                   4315 ;------------------------------------------------------------
                                   4316 ;Allocation info for local variables in function 'basic'
                                   4317 ;------------------------------------------------------------
                                   4318 ;val                       Allocated to registers r7 
                                   4319 ;fetched                   Allocated to registers r7 
                                   4320 ;add                       Allocated to registers r5 r6 
                                   4321 ;ramAddress                Allocated to registers 
                                   4322 ;------------------------------------------------------------
                                   4323 ;	check.c:84: void basic() {
                                   4324 ;	-----------------------------------------
                                   4325 ;	 function basic
                                   4326 ;	-----------------------------------------
      001493                       4327 _basic:
                                   4328 ;	check.c:86: fillScreen(GRAY);
      001493 90 D6 BA         [24] 4329 	mov	dptr,#0xd6ba
      001496 12r07r9A         [24] 4330 	lcall	_fillScreen
                                   4331 ;	check.c:87: setCursor(0, 0);
      001499 E4               [12] 4332 	clr	a
      00149A F5*00            [12] 4333 	mov	_setCursor_PARM_2,a
      00149C F5*01            [12] 4334 	mov	(_setCursor_PARM_2 + 1),a
      00149E 90 00 00         [24] 4335 	mov	dptr,#0x0000
      0014A1 12r00rA5         [24] 4336 	lcall	_setCursor
                                   4337 ;	check.c:88: setTextSize(2);
      0014A4 75 82 02         [24] 4338 	mov	dpl,#0x02
      0014A7 12r00rBF         [24] 4339 	lcall	_setTextSize
                                   4340 ;	check.c:97: LCD_string_write("Enter byte\n");
      0014AA 90r06r60         [24] 4341 	mov	dptr,#___str_23
      0014AD 75 F0 80         [24] 4342 	mov	b,#0x80
      0014B0 12r0Br7A         [24] 4343 	lcall	_LCD_string_write
                                   4344 ;	check.c:98: val = getByte();
      0014B3 12r0Fr58         [24] 4345 	lcall	_getByte
      0014B6 AF 82            [24] 4346 	mov	r7,dpl
                                   4347 ;	check.c:99: write('\n');
      0014B8 75 82 0A         [24] 4348 	mov	dpl,#0x0a
      0014BB C0 07            [24] 4349 	push	ar7
      0014BD 12r0Br0C         [24] 4350 	lcall	_write
                                   4351 ;	check.c:102: LCD_string_write("Enter address\n");
      0014C0 90r06r6C         [24] 4352 	mov	dptr,#___str_24
      0014C3 75 F0 80         [24] 4353 	mov	b,#0x80
      0014C6 12r0Br7A         [24] 4354 	lcall	_LCD_string_write
                                   4355 ;	check.c:103: add = getAddress();
      0014C9 12r0Fr0D         [24] 4356 	lcall	_getAddress
      0014CC AD 82            [24] 4357 	mov	r5,dpl
      0014CE AE 83            [24] 4358 	mov	r6,dph
                                   4359 ;	check.c:104: write('\n');
      0014D0 75 82 0A         [24] 4360 	mov	dpl,#0x0a
      0014D3 C0 06            [24] 4361 	push	ar6
      0014D5 C0 05            [24] 4362 	push	ar5
      0014D7 12r0Br0C         [24] 4363 	lcall	_write
                                   4364 ;	check.c:105: LCD_string_write("In progress\n");
      0014DA 90r06r7B         [24] 4365 	mov	dptr,#___str_25
      0014DD 75 F0 80         [24] 4366 	mov	b,#0x80
      0014E0 12r0Br7A         [24] 4367 	lcall	_LCD_string_write
      0014E3 D0 05            [24] 4368 	pop	ar5
      0014E5 D0 06            [24] 4369 	pop	ar6
      0014E7 D0 07            [24] 4370 	pop	ar7
                                   4371 ;	check.c:107: IOM = 0;
                                   4372 ;	assignBit
      0014E9 C2 B4            [12] 4373 	clr	_P3_4
                                   4374 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      0014EB 8D 82            [24] 4375 	mov	dpl,r5
      0014ED 8E 83            [24] 4376 	mov	dph,r6
                                   4377 ;	check.c:111: *ramAddress = val;
      0014EF 8F 05            [24] 4378 	mov	ar5,r7
      0014F1 7E 00            [12] 4379 	mov	r6,#0x00
      0014F3 ED               [12] 4380 	mov	a,r5
      0014F4 F0               [24] 4381 	movx	@dptr,a
      0014F5 EE               [12] 4382 	mov	a,r6
      0014F6 A3               [24] 4383 	inc	dptr
      0014F7 F0               [24] 4384 	movx	@dptr,a
                                   4385 ;	check.c:114: fetched = *ramAddress;
                                   4386 ;	check.c:116: IOM = 1;
                                   4387 ;	assignBit
      0014F8 D2 B4            [12] 4388 	setb	_P3_4
                                   4389 ;	check.c:119: if (fetched == val) {
      0014FA ED               [12] 4390 	mov	a,r5
      0014FB B5 07 10         [24] 4391 	cjne	a,ar7,00102$
                                   4392 ;	check.c:120: asciiToHex(fetched);
      0014FE 8D 82            [24] 4393 	mov	dpl,r5
      001500 12r0DrCD         [24] 4394 	lcall	_asciiToHex
                                   4395 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      001503 90r06r88         [24] 4396 	mov	dptr,#___str_26
      001506 75 F0 80         [24] 4397 	mov	b,#0x80
      001509 12r0Br7A         [24] 4398 	lcall	_LCD_string_write
      00150C 80 09            [24] 4399 	sjmp	00103$
      00150E                       4400 00102$:
                                   4401 ;	check.c:123: LCD_string_write("Check failed\n");
      00150E 90r06r9C         [24] 4402 	mov	dptr,#___str_27
      001511 75 F0 80         [24] 4403 	mov	b,#0x80
      001514 12r0Br7A         [24] 4404 	lcall	_LCD_string_write
      001517                       4405 00103$:
                                   4406 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      001517 90r06rAA         [24] 4407 	mov	dptr,#___str_28
      00151A 75 F0 80         [24] 4408 	mov	b,#0x80
      00151D 12r0Br7A         [24] 4409 	lcall	_LCD_string_write
                                   4410 ;	check.c:128: do {
      001520                       4411 00104$:
                                   4412 ;	check.c:129: fetched = keyDetect();
      001520 12r0Cr0A         [24] 4413 	lcall	_keyDetect
      001523 AF 82            [24] 4414 	mov	r7,dpl
                                   4415 ;	check.c:130: } while (fetched != '1');
      001525 BF 31 F8         [24] 4416 	cjne	r7,#0x31,00104$
                                   4417 ;	check.c:131: }
      001528 22               [24] 4418 	ret
                                   4419 ;------------------------------------------------------------
                                   4420 ;Allocation info for local variables in function 'move'
                                   4421 ;------------------------------------------------------------
                                   4422 ;origin                    Allocated to registers 
                                   4423 ;target                    Allocated with name '_move_target_65537_265'
                                   4424 ;startAdd                  Allocated with name '_move_startAdd_65537_265'
                                   4425 ;targetAdd                 Allocated with name '_move_targetAdd_65537_265'
                                   4426 ;i                         Allocated with name '_move_i_65537_265'
                                   4427 ;size                      Allocated with name '_move_size_65537_265'
                                   4428 ;------------------------------------------------------------
                                   4429 ;	move.c:5: void move() {
                                   4430 ;	-----------------------------------------
                                   4431 ;	 function move
                                   4432 ;	-----------------------------------------
      001529                       4433 _move:
                                   4434 ;	move.c:7: fillScreen(GRAY);
      001529 90 D6 BA         [24] 4435 	mov	dptr,#0xd6ba
      00152C 12r07r9A         [24] 4436 	lcall	_fillScreen
                                   4437 ;	move.c:8: setCursor(0, 0);
      00152F E4               [12] 4438 	clr	a
      001530 F5*00            [12] 4439 	mov	_setCursor_PARM_2,a
      001532 F5*01            [12] 4440 	mov	(_setCursor_PARM_2 + 1),a
      001534 90 00 00         [24] 4441 	mov	dptr,#0x0000
      001537 12r00rA5         [24] 4442 	lcall	_setCursor
                                   4443 ;	move.c:19: setTextSize(2);
      00153A 75 82 02         [24] 4444 	mov	dpl,#0x02
      00153D 12r00rBF         [24] 4445 	lcall	_setTextSize
                                   4446 ;	move.c:20: LCD_string_write("Enter start add.\n");
      001540 90r06rBC         [24] 4447 	mov	dptr,#___str_29
      001543 75 F0 80         [24] 4448 	mov	b,#0x80
      001546 12r0Br7A         [24] 4449 	lcall	_LCD_string_write
                                   4450 ;	move.c:21: startAdd = getAddress();
      001549 12r0Fr0D         [24] 4451 	lcall	_getAddress
      00154C AE 82            [24] 4452 	mov	r6,dpl
      00154E AF 83            [24] 4453 	mov	r7,dph
                                   4454 ;	move.c:22: write('\n');
      001550 75 82 0A         [24] 4455 	mov	dpl,#0x0a
      001553 C0 07            [24] 4456 	push	ar7
      001555 C0 06            [24] 4457 	push	ar6
      001557 12r0Br0C         [24] 4458 	lcall	_write
                                   4459 ;	move.c:25: LCD_string_write("Enter size\n");
      00155A 90r06rCE         [24] 4460 	mov	dptr,#___str_30
      00155D 75 F0 80         [24] 4461 	mov	b,#0x80
      001560 12r0Br7A         [24] 4462 	lcall	_LCD_string_write
                                   4463 ;	move.c:26: size = getByte();
      001563 12r0Fr58         [24] 4464 	lcall	_getByte
      001566 AD 82            [24] 4465 	mov	r5,dpl
                                   4466 ;	move.c:27: write('\n');
      001568 75 82 0A         [24] 4467 	mov	dpl,#0x0a
      00156B C0 05            [24] 4468 	push	ar5
      00156D 12r0Br0C         [24] 4469 	lcall	_write
                                   4470 ;	move.c:30: LCD_string_write("Enter target add.\n");
      001570 90r06rDA         [24] 4471 	mov	dptr,#___str_31
      001573 75 F0 80         [24] 4472 	mov	b,#0x80
      001576 12r0Br7A         [24] 4473 	lcall	_LCD_string_write
                                   4474 ;	move.c:31: targetAdd = getAddress();
      001579 12r0Fr0D         [24] 4475 	lcall	_getAddress
      00157C AB 82            [24] 4476 	mov	r3,dpl
      00157E AC 83            [24] 4477 	mov	r4,dph
                                   4478 ;	move.c:32: write('\n');
      001580 75 82 0A         [24] 4479 	mov	dpl,#0x0a
      001583 C0 04            [24] 4480 	push	ar4
      001585 C0 03            [24] 4481 	push	ar3
      001587 12r0Br0C         [24] 4482 	lcall	_write
                                   4483 ;	move.c:35: LCD_string_write("Move in progress...\n");
      00158A 90r06rED         [24] 4484 	mov	dptr,#___str_32
      00158D 75 F0 80         [24] 4485 	mov	b,#0x80
      001590 12r0Br7A         [24] 4486 	lcall	_LCD_string_write
      001593 D0 03            [24] 4487 	pop	ar3
      001595 D0 04            [24] 4488 	pop	ar4
      001597 D0 05            [24] 4489 	pop	ar5
      001599 D0 06            [24] 4490 	pop	ar6
      00159B D0 07            [24] 4491 	pop	ar7
                                   4492 ;	move.c:38: for (i = 0; i < size; i++) {
      00159D 79 00            [12] 4493 	mov	r1,#0x00
      00159F 7A 00            [12] 4494 	mov	r2,#0x00
      0015A1                       4495 00106$:
      0015A1 C0 03            [24] 4496 	push	ar3
      0015A3 C0 04            [24] 4497 	push	ar4
      0015A5 8D 00            [24] 4498 	mov	ar0,r5
      0015A7 7C 00            [12] 4499 	mov	r4,#0x00
      0015A9 C3               [12] 4500 	clr	c
      0015AA E9               [12] 4501 	mov	a,r1
      0015AB 98               [12] 4502 	subb	a,r0
      0015AC EA               [12] 4503 	mov	a,r2
      0015AD 9C               [12] 4504 	subb	a,r4
      0015AE D0 04            [24] 4505 	pop	ar4
      0015B0 D0 03            [24] 4506 	pop	ar3
      0015B2 50 31            [24] 4507 	jnc	00101$
                                   4508 ;	move.c:42: IOM = 0;
      0015B4 C0 05            [24] 4509 	push	ar5
                                   4510 ;	assignBit
      0015B6 C2 B4            [12] 4511 	clr	_P3_4
                                   4512 ;	move.c:43: origin = (uint16_t __xdata*)(startAdd);
      0015B8 8E 82            [24] 4513 	mov	dpl,r6
      0015BA 8F 83            [24] 4514 	mov	dph,r7
                                   4515 ;	move.c:44: target = (uint16_t __xdata*)(targetAdd);
      0015BC 8B*59            [24] 4516 	mov	_move_target_65537_265,r3
      0015BE 8C*5A            [24] 4517 	mov	(_move_target_65537_265 + 1),r4
                                   4518 ;	move.c:45: *target = *origin;
      0015C0 E0               [24] 4519 	movx	a,@dptr
      0015C1 F8               [12] 4520 	mov	r0,a
      0015C2 A3               [24] 4521 	inc	dptr
      0015C3 E0               [24] 4522 	movx	a,@dptr
      0015C4 FD               [12] 4523 	mov	r5,a
      0015C5 85*59 82         [24] 4524 	mov	dpl,_move_target_65537_265
      0015C8 85*5A 83         [24] 4525 	mov	dph,(_move_target_65537_265 + 1)
      0015CB E8               [12] 4526 	mov	a,r0
      0015CC F0               [24] 4527 	movx	@dptr,a
      0015CD ED               [12] 4528 	mov	a,r5
      0015CE A3               [24] 4529 	inc	dptr
      0015CF F0               [24] 4530 	movx	@dptr,a
                                   4531 ;	move.c:46: IOM = 1;
                                   4532 ;	assignBit
      0015D0 D2 B4            [12] 4533 	setb	_P3_4
                                   4534 ;	move.c:49: startAdd++;
      0015D2 0E               [12] 4535 	inc	r6
      0015D3 BE 00 01         [24] 4536 	cjne	r6,#0x00,00124$
      0015D6 0F               [12] 4537 	inc	r7
      0015D7                       4538 00124$:
                                   4539 ;	move.c:50: targetAdd++;
      0015D7 0B               [12] 4540 	inc	r3
      0015D8 BB 00 01         [24] 4541 	cjne	r3,#0x00,00125$
      0015DB 0C               [12] 4542 	inc	r4
      0015DC                       4543 00125$:
                                   4544 ;	move.c:38: for (i = 0; i < size; i++) {
      0015DC 09               [12] 4545 	inc	r1
      0015DD B9 00 01         [24] 4546 	cjne	r1,#0x00,00126$
      0015E0 0A               [12] 4547 	inc	r2
      0015E1                       4548 00126$:
      0015E1 D0 05            [24] 4549 	pop	ar5
      0015E3 80 BC            [24] 4550 	sjmp	00106$
      0015E5                       4551 00101$:
                                   4552 ;	move.c:53: LCD_string_write("Done!\n");
      0015E5 90r07r02         [24] 4553 	mov	dptr,#___str_33
      0015E8 75 F0 80         [24] 4554 	mov	b,#0x80
      0015EB 12r0Br7A         [24] 4555 	lcall	_LCD_string_write
                                   4556 ;	move.c:54: LCD_string_write("Press 1 for menu\n");
      0015EE 90r06rAA         [24] 4557 	mov	dptr,#___str_28
      0015F1 75 F0 80         [24] 4558 	mov	b,#0x80
      0015F4 12r0Br7A         [24] 4559 	lcall	_LCD_string_write
                                   4560 ;	move.c:56: do {
      0015F7                       4561 00102$:
                                   4562 ;	move.c:57: size = keyDetect();
      0015F7 12r0Cr0A         [24] 4563 	lcall	_keyDetect
      0015FA AF 82            [24] 4564 	mov	r7,dpl
                                   4565 ;	move.c:58: } while (size != '1');
      0015FC BF 31 F8         [24] 4566 	cjne	r7,#0x31,00102$
                                   4567 ;	move.c:59: }
      0015FF 22               [24] 4568 	ret
                                   4569 ;------------------------------------------------------------
                                   4570 ;Allocation info for local variables in function 'editByte'
                                   4571 ;------------------------------------------------------------
                                   4572 ;add                       Allocated to registers r6 r7 
                                   4573 ;ramAddress                Allocated to registers r6 r7 
                                   4574 ;val                       Allocated with name '_editByte_val_65536_270'
                                   4575 ;new                       Allocated with name '_editByte_new_65536_270'
                                   4576 ;high                      Allocated with name '_editByte_high_65536_270'
                                   4577 ;low                       Allocated with name '_editByte_low_65536_270'
                                   4578 ;------------------------------------------------------------
                                   4579 ;	edit.c:6: void editByte(uint16_t add) {
                                   4580 ;	-----------------------------------------
                                   4581 ;	 function editByte
                                   4582 ;	-----------------------------------------
      001600                       4583 _editByte:
      001600 AE 82            [24] 4584 	mov	r6,dpl
      001602 AF 83            [24] 4585 	mov	r7,dph
                                   4586 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      001604 8F 05            [24] 4587 	mov	ar5,r7
      001606 8D 04            [24] 4588 	mov	ar4,r5
                                   4589 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      001608 8E 05            [24] 4590 	mov	ar5,r6
                                   4591 ;	edit.c:16: asciiToHex(high);
      00160A 8C 82            [24] 4592 	mov	dpl,r4
      00160C C0 07            [24] 4593 	push	ar7
      00160E C0 06            [24] 4594 	push	ar6
      001610 C0 05            [24] 4595 	push	ar5
      001612 C0 04            [24] 4596 	push	ar4
      001614 12r0DrCD         [24] 4597 	lcall	_asciiToHex
      001617 D0 04            [24] 4598 	pop	ar4
      001619 D0 05            [24] 4599 	pop	ar5
                                   4600 ;	edit.c:17: asciiToHex(low);
      00161B 8D 82            [24] 4601 	mov	dpl,r5
      00161D C0 05            [24] 4602 	push	ar5
      00161F C0 04            [24] 4603 	push	ar4
      001621 12r0DrCD         [24] 4604 	lcall	_asciiToHex
                                   4605 ;	edit.c:19: LCD_string_write(": ");
      001624 90r05r4B         [24] 4606 	mov	dptr,#___str_6
      001627 75 F0 80         [24] 4607 	mov	b,#0x80
      00162A 12r0Br7A         [24] 4608 	lcall	_LCD_string_write
      00162D D0 04            [24] 4609 	pop	ar4
      00162F D0 05            [24] 4610 	pop	ar5
      001631 D0 06            [24] 4611 	pop	ar6
      001633 D0 07            [24] 4612 	pop	ar7
                                   4613 ;	edit.c:22: IOM = 0;
                                   4614 ;	assignBit
      001635 C2 B4            [12] 4615 	clr	_P3_4
                                   4616 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   4617 ;	edit.c:24: val = *ramAddress;
      001637 8E 82            [24] 4618 	mov	dpl,r6
      001639 8F 83            [24] 4619 	mov	dph,r7
      00163B E0               [24] 4620 	movx	a,@dptr
      00163C FB               [12] 4621 	mov	r3,a
                                   4622 ;	edit.c:25: IOM = 1;
                                   4623 ;	assignBit
      00163D D2 B4            [12] 4624 	setb	_P3_4
                                   4625 ;	edit.c:28: asciiToHex(val);
      00163F 8B 82            [24] 4626 	mov	dpl,r3
      001641 C0 07            [24] 4627 	push	ar7
      001643 C0 06            [24] 4628 	push	ar6
      001645 C0 05            [24] 4629 	push	ar5
      001647 C0 04            [24] 4630 	push	ar4
      001649 12r0DrCD         [24] 4631 	lcall	_asciiToHex
                                   4632 ;	edit.c:31: write('\n');
      00164C 75 82 0A         [24] 4633 	mov	dpl,#0x0a
      00164F 12r0Br0C         [24] 4634 	lcall	_write
                                   4635 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      001652 90r07r09         [24] 4636 	mov	dptr,#___str_34
      001655 75 F0 80         [24] 4637 	mov	b,#0x80
      001658 12r0Br7A         [24] 4638 	lcall	_LCD_string_write
                                   4639 ;	edit.c:33: new = getByte();
      00165B 12r0Fr58         [24] 4640 	lcall	_getByte
      00165E AB 82            [24] 4641 	mov	r3,dpl
                                   4642 ;	edit.c:34: write('\n');
      001660 75 82 0A         [24] 4643 	mov	dpl,#0x0a
      001663 C0 03            [24] 4644 	push	ar3
      001665 12r0Br0C         [24] 4645 	lcall	_write
      001668 D0 03            [24] 4646 	pop	ar3
      00166A D0 04            [24] 4647 	pop	ar4
      00166C D0 05            [24] 4648 	pop	ar5
      00166E D0 06            [24] 4649 	pop	ar6
      001670 D0 07            [24] 4650 	pop	ar7
                                   4651 ;	edit.c:37: IOM = 0;
                                   4652 ;	assignBit
      001672 C2 B4            [12] 4653 	clr	_P3_4
                                   4654 ;	edit.c:38: *ramAddress = new;
      001674 7A 00            [12] 4655 	mov	r2,#0x00
      001676 8E 82            [24] 4656 	mov	dpl,r6
      001678 8F 83            [24] 4657 	mov	dph,r7
      00167A EB               [12] 4658 	mov	a,r3
      00167B F0               [24] 4659 	movx	@dptr,a
      00167C EA               [12] 4660 	mov	a,r2
      00167D A3               [24] 4661 	inc	dptr
      00167E F0               [24] 4662 	movx	@dptr,a
                                   4663 ;	edit.c:39: val = *ramAddress;
                                   4664 ;	edit.c:40: IOM = 1;
                                   4665 ;	assignBit
      00167F D2 B4            [12] 4666 	setb	_P3_4
                                   4667 ;	edit.c:43: asciiToHex(high);
      001681 8C 82            [24] 4668 	mov	dpl,r4
      001683 C0 05            [24] 4669 	push	ar5
      001685 C0 03            [24] 4670 	push	ar3
      001687 12r0DrCD         [24] 4671 	lcall	_asciiToHex
      00168A D0 03            [24] 4672 	pop	ar3
      00168C D0 05            [24] 4673 	pop	ar5
                                   4674 ;	edit.c:44: asciiToHex(low);
      00168E 8D 82            [24] 4675 	mov	dpl,r5
      001690 C0 03            [24] 4676 	push	ar3
      001692 12r0DrCD         [24] 4677 	lcall	_asciiToHex
                                   4678 ;	edit.c:45: LCD_string_write(": ");
      001695 90r05r4B         [24] 4679 	mov	dptr,#___str_6
      001698 75 F0 80         [24] 4680 	mov	b,#0x80
      00169B 12r0Br7A         [24] 4681 	lcall	_LCD_string_write
      00169E D0 03            [24] 4682 	pop	ar3
                                   4683 ;	edit.c:46: asciiToHex(val);
      0016A0 8B 82            [24] 4684 	mov	dpl,r3
      0016A2 12r0DrCD         [24] 4685 	lcall	_asciiToHex
                                   4686 ;	edit.c:47: write('\n');
      0016A5 75 82 0A         [24] 4687 	mov	dpl,#0x0a
                                   4688 ;	edit.c:49: }
      0016A8 02r0Br0C         [24] 4689 	ljmp	_write
                                   4690 ;------------------------------------------------------------
                                   4691 ;Allocation info for local variables in function 'edit'
                                   4692 ;------------------------------------------------------------
                                   4693 ;input                     Allocated with name '_edit_input_65537_272'
                                   4694 ;add                       Allocated with name '_edit_add_65537_272'
                                   4695 ;------------------------------------------------------------
                                   4696 ;	edit.c:55: void edit() {
                                   4697 ;	-----------------------------------------
                                   4698 ;	 function edit
                                   4699 ;	-----------------------------------------
      0016AB                       4700 _edit:
                                   4701 ;	edit.c:57: fillScreen(GRAY);
      0016AB 90 D6 BA         [24] 4702 	mov	dptr,#0xd6ba
      0016AE 12r07r9A         [24] 4703 	lcall	_fillScreen
                                   4704 ;	edit.c:58: setCursor(0, 0);
      0016B1 E4               [12] 4705 	clr	a
      0016B2 F5*00            [12] 4706 	mov	_setCursor_PARM_2,a
      0016B4 F5*01            [12] 4707 	mov	(_setCursor_PARM_2 + 1),a
      0016B6 90 00 00         [24] 4708 	mov	dptr,#0x0000
      0016B9 12r00rA5         [24] 4709 	lcall	_setCursor
                                   4710 ;	edit.c:59: setTextSize(2);
      0016BC 75 82 02         [24] 4711 	mov	dpl,#0x02
      0016BF 12r00rBF         [24] 4712 	lcall	_setTextSize
                                   4713 ;	edit.c:66: LCD_string_write("Enter address:\n");
      0016C2 90r07r1A         [24] 4714 	mov	dptr,#___str_35
      0016C5 75 F0 80         [24] 4715 	mov	b,#0x80
      0016C8 12r0Br7A         [24] 4716 	lcall	_LCD_string_write
                                   4717 ;	edit.c:67: add = getAddress();
      0016CB 12r0Fr0D         [24] 4718 	lcall	_getAddress
      0016CE AE 82            [24] 4719 	mov	r6,dpl
      0016D0 AF 83            [24] 4720 	mov	r7,dph
                                   4721 ;	edit.c:68: write('\n');
      0016D2 75 82 0A         [24] 4722 	mov	dpl,#0x0a
      0016D5 C0 07            [24] 4723 	push	ar7
      0016D7 C0 06            [24] 4724 	push	ar6
      0016D9 12r0Br0C         [24] 4725 	lcall	_write
      0016DC D0 06            [24] 4726 	pop	ar6
      0016DE D0 07            [24] 4727 	pop	ar7
                                   4728 ;	edit.c:71: editByte(add);
      0016E0 8E 82            [24] 4729 	mov	dpl,r6
      0016E2 8F 83            [24] 4730 	mov	dph,r7
      0016E4 C0 07            [24] 4731 	push	ar7
      0016E6 C0 06            [24] 4732 	push	ar6
      0016E8 12r16r00         [24] 4733 	lcall	_editByte
      0016EB D0 06            [24] 4734 	pop	ar6
      0016ED D0 07            [24] 4735 	pop	ar7
                                   4736 ;	edit.c:74: do {
      0016EF                       4737 00111$:
                                   4738 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      0016EF 90r06rAA         [24] 4739 	mov	dptr,#___str_28
      0016F2 75 F0 80         [24] 4740 	mov	b,#0x80
      0016F5 C0 07            [24] 4741 	push	ar7
      0016F7 C0 06            [24] 4742 	push	ar6
      0016F9 12r0Br7A         [24] 4743 	lcall	_LCD_string_write
                                   4744 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      0016FC 90r07r2A         [24] 4745 	mov	dptr,#___str_36
      0016FF 75 F0 80         [24] 4746 	mov	b,#0x80
      001702 12r0Br7A         [24] 4747 	lcall	_LCD_string_write
                                   4748 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      001705 90r07r41         [24] 4749 	mov	dptr,#___str_37
      001708 75 F0 80         [24] 4750 	mov	b,#0x80
      00170B 12r0Br7A         [24] 4751 	lcall	_LCD_string_write
                                   4752 ;	edit.c:78: input = keyDetect();
      00170E 12r0Cr0A         [24] 4753 	lcall	_keyDetect
      001711 AD 82            [24] 4754 	mov	r5,dpl
      001713 D0 06            [24] 4755 	pop	ar6
      001715 D0 07            [24] 4756 	pop	ar7
      001717 90r00r07         [24] 4757 	mov	dptr,#_edit_input_65537_272
      00171A ED               [12] 4758 	mov	a,r5
      00171B F0               [24] 4759 	movx	@dptr,a
                                   4760 ;	edit.c:80: if (input == '1') {
      00171C BD 31 01         [24] 4761 	cjne	r5,#0x31,00141$
      00171F 22               [24] 4762 	ret
      001720                       4763 00141$:
                                   4764 ;	edit.c:82: } else if (input =='2') {
      001720 BD 32 2F         [24] 4765 	cjne	r5,#0x32,00104$
                                   4766 ;	edit.c:83: fillScreen(GRAY);
      001723 90 D6 BA         [24] 4767 	mov	dptr,#0xd6ba
      001726 C0 07            [24] 4768 	push	ar7
      001728 C0 06            [24] 4769 	push	ar6
      00172A 12r07r9A         [24] 4770 	lcall	_fillScreen
                                   4771 ;	edit.c:84: setCursor(0, 0);
      00172D E4               [12] 4772 	clr	a
      00172E F5*00            [12] 4773 	mov	_setCursor_PARM_2,a
      001730 F5*01            [12] 4774 	mov	(_setCursor_PARM_2 + 1),a
      001732 90 00 00         [24] 4775 	mov	dptr,#0x0000
      001735 12r00rA5         [24] 4776 	lcall	_setCursor
      001738 D0 06            [24] 4777 	pop	ar6
      00173A D0 07            [24] 4778 	pop	ar7
                                   4779 ;	edit.c:86: editByte(add);
      00173C 8E 82            [24] 4780 	mov	dpl,r6
      00173E 8F 83            [24] 4781 	mov	dph,r7
      001740 C0 07            [24] 4782 	push	ar7
      001742 C0 06            [24] 4783 	push	ar6
      001744 12r16r00         [24] 4784 	lcall	_editByte
      001747 D0 06            [24] 4785 	pop	ar6
      001749 D0 07            [24] 4786 	pop	ar7
                                   4787 ;	edit.c:88: input = 0;
      00174B 90r00r07         [24] 4788 	mov	dptr,#_edit_input_65537_272
      00174E E4               [12] 4789 	clr	a
      00174F F0               [24] 4790 	movx	@dptr,a
      001750 80 35            [24] 4791 	sjmp	00112$
      001752                       4792 00104$:
                                   4793 ;	edit.c:89: } else if (input == '3') {
      001752 BD 33 32         [24] 4794 	cjne	r5,#0x33,00112$
                                   4795 ;	edit.c:90: fillScreen(GRAY);
      001755 90 D6 BA         [24] 4796 	mov	dptr,#0xd6ba
      001758 C0 07            [24] 4797 	push	ar7
      00175A C0 06            [24] 4798 	push	ar6
      00175C 12r07r9A         [24] 4799 	lcall	_fillScreen
                                   4800 ;	edit.c:91: setCursor(0, 0);
      00175F E4               [12] 4801 	clr	a
      001760 F5*00            [12] 4802 	mov	_setCursor_PARM_2,a
      001762 F5*01            [12] 4803 	mov	(_setCursor_PARM_2 + 1),a
      001764 90 00 00         [24] 4804 	mov	dptr,#0x0000
      001767 12r00rA5         [24] 4805 	lcall	_setCursor
      00176A D0 06            [24] 4806 	pop	ar6
      00176C D0 07            [24] 4807 	pop	ar7
                                   4808 ;	edit.c:93: editByte(++add);
      00176E 0E               [12] 4809 	inc	r6
      00176F BE 00 01         [24] 4810 	cjne	r6,#0x00,00146$
      001772 0F               [12] 4811 	inc	r7
      001773                       4812 00146$:
      001773 8E 82            [24] 4813 	mov	dpl,r6
      001775 8F 83            [24] 4814 	mov	dph,r7
      001777 C0 07            [24] 4815 	push	ar7
      001779 C0 06            [24] 4816 	push	ar6
      00177B 12r16r00         [24] 4817 	lcall	_editByte
      00177E D0 06            [24] 4818 	pop	ar6
      001780 D0 07            [24] 4819 	pop	ar7
                                   4820 ;	edit.c:95: input = 0;
      001782 90r00r07         [24] 4821 	mov	dptr,#_edit_input_65537_272
      001785 E4               [12] 4822 	clr	a
      001786 F0               [24] 4823 	movx	@dptr,a
      001787                       4824 00112$:
                                   4825 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      001787 90r00r07         [24] 4826 	mov	dptr,#_edit_input_65537_272
      00178A E0               [24] 4827 	movx	a,@dptr
      00178B FD               [12] 4828 	mov	r5,a
      00178C BD 31 01         [24] 4829 	cjne	r5,#0x31,00147$
      00178F 22               [24] 4830 	ret
      001790                       4831 00147$:
      001790 BD 32 01         [24] 4832 	cjne	r5,#0x32,00148$
      001793 22               [24] 4833 	ret
      001794                       4834 00148$:
      001794 BD 33 01         [24] 4835 	cjne	r5,#0x33,00149$
      001797 22               [24] 4836 	ret
      001798                       4837 00149$:
      001798 02r16rEF         [24] 4838 	ljmp	00111$
                                   4839 ;	edit.c:99: }
      00179B 22               [24] 4840 	ret
                                   4841 ;------------------------------------------------------------
                                   4842 ;Allocation info for local variables in function 'count'
                                   4843 ;------------------------------------------------------------
                                   4844 ;add                       Allocated with name '_count_add_65537_278'
                                   4845 ;i                         Allocated with name '_count_i_65537_278'
                                   4846 ;size                      Allocated with name '_count_size_65537_278'
                                   4847 ;key                       Allocated with name '_count_key_65537_278'
                                   4848 ;count                     Allocated with name '_count_count_65537_278'
                                   4849 ;------------------------------------------------------------
                                   4850 ;	count.c:5: void count() {
                                   4851 ;	-----------------------------------------
                                   4852 ;	 function count
                                   4853 ;	-----------------------------------------
      00179C                       4854 _count:
                                   4855 ;	count.c:7: fillScreen(GRAY);
      00179C 90 D6 BA         [24] 4856 	mov	dptr,#0xd6ba
      00179F 12r07r9A         [24] 4857 	lcall	_fillScreen
                                   4858 ;	count.c:8: setCursor(0, 0);
      0017A2 E4               [12] 4859 	clr	a
      0017A3 F5*00            [12] 4860 	mov	_setCursor_PARM_2,a
      0017A5 F5*01            [12] 4861 	mov	(_setCursor_PARM_2 + 1),a
      0017A7 90 00 00         [24] 4862 	mov	dptr,#0x0000
      0017AA 12r00rA5         [24] 4863 	lcall	_setCursor
                                   4864 ;	count.c:9: setTextSize(2);
      0017AD 75 82 02         [24] 4865 	mov	dpl,#0x02
      0017B0 12r00rBF         [24] 4866 	lcall	_setTextSize
                                   4867 ;	count.c:19: LCD_string_write("Enter address:\n");
      0017B3 90r07r1A         [24] 4868 	mov	dptr,#___str_35
      0017B6 75 F0 80         [24] 4869 	mov	b,#0x80
      0017B9 12r0Br7A         [24] 4870 	lcall	_LCD_string_write
                                   4871 ;	count.c:20: add = getAddress();
      0017BC 12r0Fr0D         [24] 4872 	lcall	_getAddress
                                   4873 ;	count.c:21: write('\n');
      0017BF 75 82 0A         [24] 4874 	mov	dpl,#0x0a
      0017C2 12r0Br0C         [24] 4875 	lcall	_write
                                   4876 ;	count.c:24: LCD_string_write("Enter block size:\n");
      0017C5 90r05rAE         [24] 4877 	mov	dptr,#___str_14
      0017C8 75 F0 80         [24] 4878 	mov	b,#0x80
      0017CB 12r0Br7A         [24] 4879 	lcall	_LCD_string_write
                                   4880 ;	count.c:25: size = getByte();
      0017CE 12r0Fr58         [24] 4881 	lcall	_getByte
      0017D1 AF 82            [24] 4882 	mov	r7,dpl
                                   4883 ;	count.c:26: write('\n');
      0017D3 75 82 0A         [24] 4884 	mov	dpl,#0x0a
      0017D6 C0 07            [24] 4885 	push	ar7
      0017D8 12r0Br0C         [24] 4886 	lcall	_write
                                   4887 ;	count.c:29: LCD_string_write("Enter byte to count:\n");
      0017DB 90r07r5F         [24] 4888 	mov	dptr,#___str_38
      0017DE 75 F0 80         [24] 4889 	mov	b,#0x80
      0017E1 12r0Br7A         [24] 4890 	lcall	_LCD_string_write
                                   4891 ;	count.c:30: key = getByte();
      0017E4 12r0Fr58         [24] 4892 	lcall	_getByte
      0017E7 D0 07            [24] 4893 	pop	ar7
                                   4894 ;	count.c:33: for (i = 0; i < size; i++) {
      0017E9 7D 00            [12] 4895 	mov	r5,#0x00
      0017EB 7E 00            [12] 4896 	mov	r6,#0x00
      0017ED                       4897 00103$:
      0017ED 8F 03            [24] 4898 	mov	ar3,r7
      0017EF 7C 00            [12] 4899 	mov	r4,#0x00
      0017F1 C3               [12] 4900 	clr	c
      0017F2 ED               [12] 4901 	mov	a,r5
      0017F3 9B               [12] 4902 	subb	a,r3
      0017F4 EE               [12] 4903 	mov	a,r6
      0017F5 9C               [12] 4904 	subb	a,r4
      0017F6 50 07            [24] 4905 	jnc	00105$
      0017F8 0D               [12] 4906 	inc	r5
      0017F9 BD 00 F1         [24] 4907 	cjne	r5,#0x00,00103$
      0017FC 0E               [12] 4908 	inc	r6
      0017FD 80 EE            [24] 4909 	sjmp	00103$
      0017FF                       4910 00105$:
                                   4911 ;	count.c:41: }
      0017FF 22               [24] 4912 	ret
                                   4913 ;------------------------------------------------------------
                                   4914 ;Allocation info for local variables in function 'readTemp'
                                   4915 ;------------------------------------------------------------
                                   4916 ;val                       Allocated with name '_readTemp_val_65536_281'
                                   4917 ;------------------------------------------------------------
                                   4918 ;	analog.c:6: uint8_t readTemp() {
                                   4919 ;	-----------------------------------------
                                   4920 ;	 function readTemp
                                   4921 ;	-----------------------------------------
      001800                       4922 _readTemp:
                                   4923 ;	analog.c:8: IOM = 1;
                                   4924 ;	assignBit
      001800 D2 B4            [12] 4925 	setb	_P3_4
                                   4926 ;	analog.c:9: val = *temp_address;
      001802 85*06 82         [24] 4927 	mov	dpl,_temp_address
      001805 85*07 83         [24] 4928 	mov	dph,(_temp_address + 1)
      001808 E0               [24] 4929 	movx	a,@dptr
      001809 FF               [12] 4930 	mov	r7,a
                                   4931 ;	analog.c:10: IOM = 0;
                                   4932 ;	assignBit
      00180A C2 B4            [12] 4933 	clr	_P3_4
                                   4934 ;	analog.c:11: return val;
      00180C 8F 82            [24] 4935 	mov	dpl,r7
                                   4936 ;	analog.c:12: }
      00180E 22               [24] 4937 	ret
                                   4938 ;------------------------------------------------------------
                                   4939 ;Allocation info for local variables in function 'readLight'
                                   4940 ;------------------------------------------------------------
                                   4941 ;val                       Allocated with name '_readLight_val_65536_282'
                                   4942 ;------------------------------------------------------------
                                   4943 ;	analog.c:19: uint8_t readLight() {
                                   4944 ;	-----------------------------------------
                                   4945 ;	 function readLight
                                   4946 ;	-----------------------------------------
      00180F                       4947 _readLight:
                                   4948 ;	analog.c:21: IOM = 1;
                                   4949 ;	assignBit
      00180F D2 B4            [12] 4950 	setb	_P3_4
                                   4951 ;	analog.c:22: val = *light_address;
      001811 85*08 82         [24] 4952 	mov	dpl,_light_address
      001814 85*09 83         [24] 4953 	mov	dph,(_light_address + 1)
      001817 E0               [24] 4954 	movx	a,@dptr
      001818 FF               [12] 4955 	mov	r7,a
                                   4956 ;	analog.c:23: IOM = 0;
                                   4957 ;	assignBit
      001819 C2 B4            [12] 4958 	clr	_P3_4
                                   4959 ;	analog.c:24: return val;
      00181B 8F 82            [24] 4960 	mov	dpl,r7
                                   4961 ;	analog.c:25: }
      00181D 22               [24] 4962 	ret
                                   4963 ;------------------------------------------------------------
                                   4964 ;Allocation info for local variables in function 'displayTemp'
                                   4965 ;------------------------------------------------------------
                                   4966 ;t                         Allocated to registers r7 
                                   4967 ;------------------------------------------------------------
                                   4968 ;	analog.c:32: void displayTemp(uint8_t t) {
                                   4969 ;	-----------------------------------------
                                   4970 ;	 function displayTemp
                                   4971 ;	-----------------------------------------
      00181E                       4972 _displayTemp:
      00181E AF 82            [24] 4973 	mov	r7,dpl
                                   4974 ;	analog.c:34: fillScreen(GRAY);
      001820 90 D6 BA         [24] 4975 	mov	dptr,#0xd6ba
      001823 C0 07            [24] 4976 	push	ar7
      001825 12r07r9A         [24] 4977 	lcall	_fillScreen
                                   4978 ;	analog.c:35: setCursor(0, 0);
      001828 E4               [12] 4979 	clr	a
      001829 F5*00            [12] 4980 	mov	_setCursor_PARM_2,a
      00182B F5*01            [12] 4981 	mov	(_setCursor_PARM_2 + 1),a
      00182D 90 00 00         [24] 4982 	mov	dptr,#0x0000
      001830 12r00rA5         [24] 4983 	lcall	_setCursor
                                   4984 ;	analog.c:36: setTextSize(2);
      001833 75 82 02         [24] 4985 	mov	dpl,#0x02
      001836 12r00rBF         [24] 4986 	lcall	_setTextSize
                                   4987 ;	analog.c:38: LCD_string_write("Temperature: ");
      001839 90r07r75         [24] 4988 	mov	dptr,#___str_39
      00183C 75 F0 80         [24] 4989 	mov	b,#0x80
      00183F 12r0Br7A         [24] 4990 	lcall	_LCD_string_write
      001842 D0 07            [24] 4991 	pop	ar7
                                   4992 ;	analog.c:40: asciiToHex(t);
      001844 8F 82            [24] 4993 	mov	dpl,r7
      001846 12r0DrCD         [24] 4994 	lcall	_asciiToHex
                                   4995 ;	analog.c:42: write('\n');
      001849 75 82 0A         [24] 4996 	mov	dpl,#0x0a
      00184C 12r0Br0C         [24] 4997 	lcall	_write
                                   4998 ;	analog.c:43: LCD_string_write("Press 0 for menu\n");
      00184F 90r07r83         [24] 4999 	mov	dptr,#___str_40
      001852 75 F0 80         [24] 5000 	mov	b,#0x80
                                   5001 ;	analog.c:44: }
      001855 02r0Br7A         [24] 5002 	ljmp	_LCD_string_write
                                   5003 ;------------------------------------------------------------
                                   5004 ;Allocation info for local variables in function 'displayLight'
                                   5005 ;------------------------------------------------------------
                                   5006 ;l                         Allocated to registers r7 
                                   5007 ;------------------------------------------------------------
                                   5008 ;	analog.c:51: void displayLight(uint8_t l) {
                                   5009 ;	-----------------------------------------
                                   5010 ;	 function displayLight
                                   5011 ;	-----------------------------------------
      001858                       5012 _displayLight:
      001858 AF 82            [24] 5013 	mov	r7,dpl
                                   5014 ;	analog.c:53: fillScreen(GRAY);
      00185A 90 D6 BA         [24] 5015 	mov	dptr,#0xd6ba
      00185D C0 07            [24] 5016 	push	ar7
      00185F 12r07r9A         [24] 5017 	lcall	_fillScreen
                                   5018 ;	analog.c:54: setCursor(0, 0);
      001862 E4               [12] 5019 	clr	a
      001863 F5*00            [12] 5020 	mov	_setCursor_PARM_2,a
      001865 F5*01            [12] 5021 	mov	(_setCursor_PARM_2 + 1),a
      001867 90 00 00         [24] 5022 	mov	dptr,#0x0000
      00186A 12r00rA5         [24] 5023 	lcall	_setCursor
                                   5024 ;	analog.c:55: setTextSize(2);
      00186D 75 82 02         [24] 5025 	mov	dpl,#0x02
      001870 12r00rBF         [24] 5026 	lcall	_setTextSize
                                   5027 ;	analog.c:57: LCD_string_write("Light level: ");
      001873 90r07r95         [24] 5028 	mov	dptr,#___str_41
      001876 75 F0 80         [24] 5029 	mov	b,#0x80
      001879 12r0Br7A         [24] 5030 	lcall	_LCD_string_write
      00187C D0 07            [24] 5031 	pop	ar7
                                   5032 ;	analog.c:59: asciiToHex(l);
      00187E 8F 82            [24] 5033 	mov	dpl,r7
      001880 12r0DrCD         [24] 5034 	lcall	_asciiToHex
                                   5035 ;	analog.c:61: write('\n');
      001883 75 82 0A         [24] 5036 	mov	dpl,#0x0a
      001886 12r0Br0C         [24] 5037 	lcall	_write
                                   5038 ;	analog.c:62: LCD_string_write("Press 0 for menu\n");
      001889 90r07r83         [24] 5039 	mov	dptr,#___str_40
      00188C 75 F0 80         [24] 5040 	mov	b,#0x80
                                   5041 ;	analog.c:63: }
      00188F 02r0Br7A         [24] 5042 	ljmp	_LCD_string_write
                                   5043 ;------------------------------------------------------------
                                   5044 ;Allocation info for local variables in function 'temperature'
                                   5045 ;------------------------------------------------------------
                                   5046 ;temp                      Allocated with name '_temperature_temp_65537_288'
                                   5047 ;input                     Allocated with name '_temperature_input_65537_288'
                                   5048 ;------------------------------------------------------------
                                   5049 ;	analog.c:70: void temperature() {
                                   5050 ;	-----------------------------------------
                                   5051 ;	 function temperature
                                   5052 ;	-----------------------------------------
      001892                       5053 _temperature:
                                   5054 ;	analog.c:72: fillScreen(GRAY);
      001892 90 D6 BA         [24] 5055 	mov	dptr,#0xd6ba
      001895 12r07r9A         [24] 5056 	lcall	_fillScreen
                                   5057 ;	analog.c:73: setCursor(0, 0);
      001898 E4               [12] 5058 	clr	a
      001899 F5*00            [12] 5059 	mov	_setCursor_PARM_2,a
      00189B F5*01            [12] 5060 	mov	(_setCursor_PARM_2 + 1),a
      00189D 90 00 00         [24] 5061 	mov	dptr,#0x0000
      0018A0 12r00rA5         [24] 5062 	lcall	_setCursor
                                   5063 ;	analog.c:74: setTextSize(2);
      0018A3 75 82 02         [24] 5064 	mov	dpl,#0x02
      0018A6 12r00rBF         [24] 5065 	lcall	_setTextSize
                                   5066 ;	analog.c:76: LCD_string_write("Temperature: ");
      0018A9 90r07r75         [24] 5067 	mov	dptr,#___str_39
      0018AC 75 F0 80         [24] 5068 	mov	b,#0x80
      0018AF 12r0Br7A         [24] 5069 	lcall	_LCD_string_write
                                   5070 ;	analog.c:82: temp = readTemp();
      0018B2 12r18r00         [24] 5071 	lcall	_readTemp
                                   5072 ;	analog.c:85: asciiToHex(temp);
      0018B5 12r0DrCD         [24] 5073 	lcall	_asciiToHex
                                   5074 ;	analog.c:88: write('\n');
      0018B8 75 82 0A         [24] 5075 	mov	dpl,#0x0a
      0018BB 12r0Br0C         [24] 5076 	lcall	_write
                                   5077 ;	analog.c:89: LCD_string_write("Press 0 for menu\n");
      0018BE 90r07r83         [24] 5078 	mov	dptr,#___str_40
      0018C1 75 F0 80         [24] 5079 	mov	b,#0x80
      0018C4 12r0Br7A         [24] 5080 	lcall	_LCD_string_write
                                   5081 ;	analog.c:93: while (1) {
      0018C7                       5082 00104$:
                                   5083 ;	analog.c:94: input = keyDetect();
      0018C7 12r0Cr0A         [24] 5084 	lcall	_keyDetect
      0018CA AF 82            [24] 5085 	mov	r7,dpl
                                   5086 ;	analog.c:96: if (input == '0') break;
      0018CC BF 30 01         [24] 5087 	cjne	r7,#0x30,00116$
      0018CF 22               [24] 5088 	ret
      0018D0                       5089 00116$:
                                   5090 ;	analog.c:98: delay(500);
      0018D0 90 01 F4         [24] 5091 	mov	dptr,#0x01f4
      0018D3 12r00r10         [24] 5092 	lcall	_delay
                                   5093 ;	analog.c:99: temp = readTemp();
      0018D6 12r18r00         [24] 5094 	lcall	_readTemp
                                   5095 ;	analog.c:100: displayTemp(temp);
      0018D9 12r18r1E         [24] 5096 	lcall	_displayTemp
                                   5097 ;	analog.c:102: }
      0018DC 80 E9            [24] 5098 	sjmp	00104$
                                   5099 ;------------------------------------------------------------
                                   5100 ;Allocation info for local variables in function 'light'
                                   5101 ;------------------------------------------------------------
                                   5102 ;light                     Allocated with name '_light_light_65537_291'
                                   5103 ;input                     Allocated with name '_light_input_65537_291'
                                   5104 ;------------------------------------------------------------
                                   5105 ;	analog.c:109: void light() {
                                   5106 ;	-----------------------------------------
                                   5107 ;	 function light
                                   5108 ;	-----------------------------------------
      0018DE                       5109 _light:
                                   5110 ;	analog.c:111: fillScreen(GRAY);
      0018DE 90 D6 BA         [24] 5111 	mov	dptr,#0xd6ba
      0018E1 12r07r9A         [24] 5112 	lcall	_fillScreen
                                   5113 ;	analog.c:112: setCursor(0, 0);
      0018E4 E4               [12] 5114 	clr	a
      0018E5 F5*00            [12] 5115 	mov	_setCursor_PARM_2,a
      0018E7 F5*01            [12] 5116 	mov	(_setCursor_PARM_2 + 1),a
      0018E9 90 00 00         [24] 5117 	mov	dptr,#0x0000
      0018EC 12r00rA5         [24] 5118 	lcall	_setCursor
                                   5119 ;	analog.c:113: setTextSize(2);
      0018EF 75 82 02         [24] 5120 	mov	dpl,#0x02
      0018F2 12r00rBF         [24] 5121 	lcall	_setTextSize
                                   5122 ;	analog.c:115: LCD_string_write("Light level: ");
      0018F5 90r07r95         [24] 5123 	mov	dptr,#___str_41
      0018F8 75 F0 80         [24] 5124 	mov	b,#0x80
      0018FB 12r0Br7A         [24] 5125 	lcall	_LCD_string_write
                                   5126 ;	analog.c:121: light = readLight();
      0018FE 12r18r0F         [24] 5127 	lcall	_readLight
                                   5128 ;	analog.c:124: asciiToHex(light);
      001901 12r0DrCD         [24] 5129 	lcall	_asciiToHex
                                   5130 ;	analog.c:127: write('\n');
      001904 75 82 0A         [24] 5131 	mov	dpl,#0x0a
      001907 12r0Br0C         [24] 5132 	lcall	_write
                                   5133 ;	analog.c:128: LCD_string_write("Press 0 for menu\n");
      00190A 90r07r83         [24] 5134 	mov	dptr,#___str_40
      00190D 75 F0 80         [24] 5135 	mov	b,#0x80
      001910 12r0Br7A         [24] 5136 	lcall	_LCD_string_write
                                   5137 ;	analog.c:131: while (1) {
      001913                       5138 00104$:
                                   5139 ;	analog.c:132: input = keyDetect();
      001913 12r0Cr0A         [24] 5140 	lcall	_keyDetect
      001916 AF 82            [24] 5141 	mov	r7,dpl
                                   5142 ;	analog.c:134: if (input == '0') break;
      001918 BF 30 01         [24] 5143 	cjne	r7,#0x30,00116$
      00191B 22               [24] 5144 	ret
      00191C                       5145 00116$:
                                   5146 ;	analog.c:136: delay(500);
      00191C 90 01 F4         [24] 5147 	mov	dptr,#0x01f4
      00191F 12r00r10         [24] 5148 	lcall	_delay
                                   5149 ;	analog.c:137: light = readLight();
      001922 12r18r0F         [24] 5150 	lcall	_readLight
                                   5151 ;	analog.c:138: displayLight(light);
      001925 12r18r58         [24] 5152 	lcall	_displayLight
                                   5153 ;	analog.c:140: }
      001928 80 E9            [24] 5154 	sjmp	00104$
                                   5155 ;------------------------------------------------------------
                                   5156 ;Allocation info for local variables in function 'menu'
                                   5157 ;------------------------------------------------------------
                                   5158 ;	main.c:29: void menu(void) {
                                   5159 ;	-----------------------------------------
                                   5160 ;	 function menu
                                   5161 ;	-----------------------------------------
      00192A                       5162 _menu:
                                   5163 ;	main.c:31: setRotation(2);
      00192A 75 82 02         [24] 5164 	mov	dpl,#0x02
      00192D 12r00rD7         [24] 5165 	lcall	_setRotation
                                   5166 ;	main.c:32: setTextSize(3);
      001930 75 82 03         [24] 5167 	mov	dpl,#0x03
      001933 12r00rBF         [24] 5168 	lcall	_setTextSize
                                   5169 ;	main.c:33: fillScreen(GRAY);
      001936 90 D6 BA         [24] 5170 	mov	dptr,#0xd6ba
      001939 12r07r9A         [24] 5171 	lcall	_fillScreen
                                   5172 ;	main.c:34: setTextColor(BLACK, GRAY);
      00193C 75*00 BA         [24] 5173 	mov	_setTextColor_PARM_2,#0xba
      00193F 75*01 D6         [24] 5174 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001942 90 00 00         [24] 5175 	mov	dptr,#0x0000
      001945 12r00rB2         [24] 5176 	lcall	_setTextColor
                                   5177 ;	main.c:35: setCursor(0, 0);
      001948 E4               [12] 5178 	clr	a
      001949 F5*00            [12] 5179 	mov	_setCursor_PARM_2,a
      00194B F5*01            [12] 5180 	mov	(_setCursor_PARM_2 + 1),a
      00194D 90 00 00         [24] 5181 	mov	dptr,#0x0000
      001950 12r00rA5         [24] 5182 	lcall	_setCursor
                                   5183 ;	main.c:38: LCD_string_write("Brandon Cline\n");
      001953 90r07rA3         [24] 5184 	mov	dptr,#___str_42
      001956 75 F0 80         [24] 5185 	mov	b,#0x80
      001959 12r0Br7A         [24] 5186 	lcall	_LCD_string_write
                                   5187 ;	main.c:39: LCD_string_write("ECEN 4330\n");
      00195C 90r07rB2         [24] 5188 	mov	dptr,#___str_43
      00195F 75 F0 80         [24] 5189 	mov	b,#0x80
      001962 12r0Br7A         [24] 5190 	lcall	_LCD_string_write
                                   5191 ;	main.c:43: LCD_string_write("1: Basic check\n");
      001965 90r07rBD         [24] 5192 	mov	dptr,#___str_44
      001968 75 F0 80         [24] 5193 	mov	b,#0x80
      00196B 12r0Br7A         [24] 5194 	lcall	_LCD_string_write
                                   5195 ;	main.c:45: LCD_string_write("2: Dump\n");
      00196E 90r07rCD         [24] 5196 	mov	dptr,#___str_45
      001971 75 F0 80         [24] 5197 	mov	b,#0x80
      001974 12r0Br7A         [24] 5198 	lcall	_LCD_string_write
                                   5199 ;	main.c:47: LCD_string_write("3: Check\n");
      001977 90r07rD6         [24] 5200 	mov	dptr,#___str_46
      00197A 75 F0 80         [24] 5201 	mov	b,#0x80
      00197D 12r0Br7A         [24] 5202 	lcall	_LCD_string_write
                                   5203 ;	main.c:49: LCD_string_write("A: Move\n");
      001980 90r07rE0         [24] 5204 	mov	dptr,#___str_47
      001983 75 F0 80         [24] 5205 	mov	b,#0x80
      001986 12r0Br7A         [24] 5206 	lcall	_LCD_string_write
                                   5207 ;	main.c:51: LCD_string_write("4: Edit\n");
      001989 90r07rE9         [24] 5208 	mov	dptr,#___str_48
      00198C 75 F0 80         [24] 5209 	mov	b,#0x80
      00198F 12r0Br7A         [24] 5210 	lcall	_LCD_string_write
                                   5211 ;	main.c:53: LCD_string_write("5: Find\n");
      001992 90r07rF2         [24] 5212 	mov	dptr,#___str_49
      001995 75 F0 80         [24] 5213 	mov	b,#0x80
      001998 12r0Br7A         [24] 5214 	lcall	_LCD_string_write
                                   5215 ;	main.c:55: LCD_string_write("6: Count\n");
      00199B 90r07rFB         [24] 5216 	mov	dptr,#___str_50
      00199E 75 F0 80         [24] 5217 	mov	b,#0x80
      0019A1 12r0Br7A         [24] 5218 	lcall	_LCD_string_write
                                   5219 ;	main.c:58: LCD_string_write("B: Temperature\n");
      0019A4 90r08r05         [24] 5220 	mov	dptr,#___str_51
      0019A7 75 F0 80         [24] 5221 	mov	b,#0x80
      0019AA 12r0Br7A         [24] 5222 	lcall	_LCD_string_write
                                   5223 ;	main.c:60: LCD_string_write("7: Light\n");
      0019AD 90r08r15         [24] 5224 	mov	dptr,#___str_52
      0019B0 75 F0 80         [24] 5225 	mov	b,#0x80
                                   5226 ;	main.c:61: }
      0019B3 02r0Br7A         [24] 5227 	ljmp	_LCD_string_write
                                   5228 ;------------------------------------------------------------
                                   5229 ;Allocation info for local variables in function 'main'
                                   5230 ;------------------------------------------------------------
                                   5231 ;input                     Allocated with name '_main_input_65536_296'
                                   5232 ;------------------------------------------------------------
                                   5233 ;	main.c:63: void main(void) {
                                   5234 ;	-----------------------------------------
                                   5235 ;	 function main
                                   5236 ;	-----------------------------------------
      0019B6                       5237 _main:
                                   5238 ;	main.c:68: iowrite8(seg7_address, 0x00);
      0019B6 75*00 00         [24] 5239 	mov	_iowrite8_PARM_2,#0x00
      0019B9 85*04 82         [24] 5240 	mov	dpl,_seg7_address
      0019BC 85*05 83         [24] 5241 	mov	dph,(_seg7_address + 1)
      0019BF 12r00r00         [24] 5242 	lcall	_iowrite8
                                   5243 ;	main.c:71: TFT_LCD_INIT();
      0019C2 12r01rDD         [24] 5244 	lcall	_TFT_LCD_INIT
                                   5245 ;	main.c:73: fillScreen(BLACK);
      0019C5 90 00 00         [24] 5246 	mov	dptr,#0x0000
      0019C8 12r07r9A         [24] 5247 	lcall	_fillScreen
                                   5248 ;	main.c:74: setRotation(0);
      0019CB 75 82 00         [24] 5249 	mov	dpl,#0x00
      0019CE 12r00rD7         [24] 5250 	lcall	_setRotation
                                   5251 ;	main.c:75: testCircles(20, BLUE);
      0019D1 75*32 1F         [24] 5252 	mov	_testCircles_PARM_2,#0x1f
      0019D4 75*33 00         [24] 5253 	mov	(_testCircles_PARM_2 + 1),#0x00
      0019D7 75 82 14         [24] 5254 	mov	dpl,#0x14
      0019DA 12r06r28         [24] 5255 	lcall	_testCircles
                                   5256 ;	main.c:79: while (1) {
      0019DD                       5257 00112$:
                                   5258 ;	main.c:81: menu();
      0019DD 12r19r2A         [24] 5259 	lcall	_menu
                                   5260 ;	main.c:84: input = keyDetect();
      0019E0 12r0Cr0A         [24] 5261 	lcall	_keyDetect
                                   5262 ;	main.c:85: asciiToHex(input);
      0019E3 AF 82            [24] 5263 	mov  r7,dpl
      0019E5 C0 07            [24] 5264 	push	ar7
      0019E7 12r0DrCD         [24] 5265 	lcall	_asciiToHex
      0019EA D0 07            [24] 5266 	pop	ar7
                                   5267 ;	main.c:88: switch(input) {
      0019EC BF 31 02         [24] 5268 	cjne	r7,#0x31,00152$
      0019EF 80 23            [24] 5269 	sjmp	00101$
      0019F1                       5270 00152$:
      0019F1 BF 32 02         [24] 5271 	cjne	r7,#0x32,00153$
      0019F4 80 23            [24] 5272 	sjmp	00102$
      0019F6                       5273 00153$:
      0019F6 BF 33 02         [24] 5274 	cjne	r7,#0x33,00154$
      0019F9 80 23            [24] 5275 	sjmp	00103$
      0019FB                       5276 00154$:
      0019FB BF 34 02         [24] 5277 	cjne	r7,#0x34,00155$
      0019FE 80 28            [24] 5278 	sjmp	00105$
      001A00                       5279 00155$:
      001A00 BF 36 02         [24] 5280 	cjne	r7,#0x36,00156$
      001A03 80 28            [24] 5281 	sjmp	00106$
      001A05                       5282 00156$:
      001A05 BF 37 02         [24] 5283 	cjne	r7,#0x37,00157$
      001A08 80 2D            [24] 5284 	sjmp	00108$
      001A0A                       5285 00157$:
      001A0A BF 41 02         [24] 5286 	cjne	r7,#0x41,00158$
      001A0D 80 14            [24] 5287 	sjmp	00104$
      001A0F                       5288 00158$:
                                   5289 ;	main.c:89: case '1': basic(); break;
      001A0F BF 42 CB         [24] 5290 	cjne	r7,#0x42,00112$
      001A12 80 1E            [24] 5291 	sjmp	00107$
      001A14                       5292 00101$:
      001A14 12r14r93         [24] 5293 	lcall	_basic
                                   5294 ;	main.c:90: case '2': dump(); break;
      001A17 80 C4            [24] 5295 	sjmp	00112$
      001A19                       5296 00102$:
      001A19 12r10rA2         [24] 5297 	lcall	_dump
                                   5298 ;	main.c:91: case '3': check(); break;
      001A1C 80 BF            [24] 5299 	sjmp	00112$
      001A1E                       5300 00103$:
      001A1E 12r13r57         [24] 5301 	lcall	_check
                                   5302 ;	main.c:92: case 'A': move(); break;
      001A21 80 BA            [24] 5303 	sjmp	00112$
      001A23                       5304 00104$:
      001A23 12r15r29         [24] 5305 	lcall	_move
                                   5306 ;	main.c:93: case '4': edit(); break;
      001A26 80 B5            [24] 5307 	sjmp	00112$
      001A28                       5308 00105$:
      001A28 12r16rAB         [24] 5309 	lcall	_edit
                                   5310 ;	main.c:95: case '6': count(); break;
      001A2B 80 B0            [24] 5311 	sjmp	00112$
      001A2D                       5312 00106$:
      001A2D 12r17r9C         [24] 5313 	lcall	_count
                                   5314 ;	main.c:96: case 'B': temperature(); break;
      001A30 80 AB            [24] 5315 	sjmp	00112$
      001A32                       5316 00107$:
      001A32 12r18r92         [24] 5317 	lcall	_temperature
                                   5318 ;	main.c:97: case '7': light(); break;
      001A35 80 A6            [24] 5319 	sjmp	00112$
      001A37                       5320 00108$:
      001A37 12r18rDE         [24] 5321 	lcall	_light
                                   5322 ;	main.c:99: }
                                   5323 ;	main.c:101: }
      001A3A 80 A1            [24] 5324 	sjmp	00112$
                                   5325 	.area CSEG    (CODE)
                                   5326 	.area CONST   (CODE)
      000000                       5327 _font:
      000000 00                    5328 	.db #0x00	; 0
      000001 00                    5329 	.db #0x00	; 0
      000002 00                    5330 	.db #0x00	; 0
      000003 00                    5331 	.db #0x00	; 0
      000004 00                    5332 	.db #0x00	; 0
      000005 3E                    5333 	.db #0x3e	; 62
      000006 5B                    5334 	.db #0x5b	; 91
      000007 4F                    5335 	.db #0x4f	; 79	'O'
      000008 5B                    5336 	.db #0x5b	; 91
      000009 3E                    5337 	.db #0x3e	; 62
      00000A 3E                    5338 	.db #0x3e	; 62
      00000B 6B                    5339 	.db #0x6b	; 107	'k'
      00000C 4F                    5340 	.db #0x4f	; 79	'O'
      00000D 6B                    5341 	.db #0x6b	; 107	'k'
      00000E 3E                    5342 	.db #0x3e	; 62
      00000F 1C                    5343 	.db #0x1c	; 28
      000010 3E                    5344 	.db #0x3e	; 62
      000011 7C                    5345 	.db #0x7c	; 124
      000012 3E                    5346 	.db #0x3e	; 62
      000013 1C                    5347 	.db #0x1c	; 28
      000014 18                    5348 	.db #0x18	; 24
      000015 3C                    5349 	.db #0x3c	; 60
      000016 7E                    5350 	.db #0x7e	; 126
      000017 3C                    5351 	.db #0x3c	; 60
      000018 18                    5352 	.db #0x18	; 24
      000019 1C                    5353 	.db #0x1c	; 28
      00001A 57                    5354 	.db #0x57	; 87	'W'
      00001B 7D                    5355 	.db #0x7d	; 125
      00001C 57                    5356 	.db #0x57	; 87	'W'
      00001D 1C                    5357 	.db #0x1c	; 28
      00001E 1C                    5358 	.db #0x1c	; 28
      00001F 5E                    5359 	.db #0x5e	; 94
      000020 7F                    5360 	.db #0x7f	; 127
      000021 5E                    5361 	.db #0x5e	; 94
      000022 1C                    5362 	.db #0x1c	; 28
      000023 00                    5363 	.db #0x00	; 0
      000024 18                    5364 	.db #0x18	; 24
      000025 3C                    5365 	.db #0x3c	; 60
      000026 18                    5366 	.db #0x18	; 24
      000027 00                    5367 	.db #0x00	; 0
      000028 FF                    5368 	.db #0xff	; 255
      000029 E7                    5369 	.db #0xe7	; 231
      00002A C3                    5370 	.db #0xc3	; 195
      00002B E7                    5371 	.db #0xe7	; 231
      00002C FF                    5372 	.db #0xff	; 255
      00002D 00                    5373 	.db #0x00	; 0
      00002E 18                    5374 	.db #0x18	; 24
      00002F 24                    5375 	.db #0x24	; 36
      000030 18                    5376 	.db #0x18	; 24
      000031 00                    5377 	.db #0x00	; 0
      000032 FF                    5378 	.db #0xff	; 255
      000033 E7                    5379 	.db #0xe7	; 231
      000034 DB                    5380 	.db #0xdb	; 219
      000035 E7                    5381 	.db #0xe7	; 231
      000036 FF                    5382 	.db #0xff	; 255
      000037 30                    5383 	.db #0x30	; 48	'0'
      000038 48                    5384 	.db #0x48	; 72	'H'
      000039 3A                    5385 	.db #0x3a	; 58
      00003A 06                    5386 	.db #0x06	; 6
      00003B 0E                    5387 	.db #0x0e	; 14
      00003C 26                    5388 	.db #0x26	; 38
      00003D 29                    5389 	.db #0x29	; 41
      00003E 79                    5390 	.db #0x79	; 121	'y'
      00003F 29                    5391 	.db #0x29	; 41
      000040 26                    5392 	.db #0x26	; 38
      000041 40                    5393 	.db #0x40	; 64
      000042 7F                    5394 	.db #0x7f	; 127
      000043 05                    5395 	.db #0x05	; 5
      000044 05                    5396 	.db #0x05	; 5
      000045 07                    5397 	.db #0x07	; 7
      000046 40                    5398 	.db #0x40	; 64
      000047 7F                    5399 	.db #0x7f	; 127
      000048 05                    5400 	.db #0x05	; 5
      000049 25                    5401 	.db #0x25	; 37
      00004A 3F                    5402 	.db #0x3f	; 63
      00004B 5A                    5403 	.db #0x5a	; 90	'Z'
      00004C 3C                    5404 	.db #0x3c	; 60
      00004D E7                    5405 	.db #0xe7	; 231
      00004E 3C                    5406 	.db #0x3c	; 60
      00004F 5A                    5407 	.db #0x5a	; 90	'Z'
      000050 7F                    5408 	.db #0x7f	; 127
      000051 3E                    5409 	.db #0x3e	; 62
      000052 1C                    5410 	.db #0x1c	; 28
      000053 1C                    5411 	.db #0x1c	; 28
      000054 08                    5412 	.db #0x08	; 8
      000055 08                    5413 	.db #0x08	; 8
      000056 1C                    5414 	.db #0x1c	; 28
      000057 1C                    5415 	.db #0x1c	; 28
      000058 3E                    5416 	.db #0x3e	; 62
      000059 7F                    5417 	.db #0x7f	; 127
      00005A 14                    5418 	.db #0x14	; 20
      00005B 22                    5419 	.db #0x22	; 34
      00005C 7F                    5420 	.db #0x7f	; 127
      00005D 22                    5421 	.db #0x22	; 34
      00005E 14                    5422 	.db #0x14	; 20
      00005F 5F                    5423 	.db #0x5f	; 95
      000060 5F                    5424 	.db #0x5f	; 95
      000061 00                    5425 	.db #0x00	; 0
      000062 5F                    5426 	.db #0x5f	; 95
      000063 5F                    5427 	.db #0x5f	; 95
      000064 06                    5428 	.db #0x06	; 6
      000065 09                    5429 	.db #0x09	; 9
      000066 7F                    5430 	.db #0x7f	; 127
      000067 01                    5431 	.db #0x01	; 1
      000068 7F                    5432 	.db #0x7f	; 127
      000069 00                    5433 	.db #0x00	; 0
      00006A 66                    5434 	.db #0x66	; 102	'f'
      00006B 89                    5435 	.db #0x89	; 137
      00006C 95                    5436 	.db #0x95	; 149
      00006D 6A                    5437 	.db #0x6a	; 106	'j'
      00006E 60                    5438 	.db #0x60	; 96
      00006F 60                    5439 	.db #0x60	; 96
      000070 60                    5440 	.db #0x60	; 96
      000071 60                    5441 	.db #0x60	; 96
      000072 60                    5442 	.db #0x60	; 96
      000073 94                    5443 	.db #0x94	; 148
      000074 A2                    5444 	.db #0xa2	; 162
      000075 FF                    5445 	.db #0xff	; 255
      000076 A2                    5446 	.db #0xa2	; 162
      000077 94                    5447 	.db #0x94	; 148
      000078 08                    5448 	.db #0x08	; 8
      000079 04                    5449 	.db #0x04	; 4
      00007A 7E                    5450 	.db #0x7e	; 126
      00007B 04                    5451 	.db #0x04	; 4
      00007C 08                    5452 	.db #0x08	; 8
      00007D 10                    5453 	.db #0x10	; 16
      00007E 20                    5454 	.db #0x20	; 32
      00007F 7E                    5455 	.db #0x7e	; 126
      000080 20                    5456 	.db #0x20	; 32
      000081 10                    5457 	.db #0x10	; 16
      000082 08                    5458 	.db #0x08	; 8
      000083 08                    5459 	.db #0x08	; 8
      000084 2A                    5460 	.db #0x2a	; 42
      000085 1C                    5461 	.db #0x1c	; 28
      000086 08                    5462 	.db #0x08	; 8
      000087 08                    5463 	.db #0x08	; 8
      000088 1C                    5464 	.db #0x1c	; 28
      000089 2A                    5465 	.db #0x2a	; 42
      00008A 08                    5466 	.db #0x08	; 8
      00008B 08                    5467 	.db #0x08	; 8
      00008C 1E                    5468 	.db #0x1e	; 30
      00008D 10                    5469 	.db #0x10	; 16
      00008E 10                    5470 	.db #0x10	; 16
      00008F 10                    5471 	.db #0x10	; 16
      000090 10                    5472 	.db #0x10	; 16
      000091 0C                    5473 	.db #0x0c	; 12
      000092 1E                    5474 	.db #0x1e	; 30
      000093 0C                    5475 	.db #0x0c	; 12
      000094 1E                    5476 	.db #0x1e	; 30
      000095 0C                    5477 	.db #0x0c	; 12
      000096 30                    5478 	.db #0x30	; 48	'0'
      000097 38                    5479 	.db #0x38	; 56	'8'
      000098 3E                    5480 	.db #0x3e	; 62
      000099 38                    5481 	.db #0x38	; 56	'8'
      00009A 30                    5482 	.db #0x30	; 48	'0'
      00009B 06                    5483 	.db #0x06	; 6
      00009C 0E                    5484 	.db #0x0e	; 14
      00009D 3E                    5485 	.db #0x3e	; 62
      00009E 0E                    5486 	.db #0x0e	; 14
      00009F 06                    5487 	.db #0x06	; 6
      0000A0 00                    5488 	.db #0x00	; 0
      0000A1 00                    5489 	.db #0x00	; 0
      0000A2 00                    5490 	.db #0x00	; 0
      0000A3 00                    5491 	.db #0x00	; 0
      0000A4 00                    5492 	.db #0x00	; 0
      0000A5 00                    5493 	.db #0x00	; 0
      0000A6 00                    5494 	.db #0x00	; 0
      0000A7 5F                    5495 	.db #0x5f	; 95
      0000A8 00                    5496 	.db #0x00	; 0
      0000A9 00                    5497 	.db #0x00	; 0
      0000AA 00                    5498 	.db #0x00	; 0
      0000AB 07                    5499 	.db #0x07	; 7
      0000AC 00                    5500 	.db #0x00	; 0
      0000AD 07                    5501 	.db #0x07	; 7
      0000AE 00                    5502 	.db #0x00	; 0
      0000AF 14                    5503 	.db #0x14	; 20
      0000B0 7F                    5504 	.db #0x7f	; 127
      0000B1 14                    5505 	.db #0x14	; 20
      0000B2 7F                    5506 	.db #0x7f	; 127
      0000B3 14                    5507 	.db #0x14	; 20
      0000B4 24                    5508 	.db #0x24	; 36
      0000B5 2A                    5509 	.db #0x2a	; 42
      0000B6 7F                    5510 	.db #0x7f	; 127
      0000B7 2A                    5511 	.db #0x2a	; 42
      0000B8 12                    5512 	.db #0x12	; 18
      0000B9 23                    5513 	.db #0x23	; 35
      0000BA 13                    5514 	.db #0x13	; 19
      0000BB 08                    5515 	.db #0x08	; 8
      0000BC 64                    5516 	.db #0x64	; 100	'd'
      0000BD 62                    5517 	.db #0x62	; 98	'b'
      0000BE 36                    5518 	.db #0x36	; 54	'6'
      0000BF 49                    5519 	.db #0x49	; 73	'I'
      0000C0 56                    5520 	.db #0x56	; 86	'V'
      0000C1 20                    5521 	.db #0x20	; 32
      0000C2 50                    5522 	.db #0x50	; 80	'P'
      0000C3 00                    5523 	.db #0x00	; 0
      0000C4 08                    5524 	.db #0x08	; 8
      0000C5 07                    5525 	.db #0x07	; 7
      0000C6 03                    5526 	.db #0x03	; 3
      0000C7 00                    5527 	.db #0x00	; 0
      0000C8 00                    5528 	.db #0x00	; 0
      0000C9 1C                    5529 	.db #0x1c	; 28
      0000CA 22                    5530 	.db #0x22	; 34
      0000CB 41                    5531 	.db #0x41	; 65	'A'
      0000CC 00                    5532 	.db #0x00	; 0
      0000CD 00                    5533 	.db #0x00	; 0
      0000CE 41                    5534 	.db #0x41	; 65	'A'
      0000CF 22                    5535 	.db #0x22	; 34
      0000D0 1C                    5536 	.db #0x1c	; 28
      0000D1 00                    5537 	.db #0x00	; 0
      0000D2 2A                    5538 	.db #0x2a	; 42
      0000D3 1C                    5539 	.db #0x1c	; 28
      0000D4 7F                    5540 	.db #0x7f	; 127
      0000D5 1C                    5541 	.db #0x1c	; 28
      0000D6 2A                    5542 	.db #0x2a	; 42
      0000D7 08                    5543 	.db #0x08	; 8
      0000D8 08                    5544 	.db #0x08	; 8
      0000D9 3E                    5545 	.db #0x3e	; 62
      0000DA 08                    5546 	.db #0x08	; 8
      0000DB 08                    5547 	.db #0x08	; 8
      0000DC 00                    5548 	.db #0x00	; 0
      0000DD 80                    5549 	.db #0x80	; 128
      0000DE 70                    5550 	.db #0x70	; 112	'p'
      0000DF 30                    5551 	.db #0x30	; 48	'0'
      0000E0 00                    5552 	.db #0x00	; 0
      0000E1 08                    5553 	.db #0x08	; 8
      0000E2 08                    5554 	.db #0x08	; 8
      0000E3 08                    5555 	.db #0x08	; 8
      0000E4 08                    5556 	.db #0x08	; 8
      0000E5 08                    5557 	.db #0x08	; 8
      0000E6 00                    5558 	.db #0x00	; 0
      0000E7 00                    5559 	.db #0x00	; 0
      0000E8 60                    5560 	.db #0x60	; 96
      0000E9 60                    5561 	.db #0x60	; 96
      0000EA 00                    5562 	.db #0x00	; 0
      0000EB 20                    5563 	.db #0x20	; 32
      0000EC 10                    5564 	.db #0x10	; 16
      0000ED 08                    5565 	.db #0x08	; 8
      0000EE 04                    5566 	.db #0x04	; 4
      0000EF 02                    5567 	.db #0x02	; 2
      0000F0 3E                    5568 	.db #0x3e	; 62
      0000F1 51                    5569 	.db #0x51	; 81	'Q'
      0000F2 49                    5570 	.db #0x49	; 73	'I'
      0000F3 45                    5571 	.db #0x45	; 69	'E'
      0000F4 3E                    5572 	.db #0x3e	; 62
      0000F5 00                    5573 	.db #0x00	; 0
      0000F6 42                    5574 	.db #0x42	; 66	'B'
      0000F7 7F                    5575 	.db #0x7f	; 127
      0000F8 40                    5576 	.db #0x40	; 64
      0000F9 00                    5577 	.db #0x00	; 0
      0000FA 72                    5578 	.db #0x72	; 114	'r'
      0000FB 49                    5579 	.db #0x49	; 73	'I'
      0000FC 49                    5580 	.db #0x49	; 73	'I'
      0000FD 49                    5581 	.db #0x49	; 73	'I'
      0000FE 46                    5582 	.db #0x46	; 70	'F'
      0000FF 21                    5583 	.db #0x21	; 33
      000100 41                    5584 	.db #0x41	; 65	'A'
      000101 49                    5585 	.db #0x49	; 73	'I'
      000102 4D                    5586 	.db #0x4d	; 77	'M'
      000103 33                    5587 	.db #0x33	; 51	'3'
      000104 18                    5588 	.db #0x18	; 24
      000105 14                    5589 	.db #0x14	; 20
      000106 12                    5590 	.db #0x12	; 18
      000107 7F                    5591 	.db #0x7f	; 127
      000108 10                    5592 	.db #0x10	; 16
      000109 27                    5593 	.db #0x27	; 39
      00010A 45                    5594 	.db #0x45	; 69	'E'
      00010B 45                    5595 	.db #0x45	; 69	'E'
      00010C 45                    5596 	.db #0x45	; 69	'E'
      00010D 39                    5597 	.db #0x39	; 57	'9'
      00010E 3C                    5598 	.db #0x3c	; 60
      00010F 4A                    5599 	.db #0x4a	; 74	'J'
      000110 49                    5600 	.db #0x49	; 73	'I'
      000111 49                    5601 	.db #0x49	; 73	'I'
      000112 31                    5602 	.db #0x31	; 49	'1'
      000113 41                    5603 	.db #0x41	; 65	'A'
      000114 21                    5604 	.db #0x21	; 33
      000115 11                    5605 	.db #0x11	; 17
      000116 09                    5606 	.db #0x09	; 9
      000117 07                    5607 	.db #0x07	; 7
      000118 36                    5608 	.db #0x36	; 54	'6'
      000119 49                    5609 	.db #0x49	; 73	'I'
      00011A 49                    5610 	.db #0x49	; 73	'I'
      00011B 49                    5611 	.db #0x49	; 73	'I'
      00011C 36                    5612 	.db #0x36	; 54	'6'
      00011D 46                    5613 	.db #0x46	; 70	'F'
      00011E 49                    5614 	.db #0x49	; 73	'I'
      00011F 49                    5615 	.db #0x49	; 73	'I'
      000120 29                    5616 	.db #0x29	; 41
      000121 1E                    5617 	.db #0x1e	; 30
      000122 00                    5618 	.db #0x00	; 0
      000123 00                    5619 	.db #0x00	; 0
      000124 14                    5620 	.db #0x14	; 20
      000125 00                    5621 	.db #0x00	; 0
      000126 00                    5622 	.db #0x00	; 0
      000127 00                    5623 	.db #0x00	; 0
      000128 40                    5624 	.db #0x40	; 64
      000129 34                    5625 	.db #0x34	; 52	'4'
      00012A 00                    5626 	.db #0x00	; 0
      00012B 00                    5627 	.db #0x00	; 0
      00012C 00                    5628 	.db #0x00	; 0
      00012D 08                    5629 	.db #0x08	; 8
      00012E 14                    5630 	.db #0x14	; 20
      00012F 22                    5631 	.db #0x22	; 34
      000130 41                    5632 	.db #0x41	; 65	'A'
      000131 14                    5633 	.db #0x14	; 20
      000132 14                    5634 	.db #0x14	; 20
      000133 14                    5635 	.db #0x14	; 20
      000134 14                    5636 	.db #0x14	; 20
      000135 14                    5637 	.db #0x14	; 20
      000136 00                    5638 	.db #0x00	; 0
      000137 41                    5639 	.db #0x41	; 65	'A'
      000138 22                    5640 	.db #0x22	; 34
      000139 14                    5641 	.db #0x14	; 20
      00013A 08                    5642 	.db #0x08	; 8
      00013B 02                    5643 	.db #0x02	; 2
      00013C 01                    5644 	.db #0x01	; 1
      00013D 59                    5645 	.db #0x59	; 89	'Y'
      00013E 09                    5646 	.db #0x09	; 9
      00013F 06                    5647 	.db #0x06	; 6
      000140 3E                    5648 	.db #0x3e	; 62
      000141 41                    5649 	.db #0x41	; 65	'A'
      000142 5D                    5650 	.db #0x5d	; 93
      000143 59                    5651 	.db #0x59	; 89	'Y'
      000144 4E                    5652 	.db #0x4e	; 78	'N'
      000145 7C                    5653 	.db #0x7c	; 124
      000146 12                    5654 	.db #0x12	; 18
      000147 11                    5655 	.db #0x11	; 17
      000148 12                    5656 	.db #0x12	; 18
      000149 7C                    5657 	.db #0x7c	; 124
      00014A 7F                    5658 	.db #0x7f	; 127
      00014B 49                    5659 	.db #0x49	; 73	'I'
      00014C 49                    5660 	.db #0x49	; 73	'I'
      00014D 49                    5661 	.db #0x49	; 73	'I'
      00014E 36                    5662 	.db #0x36	; 54	'6'
      00014F 3E                    5663 	.db #0x3e	; 62
      000150 41                    5664 	.db #0x41	; 65	'A'
      000151 41                    5665 	.db #0x41	; 65	'A'
      000152 41                    5666 	.db #0x41	; 65	'A'
      000153 22                    5667 	.db #0x22	; 34
      000154 7F                    5668 	.db #0x7f	; 127
      000155 41                    5669 	.db #0x41	; 65	'A'
      000156 41                    5670 	.db #0x41	; 65	'A'
      000157 41                    5671 	.db #0x41	; 65	'A'
      000158 3E                    5672 	.db #0x3e	; 62
      000159 7F                    5673 	.db #0x7f	; 127
      00015A 49                    5674 	.db #0x49	; 73	'I'
      00015B 49                    5675 	.db #0x49	; 73	'I'
      00015C 49                    5676 	.db #0x49	; 73	'I'
      00015D 41                    5677 	.db #0x41	; 65	'A'
      00015E 7F                    5678 	.db #0x7f	; 127
      00015F 09                    5679 	.db #0x09	; 9
      000160 09                    5680 	.db #0x09	; 9
      000161 09                    5681 	.db #0x09	; 9
      000162 01                    5682 	.db #0x01	; 1
      000163 3E                    5683 	.db #0x3e	; 62
      000164 41                    5684 	.db #0x41	; 65	'A'
      000165 41                    5685 	.db #0x41	; 65	'A'
      000166 51                    5686 	.db #0x51	; 81	'Q'
      000167 73                    5687 	.db #0x73	; 115	's'
      000168 7F                    5688 	.db #0x7f	; 127
      000169 08                    5689 	.db #0x08	; 8
      00016A 08                    5690 	.db #0x08	; 8
      00016B 08                    5691 	.db #0x08	; 8
      00016C 7F                    5692 	.db #0x7f	; 127
      00016D 00                    5693 	.db #0x00	; 0
      00016E 41                    5694 	.db #0x41	; 65	'A'
      00016F 7F                    5695 	.db #0x7f	; 127
      000170 41                    5696 	.db #0x41	; 65	'A'
      000171 00                    5697 	.db #0x00	; 0
      000172 20                    5698 	.db #0x20	; 32
      000173 40                    5699 	.db #0x40	; 64
      000174 41                    5700 	.db #0x41	; 65	'A'
      000175 3F                    5701 	.db #0x3f	; 63
      000176 01                    5702 	.db #0x01	; 1
      000177 7F                    5703 	.db #0x7f	; 127
      000178 08                    5704 	.db #0x08	; 8
      000179 14                    5705 	.db #0x14	; 20
      00017A 22                    5706 	.db #0x22	; 34
      00017B 41                    5707 	.db #0x41	; 65	'A'
      00017C 7F                    5708 	.db #0x7f	; 127
      00017D 40                    5709 	.db #0x40	; 64
      00017E 40                    5710 	.db #0x40	; 64
      00017F 40                    5711 	.db #0x40	; 64
      000180 40                    5712 	.db #0x40	; 64
      000181 7F                    5713 	.db #0x7f	; 127
      000182 02                    5714 	.db #0x02	; 2
      000183 1C                    5715 	.db #0x1c	; 28
      000184 02                    5716 	.db #0x02	; 2
      000185 7F                    5717 	.db #0x7f	; 127
      000186 7F                    5718 	.db #0x7f	; 127
      000187 04                    5719 	.db #0x04	; 4
      000188 08                    5720 	.db #0x08	; 8
      000189 10                    5721 	.db #0x10	; 16
      00018A 7F                    5722 	.db #0x7f	; 127
      00018B 3E                    5723 	.db #0x3e	; 62
      00018C 41                    5724 	.db #0x41	; 65	'A'
      00018D 41                    5725 	.db #0x41	; 65	'A'
      00018E 41                    5726 	.db #0x41	; 65	'A'
      00018F 3E                    5727 	.db #0x3e	; 62
      000190 7F                    5728 	.db #0x7f	; 127
      000191 09                    5729 	.db #0x09	; 9
      000192 09                    5730 	.db #0x09	; 9
      000193 09                    5731 	.db #0x09	; 9
      000194 06                    5732 	.db #0x06	; 6
      000195 3E                    5733 	.db #0x3e	; 62
      000196 41                    5734 	.db #0x41	; 65	'A'
      000197 51                    5735 	.db #0x51	; 81	'Q'
      000198 21                    5736 	.db #0x21	; 33
      000199 5E                    5737 	.db #0x5e	; 94
      00019A 7F                    5738 	.db #0x7f	; 127
      00019B 09                    5739 	.db #0x09	; 9
      00019C 19                    5740 	.db #0x19	; 25
      00019D 29                    5741 	.db #0x29	; 41
      00019E 46                    5742 	.db #0x46	; 70	'F'
      00019F 26                    5743 	.db #0x26	; 38
      0001A0 49                    5744 	.db #0x49	; 73	'I'
      0001A1 49                    5745 	.db #0x49	; 73	'I'
      0001A2 49                    5746 	.db #0x49	; 73	'I'
      0001A3 32                    5747 	.db #0x32	; 50	'2'
      0001A4 03                    5748 	.db #0x03	; 3
      0001A5 01                    5749 	.db #0x01	; 1
      0001A6 7F                    5750 	.db #0x7f	; 127
      0001A7 01                    5751 	.db #0x01	; 1
      0001A8 03                    5752 	.db #0x03	; 3
      0001A9 3F                    5753 	.db #0x3f	; 63
      0001AA 40                    5754 	.db #0x40	; 64
      0001AB 40                    5755 	.db #0x40	; 64
      0001AC 40                    5756 	.db #0x40	; 64
      0001AD 3F                    5757 	.db #0x3f	; 63
      0001AE 1F                    5758 	.db #0x1f	; 31
      0001AF 20                    5759 	.db #0x20	; 32
      0001B0 40                    5760 	.db #0x40	; 64
      0001B1 20                    5761 	.db #0x20	; 32
      0001B2 1F                    5762 	.db #0x1f	; 31
      0001B3 3F                    5763 	.db #0x3f	; 63
      0001B4 40                    5764 	.db #0x40	; 64
      0001B5 38                    5765 	.db #0x38	; 56	'8'
      0001B6 40                    5766 	.db #0x40	; 64
      0001B7 3F                    5767 	.db #0x3f	; 63
      0001B8 63                    5768 	.db #0x63	; 99	'c'
      0001B9 14                    5769 	.db #0x14	; 20
      0001BA 08                    5770 	.db #0x08	; 8
      0001BB 14                    5771 	.db #0x14	; 20
      0001BC 63                    5772 	.db #0x63	; 99	'c'
      0001BD 03                    5773 	.db #0x03	; 3
      0001BE 04                    5774 	.db #0x04	; 4
      0001BF 78                    5775 	.db #0x78	; 120	'x'
      0001C0 04                    5776 	.db #0x04	; 4
      0001C1 03                    5777 	.db #0x03	; 3
      0001C2 61                    5778 	.db #0x61	; 97	'a'
      0001C3 59                    5779 	.db #0x59	; 89	'Y'
      0001C4 49                    5780 	.db #0x49	; 73	'I'
      0001C5 4D                    5781 	.db #0x4d	; 77	'M'
      0001C6 43                    5782 	.db #0x43	; 67	'C'
      0001C7 00                    5783 	.db #0x00	; 0
      0001C8 7F                    5784 	.db #0x7f	; 127
      0001C9 41                    5785 	.db #0x41	; 65	'A'
      0001CA 41                    5786 	.db #0x41	; 65	'A'
      0001CB 41                    5787 	.db #0x41	; 65	'A'
      0001CC 02                    5788 	.db #0x02	; 2
      0001CD 04                    5789 	.db #0x04	; 4
      0001CE 08                    5790 	.db #0x08	; 8
      0001CF 10                    5791 	.db #0x10	; 16
      0001D0 20                    5792 	.db #0x20	; 32
      0001D1 00                    5793 	.db #0x00	; 0
      0001D2 41                    5794 	.db #0x41	; 65	'A'
      0001D3 41                    5795 	.db #0x41	; 65	'A'
      0001D4 41                    5796 	.db #0x41	; 65	'A'
      0001D5 7F                    5797 	.db #0x7f	; 127
      0001D6 04                    5798 	.db #0x04	; 4
      0001D7 02                    5799 	.db #0x02	; 2
      0001D8 01                    5800 	.db #0x01	; 1
      0001D9 02                    5801 	.db #0x02	; 2
      0001DA 04                    5802 	.db #0x04	; 4
      0001DB 40                    5803 	.db #0x40	; 64
      0001DC 40                    5804 	.db #0x40	; 64
      0001DD 40                    5805 	.db #0x40	; 64
      0001DE 40                    5806 	.db #0x40	; 64
      0001DF 40                    5807 	.db #0x40	; 64
      0001E0 00                    5808 	.db #0x00	; 0
      0001E1 03                    5809 	.db #0x03	; 3
      0001E2 07                    5810 	.db #0x07	; 7
      0001E3 08                    5811 	.db #0x08	; 8
      0001E4 00                    5812 	.db #0x00	; 0
      0001E5 20                    5813 	.db #0x20	; 32
      0001E6 54                    5814 	.db #0x54	; 84	'T'
      0001E7 54                    5815 	.db #0x54	; 84	'T'
      0001E8 78                    5816 	.db #0x78	; 120	'x'
      0001E9 40                    5817 	.db #0x40	; 64
      0001EA 7F                    5818 	.db #0x7f	; 127
      0001EB 28                    5819 	.db #0x28	; 40
      0001EC 44                    5820 	.db #0x44	; 68	'D'
      0001ED 44                    5821 	.db #0x44	; 68	'D'
      0001EE 38                    5822 	.db #0x38	; 56	'8'
      0001EF 38                    5823 	.db #0x38	; 56	'8'
      0001F0 44                    5824 	.db #0x44	; 68	'D'
      0001F1 44                    5825 	.db #0x44	; 68	'D'
      0001F2 44                    5826 	.db #0x44	; 68	'D'
      0001F3 28                    5827 	.db #0x28	; 40
      0001F4 38                    5828 	.db #0x38	; 56	'8'
      0001F5 44                    5829 	.db #0x44	; 68	'D'
      0001F6 44                    5830 	.db #0x44	; 68	'D'
      0001F7 28                    5831 	.db #0x28	; 40
      0001F8 7F                    5832 	.db #0x7f	; 127
      0001F9 38                    5833 	.db #0x38	; 56	'8'
      0001FA 54                    5834 	.db #0x54	; 84	'T'
      0001FB 54                    5835 	.db #0x54	; 84	'T'
      0001FC 54                    5836 	.db #0x54	; 84	'T'
      0001FD 18                    5837 	.db #0x18	; 24
      0001FE 00                    5838 	.db #0x00	; 0
      0001FF 08                    5839 	.db #0x08	; 8
      000200 7E                    5840 	.db #0x7e	; 126
      000201 09                    5841 	.db #0x09	; 9
      000202 02                    5842 	.db #0x02	; 2
      000203 18                    5843 	.db #0x18	; 24
      000204 A4                    5844 	.db #0xa4	; 164
      000205 A4                    5845 	.db #0xa4	; 164
      000206 9C                    5846 	.db #0x9c	; 156
      000207 78                    5847 	.db #0x78	; 120	'x'
      000208 7F                    5848 	.db #0x7f	; 127
      000209 08                    5849 	.db #0x08	; 8
      00020A 04                    5850 	.db #0x04	; 4
      00020B 04                    5851 	.db #0x04	; 4
      00020C 78                    5852 	.db #0x78	; 120	'x'
      00020D 00                    5853 	.db #0x00	; 0
      00020E 44                    5854 	.db #0x44	; 68	'D'
      00020F 7D                    5855 	.db #0x7d	; 125
      000210 40                    5856 	.db #0x40	; 64
      000211 00                    5857 	.db #0x00	; 0
      000212 20                    5858 	.db #0x20	; 32
      000213 40                    5859 	.db #0x40	; 64
      000214 40                    5860 	.db #0x40	; 64
      000215 3D                    5861 	.db #0x3d	; 61
      000216 00                    5862 	.db #0x00	; 0
      000217 7F                    5863 	.db #0x7f	; 127
      000218 10                    5864 	.db #0x10	; 16
      000219 28                    5865 	.db #0x28	; 40
      00021A 44                    5866 	.db #0x44	; 68	'D'
      00021B 00                    5867 	.db #0x00	; 0
      00021C 00                    5868 	.db #0x00	; 0
      00021D 41                    5869 	.db #0x41	; 65	'A'
      00021E 7F                    5870 	.db #0x7f	; 127
      00021F 40                    5871 	.db #0x40	; 64
      000220 00                    5872 	.db #0x00	; 0
      000221 7C                    5873 	.db #0x7c	; 124
      000222 04                    5874 	.db #0x04	; 4
      000223 78                    5875 	.db #0x78	; 120	'x'
      000224 04                    5876 	.db #0x04	; 4
      000225 78                    5877 	.db #0x78	; 120	'x'
      000226 7C                    5878 	.db #0x7c	; 124
      000227 08                    5879 	.db #0x08	; 8
      000228 04                    5880 	.db #0x04	; 4
      000229 04                    5881 	.db #0x04	; 4
      00022A 78                    5882 	.db #0x78	; 120	'x'
      00022B 38                    5883 	.db #0x38	; 56	'8'
      00022C 44                    5884 	.db #0x44	; 68	'D'
      00022D 44                    5885 	.db #0x44	; 68	'D'
      00022E 44                    5886 	.db #0x44	; 68	'D'
      00022F 38                    5887 	.db #0x38	; 56	'8'
      000230 FC                    5888 	.db #0xfc	; 252
      000231 18                    5889 	.db #0x18	; 24
      000232 24                    5890 	.db #0x24	; 36
      000233 24                    5891 	.db #0x24	; 36
      000234 18                    5892 	.db #0x18	; 24
      000235 18                    5893 	.db #0x18	; 24
      000236 24                    5894 	.db #0x24	; 36
      000237 24                    5895 	.db #0x24	; 36
      000238 18                    5896 	.db #0x18	; 24
      000239 FC                    5897 	.db #0xfc	; 252
      00023A 7C                    5898 	.db #0x7c	; 124
      00023B 08                    5899 	.db #0x08	; 8
      00023C 04                    5900 	.db #0x04	; 4
      00023D 04                    5901 	.db #0x04	; 4
      00023E 08                    5902 	.db #0x08	; 8
      00023F 48                    5903 	.db #0x48	; 72	'H'
      000240 54                    5904 	.db #0x54	; 84	'T'
      000241 54                    5905 	.db #0x54	; 84	'T'
      000242 54                    5906 	.db #0x54	; 84	'T'
      000243 24                    5907 	.db #0x24	; 36
      000244 04                    5908 	.db #0x04	; 4
      000245 04                    5909 	.db #0x04	; 4
      000246 3F                    5910 	.db #0x3f	; 63
      000247 44                    5911 	.db #0x44	; 68	'D'
      000248 24                    5912 	.db #0x24	; 36
      000249 3C                    5913 	.db #0x3c	; 60
      00024A 40                    5914 	.db #0x40	; 64
      00024B 40                    5915 	.db #0x40	; 64
      00024C 20                    5916 	.db #0x20	; 32
      00024D 7C                    5917 	.db #0x7c	; 124
      00024E 1C                    5918 	.db #0x1c	; 28
      00024F 20                    5919 	.db #0x20	; 32
      000250 40                    5920 	.db #0x40	; 64
      000251 20                    5921 	.db #0x20	; 32
      000252 1C                    5922 	.db #0x1c	; 28
      000253 3C                    5923 	.db #0x3c	; 60
      000254 40                    5924 	.db #0x40	; 64
      000255 30                    5925 	.db #0x30	; 48	'0'
      000256 40                    5926 	.db #0x40	; 64
      000257 3C                    5927 	.db #0x3c	; 60
      000258 44                    5928 	.db #0x44	; 68	'D'
      000259 28                    5929 	.db #0x28	; 40
      00025A 10                    5930 	.db #0x10	; 16
      00025B 28                    5931 	.db #0x28	; 40
      00025C 44                    5932 	.db #0x44	; 68	'D'
      00025D 4C                    5933 	.db #0x4c	; 76	'L'
      00025E 90                    5934 	.db #0x90	; 144
      00025F 90                    5935 	.db #0x90	; 144
      000260 90                    5936 	.db #0x90	; 144
      000261 7C                    5937 	.db #0x7c	; 124
      000262 44                    5938 	.db #0x44	; 68	'D'
      000263 64                    5939 	.db #0x64	; 100	'd'
      000264 54                    5940 	.db #0x54	; 84	'T'
      000265 4C                    5941 	.db #0x4c	; 76	'L'
      000266 44                    5942 	.db #0x44	; 68	'D'
      000267 00                    5943 	.db #0x00	; 0
      000268 08                    5944 	.db #0x08	; 8
      000269 36                    5945 	.db #0x36	; 54	'6'
      00026A 41                    5946 	.db #0x41	; 65	'A'
      00026B 00                    5947 	.db #0x00	; 0
      00026C 00                    5948 	.db #0x00	; 0
      00026D 00                    5949 	.db #0x00	; 0
      00026E 77                    5950 	.db #0x77	; 119	'w'
      00026F 00                    5951 	.db #0x00	; 0
      000270 00                    5952 	.db #0x00	; 0
      000271 00                    5953 	.db #0x00	; 0
      000272 41                    5954 	.db #0x41	; 65	'A'
      000273 36                    5955 	.db #0x36	; 54	'6'
      000274 08                    5956 	.db #0x08	; 8
      000275 00                    5957 	.db #0x00	; 0
      000276 02                    5958 	.db #0x02	; 2
      000277 01                    5959 	.db #0x01	; 1
      000278 02                    5960 	.db #0x02	; 2
      000279 04                    5961 	.db #0x04	; 4
      00027A 02                    5962 	.db #0x02	; 2
      00027B 3C                    5963 	.db #0x3c	; 60
      00027C 26                    5964 	.db #0x26	; 38
      00027D 23                    5965 	.db #0x23	; 35
      00027E 26                    5966 	.db #0x26	; 38
      00027F 3C                    5967 	.db #0x3c	; 60
      000280 1E                    5968 	.db #0x1e	; 30
      000281 A1                    5969 	.db #0xa1	; 161
      000282 A1                    5970 	.db #0xa1	; 161
      000283 61                    5971 	.db #0x61	; 97	'a'
      000284 12                    5972 	.db #0x12	; 18
      000285 3A                    5973 	.db #0x3a	; 58
      000286 40                    5974 	.db #0x40	; 64
      000287 40                    5975 	.db #0x40	; 64
      000288 20                    5976 	.db #0x20	; 32
      000289 7A                    5977 	.db #0x7a	; 122	'z'
      00028A 38                    5978 	.db #0x38	; 56	'8'
      00028B 54                    5979 	.db #0x54	; 84	'T'
      00028C 54                    5980 	.db #0x54	; 84	'T'
      00028D 55                    5981 	.db #0x55	; 85	'U'
      00028E 59                    5982 	.db #0x59	; 89	'Y'
      00028F 21                    5983 	.db #0x21	; 33
      000290 55                    5984 	.db #0x55	; 85	'U'
      000291 55                    5985 	.db #0x55	; 85	'U'
      000292 79                    5986 	.db #0x79	; 121	'y'
      000293 41                    5987 	.db #0x41	; 65	'A'
      000294 22                    5988 	.db #0x22	; 34
      000295 54                    5989 	.db #0x54	; 84	'T'
      000296 54                    5990 	.db #0x54	; 84	'T'
      000297 78                    5991 	.db #0x78	; 120	'x'
      000298 42                    5992 	.db #0x42	; 66	'B'
      000299 21                    5993 	.db #0x21	; 33
      00029A 55                    5994 	.db #0x55	; 85	'U'
      00029B 54                    5995 	.db #0x54	; 84	'T'
      00029C 78                    5996 	.db #0x78	; 120	'x'
      00029D 40                    5997 	.db #0x40	; 64
      00029E 20                    5998 	.db #0x20	; 32
      00029F 54                    5999 	.db #0x54	; 84	'T'
      0002A0 55                    6000 	.db #0x55	; 85	'U'
      0002A1 79                    6001 	.db #0x79	; 121	'y'
      0002A2 40                    6002 	.db #0x40	; 64
      0002A3 0C                    6003 	.db #0x0c	; 12
      0002A4 1E                    6004 	.db #0x1e	; 30
      0002A5 52                    6005 	.db #0x52	; 82	'R'
      0002A6 72                    6006 	.db #0x72	; 114	'r'
      0002A7 12                    6007 	.db #0x12	; 18
      0002A8 39                    6008 	.db #0x39	; 57	'9'
      0002A9 55                    6009 	.db #0x55	; 85	'U'
      0002AA 55                    6010 	.db #0x55	; 85	'U'
      0002AB 55                    6011 	.db #0x55	; 85	'U'
      0002AC 59                    6012 	.db #0x59	; 89	'Y'
      0002AD 39                    6013 	.db #0x39	; 57	'9'
      0002AE 54                    6014 	.db #0x54	; 84	'T'
      0002AF 54                    6015 	.db #0x54	; 84	'T'
      0002B0 54                    6016 	.db #0x54	; 84	'T'
      0002B1 59                    6017 	.db #0x59	; 89	'Y'
      0002B2 39                    6018 	.db #0x39	; 57	'9'
      0002B3 55                    6019 	.db #0x55	; 85	'U'
      0002B4 54                    6020 	.db #0x54	; 84	'T'
      0002B5 54                    6021 	.db #0x54	; 84	'T'
      0002B6 58                    6022 	.db #0x58	; 88	'X'
      0002B7 00                    6023 	.db #0x00	; 0
      0002B8 00                    6024 	.db #0x00	; 0
      0002B9 45                    6025 	.db #0x45	; 69	'E'
      0002BA 7C                    6026 	.db #0x7c	; 124
      0002BB 41                    6027 	.db #0x41	; 65	'A'
      0002BC 00                    6028 	.db #0x00	; 0
      0002BD 02                    6029 	.db #0x02	; 2
      0002BE 45                    6030 	.db #0x45	; 69	'E'
      0002BF 7D                    6031 	.db #0x7d	; 125
      0002C0 42                    6032 	.db #0x42	; 66	'B'
      0002C1 00                    6033 	.db #0x00	; 0
      0002C2 01                    6034 	.db #0x01	; 1
      0002C3 45                    6035 	.db #0x45	; 69	'E'
      0002C4 7C                    6036 	.db #0x7c	; 124
      0002C5 40                    6037 	.db #0x40	; 64
      0002C6 7D                    6038 	.db #0x7d	; 125
      0002C7 12                    6039 	.db #0x12	; 18
      0002C8 11                    6040 	.db #0x11	; 17
      0002C9 12                    6041 	.db #0x12	; 18
      0002CA 7D                    6042 	.db #0x7d	; 125
      0002CB F0                    6043 	.db #0xf0	; 240
      0002CC 28                    6044 	.db #0x28	; 40
      0002CD 25                    6045 	.db #0x25	; 37
      0002CE 28                    6046 	.db #0x28	; 40
      0002CF F0                    6047 	.db #0xf0	; 240
      0002D0 7C                    6048 	.db #0x7c	; 124
      0002D1 54                    6049 	.db #0x54	; 84	'T'
      0002D2 55                    6050 	.db #0x55	; 85	'U'
      0002D3 45                    6051 	.db #0x45	; 69	'E'
      0002D4 00                    6052 	.db #0x00	; 0
      0002D5 20                    6053 	.db #0x20	; 32
      0002D6 54                    6054 	.db #0x54	; 84	'T'
      0002D7 54                    6055 	.db #0x54	; 84	'T'
      0002D8 7C                    6056 	.db #0x7c	; 124
      0002D9 54                    6057 	.db #0x54	; 84	'T'
      0002DA 7C                    6058 	.db #0x7c	; 124
      0002DB 0A                    6059 	.db #0x0a	; 10
      0002DC 09                    6060 	.db #0x09	; 9
      0002DD 7F                    6061 	.db #0x7f	; 127
      0002DE 49                    6062 	.db #0x49	; 73	'I'
      0002DF 32                    6063 	.db #0x32	; 50	'2'
      0002E0 49                    6064 	.db #0x49	; 73	'I'
      0002E1 49                    6065 	.db #0x49	; 73	'I'
      0002E2 49                    6066 	.db #0x49	; 73	'I'
      0002E3 32                    6067 	.db #0x32	; 50	'2'
      0002E4 3A                    6068 	.db #0x3a	; 58
      0002E5 44                    6069 	.db #0x44	; 68	'D'
      0002E6 44                    6070 	.db #0x44	; 68	'D'
      0002E7 44                    6071 	.db #0x44	; 68	'D'
      0002E8 3A                    6072 	.db #0x3a	; 58
      0002E9 32                    6073 	.db #0x32	; 50	'2'
      0002EA 4A                    6074 	.db #0x4a	; 74	'J'
      0002EB 48                    6075 	.db #0x48	; 72	'H'
      0002EC 48                    6076 	.db #0x48	; 72	'H'
      0002ED 30                    6077 	.db #0x30	; 48	'0'
      0002EE 3A                    6078 	.db #0x3a	; 58
      0002EF 41                    6079 	.db #0x41	; 65	'A'
      0002F0 41                    6080 	.db #0x41	; 65	'A'
      0002F1 21                    6081 	.db #0x21	; 33
      0002F2 7A                    6082 	.db #0x7a	; 122	'z'
      0002F3 3A                    6083 	.db #0x3a	; 58
      0002F4 42                    6084 	.db #0x42	; 66	'B'
      0002F5 40                    6085 	.db #0x40	; 64
      0002F6 20                    6086 	.db #0x20	; 32
      0002F7 78                    6087 	.db #0x78	; 120	'x'
      0002F8 00                    6088 	.db #0x00	; 0
      0002F9 9D                    6089 	.db #0x9d	; 157
      0002FA A0                    6090 	.db #0xa0	; 160
      0002FB A0                    6091 	.db #0xa0	; 160
      0002FC 7D                    6092 	.db #0x7d	; 125
      0002FD 3D                    6093 	.db #0x3d	; 61
      0002FE 42                    6094 	.db #0x42	; 66	'B'
      0002FF 42                    6095 	.db #0x42	; 66	'B'
      000300 42                    6096 	.db #0x42	; 66	'B'
      000301 3D                    6097 	.db #0x3d	; 61
      000302 3D                    6098 	.db #0x3d	; 61
      000303 40                    6099 	.db #0x40	; 64
      000304 40                    6100 	.db #0x40	; 64
      000305 40                    6101 	.db #0x40	; 64
      000306 3D                    6102 	.db #0x3d	; 61
      000307 3C                    6103 	.db #0x3c	; 60
      000308 24                    6104 	.db #0x24	; 36
      000309 FF                    6105 	.db #0xff	; 255
      00030A 24                    6106 	.db #0x24	; 36
      00030B 24                    6107 	.db #0x24	; 36
      00030C 48                    6108 	.db #0x48	; 72	'H'
      00030D 7E                    6109 	.db #0x7e	; 126
      00030E 49                    6110 	.db #0x49	; 73	'I'
      00030F 43                    6111 	.db #0x43	; 67	'C'
      000310 66                    6112 	.db #0x66	; 102	'f'
      000311 2B                    6113 	.db #0x2b	; 43
      000312 2F                    6114 	.db #0x2f	; 47
      000313 FC                    6115 	.db #0xfc	; 252
      000314 2F                    6116 	.db #0x2f	; 47
      000315 2B                    6117 	.db #0x2b	; 43
      000316 FF                    6118 	.db #0xff	; 255
      000317 09                    6119 	.db #0x09	; 9
      000318 29                    6120 	.db #0x29	; 41
      000319 F6                    6121 	.db #0xf6	; 246
      00031A 20                    6122 	.db #0x20	; 32
      00031B C0                    6123 	.db #0xc0	; 192
      00031C 88                    6124 	.db #0x88	; 136
      00031D 7E                    6125 	.db #0x7e	; 126
      00031E 09                    6126 	.db #0x09	; 9
      00031F 03                    6127 	.db #0x03	; 3
      000320 20                    6128 	.db #0x20	; 32
      000321 54                    6129 	.db #0x54	; 84	'T'
      000322 54                    6130 	.db #0x54	; 84	'T'
      000323 79                    6131 	.db #0x79	; 121	'y'
      000324 41                    6132 	.db #0x41	; 65	'A'
      000325 00                    6133 	.db #0x00	; 0
      000326 00                    6134 	.db #0x00	; 0
      000327 44                    6135 	.db #0x44	; 68	'D'
      000328 7D                    6136 	.db #0x7d	; 125
      000329 41                    6137 	.db #0x41	; 65	'A'
      00032A 30                    6138 	.db #0x30	; 48	'0'
      00032B 48                    6139 	.db #0x48	; 72	'H'
      00032C 48                    6140 	.db #0x48	; 72	'H'
      00032D 4A                    6141 	.db #0x4a	; 74	'J'
      00032E 32                    6142 	.db #0x32	; 50	'2'
      00032F 38                    6143 	.db #0x38	; 56	'8'
      000330 40                    6144 	.db #0x40	; 64
      000331 40                    6145 	.db #0x40	; 64
      000332 22                    6146 	.db #0x22	; 34
      000333 7A                    6147 	.db #0x7a	; 122	'z'
      000334 00                    6148 	.db #0x00	; 0
      000335 7A                    6149 	.db #0x7a	; 122	'z'
      000336 0A                    6150 	.db #0x0a	; 10
      000337 0A                    6151 	.db #0x0a	; 10
      000338 72                    6152 	.db #0x72	; 114	'r'
      000339 7D                    6153 	.db #0x7d	; 125
      00033A 0D                    6154 	.db #0x0d	; 13
      00033B 19                    6155 	.db #0x19	; 25
      00033C 31                    6156 	.db #0x31	; 49	'1'
      00033D 7D                    6157 	.db #0x7d	; 125
      00033E 26                    6158 	.db #0x26	; 38
      00033F 29                    6159 	.db #0x29	; 41
      000340 29                    6160 	.db #0x29	; 41
      000341 2F                    6161 	.db #0x2f	; 47
      000342 28                    6162 	.db #0x28	; 40
      000343 26                    6163 	.db #0x26	; 38
      000344 29                    6164 	.db #0x29	; 41
      000345 29                    6165 	.db #0x29	; 41
      000346 29                    6166 	.db #0x29	; 41
      000347 26                    6167 	.db #0x26	; 38
      000348 30                    6168 	.db #0x30	; 48	'0'
      000349 48                    6169 	.db #0x48	; 72	'H'
      00034A 4D                    6170 	.db #0x4d	; 77	'M'
      00034B 40                    6171 	.db #0x40	; 64
      00034C 20                    6172 	.db #0x20	; 32
      00034D 38                    6173 	.db #0x38	; 56	'8'
      00034E 08                    6174 	.db #0x08	; 8
      00034F 08                    6175 	.db #0x08	; 8
      000350 08                    6176 	.db #0x08	; 8
      000351 08                    6177 	.db #0x08	; 8
      000352 08                    6178 	.db #0x08	; 8
      000353 08                    6179 	.db #0x08	; 8
      000354 08                    6180 	.db #0x08	; 8
      000355 08                    6181 	.db #0x08	; 8
      000356 38                    6182 	.db #0x38	; 56	'8'
      000357 2F                    6183 	.db #0x2f	; 47
      000358 10                    6184 	.db #0x10	; 16
      000359 C8                    6185 	.db #0xc8	; 200
      00035A AC                    6186 	.db #0xac	; 172
      00035B BA                    6187 	.db #0xba	; 186
      00035C 2F                    6188 	.db #0x2f	; 47
      00035D 10                    6189 	.db #0x10	; 16
      00035E 28                    6190 	.db #0x28	; 40
      00035F 34                    6191 	.db #0x34	; 52	'4'
      000360 FA                    6192 	.db #0xfa	; 250
      000361 00                    6193 	.db #0x00	; 0
      000362 00                    6194 	.db #0x00	; 0
      000363 7B                    6195 	.db #0x7b	; 123
      000364 00                    6196 	.db #0x00	; 0
      000365 00                    6197 	.db #0x00	; 0
      000366 08                    6198 	.db #0x08	; 8
      000367 14                    6199 	.db #0x14	; 20
      000368 2A                    6200 	.db #0x2a	; 42
      000369 14                    6201 	.db #0x14	; 20
      00036A 22                    6202 	.db #0x22	; 34
      00036B 22                    6203 	.db #0x22	; 34
      00036C 14                    6204 	.db #0x14	; 20
      00036D 2A                    6205 	.db #0x2a	; 42
      00036E 14                    6206 	.db #0x14	; 20
      00036F 08                    6207 	.db #0x08	; 8
      000370 AA                    6208 	.db #0xaa	; 170
      000371 00                    6209 	.db #0x00	; 0
      000372 55                    6210 	.db #0x55	; 85	'U'
      000373 00                    6211 	.db #0x00	; 0
      000374 AA                    6212 	.db #0xaa	; 170
      000375 AA                    6213 	.db #0xaa	; 170
      000376 55                    6214 	.db #0x55	; 85	'U'
      000377 AA                    6215 	.db #0xaa	; 170
      000378 55                    6216 	.db #0x55	; 85	'U'
      000379 AA                    6217 	.db #0xaa	; 170
      00037A 00                    6218 	.db #0x00	; 0
      00037B 00                    6219 	.db #0x00	; 0
      00037C 00                    6220 	.db #0x00	; 0
      00037D FF                    6221 	.db #0xff	; 255
      00037E 00                    6222 	.db #0x00	; 0
      00037F 10                    6223 	.db #0x10	; 16
      000380 10                    6224 	.db #0x10	; 16
      000381 10                    6225 	.db #0x10	; 16
      000382 FF                    6226 	.db #0xff	; 255
      000383 00                    6227 	.db #0x00	; 0
      000384 14                    6228 	.db #0x14	; 20
      000385 14                    6229 	.db #0x14	; 20
      000386 14                    6230 	.db #0x14	; 20
      000387 FF                    6231 	.db #0xff	; 255
      000388 00                    6232 	.db #0x00	; 0
      000389 10                    6233 	.db #0x10	; 16
      00038A 10                    6234 	.db #0x10	; 16
      00038B FF                    6235 	.db #0xff	; 255
      00038C 00                    6236 	.db #0x00	; 0
      00038D FF                    6237 	.db #0xff	; 255
      00038E 10                    6238 	.db #0x10	; 16
      00038F 10                    6239 	.db #0x10	; 16
      000390 F0                    6240 	.db #0xf0	; 240
      000391 10                    6241 	.db #0x10	; 16
      000392 F0                    6242 	.db #0xf0	; 240
      000393 14                    6243 	.db #0x14	; 20
      000394 14                    6244 	.db #0x14	; 20
      000395 14                    6245 	.db #0x14	; 20
      000396 FC                    6246 	.db #0xfc	; 252
      000397 00                    6247 	.db #0x00	; 0
      000398 14                    6248 	.db #0x14	; 20
      000399 14                    6249 	.db #0x14	; 20
      00039A F7                    6250 	.db #0xf7	; 247
      00039B 00                    6251 	.db #0x00	; 0
      00039C FF                    6252 	.db #0xff	; 255
      00039D 00                    6253 	.db #0x00	; 0
      00039E 00                    6254 	.db #0x00	; 0
      00039F FF                    6255 	.db #0xff	; 255
      0003A0 00                    6256 	.db #0x00	; 0
      0003A1 FF                    6257 	.db #0xff	; 255
      0003A2 14                    6258 	.db #0x14	; 20
      0003A3 14                    6259 	.db #0x14	; 20
      0003A4 F4                    6260 	.db #0xf4	; 244
      0003A5 04                    6261 	.db #0x04	; 4
      0003A6 FC                    6262 	.db #0xfc	; 252
      0003A7 14                    6263 	.db #0x14	; 20
      0003A8 14                    6264 	.db #0x14	; 20
      0003A9 17                    6265 	.db #0x17	; 23
      0003AA 10                    6266 	.db #0x10	; 16
      0003AB 1F                    6267 	.db #0x1f	; 31
      0003AC 10                    6268 	.db #0x10	; 16
      0003AD 10                    6269 	.db #0x10	; 16
      0003AE 1F                    6270 	.db #0x1f	; 31
      0003AF 10                    6271 	.db #0x10	; 16
      0003B0 1F                    6272 	.db #0x1f	; 31
      0003B1 14                    6273 	.db #0x14	; 20
      0003B2 14                    6274 	.db #0x14	; 20
      0003B3 14                    6275 	.db #0x14	; 20
      0003B4 1F                    6276 	.db #0x1f	; 31
      0003B5 00                    6277 	.db #0x00	; 0
      0003B6 10                    6278 	.db #0x10	; 16
      0003B7 10                    6279 	.db #0x10	; 16
      0003B8 10                    6280 	.db #0x10	; 16
      0003B9 F0                    6281 	.db #0xf0	; 240
      0003BA 00                    6282 	.db #0x00	; 0
      0003BB 00                    6283 	.db #0x00	; 0
      0003BC 00                    6284 	.db #0x00	; 0
      0003BD 00                    6285 	.db #0x00	; 0
      0003BE 1F                    6286 	.db #0x1f	; 31
      0003BF 10                    6287 	.db #0x10	; 16
      0003C0 10                    6288 	.db #0x10	; 16
      0003C1 10                    6289 	.db #0x10	; 16
      0003C2 10                    6290 	.db #0x10	; 16
      0003C3 1F                    6291 	.db #0x1f	; 31
      0003C4 10                    6292 	.db #0x10	; 16
      0003C5 10                    6293 	.db #0x10	; 16
      0003C6 10                    6294 	.db #0x10	; 16
      0003C7 10                    6295 	.db #0x10	; 16
      0003C8 F0                    6296 	.db #0xf0	; 240
      0003C9 10                    6297 	.db #0x10	; 16
      0003CA 00                    6298 	.db #0x00	; 0
      0003CB 00                    6299 	.db #0x00	; 0
      0003CC 00                    6300 	.db #0x00	; 0
      0003CD FF                    6301 	.db #0xff	; 255
      0003CE 10                    6302 	.db #0x10	; 16
      0003CF 10                    6303 	.db #0x10	; 16
      0003D0 10                    6304 	.db #0x10	; 16
      0003D1 10                    6305 	.db #0x10	; 16
      0003D2 10                    6306 	.db #0x10	; 16
      0003D3 10                    6307 	.db #0x10	; 16
      0003D4 10                    6308 	.db #0x10	; 16
      0003D5 10                    6309 	.db #0x10	; 16
      0003D6 10                    6310 	.db #0x10	; 16
      0003D7 FF                    6311 	.db #0xff	; 255
      0003D8 10                    6312 	.db #0x10	; 16
      0003D9 00                    6313 	.db #0x00	; 0
      0003DA 00                    6314 	.db #0x00	; 0
      0003DB 00                    6315 	.db #0x00	; 0
      0003DC FF                    6316 	.db #0xff	; 255
      0003DD 14                    6317 	.db #0x14	; 20
      0003DE 00                    6318 	.db #0x00	; 0
      0003DF 00                    6319 	.db #0x00	; 0
      0003E0 FF                    6320 	.db #0xff	; 255
      0003E1 00                    6321 	.db #0x00	; 0
      0003E2 FF                    6322 	.db #0xff	; 255
      0003E3 00                    6323 	.db #0x00	; 0
      0003E4 00                    6324 	.db #0x00	; 0
      0003E5 1F                    6325 	.db #0x1f	; 31
      0003E6 10                    6326 	.db #0x10	; 16
      0003E7 17                    6327 	.db #0x17	; 23
      0003E8 00                    6328 	.db #0x00	; 0
      0003E9 00                    6329 	.db #0x00	; 0
      0003EA FC                    6330 	.db #0xfc	; 252
      0003EB 04                    6331 	.db #0x04	; 4
      0003EC F4                    6332 	.db #0xf4	; 244
      0003ED 14                    6333 	.db #0x14	; 20
      0003EE 14                    6334 	.db #0x14	; 20
      0003EF 17                    6335 	.db #0x17	; 23
      0003F0 10                    6336 	.db #0x10	; 16
      0003F1 17                    6337 	.db #0x17	; 23
      0003F2 14                    6338 	.db #0x14	; 20
      0003F3 14                    6339 	.db #0x14	; 20
      0003F4 F4                    6340 	.db #0xf4	; 244
      0003F5 04                    6341 	.db #0x04	; 4
      0003F6 F4                    6342 	.db #0xf4	; 244
      0003F7 00                    6343 	.db #0x00	; 0
      0003F8 00                    6344 	.db #0x00	; 0
      0003F9 FF                    6345 	.db #0xff	; 255
      0003FA 00                    6346 	.db #0x00	; 0
      0003FB F7                    6347 	.db #0xf7	; 247
      0003FC 14                    6348 	.db #0x14	; 20
      0003FD 14                    6349 	.db #0x14	; 20
      0003FE 14                    6350 	.db #0x14	; 20
      0003FF 14                    6351 	.db #0x14	; 20
      000400 14                    6352 	.db #0x14	; 20
      000401 14                    6353 	.db #0x14	; 20
      000402 14                    6354 	.db #0x14	; 20
      000403 F7                    6355 	.db #0xf7	; 247
      000404 00                    6356 	.db #0x00	; 0
      000405 F7                    6357 	.db #0xf7	; 247
      000406 14                    6358 	.db #0x14	; 20
      000407 14                    6359 	.db #0x14	; 20
      000408 14                    6360 	.db #0x14	; 20
      000409 17                    6361 	.db #0x17	; 23
      00040A 14                    6362 	.db #0x14	; 20
      00040B 10                    6363 	.db #0x10	; 16
      00040C 10                    6364 	.db #0x10	; 16
      00040D 1F                    6365 	.db #0x1f	; 31
      00040E 10                    6366 	.db #0x10	; 16
      00040F 1F                    6367 	.db #0x1f	; 31
      000410 14                    6368 	.db #0x14	; 20
      000411 14                    6369 	.db #0x14	; 20
      000412 14                    6370 	.db #0x14	; 20
      000413 F4                    6371 	.db #0xf4	; 244
      000414 14                    6372 	.db #0x14	; 20
      000415 10                    6373 	.db #0x10	; 16
      000416 10                    6374 	.db #0x10	; 16
      000417 F0                    6375 	.db #0xf0	; 240
      000418 10                    6376 	.db #0x10	; 16
      000419 F0                    6377 	.db #0xf0	; 240
      00041A 00                    6378 	.db #0x00	; 0
      00041B 00                    6379 	.db #0x00	; 0
      00041C 1F                    6380 	.db #0x1f	; 31
      00041D 10                    6381 	.db #0x10	; 16
      00041E 1F                    6382 	.db #0x1f	; 31
      00041F 00                    6383 	.db #0x00	; 0
      000420 00                    6384 	.db #0x00	; 0
      000421 00                    6385 	.db #0x00	; 0
      000422 1F                    6386 	.db #0x1f	; 31
      000423 14                    6387 	.db #0x14	; 20
      000424 00                    6388 	.db #0x00	; 0
      000425 00                    6389 	.db #0x00	; 0
      000426 00                    6390 	.db #0x00	; 0
      000427 FC                    6391 	.db #0xfc	; 252
      000428 14                    6392 	.db #0x14	; 20
      000429 00                    6393 	.db #0x00	; 0
      00042A 00                    6394 	.db #0x00	; 0
      00042B F0                    6395 	.db #0xf0	; 240
      00042C 10                    6396 	.db #0x10	; 16
      00042D F0                    6397 	.db #0xf0	; 240
      00042E 10                    6398 	.db #0x10	; 16
      00042F 10                    6399 	.db #0x10	; 16
      000430 FF                    6400 	.db #0xff	; 255
      000431 10                    6401 	.db #0x10	; 16
      000432 FF                    6402 	.db #0xff	; 255
      000433 14                    6403 	.db #0x14	; 20
      000434 14                    6404 	.db #0x14	; 20
      000435 14                    6405 	.db #0x14	; 20
      000436 FF                    6406 	.db #0xff	; 255
      000437 14                    6407 	.db #0x14	; 20
      000438 10                    6408 	.db #0x10	; 16
      000439 10                    6409 	.db #0x10	; 16
      00043A 10                    6410 	.db #0x10	; 16
      00043B 1F                    6411 	.db #0x1f	; 31
      00043C 00                    6412 	.db #0x00	; 0
      00043D 00                    6413 	.db #0x00	; 0
      00043E 00                    6414 	.db #0x00	; 0
      00043F 00                    6415 	.db #0x00	; 0
      000440 F0                    6416 	.db #0xf0	; 240
      000441 10                    6417 	.db #0x10	; 16
      000442 FF                    6418 	.db #0xff	; 255
      000443 FF                    6419 	.db #0xff	; 255
      000444 FF                    6420 	.db #0xff	; 255
      000445 FF                    6421 	.db #0xff	; 255
      000446 FF                    6422 	.db #0xff	; 255
      000447 F0                    6423 	.db #0xf0	; 240
      000448 F0                    6424 	.db #0xf0	; 240
      000449 F0                    6425 	.db #0xf0	; 240
      00044A F0                    6426 	.db #0xf0	; 240
      00044B F0                    6427 	.db #0xf0	; 240
      00044C FF                    6428 	.db #0xff	; 255
      00044D FF                    6429 	.db #0xff	; 255
      00044E FF                    6430 	.db #0xff	; 255
      00044F 00                    6431 	.db #0x00	; 0
      000450 00                    6432 	.db #0x00	; 0
      000451 00                    6433 	.db #0x00	; 0
      000452 00                    6434 	.db #0x00	; 0
      000453 00                    6435 	.db #0x00	; 0
      000454 FF                    6436 	.db #0xff	; 255
      000455 FF                    6437 	.db #0xff	; 255
      000456 0F                    6438 	.db #0x0f	; 15
      000457 0F                    6439 	.db #0x0f	; 15
      000458 0F                    6440 	.db #0x0f	; 15
      000459 0F                    6441 	.db #0x0f	; 15
      00045A 0F                    6442 	.db #0x0f	; 15
      00045B 38                    6443 	.db #0x38	; 56	'8'
      00045C 44                    6444 	.db #0x44	; 68	'D'
      00045D 44                    6445 	.db #0x44	; 68	'D'
      00045E 38                    6446 	.db #0x38	; 56	'8'
      00045F 44                    6447 	.db #0x44	; 68	'D'
      000460 FC                    6448 	.db #0xfc	; 252
      000461 4A                    6449 	.db #0x4a	; 74	'J'
      000462 4A                    6450 	.db #0x4a	; 74	'J'
      000463 4A                    6451 	.db #0x4a	; 74	'J'
      000464 34                    6452 	.db #0x34	; 52	'4'
      000465 7E                    6453 	.db #0x7e	; 126
      000466 02                    6454 	.db #0x02	; 2
      000467 02                    6455 	.db #0x02	; 2
      000468 06                    6456 	.db #0x06	; 6
      000469 06                    6457 	.db #0x06	; 6
      00046A 02                    6458 	.db #0x02	; 2
      00046B 7E                    6459 	.db #0x7e	; 126
      00046C 02                    6460 	.db #0x02	; 2
      00046D 7E                    6461 	.db #0x7e	; 126
      00046E 02                    6462 	.db #0x02	; 2
      00046F 63                    6463 	.db #0x63	; 99	'c'
      000470 55                    6464 	.db #0x55	; 85	'U'
      000471 49                    6465 	.db #0x49	; 73	'I'
      000472 41                    6466 	.db #0x41	; 65	'A'
      000473 63                    6467 	.db #0x63	; 99	'c'
      000474 38                    6468 	.db #0x38	; 56	'8'
      000475 44                    6469 	.db #0x44	; 68	'D'
      000476 44                    6470 	.db #0x44	; 68	'D'
      000477 3C                    6471 	.db #0x3c	; 60
      000478 04                    6472 	.db #0x04	; 4
      000479 40                    6473 	.db #0x40	; 64
      00047A 7E                    6474 	.db #0x7e	; 126
      00047B 20                    6475 	.db #0x20	; 32
      00047C 1E                    6476 	.db #0x1e	; 30
      00047D 20                    6477 	.db #0x20	; 32
      00047E 06                    6478 	.db #0x06	; 6
      00047F 02                    6479 	.db #0x02	; 2
      000480 7E                    6480 	.db #0x7e	; 126
      000481 02                    6481 	.db #0x02	; 2
      000482 02                    6482 	.db #0x02	; 2
      000483 99                    6483 	.db #0x99	; 153
      000484 A5                    6484 	.db #0xa5	; 165
      000485 E7                    6485 	.db #0xe7	; 231
      000486 A5                    6486 	.db #0xa5	; 165
      000487 99                    6487 	.db #0x99	; 153
      000488 1C                    6488 	.db #0x1c	; 28
      000489 2A                    6489 	.db #0x2a	; 42
      00048A 49                    6490 	.db #0x49	; 73	'I'
      00048B 2A                    6491 	.db #0x2a	; 42
      00048C 1C                    6492 	.db #0x1c	; 28
      00048D 4C                    6493 	.db #0x4c	; 76	'L'
      00048E 72                    6494 	.db #0x72	; 114	'r'
      00048F 01                    6495 	.db #0x01	; 1
      000490 72                    6496 	.db #0x72	; 114	'r'
      000491 4C                    6497 	.db #0x4c	; 76	'L'
      000492 30                    6498 	.db #0x30	; 48	'0'
      000493 4A                    6499 	.db #0x4a	; 74	'J'
      000494 4D                    6500 	.db #0x4d	; 77	'M'
      000495 4D                    6501 	.db #0x4d	; 77	'M'
      000496 30                    6502 	.db #0x30	; 48	'0'
      000497 30                    6503 	.db #0x30	; 48	'0'
      000498 48                    6504 	.db #0x48	; 72	'H'
      000499 78                    6505 	.db #0x78	; 120	'x'
      00049A 48                    6506 	.db #0x48	; 72	'H'
      00049B 30                    6507 	.db #0x30	; 48	'0'
      00049C BC                    6508 	.db #0xbc	; 188
      00049D 62                    6509 	.db #0x62	; 98	'b'
      00049E 5A                    6510 	.db #0x5a	; 90	'Z'
      00049F 46                    6511 	.db #0x46	; 70	'F'
      0004A0 3D                    6512 	.db #0x3d	; 61
      0004A1 3E                    6513 	.db #0x3e	; 62
      0004A2 49                    6514 	.db #0x49	; 73	'I'
      0004A3 49                    6515 	.db #0x49	; 73	'I'
      0004A4 49                    6516 	.db #0x49	; 73	'I'
      0004A5 00                    6517 	.db #0x00	; 0
      0004A6 7E                    6518 	.db #0x7e	; 126
      0004A7 01                    6519 	.db #0x01	; 1
      0004A8 01                    6520 	.db #0x01	; 1
      0004A9 01                    6521 	.db #0x01	; 1
      0004AA 7E                    6522 	.db #0x7e	; 126
      0004AB 2A                    6523 	.db #0x2a	; 42
      0004AC 2A                    6524 	.db #0x2a	; 42
      0004AD 2A                    6525 	.db #0x2a	; 42
      0004AE 2A                    6526 	.db #0x2a	; 42
      0004AF 2A                    6527 	.db #0x2a	; 42
      0004B0 44                    6528 	.db #0x44	; 68	'D'
      0004B1 44                    6529 	.db #0x44	; 68	'D'
      0004B2 5F                    6530 	.db #0x5f	; 95
      0004B3 44                    6531 	.db #0x44	; 68	'D'
      0004B4 44                    6532 	.db #0x44	; 68	'D'
      0004B5 40                    6533 	.db #0x40	; 64
      0004B6 51                    6534 	.db #0x51	; 81	'Q'
      0004B7 4A                    6535 	.db #0x4a	; 74	'J'
      0004B8 44                    6536 	.db #0x44	; 68	'D'
      0004B9 40                    6537 	.db #0x40	; 64
      0004BA 40                    6538 	.db #0x40	; 64
      0004BB 44                    6539 	.db #0x44	; 68	'D'
      0004BC 4A                    6540 	.db #0x4a	; 74	'J'
      0004BD 51                    6541 	.db #0x51	; 81	'Q'
      0004BE 40                    6542 	.db #0x40	; 64
      0004BF 00                    6543 	.db #0x00	; 0
      0004C0 00                    6544 	.db #0x00	; 0
      0004C1 FF                    6545 	.db #0xff	; 255
      0004C2 01                    6546 	.db #0x01	; 1
      0004C3 03                    6547 	.db #0x03	; 3
      0004C4 E0                    6548 	.db #0xe0	; 224
      0004C5 80                    6549 	.db #0x80	; 128
      0004C6 FF                    6550 	.db #0xff	; 255
      0004C7 00                    6551 	.db #0x00	; 0
      0004C8 00                    6552 	.db #0x00	; 0
      0004C9 08                    6553 	.db #0x08	; 8
      0004CA 08                    6554 	.db #0x08	; 8
      0004CB 6B                    6555 	.db #0x6b	; 107	'k'
      0004CC 6B                    6556 	.db #0x6b	; 107	'k'
      0004CD 08                    6557 	.db #0x08	; 8
      0004CE 36                    6558 	.db #0x36	; 54	'6'
      0004CF 12                    6559 	.db #0x12	; 18
      0004D0 36                    6560 	.db #0x36	; 54	'6'
      0004D1 24                    6561 	.db #0x24	; 36
      0004D2 36                    6562 	.db #0x36	; 54	'6'
      0004D3 06                    6563 	.db #0x06	; 6
      0004D4 0F                    6564 	.db #0x0f	; 15
      0004D5 09                    6565 	.db #0x09	; 9
      0004D6 0F                    6566 	.db #0x0f	; 15
      0004D7 06                    6567 	.db #0x06	; 6
      0004D8 00                    6568 	.db #0x00	; 0
      0004D9 00                    6569 	.db #0x00	; 0
      0004DA 18                    6570 	.db #0x18	; 24
      0004DB 18                    6571 	.db #0x18	; 24
      0004DC 00                    6572 	.db #0x00	; 0
      0004DD 00                    6573 	.db #0x00	; 0
      0004DE 00                    6574 	.db #0x00	; 0
      0004DF 10                    6575 	.db #0x10	; 16
      0004E0 10                    6576 	.db #0x10	; 16
      0004E1 00                    6577 	.db #0x00	; 0
      0004E2 30                    6578 	.db #0x30	; 48	'0'
      0004E3 40                    6579 	.db #0x40	; 64
      0004E4 FF                    6580 	.db #0xff	; 255
      0004E5 01                    6581 	.db #0x01	; 1
      0004E6 01                    6582 	.db #0x01	; 1
      0004E7 00                    6583 	.db #0x00	; 0
      0004E8 1F                    6584 	.db #0x1f	; 31
      0004E9 01                    6585 	.db #0x01	; 1
      0004EA 01                    6586 	.db #0x01	; 1
      0004EB 1E                    6587 	.db #0x1e	; 30
      0004EC 00                    6588 	.db #0x00	; 0
      0004ED 19                    6589 	.db #0x19	; 25
      0004EE 1D                    6590 	.db #0x1d	; 29
      0004EF 17                    6591 	.db #0x17	; 23
      0004F0 12                    6592 	.db #0x12	; 18
      0004F1 00                    6593 	.db #0x00	; 0
      0004F2 3C                    6594 	.db #0x3c	; 60
      0004F3 3C                    6595 	.db #0x3c	; 60
      0004F4 3C                    6596 	.db #0x3c	; 60
      0004F5 3C                    6597 	.db #0x3c	; 60
      0004F6 00                    6598 	.db #0x00	; 0
      0004F7 00                    6599 	.db #0x00	; 0
      0004F8 00                    6600 	.db #0x00	; 0
      0004F9 00                    6601 	.db #0x00	; 0
      0004FA 00                    6602 	.db #0x00	; 0
      0004FB                       6603 _keypad:
      0004FB 31                    6604 	.db #0x31	; 49	'1'
      0004FC 34                    6605 	.db #0x34	; 52	'4'
      0004FD 37                    6606 	.db #0x37	; 55	'7'
      0004FE 45                    6607 	.db #0x45	; 69	'E'
      0004FF 32                    6608 	.db #0x32	; 50	'2'
      000500 35                    6609 	.db #0x35	; 53	'5'
      000501 38                    6610 	.db #0x38	; 56	'8'
      000502 30                    6611 	.db #0x30	; 48	'0'
      000503 33                    6612 	.db #0x33	; 51	'3'
      000504 36                    6613 	.db #0x36	; 54	'6'
      000505 39                    6614 	.db #0x39	; 57	'9'
      000506 46                    6615 	.db #0x46	; 70	'F'
      000507 41                    6616 	.db #0x41	; 65	'A'
      000508 42                    6617 	.db #0x42	; 66	'B'
      000509 43                    6618 	.db #0x43	; 67	'C'
      00050A 44                    6619 	.db #0x44	; 68	'D'
                                   6620 	.area CONST   (CODE)
      00050B                       6621 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  6622 	.ascii "Welcome"
      000512 0A                    6623 	.db 0x0a
      000513 00                    6624 	.db 0x00
                                   6625 	.area CSEG    (CODE)
                                   6626 	.area CONST   (CODE)
      000514                       6627 ___str_1:
      000514 45 43 45 4E 2D 34 33  6628 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    6629 	.db 0x0a
      00051E 00                    6630 	.db 0x00
                                   6631 	.area CSEG    (CODE)
                                   6632 	.area CONST   (CODE)
      00051F                       6633 ___str_2:
      00051F 52 6F 74 61 74 69 6F  6634 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    6635 	.db 0x00
                                   6636 	.area CSEG    (CODE)
                                   6637 	.area CONST   (CODE)
      00052A                       6638 ___str_3:
      00052A 52 6F 74 61 74 69 6F  6639 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    6640 	.db 0x00
                                   6641 	.area CSEG    (CODE)
                                   6642 	.area CONST   (CODE)
      000535                       6643 ___str_4:
      000535 52 6F 74 61 74 69 6F  6644 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    6645 	.db 0x00
                                   6646 	.area CSEG    (CODE)
                                   6647 	.area CONST   (CODE)
      000540                       6648 ___str_5:
      000540 52 6F 74 61 74 69 6F  6649 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    6650 	.db 0x00
                                   6651 	.area CSEG    (CODE)
                                   6652 	.area CONST   (CODE)
      00054B                       6653 ___str_6:
      00054B 3A 20                 6654 	.ascii ": "
      00054D 00                    6655 	.db 0x00
                                   6656 	.area CSEG    (CODE)
                                   6657 	.area CONST   (CODE)
      00054E                       6658 ___str_7:
      00054E 45 6E 74 65 72 20 73  6659 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      000562 0A                    6660 	.db 0x0a
      000563 00                    6661 	.db 0x00
                                   6662 	.area CSEG    (CODE)
                                   6663 	.area CONST   (CODE)
      000564                       6664 ___str_8:
      000564 45 6E 74 65 72 20 64  6665 	.ascii "Enter data type"
             61 74 61 20 74 79 70
             65
      000573 0A                    6666 	.db 0x0a
      000574 00                    6667 	.db 0x00
                                   6668 	.area CSEG    (CODE)
                                   6669 	.area CONST   (CODE)
      000575                       6670 ___str_9:
      000575 42 2D 42 79 74 65 2C  6671 	.ascii "B-Byte, A-Word,"
             20 41 2D 57 6F 72 64
             2C
      000584 0A                    6672 	.db 0x0a
      000585 00                    6673 	.db 0x00
                                   6674 	.area CSEG    (CODE)
                                   6675 	.area CONST   (CODE)
      000586                       6676 ___str_10:
      000586 44 2D 44 6F 75 62 6C  6677 	.ascii "D-Double word"
             65 20 77 6F 72 64
      000593 0A                    6678 	.db 0x0a
      000594 00                    6679 	.db 0x00
                                   6680 	.area CSEG    (CODE)
                                   6681 	.area CONST   (CODE)
      000595                       6682 ___str_11:
      000595 42 79 74 65           6683 	.ascii "Byte"
      000599 0A                    6684 	.db 0x0a
      00059A 00                    6685 	.db 0x00
                                   6686 	.area CSEG    (CODE)
                                   6687 	.area CONST   (CODE)
      00059B                       6688 ___str_12:
      00059B 57 6F 72 64           6689 	.ascii "Word"
      00059F 0A                    6690 	.db 0x0a
      0005A0 00                    6691 	.db 0x00
                                   6692 	.area CSEG    (CODE)
                                   6693 	.area CONST   (CODE)
      0005A1                       6694 ___str_13:
      0005A1 44 6F 75 62 6C 65 20  6695 	.ascii "Double word"
             77 6F 72 64
      0005AC 0A                    6696 	.db 0x0a
      0005AD 00                    6697 	.db 0x00
                                   6698 	.area CSEG    (CODE)
                                   6699 	.area CONST   (CODE)
      0005AE                       6700 ___str_14:
      0005AE 45 6E 74 65 72 20 62  6701 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0005BF 0A                    6702 	.db 0x0a
      0005C0 00                    6703 	.db 0x00
                                   6704 	.area CSEG    (CODE)
                                   6705 	.area CONST   (CODE)
      0005C1                       6706 ___str_15:
      0005C1 50 72 65 73 73 20 42  6707 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0005D1 0A                    6708 	.db 0x0a
      0005D2 00                    6709 	.db 0x00
                                   6710 	.area CSEG    (CODE)
                                   6711 	.area CONST   (CODE)
      0005D3                       6712 ___str_16:
      0005D3 50 72 65 73 73 20 41  6713 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0005E7 0A                    6714 	.db 0x0a
      0005E8 00                    6715 	.db 0x00
                                   6716 	.area CSEG    (CODE)
                                   6717 	.area CONST   (CODE)
      0005E9                       6718 ___str_17:
      0005E9 50 72 65 73 73 20 41  6719 	.ascii "Press A for previous, B for next"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73 2C
             20 42 20 66 6F 72 20
             6E 65 78 74
      000609 0A                    6720 	.db 0x0a
      00060A 00                    6721 	.db 0x00
                                   6722 	.area CSEG    (CODE)
                                   6723 	.area CONST   (CODE)
      00060B                       6724 ___str_18:
      00060B 50 72 65 73 73 20 31  6725 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00061B 00                    6726 	.db 0x00
                                   6727 	.area CSEG    (CODE)
                                   6728 	.area CONST   (CODE)
      00061C                       6729 ___str_19:
      00061C 45 6E 74 65 72 20 62  6730 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00062F 0A                    6731 	.db 0x0a
      000630 00                    6732 	.db 0x00
                                   6733 	.area CSEG    (CODE)
                                   6734 	.area CONST   (CODE)
      000631                       6735 ___str_20:
      000631 49 6E 20 70 72 6F 67  6736 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00063F 0A                    6737 	.db 0x0a
      000640 00                    6738 	.db 0x00
                                   6739 	.area CSEG    (CODE)
                                   6740 	.area CONST   (CODE)
      000641                       6741 ___str_21:
      000641 4D 65 6D 6F 72 79 20  6742 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000654 0A                    6743 	.db 0x0a
      000655 00                    6744 	.db 0x00
                                   6745 	.area CSEG    (CODE)
                                   6746 	.area CONST   (CODE)
      000656                       6747 ___str_22:
      000656 53 75 63 63 65 73 73  6748 	.ascii "Success!"
             21
      00065E 0A                    6749 	.db 0x0a
      00065F 00                    6750 	.db 0x00
                                   6751 	.area CSEG    (CODE)
                                   6752 	.area CONST   (CODE)
      000660                       6753 ___str_23:
      000660 45 6E 74 65 72 20 62  6754 	.ascii "Enter byte"
             79 74 65
      00066A 0A                    6755 	.db 0x0a
      00066B 00                    6756 	.db 0x00
                                   6757 	.area CSEG    (CODE)
                                   6758 	.area CONST   (CODE)
      00066C                       6759 ___str_24:
      00066C 45 6E 74 65 72 20 61  6760 	.ascii "Enter address"
             64 64 72 65 73 73
      000679 0A                    6761 	.db 0x0a
      00067A 00                    6762 	.db 0x00
                                   6763 	.area CSEG    (CODE)
                                   6764 	.area CONST   (CODE)
      00067B                       6765 ___str_25:
      00067B 49 6E 20 70 72 6F 67  6766 	.ascii "In progress"
             72 65 73 73
      000686 0A                    6767 	.db 0x0a
      000687 00                    6768 	.db 0x00
                                   6769 	.area CSEG    (CODE)
                                   6770 	.area CONST   (CODE)
      000688                       6771 ___str_26:
      000688 20 66 65 74 63 68 65  6772 	.ascii " fetched!"
             64 21
      000691 0A                    6773 	.db 0x0a
      000692 53 75 63 63 65 73 73  6774 	.ascii "Success!"
             21
      00069A 0A                    6775 	.db 0x0a
      00069B 00                    6776 	.db 0x00
                                   6777 	.area CSEG    (CODE)
                                   6778 	.area CONST   (CODE)
      00069C                       6779 ___str_27:
      00069C 43 68 65 63 6B 20 66  6780 	.ascii "Check failed"
             61 69 6C 65 64
      0006A8 0A                    6781 	.db 0x0a
      0006A9 00                    6782 	.db 0x00
                                   6783 	.area CSEG    (CODE)
                                   6784 	.area CONST   (CODE)
      0006AA                       6785 ___str_28:
      0006AA 50 72 65 73 73 20 31  6786 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0006BA 0A                    6787 	.db 0x0a
      0006BB 00                    6788 	.db 0x00
                                   6789 	.area CSEG    (CODE)
                                   6790 	.area CONST   (CODE)
      0006BC                       6791 ___str_29:
      0006BC 45 6E 74 65 72 20 73  6792 	.ascii "Enter start add."
             74 61 72 74 20 61 64
             64 2E
      0006CC 0A                    6793 	.db 0x0a
      0006CD 00                    6794 	.db 0x00
                                   6795 	.area CSEG    (CODE)
                                   6796 	.area CONST   (CODE)
      0006CE                       6797 ___str_30:
      0006CE 45 6E 74 65 72 20 73  6798 	.ascii "Enter size"
             69 7A 65
      0006D8 0A                    6799 	.db 0x0a
      0006D9 00                    6800 	.db 0x00
                                   6801 	.area CSEG    (CODE)
                                   6802 	.area CONST   (CODE)
      0006DA                       6803 ___str_31:
      0006DA 45 6E 74 65 72 20 74  6804 	.ascii "Enter target add."
             61 72 67 65 74 20 61
             64 64 2E
      0006EB 0A                    6805 	.db 0x0a
      0006EC 00                    6806 	.db 0x00
                                   6807 	.area CSEG    (CODE)
                                   6808 	.area CONST   (CODE)
      0006ED                       6809 ___str_32:
      0006ED 4D 6F 76 65 20 69 6E  6810 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      000700 0A                    6811 	.db 0x0a
      000701 00                    6812 	.db 0x00
                                   6813 	.area CSEG    (CODE)
                                   6814 	.area CONST   (CODE)
      000702                       6815 ___str_33:
      000702 44 6F 6E 65 21        6816 	.ascii "Done!"
      000707 0A                    6817 	.db 0x0a
      000708 00                    6818 	.db 0x00
                                   6819 	.area CSEG    (CODE)
                                   6820 	.area CONST   (CODE)
      000709                       6821 ___str_34:
      000709 45 6E 74 65 72 20 6E  6822 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      000718 0A                    6823 	.db 0x0a
      000719 00                    6824 	.db 0x00
                                   6825 	.area CSEG    (CODE)
                                   6826 	.area CONST   (CODE)
      00071A                       6827 ___str_35:
      00071A 45 6E 74 65 72 20 61  6828 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      000728 0A                    6829 	.db 0x0a
      000729 00                    6830 	.db 0x00
                                   6831 	.area CSEG    (CODE)
                                   6832 	.area CONST   (CODE)
      00072A                       6833 ___str_36:
      00072A 50 72 65 73 73 20 32  6834 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      00073F 0A                    6835 	.db 0x0a
      000740 00                    6836 	.db 0x00
                                   6837 	.area CSEG    (CODE)
                                   6838 	.area CONST   (CODE)
      000741                       6839 ___str_37:
      000741 50 72 65 73 73 20 33  6840 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      00075D 0A                    6841 	.db 0x0a
      00075E 00                    6842 	.db 0x00
                                   6843 	.area CSEG    (CODE)
                                   6844 	.area CONST   (CODE)
      00075F                       6845 ___str_38:
      00075F 45 6E 74 65 72 20 62  6846 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      000773 0A                    6847 	.db 0x0a
      000774 00                    6848 	.db 0x00
                                   6849 	.area CSEG    (CODE)
                                   6850 	.area CONST   (CODE)
      000775                       6851 ___str_39:
      000775 54 65 6D 70 65 72 61  6852 	.ascii "Temperature: "
             74 75 72 65 3A 20
      000782 00                    6853 	.db 0x00
                                   6854 	.area CSEG    (CODE)
                                   6855 	.area CONST   (CODE)
      000783                       6856 ___str_40:
      000783 50 72 65 73 73 20 30  6857 	.ascii "Press 0 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      000793 0A                    6858 	.db 0x0a
      000794 00                    6859 	.db 0x00
                                   6860 	.area CSEG    (CODE)
                                   6861 	.area CONST   (CODE)
      000795                       6862 ___str_41:
      000795 4C 69 67 68 74 20 6C  6863 	.ascii "Light level: "
             65 76 65 6C 3A 20
      0007A2 00                    6864 	.db 0x00
                                   6865 	.area CSEG    (CODE)
                                   6866 	.area CONST   (CODE)
      0007A3                       6867 ___str_42:
      0007A3 42 72 61 6E 64 6F 6E  6868 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      0007B0 0A                    6869 	.db 0x0a
      0007B1 00                    6870 	.db 0x00
                                   6871 	.area CSEG    (CODE)
                                   6872 	.area CONST   (CODE)
      0007B2                       6873 ___str_43:
      0007B2 45 43 45 4E 20 34 33  6874 	.ascii "ECEN 4330"
             33 30
      0007BB 0A                    6875 	.db 0x0a
      0007BC 00                    6876 	.db 0x00
                                   6877 	.area CSEG    (CODE)
                                   6878 	.area CONST   (CODE)
      0007BD                       6879 ___str_44:
      0007BD 31 3A 20 42 61 73 69  6880 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      0007CB 0A                    6881 	.db 0x0a
      0007CC 00                    6882 	.db 0x00
                                   6883 	.area CSEG    (CODE)
                                   6884 	.area CONST   (CODE)
      0007CD                       6885 ___str_45:
      0007CD 32 3A 20 44 75 6D 70  6886 	.ascii "2: Dump"
      0007D4 0A                    6887 	.db 0x0a
      0007D5 00                    6888 	.db 0x00
                                   6889 	.area CSEG    (CODE)
                                   6890 	.area CONST   (CODE)
      0007D6                       6891 ___str_46:
      0007D6 33 3A 20 43 68 65 63  6892 	.ascii "3: Check"
             6B
      0007DE 0A                    6893 	.db 0x0a
      0007DF 00                    6894 	.db 0x00
                                   6895 	.area CSEG    (CODE)
                                   6896 	.area CONST   (CODE)
      0007E0                       6897 ___str_47:
      0007E0 41 3A 20 4D 6F 76 65  6898 	.ascii "A: Move"
      0007E7 0A                    6899 	.db 0x0a
      0007E8 00                    6900 	.db 0x00
                                   6901 	.area CSEG    (CODE)
                                   6902 	.area CONST   (CODE)
      0007E9                       6903 ___str_48:
      0007E9 34 3A 20 45 64 69 74  6904 	.ascii "4: Edit"
      0007F0 0A                    6905 	.db 0x0a
      0007F1 00                    6906 	.db 0x00
                                   6907 	.area CSEG    (CODE)
                                   6908 	.area CONST   (CODE)
      0007F2                       6909 ___str_49:
      0007F2 35 3A 20 46 69 6E 64  6910 	.ascii "5: Find"
      0007F9 0A                    6911 	.db 0x0a
      0007FA 00                    6912 	.db 0x00
                                   6913 	.area CSEG    (CODE)
                                   6914 	.area CONST   (CODE)
      0007FB                       6915 ___str_50:
      0007FB 36 3A 20 43 6F 75 6E  6916 	.ascii "6: Count"
             74
      000803 0A                    6917 	.db 0x0a
      000804 00                    6918 	.db 0x00
                                   6919 	.area CSEG    (CODE)
                                   6920 	.area CONST   (CODE)
      000805                       6921 ___str_51:
      000805 42 3A 20 54 65 6D 70  6922 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      000813 0A                    6923 	.db 0x0a
      000814 00                    6924 	.db 0x00
                                   6925 	.area CSEG    (CODE)
                                   6926 	.area CONST   (CODE)
      000815                       6927 ___str_52:
      000815 37 3A 20 4C 69 67 68  6928 	.ascii "7: Light"
             74
      00081D 0A                    6929 	.db 0x0a
      00081E 00                    6930 	.db 0x00
                                   6931 	.area CSEG    (CODE)
                                   6932 	.area XINIT   (CODE)
                                   6933 	.area CABS    (ABS,CODE)
