                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _main
                                     20 	.globl _menu
                                     21 	.globl _basic
                                     22 	.globl _check
                                     23 	.globl _getByte
                                     24 	.globl _getAddress
                                     25 	.globl _writeSomeLines
                                     26 	.globl _convertAsciiHex
                                     27 	.globl _write
                                     28 	.globl _drawChar
                                     29 	.globl _setRotation
                                     30 	.globl _iowrite8
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _F1
                                     38 	.globl _P
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _B
                                    107 	.globl _ACC
                                    108 	.globl _PSW
                                    109 	.globl _IP
                                    110 	.globl _P3
                                    111 	.globl _IE
                                    112 	.globl _P2
                                    113 	.globl _SBUF
                                    114 	.globl _SCON
                                    115 	.globl _P1
                                    116 	.globl _TH1
                                    117 	.globl _TH0
                                    118 	.globl _TL1
                                    119 	.globl _TL0
                                    120 	.globl _TMOD
                                    121 	.globl _TCON
                                    122 	.globl _PCON
                                    123 	.globl _DPH
                                    124 	.globl _DPL
                                    125 	.globl _SP
                                    126 	.globl _P0
                                    127 	.globl _drawChar_PARM_6
                                    128 	.globl _drawChar_PARM_5
                                    129 	.globl _drawChar_PARM_4
                                    130 	.globl _drawChar_PARM_3
                                    131 	.globl _drawChar_PARM_2
                                    132 	.globl _fillRect_PARM_5
                                    133 	.globl _fillRect_PARM_4
                                    134 	.globl _fillRect_PARM_3
                                    135 	.globl _fillRect_PARM_2
                                    136 	.globl _testCircles_PARM_2
                                    137 	.globl _drawCircle_PARM_4
                                    138 	.globl _drawCircle_PARM_3
                                    139 	.globl _drawCircle_PARM_2
                                    140 	.globl _drawPixel_PARM_3
                                    141 	.globl _drawPixel_PARM_2
                                    142 	.globl __height
                                    143 	.globl __width
                                    144 	.globl _textbgcolor
                                    145 	.globl _textcolor
                                    146 	.globl _rotation
                                    147 	.globl _textsize
                                    148 	.globl _cursor_y
                                    149 	.globl _cursor_x
                                    150 	.globl _read_ram_address
                                    151 	.globl _seg7_address
                                    152 	.globl _lcd_address
                                    153 	.globl _rowloc
                                    154 	.globl _colloc
                                    155 	.globl _keypad
                                    156 	.globl _delay
                                    157 	.globl _writeRegister8
                                    158 	.globl _writeRegister16
                                    159 	.globl _setCursor
                                    160 	.globl _setTextColor
                                    161 	.globl _setTextSize
                                    162 	.globl _setAddress
                                    163 	.globl _TFT_LCD_INIT
                                    164 	.globl _drawPixel
                                    165 	.globl _drawCircle
                                    166 	.globl _testCircles
                                    167 	.globl _fillRect
                                    168 	.globl _fillScreen
                                    169 	.globl _LCD_string_write
                                    170 	.globl _testRAM
                                    171 	.globl _freeType
                                    172 	.globl _keyDetect
                                    173 	.globl _reverse
                                    174 	.globl _asciiToDec
                                    175 	.globl _asciiToHex
                                    176 ;--------------------------------------------------------
                                    177 ; special function registers
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0	=	0x0080
                           000081   182 _SP	=	0x0081
                           000082   183 _DPL	=	0x0082
                           000083   184 _DPH	=	0x0083
                           000087   185 _PCON	=	0x0087
                           000088   186 _TCON	=	0x0088
                           000089   187 _TMOD	=	0x0089
                           00008A   188 _TL0	=	0x008a
                           00008B   189 _TL1	=	0x008b
                           00008C   190 _TH0	=	0x008c
                           00008D   191 _TH1	=	0x008d
                           000090   192 _P1	=	0x0090
                           000098   193 _SCON	=	0x0098
                           000099   194 _SBUF	=	0x0099
                           0000A0   195 _P2	=	0x00a0
                           0000A8   196 _IE	=	0x00a8
                           0000B0   197 _P3	=	0x00b0
                           0000B8   198 _IP	=	0x00b8
                           0000D0   199 _PSW	=	0x00d0
                           0000E0   200 _ACC	=	0x00e0
                           0000F0   201 _B	=	0x00f0
                                    202 ;--------------------------------------------------------
                                    203 ; special function bits
                                    204 ;--------------------------------------------------------
                                    205 	.area RSEG    (ABS,DATA)
      000000                        206 	.org 0x0000
                           000080   207 _P0_0	=	0x0080
                           000081   208 _P0_1	=	0x0081
                           000082   209 _P0_2	=	0x0082
                           000083   210 _P0_3	=	0x0083
                           000084   211 _P0_4	=	0x0084
                           000085   212 _P0_5	=	0x0085
                           000086   213 _P0_6	=	0x0086
                           000087   214 _P0_7	=	0x0087
                           000088   215 _IT0	=	0x0088
                           000089   216 _IE0	=	0x0089
                           00008A   217 _IT1	=	0x008a
                           00008B   218 _IE1	=	0x008b
                           00008C   219 _TR0	=	0x008c
                           00008D   220 _TF0	=	0x008d
                           00008E   221 _TR1	=	0x008e
                           00008F   222 _TF1	=	0x008f
                           000090   223 _P1_0	=	0x0090
                           000091   224 _P1_1	=	0x0091
                           000092   225 _P1_2	=	0x0092
                           000093   226 _P1_3	=	0x0093
                           000094   227 _P1_4	=	0x0094
                           000095   228 _P1_5	=	0x0095
                           000096   229 _P1_6	=	0x0096
                           000097   230 _P1_7	=	0x0097
                           000098   231 _RI	=	0x0098
                           000099   232 _TI	=	0x0099
                           00009A   233 _RB8	=	0x009a
                           00009B   234 _TB8	=	0x009b
                           00009C   235 _REN	=	0x009c
                           00009D   236 _SM2	=	0x009d
                           00009E   237 _SM1	=	0x009e
                           00009F   238 _SM0	=	0x009f
                           0000A0   239 _P2_0	=	0x00a0
                           0000A1   240 _P2_1	=	0x00a1
                           0000A2   241 _P2_2	=	0x00a2
                           0000A3   242 _P2_3	=	0x00a3
                           0000A4   243 _P2_4	=	0x00a4
                           0000A5   244 _P2_5	=	0x00a5
                           0000A6   245 _P2_6	=	0x00a6
                           0000A7   246 _P2_7	=	0x00a7
                           0000A8   247 _EX0	=	0x00a8
                           0000A9   248 _ET0	=	0x00a9
                           0000AA   249 _EX1	=	0x00aa
                           0000AB   250 _ET1	=	0x00ab
                           0000AC   251 _ES	=	0x00ac
                           0000AF   252 _EA	=	0x00af
                           0000B0   253 _P3_0	=	0x00b0
                           0000B1   254 _P3_1	=	0x00b1
                           0000B2   255 _P3_2	=	0x00b2
                           0000B3   256 _P3_3	=	0x00b3
                           0000B4   257 _P3_4	=	0x00b4
                           0000B5   258 _P3_5	=	0x00b5
                           0000B6   259 _P3_6	=	0x00b6
                           0000B7   260 _P3_7	=	0x00b7
                           0000B0   261 _RXD	=	0x00b0
                           0000B1   262 _TXD	=	0x00b1
                           0000B2   263 _INT0	=	0x00b2
                           0000B3   264 _INT1	=	0x00b3
                           0000B4   265 _T0	=	0x00b4
                           0000B5   266 _T1	=	0x00b5
                           0000B6   267 _WR	=	0x00b6
                           0000B7   268 _RD	=	0x00b7
                           0000B8   269 _PX0	=	0x00b8
                           0000B9   270 _PT0	=	0x00b9
                           0000BA   271 _PX1	=	0x00ba
                           0000BB   272 _PT1	=	0x00bb
                           0000BC   273 _PS	=	0x00bc
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _F1	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area DSEG    (DATA)
      000000                        291 _keypad::
      000000                        292 	.ds 16
      000010                        293 _colloc::
      000010                        294 	.ds 1
      000011                        295 _rowloc::
      000011                        296 	.ds 1
      000012                        297 _lcd_address::
      000012                        298 	.ds 2
      000014                        299 _seg7_address::
      000014                        300 	.ds 2
      000016                        301 _read_ram_address::
      000016                        302 	.ds 2
      000018                        303 _cursor_x::
      000018                        304 	.ds 2
      00001A                        305 _cursor_y::
      00001A                        306 	.ds 2
      00001C                        307 _textsize::
      00001C                        308 	.ds 1
      00001D                        309 _rotation::
      00001D                        310 	.ds 1
      00001E                        311 _textcolor::
      00001E                        312 	.ds 2
      000020                        313 _textbgcolor::
      000020                        314 	.ds 2
      000022                        315 __width::
      000022                        316 	.ds 2
      000024                        317 __height::
      000024                        318 	.ds 2
      000026                        319 _drawPixel_PARM_2:
      000026                        320 	.ds 2
      000028                        321 _drawPixel_PARM_3:
      000028                        322 	.ds 2
      00002A                        323 _drawCircle_PARM_2:
      00002A                        324 	.ds 2
      00002C                        325 _drawCircle_PARM_3:
      00002C                        326 	.ds 2
      00002E                        327 _drawCircle_PARM_4:
      00002E                        328 	.ds 2
      000030                        329 _drawCircle_x0_65536_103:
      000030                        330 	.ds 2
      000032                        331 _drawCircle_f_65536_104:
      000032                        332 	.ds 2
      000034                        333 _drawCircle_ddF_x_65536_104:
      000034                        334 	.ds 2
      000036                        335 _drawCircle_x_65536_104:
      000036                        336 	.ds 2
      000038                        337 _drawCircle_sloc0_1_0:
      000038                        338 	.ds 2
      00003A                        339 _drawCircle_sloc1_1_0:
      00003A                        340 	.ds 2
      00003C                        341 _drawCircle_sloc2_1_0:
      00003C                        342 	.ds 2
      00003E                        343 _testCircles_PARM_2:
      00003E                        344 	.ds 2
      000040                        345 _testCircles_w_65536_108:
      000040                        346 	.ds 2
      000042                        347 _testCircles_h_65536_108:
      000042                        348 	.ds 2
      000044                        349 _fillRect_PARM_2:
      000044                        350 	.ds 2
      000046                        351 _fillRect_PARM_3:
      000046                        352 	.ds 2
      000048                        353 _fillRect_PARM_4:
      000048                        354 	.ds 2
      00004A                        355 _fillRect_PARM_5:
      00004A                        356 	.ds 2
      00004C                        357 _drawChar_PARM_2:
      00004C                        358 	.ds 2
      00004E                        359 _drawChar_PARM_3:
      00004E                        360 	.ds 1
      00004F                        361 _drawChar_PARM_4:
      00004F                        362 	.ds 2
      000051                        363 _drawChar_PARM_5:
      000051                        364 	.ds 2
      000053                        365 _drawChar_PARM_6:
      000053                        366 	.ds 1
      000054                        367 _drawChar_i_65537_149:
      000054                        368 	.ds 1
      000055                        369 _drawChar_line_196609_151:
      000055                        370 	.ds 1
      000056                        371 _drawChar_j_196610_154:
      000056                        372 	.ds 1
      000057                        373 _drawChar_sloc1_1_0:
      000057                        374 	.ds 2
      000059                        375 _drawChar_sloc2_1_0:
      000059                        376 	.ds 2
      00005B                        377 _asciiToHex_store_65536_200:
      00005B                        378 	.ds 2
                                    379 ;--------------------------------------------------------
                                    380 ; overlayable items in internal ram
                                    381 ;--------------------------------------------------------
                                    382 	.area	OSEG    (OVR,DATA)
      000000                        383 _iowrite8_PARM_2:
      000000                        384 	.ds 1
                                    385 	.area	OSEG    (OVR,DATA)
                                    386 	.area	OSEG    (OVR,DATA)
      000000                        387 _writeRegister8_PARM_2:
      000000                        388 	.ds 1
                                    389 	.area	OSEG    (OVR,DATA)
      000000                        390 _writeRegister16_PARM_2:
      000000                        391 	.ds 2
                                    392 	.area	OSEG    (OVR,DATA)
      000000                        393 _setCursor_PARM_2:
      000000                        394 	.ds 2
                                    395 	.area	OSEG    (OVR,DATA)
      000000                        396 _setTextColor_PARM_2:
      000000                        397 	.ds 2
                                    398 	.area	OSEG    (OVR,DATA)
                                    399 	.area	OSEG    (OVR,DATA)
      000000                        400 _setAddress_PARM_2:
      000000                        401 	.ds 2
      000002                        402 _setAddress_PARM_3:
      000002                        403 	.ds 2
      000004                        404 _setAddress_PARM_4:
      000004                        405 	.ds 2
                                    406 	.area	OSEG    (OVR,DATA)
                                    407 	.area	OSEG    (OVR,DATA)
                                    408 ;--------------------------------------------------------
                                    409 ; Stack segment in internal ram
                                    410 ;--------------------------------------------------------
                                    411 	.area	SSEG
      000000                        412 __start__stack:
      000000                        413 	.ds	1
                                    414 
                                    415 ;--------------------------------------------------------
                                    416 ; indirectly addressable internal ram data
                                    417 ;--------------------------------------------------------
                                    418 	.area ISEG    (DATA)
                                    419 ;--------------------------------------------------------
                                    420 ; absolute internal ram data
                                    421 ;--------------------------------------------------------
                                    422 	.area IABS    (ABS,DATA)
                                    423 	.area IABS    (ABS,DATA)
                                    424 ;--------------------------------------------------------
                                    425 ; bit data
                                    426 ;--------------------------------------------------------
                                    427 	.area BSEG    (BIT)
      000000                        428 _drawChar_sloc0_1_0:
      000000                        429 	.ds 1
      000001                        430 _convertAsciiHex_sloc0_1_0:
      000001                        431 	.ds 1
                                    432 ;--------------------------------------------------------
                                    433 ; paged external ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area PSEG    (PAG,XDATA)
                                    436 ;--------------------------------------------------------
                                    437 ; external ram data
                                    438 ;--------------------------------------------------------
                                    439 	.area XSEG    (XDATA)
      000000                        440 _check_checker_65537_214:
      000000                        441 	.ds 1
      000001                        442 _check_error_65537_214:
      000001                        443 	.ds 1
                                    444 ;--------------------------------------------------------
                                    445 ; absolute external ram data
                                    446 ;--------------------------------------------------------
                                    447 	.area XABS    (ABS,XDATA)
                                    448 ;--------------------------------------------------------
                                    449 ; external initialized ram data
                                    450 ;--------------------------------------------------------
                                    451 	.area XISEG   (XDATA)
                                    452 	.area HOME    (CODE)
                                    453 	.area GSINIT0 (CODE)
                                    454 	.area GSINIT1 (CODE)
                                    455 	.area GSINIT2 (CODE)
                                    456 	.area GSINIT3 (CODE)
                                    457 	.area GSINIT4 (CODE)
                                    458 	.area GSINIT5 (CODE)
                                    459 	.area GSINIT  (CODE)
                                    460 	.area GSFINAL (CODE)
                                    461 	.area CSEG    (CODE)
                                    462 ;--------------------------------------------------------
                                    463 ; interrupt vector
                                    464 ;--------------------------------------------------------
                                    465 	.area HOME    (CODE)
      000000                        466 __interrupt_vect:
      000000 02r00r00         [24]  467 	ljmp	__sdcc_gsinit_startup
                                    468 ;--------------------------------------------------------
                                    469 ; global & static initialisations
                                    470 ;--------------------------------------------------------
                                    471 	.area HOME    (CODE)
                                    472 	.area GSINIT  (CODE)
                                    473 	.area GSFINAL (CODE)
                                    474 	.area GSINIT  (CODE)
                                    475 	.globl __sdcc_gsinit_startup
                                    476 	.globl __sdcc_program_startup
                                    477 	.globl __start__stack
                                    478 	.globl __mcs51_genXINIT
                                    479 	.globl __mcs51_genXRAMCLEAR
                                    480 	.globl __mcs51_genRAMCLEAR
                                    481 ;	ecen4330_lcd_v3.c:4: uint8_t keypad[4][4] =	{{'1','4','7','E'},
      000000 75*00 31         [24]  482 	mov	_keypad,#0x31
      000003 75*01 34         [24]  483 	mov	(_keypad + 0x0001),#0x34
      000006 75*02 37         [24]  484 	mov	(_keypad + 0x0002),#0x37
      000009 75*03 45         [24]  485 	mov	(_keypad + 0x0003),#0x45
      00000C 75*04 32         [24]  486 	mov	(_keypad + 0x0004),#0x32
      00000F 75*05 35         [24]  487 	mov	(_keypad + 0x0005),#0x35
      000012 75*06 38         [24]  488 	mov	(_keypad + 0x0006),#0x38
      000015 75*07 30         [24]  489 	mov	(_keypad + 0x0007),#0x30
      000018 75*08 33         [24]  490 	mov	(_keypad + 0x0008),#0x33
      00001B 75*09 36         [24]  491 	mov	(_keypad + 0x0009),#0x36
      00001E 75*0A 39         [24]  492 	mov	(_keypad + 0x000a),#0x39
      000021 75*0B 46         [24]  493 	mov	(_keypad + 0x000b),#0x46
      000024 75*0C 41         [24]  494 	mov	(_keypad + 0x000c),#0x41
      000027 75*0D 42         [24]  495 	mov	(_keypad + 0x000d),#0x42
      00002A 75*0E 43         [24]  496 	mov	(_keypad + 0x000e),#0x43
      00002D 75*0F 44         [24]  497 	mov	(_keypad + 0x000f),#0x44
                                    498 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000030 75*12 00         [24]  499 	mov	_lcd_address,#0x00
      000033 75*13 40         [24]  500 	mov	(_lcd_address + 1),#0x40
                                    501 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000036 75*14 00         [24]  502 	mov	_seg7_address,#0x00
      000039 75*15 80         [24]  503 	mov	(_seg7_address + 1),#0x80
                                    504 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  505 	ljmp	__sdcc_program_startup
                                    506 ;--------------------------------------------------------
                                    507 ; Home
                                    508 ;--------------------------------------------------------
                                    509 	.area HOME    (CODE)
                                    510 	.area HOME    (CODE)
      000003                        511 __sdcc_program_startup:
      000003 02r11rE9         [24]  512 	ljmp	_main
                                    513 ;	return from main will return to caller
                                    514 ;--------------------------------------------------------
                                    515 ; code
                                    516 ;--------------------------------------------------------
                                    517 	.area CSEG    (CODE)
                                    518 ;------------------------------------------------------------
                                    519 ;Allocation info for local variables in function 'iowrite8'
                                    520 ;------------------------------------------------------------
                                    521 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    522 ;map_address               Allocated to registers r6 r7 
                                    523 ;------------------------------------------------------------
                                    524 ;	ecen4330_lcd_v3.c:48: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    525 ;	-----------------------------------------
                                    526 ;	 function iowrite8
                                    527 ;	-----------------------------------------
      000000                        528 _iowrite8:
                           000007   529 	ar7 = 0x07
                           000006   530 	ar6 = 0x06
                           000005   531 	ar5 = 0x05
                           000004   532 	ar4 = 0x04
                           000003   533 	ar3 = 0x03
                           000002   534 	ar2 = 0x02
                           000001   535 	ar1 = 0x01
                           000000   536 	ar0 = 0x00
      000000 AE 82            [24]  537 	mov	r6,dpl
      000002 AF 83            [24]  538 	mov	r7,dph
                                    539 ;	ecen4330_lcd_v3.c:49: IOM = 1;
                                    540 ;	assignBit
      000004 D2 B4            [12]  541 	setb	_P3_4
                                    542 ;	ecen4330_lcd_v3.c:50: *map_address = d;
      000006 8E 82            [24]  543 	mov	dpl,r6
      000008 8F 83            [24]  544 	mov	dph,r7
      00000A E5*00            [12]  545 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  546 	movx	@dptr,a
                                    547 ;	ecen4330_lcd_v3.c:51: IOM = 0;
                                    548 ;	assignBit
      00000D C2 B4            [12]  549 	clr	_P3_4
                                    550 ;	ecen4330_lcd_v3.c:52: }
      00000F 22               [24]  551 	ret
                                    552 ;------------------------------------------------------------
                                    553 ;Allocation info for local variables in function 'delay'
                                    554 ;------------------------------------------------------------
                                    555 ;d                         Allocated to registers r6 r7 
                                    556 ;i                         Allocated to registers r4 r5 
                                    557 ;j                         Allocated to registers r2 r3 
                                    558 ;------------------------------------------------------------
                                    559 ;	ecen4330_lcd_v3.c:56: void delay (int16_t d)
                                    560 ;	-----------------------------------------
                                    561 ;	 function delay
                                    562 ;	-----------------------------------------
      000010                        563 _delay:
      000010 AE 82            [24]  564 	mov	r6,dpl
      000012 AF 83            [24]  565 	mov	r7,dph
                                    566 ;	ecen4330_lcd_v3.c:59: for (i=0;i<d;i++)
      000014 7C 00            [12]  567 	mov	r4,#0x00
      000016 7D 00            [12]  568 	mov	r5,#0x00
      000018                        569 00107$:
      000018 8C 02            [24]  570 	mov	ar2,r4
      00001A 8D 03            [24]  571 	mov	ar3,r5
      00001C C3               [12]  572 	clr	c
      00001D EA               [12]  573 	mov	a,r2
      00001E 9E               [12]  574 	subb	a,r6
      00001F EB               [12]  575 	mov	a,r3
      000020 64 80            [12]  576 	xrl	a,#0x80
      000022 8F F0            [24]  577 	mov	b,r7
      000024 63 F0 80         [24]  578 	xrl	b,#0x80
      000027 95 F0            [12]  579 	subb	a,b
      000029 50 14            [24]  580 	jnc	00109$
                                    581 ;	ecen4330_lcd_v3.c:61: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  582 	mov	r2,#0xe8
      00002D 7B 03            [12]  583 	mov	r3,#0x03
      00002F                        584 00105$:
      00002F 1A               [12]  585 	dec	r2
      000030 BA FF 01         [24]  586 	cjne	r2,#0xff,00130$
      000033 1B               [12]  587 	dec	r3
      000034                        588 00130$:
      000034 EA               [12]  589 	mov	a,r2
      000035 4B               [12]  590 	orl	a,r3
      000036 70 F7            [24]  591 	jnz	00105$
                                    592 ;	ecen4330_lcd_v3.c:59: for (i=0;i<d;i++)
      000038 0C               [12]  593 	inc	r4
      000039 BC 00 DC         [24]  594 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  595 	inc	r5
      00003D 80 D9            [24]  596 	sjmp	00107$
      00003F                        597 00109$:
                                    598 ;	ecen4330_lcd_v3.c:63: }
      00003F 22               [24]  599 	ret
                                    600 ;------------------------------------------------------------
                                    601 ;Allocation info for local variables in function 'writeRegister8'
                                    602 ;------------------------------------------------------------
                                    603 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    604 ;a                         Allocated to registers r7 
                                    605 ;------------------------------------------------------------
                                    606 ;	ecen4330_lcd_v3.c:73: void writeRegister8 (uint8_t a, uint8_t d) {
                                    607 ;	-----------------------------------------
                                    608 ;	 function writeRegister8
                                    609 ;	-----------------------------------------
      000040                        610 _writeRegister8:
      000040 AF 82            [24]  611 	mov	r7,dpl
                                    612 ;	ecen4330_lcd_v3.c:74: CD = __CMD__;
                                    613 ;	assignBit
      000042 C2 B5            [12]  614 	clr	_P3_5
                                    615 ;	ecen4330_lcd_v3.c:75: write8(a);
                                    616 ;	assignBit
      000044 D2 B4            [12]  617 	setb	_P3_4
      000046 85*12 82         [24]  618 	mov	dpl,_lcd_address
      000049 85*13 83         [24]  619 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  620 	mov	a,r7
      00004D F0               [24]  621 	movx	@dptr,a
                                    622 ;	assignBit
      00004E C2 B4            [12]  623 	clr	_P3_4
                                    624 ;	ecen4330_lcd_v3.c:76: CD = __DATA__;
                                    625 ;	assignBit
      000050 D2 B5            [12]  626 	setb	_P3_5
                                    627 ;	ecen4330_lcd_v3.c:77: write8(d);
                                    628 ;	assignBit
      000052 D2 B4            [12]  629 	setb	_P3_4
      000054 85*12 82         [24]  630 	mov	dpl,_lcd_address
      000057 85*13 83         [24]  631 	mov	dph,(_lcd_address + 1)
      00005A E5*00            [12]  632 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  633 	movx	@dptr,a
                                    634 ;	assignBit
      00005D C2 B4            [12]  635 	clr	_P3_4
                                    636 ;	ecen4330_lcd_v3.c:78: }
      00005F 22               [24]  637 	ret
                                    638 ;------------------------------------------------------------
                                    639 ;Allocation info for local variables in function 'writeRegister16'
                                    640 ;------------------------------------------------------------
                                    641 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    642 ;a                         Allocated to registers r6 r7 
                                    643 ;hi                        Allocated to registers r7 
                                    644 ;lo                        Allocated to registers r6 
                                    645 ;------------------------------------------------------------
                                    646 ;	ecen4330_lcd_v3.c:82: void writeRegister16 (uint16_t a, uint16_t d) {
                                    647 ;	-----------------------------------------
                                    648 ;	 function writeRegister16
                                    649 ;	-----------------------------------------
      000060                        650 _writeRegister16:
      000060 AE 82            [24]  651 	mov	r6,dpl
      000062 AF 83            [24]  652 	mov	r7,dph
                                    653 ;	ecen4330_lcd_v3.c:84: hi = (a) >> 8;
      000064 8F 05            [24]  654 	mov	ar5,r7
                                    655 ;	ecen4330_lcd_v3.c:85: lo = (a);
                                    656 ;	ecen4330_lcd_v3.c:86: write8Reg(hi);
                                    657 ;	assignBit
      000066 C2 B5            [12]  658 	clr	_P3_5
                                    659 ;	assignBit
      000068 D2 B4            [12]  660 	setb	_P3_4
      00006A 85*12 82         [24]  661 	mov	dpl,_lcd_address
      00006D 85*13 83         [24]  662 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  663 	mov	a,r5
      000071 F0               [24]  664 	movx	@dptr,a
                                    665 ;	assignBit
      000072 C2 B4            [12]  666 	clr	_P3_4
                                    667 ;	ecen4330_lcd_v3.c:87: write8Reg(lo);
                                    668 ;	assignBit
      000074 C2 B5            [12]  669 	clr	_P3_5
                                    670 ;	assignBit
      000076 D2 B4            [12]  671 	setb	_P3_4
      000078 85*12 82         [24]  672 	mov	dpl,_lcd_address
      00007B 85*13 83         [24]  673 	mov	dph,(_lcd_address + 1)
      00007E EE               [12]  674 	mov	a,r6
      00007F F0               [24]  675 	movx	@dptr,a
                                    676 ;	assignBit
      000080 C2 B4            [12]  677 	clr	_P3_4
                                    678 ;	ecen4330_lcd_v3.c:88: hi = (d) >> 8;
      000082 AF*01            [24]  679 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    680 ;	ecen4330_lcd_v3.c:89: lo = (d);
      000084 AE*00            [24]  681 	mov	r6,_writeRegister16_PARM_2
                                    682 ;	ecen4330_lcd_v3.c:90: CD = 1 ;
                                    683 ;	assignBit
      000086 D2 B5            [12]  684 	setb	_P3_5
                                    685 ;	ecen4330_lcd_v3.c:91: write8Data(hi);
                                    686 ;	assignBit
      000088 D2 B5            [12]  687 	setb	_P3_5
                                    688 ;	assignBit
      00008A D2 B4            [12]  689 	setb	_P3_4
      00008C 85*12 82         [24]  690 	mov	dpl,_lcd_address
      00008F 85*13 83         [24]  691 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  692 	mov	a,r7
      000093 F0               [24]  693 	movx	@dptr,a
                                    694 ;	assignBit
      000094 C2 B4            [12]  695 	clr	_P3_4
                                    696 ;	ecen4330_lcd_v3.c:92: write8Data(lo);
                                    697 ;	assignBit
      000096 D2 B5            [12]  698 	setb	_P3_5
                                    699 ;	assignBit
      000098 D2 B4            [12]  700 	setb	_P3_4
      00009A 85*12 82         [24]  701 	mov	dpl,_lcd_address
      00009D 85*13 83         [24]  702 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  703 	mov	a,r6
      0000A1 F0               [24]  704 	movx	@dptr,a
                                    705 ;	assignBit
      0000A2 C2 B4            [12]  706 	clr	_P3_4
                                    707 ;	ecen4330_lcd_v3.c:93: }
      0000A4 22               [24]  708 	ret
                                    709 ;------------------------------------------------------------
                                    710 ;Allocation info for local variables in function 'setCursor'
                                    711 ;------------------------------------------------------------
                                    712 ;y                         Allocated with name '_setCursor_PARM_2'
                                    713 ;x                         Allocated to registers 
                                    714 ;------------------------------------------------------------
                                    715 ;	ecen4330_lcd_v3.c:101: void setCursor (uint16_t x, uint16_t y) {
                                    716 ;	-----------------------------------------
                                    717 ;	 function setCursor
                                    718 ;	-----------------------------------------
      0000A5                        719 _setCursor:
      0000A5 85 82*18         [24]  720 	mov	_cursor_x,dpl
      0000A8 85 83*19         [24]  721 	mov	(_cursor_x + 1),dph
                                    722 ;	ecen4330_lcd_v3.c:103: cursor_y = y;
      0000AB 85*00*1A         [24]  723 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85*01*1B         [24]  724 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    725 ;	ecen4330_lcd_v3.c:104: }
      0000B1 22               [24]  726 	ret
                                    727 ;------------------------------------------------------------
                                    728 ;Allocation info for local variables in function 'setTextColor'
                                    729 ;------------------------------------------------------------
                                    730 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    731 ;x                         Allocated to registers 
                                    732 ;------------------------------------------------------------
                                    733 ;	ecen4330_lcd_v3.c:111: void setTextColor (uint16_t x, uint16_t y) {
                                    734 ;	-----------------------------------------
                                    735 ;	 function setTextColor
                                    736 ;	-----------------------------------------
      0000B2                        737 _setTextColor:
      0000B2 85 82*1E         [24]  738 	mov	_textcolor,dpl
      0000B5 85 83*1F         [24]  739 	mov	(_textcolor + 1),dph
                                    740 ;	ecen4330_lcd_v3.c:113: textbgcolor = y;
      0000B8 85*00*20         [24]  741 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85*01*21         [24]  742 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    743 ;	ecen4330_lcd_v3.c:114: }
      0000BE 22               [24]  744 	ret
                                    745 ;------------------------------------------------------------
                                    746 ;Allocation info for local variables in function 'setTextSize'
                                    747 ;------------------------------------------------------------
                                    748 ;s                         Allocated to registers r7 
                                    749 ;------------------------------------------------------------
                                    750 ;	ecen4330_lcd_v3.c:121: void setTextSize (uint8_t s) {
                                    751 ;	-----------------------------------------
                                    752 ;	 function setTextSize
                                    753 ;	-----------------------------------------
      0000BF                        754 _setTextSize:
                                    755 ;	ecen4330_lcd_v3.c:122: if (s > 8) return;
      0000BF E5 82            [12]  756 	mov	a,dpl
      0000C1 FF               [12]  757 	mov	r7,a
      0000C2 24 F7            [12]  758 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  759 	jnc	00102$
      0000C6 22               [24]  760 	ret
      0000C7                        761 00102$:
                                    762 ;	ecen4330_lcd_v3.c:123: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  763 	mov	a,r7
      0000C8 60 06            [24]  764 	jz	00105$
      0000CA 8F 06            [24]  765 	mov	ar6,r7
      0000CC 7F 00            [12]  766 	mov	r7,#0x00
      0000CE 80 04            [24]  767 	sjmp	00106$
      0000D0                        768 00105$:
      0000D0 7E 01            [12]  769 	mov	r6,#0x01
      0000D2 7F 00            [12]  770 	mov	r7,#0x00
      0000D4                        771 00106$:
      0000D4 8E*1C            [24]  772 	mov	_textsize,r6
                                    773 ;	ecen4330_lcd_v3.c:124: }
      0000D6 22               [24]  774 	ret
                                    775 ;------------------------------------------------------------
                                    776 ;Allocation info for local variables in function 'setRotation'
                                    777 ;------------------------------------------------------------
                                    778 ;flag                      Allocated to registers r7 
                                    779 ;------------------------------------------------------------
                                    780 ;	ecen4330_lcd_v3.c:136: void setRotation (uint8_t flag) {
                                    781 ;	-----------------------------------------
                                    782 ;	 function setRotation
                                    783 ;	-----------------------------------------
      0000D7                        784 _setRotation:
                                    785 ;	ecen4330_lcd_v3.c:137: switch(flag) {
      0000D7 E5 82            [12]  786 	mov	a,dpl
      0000D9 FF               [12]  787 	mov	r7,a
      0000DA 24 FC            [12]  788 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  789 	jc	00105$
      0000DE EF               [12]  790 	mov	a,r7
      0000DF 2F               [12]  791 	add	a,r7
                                    792 ;	ecen4330_lcd_v3.c:138: case 0:
      0000E0 90r00rE4         [24]  793 	mov	dptr,#00115$
      0000E3 73               [24]  794 	jmp	@a+dptr
      0000E4                        795 00115$:
      0000E4 80 06            [24]  796 	sjmp	00101$
      0000E6 80 14            [24]  797 	sjmp	00102$
      0000E8 80 22            [24]  798 	sjmp	00103$
      0000EA 80 30            [24]  799 	sjmp	00104$
      0000EC                        800 00101$:
                                    801 ;	ecen4330_lcd_v3.c:139: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  802 	mov	r7,#0x48
                                    803 ;	ecen4330_lcd_v3.c:140: _width = TFTWIDTH;
      0000EE 75*22 F0         [24]  804 	mov	__width,#0xf0
      0000F1 75*23 00         [24]  805 	mov	(__width + 1),#0x00
                                    806 ;	ecen4330_lcd_v3.c:141: _height = TFTHEIGHT;
      0000F4 75*24 40         [24]  807 	mov	__height,#0x40
      0000F7 75*25 01         [24]  808 	mov	(__height + 1),#0x01
                                    809 ;	ecen4330_lcd_v3.c:142: break;
                                    810 ;	ecen4330_lcd_v3.c:143: case 1:
      0000FA 80 3E            [24]  811 	sjmp	00106$
      0000FC                        812 00102$:
                                    813 ;	ecen4330_lcd_v3.c:144: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  814 	mov	r7,#0x28
                                    815 ;	ecen4330_lcd_v3.c:145: _width = TFTHEIGHT;
      0000FE 75*22 40         [24]  816 	mov	__width,#0x40
      000101 75*23 01         [24]  817 	mov	(__width + 1),#0x01
                                    818 ;	ecen4330_lcd_v3.c:146: _height = TFTWIDTH;
      000104 75*24 F0         [24]  819 	mov	__height,#0xf0
      000107 75*25 00         [24]  820 	mov	(__height + 1),#0x00
                                    821 ;	ecen4330_lcd_v3.c:147: break;
                                    822 ;	ecen4330_lcd_v3.c:148: case 2:
      00010A 80 2E            [24]  823 	sjmp	00106$
      00010C                        824 00103$:
                                    825 ;	ecen4330_lcd_v3.c:149: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  826 	mov	r7,#0x88
                                    827 ;	ecen4330_lcd_v3.c:150: _width = TFTWIDTH;
      00010E 75*22 F0         [24]  828 	mov	__width,#0xf0
      000111 75*23 00         [24]  829 	mov	(__width + 1),#0x00
                                    830 ;	ecen4330_lcd_v3.c:151: _height = TFTHEIGHT;
      000114 75*24 40         [24]  831 	mov	__height,#0x40
      000117 75*25 01         [24]  832 	mov	(__height + 1),#0x01
                                    833 ;	ecen4330_lcd_v3.c:152: break;
                                    834 ;	ecen4330_lcd_v3.c:153: case 3:
      00011A 80 1E            [24]  835 	sjmp	00106$
      00011C                        836 00104$:
                                    837 ;	ecen4330_lcd_v3.c:154: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  838 	mov	r7,#0xe8
                                    839 ;	ecen4330_lcd_v3.c:155: _width = TFTHEIGHT;
      00011E 75*22 40         [24]  840 	mov	__width,#0x40
      000121 75*23 01         [24]  841 	mov	(__width + 1),#0x01
                                    842 ;	ecen4330_lcd_v3.c:156: _height = TFTWIDTH;
      000124 75*24 F0         [24]  843 	mov	__height,#0xf0
      000127 75*25 00         [24]  844 	mov	(__height + 1),#0x00
                                    845 ;	ecen4330_lcd_v3.c:157: break;
                                    846 ;	ecen4330_lcd_v3.c:158: default:
      00012A 80 0E            [24]  847 	sjmp	00106$
      00012C                        848 00105$:
                                    849 ;	ecen4330_lcd_v3.c:159: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  850 	mov	r7,#0x48
                                    851 ;	ecen4330_lcd_v3.c:160: _width = TFTWIDTH;
      00012E 75*22 F0         [24]  852 	mov	__width,#0xf0
      000131 75*23 00         [24]  853 	mov	(__width + 1),#0x00
                                    854 ;	ecen4330_lcd_v3.c:161: _height = TFTHEIGHT;
      000134 75*24 40         [24]  855 	mov	__height,#0x40
      000137 75*25 01         [24]  856 	mov	(__height + 1),#0x01
                                    857 ;	ecen4330_lcd_v3.c:163: }
      00013A                        858 00106$:
                                    859 ;	ecen4330_lcd_v3.c:164: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F*00            [24]  860 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  861 	mov	dpl,#0x36
                                    862 ;	ecen4330_lcd_v3.c:165: }
      00013F 02r00r40         [24]  863 	ljmp	_writeRegister8
                                    864 ;------------------------------------------------------------
                                    865 ;Allocation info for local variables in function 'setAddress'
                                    866 ;------------------------------------------------------------
                                    867 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    868 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    869 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    870 ;x1                        Allocated to registers r6 r7 
                                    871 ;------------------------------------------------------------
                                    872 ;	ecen4330_lcd_v3.c:167: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    873 ;	-----------------------------------------
                                    874 ;	 function setAddress
                                    875 ;	-----------------------------------------
      000142                        876 _setAddress:
      000142 AE 82            [24]  877 	mov	r6,dpl
      000144 AF 83            [24]  878 	mov	r7,dph
                                    879 ;	ecen4330_lcd_v3.c:168: write8Reg(0x2A);
                                    880 ;	assignBit
      000146 C2 B5            [12]  881 	clr	_P3_5
                                    882 ;	assignBit
      000148 D2 B4            [12]  883 	setb	_P3_4
      00014A 85*12 82         [24]  884 	mov	dpl,_lcd_address
      00014D 85*13 83         [24]  885 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  886 	mov	a,#0x2a
      000152 F0               [24]  887 	movx	@dptr,a
                                    888 ;	assignBit
      000153 C2 B4            [12]  889 	clr	_P3_4
                                    890 ;	ecen4330_lcd_v3.c:169: write8Data(x1 >> 8);
                                    891 ;	assignBit
      000155 D2 B5            [12]  892 	setb	_P3_5
                                    893 ;	assignBit
      000157 D2 B4            [12]  894 	setb	_P3_4
      000159 85*12 82         [24]  895 	mov	dpl,_lcd_address
      00015C 85*13 83         [24]  896 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  897 	mov	ar5,r7
      000161 ED               [12]  898 	mov	a,r5
      000162 F0               [24]  899 	movx	@dptr,a
                                    900 ;	assignBit
      000163 C2 B4            [12]  901 	clr	_P3_4
                                    902 ;	ecen4330_lcd_v3.c:170: write8Data(x1);
                                    903 ;	assignBit
      000165 D2 B5            [12]  904 	setb	_P3_5
                                    905 ;	assignBit
      000167 D2 B4            [12]  906 	setb	_P3_4
      000169 85*12 82         [24]  907 	mov	dpl,_lcd_address
      00016C 85*13 83         [24]  908 	mov	dph,(_lcd_address + 1)
      00016F EE               [12]  909 	mov	a,r6
      000170 F0               [24]  910 	movx	@dptr,a
                                    911 ;	assignBit
      000171 C2 B4            [12]  912 	clr	_P3_4
                                    913 ;	ecen4330_lcd_v3.c:171: write8Data(x2 >> 8);
                                    914 ;	assignBit
      000173 D2 B5            [12]  915 	setb	_P3_5
                                    916 ;	assignBit
      000175 D2 B4            [12]  917 	setb	_P3_4
      000177 85*12 82         [24]  918 	mov	dpl,_lcd_address
      00017A 85*13 83         [24]  919 	mov	dph,(_lcd_address + 1)
      00017D E5*03            [12]  920 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24]  921 	movx	@dptr,a
                                    922 ;	assignBit
      000180 C2 B4            [12]  923 	clr	_P3_4
                                    924 ;	ecen4330_lcd_v3.c:172: write8Data(x2);
                                    925 ;	assignBit
      000182 D2 B5            [12]  926 	setb	_P3_5
                                    927 ;	assignBit
      000184 D2 B4            [12]  928 	setb	_P3_4
      000186 85*12 82         [24]  929 	mov	dpl,_lcd_address
      000189 85*13 83         [24]  930 	mov	dph,(_lcd_address + 1)
      00018C E5*02            [12]  931 	mov	a,_setAddress_PARM_3
      00018E F0               [24]  932 	movx	@dptr,a
                                    933 ;	assignBit
      00018F C2 B4            [12]  934 	clr	_P3_4
                                    935 ;	ecen4330_lcd_v3.c:174: write8Reg(0x2B);
                                    936 ;	assignBit
      000191 C2 B5            [12]  937 	clr	_P3_5
                                    938 ;	assignBit
      000193 D2 B4            [12]  939 	setb	_P3_4
      000195 85*12 82         [24]  940 	mov	dpl,_lcd_address
      000198 85*13 83         [24]  941 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12]  942 	mov	a,#0x2b
      00019D F0               [24]  943 	movx	@dptr,a
                                    944 ;	assignBit
      00019E C2 B4            [12]  945 	clr	_P3_4
                                    946 ;	ecen4330_lcd_v3.c:175: write8Data(y1 >> 8);
                                    947 ;	assignBit
      0001A0 D2 B5            [12]  948 	setb	_P3_5
                                    949 ;	assignBit
      0001A2 D2 B4            [12]  950 	setb	_P3_4
      0001A4 85*12 82         [24]  951 	mov	dpl,_lcd_address
      0001A7 85*13 83         [24]  952 	mov	dph,(_lcd_address + 1)
      0001AA E5*01            [12]  953 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24]  954 	movx	@dptr,a
                                    955 ;	assignBit
      0001AD C2 B4            [12]  956 	clr	_P3_4
                                    957 ;	ecen4330_lcd_v3.c:176: write8Data(y1);
                                    958 ;	assignBit
      0001AF D2 B5            [12]  959 	setb	_P3_5
                                    960 ;	assignBit
      0001B1 D2 B4            [12]  961 	setb	_P3_4
      0001B3 85*12 82         [24]  962 	mov	dpl,_lcd_address
      0001B6 85*13 83         [24]  963 	mov	dph,(_lcd_address + 1)
      0001B9 E5*00            [12]  964 	mov	a,_setAddress_PARM_2
      0001BB F0               [24]  965 	movx	@dptr,a
                                    966 ;	assignBit
      0001BC C2 B4            [12]  967 	clr	_P3_4
                                    968 ;	ecen4330_lcd_v3.c:177: write8Data(y2 >> 8);
                                    969 ;	assignBit
      0001BE D2 B5            [12]  970 	setb	_P3_5
                                    971 ;	assignBit
      0001C0 D2 B4            [12]  972 	setb	_P3_4
      0001C2 85*12 82         [24]  973 	mov	dpl,_lcd_address
      0001C5 85*13 83         [24]  974 	mov	dph,(_lcd_address + 1)
      0001C8 E5*05            [12]  975 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24]  976 	movx	@dptr,a
                                    977 ;	assignBit
      0001CB C2 B4            [12]  978 	clr	_P3_4
                                    979 ;	ecen4330_lcd_v3.c:178: write8Data(y2);
                                    980 ;	assignBit
      0001CD D2 B5            [12]  981 	setb	_P3_5
                                    982 ;	assignBit
      0001CF D2 B4            [12]  983 	setb	_P3_4
      0001D1 85*12 82         [24]  984 	mov	dpl,_lcd_address
      0001D4 85*13 83         [24]  985 	mov	dph,(_lcd_address + 1)
      0001D7 E5*04            [12]  986 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24]  987 	movx	@dptr,a
                                    988 ;	assignBit
      0001DA C2 B4            [12]  989 	clr	_P3_4
                                    990 ;	ecen4330_lcd_v3.c:179: }
      0001DC 22               [24]  991 	ret
                                    992 ;------------------------------------------------------------
                                    993 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                    994 ;------------------------------------------------------------
                                    995 ;	ecen4330_lcd_v3.c:185: void TFT_LCD_INIT (void) {
                                    996 ;	-----------------------------------------
                                    997 ;	 function TFT_LCD_INIT
                                    998 ;	-----------------------------------------
      0001DD                        999 _TFT_LCD_INIT:
                                   1000 ;	ecen4330_lcd_v3.c:186: _width = TFTWIDTH;
      0001DD 75*22 F0         [24] 1001 	mov	__width,#0xf0
      0001E0 75*23 00         [24] 1002 	mov	(__width + 1),#0x00
                                   1003 ;	ecen4330_lcd_v3.c:187: _height = TFTHEIGHT;
      0001E3 75*24 40         [24] 1004 	mov	__height,#0x40
      0001E6 75*25 01         [24] 1005 	mov	(__height + 1),#0x01
                                   1006 ;	ecen4330_lcd_v3.c:189: IOM = 0;
                                   1007 ;	assignBit
      0001E9 C2 B4            [12] 1008 	clr	_P3_4
                                   1009 ;	ecen4330_lcd_v3.c:190: CD = 1;
                                   1010 ;	assignBit
      0001EB D2 B5            [12] 1011 	setb	_P3_5
                                   1012 ;	ecen4330_lcd_v3.c:192: write8Reg(0x00);
                                   1013 ;	assignBit
      0001ED C2 B5            [12] 1014 	clr	_P3_5
                                   1015 ;	assignBit
      0001EF D2 B4            [12] 1016 	setb	_P3_4
      0001F1 85*12 82         [24] 1017 	mov	dpl,_lcd_address
      0001F4 85*13 83         [24] 1018 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1019 	clr	a
      0001F8 F0               [24] 1020 	movx	@dptr,a
                                   1021 ;	assignBit
      0001F9 C2 B4            [12] 1022 	clr	_P3_4
                                   1023 ;	ecen4330_lcd_v3.c:193: write8Data(0x00);
                                   1024 ;	assignBit
      0001FB D2 B5            [12] 1025 	setb	_P3_5
                                   1026 ;	assignBit
      0001FD D2 B4            [12] 1027 	setb	_P3_4
      0001FF 85*12 82         [24] 1028 	mov	dpl,_lcd_address
      000202 85*13 83         [24] 1029 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1030 	clr	a
      000206 F0               [24] 1031 	movx	@dptr,a
                                   1032 ;	assignBit
      000207 C2 B4            [12] 1033 	clr	_P3_4
                                   1034 ;	ecen4330_lcd_v3.c:194: write8Data(0x00);
                                   1035 ;	assignBit
      000209 D2 B5            [12] 1036 	setb	_P3_5
                                   1037 ;	assignBit
      00020B D2 B4            [12] 1038 	setb	_P3_4
      00020D 85*12 82         [24] 1039 	mov	dpl,_lcd_address
      000210 85*13 83         [24] 1040 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1041 	clr	a
      000214 F0               [24] 1042 	movx	@dptr,a
                                   1043 ;	assignBit
      000215 C2 B4            [12] 1044 	clr	_P3_4
                                   1045 ;	ecen4330_lcd_v3.c:195: write8Data(0x00);
                                   1046 ;	assignBit
      000217 D2 B5            [12] 1047 	setb	_P3_5
                                   1048 ;	assignBit
      000219 D2 B4            [12] 1049 	setb	_P3_4
      00021B 85*12 82         [24] 1050 	mov	dpl,_lcd_address
      00021E 85*13 83         [24] 1051 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1052 	clr	a
      000222 F0               [24] 1053 	movx	@dptr,a
                                   1054 ;	assignBit
      000223 C2 B4            [12] 1055 	clr	_P3_4
                                   1056 ;	ecen4330_lcd_v3.c:196: delay(200);
      000225 90 00 C8         [24] 1057 	mov	dptr,#0x00c8
      000228 12r00r10         [24] 1058 	lcall	_delay
                                   1059 ;	ecen4330_lcd_v3.c:198: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75*00 00         [24] 1060 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1061 	mov	dpl,#0x01
      000231 12r00r40         [24] 1062 	lcall	_writeRegister8
                                   1063 ;	ecen4330_lcd_v3.c:199: delay(50);
      000234 90 00 32         [24] 1064 	mov	dptr,#0x0032
      000237 12r00r10         [24] 1065 	lcall	_delay
                                   1066 ;	ecen4330_lcd_v3.c:200: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75*00 00         [24] 1067 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1068 	mov	dpl,#0x28
      000240 12r00r40         [24] 1069 	lcall	_writeRegister8
                                   1070 ;	ecen4330_lcd_v3.c:201: delay(10);
      000243 90 00 0A         [24] 1071 	mov	dptr,#0x000a
      000246 12r00r10         [24] 1072 	lcall	_delay
                                   1073 ;	ecen4330_lcd_v3.c:203: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75*00 23         [24] 1074 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1075 	mov	dpl,#0xc0
      00024F 12r00r40         [24] 1076 	lcall	_writeRegister8
                                   1077 ;	ecen4330_lcd_v3.c:204: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75*00 11         [24] 1078 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1079 	mov	dpl,#0xc1
      000258 12r00r40         [24] 1080 	lcall	_writeRegister8
                                   1081 ;	ecen4330_lcd_v3.c:205: write8Reg(ILI9341_VCOMCONTROL1);
                                   1082 ;	assignBit
      00025B C2 B5            [12] 1083 	clr	_P3_5
                                   1084 ;	assignBit
      00025D D2 B4            [12] 1085 	setb	_P3_4
      00025F 85*12 82         [24] 1086 	mov	dpl,_lcd_address
      000262 85*13 83         [24] 1087 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1088 	mov	a,#0xc5
      000267 F0               [24] 1089 	movx	@dptr,a
                                   1090 ;	assignBit
      000268 C2 B4            [12] 1091 	clr	_P3_4
                                   1092 ;	ecen4330_lcd_v3.c:206: write8Data(0x3d);
                                   1093 ;	assignBit
      00026A D2 B5            [12] 1094 	setb	_P3_5
                                   1095 ;	assignBit
      00026C D2 B4            [12] 1096 	setb	_P3_4
      00026E 85*12 82         [24] 1097 	mov	dpl,_lcd_address
      000271 85*13 83         [24] 1098 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1099 	mov	a,#0x3d
      000276 F0               [24] 1100 	movx	@dptr,a
                                   1101 ;	assignBit
      000277 C2 B4            [12] 1102 	clr	_P3_4
                                   1103 ;	ecen4330_lcd_v3.c:207: write8Data(0x30);
                                   1104 ;	assignBit
      000279 D2 B5            [12] 1105 	setb	_P3_5
                                   1106 ;	assignBit
      00027B D2 B4            [12] 1107 	setb	_P3_4
      00027D 85*12 82         [24] 1108 	mov	dpl,_lcd_address
      000280 85*13 83         [24] 1109 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1110 	mov	a,#0x30
      000285 F0               [24] 1111 	movx	@dptr,a
                                   1112 ;	assignBit
      000286 C2 B4            [12] 1113 	clr	_P3_4
                                   1114 ;	ecen4330_lcd_v3.c:208: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75*00 AA         [24] 1115 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1116 	mov	dpl,#0xc7
      00028E 12r00r40         [24] 1117 	lcall	_writeRegister8
                                   1118 ;	ecen4330_lcd_v3.c:209: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75*00 88         [24] 1119 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1120 	mov	dpl,#0x36
      000297 12r00r40         [24] 1121 	lcall	_writeRegister8
                                   1122 ;	ecen4330_lcd_v3.c:210: write8Reg(ILI9341_PIXELFORMAT);
                                   1123 ;	assignBit
      00029A C2 B5            [12] 1124 	clr	_P3_5
                                   1125 ;	assignBit
      00029C D2 B4            [12] 1126 	setb	_P3_4
      00029E 85*12 82         [24] 1127 	mov	dpl,_lcd_address
      0002A1 85*13 83         [24] 1128 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1129 	mov	a,#0x3a
      0002A6 F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	assignBit
      0002A7 C2 B4            [12] 1132 	clr	_P3_4
                                   1133 ;	ecen4330_lcd_v3.c:211: write8Data(0x55);write8Data(0x00);
                                   1134 ;	assignBit
      0002A9 D2 B5            [12] 1135 	setb	_P3_5
                                   1136 ;	assignBit
      0002AB D2 B4            [12] 1137 	setb	_P3_4
      0002AD 85*12 82         [24] 1138 	mov	dpl,_lcd_address
      0002B0 85*13 83         [24] 1139 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1140 	mov	a,#0x55
      0002B5 F0               [24] 1141 	movx	@dptr,a
                                   1142 ;	assignBit
      0002B6 C2 B4            [12] 1143 	clr	_P3_4
                                   1144 ;	assignBit
      0002B8 D2 B5            [12] 1145 	setb	_P3_5
                                   1146 ;	assignBit
      0002BA D2 B4            [12] 1147 	setb	_P3_4
      0002BC 85*12 82         [24] 1148 	mov	dpl,_lcd_address
      0002BF 85*13 83         [24] 1149 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1150 	clr	a
      0002C3 F0               [24] 1151 	movx	@dptr,a
                                   1152 ;	assignBit
      0002C4 C2 B4            [12] 1153 	clr	_P3_4
                                   1154 ;	ecen4330_lcd_v3.c:212: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75*00 1B         [24] 1155 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75*01 00         [24] 1156 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1157 	mov	dptr,#0x00b1
      0002CF 12r00r60         [24] 1158 	lcall	_writeRegister16
                                   1159 ;	ecen4330_lcd_v3.c:214: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75*00 07         [24] 1160 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1161 	mov	dpl,#0xb7
      0002D8 12r00r40         [24] 1162 	lcall	_writeRegister8
                                   1163 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75*00 00         [24] 1164 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1165 	mov	dpl,#0x11
      0002E1 12r00r40         [24] 1166 	lcall	_writeRegister8
                                   1167 ;	ecen4330_lcd_v3.c:217: delay(150);
      0002E4 90 00 96         [24] 1168 	mov	dptr,#0x0096
      0002E7 12r00r10         [24] 1169 	lcall	_delay
                                   1170 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75*00 00         [24] 1171 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1172 	mov	dpl,#0x29
      0002F0 12r00r40         [24] 1173 	lcall	_writeRegister8
                                   1174 ;	ecen4330_lcd_v3.c:219: delay(500);
      0002F3 90 01 F4         [24] 1175 	mov	dptr,#0x01f4
      0002F6 12r00r10         [24] 1176 	lcall	_delay
                                   1177 ;	ecen4330_lcd_v3.c:220: setAddress(0,0,_width-1,_height-1);
      0002F9 AE*22            [24] 1178 	mov	r6,__width
      0002FB AF*23            [24] 1179 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1180 	dec	r6
      0002FE BE FF 01         [24] 1181 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1182 	dec	r7
      000302                       1183 00103$:
      000302 8E*02            [24] 1184 	mov	_setAddress_PARM_3,r6
      000304 8F*03            [24] 1185 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE*24            [24] 1186 	mov	r6,__height
      000308 AF*25            [24] 1187 	mov	r7,(__height + 1)
      00030A 1E               [12] 1188 	dec	r6
      00030B BE FF 01         [24] 1189 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1190 	dec	r7
      00030F                       1191 00104$:
      00030F 8E*04            [24] 1192 	mov	_setAddress_PARM_4,r6
      000311 8F*05            [24] 1193 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1194 	clr	a
      000314 F5*00            [12] 1195 	mov	_setAddress_PARM_2,a
      000316 F5*01            [12] 1196 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1197 	mov	dptr,#0x0000
                                   1198 ;	ecen4330_lcd_v3.c:221: }
      00031B 02r01r42         [24] 1199 	ljmp	_setAddress
                                   1200 ;------------------------------------------------------------
                                   1201 ;Allocation info for local variables in function 'drawPixel'
                                   1202 ;------------------------------------------------------------
                                   1203 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1204 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1205 ;x3                        Allocated to registers r6 r7 
                                   1206 ;------------------------------------------------------------
                                   1207 ;	ecen4330_lcd_v3.c:230: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1208 ;	-----------------------------------------
                                   1209 ;	 function drawPixel
                                   1210 ;	-----------------------------------------
      00031E                       1211 _drawPixel:
      00031E AE 82            [24] 1212 	mov	r6,dpl
      000320 AF 83            [24] 1213 	mov	r7,dph
                                   1214 ;	ecen4330_lcd_v3.c:232: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1215 	mov	ar4,r6
      000324 8F 05            [24] 1216 	mov	ar5,r7
      000326 0C               [12] 1217 	inc	r4
      000327 BC 00 01         [24] 1218 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1219 	inc	r5
      00032B                       1220 00103$:
      00032B 8C*02            [24] 1221 	mov	_setAddress_PARM_3,r4
      00032D 8D*03            [24] 1222 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC*26            [24] 1223 	mov	r4,_drawPixel_PARM_2
      000331 AD*27            [24] 1224 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1225 	inc	r4
      000334 BC 00 01         [24] 1226 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1227 	inc	r5
      000338                       1228 00104$:
      000338 8C*04            [24] 1229 	mov	_setAddress_PARM_4,r4
      00033A 8D*05            [24] 1230 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85*26*00         [24] 1231 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85*27*01         [24] 1232 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1233 	mov	dpl,r6
      000344 8F 83            [24] 1234 	mov	dph,r7
      000346 12r01r42         [24] 1235 	lcall	_setAddress
                                   1236 ;	ecen4330_lcd_v3.c:234: CD=0; write8(0x2C);
                                   1237 ;	assignBit
      000349 C2 B5            [12] 1238 	clr	_P3_5
                                   1239 ;	assignBit
      00034B D2 B4            [12] 1240 	setb	_P3_4
      00034D 85*12 82         [24] 1241 	mov	dpl,_lcd_address
      000350 85*13 83         [24] 1242 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1243 	mov	a,#0x2c
      000355 F0               [24] 1244 	movx	@dptr,a
                                   1245 ;	assignBit
      000356 C2 B4            [12] 1246 	clr	_P3_4
                                   1247 ;	ecen4330_lcd_v3.c:236: CD = 1;
                                   1248 ;	assignBit
      000358 D2 B5            [12] 1249 	setb	_P3_5
                                   1250 ;	ecen4330_lcd_v3.c:237: write8(color1>>8);write8(color1);
                                   1251 ;	assignBit
      00035A D2 B4            [12] 1252 	setb	_P3_4
      00035C 85*12 82         [24] 1253 	mov	dpl,_lcd_address
      00035F 85*13 83         [24] 1254 	mov	dph,(_lcd_address + 1)
      000362 E5*29            [12] 1255 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1256 	movx	@dptr,a
                                   1257 ;	assignBit
      000365 C2 B4            [12] 1258 	clr	_P3_4
                                   1259 ;	assignBit
      000367 D2 B4            [12] 1260 	setb	_P3_4
      000369 85*12 82         [24] 1261 	mov	dpl,_lcd_address
      00036C 85*13 83         [24] 1262 	mov	dph,(_lcd_address + 1)
      00036F E5*28            [12] 1263 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	assignBit
      000372 C2 B4            [12] 1266 	clr	_P3_4
                                   1267 ;	ecen4330_lcd_v3.c:238: }
      000374 22               [24] 1268 	ret
                                   1269 ;------------------------------------------------------------
                                   1270 ;Allocation info for local variables in function 'drawCircle'
                                   1271 ;------------------------------------------------------------
                                   1272 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1273 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1274 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1275 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1276 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1277 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1278 ;ddF_y                     Allocated to registers r2 r3 
                                   1279 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1280 ;y                         Allocated to registers r0 r1 
                                   1281 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1282 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1283 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1284 ;------------------------------------------------------------
                                   1285 ;	ecen4330_lcd_v3.c:248: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function drawCircle
                                   1288 ;	-----------------------------------------
      000375                       1289 _drawCircle:
      000375 85 82*30         [24] 1290 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83*31         [24] 1291 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1292 ;	ecen4330_lcd_v3.c:249: int f = 1 - r;
      00037B 74 01            [12] 1293 	mov	a,#0x01
      00037D C3               [12] 1294 	clr	c
      00037E 95*2C            [12] 1295 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1296 	mov	r4,a
      000381 E4               [12] 1297 	clr	a
      000382 95*2D            [12] 1298 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1299 	mov	r5,a
      000385 8C*32            [24] 1300 	mov	_drawCircle_f_65536_104,r4
      000387 8D*33            [24] 1301 	mov	(_drawCircle_f_65536_104 + 1),r5
                                   1302 ;	ecen4330_lcd_v3.c:251: int ddF_y = -2 * r;
      000389 85*2C*00         [24] 1303 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00038C 85*2D*01         [24] 1304 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00038F 90 FF FE         [24] 1305 	mov	dptr,#0xfffe
      000392 12r00r00         [24] 1306 	lcall	__mulint
      000395 AA 82            [24] 1307 	mov	r2,dpl
      000397 AB 83            [24] 1308 	mov	r3,dph
                                   1309 ;	ecen4330_lcd_v3.c:253: int y = r;
      000399 A8*2C            [24] 1310 	mov	r0,_drawCircle_PARM_3
      00039B A9*2D            [24] 1311 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   1312 ;	ecen4330_lcd_v3.c:255: drawPixel(x0  , y0+r, color);
      00039D E5*2C            [12] 1313 	mov	a,_drawCircle_PARM_3
      00039F 25*2A            [12] 1314 	add	a,_drawCircle_PARM_2
      0003A1 F5*26            [12] 1315 	mov	_drawPixel_PARM_2,a
      0003A3 E5*2D            [12] 1316 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A5 35*2B            [12] 1317 	addc	a,(_drawCircle_PARM_2 + 1)
      0003A7 F5*27            [12] 1318 	mov	(_drawPixel_PARM_2 + 1),a
      0003A9 85*2E*28         [24] 1319 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003AC 85*2F*29         [24] 1320 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003AF 85*30 82         [24] 1321 	mov	dpl,_drawCircle_x0_65536_103
      0003B2 85*31 83         [24] 1322 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B5 C0 03            [24] 1323 	push	ar3
      0003B7 C0 02            [24] 1324 	push	ar2
      0003B9 C0 01            [24] 1325 	push	ar1
      0003BB C0 00            [24] 1326 	push	ar0
      0003BD 12r03r1E         [24] 1327 	lcall	_drawPixel
                                   1328 ;	ecen4330_lcd_v3.c:256: drawPixel(x0  , y0-r, color);
      0003C0 E5*2A            [12] 1329 	mov	a,_drawCircle_PARM_2
      0003C2 C3               [12] 1330 	clr	c
      0003C3 95*2C            [12] 1331 	subb	a,_drawCircle_PARM_3
      0003C5 F5*26            [12] 1332 	mov	_drawPixel_PARM_2,a
      0003C7 E5*2B            [12] 1333 	mov	a,(_drawCircle_PARM_2 + 1)
      0003C9 95*2D            [12] 1334 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CB F5*27            [12] 1335 	mov	(_drawPixel_PARM_2 + 1),a
      0003CD 85*2E*28         [24] 1336 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D0 85*2F*29         [24] 1337 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D3 85*30 82         [24] 1338 	mov	dpl,_drawCircle_x0_65536_103
      0003D6 85*31 83         [24] 1339 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003D9 12r03r1E         [24] 1340 	lcall	_drawPixel
                                   1341 ;	ecen4330_lcd_v3.c:257: drawPixel(x0+r, y0  , color);
      0003DC E5*2C            [12] 1342 	mov	a,_drawCircle_PARM_3
      0003DE 25*30            [12] 1343 	add	a,_drawCircle_x0_65536_103
      0003E0 F5 82            [12] 1344 	mov	dpl,a
      0003E2 E5*2D            [12] 1345 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E4 35*31            [12] 1346 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003E6 F5 83            [12] 1347 	mov	dph,a
      0003E8 85*2A*26         [24] 1348 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EB 85*2B*27         [24] 1349 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003EE 85*2E*28         [24] 1350 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F1 85*2F*29         [24] 1351 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F4 12r03r1E         [24] 1352 	lcall	_drawPixel
                                   1353 ;	ecen4330_lcd_v3.c:258: drawPixel(x0-r, y0  , color);
      0003F7 E5*30            [12] 1354 	mov	a,_drawCircle_x0_65536_103
      0003F9 C3               [12] 1355 	clr	c
      0003FA 95*2C            [12] 1356 	subb	a,_drawCircle_PARM_3
      0003FC F5 82            [12] 1357 	mov	dpl,a
      0003FE E5*31            [12] 1358 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000400 95*2D            [12] 1359 	subb	a,(_drawCircle_PARM_3 + 1)
      000402 F5 83            [12] 1360 	mov	dph,a
      000404 85*2A*26         [24] 1361 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000407 85*2B*27         [24] 1362 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040A 85*2E*28         [24] 1363 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00040D 85*2F*29         [24] 1364 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000410 12r03r1E         [24] 1365 	lcall	_drawPixel
      000413 D0 00            [24] 1366 	pop	ar0
      000415 D0 01            [24] 1367 	pop	ar1
      000417 D0 02            [24] 1368 	pop	ar2
      000419 D0 03            [24] 1369 	pop	ar3
                                   1370 ;	ecen4330_lcd_v3.c:260: while (x<y) {
      00041B E4               [12] 1371 	clr	a
      00041C F5*36            [12] 1372 	mov	_drawCircle_x_65536_104,a
      00041E F5*37            [12] 1373 	mov	(_drawCircle_x_65536_104 + 1),a
      000420 75*34 01         [24] 1374 	mov	_drawCircle_ddF_x_65536_104,#0x01
                                   1375 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_104 + 1),#0x00
      000423 F5*35            [12] 1376 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
      000425                       1377 00103$:
      000425 C3               [12] 1378 	clr	c
      000426 E5*36            [12] 1379 	mov	a,_drawCircle_x_65536_104
      000428 98               [12] 1380 	subb	a,r0
      000429 E5*37            [12] 1381 	mov	a,(_drawCircle_x_65536_104 + 1)
      00042B 64 80            [12] 1382 	xrl	a,#0x80
      00042D 89 F0            [24] 1383 	mov	b,r1
      00042F 63 F0 80         [24] 1384 	xrl	b,#0x80
      000432 95 F0            [12] 1385 	subb	a,b
      000434 40 01            [24] 1386 	jc	00121$
      000436 22               [24] 1387 	ret
      000437                       1388 00121$:
                                   1389 ;	ecen4330_lcd_v3.c:261: if (f >= 0) {
      000437 E5*33            [12] 1390 	mov	a,(_drawCircle_f_65536_104 + 1)
      000439 20 E7 16         [24] 1391 	jb	acc.7,00102$
                                   1392 ;	ecen4330_lcd_v3.c:262: y--;
      00043C 18               [12] 1393 	dec	r0
      00043D B8 FF 01         [24] 1394 	cjne	r0,#0xff,00123$
      000440 19               [12] 1395 	dec	r1
      000441                       1396 00123$:
                                   1397 ;	ecen4330_lcd_v3.c:263: ddF_y += 2;
      000441 74 02            [12] 1398 	mov	a,#0x02
      000443 2A               [12] 1399 	add	a,r2
      000444 FA               [12] 1400 	mov	r2,a
      000445 E4               [12] 1401 	clr	a
      000446 3B               [12] 1402 	addc	a,r3
      000447 FB               [12] 1403 	mov	r3,a
                                   1404 ;	ecen4330_lcd_v3.c:264: f += ddF_y;
      000448 EA               [12] 1405 	mov	a,r2
      000449 25*32            [12] 1406 	add	a,_drawCircle_f_65536_104
      00044B F5*32            [12] 1407 	mov	_drawCircle_f_65536_104,a
      00044D EB               [12] 1408 	mov	a,r3
      00044E 35*33            [12] 1409 	addc	a,(_drawCircle_f_65536_104 + 1)
      000450 F5*33            [12] 1410 	mov	(_drawCircle_f_65536_104 + 1),a
      000452                       1411 00102$:
                                   1412 ;	ecen4330_lcd_v3.c:266: x++;
      000452 C0 02            [24] 1413 	push	ar2
      000454 C0 03            [24] 1414 	push	ar3
      000456 05*36            [12] 1415 	inc	_drawCircle_x_65536_104
      000458 E4               [12] 1416 	clr	a
      000459 B5*36 02         [24] 1417 	cjne	a,_drawCircle_x_65536_104,00124$
      00045C 05*37            [12] 1418 	inc	(_drawCircle_x_65536_104 + 1)
      00045E                       1419 00124$:
                                   1420 ;	ecen4330_lcd_v3.c:267: ddF_x += 2;
      00045E 74 02            [12] 1421 	mov	a,#0x02
      000460 25*34            [12] 1422 	add	a,_drawCircle_ddF_x_65536_104
      000462 F5*34            [12] 1423 	mov	_drawCircle_ddF_x_65536_104,a
      000464 E4               [12] 1424 	clr	a
      000465 35*35            [12] 1425 	addc	a,(_drawCircle_ddF_x_65536_104 + 1)
      000467 F5*35            [12] 1426 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
                                   1427 ;	ecen4330_lcd_v3.c:268: f += ddF_x;
      000469 E5*34            [12] 1428 	mov	a,_drawCircle_ddF_x_65536_104
      00046B 25*32            [12] 1429 	add	a,_drawCircle_f_65536_104
      00046D F5*32            [12] 1430 	mov	_drawCircle_f_65536_104,a
      00046F E5*35            [12] 1431 	mov	a,(_drawCircle_ddF_x_65536_104 + 1)
      000471 35*33            [12] 1432 	addc	a,(_drawCircle_f_65536_104 + 1)
      000473 F5*33            [12] 1433 	mov	(_drawCircle_f_65536_104 + 1),a
                                   1434 ;	ecen4330_lcd_v3.c:270: drawPixel(x0 + x, y0 + y, color);
      000475 AC*30            [24] 1435 	mov	r4,_drawCircle_x0_65536_103
      000477 AD*31            [24] 1436 	mov	r5,(_drawCircle_x0_65536_103 + 1)
      000479 E5*36            [12] 1437 	mov	a,_drawCircle_x_65536_104
      00047B 2C               [12] 1438 	add	a,r4
      00047C FE               [12] 1439 	mov	r6,a
      00047D E5*37            [12] 1440 	mov	a,(_drawCircle_x_65536_104 + 1)
      00047F 3D               [12] 1441 	addc	a,r5
      000480 FF               [12] 1442 	mov	r7,a
      000481 8E*38            [24] 1443 	mov	_drawCircle_sloc0_1_0,r6
      000483 8F*39            [24] 1444 	mov	(_drawCircle_sloc0_1_0 + 1),r7
      000485 AA*2A            [24] 1445 	mov	r2,_drawCircle_PARM_2
      000487 AB*2B            [24] 1446 	mov	r3,(_drawCircle_PARM_2 + 1)
      000489 E8               [12] 1447 	mov	a,r0
      00048A 2A               [12] 1448 	add	a,r2
      00048B FE               [12] 1449 	mov	r6,a
      00048C E9               [12] 1450 	mov	a,r1
      00048D 3B               [12] 1451 	addc	a,r3
      00048E FF               [12] 1452 	mov	r7,a
      00048F 8E*3A            [24] 1453 	mov	_drawCircle_sloc1_1_0,r6
      000491 8F*3B            [24] 1454 	mov	(_drawCircle_sloc1_1_0 + 1),r7
      000493 85*3A*26         [24] 1455 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      000496 85*3B*27         [24] 1456 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      000499 85*2E*28         [24] 1457 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00049C 85*2F*29         [24] 1458 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00049F 85*38 82         [24] 1459 	mov	dpl,_drawCircle_sloc0_1_0
      0004A2 85*39 83         [24] 1460 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      0004A5 C0 05            [24] 1461 	push	ar5
      0004A7 C0 04            [24] 1462 	push	ar4
      0004A9 C0 03            [24] 1463 	push	ar3
      0004AB C0 02            [24] 1464 	push	ar2
      0004AD C0 01            [24] 1465 	push	ar1
      0004AF C0 00            [24] 1466 	push	ar0
      0004B1 12r03r1E         [24] 1467 	lcall	_drawPixel
      0004B4 D0 00            [24] 1468 	pop	ar0
      0004B6 D0 01            [24] 1469 	pop	ar1
      0004B8 D0 02            [24] 1470 	pop	ar2
      0004BA D0 03            [24] 1471 	pop	ar3
      0004BC D0 04            [24] 1472 	pop	ar4
      0004BE D0 05            [24] 1473 	pop	ar5
                                   1474 ;	ecen4330_lcd_v3.c:271: drawPixel(x0 - x, y0 + y, color);
      0004C0 EC               [12] 1475 	mov	a,r4
      0004C1 C3               [12] 1476 	clr	c
      0004C2 95*36            [12] 1477 	subb	a,_drawCircle_x_65536_104
      0004C4 FE               [12] 1478 	mov	r6,a
      0004C5 ED               [12] 1479 	mov	a,r5
      0004C6 95*37            [12] 1480 	subb	a,(_drawCircle_x_65536_104 + 1)
      0004C8 FF               [12] 1481 	mov	r7,a
      0004C9 8E*3C            [24] 1482 	mov	_drawCircle_sloc2_1_0,r6
      0004CB 8F*3D            [24] 1483 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      0004CD 85*3A*26         [24] 1484 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      0004D0 85*3B*27         [24] 1485 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      0004D3 85*2E*28         [24] 1486 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004D6 85*2F*29         [24] 1487 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004D9 85*3C 82         [24] 1488 	mov	dpl,_drawCircle_sloc2_1_0
      0004DC 85*3D 83         [24] 1489 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0004DF C0 05            [24] 1490 	push	ar5
      0004E1 C0 04            [24] 1491 	push	ar4
      0004E3 C0 03            [24] 1492 	push	ar3
      0004E5 C0 02            [24] 1493 	push	ar2
      0004E7 C0 01            [24] 1494 	push	ar1
      0004E9 C0 00            [24] 1495 	push	ar0
      0004EB 12r03r1E         [24] 1496 	lcall	_drawPixel
      0004EE D0 00            [24] 1497 	pop	ar0
      0004F0 D0 01            [24] 1498 	pop	ar1
      0004F2 D0 02            [24] 1499 	pop	ar2
      0004F4 D0 03            [24] 1500 	pop	ar3
      0004F6 D0 04            [24] 1501 	pop	ar4
      0004F8 D0 05            [24] 1502 	pop	ar5
                                   1503 ;	ecen4330_lcd_v3.c:272: drawPixel(x0 + x, y0 - y, color);
      0004FA EA               [12] 1504 	mov	a,r2
      0004FB C3               [12] 1505 	clr	c
      0004FC 98               [12] 1506 	subb	a,r0
      0004FD FE               [12] 1507 	mov	r6,a
      0004FE EB               [12] 1508 	mov	a,r3
      0004FF 99               [12] 1509 	subb	a,r1
      000500 FF               [12] 1510 	mov	r7,a
      000501 8E*26            [24] 1511 	mov	_drawPixel_PARM_2,r6
      000503 8F*27            [24] 1512 	mov	(_drawPixel_PARM_2 + 1),r7
      000505 85*2E*28         [24] 1513 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000508 85*2F*29         [24] 1514 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00050B 85*38 82         [24] 1515 	mov	dpl,_drawCircle_sloc0_1_0
      00050E 85*39 83         [24] 1516 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      000511 C0 07            [24] 1517 	push	ar7
      000513 C0 06            [24] 1518 	push	ar6
      000515 C0 05            [24] 1519 	push	ar5
      000517 C0 04            [24] 1520 	push	ar4
      000519 C0 03            [24] 1521 	push	ar3
      00051B C0 02            [24] 1522 	push	ar2
      00051D C0 01            [24] 1523 	push	ar1
      00051F C0 00            [24] 1524 	push	ar0
      000521 12r03r1E         [24] 1525 	lcall	_drawPixel
      000524 D0 00            [24] 1526 	pop	ar0
      000526 D0 01            [24] 1527 	pop	ar1
      000528 D0 02            [24] 1528 	pop	ar2
      00052A D0 03            [24] 1529 	pop	ar3
      00052C D0 04            [24] 1530 	pop	ar4
      00052E D0 05            [24] 1531 	pop	ar5
      000530 D0 06            [24] 1532 	pop	ar6
      000532 D0 07            [24] 1533 	pop	ar7
                                   1534 ;	ecen4330_lcd_v3.c:273: drawPixel(x0 - x, y0 - y, color);
      000534 8E*26            [24] 1535 	mov	_drawPixel_PARM_2,r6
      000536 8F*27            [24] 1536 	mov	(_drawPixel_PARM_2 + 1),r7
      000538 85*2E*28         [24] 1537 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00053B 85*2F*29         [24] 1538 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00053E 85*3C 82         [24] 1539 	mov	dpl,_drawCircle_sloc2_1_0
      000541 85*3D 83         [24] 1540 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000544 C0 05            [24] 1541 	push	ar5
      000546 C0 04            [24] 1542 	push	ar4
      000548 C0 03            [24] 1543 	push	ar3
      00054A C0 02            [24] 1544 	push	ar2
      00054C C0 01            [24] 1545 	push	ar1
      00054E C0 00            [24] 1546 	push	ar0
      000550 12r03r1E         [24] 1547 	lcall	_drawPixel
      000553 D0 00            [24] 1548 	pop	ar0
      000555 D0 01            [24] 1549 	pop	ar1
      000557 D0 02            [24] 1550 	pop	ar2
      000559 D0 03            [24] 1551 	pop	ar3
      00055B D0 04            [24] 1552 	pop	ar4
      00055D D0 05            [24] 1553 	pop	ar5
                                   1554 ;	ecen4330_lcd_v3.c:274: drawPixel(x0 + y, y0 + x, color);
      00055F E8               [12] 1555 	mov	a,r0
      000560 2C               [12] 1556 	add	a,r4
      000561 FE               [12] 1557 	mov	r6,a
      000562 E9               [12] 1558 	mov	a,r1
      000563 3D               [12] 1559 	addc	a,r5
      000564 FF               [12] 1560 	mov	r7,a
      000565 8E*3C            [24] 1561 	mov	_drawCircle_sloc2_1_0,r6
      000567 8F*3D            [24] 1562 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      000569 E5*36            [12] 1563 	mov	a,_drawCircle_x_65536_104
      00056B 2A               [12] 1564 	add	a,r2
      00056C FE               [12] 1565 	mov	r6,a
      00056D E5*37            [12] 1566 	mov	a,(_drawCircle_x_65536_104 + 1)
      00056F 3B               [12] 1567 	addc	a,r3
      000570 FF               [12] 1568 	mov	r7,a
      000571 8E*26            [24] 1569 	mov	_drawPixel_PARM_2,r6
      000573 8F*27            [24] 1570 	mov	(_drawPixel_PARM_2 + 1),r7
      000575 85*2E*28         [24] 1571 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000578 85*2F*29         [24] 1572 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00057B 85*3C 82         [24] 1573 	mov	dpl,_drawCircle_sloc2_1_0
      00057E 85*3D 83         [24] 1574 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000581 C0 07            [24] 1575 	push	ar7
      000583 C0 06            [24] 1576 	push	ar6
      000585 C0 05            [24] 1577 	push	ar5
      000587 C0 04            [24] 1578 	push	ar4
      000589 C0 03            [24] 1579 	push	ar3
      00058B C0 02            [24] 1580 	push	ar2
      00058D C0 01            [24] 1581 	push	ar1
      00058F C0 00            [24] 1582 	push	ar0
      000591 12r03r1E         [24] 1583 	lcall	_drawPixel
      000594 D0 00            [24] 1584 	pop	ar0
      000596 D0 01            [24] 1585 	pop	ar1
      000598 D0 02            [24] 1586 	pop	ar2
      00059A D0 03            [24] 1587 	pop	ar3
      00059C D0 04            [24] 1588 	pop	ar4
      00059E D0 05            [24] 1589 	pop	ar5
      0005A0 D0 06            [24] 1590 	pop	ar6
      0005A2 D0 07            [24] 1591 	pop	ar7
                                   1592 ;	ecen4330_lcd_v3.c:275: drawPixel(x0 - y, y0 + x, color);
      0005A4 EC               [12] 1593 	mov	a,r4
      0005A5 C3               [12] 1594 	clr	c
      0005A6 98               [12] 1595 	subb	a,r0
      0005A7 FC               [12] 1596 	mov	r4,a
      0005A8 ED               [12] 1597 	mov	a,r5
      0005A9 99               [12] 1598 	subb	a,r1
      0005AA FD               [12] 1599 	mov	r5,a
      0005AB 8E*26            [24] 1600 	mov	_drawPixel_PARM_2,r6
      0005AD 8F*27            [24] 1601 	mov	(_drawPixel_PARM_2 + 1),r7
      0005AF 85*2E*28         [24] 1602 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B2 85*2F*29         [24] 1603 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005B5 8C 82            [24] 1604 	mov	dpl,r4
      0005B7 8D 83            [24] 1605 	mov	dph,r5
      0005B9 C0 05            [24] 1606 	push	ar5
      0005BB C0 04            [24] 1607 	push	ar4
      0005BD C0 03            [24] 1608 	push	ar3
      0005BF C0 02            [24] 1609 	push	ar2
      0005C1 C0 01            [24] 1610 	push	ar1
      0005C3 C0 00            [24] 1611 	push	ar0
      0005C5 12r03r1E         [24] 1612 	lcall	_drawPixel
      0005C8 D0 00            [24] 1613 	pop	ar0
      0005CA D0 01            [24] 1614 	pop	ar1
      0005CC D0 02            [24] 1615 	pop	ar2
      0005CE D0 03            [24] 1616 	pop	ar3
                                   1617 ;	ecen4330_lcd_v3.c:276: drawPixel(x0 + y, y0 - x, color);
      0005D0 EA               [12] 1618 	mov	a,r2
      0005D1 C3               [12] 1619 	clr	c
      0005D2 95*36            [12] 1620 	subb	a,_drawCircle_x_65536_104
      0005D4 FA               [12] 1621 	mov	r2,a
      0005D5 EB               [12] 1622 	mov	a,r3
      0005D6 95*37            [12] 1623 	subb	a,(_drawCircle_x_65536_104 + 1)
      0005D8 FB               [12] 1624 	mov	r3,a
      0005D9 8A*26            [24] 1625 	mov	_drawPixel_PARM_2,r2
      0005DB 8B*27            [24] 1626 	mov	(_drawPixel_PARM_2 + 1),r3
      0005DD 85*2E*28         [24] 1627 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005E0 85*2F*29         [24] 1628 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005E3 85*3C 82         [24] 1629 	mov	dpl,_drawCircle_sloc2_1_0
      0005E6 85*3D 83         [24] 1630 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0005E9 C0 03            [24] 1631 	push	ar3
      0005EB C0 02            [24] 1632 	push	ar2
      0005ED C0 01            [24] 1633 	push	ar1
      0005EF C0 00            [24] 1634 	push	ar0
      0005F1 12r03r1E         [24] 1635 	lcall	_drawPixel
      0005F4 D0 00            [24] 1636 	pop	ar0
      0005F6 D0 01            [24] 1637 	pop	ar1
      0005F8 D0 02            [24] 1638 	pop	ar2
      0005FA D0 03            [24] 1639 	pop	ar3
      0005FC D0 04            [24] 1640 	pop	ar4
      0005FE D0 05            [24] 1641 	pop	ar5
                                   1642 ;	ecen4330_lcd_v3.c:277: drawPixel(x0 - y, y0 - x, color);
      000600 8A*26            [24] 1643 	mov	_drawPixel_PARM_2,r2
      000602 8B*27            [24] 1644 	mov	(_drawPixel_PARM_2 + 1),r3
      000604 85*2E*28         [24] 1645 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000607 85*2F*29         [24] 1646 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00060A 8C 82            [24] 1647 	mov	dpl,r4
      00060C 8D 83            [24] 1648 	mov	dph,r5
      00060E C0 03            [24] 1649 	push	ar3
      000610 C0 02            [24] 1650 	push	ar2
      000612 C0 01            [24] 1651 	push	ar1
      000614 C0 00            [24] 1652 	push	ar0
      000616 12r03r1E         [24] 1653 	lcall	_drawPixel
      000619 D0 00            [24] 1654 	pop	ar0
      00061B D0 01            [24] 1655 	pop	ar1
      00061D D0 02            [24] 1656 	pop	ar2
      00061F D0 03            [24] 1657 	pop	ar3
      000621 D0 03            [24] 1658 	pop	ar3
      000623 D0 02            [24] 1659 	pop	ar2
                                   1660 ;	ecen4330_lcd_v3.c:279: }
      000625 02r04r25         [24] 1661 	ljmp	00103$
                                   1662 ;------------------------------------------------------------
                                   1663 ;Allocation info for local variables in function 'testCircles'
                                   1664 ;------------------------------------------------------------
                                   1665 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1666 ;radius                    Allocated to registers r7 
                                   1667 ;x                         Allocated to registers r1 r2 
                                   1668 ;y                         Allocated to registers r0 r6 
                                   1669 ;r2                        Allocated to registers r3 r4 
                                   1670 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1671 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1672 ;------------------------------------------------------------
                                   1673 ;	ecen4330_lcd_v3.c:287: void testCircles (uint8_t radius, uint16_t color) {
                                   1674 ;	-----------------------------------------
                                   1675 ;	 function testCircles
                                   1676 ;	-----------------------------------------
      000628                       1677 _testCircles:
      000628 AF 82            [24] 1678 	mov	r7,dpl
                                   1679 ;	ecen4330_lcd_v3.c:288: int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00062A 8F 05            [24] 1680 	mov	ar5,r7
      00062C 7E 00            [12] 1681 	mov	r6,#0x00
      00062E ED               [12] 1682 	mov	a,r5
      00062F 2D               [12] 1683 	add	a,r5
      000630 FB               [12] 1684 	mov	r3,a
      000631 EE               [12] 1685 	mov	a,r6
      000632 33               [12] 1686 	rlc	a
      000633 FC               [12] 1687 	mov	r4,a
      000634 A9*22            [24] 1688 	mov	r1,__width
      000636 AA*23            [24] 1689 	mov	r2,(__width + 1)
      000638 ED               [12] 1690 	mov	a,r5
      000639 29               [12] 1691 	add	a,r1
      00063A F5*40            [12] 1692 	mov	_testCircles_w_65536_108,a
      00063C EE               [12] 1693 	mov	a,r6
      00063D 3A               [12] 1694 	addc	a,r2
      00063E F5*41            [12] 1695 	mov	(_testCircles_w_65536_108 + 1),a
      000640 A8*24            [24] 1696 	mov	r0,__height
      000642 AA*25            [24] 1697 	mov	r2,(__height + 1)
      000644 ED               [12] 1698 	mov	a,r5
      000645 28               [12] 1699 	add	a,r0
      000646 F5*42            [12] 1700 	mov	_testCircles_h_65536_108,a
      000648 EE               [12] 1701 	mov	a,r6
      000649 3A               [12] 1702 	addc	a,r2
      00064A F5*43            [12] 1703 	mov	(_testCircles_h_65536_108 + 1),a
                                   1704 ;	ecen4330_lcd_v3.c:290: for(x=0; x<w; x+=r2) {
      00064C 79 00            [12] 1705 	mov	r1,#0x00
      00064E 7A 00            [12] 1706 	mov	r2,#0x00
      000650                       1707 00107$:
      000650 C3               [12] 1708 	clr	c
      000651 E9               [12] 1709 	mov	a,r1
      000652 95*40            [12] 1710 	subb	a,_testCircles_w_65536_108
      000654 EA               [12] 1711 	mov	a,r2
      000655 64 80            [12] 1712 	xrl	a,#0x80
      000657 85*41 F0         [24] 1713 	mov	b,(_testCircles_w_65536_108 + 1)
      00065A 63 F0 80         [24] 1714 	xrl	b,#0x80
      00065D 95 F0            [12] 1715 	subb	a,b
      00065F 50 57            [24] 1716 	jnc	00109$
                                   1717 ;	ecen4330_lcd_v3.c:291: for(y=0; y<h; y+=r2) {
      000661 78 00            [12] 1718 	mov	r0,#0x00
      000663 7E 00            [12] 1719 	mov	r6,#0x00
      000665                       1720 00104$:
      000665 C3               [12] 1721 	clr	c
      000666 E8               [12] 1722 	mov	a,r0
      000667 95*42            [12] 1723 	subb	a,_testCircles_h_65536_108
      000669 EE               [12] 1724 	mov	a,r6
      00066A 64 80            [12] 1725 	xrl	a,#0x80
      00066C 85*43 F0         [24] 1726 	mov	b,(_testCircles_h_65536_108 + 1)
      00066F 63 F0 80         [24] 1727 	xrl	b,#0x80
      000672 95 F0            [12] 1728 	subb	a,b
      000674 50 3A            [24] 1729 	jnc	00108$
                                   1730 ;	ecen4330_lcd_v3.c:292: drawCircle(x, y, radius, color);
      000676 89 82            [24] 1731 	mov	dpl,r1
      000678 8A 83            [24] 1732 	mov	dph,r2
      00067A 88*2A            [24] 1733 	mov	_drawCircle_PARM_2,r0
      00067C 8E*2B            [24] 1734 	mov	(_drawCircle_PARM_2 + 1),r6
      00067E 8F*2C            [24] 1735 	mov	_drawCircle_PARM_3,r7
      000680 75*2D 00         [24] 1736 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000683 85*3E*2E         [24] 1737 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000686 85*3F*2F         [24] 1738 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000689 C0 07            [24] 1739 	push	ar7
      00068B C0 06            [24] 1740 	push	ar6
      00068D C0 04            [24] 1741 	push	ar4
      00068F C0 03            [24] 1742 	push	ar3
      000691 C0 02            [24] 1743 	push	ar2
      000693 C0 01            [24] 1744 	push	ar1
      000695 C0 00            [24] 1745 	push	ar0
      000697 12r03r75         [24] 1746 	lcall	_drawCircle
      00069A D0 00            [24] 1747 	pop	ar0
      00069C D0 01            [24] 1748 	pop	ar1
      00069E D0 02            [24] 1749 	pop	ar2
      0006A0 D0 03            [24] 1750 	pop	ar3
      0006A2 D0 04            [24] 1751 	pop	ar4
      0006A4 D0 06            [24] 1752 	pop	ar6
      0006A6 D0 07            [24] 1753 	pop	ar7
                                   1754 ;	ecen4330_lcd_v3.c:291: for(y=0; y<h; y+=r2) {
      0006A8 EB               [12] 1755 	mov	a,r3
      0006A9 28               [12] 1756 	add	a,r0
      0006AA F8               [12] 1757 	mov	r0,a
      0006AB EC               [12] 1758 	mov	a,r4
      0006AC 3E               [12] 1759 	addc	a,r6
      0006AD FE               [12] 1760 	mov	r6,a
      0006AE 80 B5            [24] 1761 	sjmp	00104$
      0006B0                       1762 00108$:
                                   1763 ;	ecen4330_lcd_v3.c:290: for(x=0; x<w; x+=r2) {
      0006B0 EB               [12] 1764 	mov	a,r3
      0006B1 29               [12] 1765 	add	a,r1
      0006B2 F9               [12] 1766 	mov	r1,a
      0006B3 EC               [12] 1767 	mov	a,r4
      0006B4 3A               [12] 1768 	addc	a,r2
      0006B5 FA               [12] 1769 	mov	r2,a
      0006B6 80 98            [24] 1770 	sjmp	00107$
      0006B8                       1771 00109$:
                                   1772 ;	ecen4330_lcd_v3.c:295: }
      0006B8 22               [24] 1773 	ret
                                   1774 ;------------------------------------------------------------
                                   1775 ;Allocation info for local variables in function 'fillRect'
                                   1776 ;------------------------------------------------------------
                                   1777 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1778 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1779 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1780 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1781 ;x                         Allocated to registers 
                                   1782 ;------------------------------------------------------------
                                   1783 ;	ecen4330_lcd_v3.c:297: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1784 ;	-----------------------------------------
                                   1785 ;	 function fillRect
                                   1786 ;	-----------------------------------------
      0006B9                       1787 _fillRect:
      0006B9 AE 82            [24] 1788 	mov	r6,dpl
      0006BB AF 83            [24] 1789 	mov	r7,dph
                                   1790 ;	ecen4330_lcd_v3.c:298: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0006BD 8E 04            [24] 1791 	mov	ar4,r6
      0006BF 8F 05            [24] 1792 	mov	ar5,r7
      0006C1 C3               [12] 1793 	clr	c
      0006C2 EC               [12] 1794 	mov	a,r4
      0006C3 94 F0            [12] 1795 	subb	a,#0xf0
      0006C5 ED               [12] 1796 	mov	a,r5
      0006C6 94 00            [12] 1797 	subb	a,#0x00
      0006C8 50 0D            [24] 1798 	jnc	00101$
      0006CA AC*44            [24] 1799 	mov	r4,_fillRect_PARM_2
      0006CC AD*45            [24] 1800 	mov	r5,(_fillRect_PARM_2 + 1)
      0006CE C3               [12] 1801 	clr	c
      0006CF EC               [12] 1802 	mov	a,r4
      0006D0 94 40            [12] 1803 	subb	a,#0x40
      0006D2 ED               [12] 1804 	mov	a,r5
      0006D3 94 01            [12] 1805 	subb	a,#0x01
      0006D5 40 01            [24] 1806 	jc	00102$
      0006D7                       1807 00101$:
                                   1808 ;	ecen4330_lcd_v3.c:300: return;
      0006D7 22               [24] 1809 	ret
      0006D8                       1810 00102$:
                                   1811 ;	ecen4330_lcd_v3.c:303: if ((x+w-1) >= TFTWIDTH)
      0006D8 E5*46            [12] 1812 	mov	a,_fillRect_PARM_3
      0006DA 2E               [12] 1813 	add	a,r6
      0006DB FC               [12] 1814 	mov	r4,a
      0006DC E5*47            [12] 1815 	mov	a,(_fillRect_PARM_3 + 1)
      0006DE 3F               [12] 1816 	addc	a,r7
      0006DF FD               [12] 1817 	mov	r5,a
      0006E0 1C               [12] 1818 	dec	r4
      0006E1 BC FF 01         [24] 1819 	cjne	r4,#0xff,00161$
      0006E4 1D               [12] 1820 	dec	r5
      0006E5                       1821 00161$:
      0006E5 C3               [12] 1822 	clr	c
      0006E6 EC               [12] 1823 	mov	a,r4
      0006E7 94 F0            [12] 1824 	subb	a,#0xf0
      0006E9 ED               [12] 1825 	mov	a,r5
      0006EA 94 00            [12] 1826 	subb	a,#0x00
      0006EC 40 0A            [24] 1827 	jc	00105$
                                   1828 ;	ecen4330_lcd_v3.c:305: w = TFTWIDTH-x;
      0006EE 74 F0            [12] 1829 	mov	a,#0xf0
      0006F0 C3               [12] 1830 	clr	c
      0006F1 9E               [12] 1831 	subb	a,r6
      0006F2 F5*46            [12] 1832 	mov	_fillRect_PARM_3,a
      0006F4 E4               [12] 1833 	clr	a
      0006F5 9F               [12] 1834 	subb	a,r7
      0006F6 F5*47            [12] 1835 	mov	(_fillRect_PARM_3 + 1),a
      0006F8                       1836 00105$:
                                   1837 ;	ecen4330_lcd_v3.c:308: if ((y+h-1) >= TFTHEIGHT)
      0006F8 E5*48            [12] 1838 	mov	a,_fillRect_PARM_4
      0006FA 25*44            [12] 1839 	add	a,_fillRect_PARM_2
      0006FC FC               [12] 1840 	mov	r4,a
      0006FD E5*49            [12] 1841 	mov	a,(_fillRect_PARM_4 + 1)
      0006FF 35*45            [12] 1842 	addc	a,(_fillRect_PARM_2 + 1)
      000701 FD               [12] 1843 	mov	r5,a
      000702 1C               [12] 1844 	dec	r4
      000703 BC FF 01         [24] 1845 	cjne	r4,#0xff,00163$
      000706 1D               [12] 1846 	dec	r5
      000707                       1847 00163$:
      000707 C3               [12] 1848 	clr	c
      000708 EC               [12] 1849 	mov	a,r4
      000709 94 40            [12] 1850 	subb	a,#0x40
      00070B ED               [12] 1851 	mov	a,r5
      00070C 94 01            [12] 1852 	subb	a,#0x01
      00070E 40 0D            [24] 1853 	jc	00107$
                                   1854 ;	ecen4330_lcd_v3.c:310: h = TFTHEIGHT-y;
      000710 74 40            [12] 1855 	mov	a,#0x40
      000712 C3               [12] 1856 	clr	c
      000713 95*44            [12] 1857 	subb	a,_fillRect_PARM_2
      000715 F5*48            [12] 1858 	mov	_fillRect_PARM_4,a
      000717 74 01            [12] 1859 	mov	a,#0x01
      000719 95*45            [12] 1860 	subb	a,(_fillRect_PARM_2 + 1)
      00071B F5*49            [12] 1861 	mov	(_fillRect_PARM_4 + 1),a
      00071D                       1862 00107$:
                                   1863 ;	ecen4330_lcd_v3.c:313: setAddress(x, y, x+w-1, y+h-1);
      00071D E5*46            [12] 1864 	mov	a,_fillRect_PARM_3
      00071F 2E               [12] 1865 	add	a,r6
      000720 FC               [12] 1866 	mov	r4,a
      000721 E5*47            [12] 1867 	mov	a,(_fillRect_PARM_3 + 1)
      000723 3F               [12] 1868 	addc	a,r7
      000724 FD               [12] 1869 	mov	r5,a
      000725 1C               [12] 1870 	dec	r4
      000726 BC FF 01         [24] 1871 	cjne	r4,#0xff,00165$
      000729 1D               [12] 1872 	dec	r5
      00072A                       1873 00165$:
      00072A 8C*02            [24] 1874 	mov	_setAddress_PARM_3,r4
      00072C 8D*03            [24] 1875 	mov	(_setAddress_PARM_3 + 1),r5
      00072E E5*48            [12] 1876 	mov	a,_fillRect_PARM_4
      000730 25*44            [12] 1877 	add	a,_fillRect_PARM_2
      000732 FC               [12] 1878 	mov	r4,a
      000733 E5*49            [12] 1879 	mov	a,(_fillRect_PARM_4 + 1)
      000735 35*45            [12] 1880 	addc	a,(_fillRect_PARM_2 + 1)
      000737 FD               [12] 1881 	mov	r5,a
      000738 1C               [12] 1882 	dec	r4
      000739 BC FF 01         [24] 1883 	cjne	r4,#0xff,00166$
      00073C 1D               [12] 1884 	dec	r5
      00073D                       1885 00166$:
      00073D 8C*04            [24] 1886 	mov	_setAddress_PARM_4,r4
      00073F 8D*05            [24] 1887 	mov	(_setAddress_PARM_4 + 1),r5
      000741 85*44*00         [24] 1888 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000744 85*45*01         [24] 1889 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000747 8E 82            [24] 1890 	mov	dpl,r6
      000749 8F 83            [24] 1891 	mov	dph,r7
      00074B 12r01r42         [24] 1892 	lcall	_setAddress
                                   1893 ;	ecen4330_lcd_v3.c:316: write8Reg(0x2C);
                                   1894 ;	assignBit
      00074E C2 B5            [12] 1895 	clr	_P3_5
                                   1896 ;	assignBit
      000750 D2 B4            [12] 1897 	setb	_P3_4
      000752 85*12 82         [24] 1898 	mov	dpl,_lcd_address
      000755 85*13 83         [24] 1899 	mov	dph,(_lcd_address + 1)
      000758 74 2C            [12] 1900 	mov	a,#0x2c
      00075A F0               [24] 1901 	movx	@dptr,a
                                   1902 ;	assignBit
      00075B C2 B4            [12] 1903 	clr	_P3_4
                                   1904 ;	ecen4330_lcd_v3.c:317: CD = 1;
                                   1905 ;	assignBit
      00075D D2 B5            [12] 1906 	setb	_P3_5
                                   1907 ;	ecen4330_lcd_v3.c:318: for(y=h; y>0; y--)
      00075F AF*4B            [24] 1908 	mov	r7,(_fillRect_PARM_5 + 1)
      000761 AD*48            [24] 1909 	mov	r5,_fillRect_PARM_4
      000763 AE*49            [24] 1910 	mov	r6,(_fillRect_PARM_4 + 1)
      000765                       1911 00114$:
      000765 ED               [12] 1912 	mov	a,r5
      000766 4E               [12] 1913 	orl	a,r6
      000767 60 30            [24] 1914 	jz	00116$
                                   1915 ;	ecen4330_lcd_v3.c:320: for(x=w; x>0; x--)
      000769 AB*46            [24] 1916 	mov	r3,_fillRect_PARM_3
      00076B AC*47            [24] 1917 	mov	r4,(_fillRect_PARM_3 + 1)
      00076D                       1918 00111$:
      00076D EB               [12] 1919 	mov	a,r3
      00076E 4C               [12] 1920 	orl	a,r4
      00076F 60 21            [24] 1921 	jz	00115$
                                   1922 ;	ecen4330_lcd_v3.c:323: write8(color>>8); write8(color);
                                   1923 ;	assignBit
      000771 D2 B4            [12] 1924 	setb	_P3_4
      000773 85*12 82         [24] 1925 	mov	dpl,_lcd_address
      000776 85*13 83         [24] 1926 	mov	dph,(_lcd_address + 1)
      000779 EF               [12] 1927 	mov	a,r7
      00077A F0               [24] 1928 	movx	@dptr,a
                                   1929 ;	assignBit
      00077B C2 B4            [12] 1930 	clr	_P3_4
                                   1931 ;	assignBit
      00077D D2 B4            [12] 1932 	setb	_P3_4
      00077F 85*12 82         [24] 1933 	mov	dpl,_lcd_address
      000782 85*13 83         [24] 1934 	mov	dph,(_lcd_address + 1)
      000785 E5*4A            [12] 1935 	mov	a,_fillRect_PARM_5
      000787 FA               [12] 1936 	mov	r2,a
      000788 F0               [24] 1937 	movx	@dptr,a
                                   1938 ;	assignBit
      000789 C2 B4            [12] 1939 	clr	_P3_4
                                   1940 ;	ecen4330_lcd_v3.c:320: for(x=w; x>0; x--)
      00078B 1B               [12] 1941 	dec	r3
      00078C BB FF 01         [24] 1942 	cjne	r3,#0xff,00169$
      00078F 1C               [12] 1943 	dec	r4
      000790                       1944 00169$:
      000790 80 DB            [24] 1945 	sjmp	00111$
      000792                       1946 00115$:
                                   1947 ;	ecen4330_lcd_v3.c:318: for(y=h; y>0; y--)
      000792 1D               [12] 1948 	dec	r5
      000793 BD FF 01         [24] 1949 	cjne	r5,#0xff,00170$
      000796 1E               [12] 1950 	dec	r6
      000797                       1951 00170$:
      000797 80 CC            [24] 1952 	sjmp	00114$
      000799                       1953 00116$:
                                   1954 ;	ecen4330_lcd_v3.c:327: }
      000799 22               [24] 1955 	ret
                                   1956 ;------------------------------------------------------------
                                   1957 ;Allocation info for local variables in function 'fillScreen'
                                   1958 ;------------------------------------------------------------
                                   1959 ;Color                     Allocated to registers r6 r7 
                                   1960 ;len                       Allocated to registers 
                                   1961 ;blocks                    Allocated to registers r4 r7 
                                   1962 ;i                         Allocated to registers r3 
                                   1963 ;hi                        Allocated to registers r5 
                                   1964 ;lo                        Allocated to registers r6 
                                   1965 ;------------------------------------------------------------
                                   1966 ;	ecen4330_lcd_v3.c:334: void fillScreen (uint16_t Color) {
                                   1967 ;	-----------------------------------------
                                   1968 ;	 function fillScreen
                                   1969 ;	-----------------------------------------
      00079A                       1970 _fillScreen:
      00079A AE 82            [24] 1971 	mov	r6,dpl
      00079C AF 83            [24] 1972 	mov	r7,dph
                                   1973 ;	ecen4330_lcd_v3.c:339: uint8_t  i, hi = Color >> 8,
      00079E 8F 05            [24] 1974 	mov	ar5,r7
                                   1975 ;	ecen4330_lcd_v3.c:340: lo = Color;
                                   1976 ;	ecen4330_lcd_v3.c:343: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007A0 E4               [12] 1977 	clr	a
      0007A1 F5*00            [12] 1978 	mov	_setAddress_PARM_2,a
      0007A3 F5*01            [12] 1979 	mov	(_setAddress_PARM_2 + 1),a
      0007A5 75*02 EF         [24] 1980 	mov	_setAddress_PARM_3,#0xef
                                   1981 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007A8 F5*03            [12] 1982 	mov	(_setAddress_PARM_3 + 1),a
      0007AA 75*04 3F         [24] 1983 	mov	_setAddress_PARM_4,#0x3f
      0007AD 75*05 01         [24] 1984 	mov	(_setAddress_PARM_4 + 1),#0x01
      0007B0 90 00 00         [24] 1985 	mov	dptr,#0x0000
      0007B3 C0 06            [24] 1986 	push	ar6
      0007B5 C0 05            [24] 1987 	push	ar5
      0007B7 12r01r42         [24] 1988 	lcall	_setAddress
      0007BA D0 05            [24] 1989 	pop	ar5
      0007BC D0 06            [24] 1990 	pop	ar6
                                   1991 ;	ecen4330_lcd_v3.c:345: write8Reg(0x2C);
                                   1992 ;	assignBit
      0007BE C2 B5            [12] 1993 	clr	_P3_5
                                   1994 ;	assignBit
      0007C0 D2 B4            [12] 1995 	setb	_P3_4
      0007C2 85*12 82         [24] 1996 	mov	dpl,_lcd_address
      0007C5 85*13 83         [24] 1997 	mov	dph,(_lcd_address + 1)
      0007C8 74 2C            [12] 1998 	mov	a,#0x2c
      0007CA F0               [24] 1999 	movx	@dptr,a
                                   2000 ;	assignBit
      0007CB C2 B4            [12] 2001 	clr	_P3_4
                                   2002 ;	ecen4330_lcd_v3.c:346: CD = 1;
                                   2003 ;	assignBit
      0007CD D2 B5            [12] 2004 	setb	_P3_5
                                   2005 ;	ecen4330_lcd_v3.c:347: write8(hi); write8(lo);
                                   2006 ;	assignBit
      0007CF D2 B4            [12] 2007 	setb	_P3_4
      0007D1 85*12 82         [24] 2008 	mov	dpl,_lcd_address
      0007D4 85*13 83         [24] 2009 	mov	dph,(_lcd_address + 1)
      0007D7 ED               [12] 2010 	mov	a,r5
      0007D8 F0               [24] 2011 	movx	@dptr,a
                                   2012 ;	assignBit
      0007D9 C2 B4            [12] 2013 	clr	_P3_4
                                   2014 ;	assignBit
      0007DB D2 B4            [12] 2015 	setb	_P3_4
      0007DD 85*12 82         [24] 2016 	mov	dpl,_lcd_address
      0007E0 85*13 83         [24] 2017 	mov	dph,(_lcd_address + 1)
      0007E3 EE               [12] 2018 	mov	a,r6
      0007E4 F0               [24] 2019 	movx	@dptr,a
                                   2020 ;	assignBit
      0007E5 C2 B4            [12] 2021 	clr	_P3_4
                                   2022 ;	ecen4330_lcd_v3.c:350: while (blocks--) {
      0007E7 7C B0            [12] 2023 	mov	r4,#0xb0
      0007E9 7F 04            [12] 2024 	mov	r7,#0x04
      0007EB                       2025 00104$:
      0007EB 8C 02            [24] 2026 	mov	ar2,r4
      0007ED 8F 03            [24] 2027 	mov	ar3,r7
      0007EF 1C               [12] 2028 	dec	r4
      0007F0 BC FF 01         [24] 2029 	cjne	r4,#0xff,00140$
      0007F3 1F               [12] 2030 	dec	r7
      0007F4                       2031 00140$:
      0007F4 EA               [12] 2032 	mov	a,r2
      0007F5 4B               [12] 2033 	orl	a,r3
      0007F6 60 66            [24] 2034 	jz	00106$
                                   2035 ;	ecen4330_lcd_v3.c:352: do {
      0007F8 7B 10            [12] 2036 	mov	r3,#0x10
      0007FA                       2037 00101$:
                                   2038 ;	ecen4330_lcd_v3.c:354: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2039 ;	assignBit
      0007FA D2 B4            [12] 2040 	setb	_P3_4
      0007FC 85*12 82         [24] 2041 	mov	dpl,_lcd_address
      0007FF 85*13 83         [24] 2042 	mov	dph,(_lcd_address + 1)
      000802 ED               [12] 2043 	mov	a,r5
      000803 F0               [24] 2044 	movx	@dptr,a
                                   2045 ;	assignBit
      000804 C2 B4            [12] 2046 	clr	_P3_4
                                   2047 ;	assignBit
      000806 D2 B4            [12] 2048 	setb	_P3_4
      000808 85*12 82         [24] 2049 	mov	dpl,_lcd_address
      00080B 85*13 83         [24] 2050 	mov	dph,(_lcd_address + 1)
      00080E EE               [12] 2051 	mov	a,r6
      00080F F0               [24] 2052 	movx	@dptr,a
                                   2053 ;	assignBit
      000810 C2 B4            [12] 2054 	clr	_P3_4
                                   2055 ;	assignBit
      000812 D2 B4            [12] 2056 	setb	_P3_4
      000814 85*12 82         [24] 2057 	mov	dpl,_lcd_address
      000817 85*13 83         [24] 2058 	mov	dph,(_lcd_address + 1)
      00081A ED               [12] 2059 	mov	a,r5
      00081B F0               [24] 2060 	movx	@dptr,a
                                   2061 ;	assignBit
      00081C C2 B4            [12] 2062 	clr	_P3_4
                                   2063 ;	assignBit
      00081E D2 B4            [12] 2064 	setb	_P3_4
      000820 85*12 82         [24] 2065 	mov	dpl,_lcd_address
      000823 85*13 83         [24] 2066 	mov	dph,(_lcd_address + 1)
      000826 EE               [12] 2067 	mov	a,r6
      000827 F0               [24] 2068 	movx	@dptr,a
                                   2069 ;	assignBit
      000828 C2 B4            [12] 2070 	clr	_P3_4
                                   2071 ;	ecen4330_lcd_v3.c:355: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2072 ;	assignBit
      00082A D2 B4            [12] 2073 	setb	_P3_4
      00082C 85*12 82         [24] 2074 	mov	dpl,_lcd_address
      00082F 85*13 83         [24] 2075 	mov	dph,(_lcd_address + 1)
      000832 ED               [12] 2076 	mov	a,r5
      000833 F0               [24] 2077 	movx	@dptr,a
                                   2078 ;	assignBit
      000834 C2 B4            [12] 2079 	clr	_P3_4
                                   2080 ;	assignBit
      000836 D2 B4            [12] 2081 	setb	_P3_4
      000838 85*12 82         [24] 2082 	mov	dpl,_lcd_address
      00083B 85*13 83         [24] 2083 	mov	dph,(_lcd_address + 1)
      00083E EE               [12] 2084 	mov	a,r6
      00083F F0               [24] 2085 	movx	@dptr,a
                                   2086 ;	assignBit
      000840 C2 B4            [12] 2087 	clr	_P3_4
                                   2088 ;	assignBit
      000842 D2 B4            [12] 2089 	setb	_P3_4
      000844 85*12 82         [24] 2090 	mov	dpl,_lcd_address
      000847 85*13 83         [24] 2091 	mov	dph,(_lcd_address + 1)
      00084A ED               [12] 2092 	mov	a,r5
      00084B F0               [24] 2093 	movx	@dptr,a
                                   2094 ;	assignBit
      00084C C2 B4            [12] 2095 	clr	_P3_4
                                   2096 ;	assignBit
      00084E D2 B4            [12] 2097 	setb	_P3_4
      000850 85*12 82         [24] 2098 	mov	dpl,_lcd_address
      000853 85*13 83         [24] 2099 	mov	dph,(_lcd_address + 1)
      000856 EE               [12] 2100 	mov	a,r6
      000857 F0               [24] 2101 	movx	@dptr,a
                                   2102 ;	assignBit
      000858 C2 B4            [12] 2103 	clr	_P3_4
                                   2104 ;	ecen4330_lcd_v3.c:356: } while(--i);
      00085A DB 9E            [24] 2105 	djnz	r3,00101$
      00085C 80 8D            [24] 2106 	sjmp	00104$
      00085E                       2107 00106$:
                                   2108 ;	ecen4330_lcd_v3.c:358: for (i = (char)len & 63; i--; ) {
      00085E 7F 3F            [12] 2109 	mov	r7,#0x3f
      000860                       2110 00109$:
      000860 8F 04            [24] 2111 	mov	ar4,r7
      000862 1F               [12] 2112 	dec	r7
      000863 EC               [12] 2113 	mov	a,r4
      000864 60 1A            [24] 2114 	jz	00111$
                                   2115 ;	ecen4330_lcd_v3.c:360: write8(hi); write8(lo);
                                   2116 ;	assignBit
      000866 D2 B4            [12] 2117 	setb	_P3_4
      000868 85*12 82         [24] 2118 	mov	dpl,_lcd_address
      00086B 85*13 83         [24] 2119 	mov	dph,(_lcd_address + 1)
      00086E ED               [12] 2120 	mov	a,r5
      00086F F0               [24] 2121 	movx	@dptr,a
                                   2122 ;	assignBit
      000870 C2 B4            [12] 2123 	clr	_P3_4
                                   2124 ;	assignBit
      000872 D2 B4            [12] 2125 	setb	_P3_4
      000874 85*12 82         [24] 2126 	mov	dpl,_lcd_address
      000877 85*13 83         [24] 2127 	mov	dph,(_lcd_address + 1)
      00087A EE               [12] 2128 	mov	a,r6
      00087B F0               [24] 2129 	movx	@dptr,a
                                   2130 ;	assignBit
      00087C C2 B4            [12] 2131 	clr	_P3_4
      00087E 80 E0            [24] 2132 	sjmp	00109$
      000880                       2133 00111$:
                                   2134 ;	ecen4330_lcd_v3.c:363: }
      000880 22               [24] 2135 	ret
                                   2136 ;------------------------------------------------------------
                                   2137 ;Allocation info for local variables in function 'drawChar'
                                   2138 ;------------------------------------------------------------
                                   2139 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2140 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2141 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2142 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2143 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2144 ;x                         Allocated to registers r6 r7 
                                   2145 ;i                         Allocated with name '_drawChar_i_65537_149'
                                   2146 ;line                      Allocated with name '_drawChar_line_196609_151'
                                   2147 ;j                         Allocated with name '_drawChar_j_196610_154'
                                   2148 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2149 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2150 ;------------------------------------------------------------
                                   2151 ;	ecen4330_lcd_v3.c:374: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2152 ;	-----------------------------------------
                                   2153 ;	 function drawChar
                                   2154 ;	-----------------------------------------
      000881                       2155 _drawChar:
      000881 AE 82            [24] 2156 	mov	r6,dpl
      000883 AF 83            [24] 2157 	mov	r7,dph
                                   2158 ;	ecen4330_lcd_v3.c:375: if ((x >=TFTWIDTH) ||
      000885 C3               [12] 2159 	clr	c
      000886 EE               [12] 2160 	mov	a,r6
      000887 94 F0            [12] 2161 	subb	a,#0xf0
      000889 EF               [12] 2162 	mov	a,r7
      00088A 64 80            [12] 2163 	xrl	a,#0x80
      00088C 94 80            [12] 2164 	subb	a,#0x80
      00088E 50 67            [24] 2165 	jnc	00101$
                                   2166 ;	ecen4330_lcd_v3.c:376: (y >=TFTHEIGHT)           ||
      000890 AC*4C            [24] 2167 	mov	r4,_drawChar_PARM_2
      000892 AD*4D            [24] 2168 	mov	r5,(_drawChar_PARM_2 + 1)
      000894 C3               [12] 2169 	clr	c
      000895 EC               [12] 2170 	mov	a,r4
      000896 94 40            [12] 2171 	subb	a,#0x40
      000898 ED               [12] 2172 	mov	a,r5
      000899 64 80            [12] 2173 	xrl	a,#0x80
      00089B 94 81            [12] 2174 	subb	a,#0x81
      00089D 50 58            [24] 2175 	jnc	00101$
                                   2176 ;	ecen4330_lcd_v3.c:377: ((x + 6 * size - 1) < 0) ||
      00089F AA*53            [24] 2177 	mov	r2,_drawChar_PARM_6
      0008A1 7B 00            [12] 2178 	mov	r3,#0x00
      0008A3 8A*00            [24] 2179 	mov	__mulint_PARM_2,r2
      0008A5 8B*01            [24] 2180 	mov	(__mulint_PARM_2 + 1),r3
      0008A7 90 00 06         [24] 2181 	mov	dptr,#0x0006
      0008AA C0 07            [24] 2182 	push	ar7
      0008AC C0 06            [24] 2183 	push	ar6
      0008AE C0 05            [24] 2184 	push	ar5
      0008B0 C0 04            [24] 2185 	push	ar4
      0008B2 C0 03            [24] 2186 	push	ar3
      0008B4 C0 02            [24] 2187 	push	ar2
      0008B6 12r00r00         [24] 2188 	lcall	__mulint
      0008B9 A8 82            [24] 2189 	mov	r0,dpl
      0008BB A9 83            [24] 2190 	mov	r1,dph
      0008BD D0 02            [24] 2191 	pop	ar2
      0008BF D0 03            [24] 2192 	pop	ar3
      0008C1 D0 04            [24] 2193 	pop	ar4
      0008C3 D0 05            [24] 2194 	pop	ar5
      0008C5 D0 06            [24] 2195 	pop	ar6
      0008C7 D0 07            [24] 2196 	pop	ar7
      0008C9 E8               [12] 2197 	mov	a,r0
      0008CA 2E               [12] 2198 	add	a,r6
      0008CB F8               [12] 2199 	mov	r0,a
      0008CC E9               [12] 2200 	mov	a,r1
      0008CD 3F               [12] 2201 	addc	a,r7
      0008CE F9               [12] 2202 	mov	r1,a
      0008CF 18               [12] 2203 	dec	r0
      0008D0 B8 FF 01         [24] 2204 	cjne	r0,#0xff,00176$
      0008D3 19               [12] 2205 	dec	r1
      0008D4                       2206 00176$:
      0008D4 E9               [12] 2207 	mov	a,r1
      0008D5 20 E7 1F         [24] 2208 	jb	acc.7,00101$
                                   2209 ;	ecen4330_lcd_v3.c:378: ((y + 8 * size - 1) < 0))
      0008D8 EB               [12] 2210 	mov	a,r3
      0008D9 C4               [12] 2211 	swap	a
      0008DA 03               [12] 2212 	rr	a
      0008DB 54 F8            [12] 2213 	anl	a,#0xf8
      0008DD CA               [12] 2214 	xch	a,r2
      0008DE C4               [12] 2215 	swap	a
      0008DF 03               [12] 2216 	rr	a
      0008E0 CA               [12] 2217 	xch	a,r2
      0008E1 6A               [12] 2218 	xrl	a,r2
      0008E2 CA               [12] 2219 	xch	a,r2
      0008E3 54 F8            [12] 2220 	anl	a,#0xf8
      0008E5 CA               [12] 2221 	xch	a,r2
      0008E6 6A               [12] 2222 	xrl	a,r2
      0008E7 FB               [12] 2223 	mov	r3,a
      0008E8 EA               [12] 2224 	mov	a,r2
      0008E9 2C               [12] 2225 	add	a,r4
      0008EA FA               [12] 2226 	mov	r2,a
      0008EB EB               [12] 2227 	mov	a,r3
      0008EC 3D               [12] 2228 	addc	a,r5
      0008ED FB               [12] 2229 	mov	r3,a
      0008EE 1A               [12] 2230 	dec	r2
      0008EF BA FF 01         [24] 2231 	cjne	r2,#0xff,00178$
      0008F2 1B               [12] 2232 	dec	r3
      0008F3                       2233 00178$:
      0008F3 EB               [12] 2234 	mov	a,r3
      0008F4 30 E7 01         [24] 2235 	jnb	acc.7,00138$
      0008F7                       2236 00101$:
                                   2237 ;	ecen4330_lcd_v3.c:380: return;
      0008F7 22               [24] 2238 	ret
                                   2239 ;	ecen4330_lcd_v3.c:385: for (i=0; i<6; i++ )
      0008F8                       2240 00138$:
      0008F8 74 01            [12] 2241 	mov	a,#0x01
      0008FA B5*53 04         [24] 2242 	cjne	a,_drawChar_PARM_6,00180$
      0008FD 74 01            [12] 2243 	mov	a,#0x01
      0008FF 80 01            [24] 2244 	sjmp	00181$
      000901                       2245 00180$:
      000901 E4               [12] 2246 	clr	a
      000902                       2247 00181$:
      000902 FB               [12] 2248 	mov	r3,a
      000903 FA               [12] 2249 	mov	r2,a
      000904 E5*4F            [12] 2250 	mov	a,_drawChar_PARM_4
      000906 B5*51 08         [24] 2251 	cjne	a,_drawChar_PARM_5,00182$
      000909 E5*50            [12] 2252 	mov	a,(_drawChar_PARM_4 + 1)
      00090B B5*52 03         [24] 2253 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      00090E D3               [12] 2254 	setb	c
      00090F 80 01            [24] 2255 	sjmp	00183$
      000911                       2256 00182$:
      000911 C3               [12] 2257 	clr	c
      000912                       2258 00183$:
      000912 92*00            [24] 2259 	mov	_drawChar_sloc0_1_0,c
      000914 75*54 00         [24] 2260 	mov	_drawChar_i_65537_149,#0x00
      000917                       2261 00124$:
                                   2262 ;	ecen4330_lcd_v3.c:389: if (i == 5)
      000917 74 05            [12] 2263 	mov	a,#0x05
      000919 B5*54 05         [24] 2264 	cjne	a,_drawChar_i_65537_149,00107$
                                   2265 ;	ecen4330_lcd_v3.c:391: line = 0x0;
      00091C 75*55 00         [24] 2266 	mov	_drawChar_line_196609_151,#0x00
      00091F 80 47            [24] 2267 	sjmp	00136$
      000921                       2268 00107$:
                                   2269 ;	ecen4330_lcd_v3.c:395: line = pgm_read_byte(font+(c*5)+i);
      000921 C0 02            [24] 2270 	push	ar2
      000923 85*4E*00         [24] 2271 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000926 75*01 00         [24] 2272 	mov	(__mulint_PARM_2 + 1),#0x00
      000929 90 00 05         [24] 2273 	mov	dptr,#0x0005
      00092C C0 07            [24] 2274 	push	ar7
      00092E C0 06            [24] 2275 	push	ar6
      000930 C0 05            [24] 2276 	push	ar5
      000932 C0 04            [24] 2277 	push	ar4
      000934 C0 03            [24] 2278 	push	ar3
      000936 12r00r00         [24] 2279 	lcall	__mulint
      000939 A9 82            [24] 2280 	mov	r1,dpl
      00093B AA 83            [24] 2281 	mov	r2,dph
      00093D D0 03            [24] 2282 	pop	ar3
      00093F D0 04            [24] 2283 	pop	ar4
      000941 D0 05            [24] 2284 	pop	ar5
      000943 D0 06            [24] 2285 	pop	ar6
      000945 D0 07            [24] 2286 	pop	ar7
      000947 E9               [12] 2287 	mov	a,r1
      000948 24r00            [12] 2288 	add	a,#_font
      00094A F5*57            [12] 2289 	mov	_drawChar_sloc1_1_0,a
      00094C EA               [12] 2290 	mov	a,r2
      00094D 34s00            [12] 2291 	addc	a,#(_font >> 8)
      00094F F5*58            [12] 2292 	mov	(_drawChar_sloc1_1_0 + 1),a
      000951 E5*54            [12] 2293 	mov	a,_drawChar_i_65537_149
      000953 F9               [12] 2294 	mov	r1,a
      000954 33               [12] 2295 	rlc	a
      000955 95 E0            [12] 2296 	subb	a,acc
      000957 FA               [12] 2297 	mov	r2,a
      000958 E9               [12] 2298 	mov	a,r1
      000959 25*57            [12] 2299 	add	a,_drawChar_sloc1_1_0
      00095B F5 82            [12] 2300 	mov	dpl,a
      00095D EA               [12] 2301 	mov	a,r2
      00095E 35*58            [12] 2302 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000960 F5 83            [12] 2303 	mov	dph,a
      000962 E4               [12] 2304 	clr	a
      000963 93               [24] 2305 	movc	a,@a+dptr
      000964 F5*55            [12] 2306 	mov	_drawChar_line_196609_151,a
                                   2307 ;	ecen4330_lcd_v3.c:385: for (i=0; i<6; i++ )
      000966 D0 02            [24] 2308 	pop	ar2
                                   2309 ;	ecen4330_lcd_v3.c:400: for (j = 0; j<8; j++)
      000968                       2310 00136$:
      000968 C2 D5            [12] 2311 	clr	F0
      00096A 85*53 F0         [24] 2312 	mov	b,_drawChar_PARM_6
      00096D E5*54            [12] 2313 	mov	a,_drawChar_i_65537_149
      00096F 30 E7 04         [24] 2314 	jnb	acc.7,00186$
      000972 B2 D5            [12] 2315 	cpl	F0
      000974 F4               [12] 2316 	cpl	a
      000975 04               [12] 2317 	inc	a
      000976                       2318 00186$:
      000976 A4               [48] 2319 	mul	ab
      000977 30 D5 0A         [24] 2320 	jnb	F0,00187$
      00097A F4               [12] 2321 	cpl	a
      00097B 24 01            [12] 2322 	add	a,#0x01
      00097D C5 F0            [12] 2323 	xch	a,b
      00097F F4               [12] 2324 	cpl	a
      000980 34 00            [12] 2325 	addc	a,#0x00
      000982 C5 F0            [12] 2326 	xch	a,b
      000984                       2327 00187$:
      000984 2E               [12] 2328 	add	a,r6
      000985 F5*57            [12] 2329 	mov	_drawChar_sloc1_1_0,a
      000987 EF               [12] 2330 	mov	a,r7
      000988 35 F0            [12] 2331 	addc	a,b
      00098A F5*58            [12] 2332 	mov	(_drawChar_sloc1_1_0 + 1),a
      00098C 85*57*59         [24] 2333 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      00098F 85*58*5A         [24] 2334 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000992 75*56 00         [24] 2335 	mov	_drawChar_j_196610_154,#0x00
      000995                       2336 00122$:
                                   2337 ;	ecen4330_lcd_v3.c:402: if (line & 0x1)
      000995 E5*55            [12] 2338 	mov	a,_drawChar_line_196609_151
      000997 20 E0 03         [24] 2339 	jb	acc.0,00188$
      00099A 02r0Ar42         [24] 2340 	ljmp	00118$
      00099D                       2341 00188$:
                                   2342 ;	ecen4330_lcd_v3.c:404: if (size == 1)
      00099D EB               [12] 2343 	mov	a,r3
      00099E 60 46            [24] 2344 	jz	00110$
                                   2345 ;	ecen4330_lcd_v3.c:406: drawPixel(x+i, y+j, color);
      0009A0 E5*54            [12] 2346 	mov	a,_drawChar_i_65537_149
      0009A2 F8               [12] 2347 	mov	r0,a
      0009A3 33               [12] 2348 	rlc	a
      0009A4 95 E0            [12] 2349 	subb	a,acc
      0009A6 F9               [12] 2350 	mov	r1,a
      0009A7 E8               [12] 2351 	mov	a,r0
      0009A8 2E               [12] 2352 	add	a,r6
      0009A9 F8               [12] 2353 	mov	r0,a
      0009AA E9               [12] 2354 	mov	a,r1
      0009AB 3F               [12] 2355 	addc	a,r7
      0009AC F9               [12] 2356 	mov	r1,a
      0009AD 88 82            [24] 2357 	mov	dpl,r0
      0009AF 89 83            [24] 2358 	mov	dph,r1
      0009B1 E5*56            [12] 2359 	mov	a,_drawChar_j_196610_154
      0009B3 F8               [12] 2360 	mov	r0,a
      0009B4 33               [12] 2361 	rlc	a
      0009B5 95 E0            [12] 2362 	subb	a,acc
      0009B7 F9               [12] 2363 	mov	r1,a
      0009B8 E8               [12] 2364 	mov	a,r0
      0009B9 2C               [12] 2365 	add	a,r4
      0009BA F8               [12] 2366 	mov	r0,a
      0009BB E9               [12] 2367 	mov	a,r1
      0009BC 3D               [12] 2368 	addc	a,r5
      0009BD F9               [12] 2369 	mov	r1,a
      0009BE 88*26            [24] 2370 	mov	_drawPixel_PARM_2,r0
      0009C0 89*27            [24] 2371 	mov	(_drawPixel_PARM_2 + 1),r1
      0009C2 85*4F*28         [24] 2372 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009C5 85*50*29         [24] 2373 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009C8 C0 07            [24] 2374 	push	ar7
      0009CA C0 06            [24] 2375 	push	ar6
      0009CC C0 05            [24] 2376 	push	ar5
      0009CE C0 04            [24] 2377 	push	ar4
      0009D0 C0 03            [24] 2378 	push	ar3
      0009D2 C0 02            [24] 2379 	push	ar2
      0009D4 12r03r1E         [24] 2380 	lcall	_drawPixel
      0009D7 D0 02            [24] 2381 	pop	ar2
      0009D9 D0 03            [24] 2382 	pop	ar3
      0009DB D0 04            [24] 2383 	pop	ar4
      0009DD D0 05            [24] 2384 	pop	ar5
      0009DF D0 06            [24] 2385 	pop	ar6
      0009E1 D0 07            [24] 2386 	pop	ar7
      0009E3 02r0ArE9         [24] 2387 	ljmp	00119$
      0009E6                       2388 00110$:
                                   2389 ;	ecen4330_lcd_v3.c:409: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009E6 85*59 82         [24] 2390 	mov	dpl,_drawChar_sloc2_1_0
      0009E9 85*5A 83         [24] 2391 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      0009EC C2 D5            [12] 2392 	clr	F0
      0009EE 85*53 F0         [24] 2393 	mov	b,_drawChar_PARM_6
      0009F1 E5*56            [12] 2394 	mov	a,_drawChar_j_196610_154
      0009F3 30 E7 04         [24] 2395 	jnb	acc.7,00190$
      0009F6 B2 D5            [12] 2396 	cpl	F0
      0009F8 F4               [12] 2397 	cpl	a
      0009F9 04               [12] 2398 	inc	a
      0009FA                       2399 00190$:
      0009FA A4               [48] 2400 	mul	ab
      0009FB 30 D5 0A         [24] 2401 	jnb	F0,00191$
      0009FE F4               [12] 2402 	cpl	a
      0009FF 24 01            [12] 2403 	add	a,#0x01
      000A01 C5 F0            [12] 2404 	xch	a,b
      000A03 F4               [12] 2405 	cpl	a
      000A04 34 00            [12] 2406 	addc	a,#0x00
      000A06 C5 F0            [12] 2407 	xch	a,b
      000A08                       2408 00191$:
      000A08 2C               [12] 2409 	add	a,r4
      000A09 F8               [12] 2410 	mov	r0,a
      000A0A ED               [12] 2411 	mov	a,r5
      000A0B 35 F0            [12] 2412 	addc	a,b
      000A0D F9               [12] 2413 	mov	r1,a
      000A0E 88*44            [24] 2414 	mov	_fillRect_PARM_2,r0
      000A10 89*45            [24] 2415 	mov	(_fillRect_PARM_2 + 1),r1
      000A12 A8*53            [24] 2416 	mov	r0,_drawChar_PARM_6
      000A14 79 00            [12] 2417 	mov	r1,#0x00
      000A16 88*46            [24] 2418 	mov	_fillRect_PARM_3,r0
      000A18 89*47            [24] 2419 	mov	(_fillRect_PARM_3 + 1),r1
      000A1A 88*48            [24] 2420 	mov	_fillRect_PARM_4,r0
      000A1C 89*49            [24] 2421 	mov	(_fillRect_PARM_4 + 1),r1
      000A1E 85*4F*4A         [24] 2422 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A21 85*50*4B         [24] 2423 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A24 C0 07            [24] 2424 	push	ar7
      000A26 C0 06            [24] 2425 	push	ar6
      000A28 C0 05            [24] 2426 	push	ar5
      000A2A C0 04            [24] 2427 	push	ar4
      000A2C C0 03            [24] 2428 	push	ar3
      000A2E C0 02            [24] 2429 	push	ar2
      000A30 12r06rB9         [24] 2430 	lcall	_fillRect
      000A33 D0 02            [24] 2431 	pop	ar2
      000A35 D0 03            [24] 2432 	pop	ar3
      000A37 D0 04            [24] 2433 	pop	ar4
      000A39 D0 05            [24] 2434 	pop	ar5
      000A3B D0 06            [24] 2435 	pop	ar6
      000A3D D0 07            [24] 2436 	pop	ar7
      000A3F 02r0ArE9         [24] 2437 	ljmp	00119$
      000A42                       2438 00118$:
                                   2439 ;	ecen4330_lcd_v3.c:411: } else if (bg != color)
      000A42 30*00 03         [24] 2440 	jnb	_drawChar_sloc0_1_0,00192$
      000A45 02r0ArE9         [24] 2441 	ljmp	00119$
      000A48                       2442 00192$:
                                   2443 ;	ecen4330_lcd_v3.c:413: if (size == 1)
      000A48 EA               [12] 2444 	mov	a,r2
      000A49 60 45            [24] 2445 	jz	00113$
                                   2446 ;	ecen4330_lcd_v3.c:415: drawPixel(x+i, y+j, bg);
      000A4B E5*54            [12] 2447 	mov	a,_drawChar_i_65537_149
      000A4D F8               [12] 2448 	mov	r0,a
      000A4E 33               [12] 2449 	rlc	a
      000A4F 95 E0            [12] 2450 	subb	a,acc
      000A51 F9               [12] 2451 	mov	r1,a
      000A52 E8               [12] 2452 	mov	a,r0
      000A53 2E               [12] 2453 	add	a,r6
      000A54 F8               [12] 2454 	mov	r0,a
      000A55 E9               [12] 2455 	mov	a,r1
      000A56 3F               [12] 2456 	addc	a,r7
      000A57 F9               [12] 2457 	mov	r1,a
      000A58 88 82            [24] 2458 	mov	dpl,r0
      000A5A 89 83            [24] 2459 	mov	dph,r1
      000A5C E5*56            [12] 2460 	mov	a,_drawChar_j_196610_154
      000A5E F8               [12] 2461 	mov	r0,a
      000A5F 33               [12] 2462 	rlc	a
      000A60 95 E0            [12] 2463 	subb	a,acc
      000A62 F9               [12] 2464 	mov	r1,a
      000A63 E8               [12] 2465 	mov	a,r0
      000A64 2C               [12] 2466 	add	a,r4
      000A65 F8               [12] 2467 	mov	r0,a
      000A66 E9               [12] 2468 	mov	a,r1
      000A67 3D               [12] 2469 	addc	a,r5
      000A68 F9               [12] 2470 	mov	r1,a
      000A69 88*26            [24] 2471 	mov	_drawPixel_PARM_2,r0
      000A6B 89*27            [24] 2472 	mov	(_drawPixel_PARM_2 + 1),r1
      000A6D 85*51*28         [24] 2473 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A70 85*52*29         [24] 2474 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A73 C0 07            [24] 2475 	push	ar7
      000A75 C0 06            [24] 2476 	push	ar6
      000A77 C0 05            [24] 2477 	push	ar5
      000A79 C0 04            [24] 2478 	push	ar4
      000A7B C0 03            [24] 2479 	push	ar3
      000A7D C0 02            [24] 2480 	push	ar2
      000A7F 12r03r1E         [24] 2481 	lcall	_drawPixel
      000A82 D0 02            [24] 2482 	pop	ar2
      000A84 D0 03            [24] 2483 	pop	ar3
      000A86 D0 04            [24] 2484 	pop	ar4
      000A88 D0 05            [24] 2485 	pop	ar5
      000A8A D0 06            [24] 2486 	pop	ar6
      000A8C D0 07            [24] 2487 	pop	ar7
      000A8E 80 59            [24] 2488 	sjmp	00119$
      000A90                       2489 00113$:
                                   2490 ;	ecen4330_lcd_v3.c:419: fillRect(x+i*size, y+j*size, size, size, bg);
      000A90 85*57 82         [24] 2491 	mov	dpl,_drawChar_sloc1_1_0
      000A93 85*58 83         [24] 2492 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000A96 C2 D5            [12] 2493 	clr	F0
      000A98 85*53 F0         [24] 2494 	mov	b,_drawChar_PARM_6
      000A9B E5*56            [12] 2495 	mov	a,_drawChar_j_196610_154
      000A9D 30 E7 04         [24] 2496 	jnb	acc.7,00194$
      000AA0 B2 D5            [12] 2497 	cpl	F0
      000AA2 F4               [12] 2498 	cpl	a
      000AA3 04               [12] 2499 	inc	a
      000AA4                       2500 00194$:
      000AA4 A4               [48] 2501 	mul	ab
      000AA5 30 D5 0A         [24] 2502 	jnb	F0,00195$
      000AA8 F4               [12] 2503 	cpl	a
      000AA9 24 01            [12] 2504 	add	a,#0x01
      000AAB C5 F0            [12] 2505 	xch	a,b
      000AAD F4               [12] 2506 	cpl	a
      000AAE 34 00            [12] 2507 	addc	a,#0x00
      000AB0 C5 F0            [12] 2508 	xch	a,b
      000AB2                       2509 00195$:
      000AB2 2C               [12] 2510 	add	a,r4
      000AB3 F8               [12] 2511 	mov	r0,a
      000AB4 ED               [12] 2512 	mov	a,r5
      000AB5 35 F0            [12] 2513 	addc	a,b
      000AB7 F9               [12] 2514 	mov	r1,a
      000AB8 88*44            [24] 2515 	mov	_fillRect_PARM_2,r0
      000ABA 89*45            [24] 2516 	mov	(_fillRect_PARM_2 + 1),r1
      000ABC A8*53            [24] 2517 	mov	r0,_drawChar_PARM_6
      000ABE 79 00            [12] 2518 	mov	r1,#0x00
      000AC0 88*46            [24] 2519 	mov	_fillRect_PARM_3,r0
      000AC2 89*47            [24] 2520 	mov	(_fillRect_PARM_3 + 1),r1
      000AC4 88*48            [24] 2521 	mov	_fillRect_PARM_4,r0
      000AC6 89*49            [24] 2522 	mov	(_fillRect_PARM_4 + 1),r1
      000AC8 85*51*4A         [24] 2523 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000ACB 85*52*4B         [24] 2524 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000ACE C0 07            [24] 2525 	push	ar7
      000AD0 C0 06            [24] 2526 	push	ar6
      000AD2 C0 05            [24] 2527 	push	ar5
      000AD4 C0 04            [24] 2528 	push	ar4
      000AD6 C0 03            [24] 2529 	push	ar3
      000AD8 C0 02            [24] 2530 	push	ar2
      000ADA 12r06rB9         [24] 2531 	lcall	_fillRect
      000ADD D0 02            [24] 2532 	pop	ar2
      000ADF D0 03            [24] 2533 	pop	ar3
      000AE1 D0 04            [24] 2534 	pop	ar4
      000AE3 D0 05            [24] 2535 	pop	ar5
      000AE5 D0 06            [24] 2536 	pop	ar6
      000AE7 D0 07            [24] 2537 	pop	ar7
      000AE9                       2538 00119$:
                                   2539 ;	ecen4330_lcd_v3.c:423: line >>= 1;
      000AE9 E5*55            [12] 2540 	mov	a,_drawChar_line_196609_151
      000AEB C3               [12] 2541 	clr	c
      000AEC 13               [12] 2542 	rrc	a
      000AED F5*55            [12] 2543 	mov	_drawChar_line_196609_151,a
                                   2544 ;	ecen4330_lcd_v3.c:400: for (j = 0; j<8; j++)
      000AEF 05*56            [12] 2545 	inc	_drawChar_j_196610_154
      000AF1 C3               [12] 2546 	clr	c
      000AF2 E5*56            [12] 2547 	mov	a,_drawChar_j_196610_154
      000AF4 64 80            [12] 2548 	xrl	a,#0x80
      000AF6 94 88            [12] 2549 	subb	a,#0x88
      000AF8 50 03            [24] 2550 	jnc	00196$
      000AFA 02r09r95         [24] 2551 	ljmp	00122$
      000AFD                       2552 00196$:
                                   2553 ;	ecen4330_lcd_v3.c:385: for (i=0; i<6; i++ )
      000AFD 05*54            [12] 2554 	inc	_drawChar_i_65537_149
      000AFF C3               [12] 2555 	clr	c
      000B00 E5*54            [12] 2556 	mov	a,_drawChar_i_65537_149
      000B02 64 80            [12] 2557 	xrl	a,#0x80
      000B04 94 86            [12] 2558 	subb	a,#0x86
      000B06 50 03            [24] 2559 	jnc	00197$
      000B08 02r09r17         [24] 2560 	ljmp	00124$
      000B0B                       2561 00197$:
                                   2562 ;	ecen4330_lcd_v3.c:427: }
      000B0B 22               [24] 2563 	ret
                                   2564 ;------------------------------------------------------------
                                   2565 ;Allocation info for local variables in function 'write'
                                   2566 ;------------------------------------------------------------
                                   2567 ;c                         Allocated to registers r7 
                                   2568 ;------------------------------------------------------------
                                   2569 ;	ecen4330_lcd_v3.c:434: void write (uint8_t c)
                                   2570 ;	-----------------------------------------
                                   2571 ;	 function write
                                   2572 ;	-----------------------------------------
      000B0C                       2573 _write:
      000B0C AF 82            [24] 2574 	mov	r7,dpl
                                   2575 ;	ecen4330_lcd_v3.c:436: if (c == '\n')
      000B0E BF 0A 26         [24] 2576 	cjne	r7,#0x0a,00105$
                                   2577 ;	ecen4330_lcd_v3.c:438: cursor_y += textsize*8;
      000B11 AD*1C            [24] 2578 	mov	r5,_textsize
      000B13 E4               [12] 2579 	clr	a
      000B14 C4               [12] 2580 	swap	a
      000B15 03               [12] 2581 	rr	a
      000B16 54 F8            [12] 2582 	anl	a,#0xf8
      000B18 CD               [12] 2583 	xch	a,r5
      000B19 C4               [12] 2584 	swap	a
      000B1A 03               [12] 2585 	rr	a
      000B1B CD               [12] 2586 	xch	a,r5
      000B1C 6D               [12] 2587 	xrl	a,r5
      000B1D CD               [12] 2588 	xch	a,r5
      000B1E 54 F8            [12] 2589 	anl	a,#0xf8
      000B20 CD               [12] 2590 	xch	a,r5
      000B21 6D               [12] 2591 	xrl	a,r5
      000B22 FE               [12] 2592 	mov	r6,a
      000B23 AB*1A            [24] 2593 	mov	r3,_cursor_y
      000B25 AC*1B            [24] 2594 	mov	r4,(_cursor_y + 1)
      000B27 ED               [12] 2595 	mov	a,r5
      000B28 2B               [12] 2596 	add	a,r3
      000B29 FB               [12] 2597 	mov	r3,a
      000B2A EE               [12] 2598 	mov	a,r6
      000B2B 3C               [12] 2599 	addc	a,r4
      000B2C FC               [12] 2600 	mov	r4,a
      000B2D 8B*1A            [24] 2601 	mov	_cursor_y,r3
      000B2F 8C*1B            [24] 2602 	mov	(_cursor_y + 1),r4
                                   2603 ;	ecen4330_lcd_v3.c:439: cursor_x  = 0;
      000B31 E4               [12] 2604 	clr	a
      000B32 F5*18            [12] 2605 	mov	_cursor_x,a
      000B34 F5*19            [12] 2606 	mov	(_cursor_x + 1),a
      000B36 22               [24] 2607 	ret
      000B37                       2608 00105$:
                                   2609 ;	ecen4330_lcd_v3.c:441: else if (c == '\r')
      000B37 BF 0D 01         [24] 2610 	cjne	r7,#0x0d,00119$
      000B3A 22               [24] 2611 	ret
      000B3B                       2612 00119$:
                                   2613 ;	ecen4330_lcd_v3.c:446: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B3B 85*1A*4C         [24] 2614 	mov	_drawChar_PARM_2,_cursor_y
      000B3E 85*1B*4D         [24] 2615 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B41 8F*4E            [24] 2616 	mov	_drawChar_PARM_3,r7
      000B43 85*1E*4F         [24] 2617 	mov	_drawChar_PARM_4,_textcolor
      000B46 85*1F*50         [24] 2618 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B49 85*20*51         [24] 2619 	mov	_drawChar_PARM_5,_textbgcolor
      000B4C 85*21*52         [24] 2620 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B4F 85*1C*53         [24] 2621 	mov	_drawChar_PARM_6,_textsize
      000B52 85*18 82         [24] 2622 	mov	dpl,_cursor_x
      000B55 85*19 83         [24] 2623 	mov	dph,(_cursor_x + 1)
      000B58 12r08r81         [24] 2624 	lcall	_drawChar
                                   2625 ;	ecen4330_lcd_v3.c:447: cursor_x += textsize*6;
      000B5B 85*1C*00         [24] 2626 	mov	__mulint_PARM_2,_textsize
      000B5E 75*01 00         [24] 2627 	mov	(__mulint_PARM_2 + 1),#0x00
      000B61 90 00 06         [24] 2628 	mov	dptr,#0x0006
      000B64 12r00r00         [24] 2629 	lcall	__mulint
      000B67 AE 82            [24] 2630 	mov	r6,dpl
      000B69 AF 83            [24] 2631 	mov	r7,dph
      000B6B AC*18            [24] 2632 	mov	r4,_cursor_x
      000B6D AD*19            [24] 2633 	mov	r5,(_cursor_x + 1)
      000B6F EE               [12] 2634 	mov	a,r6
      000B70 2C               [12] 2635 	add	a,r4
      000B71 FC               [12] 2636 	mov	r4,a
      000B72 EF               [12] 2637 	mov	a,r7
      000B73 3D               [12] 2638 	addc	a,r5
      000B74 FD               [12] 2639 	mov	r5,a
      000B75 8C*18            [24] 2640 	mov	_cursor_x,r4
      000B77 8D*19            [24] 2641 	mov	(_cursor_x + 1),r5
                                   2642 ;	ecen4330_lcd_v3.c:449: }
      000B79 22               [24] 2643 	ret
                                   2644 ;------------------------------------------------------------
                                   2645 ;Allocation info for local variables in function 'LCD_string_write'
                                   2646 ;------------------------------------------------------------
                                   2647 ;str                       Allocated to registers r5 r6 r7 
                                   2648 ;i                         Allocated to registers r3 r4 
                                   2649 ;------------------------------------------------------------
                                   2650 ;	ecen4330_lcd_v3.c:456: void LCD_string_write (int8_t *str)
                                   2651 ;	-----------------------------------------
                                   2652 ;	 function LCD_string_write
                                   2653 ;	-----------------------------------------
      000B7A                       2654 _LCD_string_write:
      000B7A AD 82            [24] 2655 	mov	r5,dpl
      000B7C AE 83            [24] 2656 	mov	r6,dph
      000B7E AF F0            [24] 2657 	mov	r7,b
                                   2658 ;	ecen4330_lcd_v3.c:459: for (i=0;str[i]!=0;i++)
      000B80 7B 00            [12] 2659 	mov	r3,#0x00
      000B82 7C 00            [12] 2660 	mov	r4,#0x00
      000B84                       2661 00103$:
      000B84 EB               [12] 2662 	mov	a,r3
      000B85 2D               [12] 2663 	add	a,r5
      000B86 F8               [12] 2664 	mov	r0,a
      000B87 EC               [12] 2665 	mov	a,r4
      000B88 3E               [12] 2666 	addc	a,r6
      000B89 F9               [12] 2667 	mov	r1,a
      000B8A 8F 02            [24] 2668 	mov	ar2,r7
      000B8C 88 82            [24] 2669 	mov	dpl,r0
      000B8E 89 83            [24] 2670 	mov	dph,r1
      000B90 8A F0            [24] 2671 	mov	b,r2
      000B92 12r00r00         [24] 2672 	lcall	__gptrget
      000B95 FA               [12] 2673 	mov	r2,a
      000B96 60 20            [24] 2674 	jz	00105$
                                   2675 ;	ecen4330_lcd_v3.c:461: write(str[i]);
      000B98 8A 82            [24] 2676 	mov	dpl,r2
      000B9A C0 07            [24] 2677 	push	ar7
      000B9C C0 06            [24] 2678 	push	ar6
      000B9E C0 05            [24] 2679 	push	ar5
      000BA0 C0 04            [24] 2680 	push	ar4
      000BA2 C0 03            [24] 2681 	push	ar3
      000BA4 12r0Br0C         [24] 2682 	lcall	_write
      000BA7 D0 03            [24] 2683 	pop	ar3
      000BA9 D0 04            [24] 2684 	pop	ar4
      000BAB D0 05            [24] 2685 	pop	ar5
      000BAD D0 06            [24] 2686 	pop	ar6
      000BAF D0 07            [24] 2687 	pop	ar7
                                   2688 ;	ecen4330_lcd_v3.c:459: for (i=0;str[i]!=0;i++)
      000BB1 0B               [12] 2689 	inc	r3
      000BB2 BB 00 CF         [24] 2690 	cjne	r3,#0x00,00103$
      000BB5 0C               [12] 2691 	inc	r4
      000BB6 80 CC            [24] 2692 	sjmp	00103$
      000BB8                       2693 00105$:
                                   2694 ;	ecen4330_lcd_v3.c:463: }
      000BB8 22               [24] 2695 	ret
                                   2696 ;------------------------------------------------------------
                                   2697 ;Allocation info for local variables in function 'testRAM'
                                   2698 ;------------------------------------------------------------
                                   2699 ;d                         Allocated to registers r7 
                                   2700 ;i                         Allocated to registers r3 r4 r5 r6 
                                   2701 ;ram_address               Allocated to registers 
                                   2702 ;------------------------------------------------------------
                                   2703 ;	ecen4330_lcd_v3.c:470: void testRAM (uint8_t d) {
                                   2704 ;	-----------------------------------------
                                   2705 ;	 function testRAM
                                   2706 ;	-----------------------------------------
      000BB9                       2707 _testRAM:
      000BB9 AF 82            [24] 2708 	mov	r7,dpl
                                   2709 ;	ecen4330_lcd_v3.c:474: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BBB 7B 00            [12] 2710 	mov	r3,#0x00
      000BBD 7C 00            [12] 2711 	mov	r4,#0x00
      000BBF 7D 00            [12] 2712 	mov	r5,#0x00
      000BC1 7E 00            [12] 2713 	mov	r6,#0x00
      000BC3                       2714 00102$:
                                   2715 ;	ecen4330_lcd_v3.c:475: IOM = 0;
                                   2716 ;	assignBit
      000BC3 C2 B4            [12] 2717 	clr	_P3_4
                                   2718 ;	ecen4330_lcd_v3.c:476: ram_address = (uint8_t __xdata*)(i);
      000BC5 8B 82            [24] 2719 	mov	dpl,r3
      000BC7 8C 83            [24] 2720 	mov	dph,r4
                                   2721 ;	ecen4330_lcd_v3.c:477: *ram_address = d;
      000BC9 EF               [12] 2722 	mov	a,r7
      000BCA F0               [24] 2723 	movx	@dptr,a
                                   2724 ;	ecen4330_lcd_v3.c:478: IOM = 1;
                                   2725 ;	assignBit
      000BCB D2 B4            [12] 2726 	setb	_P3_4
                                   2727 ;	ecen4330_lcd_v3.c:474: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BCD 0B               [12] 2728 	inc	r3
      000BCE BB 00 09         [24] 2729 	cjne	r3,#0x00,00111$
      000BD1 0C               [12] 2730 	inc	r4
      000BD2 BC 00 05         [24] 2731 	cjne	r4,#0x00,00111$
      000BD5 0D               [12] 2732 	inc	r5
      000BD6 BD 00 01         [24] 2733 	cjne	r5,#0x00,00111$
      000BD9 0E               [12] 2734 	inc	r6
      000BDA                       2735 00111$:
      000BDA C3               [12] 2736 	clr	c
      000BDB EB               [12] 2737 	mov	a,r3
      000BDC 94 FF            [12] 2738 	subb	a,#0xff
      000BDE EC               [12] 2739 	mov	a,r4
      000BDF 94 FF            [12] 2740 	subb	a,#0xff
      000BE1 ED               [12] 2741 	mov	a,r5
      000BE2 94 00            [12] 2742 	subb	a,#0x00
      000BE4 EE               [12] 2743 	mov	a,r6
      000BE5 94 00            [12] 2744 	subb	a,#0x00
      000BE7 40 DA            [24] 2745 	jc	00102$
                                   2746 ;	ecen4330_lcd_v3.c:480: }
      000BE9 22               [24] 2747 	ret
                                   2748 ;------------------------------------------------------------
                                   2749 ;Allocation info for local variables in function 'freeType'
                                   2750 ;------------------------------------------------------------
                                   2751 ;count                     Allocated to registers r7 
                                   2752 ;d                         Allocated to registers 
                                   2753 ;------------------------------------------------------------
                                   2754 ;	ecen4330_lcd_v3.c:486: void freeType () {
                                   2755 ;	-----------------------------------------
                                   2756 ;	 function freeType
                                   2757 ;	-----------------------------------------
      000BEA                       2758 _freeType:
                                   2759 ;	ecen4330_lcd_v3.c:487: uint8_t count = 0;
      000BEA 7F 00            [12] 2760 	mov	r7,#0x00
                                   2761 ;	ecen4330_lcd_v3.c:489: while (1) {
      000BEC                       2762 00105$:
                                   2763 ;	ecen4330_lcd_v3.c:492: if (count == 8) {
      000BEC BF 08 0E         [24] 2764 	cjne	r7,#0x08,00102$
                                   2765 ;	ecen4330_lcd_v3.c:494: count = 0;
      000BEF 7F 00            [12] 2766 	mov	r7,#0x00
                                   2767 ;	ecen4330_lcd_v3.c:495: write(d);
      000BF1 75 82 0A         [24] 2768 	mov	dpl,#0x0a
      000BF4 C0 07            [24] 2769 	push	ar7
      000BF6 12r0Br0C         [24] 2770 	lcall	_write
      000BF9 D0 07            [24] 2771 	pop	ar7
      000BFB 80 0A            [24] 2772 	sjmp	00103$
      000BFD                       2773 00102$:
                                   2774 ;	ecen4330_lcd_v3.c:498: d = keyDetect();
      000BFD C0 07            [24] 2775 	push	ar7
      000BFF 12r0Cr0A         [24] 2776 	lcall	_keyDetect
                                   2777 ;	ecen4330_lcd_v3.c:499: write(d);
      000C02 12r0Br0C         [24] 2778 	lcall	_write
      000C05 D0 07            [24] 2779 	pop	ar7
      000C07                       2780 00103$:
                                   2781 ;	ecen4330_lcd_v3.c:502: count++;
      000C07 0F               [12] 2782 	inc	r7
                                   2783 ;	ecen4330_lcd_v3.c:504: }
      000C08 80 E2            [24] 2784 	sjmp	00105$
                                   2785 ;------------------------------------------------------------
                                   2786 ;Allocation info for local variables in function 'keyDetect'
                                   2787 ;------------------------------------------------------------
                                   2788 ;	ecen4330_lcd_v3.c:511: uint8_t keyDetect () {
                                   2789 ;	-----------------------------------------
                                   2790 ;	 function keyDetect
                                   2791 ;	-----------------------------------------
      000C0A                       2792 _keyDetect:
                                   2793 ;	ecen4330_lcd_v3.c:512: __KEYPAD_PORT__ = 0xF0;
      000C0A 75 90 F0         [24] 2794 	mov	_P1,#0xf0
                                   2795 ;	ecen4330_lcd_v3.c:513: do
      000C0D                       2796 00101$:
                                   2797 ;	ecen4330_lcd_v3.c:515: __KEYPAD_PORT__ = 0xF0;
      000C0D 75 90 F0         [24] 2798 	mov	_P1,#0xf0
                                   2799 ;	ecen4330_lcd_v3.c:516: colloc = __KEYPAD_PORT__;
      000C10 85 90*10         [24] 2800 	mov	_colloc,_P1
                                   2801 ;	ecen4330_lcd_v3.c:517: colloc&= 0xF0;
      000C13 53*10 F0         [24] 2802 	anl	_colloc,#0xf0
                                   2803 ;	ecen4330_lcd_v3.c:518: } while (colloc != 0xF0);
      000C16 74 F0            [12] 2804 	mov	a,#0xf0
      000C18 B5*10 F2         [24] 2805 	cjne	a,_colloc,00101$
                                   2806 ;	ecen4330_lcd_v3.c:522: do
      000C1B                       2807 00104$:
                                   2808 ;	ecen4330_lcd_v3.c:524: delay(20);
      000C1B 90 00 14         [24] 2809 	mov	dptr,#0x0014
      000C1E 12r00r10         [24] 2810 	lcall	_delay
                                   2811 ;	ecen4330_lcd_v3.c:525: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C21 E5 90            [12] 2812 	mov	a,_P1
      000C23 54 F0            [12] 2813 	anl	a,#0xf0
      000C25 F5*10            [12] 2814 	mov	_colloc,a
                                   2815 ;	ecen4330_lcd_v3.c:526: } while (colloc == 0xF0);
      000C27 74 F0            [12] 2816 	mov	a,#0xf0
      000C29 B5*10 02         [24] 2817 	cjne	a,_colloc,00178$
      000C2C 80 ED            [24] 2818 	sjmp	00104$
      000C2E                       2819 00178$:
                                   2820 ;	ecen4330_lcd_v3.c:528: delay(1);
      000C2E 90 00 01         [24] 2821 	mov	dptr,#0x0001
      000C31 12r00r10         [24] 2822 	lcall	_delay
                                   2823 ;	ecen4330_lcd_v3.c:529: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C34 E5 90            [12] 2824 	mov	a,_P1
      000C36 54 F0            [12] 2825 	anl	a,#0xf0
      000C38 F5*10            [12] 2826 	mov	_colloc,a
                                   2827 ;	ecen4330_lcd_v3.c:530: } while (colloc == 0xF0);
      000C3A 74 F0            [12] 2828 	mov	a,#0xf0
      000C3C B5*10 02         [24] 2829 	cjne	a,_colloc,00179$
      000C3F 80 DA            [24] 2830 	sjmp	00104$
      000C41                       2831 00179$:
                                   2832 ;	ecen4330_lcd_v3.c:532: while (1)
      000C41                       2833 00119$:
                                   2834 ;	ecen4330_lcd_v3.c:534: __KEYPAD_PORT__= 0xFE;
      000C41 75 90 FE         [24] 2835 	mov	_P1,#0xfe
                                   2836 ;	ecen4330_lcd_v3.c:535: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C44 E5 90            [12] 2837 	mov	a,_P1
      000C46 54 F0            [12] 2838 	anl	a,#0xf0
      000C48 F5*10            [12] 2839 	mov	_colloc,a
                                   2840 ;	ecen4330_lcd_v3.c:536: if (colloc != 0xF0)
      000C4A 74 F0            [12] 2841 	mov	a,#0xf0
      000C4C B5*10 02         [24] 2842 	cjne	a,_colloc,00180$
      000C4F 80 05            [24] 2843 	sjmp	00111$
      000C51                       2844 00180$:
                                   2845 ;	ecen4330_lcd_v3.c:538: rowloc = 0;
      000C51 75*11 00         [24] 2846 	mov	_rowloc,#0x00
                                   2847 ;	ecen4330_lcd_v3.c:539: break;
      000C54 80 3D            [24] 2848 	sjmp	00120$
      000C56                       2849 00111$:
                                   2850 ;	ecen4330_lcd_v3.c:542: __KEYPAD_PORT__ = 0xFD;
      000C56 75 90 FD         [24] 2851 	mov	_P1,#0xfd
                                   2852 ;	ecen4330_lcd_v3.c:543: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C59 E5 90            [12] 2853 	mov	a,_P1
      000C5B 54 F0            [12] 2854 	anl	a,#0xf0
      000C5D F5*10            [12] 2855 	mov	_colloc,a
                                   2856 ;	ecen4330_lcd_v3.c:544: if (colloc != 0xF0)
      000C5F 74 F0            [12] 2857 	mov	a,#0xf0
      000C61 B5*10 02         [24] 2858 	cjne	a,_colloc,00181$
      000C64 80 05            [24] 2859 	sjmp	00113$
      000C66                       2860 00181$:
                                   2861 ;	ecen4330_lcd_v3.c:546: rowloc = 1;
      000C66 75*11 01         [24] 2862 	mov	_rowloc,#0x01
                                   2863 ;	ecen4330_lcd_v3.c:547: break;
      000C69 80 28            [24] 2864 	sjmp	00120$
      000C6B                       2865 00113$:
                                   2866 ;	ecen4330_lcd_v3.c:550: __KEYPAD_PORT__ = 0xFB;
      000C6B 75 90 FB         [24] 2867 	mov	_P1,#0xfb
                                   2868 ;	ecen4330_lcd_v3.c:551: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C6E E5 90            [12] 2869 	mov	a,_P1
      000C70 54 F0            [12] 2870 	anl	a,#0xf0
      000C72 F5*10            [12] 2871 	mov	_colloc,a
                                   2872 ;	ecen4330_lcd_v3.c:552: if (colloc != 0xF0)
      000C74 74 F0            [12] 2873 	mov	a,#0xf0
      000C76 B5*10 02         [24] 2874 	cjne	a,_colloc,00182$
      000C79 80 05            [24] 2875 	sjmp	00115$
      000C7B                       2876 00182$:
                                   2877 ;	ecen4330_lcd_v3.c:554: rowloc = 2;
      000C7B 75*11 02         [24] 2878 	mov	_rowloc,#0x02
                                   2879 ;	ecen4330_lcd_v3.c:555: break;
      000C7E 80 13            [24] 2880 	sjmp	00120$
      000C80                       2881 00115$:
                                   2882 ;	ecen4330_lcd_v3.c:558: __KEYPAD_PORT__ = 0xF7;
      000C80 75 90 F7         [24] 2883 	mov	_P1,#0xf7
                                   2884 ;	ecen4330_lcd_v3.c:559: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C83 E5 90            [12] 2885 	mov	a,_P1
      000C85 54 F0            [12] 2886 	anl	a,#0xf0
      000C87 F5*10            [12] 2887 	mov	_colloc,a
                                   2888 ;	ecen4330_lcd_v3.c:560: if (colloc != 0xF0)
      000C89 74 F0            [12] 2889 	mov	a,#0xf0
      000C8B B5*10 02         [24] 2890 	cjne	a,_colloc,00183$
      000C8E 80 B1            [24] 2891 	sjmp	00119$
      000C90                       2892 00183$:
                                   2893 ;	ecen4330_lcd_v3.c:562: rowloc = 3;
      000C90 75*11 03         [24] 2894 	mov	_rowloc,#0x03
                                   2895 ;	ecen4330_lcd_v3.c:563: break;
      000C93                       2896 00120$:
                                   2897 ;	ecen4330_lcd_v3.c:567: if (colloc == 0xE0)
      000C93 74 E0            [12] 2898 	mov	a,#0xe0
      000C95 B5*10 0C         [24] 2899 	cjne	a,_colloc,00128$
                                   2900 ;	ecen4330_lcd_v3.c:569: return (keypad[rowloc][0]);
      000C98 E5*11            [12] 2901 	mov	a,_rowloc
      000C9A 25*11            [12] 2902 	add	a,_rowloc
      000C9C 25 E0            [12] 2903 	add	a,acc
      000C9E 24r00            [12] 2904 	add	a,#_keypad
      000CA0 F9               [12] 2905 	mov	r1,a
      000CA1 87 82            [24] 2906 	mov	dpl,@r1
      000CA3 22               [24] 2907 	ret
      000CA4                       2908 00128$:
                                   2909 ;	ecen4330_lcd_v3.c:571: else if (colloc == 0xD0)
      000CA4 74 D0            [12] 2910 	mov	a,#0xd0
      000CA6 B5*10 0D         [24] 2911 	cjne	a,_colloc,00125$
                                   2912 ;	ecen4330_lcd_v3.c:573: return (keypad[rowloc][1]);
      000CA9 E5*11            [12] 2913 	mov	a,_rowloc
      000CAB 25*11            [12] 2914 	add	a,_rowloc
      000CAD 25 E0            [12] 2915 	add	a,acc
      000CAF 24r00            [12] 2916 	add	a,#_keypad
      000CB1 04               [12] 2917 	inc	a
      000CB2 F9               [12] 2918 	mov	r1,a
      000CB3 87 82            [24] 2919 	mov	dpl,@r1
      000CB5 22               [24] 2920 	ret
      000CB6                       2921 00125$:
                                   2922 ;	ecen4330_lcd_v3.c:575: else if (colloc == 0xB0)
      000CB6 74 B0            [12] 2923 	mov	a,#0xb0
      000CB8 B5*10 0E         [24] 2924 	cjne	a,_colloc,00122$
                                   2925 ;	ecen4330_lcd_v3.c:577: return (keypad[rowloc][2]);
      000CBB E5*11            [12] 2926 	mov	a,_rowloc
      000CBD 25*11            [12] 2927 	add	a,_rowloc
      000CBF 25 E0            [12] 2928 	add	a,acc
      000CC1 24r00            [12] 2929 	add	a,#_keypad
      000CC3 24 02            [12] 2930 	add	a,#0x02
      000CC5 F9               [12] 2931 	mov	r1,a
      000CC6 87 82            [24] 2932 	mov	dpl,@r1
      000CC8 22               [24] 2933 	ret
      000CC9                       2934 00122$:
                                   2935 ;	ecen4330_lcd_v3.c:581: return (keypad[rowloc][3]);
      000CC9 E5*11            [12] 2936 	mov	a,_rowloc
      000CCB 25*11            [12] 2937 	add	a,_rowloc
      000CCD 25 E0            [12] 2938 	add	a,acc
      000CCF 24r00            [12] 2939 	add	a,#_keypad
      000CD1 24 03            [12] 2940 	add	a,#0x03
      000CD3 F9               [12] 2941 	mov	r1,a
      000CD4 87 82            [24] 2942 	mov	dpl,@r1
                                   2943 ;	ecen4330_lcd_v3.c:583: }
      000CD6 22               [24] 2944 	ret
                                   2945 ;------------------------------------------------------------
                                   2946 ;Allocation info for local variables in function 'reverse'
                                   2947 ;------------------------------------------------------------
                                   2948 ;d                         Allocated to registers r7 
                                   2949 ;rev                       Allocated to registers r5 r6 
                                   2950 ;val                       Allocated to registers r1 r2 
                                   2951 ;------------------------------------------------------------
                                   2952 ;	ecen4330_lcd_v3.c:585: uint16_t reverse (uint8_t d) {
                                   2953 ;	-----------------------------------------
                                   2954 ;	 function reverse
                                   2955 ;	-----------------------------------------
      000CD7                       2956 _reverse:
      000CD7 AF 82            [24] 2957 	mov	r7,dpl
                                   2958 ;	ecen4330_lcd_v3.c:586: uint16_t rev = 0;
      000CD9 7D 00            [12] 2959 	mov	r5,#0x00
      000CDB 7E 00            [12] 2960 	mov	r6,#0x00
                                   2961 ;	ecen4330_lcd_v3.c:588: while (d >= 1) {
      000CDD                       2962 00101$:
      000CDD BF 01 00         [24] 2963 	cjne	r7,#0x01,00114$
      000CE0                       2964 00114$:
      000CE0 40 5F            [24] 2965 	jc	00103$
                                   2966 ;	ecen4330_lcd_v3.c:590: val = d%10;
      000CE2 8F 03            [24] 2967 	mov	ar3,r7
      000CE4 7C 00            [12] 2968 	mov	r4,#0x00
      000CE6 75*00 0A         [24] 2969 	mov	__modsint_PARM_2,#0x0a
                                   2970 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000CE9 8C*01            [24] 2971 	mov	(__modsint_PARM_2 + 1),r4
      000CEB 8B 82            [24] 2972 	mov	dpl,r3
      000CED 8C 83            [24] 2973 	mov	dph,r4
      000CEF C0 06            [24] 2974 	push	ar6
      000CF1 C0 05            [24] 2975 	push	ar5
      000CF3 C0 04            [24] 2976 	push	ar4
      000CF5 C0 03            [24] 2977 	push	ar3
      000CF7 12r00r00         [24] 2978 	lcall	__modsint
      000CFA A9 82            [24] 2979 	mov	r1,dpl
      000CFC AA 83            [24] 2980 	mov	r2,dph
      000CFE D0 03            [24] 2981 	pop	ar3
      000D00 D0 04            [24] 2982 	pop	ar4
                                   2983 ;	ecen4330_lcd_v3.c:591: d = d/10;
      000D02 75*00 0A         [24] 2984 	mov	__divsint_PARM_2,#0x0a
      000D05 75*01 00         [24] 2985 	mov	(__divsint_PARM_2 + 1),#0x00
      000D08 8B 82            [24] 2986 	mov	dpl,r3
      000D0A 8C 83            [24] 2987 	mov	dph,r4
      000D0C C0 02            [24] 2988 	push	ar2
      000D0E C0 01            [24] 2989 	push	ar1
      000D10 12r00r00         [24] 2990 	lcall	__divsint
      000D13 AB 82            [24] 2991 	mov	r3,dpl
      000D15 D0 01            [24] 2992 	pop	ar1
      000D17 D0 02            [24] 2993 	pop	ar2
      000D19 D0 05            [24] 2994 	pop	ar5
      000D1B D0 06            [24] 2995 	pop	ar6
      000D1D 8B 07            [24] 2996 	mov	ar7,r3
                                   2997 ;	ecen4330_lcd_v3.c:592: rev = rev * 10 + val;
      000D1F 8D*00            [24] 2998 	mov	__mulint_PARM_2,r5
      000D21 8E*01            [24] 2999 	mov	(__mulint_PARM_2 + 1),r6
      000D23 90 00 0A         [24] 3000 	mov	dptr,#0x000a
      000D26 C0 07            [24] 3001 	push	ar7
      000D28 C0 02            [24] 3002 	push	ar2
      000D2A C0 01            [24] 3003 	push	ar1
      000D2C 12r00r00         [24] 3004 	lcall	__mulint
      000D2F AB 82            [24] 3005 	mov	r3,dpl
      000D31 AC 83            [24] 3006 	mov	r4,dph
      000D33 D0 01            [24] 3007 	pop	ar1
      000D35 D0 02            [24] 3008 	pop	ar2
      000D37 D0 07            [24] 3009 	pop	ar7
      000D39 E9               [12] 3010 	mov	a,r1
      000D3A 2B               [12] 3011 	add	a,r3
      000D3B FD               [12] 3012 	mov	r5,a
      000D3C EA               [12] 3013 	mov	a,r2
      000D3D 3C               [12] 3014 	addc	a,r4
      000D3E FE               [12] 3015 	mov	r6,a
      000D3F 80 9C            [24] 3016 	sjmp	00101$
      000D41                       3017 00103$:
                                   3018 ;	ecen4330_lcd_v3.c:594: return rev;
      000D41 8D 82            [24] 3019 	mov	dpl,r5
      000D43 8E 83            [24] 3020 	mov	dph,r6
                                   3021 ;	ecen4330_lcd_v3.c:595: }
      000D45 22               [24] 3022 	ret
                                   3023 ;------------------------------------------------------------
                                   3024 ;Allocation info for local variables in function 'asciiToDec'
                                   3025 ;------------------------------------------------------------
                                   3026 ;d                         Allocated to registers 
                                   3027 ;val                       Allocated to registers r2 
                                   3028 ;id                        Allocated to registers r6 r7 
                                   3029 ;------------------------------------------------------------
                                   3030 ;	ecen4330_lcd_v3.c:602: void asciiToDec (uint8_t d) {
                                   3031 ;	-----------------------------------------
                                   3032 ;	 function asciiToDec
                                   3033 ;	-----------------------------------------
      000D46                       3034 _asciiToDec:
                                   3035 ;	ecen4330_lcd_v3.c:605: id = reverse(d);
      000D46 12r0CrD7         [24] 3036 	lcall	_reverse
      000D49 AE 82            [24] 3037 	mov	r6,dpl
      000D4B AF 83            [24] 3038 	mov	r7,dph
                                   3039 ;	ecen4330_lcd_v3.c:606: while (id >= 1){
      000D4D                       3040 00101$:
      000D4D 8E 04            [24] 3041 	mov	ar4,r6
      000D4F 8F 05            [24] 3042 	mov	ar5,r7
      000D51 C3               [12] 3043 	clr	c
      000D52 EC               [12] 3044 	mov	a,r4
      000D53 94 01            [12] 3045 	subb	a,#0x01
      000D55 ED               [12] 3046 	mov	a,r5
      000D56 94 00            [12] 3047 	subb	a,#0x00
      000D58 40 42            [24] 3048 	jc	00103$
                                   3049 ;	ecen4330_lcd_v3.c:608: val = id % 10;
      000D5A 75*00 0A         [24] 3050 	mov	__moduint_PARM_2,#0x0a
      000D5D 75*01 00         [24] 3051 	mov	(__moduint_PARM_2 + 1),#0x00
      000D60 8C 82            [24] 3052 	mov	dpl,r4
      000D62 8D 83            [24] 3053 	mov	dph,r5
      000D64 C0 05            [24] 3054 	push	ar5
      000D66 C0 04            [24] 3055 	push	ar4
      000D68 12r00r00         [24] 3056 	lcall	__moduint
      000D6B AA 82            [24] 3057 	mov	r2,dpl
      000D6D D0 04            [24] 3058 	pop	ar4
      000D6F D0 05            [24] 3059 	pop	ar5
                                   3060 ;	ecen4330_lcd_v3.c:609: id = id/10;
      000D71 75*00 0A         [24] 3061 	mov	__divuint_PARM_2,#0x0a
      000D74 75*01 00         [24] 3062 	mov	(__divuint_PARM_2 + 1),#0x00
      000D77 8C 82            [24] 3063 	mov	dpl,r4
      000D79 8D 83            [24] 3064 	mov	dph,r5
      000D7B C0 02            [24] 3065 	push	ar2
      000D7D 12r00r00         [24] 3066 	lcall	__divuint
      000D80 AC 82            [24] 3067 	mov	r4,dpl
      000D82 AD 83            [24] 3068 	mov	r5,dph
      000D84 D0 02            [24] 3069 	pop	ar2
      000D86 8C 06            [24] 3070 	mov	ar6,r4
      000D88 8D 07            [24] 3071 	mov	ar7,r5
                                   3072 ;	ecen4330_lcd_v3.c:610: write(val + '0');
      000D8A 74 30            [12] 3073 	mov	a,#0x30
      000D8C 2A               [12] 3074 	add	a,r2
      000D8D F5 82            [12] 3075 	mov	dpl,a
      000D8F C0 07            [24] 3076 	push	ar7
      000D91 C0 06            [24] 3077 	push	ar6
      000D93 12r0Br0C         [24] 3078 	lcall	_write
      000D96 D0 06            [24] 3079 	pop	ar6
      000D98 D0 07            [24] 3080 	pop	ar7
      000D9A 80 B1            [24] 3081 	sjmp	00101$
      000D9C                       3082 00103$:
                                   3083 ;	ecen4330_lcd_v3.c:612: write('\n');
      000D9C 75 82 0A         [24] 3084 	mov	dpl,#0x0a
                                   3085 ;	ecen4330_lcd_v3.c:613: }
      000D9F 02r0Br0C         [24] 3086 	ljmp	_write
                                   3087 ;------------------------------------------------------------
                                   3088 ;Allocation info for local variables in function 'asciiToHex'
                                   3089 ;------------------------------------------------------------
                                   3090 ;d                         Allocated to registers r7 
                                   3091 ;val                       Allocated to registers r2 
                                   3092 ;store                     Allocated with name '_asciiToHex_store_65536_200'
                                   3093 ;i                         Allocated to registers r6 
                                   3094 ;------------------------------------------------------------
                                   3095 ;	ecen4330_lcd_v3.c:620: void asciiToHex (uint8_t d) {
                                   3096 ;	-----------------------------------------
                                   3097 ;	 function asciiToHex
                                   3098 ;	-----------------------------------------
      000DA2                       3099 _asciiToHex:
      000DA2 AF 82            [24] 3100 	mov	r7,dpl
                                   3101 ;	ecen4330_lcd_v3.c:624: store[0] = 0;
      000DA4 75*5B 00         [24] 3102 	mov	_asciiToHex_store_65536_200,#0x00
                                   3103 ;	ecen4330_lcd_v3.c:625: store[1] = 0;
      000DA7 75*5C 00         [24] 3104 	mov	(_asciiToHex_store_65536_200 + 0x0001),#0x00
                                   3105 ;	ecen4330_lcd_v3.c:626: while (d >= 1){
      000DAA 7E 00            [12] 3106 	mov	r6,#0x00
      000DAC                       3107 00104$:
      000DAC BF 01 00         [24] 3108 	cjne	r7,#0x01,00122$
      000DAF                       3109 00122$:
      000DAF 40 5A            [24] 3110 	jc	00106$
                                   3111 ;	ecen4330_lcd_v3.c:628: val = d % 16;
      000DB1 8F 04            [24] 3112 	mov	ar4,r7
      000DB3 7D 00            [12] 3113 	mov	r5,#0x00
      000DB5 74 0F            [12] 3114 	mov	a,#0x0f
      000DB7 5C               [12] 3115 	anl	a,r4
      000DB8 FA               [12] 3116 	mov	r2,a
                                   3117 ;	ecen4330_lcd_v3.c:629: d = d/16;
      000DB9 75*00 10         [24] 3118 	mov	__divsint_PARM_2,#0x10
                                   3119 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000DBC 8D*01            [24] 3120 	mov	(__divsint_PARM_2 + 1),r5
      000DBE 8C 82            [24] 3121 	mov	dpl,r4
      000DC0 8D 83            [24] 3122 	mov	dph,r5
      000DC2 C0 06            [24] 3123 	push	ar6
      000DC4 C0 02            [24] 3124 	push	ar2
      000DC6 12r00r00         [24] 3125 	lcall	__divsint
      000DC9 AC 82            [24] 3126 	mov	r4,dpl
      000DCB D0 02            [24] 3127 	pop	ar2
      000DCD D0 06            [24] 3128 	pop	ar6
      000DCF 8C 07            [24] 3129 	mov	ar7,r4
                                   3130 ;	ecen4330_lcd_v3.c:630: if (val <= 9) {
      000DD1 EA               [12] 3131 	mov	a,r2
      000DD2 24 F6            [12] 3132 	add	a,#0xff - 0x09
      000DD4 40 0C            [24] 3133 	jc	00102$
                                   3134 ;	ecen4330_lcd_v3.c:632: store[i] = val + '0';
      000DD6 EE               [12] 3135 	mov	a,r6
      000DD7 24r5B            [12] 3136 	add	a,#_asciiToHex_store_65536_200
      000DD9 F9               [12] 3137 	mov	r1,a
      000DDA 8A 05            [24] 3138 	mov	ar5,r2
      000DDC 74 30            [12] 3139 	mov	a,#0x30
      000DDE 2D               [12] 3140 	add	a,r5
      000DDF F7               [12] 3141 	mov	@r1,a
      000DE0 80 26            [24] 3142 	sjmp	00103$
      000DE2                       3143 00102$:
                                   3144 ;	ecen4330_lcd_v3.c:635: store[i] = (val%10) + 'A';
      000DE2 EE               [12] 3145 	mov	a,r6
      000DE3 24r5B            [12] 3146 	add	a,#_asciiToHex_store_65536_200
      000DE5 F9               [12] 3147 	mov	r1,a
      000DE6 7D 00            [12] 3148 	mov	r5,#0x00
      000DE8 75*00 0A         [24] 3149 	mov	__modsint_PARM_2,#0x0a
                                   3150 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DEB 8D*01            [24] 3151 	mov	(__modsint_PARM_2 + 1),r5
      000DED 8A 82            [24] 3152 	mov	dpl,r2
      000DEF 8D 83            [24] 3153 	mov	dph,r5
      000DF1 C0 07            [24] 3154 	push	ar7
      000DF3 C0 06            [24] 3155 	push	ar6
      000DF5 C0 01            [24] 3156 	push	ar1
      000DF7 12r00r00         [24] 3157 	lcall	__modsint
      000DFA AC 82            [24] 3158 	mov	r4,dpl
      000DFC AD 83            [24] 3159 	mov	r5,dph
      000DFE D0 01            [24] 3160 	pop	ar1
      000E00 D0 06            [24] 3161 	pop	ar6
      000E02 D0 07            [24] 3162 	pop	ar7
      000E04 74 41            [12] 3163 	mov	a,#0x41
      000E06 2C               [12] 3164 	add	a,r4
      000E07 F7               [12] 3165 	mov	@r1,a
      000E08                       3166 00103$:
                                   3167 ;	ecen4330_lcd_v3.c:637: i++;
      000E08 0E               [12] 3168 	inc	r6
      000E09 80 A1            [24] 3169 	sjmp	00104$
      000E0B                       3170 00106$:
                                   3171 ;	ecen4330_lcd_v3.c:639: write(store[1]);
      000E0B 85*5C 82         [24] 3172 	mov	dpl,(_asciiToHex_store_65536_200 + 0x0001)
      000E0E 12r0Br0C         [24] 3173 	lcall	_write
                                   3174 ;	ecen4330_lcd_v3.c:640: write(store[0]);
      000E11 85*5B 82         [24] 3175 	mov	dpl,_asciiToHex_store_65536_200
                                   3176 ;	ecen4330_lcd_v3.c:641: }
      000E14 02r0Br0C         [24] 3177 	ljmp	_write
                                   3178 ;------------------------------------------------------------
                                   3179 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3180 ;------------------------------------------------------------
                                   3181 ;d                         Allocated to registers r7 
                                   3182 ;------------------------------------------------------------
                                   3183 ;	ecen4330_lcd_v3.c:649: uint8_t convertAsciiHex(uint8_t d) {
                                   3184 ;	-----------------------------------------
                                   3185 ;	 function convertAsciiHex
                                   3186 ;	-----------------------------------------
      000E17                       3187 _convertAsciiHex:
                                   3188 ;	ecen4330_lcd_v3.c:650: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000E17 E5 82            [12] 3189 	mov	a,dpl
      000E19 FF               [12] 3190 	mov	r7,a
      000E1A 24 C6            [12] 3191 	add	a,#0xff - 0x39
      000E1C 92*01            [24] 3192 	mov	_convertAsciiHex_sloc0_1_0,c
      000E1E 40 08            [24] 3193 	jc	00103$
      000E20 8F 06            [24] 3194 	mov	ar6,r7
      000E22 EE               [12] 3195 	mov	a,r6
      000E23 24 D0            [12] 3196 	add	a,#0xd0
      000E25 FE               [12] 3197 	mov	r6,a
      000E26 80 04            [24] 3198 	sjmp	00104$
      000E28                       3199 00103$:
      000E28 74 C9            [12] 3200 	mov	a,#0xc9
      000E2A 2F               [12] 3201 	add	a,r7
      000E2B FE               [12] 3202 	mov	r6,a
      000E2C                       3203 00104$:
      000E2C 8E 82            [24] 3204 	mov	dpl,r6
                                   3205 ;	ecen4330_lcd_v3.c:651: }
      000E2E 22               [24] 3206 	ret
                                   3207 ;------------------------------------------------------------
                                   3208 ;Allocation info for local variables in function 'writeSomeLines'
                                   3209 ;------------------------------------------------------------
                                   3210 ;	ecen4330_lcd_v3.c:657: void writeSomeLines () {
                                   3211 ;	-----------------------------------------
                                   3212 ;	 function writeSomeLines
                                   3213 ;	-----------------------------------------
      000E2F                       3214 _writeSomeLines:
                                   3215 ;	ecen4330_lcd_v3.c:658: fillScreen(RED);
      000E2F 90 F8 00         [24] 3216 	mov	dptr,#0xf800
      000E32 12r07r9A         [24] 3217 	lcall	_fillScreen
                                   3218 ;	ecen4330_lcd_v3.c:660: delay(20);
      000E35 90 00 14         [24] 3219 	mov	dptr,#0x0014
      000E38 12r00r10         [24] 3220 	lcall	_delay
                                   3221 ;	ecen4330_lcd_v3.c:661: fillScreen(GREEN);
      000E3B 90 07 E0         [24] 3222 	mov	dptr,#0x07e0
      000E3E 12r07r9A         [24] 3223 	lcall	_fillScreen
                                   3224 ;	ecen4330_lcd_v3.c:663: delay(20);
      000E41 90 00 14         [24] 3225 	mov	dptr,#0x0014
      000E44 12r00r10         [24] 3226 	lcall	_delay
                                   3227 ;	ecen4330_lcd_v3.c:665: setRotation(0);
      000E47 75 82 00         [24] 3228 	mov	dpl,#0x00
      000E4A 12r00rD7         [24] 3229 	lcall	_setRotation
                                   3230 ;	ecen4330_lcd_v3.c:666: fillScreen(BLACK);
      000E4D 90 00 00         [24] 3231 	mov	dptr,#0x0000
      000E50 12r07r9A         [24] 3232 	lcall	_fillScreen
                                   3233 ;	ecen4330_lcd_v3.c:667: testCircles(20, RED);
      000E53 75*3E 00         [24] 3234 	mov	_testCircles_PARM_2,#0x00
      000E56 75*3F F8         [24] 3235 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000E59 75 82 14         [24] 3236 	mov	dpl,#0x14
      000E5C 12r06r28         [24] 3237 	lcall	_testCircles
                                   3238 ;	ecen4330_lcd_v3.c:668: delay(100);
      000E5F 90 00 64         [24] 3239 	mov	dptr,#0x0064
      000E62 12r00r10         [24] 3240 	lcall	_delay
                                   3241 ;	ecen4330_lcd_v3.c:669: fillScreen(BLACK);
      000E65 90 00 00         [24] 3242 	mov	dptr,#0x0000
      000E68 12r07r9A         [24] 3243 	lcall	_fillScreen
                                   3244 ;	ecen4330_lcd_v3.c:670: setTextSize(5);
      000E6B 75 82 05         [24] 3245 	mov	dpl,#0x05
      000E6E 12r00rBF         [24] 3246 	lcall	_setTextSize
                                   3247 ;	ecen4330_lcd_v3.c:671: setTextColor(CYAN, BLACK);
      000E71 E4               [12] 3248 	clr	a
      000E72 F5*00            [12] 3249 	mov	_setTextColor_PARM_2,a
      000E74 F5*01            [12] 3250 	mov	(_setTextColor_PARM_2 + 1),a
      000E76 90 07 FF         [24] 3251 	mov	dptr,#0x07ff
      000E79 12r00rB2         [24] 3252 	lcall	_setTextColor
                                   3253 ;	ecen4330_lcd_v3.c:672: LCD_string_write("Welcome\n");
      000E7C 90r04rFB         [24] 3254 	mov	dptr,#___str_0
      000E7F 75 F0 80         [24] 3255 	mov	b,#0x80
      000E82 12r0Br7A         [24] 3256 	lcall	_LCD_string_write
                                   3257 ;	ecen4330_lcd_v3.c:673: setTextSize(3);
      000E85 75 82 03         [24] 3258 	mov	dpl,#0x03
      000E88 12r00rBF         [24] 3259 	lcall	_setTextSize
                                   3260 ;	ecen4330_lcd_v3.c:674: LCD_string_write("ECEN-4330\n");
      000E8B 90r05r04         [24] 3261 	mov	dptr,#___str_1
      000E8E 75 F0 80         [24] 3262 	mov	b,#0x80
      000E91 12r0Br7A         [24] 3263 	lcall	_LCD_string_write
                                   3264 ;	ecen4330_lcd_v3.c:675: LCD_string_write("Rotation 0");
      000E94 90r05r0F         [24] 3265 	mov	dptr,#___str_2
      000E97 75 F0 80         [24] 3266 	mov	b,#0x80
      000E9A 12r0Br7A         [24] 3267 	lcall	_LCD_string_write
                                   3268 ;	ecen4330_lcd_v3.c:676: delay(200);
      000E9D 90 00 C8         [24] 3269 	mov	dptr,#0x00c8
      000EA0 12r00r10         [24] 3270 	lcall	_delay
                                   3271 ;	ecen4330_lcd_v3.c:677: fillScreen(BLACK);
      000EA3 90 00 00         [24] 3272 	mov	dptr,#0x0000
      000EA6 12r07r9A         [24] 3273 	lcall	_fillScreen
                                   3274 ;	ecen4330_lcd_v3.c:678: setRotation(1);
      000EA9 75 82 01         [24] 3275 	mov	dpl,#0x01
      000EAC 12r00rD7         [24] 3276 	lcall	_setRotation
                                   3277 ;	ecen4330_lcd_v3.c:679: setCursor(0,0);
      000EAF E4               [12] 3278 	clr	a
      000EB0 F5*00            [12] 3279 	mov	_setCursor_PARM_2,a
      000EB2 F5*01            [12] 3280 	mov	(_setCursor_PARM_2 + 1),a
      000EB4 90 00 00         [24] 3281 	mov	dptr,#0x0000
      000EB7 12r00rA5         [24] 3282 	lcall	_setCursor
                                   3283 ;	ecen4330_lcd_v3.c:680: LCD_string_write("Rotation 1");
      000EBA 90r05r1A         [24] 3284 	mov	dptr,#___str_3
      000EBD 75 F0 80         [24] 3285 	mov	b,#0x80
      000EC0 12r0Br7A         [24] 3286 	lcall	_LCD_string_write
                                   3287 ;	ecen4330_lcd_v3.c:681: delay(500);
      000EC3 90 01 F4         [24] 3288 	mov	dptr,#0x01f4
      000EC6 12r00r10         [24] 3289 	lcall	_delay
                                   3290 ;	ecen4330_lcd_v3.c:682: fillScreen(BLACK);
      000EC9 90 00 00         [24] 3291 	mov	dptr,#0x0000
      000ECC 12r07r9A         [24] 3292 	lcall	_fillScreen
                                   3293 ;	ecen4330_lcd_v3.c:683: setRotation(2);
      000ECF 75 82 02         [24] 3294 	mov	dpl,#0x02
      000ED2 12r00rD7         [24] 3295 	lcall	_setRotation
                                   3296 ;	ecen4330_lcd_v3.c:684: setCursor(0,0);
      000ED5 E4               [12] 3297 	clr	a
      000ED6 F5*00            [12] 3298 	mov	_setCursor_PARM_2,a
      000ED8 F5*01            [12] 3299 	mov	(_setCursor_PARM_2 + 1),a
      000EDA 90 00 00         [24] 3300 	mov	dptr,#0x0000
      000EDD 12r00rA5         [24] 3301 	lcall	_setCursor
                                   3302 ;	ecen4330_lcd_v3.c:685: LCD_string_write("Rotation 2");
      000EE0 90r05r25         [24] 3303 	mov	dptr,#___str_4
      000EE3 75 F0 80         [24] 3304 	mov	b,#0x80
      000EE6 12r0Br7A         [24] 3305 	lcall	_LCD_string_write
                                   3306 ;	ecen4330_lcd_v3.c:686: delay(500);
      000EE9 90 01 F4         [24] 3307 	mov	dptr,#0x01f4
      000EEC 12r00r10         [24] 3308 	lcall	_delay
                                   3309 ;	ecen4330_lcd_v3.c:687: fillScreen(BLACK);
      000EEF 90 00 00         [24] 3310 	mov	dptr,#0x0000
      000EF2 12r07r9A         [24] 3311 	lcall	_fillScreen
                                   3312 ;	ecen4330_lcd_v3.c:688: setRotation(3);
      000EF5 75 82 03         [24] 3313 	mov	dpl,#0x03
      000EF8 12r00rD7         [24] 3314 	lcall	_setRotation
                                   3315 ;	ecen4330_lcd_v3.c:689: setCursor(0,0);
      000EFB E4               [12] 3316 	clr	a
      000EFC F5*00            [12] 3317 	mov	_setCursor_PARM_2,a
      000EFE F5*01            [12] 3318 	mov	(_setCursor_PARM_2 + 1),a
      000F00 90 00 00         [24] 3319 	mov	dptr,#0x0000
      000F03 12r00rA5         [24] 3320 	lcall	_setCursor
                                   3321 ;	ecen4330_lcd_v3.c:690: delay(200);
      000F06 90 00 C8         [24] 3322 	mov	dptr,#0x00c8
      000F09 12r00r10         [24] 3323 	lcall	_delay
                                   3324 ;	ecen4330_lcd_v3.c:691: LCD_string_write("Rotation 3");
      000F0C 90r05r30         [24] 3325 	mov	dptr,#___str_5
      000F0F 75 F0 80         [24] 3326 	mov	b,#0x80
      000F12 12r0Br7A         [24] 3327 	lcall	_LCD_string_write
                                   3328 ;	ecen4330_lcd_v3.c:692: delay(200);
      000F15 90 00 C8         [24] 3329 	mov	dptr,#0x00c8
                                   3330 ;	ecen4330_lcd_v3.c:693: }
      000F18 02r00r10         [24] 3331 	ljmp	_delay
                                   3332 ;------------------------------------------------------------
                                   3333 ;Allocation info for local variables in function 'getAddress'
                                   3334 ;------------------------------------------------------------
                                   3335 ;input                     Allocated to registers r4 
                                   3336 ;hex                       Allocated to registers r4 
                                   3337 ;i                         Allocated to registers r5 
                                   3338 ;address                   Allocated to registers r6 r7 
                                   3339 ;------------------------------------------------------------
                                   3340 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3341 ;	-----------------------------------------
                                   3342 ;	 function getAddress
                                   3343 ;	-----------------------------------------
      000F1B                       3344 _getAddress:
                                   3345 ;	getFunctions.c:16: address = 0;
      000F1B 7E 00            [12] 3346 	mov	r6,#0x00
      000F1D 7F 00            [12] 3347 	mov	r7,#0x00
                                   3348 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      000F1F 7D 00            [12] 3349 	mov	r5,#0x00
      000F21                       3350 00104$:
                                   3351 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      000F21 C0 07            [24] 3352 	push	ar7
      000F23 C0 06            [24] 3353 	push	ar6
      000F25 C0 05            [24] 3354 	push	ar5
      000F27 12r0Cr0A         [24] 3355 	lcall	_keyDetect
                                   3356 ;	getFunctions.c:21: write(input);						// display nibble to user
      000F2A AC 82            [24] 3357 	mov  r4,dpl
      000F2C C0 04            [24] 3358 	push	ar4
      000F2E 12r0Br0C         [24] 3359 	lcall	_write
      000F31 D0 04            [24] 3360 	pop	ar4
                                   3361 ;	getFunctions.c:22: hex = convertAsciiHex(input);			// convert ascii char to hex
      000F33 8C 82            [24] 3362 	mov	dpl,r4
      000F35 12r0Er17         [24] 3363 	lcall	_convertAsciiHex
      000F38 AC 82            [24] 3364 	mov	r4,dpl
      000F3A D0 05            [24] 3365 	pop	ar5
      000F3C D0 06            [24] 3366 	pop	ar6
      000F3E D0 07            [24] 3367 	pop	ar7
                                   3368 ;	getFunctions.c:25: address = address | hex;
      000F40 7B 00            [12] 3369 	mov	r3,#0x00
      000F42 EC               [12] 3370 	mov	a,r4
      000F43 42 06            [12] 3371 	orl	ar6,a
      000F45 EB               [12] 3372 	mov	a,r3
      000F46 42 07            [12] 3373 	orl	ar7,a
                                   3374 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      000F48 BD 03 02         [24] 3375 	cjne	r5,#0x03,00121$
      000F4B 80 0E            [24] 3376 	sjmp	00105$
      000F4D                       3377 00121$:
      000F4D EF               [12] 3378 	mov	a,r7
      000F4E C4               [12] 3379 	swap	a
      000F4F 54 F0            [12] 3380 	anl	a,#0xf0
      000F51 CE               [12] 3381 	xch	a,r6
      000F52 C4               [12] 3382 	swap	a
      000F53 CE               [12] 3383 	xch	a,r6
      000F54 6E               [12] 3384 	xrl	a,r6
      000F55 CE               [12] 3385 	xch	a,r6
      000F56 54 F0            [12] 3386 	anl	a,#0xf0
      000F58 CE               [12] 3387 	xch	a,r6
      000F59 6E               [12] 3388 	xrl	a,r6
      000F5A FF               [12] 3389 	mov	r7,a
      000F5B                       3390 00105$:
                                   3391 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      000F5B 0D               [12] 3392 	inc	r5
      000F5C BD 04 00         [24] 3393 	cjne	r5,#0x04,00122$
      000F5F                       3394 00122$:
      000F5F 40 C0            [24] 3395 	jc	00104$
                                   3396 ;	getFunctions.c:28: return address;
      000F61 8E 82            [24] 3397 	mov	dpl,r6
      000F63 8F 83            [24] 3398 	mov	dph,r7
                                   3399 ;	getFunctions.c:29: }
      000F65 22               [24] 3400 	ret
                                   3401 ;------------------------------------------------------------
                                   3402 ;Allocation info for local variables in function 'getByte'
                                   3403 ;------------------------------------------------------------
                                   3404 ;input                     Allocated to registers r5 
                                   3405 ;hex                       Allocated to registers r5 
                                   3406 ;byte                      Allocated to registers r7 
                                   3407 ;i                         Allocated to registers r6 
                                   3408 ;------------------------------------------------------------
                                   3409 ;	getFunctions.c:36: uint8_t getByte() {
                                   3410 ;	-----------------------------------------
                                   3411 ;	 function getByte
                                   3412 ;	-----------------------------------------
      000F66                       3413 _getByte:
                                   3414 ;	getFunctions.c:40: byte = 0;
      000F66 7F 00            [12] 3415 	mov	r7,#0x00
                                   3416 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      000F68 7E 00            [12] 3417 	mov	r6,#0x00
      000F6A                       3418 00104$:
                                   3419 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      000F6A C0 07            [24] 3420 	push	ar7
      000F6C C0 06            [24] 3421 	push	ar6
      000F6E 12r0Cr0A         [24] 3422 	lcall	_keyDetect
                                   3423 ;	getFunctions.c:45: write(input);						// display nibble to user
      000F71 AD 82            [24] 3424 	mov  r5,dpl
      000F73 C0 05            [24] 3425 	push	ar5
      000F75 12r0Br0C         [24] 3426 	lcall	_write
      000F78 D0 05            [24] 3427 	pop	ar5
                                   3428 ;	getFunctions.c:46: hex = convertAsciiHex(input);			// convert ascii char to hex
      000F7A 8D 82            [24] 3429 	mov	dpl,r5
      000F7C 12r0Er17         [24] 3430 	lcall	_convertAsciiHex
      000F7F AD 82            [24] 3431 	mov	r5,dpl
      000F81 D0 06            [24] 3432 	pop	ar6
      000F83 D0 07            [24] 3433 	pop	ar7
                                   3434 ;	getFunctions.c:49: byte = byte | hex;
      000F85 ED               [12] 3435 	mov	a,r5
      000F86 42 07            [12] 3436 	orl	ar7,a
                                   3437 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      000F88 BE 01 02         [24] 3438 	cjne	r6,#0x01,00121$
      000F8B 80 07            [24] 3439 	sjmp	00105$
      000F8D                       3440 00121$:
      000F8D 8F 05            [24] 3441 	mov	ar5,r7
      000F8F ED               [12] 3442 	mov	a,r5
      000F90 C4               [12] 3443 	swap	a
      000F91 54 F0            [12] 3444 	anl	a,#0xf0
      000F93 FF               [12] 3445 	mov	r7,a
      000F94                       3446 00105$:
                                   3447 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      000F94 0E               [12] 3448 	inc	r6
      000F95 BE 02 00         [24] 3449 	cjne	r6,#0x02,00122$
      000F98                       3450 00122$:
      000F98 40 D0            [24] 3451 	jc	00104$
                                   3452 ;	getFunctions.c:52: return byte;
      000F9A 8F 82            [24] 3453 	mov	dpl,r7
                                   3454 ;	getFunctions.c:53: }
      000F9C 22               [24] 3455 	ret
                                   3456 ;------------------------------------------------------------
                                   3457 ;Allocation info for local variables in function 'check'
                                   3458 ;------------------------------------------------------------
                                   3459 ;ramAddress                Allocated to registers r4 r5 
                                   3460 ;checker                   Allocated with name '_check_checker_65537_214'
                                   3461 ;input                     Allocated with name '_check_input_65537_214'
                                   3462 ;fetched                   Allocated with name '_check_fetched_65537_214'
                                   3463 ;i                         Allocated with name '_check_i_65537_214'
                                   3464 ;error                     Allocated with name '_check_error_65537_214'
                                   3465 ;------------------------------------------------------------
                                   3466 ;	check.c:6: void check() {
                                   3467 ;	-----------------------------------------
                                   3468 ;	 function check
                                   3469 ;	-----------------------------------------
      000F9D                       3470 _check:
                                   3471 ;	check.c:8: fillScreen(GRAY);
      000F9D 90 D6 BA         [24] 3472 	mov	dptr,#0xd6ba
      000FA0 12r07r9A         [24] 3473 	lcall	_fillScreen
                                   3474 ;	check.c:9: setCursor(0, 0);
      000FA3 E4               [12] 3475 	clr	a
      000FA4 F5*00            [12] 3476 	mov	_setCursor_PARM_2,a
      000FA6 F5*01            [12] 3477 	mov	(_setCursor_PARM_2 + 1),a
      000FA8 90 00 00         [24] 3478 	mov	dptr,#0x0000
      000FAB 12r00rA5         [24] 3479 	lcall	_setCursor
                                   3480 ;	check.c:16: __xdata bool error = false;
      000FAE 90r00r01         [24] 3481 	mov	dptr,#_check_error_65537_214
      000FB1 E4               [12] 3482 	clr	a
      000FB2 F0               [24] 3483 	movx	@dptr,a
                                   3484 ;	check.c:20: setTextSize(2);
      000FB3 75 82 02         [24] 3485 	mov	dpl,#0x02
      000FB6 12r00rBF         [24] 3486 	lcall	_setTextSize
                                   3487 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      000FB9 90r05r3B         [24] 3488 	mov	dptr,#___str_6
      000FBC 75 F0 80         [24] 3489 	mov	b,#0x80
      000FBF 12r0Br7A         [24] 3490 	lcall	_LCD_string_write
                                   3491 ;	check.c:22: checker = getByte();
      000FC2 12r0Fr66         [24] 3492 	lcall	_getByte
      000FC5 E5 82            [12] 3493 	mov	a,dpl
      000FC7 90r00r00         [24] 3494 	mov	dptr,#_check_checker_65537_214
      000FCA F0               [24] 3495 	movx	@dptr,a
                                   3496 ;	check.c:23: write('\n');
      000FCB 75 82 0A         [24] 3497 	mov	dpl,#0x0a
      000FCE 12r0Br0C         [24] 3498 	lcall	_write
                                   3499 ;	check.c:24: LCD_string_write("In progress...\n");
      000FD1 90r05r50         [24] 3500 	mov	dptr,#___str_7
      000FD4 75 F0 80         [24] 3501 	mov	b,#0x80
      000FD7 12r0Br7A         [24] 3502 	lcall	_LCD_string_write
                                   3503 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000FDA 7E 00            [12] 3504 	mov	r6,#0x00
      000FDC 7F 00            [12] 3505 	mov	r7,#0x00
      000FDE                       3506 00112$:
                                   3507 ;	check.c:30: IOM = 0;
                                   3508 ;	assignBit
      000FDE C2 B4            [12] 3509 	clr	_P3_4
                                   3510 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      000FE0 8E 04            [24] 3511 	mov	ar4,r6
      000FE2 8F 05            [24] 3512 	mov	ar5,r7
                                   3513 ;	check.c:32: *ramAddress = checker;
      000FE4 90r00r00         [24] 3514 	mov	dptr,#_check_checker_65537_214
      000FE7 E0               [24] 3515 	movx	a,@dptr
      000FE8 FB               [12] 3516 	mov	r3,a
      000FE9 F9               [12] 3517 	mov	r1,a
      000FEA 7A 00            [12] 3518 	mov	r2,#0x00
      000FEC 8C 82            [24] 3519 	mov	dpl,r4
      000FEE 8D 83            [24] 3520 	mov	dph,r5
      000FF0 E9               [12] 3521 	mov	a,r1
      000FF1 F0               [24] 3522 	movx	@dptr,a
      000FF2 EA               [12] 3523 	mov	a,r2
      000FF3 A3               [24] 3524 	inc	dptr
      000FF4 F0               [24] 3525 	movx	@dptr,a
                                   3526 ;	check.c:33: fetched = *ramAddress;
                                   3527 ;	check.c:34: IOM = 1;
                                   3528 ;	assignBit
      000FF5 D2 B4            [12] 3529 	setb	_P3_4
                                   3530 ;	check.c:35: if (fetched != checker) {
      000FF7 E9               [12] 3531 	mov	a,r1
      000FF8 B5 03 02         [24] 3532 	cjne	a,ar3,00136$
      000FFB 80 43            [24] 3533 	sjmp	00104$
      000FFD                       3534 00136$:
                                   3535 ;	check.c:36: asciiToHex(checker);
      000FFD 8B 82            [24] 3536 	mov	dpl,r3
      000FFF C0 05            [24] 3537 	push	ar5
      001001 C0 04            [24] 3538 	push	ar4
      001003 C0 01            [24] 3539 	push	ar1
      001005 12r0DrA2         [24] 3540 	lcall	_asciiToHex
                                   3541 ;	check.c:37: write(' ');
      001008 75 82 20         [24] 3542 	mov	dpl,#0x20
      00100B 12r0Br0C         [24] 3543 	lcall	_write
      00100E D0 01            [24] 3544 	pop	ar1
                                   3545 ;	check.c:38: asciiToHex(fetched);
      001010 89 82            [24] 3546 	mov	dpl,r1
      001012 12r0DrA2         [24] 3547 	lcall	_asciiToHex
                                   3548 ;	check.c:39: write(' ');
      001015 75 82 20         [24] 3549 	mov	dpl,#0x20
      001018 12r0Br0C         [24] 3550 	lcall	_write
      00101B D0 04            [24] 3551 	pop	ar4
      00101D D0 05            [24] 3552 	pop	ar5
                                   3553 ;	check.c:40: asciiToHex(*ramAddress);
      00101F 8C 82            [24] 3554 	mov	dpl,r4
      001021 8D 83            [24] 3555 	mov	dph,r5
      001023 E0               [24] 3556 	movx	a,@dptr
      001024 F5 82            [12] 3557 	mov	dpl,a
      001026 12r0DrA2         [24] 3558 	lcall	_asciiToHex
                                   3559 ;	check.c:41: write('\n');
      001029 75 82 0A         [24] 3560 	mov	dpl,#0x0a
      00102C 12r0Br0C         [24] 3561 	lcall	_write
                                   3562 ;	check.c:42: LCD_string_write("Memory check failed\n");
      00102F 90r05r60         [24] 3563 	mov	dptr,#___str_8
      001032 75 F0 80         [24] 3564 	mov	b,#0x80
      001035 12r0Br7A         [24] 3565 	lcall	_LCD_string_write
                                   3566 ;	check.c:43: error = true;
      001038 90r00r01         [24] 3567 	mov	dptr,#_check_error_65537_214
      00103B 74 01            [12] 3568 	mov	a,#0x01
      00103D F0               [24] 3569 	movx	@dptr,a
                                   3570 ;	check.c:44: break;
      00103E 80 78            [24] 3571 	sjmp	00106$
      001040                       3572 00104$:
                                   3573 ;	check.c:46: IOM = 0;
                                   3574 ;	assignBit
      001040 C2 B4            [12] 3575 	clr	_P3_4
                                   3576 ;	check.c:47: checker = ~checker;
      001042 90r00r00         [24] 3577 	mov	dptr,#_check_checker_65537_214
      001045 EB               [12] 3578 	mov	a,r3
      001046 F4               [12] 3579 	cpl	a
      001047 F0               [24] 3580 	movx	@dptr,a
                                   3581 ;	check.c:48: *ramAddress = checker;
      001048 E0               [24] 3582 	movx	a,@dptr
      001049 FB               [12] 3583 	mov	r3,a
      00104A F9               [12] 3584 	mov	r1,a
      00104B 7A 00            [12] 3585 	mov	r2,#0x00
      00104D 8C 82            [24] 3586 	mov	dpl,r4
      00104F 8D 83            [24] 3587 	mov	dph,r5
      001051 E9               [12] 3588 	mov	a,r1
      001052 F0               [24] 3589 	movx	@dptr,a
      001053 EA               [12] 3590 	mov	a,r2
      001054 A3               [24] 3591 	inc	dptr
      001055 F0               [24] 3592 	movx	@dptr,a
                                   3593 ;	check.c:49: fetched = *ramAddress;
                                   3594 ;	check.c:50: IOM = 1;
                                   3595 ;	assignBit
      001056 D2 B4            [12] 3596 	setb	_P3_4
                                   3597 ;	check.c:51: if (fetched != checker) {
      001058 E9               [12] 3598 	mov	a,r1
      001059 B5 03 02         [24] 3599 	cjne	a,ar3,00137$
      00105C 80 45            [24] 3600 	sjmp	00113$
      00105E                       3601 00137$:
                                   3602 ;	check.c:52: asciiToHex(~checker);
      00105E EB               [12] 3603 	mov	a,r3
      00105F F4               [12] 3604 	cpl	a
      001060 F5 82            [12] 3605 	mov	dpl,a
      001062 C0 05            [24] 3606 	push	ar5
      001064 C0 04            [24] 3607 	push	ar4
      001066 C0 01            [24] 3608 	push	ar1
      001068 12r0DrA2         [24] 3609 	lcall	_asciiToHex
                                   3610 ;	check.c:53: write(' ');
      00106B 75 82 20         [24] 3611 	mov	dpl,#0x20
      00106E 12r0Br0C         [24] 3612 	lcall	_write
      001071 D0 01            [24] 3613 	pop	ar1
                                   3614 ;	check.c:54: asciiToHex(fetched);
      001073 89 82            [24] 3615 	mov	dpl,r1
      001075 12r0DrA2         [24] 3616 	lcall	_asciiToHex
                                   3617 ;	check.c:55: write(' ');
      001078 75 82 20         [24] 3618 	mov	dpl,#0x20
      00107B 12r0Br0C         [24] 3619 	lcall	_write
      00107E D0 04            [24] 3620 	pop	ar4
      001080 D0 05            [24] 3621 	pop	ar5
                                   3622 ;	check.c:56: asciiToHex(*ramAddress);
      001082 8C 82            [24] 3623 	mov	dpl,r4
      001084 8D 83            [24] 3624 	mov	dph,r5
      001086 E0               [24] 3625 	movx	a,@dptr
      001087 F5 82            [12] 3626 	mov	dpl,a
      001089 12r0DrA2         [24] 3627 	lcall	_asciiToHex
                                   3628 ;	check.c:57: write('\n');
      00108C 75 82 0A         [24] 3629 	mov	dpl,#0x0a
      00108F 12r0Br0C         [24] 3630 	lcall	_write
                                   3631 ;	check.c:58: LCD_string_write("Memory check failed\n");
      001092 90r05r60         [24] 3632 	mov	dptr,#___str_8
      001095 75 F0 80         [24] 3633 	mov	b,#0x80
      001098 12r0Br7A         [24] 3634 	lcall	_LCD_string_write
                                   3635 ;	check.c:59: error = true;
      00109B 90r00r01         [24] 3636 	mov	dptr,#_check_error_65537_214
      00109E 74 01            [12] 3637 	mov	a,#0x01
      0010A0 F0               [24] 3638 	movx	@dptr,a
                                   3639 ;	check.c:60: break;
      0010A1 80 15            [24] 3640 	sjmp	00106$
      0010A3                       3641 00113$:
                                   3642 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0010A3 0E               [12] 3643 	inc	r6
      0010A4 BE 00 01         [24] 3644 	cjne	r6,#0x00,00138$
      0010A7 0F               [12] 3645 	inc	r7
      0010A8                       3646 00138$:
      0010A8 8E 04            [24] 3647 	mov	ar4,r6
      0010AA 8F 05            [24] 3648 	mov	ar5,r7
      0010AC C3               [12] 3649 	clr	c
      0010AD EC               [12] 3650 	mov	a,r4
      0010AE 94 FF            [12] 3651 	subb	a,#0xff
      0010B0 ED               [12] 3652 	mov	a,r5
      0010B1 94 FF            [12] 3653 	subb	a,#0xff
      0010B3 50 03            [24] 3654 	jnc	00139$
      0010B5 02r0FrDE         [24] 3655 	ljmp	00112$
      0010B8                       3656 00139$:
      0010B8                       3657 00106$:
                                   3658 ;	check.c:68: if (error != false) {
      0010B8 90r00r01         [24] 3659 	mov	dptr,#_check_error_65537_214
      0010BB E0               [24] 3660 	movx	a,@dptr
      0010BC 60 09            [24] 3661 	jz	00108$
                                   3662 ;	check.c:69: LCD_string_write("Success!\n");
      0010BE 90r05r75         [24] 3663 	mov	dptr,#___str_9
      0010C1 75 F0 80         [24] 3664 	mov	b,#0x80
      0010C4 12r0Br7A         [24] 3665 	lcall	_LCD_string_write
      0010C7                       3666 00108$:
                                   3667 ;	check.c:73: LCD_string_write("Press 1 for menu");
      0010C7 90r05r7F         [24] 3668 	mov	dptr,#___str_10
      0010CA 75 F0 80         [24] 3669 	mov	b,#0x80
      0010CD 12r0Br7A         [24] 3670 	lcall	_LCD_string_write
                                   3671 ;	check.c:75: do {
      0010D0                       3672 00109$:
                                   3673 ;	check.c:76: input = keyDetect();
      0010D0 12r0Cr0A         [24] 3674 	lcall	_keyDetect
      0010D3 AF 82            [24] 3675 	mov	r7,dpl
                                   3676 ;	check.c:77: } while (input != '1');
      0010D5 BF 31 F8         [24] 3677 	cjne	r7,#0x31,00109$
                                   3678 ;	check.c:78: }
      0010D8 22               [24] 3679 	ret
                                   3680 ;------------------------------------------------------------
                                   3681 ;Allocation info for local variables in function 'basic'
                                   3682 ;------------------------------------------------------------
                                   3683 ;val                       Allocated to registers r7 
                                   3684 ;fetched                   Allocated to registers r7 
                                   3685 ;add                       Allocated to registers r5 r6 
                                   3686 ;ramAddress                Allocated to registers 
                                   3687 ;------------------------------------------------------------
                                   3688 ;	check.c:84: void basic() {
                                   3689 ;	-----------------------------------------
                                   3690 ;	 function basic
                                   3691 ;	-----------------------------------------
      0010D9                       3692 _basic:
                                   3693 ;	check.c:86: fillScreen(GRAY);
      0010D9 90 D6 BA         [24] 3694 	mov	dptr,#0xd6ba
      0010DC 12r07r9A         [24] 3695 	lcall	_fillScreen
                                   3696 ;	check.c:87: setCursor(0, 0);
      0010DF E4               [12] 3697 	clr	a
      0010E0 F5*00            [12] 3698 	mov	_setCursor_PARM_2,a
      0010E2 F5*01            [12] 3699 	mov	(_setCursor_PARM_2 + 1),a
      0010E4 90 00 00         [24] 3700 	mov	dptr,#0x0000
      0010E7 12r00rA5         [24] 3701 	lcall	_setCursor
                                   3702 ;	check.c:88: setTextSize(2);
      0010EA 75 82 02         [24] 3703 	mov	dpl,#0x02
      0010ED 12r00rBF         [24] 3704 	lcall	_setTextSize
                                   3705 ;	check.c:97: LCD_string_write("Enter byte\n");
      0010F0 90r05r90         [24] 3706 	mov	dptr,#___str_11
      0010F3 75 F0 80         [24] 3707 	mov	b,#0x80
      0010F6 12r0Br7A         [24] 3708 	lcall	_LCD_string_write
                                   3709 ;	check.c:98: val = getByte();
      0010F9 12r0Fr66         [24] 3710 	lcall	_getByte
      0010FC AF 82            [24] 3711 	mov	r7,dpl
                                   3712 ;	check.c:99: write('\n');
      0010FE 75 82 0A         [24] 3713 	mov	dpl,#0x0a
      001101 C0 07            [24] 3714 	push	ar7
      001103 12r0Br0C         [24] 3715 	lcall	_write
                                   3716 ;	check.c:102: LCD_string_write("Enter address\n");
      001106 90r05r9C         [24] 3717 	mov	dptr,#___str_12
      001109 75 F0 80         [24] 3718 	mov	b,#0x80
      00110C 12r0Br7A         [24] 3719 	lcall	_LCD_string_write
                                   3720 ;	check.c:103: add = getAddress();
      00110F 12r0Fr1B         [24] 3721 	lcall	_getAddress
      001112 AD 82            [24] 3722 	mov	r5,dpl
      001114 AE 83            [24] 3723 	mov	r6,dph
                                   3724 ;	check.c:104: write('\n');
      001116 75 82 0A         [24] 3725 	mov	dpl,#0x0a
      001119 C0 06            [24] 3726 	push	ar6
      00111B C0 05            [24] 3727 	push	ar5
      00111D 12r0Br0C         [24] 3728 	lcall	_write
                                   3729 ;	check.c:105: LCD_string_write("In progress\n");
      001120 90r05rAB         [24] 3730 	mov	dptr,#___str_13
      001123 75 F0 80         [24] 3731 	mov	b,#0x80
      001126 12r0Br7A         [24] 3732 	lcall	_LCD_string_write
      001129 D0 05            [24] 3733 	pop	ar5
      00112B D0 06            [24] 3734 	pop	ar6
      00112D D0 07            [24] 3735 	pop	ar7
                                   3736 ;	check.c:107: IOM = 0;
                                   3737 ;	assignBit
      00112F C2 B4            [12] 3738 	clr	_P3_4
                                   3739 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      001131 8D 82            [24] 3740 	mov	dpl,r5
      001133 8E 83            [24] 3741 	mov	dph,r6
                                   3742 ;	check.c:111: *ramAddress = val;
      001135 8F 05            [24] 3743 	mov	ar5,r7
      001137 7E 00            [12] 3744 	mov	r6,#0x00
      001139 ED               [12] 3745 	mov	a,r5
      00113A F0               [24] 3746 	movx	@dptr,a
      00113B EE               [12] 3747 	mov	a,r6
      00113C A3               [24] 3748 	inc	dptr
      00113D F0               [24] 3749 	movx	@dptr,a
                                   3750 ;	check.c:114: fetched = *ramAddress;
                                   3751 ;	check.c:116: IOM = 1;
                                   3752 ;	assignBit
      00113E D2 B4            [12] 3753 	setb	_P3_4
                                   3754 ;	check.c:119: if (fetched == val) {
      001140 ED               [12] 3755 	mov	a,r5
      001141 B5 07 10         [24] 3756 	cjne	a,ar7,00102$
                                   3757 ;	check.c:120: asciiToHex(fetched);
      001144 8D 82            [24] 3758 	mov	dpl,r5
      001146 12r0DrA2         [24] 3759 	lcall	_asciiToHex
                                   3760 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      001149 90r05rB8         [24] 3761 	mov	dptr,#___str_14
      00114C 75 F0 80         [24] 3762 	mov	b,#0x80
      00114F 12r0Br7A         [24] 3763 	lcall	_LCD_string_write
      001152 80 09            [24] 3764 	sjmp	00103$
      001154                       3765 00102$:
                                   3766 ;	check.c:123: LCD_string_write("Check failed\n");
      001154 90r05rCC         [24] 3767 	mov	dptr,#___str_15
      001157 75 F0 80         [24] 3768 	mov	b,#0x80
      00115A 12r0Br7A         [24] 3769 	lcall	_LCD_string_write
      00115D                       3770 00103$:
                                   3771 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      00115D 90r05rDA         [24] 3772 	mov	dptr,#___str_16
      001160 75 F0 80         [24] 3773 	mov	b,#0x80
      001163 12r0Br7A         [24] 3774 	lcall	_LCD_string_write
                                   3775 ;	check.c:128: do {
      001166                       3776 00104$:
                                   3777 ;	check.c:129: fetched = keyDetect();
      001166 12r0Cr0A         [24] 3778 	lcall	_keyDetect
      001169 AF 82            [24] 3779 	mov	r7,dpl
                                   3780 ;	check.c:130: } while (fetched != '1');
      00116B BF 31 F8         [24] 3781 	cjne	r7,#0x31,00104$
                                   3782 ;	check.c:131: }
      00116E 22               [24] 3783 	ret
                                   3784 ;------------------------------------------------------------
                                   3785 ;Allocation info for local variables in function 'menu'
                                   3786 ;------------------------------------------------------------
                                   3787 ;	main.c:27: void menu(void) {
                                   3788 ;	-----------------------------------------
                                   3789 ;	 function menu
                                   3790 ;	-----------------------------------------
      00116F                       3791 _menu:
                                   3792 ;	main.c:29: setRotation(2);
      00116F 75 82 02         [24] 3793 	mov	dpl,#0x02
      001172 12r00rD7         [24] 3794 	lcall	_setRotation
                                   3795 ;	main.c:30: setTextSize(3);
      001175 75 82 03         [24] 3796 	mov	dpl,#0x03
      001178 12r00rBF         [24] 3797 	lcall	_setTextSize
                                   3798 ;	main.c:31: fillScreen(GRAY);
      00117B 90 D6 BA         [24] 3799 	mov	dptr,#0xd6ba
      00117E 12r07r9A         [24] 3800 	lcall	_fillScreen
                                   3801 ;	main.c:32: setTextColor(BLACK, GRAY);
      001181 75*00 BA         [24] 3802 	mov	_setTextColor_PARM_2,#0xba
      001184 75*01 D6         [24] 3803 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001187 90 00 00         [24] 3804 	mov	dptr,#0x0000
      00118A 12r00rB2         [24] 3805 	lcall	_setTextColor
                                   3806 ;	main.c:33: setCursor(0, 0);
      00118D E4               [12] 3807 	clr	a
      00118E F5*00            [12] 3808 	mov	_setCursor_PARM_2,a
      001190 F5*01            [12] 3809 	mov	(_setCursor_PARM_2 + 1),a
      001192 90 00 00         [24] 3810 	mov	dptr,#0x0000
      001195 12r00rA5         [24] 3811 	lcall	_setCursor
                                   3812 ;	main.c:36: LCD_string_write("Brandon Cline\n");
      001198 90r05rEC         [24] 3813 	mov	dptr,#___str_17
      00119B 75 F0 80         [24] 3814 	mov	b,#0x80
      00119E 12r0Br7A         [24] 3815 	lcall	_LCD_string_write
                                   3816 ;	main.c:37: LCD_string_write("ECEN 4330\n");
      0011A1 90r05rFB         [24] 3817 	mov	dptr,#___str_18
      0011A4 75 F0 80         [24] 3818 	mov	b,#0x80
      0011A7 12r0Br7A         [24] 3819 	lcall	_LCD_string_write
                                   3820 ;	main.c:41: LCD_string_write("1: Basic check\n");
      0011AA 90r06r06         [24] 3821 	mov	dptr,#___str_19
      0011AD 75 F0 80         [24] 3822 	mov	b,#0x80
      0011B0 12r0Br7A         [24] 3823 	lcall	_LCD_string_write
                                   3824 ;	main.c:43: LCD_string_write("2: Dump\n");
      0011B3 90r06r16         [24] 3825 	mov	dptr,#___str_20
      0011B6 75 F0 80         [24] 3826 	mov	b,#0x80
      0011B9 12r0Br7A         [24] 3827 	lcall	_LCD_string_write
                                   3828 ;	main.c:45: LCD_string_write("3: Check\n");
      0011BC 90r06r1F         [24] 3829 	mov	dptr,#___str_21
      0011BF 75 F0 80         [24] 3830 	mov	b,#0x80
      0011C2 12r0Br7A         [24] 3831 	lcall	_LCD_string_write
                                   3832 ;	main.c:47: LCD_string_write("A: Move\n");
      0011C5 90r06r29         [24] 3833 	mov	dptr,#___str_22
      0011C8 75 F0 80         [24] 3834 	mov	b,#0x80
      0011CB 12r0Br7A         [24] 3835 	lcall	_LCD_string_write
                                   3836 ;	main.c:49: LCD_string_write("4: Edit\n");
      0011CE 90r06r32         [24] 3837 	mov	dptr,#___str_23
      0011D1 75 F0 80         [24] 3838 	mov	b,#0x80
      0011D4 12r0Br7A         [24] 3839 	lcall	_LCD_string_write
                                   3840 ;	main.c:51: LCD_string_write("5: Find\n");
      0011D7 90r06r3B         [24] 3841 	mov	dptr,#___str_24
      0011DA 75 F0 80         [24] 3842 	mov	b,#0x80
      0011DD 12r0Br7A         [24] 3843 	lcall	_LCD_string_write
                                   3844 ;	main.c:53: LCD_string_write("6: Count\n");
      0011E0 90r06r44         [24] 3845 	mov	dptr,#___str_25
      0011E3 75 F0 80         [24] 3846 	mov	b,#0x80
                                   3847 ;	main.c:56: }
      0011E6 02r0Br7A         [24] 3848 	ljmp	_LCD_string_write
                                   3849 ;------------------------------------------------------------
                                   3850 ;Allocation info for local variables in function 'main'
                                   3851 ;------------------------------------------------------------
                                   3852 ;input                     Allocated with name '_main_input_65536_230'
                                   3853 ;------------------------------------------------------------
                                   3854 ;	main.c:58: void main(void) {
                                   3855 ;	-----------------------------------------
                                   3856 ;	 function main
                                   3857 ;	-----------------------------------------
      0011E9                       3858 _main:
                                   3859 ;	main.c:63: TFT_LCD_INIT();
      0011E9 12r01rDD         [24] 3860 	lcall	_TFT_LCD_INIT
                                   3861 ;	main.c:65: fillScreen(BLACK);
      0011EC 90 00 00         [24] 3862 	mov	dptr,#0x0000
      0011EF 12r07r9A         [24] 3863 	lcall	_fillScreen
                                   3864 ;	main.c:66: setRotation(0);
      0011F2 75 82 00         [24] 3865 	mov	dpl,#0x00
      0011F5 12r00rD7         [24] 3866 	lcall	_setRotation
                                   3867 ;	main.c:67: testCircles(20, BLUE);
      0011F8 75*3E 1F         [24] 3868 	mov	_testCircles_PARM_2,#0x1f
      0011FB 75*3F 00         [24] 3869 	mov	(_testCircles_PARM_2 + 1),#0x00
      0011FE 75 82 14         [24] 3870 	mov	dpl,#0x14
      001201 12r06r28         [24] 3871 	lcall	_testCircles
                                   3872 ;	main.c:71: while (1) {
      001204                       3873 00106$:
                                   3874 ;	main.c:73: menu();
      001204 12r11r6F         [24] 3875 	lcall	_menu
                                   3876 ;	main.c:76: input = keyDetect();
      001207 12r0Cr0A         [24] 3877 	lcall	_keyDetect
      00120A AF 82            [24] 3878 	mov	r7,dpl
                                   3879 ;	main.c:79: switch(input) {
      00120C BF 31 02         [24] 3880 	cjne	r7,#0x31,00122$
      00120F 80 05            [24] 3881 	sjmp	00101$
      001211                       3882 00122$:
                                   3883 ;	main.c:80: case '1': basic(); break;
      001211 BF 33 F0         [24] 3884 	cjne	r7,#0x33,00106$
      001214 80 05            [24] 3885 	sjmp	00102$
      001216                       3886 00101$:
      001216 12r10rD9         [24] 3887 	lcall	_basic
                                   3888 ;	main.c:82: case '3': check(); break;
      001219 80 E9            [24] 3889 	sjmp	00106$
      00121B                       3890 00102$:
      00121B 12r0Fr9D         [24] 3891 	lcall	_check
                                   3892 ;	main.c:88: }
                                   3893 ;	main.c:90: }
      00121E 80 E4            [24] 3894 	sjmp	00106$
                                   3895 	.area CSEG    (CODE)
                                   3896 	.area CONST   (CODE)
      000000                       3897 _font:
      000000 00                    3898 	.db #0x00	; 0
      000001 00                    3899 	.db #0x00	; 0
      000002 00                    3900 	.db #0x00	; 0
      000003 00                    3901 	.db #0x00	; 0
      000004 00                    3902 	.db #0x00	; 0
      000005 3E                    3903 	.db #0x3e	; 62
      000006 5B                    3904 	.db #0x5b	; 91
      000007 4F                    3905 	.db #0x4f	; 79	'O'
      000008 5B                    3906 	.db #0x5b	; 91
      000009 3E                    3907 	.db #0x3e	; 62
      00000A 3E                    3908 	.db #0x3e	; 62
      00000B 6B                    3909 	.db #0x6b	; 107	'k'
      00000C 4F                    3910 	.db #0x4f	; 79	'O'
      00000D 6B                    3911 	.db #0x6b	; 107	'k'
      00000E 3E                    3912 	.db #0x3e	; 62
      00000F 1C                    3913 	.db #0x1c	; 28
      000010 3E                    3914 	.db #0x3e	; 62
      000011 7C                    3915 	.db #0x7c	; 124
      000012 3E                    3916 	.db #0x3e	; 62
      000013 1C                    3917 	.db #0x1c	; 28
      000014 18                    3918 	.db #0x18	; 24
      000015 3C                    3919 	.db #0x3c	; 60
      000016 7E                    3920 	.db #0x7e	; 126
      000017 3C                    3921 	.db #0x3c	; 60
      000018 18                    3922 	.db #0x18	; 24
      000019 1C                    3923 	.db #0x1c	; 28
      00001A 57                    3924 	.db #0x57	; 87	'W'
      00001B 7D                    3925 	.db #0x7d	; 125
      00001C 57                    3926 	.db #0x57	; 87	'W'
      00001D 1C                    3927 	.db #0x1c	; 28
      00001E 1C                    3928 	.db #0x1c	; 28
      00001F 5E                    3929 	.db #0x5e	; 94
      000020 7F                    3930 	.db #0x7f	; 127
      000021 5E                    3931 	.db #0x5e	; 94
      000022 1C                    3932 	.db #0x1c	; 28
      000023 00                    3933 	.db #0x00	; 0
      000024 18                    3934 	.db #0x18	; 24
      000025 3C                    3935 	.db #0x3c	; 60
      000026 18                    3936 	.db #0x18	; 24
      000027 00                    3937 	.db #0x00	; 0
      000028 FF                    3938 	.db #0xff	; 255
      000029 E7                    3939 	.db #0xe7	; 231
      00002A C3                    3940 	.db #0xc3	; 195
      00002B E7                    3941 	.db #0xe7	; 231
      00002C FF                    3942 	.db #0xff	; 255
      00002D 00                    3943 	.db #0x00	; 0
      00002E 18                    3944 	.db #0x18	; 24
      00002F 24                    3945 	.db #0x24	; 36
      000030 18                    3946 	.db #0x18	; 24
      000031 00                    3947 	.db #0x00	; 0
      000032 FF                    3948 	.db #0xff	; 255
      000033 E7                    3949 	.db #0xe7	; 231
      000034 DB                    3950 	.db #0xdb	; 219
      000035 E7                    3951 	.db #0xe7	; 231
      000036 FF                    3952 	.db #0xff	; 255
      000037 30                    3953 	.db #0x30	; 48	'0'
      000038 48                    3954 	.db #0x48	; 72	'H'
      000039 3A                    3955 	.db #0x3a	; 58
      00003A 06                    3956 	.db #0x06	; 6
      00003B 0E                    3957 	.db #0x0e	; 14
      00003C 26                    3958 	.db #0x26	; 38
      00003D 29                    3959 	.db #0x29	; 41
      00003E 79                    3960 	.db #0x79	; 121	'y'
      00003F 29                    3961 	.db #0x29	; 41
      000040 26                    3962 	.db #0x26	; 38
      000041 40                    3963 	.db #0x40	; 64
      000042 7F                    3964 	.db #0x7f	; 127
      000043 05                    3965 	.db #0x05	; 5
      000044 05                    3966 	.db #0x05	; 5
      000045 07                    3967 	.db #0x07	; 7
      000046 40                    3968 	.db #0x40	; 64
      000047 7F                    3969 	.db #0x7f	; 127
      000048 05                    3970 	.db #0x05	; 5
      000049 25                    3971 	.db #0x25	; 37
      00004A 3F                    3972 	.db #0x3f	; 63
      00004B 5A                    3973 	.db #0x5a	; 90	'Z'
      00004C 3C                    3974 	.db #0x3c	; 60
      00004D E7                    3975 	.db #0xe7	; 231
      00004E 3C                    3976 	.db #0x3c	; 60
      00004F 5A                    3977 	.db #0x5a	; 90	'Z'
      000050 7F                    3978 	.db #0x7f	; 127
      000051 3E                    3979 	.db #0x3e	; 62
      000052 1C                    3980 	.db #0x1c	; 28
      000053 1C                    3981 	.db #0x1c	; 28
      000054 08                    3982 	.db #0x08	; 8
      000055 08                    3983 	.db #0x08	; 8
      000056 1C                    3984 	.db #0x1c	; 28
      000057 1C                    3985 	.db #0x1c	; 28
      000058 3E                    3986 	.db #0x3e	; 62
      000059 7F                    3987 	.db #0x7f	; 127
      00005A 14                    3988 	.db #0x14	; 20
      00005B 22                    3989 	.db #0x22	; 34
      00005C 7F                    3990 	.db #0x7f	; 127
      00005D 22                    3991 	.db #0x22	; 34
      00005E 14                    3992 	.db #0x14	; 20
      00005F 5F                    3993 	.db #0x5f	; 95
      000060 5F                    3994 	.db #0x5f	; 95
      000061 00                    3995 	.db #0x00	; 0
      000062 5F                    3996 	.db #0x5f	; 95
      000063 5F                    3997 	.db #0x5f	; 95
      000064 06                    3998 	.db #0x06	; 6
      000065 09                    3999 	.db #0x09	; 9
      000066 7F                    4000 	.db #0x7f	; 127
      000067 01                    4001 	.db #0x01	; 1
      000068 7F                    4002 	.db #0x7f	; 127
      000069 00                    4003 	.db #0x00	; 0
      00006A 66                    4004 	.db #0x66	; 102	'f'
      00006B 89                    4005 	.db #0x89	; 137
      00006C 95                    4006 	.db #0x95	; 149
      00006D 6A                    4007 	.db #0x6a	; 106	'j'
      00006E 60                    4008 	.db #0x60	; 96
      00006F 60                    4009 	.db #0x60	; 96
      000070 60                    4010 	.db #0x60	; 96
      000071 60                    4011 	.db #0x60	; 96
      000072 60                    4012 	.db #0x60	; 96
      000073 94                    4013 	.db #0x94	; 148
      000074 A2                    4014 	.db #0xa2	; 162
      000075 FF                    4015 	.db #0xff	; 255
      000076 A2                    4016 	.db #0xa2	; 162
      000077 94                    4017 	.db #0x94	; 148
      000078 08                    4018 	.db #0x08	; 8
      000079 04                    4019 	.db #0x04	; 4
      00007A 7E                    4020 	.db #0x7e	; 126
      00007B 04                    4021 	.db #0x04	; 4
      00007C 08                    4022 	.db #0x08	; 8
      00007D 10                    4023 	.db #0x10	; 16
      00007E 20                    4024 	.db #0x20	; 32
      00007F 7E                    4025 	.db #0x7e	; 126
      000080 20                    4026 	.db #0x20	; 32
      000081 10                    4027 	.db #0x10	; 16
      000082 08                    4028 	.db #0x08	; 8
      000083 08                    4029 	.db #0x08	; 8
      000084 2A                    4030 	.db #0x2a	; 42
      000085 1C                    4031 	.db #0x1c	; 28
      000086 08                    4032 	.db #0x08	; 8
      000087 08                    4033 	.db #0x08	; 8
      000088 1C                    4034 	.db #0x1c	; 28
      000089 2A                    4035 	.db #0x2a	; 42
      00008A 08                    4036 	.db #0x08	; 8
      00008B 08                    4037 	.db #0x08	; 8
      00008C 1E                    4038 	.db #0x1e	; 30
      00008D 10                    4039 	.db #0x10	; 16
      00008E 10                    4040 	.db #0x10	; 16
      00008F 10                    4041 	.db #0x10	; 16
      000090 10                    4042 	.db #0x10	; 16
      000091 0C                    4043 	.db #0x0c	; 12
      000092 1E                    4044 	.db #0x1e	; 30
      000093 0C                    4045 	.db #0x0c	; 12
      000094 1E                    4046 	.db #0x1e	; 30
      000095 0C                    4047 	.db #0x0c	; 12
      000096 30                    4048 	.db #0x30	; 48	'0'
      000097 38                    4049 	.db #0x38	; 56	'8'
      000098 3E                    4050 	.db #0x3e	; 62
      000099 38                    4051 	.db #0x38	; 56	'8'
      00009A 30                    4052 	.db #0x30	; 48	'0'
      00009B 06                    4053 	.db #0x06	; 6
      00009C 0E                    4054 	.db #0x0e	; 14
      00009D 3E                    4055 	.db #0x3e	; 62
      00009E 0E                    4056 	.db #0x0e	; 14
      00009F 06                    4057 	.db #0x06	; 6
      0000A0 00                    4058 	.db #0x00	; 0
      0000A1 00                    4059 	.db #0x00	; 0
      0000A2 00                    4060 	.db #0x00	; 0
      0000A3 00                    4061 	.db #0x00	; 0
      0000A4 00                    4062 	.db #0x00	; 0
      0000A5 00                    4063 	.db #0x00	; 0
      0000A6 00                    4064 	.db #0x00	; 0
      0000A7 5F                    4065 	.db #0x5f	; 95
      0000A8 00                    4066 	.db #0x00	; 0
      0000A9 00                    4067 	.db #0x00	; 0
      0000AA 00                    4068 	.db #0x00	; 0
      0000AB 07                    4069 	.db #0x07	; 7
      0000AC 00                    4070 	.db #0x00	; 0
      0000AD 07                    4071 	.db #0x07	; 7
      0000AE 00                    4072 	.db #0x00	; 0
      0000AF 14                    4073 	.db #0x14	; 20
      0000B0 7F                    4074 	.db #0x7f	; 127
      0000B1 14                    4075 	.db #0x14	; 20
      0000B2 7F                    4076 	.db #0x7f	; 127
      0000B3 14                    4077 	.db #0x14	; 20
      0000B4 24                    4078 	.db #0x24	; 36
      0000B5 2A                    4079 	.db #0x2a	; 42
      0000B6 7F                    4080 	.db #0x7f	; 127
      0000B7 2A                    4081 	.db #0x2a	; 42
      0000B8 12                    4082 	.db #0x12	; 18
      0000B9 23                    4083 	.db #0x23	; 35
      0000BA 13                    4084 	.db #0x13	; 19
      0000BB 08                    4085 	.db #0x08	; 8
      0000BC 64                    4086 	.db #0x64	; 100	'd'
      0000BD 62                    4087 	.db #0x62	; 98	'b'
      0000BE 36                    4088 	.db #0x36	; 54	'6'
      0000BF 49                    4089 	.db #0x49	; 73	'I'
      0000C0 56                    4090 	.db #0x56	; 86	'V'
      0000C1 20                    4091 	.db #0x20	; 32
      0000C2 50                    4092 	.db #0x50	; 80	'P'
      0000C3 00                    4093 	.db #0x00	; 0
      0000C4 08                    4094 	.db #0x08	; 8
      0000C5 07                    4095 	.db #0x07	; 7
      0000C6 03                    4096 	.db #0x03	; 3
      0000C7 00                    4097 	.db #0x00	; 0
      0000C8 00                    4098 	.db #0x00	; 0
      0000C9 1C                    4099 	.db #0x1c	; 28
      0000CA 22                    4100 	.db #0x22	; 34
      0000CB 41                    4101 	.db #0x41	; 65	'A'
      0000CC 00                    4102 	.db #0x00	; 0
      0000CD 00                    4103 	.db #0x00	; 0
      0000CE 41                    4104 	.db #0x41	; 65	'A'
      0000CF 22                    4105 	.db #0x22	; 34
      0000D0 1C                    4106 	.db #0x1c	; 28
      0000D1 00                    4107 	.db #0x00	; 0
      0000D2 2A                    4108 	.db #0x2a	; 42
      0000D3 1C                    4109 	.db #0x1c	; 28
      0000D4 7F                    4110 	.db #0x7f	; 127
      0000D5 1C                    4111 	.db #0x1c	; 28
      0000D6 2A                    4112 	.db #0x2a	; 42
      0000D7 08                    4113 	.db #0x08	; 8
      0000D8 08                    4114 	.db #0x08	; 8
      0000D9 3E                    4115 	.db #0x3e	; 62
      0000DA 08                    4116 	.db #0x08	; 8
      0000DB 08                    4117 	.db #0x08	; 8
      0000DC 00                    4118 	.db #0x00	; 0
      0000DD 80                    4119 	.db #0x80	; 128
      0000DE 70                    4120 	.db #0x70	; 112	'p'
      0000DF 30                    4121 	.db #0x30	; 48	'0'
      0000E0 00                    4122 	.db #0x00	; 0
      0000E1 08                    4123 	.db #0x08	; 8
      0000E2 08                    4124 	.db #0x08	; 8
      0000E3 08                    4125 	.db #0x08	; 8
      0000E4 08                    4126 	.db #0x08	; 8
      0000E5 08                    4127 	.db #0x08	; 8
      0000E6 00                    4128 	.db #0x00	; 0
      0000E7 00                    4129 	.db #0x00	; 0
      0000E8 60                    4130 	.db #0x60	; 96
      0000E9 60                    4131 	.db #0x60	; 96
      0000EA 00                    4132 	.db #0x00	; 0
      0000EB 20                    4133 	.db #0x20	; 32
      0000EC 10                    4134 	.db #0x10	; 16
      0000ED 08                    4135 	.db #0x08	; 8
      0000EE 04                    4136 	.db #0x04	; 4
      0000EF 02                    4137 	.db #0x02	; 2
      0000F0 3E                    4138 	.db #0x3e	; 62
      0000F1 51                    4139 	.db #0x51	; 81	'Q'
      0000F2 49                    4140 	.db #0x49	; 73	'I'
      0000F3 45                    4141 	.db #0x45	; 69	'E'
      0000F4 3E                    4142 	.db #0x3e	; 62
      0000F5 00                    4143 	.db #0x00	; 0
      0000F6 42                    4144 	.db #0x42	; 66	'B'
      0000F7 7F                    4145 	.db #0x7f	; 127
      0000F8 40                    4146 	.db #0x40	; 64
      0000F9 00                    4147 	.db #0x00	; 0
      0000FA 72                    4148 	.db #0x72	; 114	'r'
      0000FB 49                    4149 	.db #0x49	; 73	'I'
      0000FC 49                    4150 	.db #0x49	; 73	'I'
      0000FD 49                    4151 	.db #0x49	; 73	'I'
      0000FE 46                    4152 	.db #0x46	; 70	'F'
      0000FF 21                    4153 	.db #0x21	; 33
      000100 41                    4154 	.db #0x41	; 65	'A'
      000101 49                    4155 	.db #0x49	; 73	'I'
      000102 4D                    4156 	.db #0x4d	; 77	'M'
      000103 33                    4157 	.db #0x33	; 51	'3'
      000104 18                    4158 	.db #0x18	; 24
      000105 14                    4159 	.db #0x14	; 20
      000106 12                    4160 	.db #0x12	; 18
      000107 7F                    4161 	.db #0x7f	; 127
      000108 10                    4162 	.db #0x10	; 16
      000109 27                    4163 	.db #0x27	; 39
      00010A 45                    4164 	.db #0x45	; 69	'E'
      00010B 45                    4165 	.db #0x45	; 69	'E'
      00010C 45                    4166 	.db #0x45	; 69	'E'
      00010D 39                    4167 	.db #0x39	; 57	'9'
      00010E 3C                    4168 	.db #0x3c	; 60
      00010F 4A                    4169 	.db #0x4a	; 74	'J'
      000110 49                    4170 	.db #0x49	; 73	'I'
      000111 49                    4171 	.db #0x49	; 73	'I'
      000112 31                    4172 	.db #0x31	; 49	'1'
      000113 41                    4173 	.db #0x41	; 65	'A'
      000114 21                    4174 	.db #0x21	; 33
      000115 11                    4175 	.db #0x11	; 17
      000116 09                    4176 	.db #0x09	; 9
      000117 07                    4177 	.db #0x07	; 7
      000118 36                    4178 	.db #0x36	; 54	'6'
      000119 49                    4179 	.db #0x49	; 73	'I'
      00011A 49                    4180 	.db #0x49	; 73	'I'
      00011B 49                    4181 	.db #0x49	; 73	'I'
      00011C 36                    4182 	.db #0x36	; 54	'6'
      00011D 46                    4183 	.db #0x46	; 70	'F'
      00011E 49                    4184 	.db #0x49	; 73	'I'
      00011F 49                    4185 	.db #0x49	; 73	'I'
      000120 29                    4186 	.db #0x29	; 41
      000121 1E                    4187 	.db #0x1e	; 30
      000122 00                    4188 	.db #0x00	; 0
      000123 00                    4189 	.db #0x00	; 0
      000124 14                    4190 	.db #0x14	; 20
      000125 00                    4191 	.db #0x00	; 0
      000126 00                    4192 	.db #0x00	; 0
      000127 00                    4193 	.db #0x00	; 0
      000128 40                    4194 	.db #0x40	; 64
      000129 34                    4195 	.db #0x34	; 52	'4'
      00012A 00                    4196 	.db #0x00	; 0
      00012B 00                    4197 	.db #0x00	; 0
      00012C 00                    4198 	.db #0x00	; 0
      00012D 08                    4199 	.db #0x08	; 8
      00012E 14                    4200 	.db #0x14	; 20
      00012F 22                    4201 	.db #0x22	; 34
      000130 41                    4202 	.db #0x41	; 65	'A'
      000131 14                    4203 	.db #0x14	; 20
      000132 14                    4204 	.db #0x14	; 20
      000133 14                    4205 	.db #0x14	; 20
      000134 14                    4206 	.db #0x14	; 20
      000135 14                    4207 	.db #0x14	; 20
      000136 00                    4208 	.db #0x00	; 0
      000137 41                    4209 	.db #0x41	; 65	'A'
      000138 22                    4210 	.db #0x22	; 34
      000139 14                    4211 	.db #0x14	; 20
      00013A 08                    4212 	.db #0x08	; 8
      00013B 02                    4213 	.db #0x02	; 2
      00013C 01                    4214 	.db #0x01	; 1
      00013D 59                    4215 	.db #0x59	; 89	'Y'
      00013E 09                    4216 	.db #0x09	; 9
      00013F 06                    4217 	.db #0x06	; 6
      000140 3E                    4218 	.db #0x3e	; 62
      000141 41                    4219 	.db #0x41	; 65	'A'
      000142 5D                    4220 	.db #0x5d	; 93
      000143 59                    4221 	.db #0x59	; 89	'Y'
      000144 4E                    4222 	.db #0x4e	; 78	'N'
      000145 7C                    4223 	.db #0x7c	; 124
      000146 12                    4224 	.db #0x12	; 18
      000147 11                    4225 	.db #0x11	; 17
      000148 12                    4226 	.db #0x12	; 18
      000149 7C                    4227 	.db #0x7c	; 124
      00014A 7F                    4228 	.db #0x7f	; 127
      00014B 49                    4229 	.db #0x49	; 73	'I'
      00014C 49                    4230 	.db #0x49	; 73	'I'
      00014D 49                    4231 	.db #0x49	; 73	'I'
      00014E 36                    4232 	.db #0x36	; 54	'6'
      00014F 3E                    4233 	.db #0x3e	; 62
      000150 41                    4234 	.db #0x41	; 65	'A'
      000151 41                    4235 	.db #0x41	; 65	'A'
      000152 41                    4236 	.db #0x41	; 65	'A'
      000153 22                    4237 	.db #0x22	; 34
      000154 7F                    4238 	.db #0x7f	; 127
      000155 41                    4239 	.db #0x41	; 65	'A'
      000156 41                    4240 	.db #0x41	; 65	'A'
      000157 41                    4241 	.db #0x41	; 65	'A'
      000158 3E                    4242 	.db #0x3e	; 62
      000159 7F                    4243 	.db #0x7f	; 127
      00015A 49                    4244 	.db #0x49	; 73	'I'
      00015B 49                    4245 	.db #0x49	; 73	'I'
      00015C 49                    4246 	.db #0x49	; 73	'I'
      00015D 41                    4247 	.db #0x41	; 65	'A'
      00015E 7F                    4248 	.db #0x7f	; 127
      00015F 09                    4249 	.db #0x09	; 9
      000160 09                    4250 	.db #0x09	; 9
      000161 09                    4251 	.db #0x09	; 9
      000162 01                    4252 	.db #0x01	; 1
      000163 3E                    4253 	.db #0x3e	; 62
      000164 41                    4254 	.db #0x41	; 65	'A'
      000165 41                    4255 	.db #0x41	; 65	'A'
      000166 51                    4256 	.db #0x51	; 81	'Q'
      000167 73                    4257 	.db #0x73	; 115	's'
      000168 7F                    4258 	.db #0x7f	; 127
      000169 08                    4259 	.db #0x08	; 8
      00016A 08                    4260 	.db #0x08	; 8
      00016B 08                    4261 	.db #0x08	; 8
      00016C 7F                    4262 	.db #0x7f	; 127
      00016D 00                    4263 	.db #0x00	; 0
      00016E 41                    4264 	.db #0x41	; 65	'A'
      00016F 7F                    4265 	.db #0x7f	; 127
      000170 41                    4266 	.db #0x41	; 65	'A'
      000171 00                    4267 	.db #0x00	; 0
      000172 20                    4268 	.db #0x20	; 32
      000173 40                    4269 	.db #0x40	; 64
      000174 41                    4270 	.db #0x41	; 65	'A'
      000175 3F                    4271 	.db #0x3f	; 63
      000176 01                    4272 	.db #0x01	; 1
      000177 7F                    4273 	.db #0x7f	; 127
      000178 08                    4274 	.db #0x08	; 8
      000179 14                    4275 	.db #0x14	; 20
      00017A 22                    4276 	.db #0x22	; 34
      00017B 41                    4277 	.db #0x41	; 65	'A'
      00017C 7F                    4278 	.db #0x7f	; 127
      00017D 40                    4279 	.db #0x40	; 64
      00017E 40                    4280 	.db #0x40	; 64
      00017F 40                    4281 	.db #0x40	; 64
      000180 40                    4282 	.db #0x40	; 64
      000181 7F                    4283 	.db #0x7f	; 127
      000182 02                    4284 	.db #0x02	; 2
      000183 1C                    4285 	.db #0x1c	; 28
      000184 02                    4286 	.db #0x02	; 2
      000185 7F                    4287 	.db #0x7f	; 127
      000186 7F                    4288 	.db #0x7f	; 127
      000187 04                    4289 	.db #0x04	; 4
      000188 08                    4290 	.db #0x08	; 8
      000189 10                    4291 	.db #0x10	; 16
      00018A 7F                    4292 	.db #0x7f	; 127
      00018B 3E                    4293 	.db #0x3e	; 62
      00018C 41                    4294 	.db #0x41	; 65	'A'
      00018D 41                    4295 	.db #0x41	; 65	'A'
      00018E 41                    4296 	.db #0x41	; 65	'A'
      00018F 3E                    4297 	.db #0x3e	; 62
      000190 7F                    4298 	.db #0x7f	; 127
      000191 09                    4299 	.db #0x09	; 9
      000192 09                    4300 	.db #0x09	; 9
      000193 09                    4301 	.db #0x09	; 9
      000194 06                    4302 	.db #0x06	; 6
      000195 3E                    4303 	.db #0x3e	; 62
      000196 41                    4304 	.db #0x41	; 65	'A'
      000197 51                    4305 	.db #0x51	; 81	'Q'
      000198 21                    4306 	.db #0x21	; 33
      000199 5E                    4307 	.db #0x5e	; 94
      00019A 7F                    4308 	.db #0x7f	; 127
      00019B 09                    4309 	.db #0x09	; 9
      00019C 19                    4310 	.db #0x19	; 25
      00019D 29                    4311 	.db #0x29	; 41
      00019E 46                    4312 	.db #0x46	; 70	'F'
      00019F 26                    4313 	.db #0x26	; 38
      0001A0 49                    4314 	.db #0x49	; 73	'I'
      0001A1 49                    4315 	.db #0x49	; 73	'I'
      0001A2 49                    4316 	.db #0x49	; 73	'I'
      0001A3 32                    4317 	.db #0x32	; 50	'2'
      0001A4 03                    4318 	.db #0x03	; 3
      0001A5 01                    4319 	.db #0x01	; 1
      0001A6 7F                    4320 	.db #0x7f	; 127
      0001A7 01                    4321 	.db #0x01	; 1
      0001A8 03                    4322 	.db #0x03	; 3
      0001A9 3F                    4323 	.db #0x3f	; 63
      0001AA 40                    4324 	.db #0x40	; 64
      0001AB 40                    4325 	.db #0x40	; 64
      0001AC 40                    4326 	.db #0x40	; 64
      0001AD 3F                    4327 	.db #0x3f	; 63
      0001AE 1F                    4328 	.db #0x1f	; 31
      0001AF 20                    4329 	.db #0x20	; 32
      0001B0 40                    4330 	.db #0x40	; 64
      0001B1 20                    4331 	.db #0x20	; 32
      0001B2 1F                    4332 	.db #0x1f	; 31
      0001B3 3F                    4333 	.db #0x3f	; 63
      0001B4 40                    4334 	.db #0x40	; 64
      0001B5 38                    4335 	.db #0x38	; 56	'8'
      0001B6 40                    4336 	.db #0x40	; 64
      0001B7 3F                    4337 	.db #0x3f	; 63
      0001B8 63                    4338 	.db #0x63	; 99	'c'
      0001B9 14                    4339 	.db #0x14	; 20
      0001BA 08                    4340 	.db #0x08	; 8
      0001BB 14                    4341 	.db #0x14	; 20
      0001BC 63                    4342 	.db #0x63	; 99	'c'
      0001BD 03                    4343 	.db #0x03	; 3
      0001BE 04                    4344 	.db #0x04	; 4
      0001BF 78                    4345 	.db #0x78	; 120	'x'
      0001C0 04                    4346 	.db #0x04	; 4
      0001C1 03                    4347 	.db #0x03	; 3
      0001C2 61                    4348 	.db #0x61	; 97	'a'
      0001C3 59                    4349 	.db #0x59	; 89	'Y'
      0001C4 49                    4350 	.db #0x49	; 73	'I'
      0001C5 4D                    4351 	.db #0x4d	; 77	'M'
      0001C6 43                    4352 	.db #0x43	; 67	'C'
      0001C7 00                    4353 	.db #0x00	; 0
      0001C8 7F                    4354 	.db #0x7f	; 127
      0001C9 41                    4355 	.db #0x41	; 65	'A'
      0001CA 41                    4356 	.db #0x41	; 65	'A'
      0001CB 41                    4357 	.db #0x41	; 65	'A'
      0001CC 02                    4358 	.db #0x02	; 2
      0001CD 04                    4359 	.db #0x04	; 4
      0001CE 08                    4360 	.db #0x08	; 8
      0001CF 10                    4361 	.db #0x10	; 16
      0001D0 20                    4362 	.db #0x20	; 32
      0001D1 00                    4363 	.db #0x00	; 0
      0001D2 41                    4364 	.db #0x41	; 65	'A'
      0001D3 41                    4365 	.db #0x41	; 65	'A'
      0001D4 41                    4366 	.db #0x41	; 65	'A'
      0001D5 7F                    4367 	.db #0x7f	; 127
      0001D6 04                    4368 	.db #0x04	; 4
      0001D7 02                    4369 	.db #0x02	; 2
      0001D8 01                    4370 	.db #0x01	; 1
      0001D9 02                    4371 	.db #0x02	; 2
      0001DA 04                    4372 	.db #0x04	; 4
      0001DB 40                    4373 	.db #0x40	; 64
      0001DC 40                    4374 	.db #0x40	; 64
      0001DD 40                    4375 	.db #0x40	; 64
      0001DE 40                    4376 	.db #0x40	; 64
      0001DF 40                    4377 	.db #0x40	; 64
      0001E0 00                    4378 	.db #0x00	; 0
      0001E1 03                    4379 	.db #0x03	; 3
      0001E2 07                    4380 	.db #0x07	; 7
      0001E3 08                    4381 	.db #0x08	; 8
      0001E4 00                    4382 	.db #0x00	; 0
      0001E5 20                    4383 	.db #0x20	; 32
      0001E6 54                    4384 	.db #0x54	; 84	'T'
      0001E7 54                    4385 	.db #0x54	; 84	'T'
      0001E8 78                    4386 	.db #0x78	; 120	'x'
      0001E9 40                    4387 	.db #0x40	; 64
      0001EA 7F                    4388 	.db #0x7f	; 127
      0001EB 28                    4389 	.db #0x28	; 40
      0001EC 44                    4390 	.db #0x44	; 68	'D'
      0001ED 44                    4391 	.db #0x44	; 68	'D'
      0001EE 38                    4392 	.db #0x38	; 56	'8'
      0001EF 38                    4393 	.db #0x38	; 56	'8'
      0001F0 44                    4394 	.db #0x44	; 68	'D'
      0001F1 44                    4395 	.db #0x44	; 68	'D'
      0001F2 44                    4396 	.db #0x44	; 68	'D'
      0001F3 28                    4397 	.db #0x28	; 40
      0001F4 38                    4398 	.db #0x38	; 56	'8'
      0001F5 44                    4399 	.db #0x44	; 68	'D'
      0001F6 44                    4400 	.db #0x44	; 68	'D'
      0001F7 28                    4401 	.db #0x28	; 40
      0001F8 7F                    4402 	.db #0x7f	; 127
      0001F9 38                    4403 	.db #0x38	; 56	'8'
      0001FA 54                    4404 	.db #0x54	; 84	'T'
      0001FB 54                    4405 	.db #0x54	; 84	'T'
      0001FC 54                    4406 	.db #0x54	; 84	'T'
      0001FD 18                    4407 	.db #0x18	; 24
      0001FE 00                    4408 	.db #0x00	; 0
      0001FF 08                    4409 	.db #0x08	; 8
      000200 7E                    4410 	.db #0x7e	; 126
      000201 09                    4411 	.db #0x09	; 9
      000202 02                    4412 	.db #0x02	; 2
      000203 18                    4413 	.db #0x18	; 24
      000204 A4                    4414 	.db #0xa4	; 164
      000205 A4                    4415 	.db #0xa4	; 164
      000206 9C                    4416 	.db #0x9c	; 156
      000207 78                    4417 	.db #0x78	; 120	'x'
      000208 7F                    4418 	.db #0x7f	; 127
      000209 08                    4419 	.db #0x08	; 8
      00020A 04                    4420 	.db #0x04	; 4
      00020B 04                    4421 	.db #0x04	; 4
      00020C 78                    4422 	.db #0x78	; 120	'x'
      00020D 00                    4423 	.db #0x00	; 0
      00020E 44                    4424 	.db #0x44	; 68	'D'
      00020F 7D                    4425 	.db #0x7d	; 125
      000210 40                    4426 	.db #0x40	; 64
      000211 00                    4427 	.db #0x00	; 0
      000212 20                    4428 	.db #0x20	; 32
      000213 40                    4429 	.db #0x40	; 64
      000214 40                    4430 	.db #0x40	; 64
      000215 3D                    4431 	.db #0x3d	; 61
      000216 00                    4432 	.db #0x00	; 0
      000217 7F                    4433 	.db #0x7f	; 127
      000218 10                    4434 	.db #0x10	; 16
      000219 28                    4435 	.db #0x28	; 40
      00021A 44                    4436 	.db #0x44	; 68	'D'
      00021B 00                    4437 	.db #0x00	; 0
      00021C 00                    4438 	.db #0x00	; 0
      00021D 41                    4439 	.db #0x41	; 65	'A'
      00021E 7F                    4440 	.db #0x7f	; 127
      00021F 40                    4441 	.db #0x40	; 64
      000220 00                    4442 	.db #0x00	; 0
      000221 7C                    4443 	.db #0x7c	; 124
      000222 04                    4444 	.db #0x04	; 4
      000223 78                    4445 	.db #0x78	; 120	'x'
      000224 04                    4446 	.db #0x04	; 4
      000225 78                    4447 	.db #0x78	; 120	'x'
      000226 7C                    4448 	.db #0x7c	; 124
      000227 08                    4449 	.db #0x08	; 8
      000228 04                    4450 	.db #0x04	; 4
      000229 04                    4451 	.db #0x04	; 4
      00022A 78                    4452 	.db #0x78	; 120	'x'
      00022B 38                    4453 	.db #0x38	; 56	'8'
      00022C 44                    4454 	.db #0x44	; 68	'D'
      00022D 44                    4455 	.db #0x44	; 68	'D'
      00022E 44                    4456 	.db #0x44	; 68	'D'
      00022F 38                    4457 	.db #0x38	; 56	'8'
      000230 FC                    4458 	.db #0xfc	; 252
      000231 18                    4459 	.db #0x18	; 24
      000232 24                    4460 	.db #0x24	; 36
      000233 24                    4461 	.db #0x24	; 36
      000234 18                    4462 	.db #0x18	; 24
      000235 18                    4463 	.db #0x18	; 24
      000236 24                    4464 	.db #0x24	; 36
      000237 24                    4465 	.db #0x24	; 36
      000238 18                    4466 	.db #0x18	; 24
      000239 FC                    4467 	.db #0xfc	; 252
      00023A 7C                    4468 	.db #0x7c	; 124
      00023B 08                    4469 	.db #0x08	; 8
      00023C 04                    4470 	.db #0x04	; 4
      00023D 04                    4471 	.db #0x04	; 4
      00023E 08                    4472 	.db #0x08	; 8
      00023F 48                    4473 	.db #0x48	; 72	'H'
      000240 54                    4474 	.db #0x54	; 84	'T'
      000241 54                    4475 	.db #0x54	; 84	'T'
      000242 54                    4476 	.db #0x54	; 84	'T'
      000243 24                    4477 	.db #0x24	; 36
      000244 04                    4478 	.db #0x04	; 4
      000245 04                    4479 	.db #0x04	; 4
      000246 3F                    4480 	.db #0x3f	; 63
      000247 44                    4481 	.db #0x44	; 68	'D'
      000248 24                    4482 	.db #0x24	; 36
      000249 3C                    4483 	.db #0x3c	; 60
      00024A 40                    4484 	.db #0x40	; 64
      00024B 40                    4485 	.db #0x40	; 64
      00024C 20                    4486 	.db #0x20	; 32
      00024D 7C                    4487 	.db #0x7c	; 124
      00024E 1C                    4488 	.db #0x1c	; 28
      00024F 20                    4489 	.db #0x20	; 32
      000250 40                    4490 	.db #0x40	; 64
      000251 20                    4491 	.db #0x20	; 32
      000252 1C                    4492 	.db #0x1c	; 28
      000253 3C                    4493 	.db #0x3c	; 60
      000254 40                    4494 	.db #0x40	; 64
      000255 30                    4495 	.db #0x30	; 48	'0'
      000256 40                    4496 	.db #0x40	; 64
      000257 3C                    4497 	.db #0x3c	; 60
      000258 44                    4498 	.db #0x44	; 68	'D'
      000259 28                    4499 	.db #0x28	; 40
      00025A 10                    4500 	.db #0x10	; 16
      00025B 28                    4501 	.db #0x28	; 40
      00025C 44                    4502 	.db #0x44	; 68	'D'
      00025D 4C                    4503 	.db #0x4c	; 76	'L'
      00025E 90                    4504 	.db #0x90	; 144
      00025F 90                    4505 	.db #0x90	; 144
      000260 90                    4506 	.db #0x90	; 144
      000261 7C                    4507 	.db #0x7c	; 124
      000262 44                    4508 	.db #0x44	; 68	'D'
      000263 64                    4509 	.db #0x64	; 100	'd'
      000264 54                    4510 	.db #0x54	; 84	'T'
      000265 4C                    4511 	.db #0x4c	; 76	'L'
      000266 44                    4512 	.db #0x44	; 68	'D'
      000267 00                    4513 	.db #0x00	; 0
      000268 08                    4514 	.db #0x08	; 8
      000269 36                    4515 	.db #0x36	; 54	'6'
      00026A 41                    4516 	.db #0x41	; 65	'A'
      00026B 00                    4517 	.db #0x00	; 0
      00026C 00                    4518 	.db #0x00	; 0
      00026D 00                    4519 	.db #0x00	; 0
      00026E 77                    4520 	.db #0x77	; 119	'w'
      00026F 00                    4521 	.db #0x00	; 0
      000270 00                    4522 	.db #0x00	; 0
      000271 00                    4523 	.db #0x00	; 0
      000272 41                    4524 	.db #0x41	; 65	'A'
      000273 36                    4525 	.db #0x36	; 54	'6'
      000274 08                    4526 	.db #0x08	; 8
      000275 00                    4527 	.db #0x00	; 0
      000276 02                    4528 	.db #0x02	; 2
      000277 01                    4529 	.db #0x01	; 1
      000278 02                    4530 	.db #0x02	; 2
      000279 04                    4531 	.db #0x04	; 4
      00027A 02                    4532 	.db #0x02	; 2
      00027B 3C                    4533 	.db #0x3c	; 60
      00027C 26                    4534 	.db #0x26	; 38
      00027D 23                    4535 	.db #0x23	; 35
      00027E 26                    4536 	.db #0x26	; 38
      00027F 3C                    4537 	.db #0x3c	; 60
      000280 1E                    4538 	.db #0x1e	; 30
      000281 A1                    4539 	.db #0xa1	; 161
      000282 A1                    4540 	.db #0xa1	; 161
      000283 61                    4541 	.db #0x61	; 97	'a'
      000284 12                    4542 	.db #0x12	; 18
      000285 3A                    4543 	.db #0x3a	; 58
      000286 40                    4544 	.db #0x40	; 64
      000287 40                    4545 	.db #0x40	; 64
      000288 20                    4546 	.db #0x20	; 32
      000289 7A                    4547 	.db #0x7a	; 122	'z'
      00028A 38                    4548 	.db #0x38	; 56	'8'
      00028B 54                    4549 	.db #0x54	; 84	'T'
      00028C 54                    4550 	.db #0x54	; 84	'T'
      00028D 55                    4551 	.db #0x55	; 85	'U'
      00028E 59                    4552 	.db #0x59	; 89	'Y'
      00028F 21                    4553 	.db #0x21	; 33
      000290 55                    4554 	.db #0x55	; 85	'U'
      000291 55                    4555 	.db #0x55	; 85	'U'
      000292 79                    4556 	.db #0x79	; 121	'y'
      000293 41                    4557 	.db #0x41	; 65	'A'
      000294 22                    4558 	.db #0x22	; 34
      000295 54                    4559 	.db #0x54	; 84	'T'
      000296 54                    4560 	.db #0x54	; 84	'T'
      000297 78                    4561 	.db #0x78	; 120	'x'
      000298 42                    4562 	.db #0x42	; 66	'B'
      000299 21                    4563 	.db #0x21	; 33
      00029A 55                    4564 	.db #0x55	; 85	'U'
      00029B 54                    4565 	.db #0x54	; 84	'T'
      00029C 78                    4566 	.db #0x78	; 120	'x'
      00029D 40                    4567 	.db #0x40	; 64
      00029E 20                    4568 	.db #0x20	; 32
      00029F 54                    4569 	.db #0x54	; 84	'T'
      0002A0 55                    4570 	.db #0x55	; 85	'U'
      0002A1 79                    4571 	.db #0x79	; 121	'y'
      0002A2 40                    4572 	.db #0x40	; 64
      0002A3 0C                    4573 	.db #0x0c	; 12
      0002A4 1E                    4574 	.db #0x1e	; 30
      0002A5 52                    4575 	.db #0x52	; 82	'R'
      0002A6 72                    4576 	.db #0x72	; 114	'r'
      0002A7 12                    4577 	.db #0x12	; 18
      0002A8 39                    4578 	.db #0x39	; 57	'9'
      0002A9 55                    4579 	.db #0x55	; 85	'U'
      0002AA 55                    4580 	.db #0x55	; 85	'U'
      0002AB 55                    4581 	.db #0x55	; 85	'U'
      0002AC 59                    4582 	.db #0x59	; 89	'Y'
      0002AD 39                    4583 	.db #0x39	; 57	'9'
      0002AE 54                    4584 	.db #0x54	; 84	'T'
      0002AF 54                    4585 	.db #0x54	; 84	'T'
      0002B0 54                    4586 	.db #0x54	; 84	'T'
      0002B1 59                    4587 	.db #0x59	; 89	'Y'
      0002B2 39                    4588 	.db #0x39	; 57	'9'
      0002B3 55                    4589 	.db #0x55	; 85	'U'
      0002B4 54                    4590 	.db #0x54	; 84	'T'
      0002B5 54                    4591 	.db #0x54	; 84	'T'
      0002B6 58                    4592 	.db #0x58	; 88	'X'
      0002B7 00                    4593 	.db #0x00	; 0
      0002B8 00                    4594 	.db #0x00	; 0
      0002B9 45                    4595 	.db #0x45	; 69	'E'
      0002BA 7C                    4596 	.db #0x7c	; 124
      0002BB 41                    4597 	.db #0x41	; 65	'A'
      0002BC 00                    4598 	.db #0x00	; 0
      0002BD 02                    4599 	.db #0x02	; 2
      0002BE 45                    4600 	.db #0x45	; 69	'E'
      0002BF 7D                    4601 	.db #0x7d	; 125
      0002C0 42                    4602 	.db #0x42	; 66	'B'
      0002C1 00                    4603 	.db #0x00	; 0
      0002C2 01                    4604 	.db #0x01	; 1
      0002C3 45                    4605 	.db #0x45	; 69	'E'
      0002C4 7C                    4606 	.db #0x7c	; 124
      0002C5 40                    4607 	.db #0x40	; 64
      0002C6 7D                    4608 	.db #0x7d	; 125
      0002C7 12                    4609 	.db #0x12	; 18
      0002C8 11                    4610 	.db #0x11	; 17
      0002C9 12                    4611 	.db #0x12	; 18
      0002CA 7D                    4612 	.db #0x7d	; 125
      0002CB F0                    4613 	.db #0xf0	; 240
      0002CC 28                    4614 	.db #0x28	; 40
      0002CD 25                    4615 	.db #0x25	; 37
      0002CE 28                    4616 	.db #0x28	; 40
      0002CF F0                    4617 	.db #0xf0	; 240
      0002D0 7C                    4618 	.db #0x7c	; 124
      0002D1 54                    4619 	.db #0x54	; 84	'T'
      0002D2 55                    4620 	.db #0x55	; 85	'U'
      0002D3 45                    4621 	.db #0x45	; 69	'E'
      0002D4 00                    4622 	.db #0x00	; 0
      0002D5 20                    4623 	.db #0x20	; 32
      0002D6 54                    4624 	.db #0x54	; 84	'T'
      0002D7 54                    4625 	.db #0x54	; 84	'T'
      0002D8 7C                    4626 	.db #0x7c	; 124
      0002D9 54                    4627 	.db #0x54	; 84	'T'
      0002DA 7C                    4628 	.db #0x7c	; 124
      0002DB 0A                    4629 	.db #0x0a	; 10
      0002DC 09                    4630 	.db #0x09	; 9
      0002DD 7F                    4631 	.db #0x7f	; 127
      0002DE 49                    4632 	.db #0x49	; 73	'I'
      0002DF 32                    4633 	.db #0x32	; 50	'2'
      0002E0 49                    4634 	.db #0x49	; 73	'I'
      0002E1 49                    4635 	.db #0x49	; 73	'I'
      0002E2 49                    4636 	.db #0x49	; 73	'I'
      0002E3 32                    4637 	.db #0x32	; 50	'2'
      0002E4 3A                    4638 	.db #0x3a	; 58
      0002E5 44                    4639 	.db #0x44	; 68	'D'
      0002E6 44                    4640 	.db #0x44	; 68	'D'
      0002E7 44                    4641 	.db #0x44	; 68	'D'
      0002E8 3A                    4642 	.db #0x3a	; 58
      0002E9 32                    4643 	.db #0x32	; 50	'2'
      0002EA 4A                    4644 	.db #0x4a	; 74	'J'
      0002EB 48                    4645 	.db #0x48	; 72	'H'
      0002EC 48                    4646 	.db #0x48	; 72	'H'
      0002ED 30                    4647 	.db #0x30	; 48	'0'
      0002EE 3A                    4648 	.db #0x3a	; 58
      0002EF 41                    4649 	.db #0x41	; 65	'A'
      0002F0 41                    4650 	.db #0x41	; 65	'A'
      0002F1 21                    4651 	.db #0x21	; 33
      0002F2 7A                    4652 	.db #0x7a	; 122	'z'
      0002F3 3A                    4653 	.db #0x3a	; 58
      0002F4 42                    4654 	.db #0x42	; 66	'B'
      0002F5 40                    4655 	.db #0x40	; 64
      0002F6 20                    4656 	.db #0x20	; 32
      0002F7 78                    4657 	.db #0x78	; 120	'x'
      0002F8 00                    4658 	.db #0x00	; 0
      0002F9 9D                    4659 	.db #0x9d	; 157
      0002FA A0                    4660 	.db #0xa0	; 160
      0002FB A0                    4661 	.db #0xa0	; 160
      0002FC 7D                    4662 	.db #0x7d	; 125
      0002FD 3D                    4663 	.db #0x3d	; 61
      0002FE 42                    4664 	.db #0x42	; 66	'B'
      0002FF 42                    4665 	.db #0x42	; 66	'B'
      000300 42                    4666 	.db #0x42	; 66	'B'
      000301 3D                    4667 	.db #0x3d	; 61
      000302 3D                    4668 	.db #0x3d	; 61
      000303 40                    4669 	.db #0x40	; 64
      000304 40                    4670 	.db #0x40	; 64
      000305 40                    4671 	.db #0x40	; 64
      000306 3D                    4672 	.db #0x3d	; 61
      000307 3C                    4673 	.db #0x3c	; 60
      000308 24                    4674 	.db #0x24	; 36
      000309 FF                    4675 	.db #0xff	; 255
      00030A 24                    4676 	.db #0x24	; 36
      00030B 24                    4677 	.db #0x24	; 36
      00030C 48                    4678 	.db #0x48	; 72	'H'
      00030D 7E                    4679 	.db #0x7e	; 126
      00030E 49                    4680 	.db #0x49	; 73	'I'
      00030F 43                    4681 	.db #0x43	; 67	'C'
      000310 66                    4682 	.db #0x66	; 102	'f'
      000311 2B                    4683 	.db #0x2b	; 43
      000312 2F                    4684 	.db #0x2f	; 47
      000313 FC                    4685 	.db #0xfc	; 252
      000314 2F                    4686 	.db #0x2f	; 47
      000315 2B                    4687 	.db #0x2b	; 43
      000316 FF                    4688 	.db #0xff	; 255
      000317 09                    4689 	.db #0x09	; 9
      000318 29                    4690 	.db #0x29	; 41
      000319 F6                    4691 	.db #0xf6	; 246
      00031A 20                    4692 	.db #0x20	; 32
      00031B C0                    4693 	.db #0xc0	; 192
      00031C 88                    4694 	.db #0x88	; 136
      00031D 7E                    4695 	.db #0x7e	; 126
      00031E 09                    4696 	.db #0x09	; 9
      00031F 03                    4697 	.db #0x03	; 3
      000320 20                    4698 	.db #0x20	; 32
      000321 54                    4699 	.db #0x54	; 84	'T'
      000322 54                    4700 	.db #0x54	; 84	'T'
      000323 79                    4701 	.db #0x79	; 121	'y'
      000324 41                    4702 	.db #0x41	; 65	'A'
      000325 00                    4703 	.db #0x00	; 0
      000326 00                    4704 	.db #0x00	; 0
      000327 44                    4705 	.db #0x44	; 68	'D'
      000328 7D                    4706 	.db #0x7d	; 125
      000329 41                    4707 	.db #0x41	; 65	'A'
      00032A 30                    4708 	.db #0x30	; 48	'0'
      00032B 48                    4709 	.db #0x48	; 72	'H'
      00032C 48                    4710 	.db #0x48	; 72	'H'
      00032D 4A                    4711 	.db #0x4a	; 74	'J'
      00032E 32                    4712 	.db #0x32	; 50	'2'
      00032F 38                    4713 	.db #0x38	; 56	'8'
      000330 40                    4714 	.db #0x40	; 64
      000331 40                    4715 	.db #0x40	; 64
      000332 22                    4716 	.db #0x22	; 34
      000333 7A                    4717 	.db #0x7a	; 122	'z'
      000334 00                    4718 	.db #0x00	; 0
      000335 7A                    4719 	.db #0x7a	; 122	'z'
      000336 0A                    4720 	.db #0x0a	; 10
      000337 0A                    4721 	.db #0x0a	; 10
      000338 72                    4722 	.db #0x72	; 114	'r'
      000339 7D                    4723 	.db #0x7d	; 125
      00033A 0D                    4724 	.db #0x0d	; 13
      00033B 19                    4725 	.db #0x19	; 25
      00033C 31                    4726 	.db #0x31	; 49	'1'
      00033D 7D                    4727 	.db #0x7d	; 125
      00033E 26                    4728 	.db #0x26	; 38
      00033F 29                    4729 	.db #0x29	; 41
      000340 29                    4730 	.db #0x29	; 41
      000341 2F                    4731 	.db #0x2f	; 47
      000342 28                    4732 	.db #0x28	; 40
      000343 26                    4733 	.db #0x26	; 38
      000344 29                    4734 	.db #0x29	; 41
      000345 29                    4735 	.db #0x29	; 41
      000346 29                    4736 	.db #0x29	; 41
      000347 26                    4737 	.db #0x26	; 38
      000348 30                    4738 	.db #0x30	; 48	'0'
      000349 48                    4739 	.db #0x48	; 72	'H'
      00034A 4D                    4740 	.db #0x4d	; 77	'M'
      00034B 40                    4741 	.db #0x40	; 64
      00034C 20                    4742 	.db #0x20	; 32
      00034D 38                    4743 	.db #0x38	; 56	'8'
      00034E 08                    4744 	.db #0x08	; 8
      00034F 08                    4745 	.db #0x08	; 8
      000350 08                    4746 	.db #0x08	; 8
      000351 08                    4747 	.db #0x08	; 8
      000352 08                    4748 	.db #0x08	; 8
      000353 08                    4749 	.db #0x08	; 8
      000354 08                    4750 	.db #0x08	; 8
      000355 08                    4751 	.db #0x08	; 8
      000356 38                    4752 	.db #0x38	; 56	'8'
      000357 2F                    4753 	.db #0x2f	; 47
      000358 10                    4754 	.db #0x10	; 16
      000359 C8                    4755 	.db #0xc8	; 200
      00035A AC                    4756 	.db #0xac	; 172
      00035B BA                    4757 	.db #0xba	; 186
      00035C 2F                    4758 	.db #0x2f	; 47
      00035D 10                    4759 	.db #0x10	; 16
      00035E 28                    4760 	.db #0x28	; 40
      00035F 34                    4761 	.db #0x34	; 52	'4'
      000360 FA                    4762 	.db #0xfa	; 250
      000361 00                    4763 	.db #0x00	; 0
      000362 00                    4764 	.db #0x00	; 0
      000363 7B                    4765 	.db #0x7b	; 123
      000364 00                    4766 	.db #0x00	; 0
      000365 00                    4767 	.db #0x00	; 0
      000366 08                    4768 	.db #0x08	; 8
      000367 14                    4769 	.db #0x14	; 20
      000368 2A                    4770 	.db #0x2a	; 42
      000369 14                    4771 	.db #0x14	; 20
      00036A 22                    4772 	.db #0x22	; 34
      00036B 22                    4773 	.db #0x22	; 34
      00036C 14                    4774 	.db #0x14	; 20
      00036D 2A                    4775 	.db #0x2a	; 42
      00036E 14                    4776 	.db #0x14	; 20
      00036F 08                    4777 	.db #0x08	; 8
      000370 AA                    4778 	.db #0xaa	; 170
      000371 00                    4779 	.db #0x00	; 0
      000372 55                    4780 	.db #0x55	; 85	'U'
      000373 00                    4781 	.db #0x00	; 0
      000374 AA                    4782 	.db #0xaa	; 170
      000375 AA                    4783 	.db #0xaa	; 170
      000376 55                    4784 	.db #0x55	; 85	'U'
      000377 AA                    4785 	.db #0xaa	; 170
      000378 55                    4786 	.db #0x55	; 85	'U'
      000379 AA                    4787 	.db #0xaa	; 170
      00037A 00                    4788 	.db #0x00	; 0
      00037B 00                    4789 	.db #0x00	; 0
      00037C 00                    4790 	.db #0x00	; 0
      00037D FF                    4791 	.db #0xff	; 255
      00037E 00                    4792 	.db #0x00	; 0
      00037F 10                    4793 	.db #0x10	; 16
      000380 10                    4794 	.db #0x10	; 16
      000381 10                    4795 	.db #0x10	; 16
      000382 FF                    4796 	.db #0xff	; 255
      000383 00                    4797 	.db #0x00	; 0
      000384 14                    4798 	.db #0x14	; 20
      000385 14                    4799 	.db #0x14	; 20
      000386 14                    4800 	.db #0x14	; 20
      000387 FF                    4801 	.db #0xff	; 255
      000388 00                    4802 	.db #0x00	; 0
      000389 10                    4803 	.db #0x10	; 16
      00038A 10                    4804 	.db #0x10	; 16
      00038B FF                    4805 	.db #0xff	; 255
      00038C 00                    4806 	.db #0x00	; 0
      00038D FF                    4807 	.db #0xff	; 255
      00038E 10                    4808 	.db #0x10	; 16
      00038F 10                    4809 	.db #0x10	; 16
      000390 F0                    4810 	.db #0xf0	; 240
      000391 10                    4811 	.db #0x10	; 16
      000392 F0                    4812 	.db #0xf0	; 240
      000393 14                    4813 	.db #0x14	; 20
      000394 14                    4814 	.db #0x14	; 20
      000395 14                    4815 	.db #0x14	; 20
      000396 FC                    4816 	.db #0xfc	; 252
      000397 00                    4817 	.db #0x00	; 0
      000398 14                    4818 	.db #0x14	; 20
      000399 14                    4819 	.db #0x14	; 20
      00039A F7                    4820 	.db #0xf7	; 247
      00039B 00                    4821 	.db #0x00	; 0
      00039C FF                    4822 	.db #0xff	; 255
      00039D 00                    4823 	.db #0x00	; 0
      00039E 00                    4824 	.db #0x00	; 0
      00039F FF                    4825 	.db #0xff	; 255
      0003A0 00                    4826 	.db #0x00	; 0
      0003A1 FF                    4827 	.db #0xff	; 255
      0003A2 14                    4828 	.db #0x14	; 20
      0003A3 14                    4829 	.db #0x14	; 20
      0003A4 F4                    4830 	.db #0xf4	; 244
      0003A5 04                    4831 	.db #0x04	; 4
      0003A6 FC                    4832 	.db #0xfc	; 252
      0003A7 14                    4833 	.db #0x14	; 20
      0003A8 14                    4834 	.db #0x14	; 20
      0003A9 17                    4835 	.db #0x17	; 23
      0003AA 10                    4836 	.db #0x10	; 16
      0003AB 1F                    4837 	.db #0x1f	; 31
      0003AC 10                    4838 	.db #0x10	; 16
      0003AD 10                    4839 	.db #0x10	; 16
      0003AE 1F                    4840 	.db #0x1f	; 31
      0003AF 10                    4841 	.db #0x10	; 16
      0003B0 1F                    4842 	.db #0x1f	; 31
      0003B1 14                    4843 	.db #0x14	; 20
      0003B2 14                    4844 	.db #0x14	; 20
      0003B3 14                    4845 	.db #0x14	; 20
      0003B4 1F                    4846 	.db #0x1f	; 31
      0003B5 00                    4847 	.db #0x00	; 0
      0003B6 10                    4848 	.db #0x10	; 16
      0003B7 10                    4849 	.db #0x10	; 16
      0003B8 10                    4850 	.db #0x10	; 16
      0003B9 F0                    4851 	.db #0xf0	; 240
      0003BA 00                    4852 	.db #0x00	; 0
      0003BB 00                    4853 	.db #0x00	; 0
      0003BC 00                    4854 	.db #0x00	; 0
      0003BD 00                    4855 	.db #0x00	; 0
      0003BE 1F                    4856 	.db #0x1f	; 31
      0003BF 10                    4857 	.db #0x10	; 16
      0003C0 10                    4858 	.db #0x10	; 16
      0003C1 10                    4859 	.db #0x10	; 16
      0003C2 10                    4860 	.db #0x10	; 16
      0003C3 1F                    4861 	.db #0x1f	; 31
      0003C4 10                    4862 	.db #0x10	; 16
      0003C5 10                    4863 	.db #0x10	; 16
      0003C6 10                    4864 	.db #0x10	; 16
      0003C7 10                    4865 	.db #0x10	; 16
      0003C8 F0                    4866 	.db #0xf0	; 240
      0003C9 10                    4867 	.db #0x10	; 16
      0003CA 00                    4868 	.db #0x00	; 0
      0003CB 00                    4869 	.db #0x00	; 0
      0003CC 00                    4870 	.db #0x00	; 0
      0003CD FF                    4871 	.db #0xff	; 255
      0003CE 10                    4872 	.db #0x10	; 16
      0003CF 10                    4873 	.db #0x10	; 16
      0003D0 10                    4874 	.db #0x10	; 16
      0003D1 10                    4875 	.db #0x10	; 16
      0003D2 10                    4876 	.db #0x10	; 16
      0003D3 10                    4877 	.db #0x10	; 16
      0003D4 10                    4878 	.db #0x10	; 16
      0003D5 10                    4879 	.db #0x10	; 16
      0003D6 10                    4880 	.db #0x10	; 16
      0003D7 FF                    4881 	.db #0xff	; 255
      0003D8 10                    4882 	.db #0x10	; 16
      0003D9 00                    4883 	.db #0x00	; 0
      0003DA 00                    4884 	.db #0x00	; 0
      0003DB 00                    4885 	.db #0x00	; 0
      0003DC FF                    4886 	.db #0xff	; 255
      0003DD 14                    4887 	.db #0x14	; 20
      0003DE 00                    4888 	.db #0x00	; 0
      0003DF 00                    4889 	.db #0x00	; 0
      0003E0 FF                    4890 	.db #0xff	; 255
      0003E1 00                    4891 	.db #0x00	; 0
      0003E2 FF                    4892 	.db #0xff	; 255
      0003E3 00                    4893 	.db #0x00	; 0
      0003E4 00                    4894 	.db #0x00	; 0
      0003E5 1F                    4895 	.db #0x1f	; 31
      0003E6 10                    4896 	.db #0x10	; 16
      0003E7 17                    4897 	.db #0x17	; 23
      0003E8 00                    4898 	.db #0x00	; 0
      0003E9 00                    4899 	.db #0x00	; 0
      0003EA FC                    4900 	.db #0xfc	; 252
      0003EB 04                    4901 	.db #0x04	; 4
      0003EC F4                    4902 	.db #0xf4	; 244
      0003ED 14                    4903 	.db #0x14	; 20
      0003EE 14                    4904 	.db #0x14	; 20
      0003EF 17                    4905 	.db #0x17	; 23
      0003F0 10                    4906 	.db #0x10	; 16
      0003F1 17                    4907 	.db #0x17	; 23
      0003F2 14                    4908 	.db #0x14	; 20
      0003F3 14                    4909 	.db #0x14	; 20
      0003F4 F4                    4910 	.db #0xf4	; 244
      0003F5 04                    4911 	.db #0x04	; 4
      0003F6 F4                    4912 	.db #0xf4	; 244
      0003F7 00                    4913 	.db #0x00	; 0
      0003F8 00                    4914 	.db #0x00	; 0
      0003F9 FF                    4915 	.db #0xff	; 255
      0003FA 00                    4916 	.db #0x00	; 0
      0003FB F7                    4917 	.db #0xf7	; 247
      0003FC 14                    4918 	.db #0x14	; 20
      0003FD 14                    4919 	.db #0x14	; 20
      0003FE 14                    4920 	.db #0x14	; 20
      0003FF 14                    4921 	.db #0x14	; 20
      000400 14                    4922 	.db #0x14	; 20
      000401 14                    4923 	.db #0x14	; 20
      000402 14                    4924 	.db #0x14	; 20
      000403 F7                    4925 	.db #0xf7	; 247
      000404 00                    4926 	.db #0x00	; 0
      000405 F7                    4927 	.db #0xf7	; 247
      000406 14                    4928 	.db #0x14	; 20
      000407 14                    4929 	.db #0x14	; 20
      000408 14                    4930 	.db #0x14	; 20
      000409 17                    4931 	.db #0x17	; 23
      00040A 14                    4932 	.db #0x14	; 20
      00040B 10                    4933 	.db #0x10	; 16
      00040C 10                    4934 	.db #0x10	; 16
      00040D 1F                    4935 	.db #0x1f	; 31
      00040E 10                    4936 	.db #0x10	; 16
      00040F 1F                    4937 	.db #0x1f	; 31
      000410 14                    4938 	.db #0x14	; 20
      000411 14                    4939 	.db #0x14	; 20
      000412 14                    4940 	.db #0x14	; 20
      000413 F4                    4941 	.db #0xf4	; 244
      000414 14                    4942 	.db #0x14	; 20
      000415 10                    4943 	.db #0x10	; 16
      000416 10                    4944 	.db #0x10	; 16
      000417 F0                    4945 	.db #0xf0	; 240
      000418 10                    4946 	.db #0x10	; 16
      000419 F0                    4947 	.db #0xf0	; 240
      00041A 00                    4948 	.db #0x00	; 0
      00041B 00                    4949 	.db #0x00	; 0
      00041C 1F                    4950 	.db #0x1f	; 31
      00041D 10                    4951 	.db #0x10	; 16
      00041E 1F                    4952 	.db #0x1f	; 31
      00041F 00                    4953 	.db #0x00	; 0
      000420 00                    4954 	.db #0x00	; 0
      000421 00                    4955 	.db #0x00	; 0
      000422 1F                    4956 	.db #0x1f	; 31
      000423 14                    4957 	.db #0x14	; 20
      000424 00                    4958 	.db #0x00	; 0
      000425 00                    4959 	.db #0x00	; 0
      000426 00                    4960 	.db #0x00	; 0
      000427 FC                    4961 	.db #0xfc	; 252
      000428 14                    4962 	.db #0x14	; 20
      000429 00                    4963 	.db #0x00	; 0
      00042A 00                    4964 	.db #0x00	; 0
      00042B F0                    4965 	.db #0xf0	; 240
      00042C 10                    4966 	.db #0x10	; 16
      00042D F0                    4967 	.db #0xf0	; 240
      00042E 10                    4968 	.db #0x10	; 16
      00042F 10                    4969 	.db #0x10	; 16
      000430 FF                    4970 	.db #0xff	; 255
      000431 10                    4971 	.db #0x10	; 16
      000432 FF                    4972 	.db #0xff	; 255
      000433 14                    4973 	.db #0x14	; 20
      000434 14                    4974 	.db #0x14	; 20
      000435 14                    4975 	.db #0x14	; 20
      000436 FF                    4976 	.db #0xff	; 255
      000437 14                    4977 	.db #0x14	; 20
      000438 10                    4978 	.db #0x10	; 16
      000439 10                    4979 	.db #0x10	; 16
      00043A 10                    4980 	.db #0x10	; 16
      00043B 1F                    4981 	.db #0x1f	; 31
      00043C 00                    4982 	.db #0x00	; 0
      00043D 00                    4983 	.db #0x00	; 0
      00043E 00                    4984 	.db #0x00	; 0
      00043F 00                    4985 	.db #0x00	; 0
      000440 F0                    4986 	.db #0xf0	; 240
      000441 10                    4987 	.db #0x10	; 16
      000442 FF                    4988 	.db #0xff	; 255
      000443 FF                    4989 	.db #0xff	; 255
      000444 FF                    4990 	.db #0xff	; 255
      000445 FF                    4991 	.db #0xff	; 255
      000446 FF                    4992 	.db #0xff	; 255
      000447 F0                    4993 	.db #0xf0	; 240
      000448 F0                    4994 	.db #0xf0	; 240
      000449 F0                    4995 	.db #0xf0	; 240
      00044A F0                    4996 	.db #0xf0	; 240
      00044B F0                    4997 	.db #0xf0	; 240
      00044C FF                    4998 	.db #0xff	; 255
      00044D FF                    4999 	.db #0xff	; 255
      00044E FF                    5000 	.db #0xff	; 255
      00044F 00                    5001 	.db #0x00	; 0
      000450 00                    5002 	.db #0x00	; 0
      000451 00                    5003 	.db #0x00	; 0
      000452 00                    5004 	.db #0x00	; 0
      000453 00                    5005 	.db #0x00	; 0
      000454 FF                    5006 	.db #0xff	; 255
      000455 FF                    5007 	.db #0xff	; 255
      000456 0F                    5008 	.db #0x0f	; 15
      000457 0F                    5009 	.db #0x0f	; 15
      000458 0F                    5010 	.db #0x0f	; 15
      000459 0F                    5011 	.db #0x0f	; 15
      00045A 0F                    5012 	.db #0x0f	; 15
      00045B 38                    5013 	.db #0x38	; 56	'8'
      00045C 44                    5014 	.db #0x44	; 68	'D'
      00045D 44                    5015 	.db #0x44	; 68	'D'
      00045E 38                    5016 	.db #0x38	; 56	'8'
      00045F 44                    5017 	.db #0x44	; 68	'D'
      000460 FC                    5018 	.db #0xfc	; 252
      000461 4A                    5019 	.db #0x4a	; 74	'J'
      000462 4A                    5020 	.db #0x4a	; 74	'J'
      000463 4A                    5021 	.db #0x4a	; 74	'J'
      000464 34                    5022 	.db #0x34	; 52	'4'
      000465 7E                    5023 	.db #0x7e	; 126
      000466 02                    5024 	.db #0x02	; 2
      000467 02                    5025 	.db #0x02	; 2
      000468 06                    5026 	.db #0x06	; 6
      000469 06                    5027 	.db #0x06	; 6
      00046A 02                    5028 	.db #0x02	; 2
      00046B 7E                    5029 	.db #0x7e	; 126
      00046C 02                    5030 	.db #0x02	; 2
      00046D 7E                    5031 	.db #0x7e	; 126
      00046E 02                    5032 	.db #0x02	; 2
      00046F 63                    5033 	.db #0x63	; 99	'c'
      000470 55                    5034 	.db #0x55	; 85	'U'
      000471 49                    5035 	.db #0x49	; 73	'I'
      000472 41                    5036 	.db #0x41	; 65	'A'
      000473 63                    5037 	.db #0x63	; 99	'c'
      000474 38                    5038 	.db #0x38	; 56	'8'
      000475 44                    5039 	.db #0x44	; 68	'D'
      000476 44                    5040 	.db #0x44	; 68	'D'
      000477 3C                    5041 	.db #0x3c	; 60
      000478 04                    5042 	.db #0x04	; 4
      000479 40                    5043 	.db #0x40	; 64
      00047A 7E                    5044 	.db #0x7e	; 126
      00047B 20                    5045 	.db #0x20	; 32
      00047C 1E                    5046 	.db #0x1e	; 30
      00047D 20                    5047 	.db #0x20	; 32
      00047E 06                    5048 	.db #0x06	; 6
      00047F 02                    5049 	.db #0x02	; 2
      000480 7E                    5050 	.db #0x7e	; 126
      000481 02                    5051 	.db #0x02	; 2
      000482 02                    5052 	.db #0x02	; 2
      000483 99                    5053 	.db #0x99	; 153
      000484 A5                    5054 	.db #0xa5	; 165
      000485 E7                    5055 	.db #0xe7	; 231
      000486 A5                    5056 	.db #0xa5	; 165
      000487 99                    5057 	.db #0x99	; 153
      000488 1C                    5058 	.db #0x1c	; 28
      000489 2A                    5059 	.db #0x2a	; 42
      00048A 49                    5060 	.db #0x49	; 73	'I'
      00048B 2A                    5061 	.db #0x2a	; 42
      00048C 1C                    5062 	.db #0x1c	; 28
      00048D 4C                    5063 	.db #0x4c	; 76	'L'
      00048E 72                    5064 	.db #0x72	; 114	'r'
      00048F 01                    5065 	.db #0x01	; 1
      000490 72                    5066 	.db #0x72	; 114	'r'
      000491 4C                    5067 	.db #0x4c	; 76	'L'
      000492 30                    5068 	.db #0x30	; 48	'0'
      000493 4A                    5069 	.db #0x4a	; 74	'J'
      000494 4D                    5070 	.db #0x4d	; 77	'M'
      000495 4D                    5071 	.db #0x4d	; 77	'M'
      000496 30                    5072 	.db #0x30	; 48	'0'
      000497 30                    5073 	.db #0x30	; 48	'0'
      000498 48                    5074 	.db #0x48	; 72	'H'
      000499 78                    5075 	.db #0x78	; 120	'x'
      00049A 48                    5076 	.db #0x48	; 72	'H'
      00049B 30                    5077 	.db #0x30	; 48	'0'
      00049C BC                    5078 	.db #0xbc	; 188
      00049D 62                    5079 	.db #0x62	; 98	'b'
      00049E 5A                    5080 	.db #0x5a	; 90	'Z'
      00049F 46                    5081 	.db #0x46	; 70	'F'
      0004A0 3D                    5082 	.db #0x3d	; 61
      0004A1 3E                    5083 	.db #0x3e	; 62
      0004A2 49                    5084 	.db #0x49	; 73	'I'
      0004A3 49                    5085 	.db #0x49	; 73	'I'
      0004A4 49                    5086 	.db #0x49	; 73	'I'
      0004A5 00                    5087 	.db #0x00	; 0
      0004A6 7E                    5088 	.db #0x7e	; 126
      0004A7 01                    5089 	.db #0x01	; 1
      0004A8 01                    5090 	.db #0x01	; 1
      0004A9 01                    5091 	.db #0x01	; 1
      0004AA 7E                    5092 	.db #0x7e	; 126
      0004AB 2A                    5093 	.db #0x2a	; 42
      0004AC 2A                    5094 	.db #0x2a	; 42
      0004AD 2A                    5095 	.db #0x2a	; 42
      0004AE 2A                    5096 	.db #0x2a	; 42
      0004AF 2A                    5097 	.db #0x2a	; 42
      0004B0 44                    5098 	.db #0x44	; 68	'D'
      0004B1 44                    5099 	.db #0x44	; 68	'D'
      0004B2 5F                    5100 	.db #0x5f	; 95
      0004B3 44                    5101 	.db #0x44	; 68	'D'
      0004B4 44                    5102 	.db #0x44	; 68	'D'
      0004B5 40                    5103 	.db #0x40	; 64
      0004B6 51                    5104 	.db #0x51	; 81	'Q'
      0004B7 4A                    5105 	.db #0x4a	; 74	'J'
      0004B8 44                    5106 	.db #0x44	; 68	'D'
      0004B9 40                    5107 	.db #0x40	; 64
      0004BA 40                    5108 	.db #0x40	; 64
      0004BB 44                    5109 	.db #0x44	; 68	'D'
      0004BC 4A                    5110 	.db #0x4a	; 74	'J'
      0004BD 51                    5111 	.db #0x51	; 81	'Q'
      0004BE 40                    5112 	.db #0x40	; 64
      0004BF 00                    5113 	.db #0x00	; 0
      0004C0 00                    5114 	.db #0x00	; 0
      0004C1 FF                    5115 	.db #0xff	; 255
      0004C2 01                    5116 	.db #0x01	; 1
      0004C3 03                    5117 	.db #0x03	; 3
      0004C4 E0                    5118 	.db #0xe0	; 224
      0004C5 80                    5119 	.db #0x80	; 128
      0004C6 FF                    5120 	.db #0xff	; 255
      0004C7 00                    5121 	.db #0x00	; 0
      0004C8 00                    5122 	.db #0x00	; 0
      0004C9 08                    5123 	.db #0x08	; 8
      0004CA 08                    5124 	.db #0x08	; 8
      0004CB 6B                    5125 	.db #0x6b	; 107	'k'
      0004CC 6B                    5126 	.db #0x6b	; 107	'k'
      0004CD 08                    5127 	.db #0x08	; 8
      0004CE 36                    5128 	.db #0x36	; 54	'6'
      0004CF 12                    5129 	.db #0x12	; 18
      0004D0 36                    5130 	.db #0x36	; 54	'6'
      0004D1 24                    5131 	.db #0x24	; 36
      0004D2 36                    5132 	.db #0x36	; 54	'6'
      0004D3 06                    5133 	.db #0x06	; 6
      0004D4 0F                    5134 	.db #0x0f	; 15
      0004D5 09                    5135 	.db #0x09	; 9
      0004D6 0F                    5136 	.db #0x0f	; 15
      0004D7 06                    5137 	.db #0x06	; 6
      0004D8 00                    5138 	.db #0x00	; 0
      0004D9 00                    5139 	.db #0x00	; 0
      0004DA 18                    5140 	.db #0x18	; 24
      0004DB 18                    5141 	.db #0x18	; 24
      0004DC 00                    5142 	.db #0x00	; 0
      0004DD 00                    5143 	.db #0x00	; 0
      0004DE 00                    5144 	.db #0x00	; 0
      0004DF 10                    5145 	.db #0x10	; 16
      0004E0 10                    5146 	.db #0x10	; 16
      0004E1 00                    5147 	.db #0x00	; 0
      0004E2 30                    5148 	.db #0x30	; 48	'0'
      0004E3 40                    5149 	.db #0x40	; 64
      0004E4 FF                    5150 	.db #0xff	; 255
      0004E5 01                    5151 	.db #0x01	; 1
      0004E6 01                    5152 	.db #0x01	; 1
      0004E7 00                    5153 	.db #0x00	; 0
      0004E8 1F                    5154 	.db #0x1f	; 31
      0004E9 01                    5155 	.db #0x01	; 1
      0004EA 01                    5156 	.db #0x01	; 1
      0004EB 1E                    5157 	.db #0x1e	; 30
      0004EC 00                    5158 	.db #0x00	; 0
      0004ED 19                    5159 	.db #0x19	; 25
      0004EE 1D                    5160 	.db #0x1d	; 29
      0004EF 17                    5161 	.db #0x17	; 23
      0004F0 12                    5162 	.db #0x12	; 18
      0004F1 00                    5163 	.db #0x00	; 0
      0004F2 3C                    5164 	.db #0x3c	; 60
      0004F3 3C                    5165 	.db #0x3c	; 60
      0004F4 3C                    5166 	.db #0x3c	; 60
      0004F5 3C                    5167 	.db #0x3c	; 60
      0004F6 00                    5168 	.db #0x00	; 0
      0004F7 00                    5169 	.db #0x00	; 0
      0004F8 00                    5170 	.db #0x00	; 0
      0004F9 00                    5171 	.db #0x00	; 0
      0004FA 00                    5172 	.db #0x00	; 0
                                   5173 	.area CONST   (CODE)
      0004FB                       5174 ___str_0:
      0004FB 57 65 6C 63 6F 6D 65  5175 	.ascii "Welcome"
      000502 0A                    5176 	.db 0x0a
      000503 00                    5177 	.db 0x00
                                   5178 	.area CSEG    (CODE)
                                   5179 	.area CONST   (CODE)
      000504                       5180 ___str_1:
      000504 45 43 45 4E 2D 34 33  5181 	.ascii "ECEN-4330"
             33 30
      00050D 0A                    5182 	.db 0x0a
      00050E 00                    5183 	.db 0x00
                                   5184 	.area CSEG    (CODE)
                                   5185 	.area CONST   (CODE)
      00050F                       5186 ___str_2:
      00050F 52 6F 74 61 74 69 6F  5187 	.ascii "Rotation 0"
             6E 20 30
      000519 00                    5188 	.db 0x00
                                   5189 	.area CSEG    (CODE)
                                   5190 	.area CONST   (CODE)
      00051A                       5191 ___str_3:
      00051A 52 6F 74 61 74 69 6F  5192 	.ascii "Rotation 1"
             6E 20 31
      000524 00                    5193 	.db 0x00
                                   5194 	.area CSEG    (CODE)
                                   5195 	.area CONST   (CODE)
      000525                       5196 ___str_4:
      000525 52 6F 74 61 74 69 6F  5197 	.ascii "Rotation 2"
             6E 20 32
      00052F 00                    5198 	.db 0x00
                                   5199 	.area CSEG    (CODE)
                                   5200 	.area CONST   (CODE)
      000530                       5201 ___str_5:
      000530 52 6F 74 61 74 69 6F  5202 	.ascii "Rotation 3"
             6E 20 33
      00053A 00                    5203 	.db 0x00
                                   5204 	.area CSEG    (CODE)
                                   5205 	.area CONST   (CODE)
      00053B                       5206 ___str_6:
      00053B 45 6E 74 65 72 20 62  5207 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00054E 0A                    5208 	.db 0x0a
      00054F 00                    5209 	.db 0x00
                                   5210 	.area CSEG    (CODE)
                                   5211 	.area CONST   (CODE)
      000550                       5212 ___str_7:
      000550 49 6E 20 70 72 6F 67  5213 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00055E 0A                    5214 	.db 0x0a
      00055F 00                    5215 	.db 0x00
                                   5216 	.area CSEG    (CODE)
                                   5217 	.area CONST   (CODE)
      000560                       5218 ___str_8:
      000560 4D 65 6D 6F 72 79 20  5219 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000573 0A                    5220 	.db 0x0a
      000574 00                    5221 	.db 0x00
                                   5222 	.area CSEG    (CODE)
                                   5223 	.area CONST   (CODE)
      000575                       5224 ___str_9:
      000575 53 75 63 63 65 73 73  5225 	.ascii "Success!"
             21
      00057D 0A                    5226 	.db 0x0a
      00057E 00                    5227 	.db 0x00
                                   5228 	.area CSEG    (CODE)
                                   5229 	.area CONST   (CODE)
      00057F                       5230 ___str_10:
      00057F 50 72 65 73 73 20 31  5231 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00058F 00                    5232 	.db 0x00
                                   5233 	.area CSEG    (CODE)
                                   5234 	.area CONST   (CODE)
      000590                       5235 ___str_11:
      000590 45 6E 74 65 72 20 62  5236 	.ascii "Enter byte"
             79 74 65
      00059A 0A                    5237 	.db 0x0a
      00059B 00                    5238 	.db 0x00
                                   5239 	.area CSEG    (CODE)
                                   5240 	.area CONST   (CODE)
      00059C                       5241 ___str_12:
      00059C 45 6E 74 65 72 20 61  5242 	.ascii "Enter address"
             64 64 72 65 73 73
      0005A9 0A                    5243 	.db 0x0a
      0005AA 00                    5244 	.db 0x00
                                   5245 	.area CSEG    (CODE)
                                   5246 	.area CONST   (CODE)
      0005AB                       5247 ___str_13:
      0005AB 49 6E 20 70 72 6F 67  5248 	.ascii "In progress"
             72 65 73 73
      0005B6 0A                    5249 	.db 0x0a
      0005B7 00                    5250 	.db 0x00
                                   5251 	.area CSEG    (CODE)
                                   5252 	.area CONST   (CODE)
      0005B8                       5253 ___str_14:
      0005B8 20 66 65 74 63 68 65  5254 	.ascii " fetched!"
             64 21
      0005C1 0A                    5255 	.db 0x0a
      0005C2 53 75 63 63 65 73 73  5256 	.ascii "Success!"
             21
      0005CA 0A                    5257 	.db 0x0a
      0005CB 00                    5258 	.db 0x00
                                   5259 	.area CSEG    (CODE)
                                   5260 	.area CONST   (CODE)
      0005CC                       5261 ___str_15:
      0005CC 43 68 65 63 6B 20 66  5262 	.ascii "Check failed"
             61 69 6C 65 64
      0005D8 0A                    5263 	.db 0x0a
      0005D9 00                    5264 	.db 0x00
                                   5265 	.area CSEG    (CODE)
                                   5266 	.area CONST   (CODE)
      0005DA                       5267 ___str_16:
      0005DA 50 72 65 73 73 20 31  5268 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0005EA 0A                    5269 	.db 0x0a
      0005EB 00                    5270 	.db 0x00
                                   5271 	.area CSEG    (CODE)
                                   5272 	.area CONST   (CODE)
      0005EC                       5273 ___str_17:
      0005EC 42 72 61 6E 64 6F 6E  5274 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      0005F9 0A                    5275 	.db 0x0a
      0005FA 00                    5276 	.db 0x00
                                   5277 	.area CSEG    (CODE)
                                   5278 	.area CONST   (CODE)
      0005FB                       5279 ___str_18:
      0005FB 45 43 45 4E 20 34 33  5280 	.ascii "ECEN 4330"
             33 30
      000604 0A                    5281 	.db 0x0a
      000605 00                    5282 	.db 0x00
                                   5283 	.area CSEG    (CODE)
                                   5284 	.area CONST   (CODE)
      000606                       5285 ___str_19:
      000606 31 3A 20 42 61 73 69  5286 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      000614 0A                    5287 	.db 0x0a
      000615 00                    5288 	.db 0x00
                                   5289 	.area CSEG    (CODE)
                                   5290 	.area CONST   (CODE)
      000616                       5291 ___str_20:
      000616 32 3A 20 44 75 6D 70  5292 	.ascii "2: Dump"
      00061D 0A                    5293 	.db 0x0a
      00061E 00                    5294 	.db 0x00
                                   5295 	.area CSEG    (CODE)
                                   5296 	.area CONST   (CODE)
      00061F                       5297 ___str_21:
      00061F 33 3A 20 43 68 65 63  5298 	.ascii "3: Check"
             6B
      000627 0A                    5299 	.db 0x0a
      000628 00                    5300 	.db 0x00
                                   5301 	.area CSEG    (CODE)
                                   5302 	.area CONST   (CODE)
      000629                       5303 ___str_22:
      000629 41 3A 20 4D 6F 76 65  5304 	.ascii "A: Move"
      000630 0A                    5305 	.db 0x0a
      000631 00                    5306 	.db 0x00
                                   5307 	.area CSEG    (CODE)
                                   5308 	.area CONST   (CODE)
      000632                       5309 ___str_23:
      000632 34 3A 20 45 64 69 74  5310 	.ascii "4: Edit"
      000639 0A                    5311 	.db 0x0a
      00063A 00                    5312 	.db 0x00
                                   5313 	.area CSEG    (CODE)
                                   5314 	.area CONST   (CODE)
      00063B                       5315 ___str_24:
      00063B 35 3A 20 46 69 6E 64  5316 	.ascii "5: Find"
      000642 0A                    5317 	.db 0x0a
      000643 00                    5318 	.db 0x00
                                   5319 	.area CSEG    (CODE)
                                   5320 	.area CONST   (CODE)
      000644                       5321 ___str_25:
      000644 36 3A 20 43 6F 75 6E  5322 	.ascii "6: Count"
             74
      00064C 0A                    5323 	.db 0x0a
      00064D 00                    5324 	.db 0x00
                                   5325 	.area CSEG    (CODE)
                                   5326 	.area XINIT   (CODE)
                                   5327 	.area CABS    (ABS,CODE)
