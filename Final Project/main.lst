                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _main
                                     20 	.globl _keypadSeven
                                     21 	.globl _writeSomeLines
                                     22 	.globl _write
                                     23 	.globl _drawChar
                                     24 	.globl _setRotation
                                     25 	.globl _iowrite8
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _F1
                                     33 	.globl _P
                                     34 	.globl _PS
                                     35 	.globl _PT1
                                     36 	.globl _PX1
                                     37 	.globl _PT0
                                     38 	.globl _PX0
                                     39 	.globl _RD
                                     40 	.globl _WR
                                     41 	.globl _T1
                                     42 	.globl _T0
                                     43 	.globl _INT1
                                     44 	.globl _INT0
                                     45 	.globl _TXD
                                     46 	.globl _RXD
                                     47 	.globl _P3_7
                                     48 	.globl _P3_6
                                     49 	.globl _P3_5
                                     50 	.globl _P3_4
                                     51 	.globl _P3_3
                                     52 	.globl _P3_2
                                     53 	.globl _P3_1
                                     54 	.globl _P3_0
                                     55 	.globl _EA
                                     56 	.globl _ES
                                     57 	.globl _ET1
                                     58 	.globl _EX1
                                     59 	.globl _ET0
                                     60 	.globl _EX0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _SM0
                                     70 	.globl _SM1
                                     71 	.globl _SM2
                                     72 	.globl _REN
                                     73 	.globl _TB8
                                     74 	.globl _RB8
                                     75 	.globl _TI
                                     76 	.globl _RI
                                     77 	.globl _P1_7
                                     78 	.globl _P1_6
                                     79 	.globl _P1_5
                                     80 	.globl _P1_4
                                     81 	.globl _P1_3
                                     82 	.globl _P1_2
                                     83 	.globl _P1_1
                                     84 	.globl _P1_0
                                     85 	.globl _TF1
                                     86 	.globl _TR1
                                     87 	.globl _TF0
                                     88 	.globl _TR0
                                     89 	.globl _IE1
                                     90 	.globl _IT1
                                     91 	.globl _IE0
                                     92 	.globl _IT0
                                     93 	.globl _P0_7
                                     94 	.globl _P0_6
                                     95 	.globl _P0_5
                                     96 	.globl _P0_4
                                     97 	.globl _P0_3
                                     98 	.globl _P0_2
                                     99 	.globl _P0_1
                                    100 	.globl _P0_0
                                    101 	.globl _B
                                    102 	.globl _ACC
                                    103 	.globl _PSW
                                    104 	.globl _IP
                                    105 	.globl _P3
                                    106 	.globl _IE
                                    107 	.globl _P2
                                    108 	.globl _SBUF
                                    109 	.globl _SCON
                                    110 	.globl _P1
                                    111 	.globl _TH1
                                    112 	.globl _TH0
                                    113 	.globl _TL1
                                    114 	.globl _TL0
                                    115 	.globl _TMOD
                                    116 	.globl _TCON
                                    117 	.globl _PCON
                                    118 	.globl _DPH
                                    119 	.globl _DPL
                                    120 	.globl _SP
                                    121 	.globl _P0
                                    122 	.globl _drawChar_PARM_6
                                    123 	.globl _drawChar_PARM_5
                                    124 	.globl _drawChar_PARM_4
                                    125 	.globl _drawChar_PARM_3
                                    126 	.globl _drawChar_PARM_2
                                    127 	.globl _fillRect_PARM_5
                                    128 	.globl _fillRect_PARM_4
                                    129 	.globl _fillRect_PARM_3
                                    130 	.globl _fillRect_PARM_2
                                    131 	.globl _testCircles_PARM_2
                                    132 	.globl _drawCircle_PARM_4
                                    133 	.globl _drawCircle_PARM_3
                                    134 	.globl _drawCircle_PARM_2
                                    135 	.globl _drawPixel_PARM_3
                                    136 	.globl _drawPixel_PARM_2
                                    137 	.globl __height
                                    138 	.globl __width
                                    139 	.globl _textbgcolor
                                    140 	.globl _textcolor
                                    141 	.globl _rotation
                                    142 	.globl _textsize
                                    143 	.globl _cursor_y
                                    144 	.globl _cursor_x
                                    145 	.globl _read_ram_address
                                    146 	.globl _seg7_address
                                    147 	.globl _lcd_address
                                    148 	.globl _rowloc
                                    149 	.globl _colloc
                                    150 	.globl _keypad
                                    151 	.globl _delay
                                    152 	.globl _writeRegister8
                                    153 	.globl _writeRegister16
                                    154 	.globl _setCursor
                                    155 	.globl _setTextColor
                                    156 	.globl _setTextSize
                                    157 	.globl _setAddress
                                    158 	.globl _TFT_LCD_INIT
                                    159 	.globl _drawPixel
                                    160 	.globl _drawCircle
                                    161 	.globl _testCircles
                                    162 	.globl _fillRect
                                    163 	.globl _fillScreen
                                    164 	.globl _LCD_string_write
                                    165 	.globl _testRAM
                                    166 	.globl _freeType
                                    167 	.globl _keyDetect
                                    168 	.globl _reverse
                                    169 	.globl _asciiToDec
                                    170 	.globl _asciiToHex
                                    171 ;--------------------------------------------------------
                                    172 ; special function registers
                                    173 ;--------------------------------------------------------
                                    174 	.area RSEG    (ABS,DATA)
      000000                        175 	.org 0x0000
                           000080   176 _P0	=	0x0080
                           000081   177 _SP	=	0x0081
                           000082   178 _DPL	=	0x0082
                           000083   179 _DPH	=	0x0083
                           000087   180 _PCON	=	0x0087
                           000088   181 _TCON	=	0x0088
                           000089   182 _TMOD	=	0x0089
                           00008A   183 _TL0	=	0x008a
                           00008B   184 _TL1	=	0x008b
                           00008C   185 _TH0	=	0x008c
                           00008D   186 _TH1	=	0x008d
                           000090   187 _P1	=	0x0090
                           000098   188 _SCON	=	0x0098
                           000099   189 _SBUF	=	0x0099
                           0000A0   190 _P2	=	0x00a0
                           0000A8   191 _IE	=	0x00a8
                           0000B0   192 _P3	=	0x00b0
                           0000B8   193 _IP	=	0x00b8
                           0000D0   194 _PSW	=	0x00d0
                           0000E0   195 _ACC	=	0x00e0
                           0000F0   196 _B	=	0x00f0
                                    197 ;--------------------------------------------------------
                                    198 ; special function bits
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _P0_0	=	0x0080
                           000081   203 _P0_1	=	0x0081
                           000082   204 _P0_2	=	0x0082
                           000083   205 _P0_3	=	0x0083
                           000084   206 _P0_4	=	0x0084
                           000085   207 _P0_5	=	0x0085
                           000086   208 _P0_6	=	0x0086
                           000087   209 _P0_7	=	0x0087
                           000088   210 _IT0	=	0x0088
                           000089   211 _IE0	=	0x0089
                           00008A   212 _IT1	=	0x008a
                           00008B   213 _IE1	=	0x008b
                           00008C   214 _TR0	=	0x008c
                           00008D   215 _TF0	=	0x008d
                           00008E   216 _TR1	=	0x008e
                           00008F   217 _TF1	=	0x008f
                           000090   218 _P1_0	=	0x0090
                           000091   219 _P1_1	=	0x0091
                           000092   220 _P1_2	=	0x0092
                           000093   221 _P1_3	=	0x0093
                           000094   222 _P1_4	=	0x0094
                           000095   223 _P1_5	=	0x0095
                           000096   224 _P1_6	=	0x0096
                           000097   225 _P1_7	=	0x0097
                           000098   226 _RI	=	0x0098
                           000099   227 _TI	=	0x0099
                           00009A   228 _RB8	=	0x009a
                           00009B   229 _TB8	=	0x009b
                           00009C   230 _REN	=	0x009c
                           00009D   231 _SM2	=	0x009d
                           00009E   232 _SM1	=	0x009e
                           00009F   233 _SM0	=	0x009f
                           0000A0   234 _P2_0	=	0x00a0
                           0000A1   235 _P2_1	=	0x00a1
                           0000A2   236 _P2_2	=	0x00a2
                           0000A3   237 _P2_3	=	0x00a3
                           0000A4   238 _P2_4	=	0x00a4
                           0000A5   239 _P2_5	=	0x00a5
                           0000A6   240 _P2_6	=	0x00a6
                           0000A7   241 _P2_7	=	0x00a7
                           0000A8   242 _EX0	=	0x00a8
                           0000A9   243 _ET0	=	0x00a9
                           0000AA   244 _EX1	=	0x00aa
                           0000AB   245 _ET1	=	0x00ab
                           0000AC   246 _ES	=	0x00ac
                           0000AF   247 _EA	=	0x00af
                           0000B0   248 _P3_0	=	0x00b0
                           0000B1   249 _P3_1	=	0x00b1
                           0000B2   250 _P3_2	=	0x00b2
                           0000B3   251 _P3_3	=	0x00b3
                           0000B4   252 _P3_4	=	0x00b4
                           0000B5   253 _P3_5	=	0x00b5
                           0000B6   254 _P3_6	=	0x00b6
                           0000B7   255 _P3_7	=	0x00b7
                           0000B0   256 _RXD	=	0x00b0
                           0000B1   257 _TXD	=	0x00b1
                           0000B2   258 _INT0	=	0x00b2
                           0000B3   259 _INT1	=	0x00b3
                           0000B4   260 _T0	=	0x00b4
                           0000B5   261 _T1	=	0x00b5
                           0000B6   262 _WR	=	0x00b6
                           0000B7   263 _RD	=	0x00b7
                           0000B8   264 _PX0	=	0x00b8
                           0000B9   265 _PT0	=	0x00b9
                           0000BA   266 _PX1	=	0x00ba
                           0000BB   267 _PT1	=	0x00bb
                           0000BC   268 _PS	=	0x00bc
                           0000D0   269 _P	=	0x00d0
                           0000D1   270 _F1	=	0x00d1
                           0000D2   271 _OV	=	0x00d2
                           0000D3   272 _RS0	=	0x00d3
                           0000D4   273 _RS1	=	0x00d4
                           0000D5   274 _F0	=	0x00d5
                           0000D6   275 _AC	=	0x00d6
                           0000D7   276 _CY	=	0x00d7
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
      000000                        286 _keypad::
      000000                        287 	.ds 16
      000010                        288 _colloc::
      000010                        289 	.ds 1
      000011                        290 _rowloc::
      000011                        291 	.ds 1
      000012                        292 _lcd_address::
      000012                        293 	.ds 2
      000014                        294 _seg7_address::
      000014                        295 	.ds 2
      000016                        296 _read_ram_address::
      000016                        297 	.ds 2
      000018                        298 _cursor_x::
      000018                        299 	.ds 2
      00001A                        300 _cursor_y::
      00001A                        301 	.ds 2
      00001C                        302 _textsize::
      00001C                        303 	.ds 1
      00001D                        304 _rotation::
      00001D                        305 	.ds 1
      00001E                        306 _textcolor::
      00001E                        307 	.ds 2
      000020                        308 _textbgcolor::
      000020                        309 	.ds 2
      000022                        310 __width::
      000022                        311 	.ds 2
      000024                        312 __height::
      000024                        313 	.ds 2
      000026                        314 _drawPixel_PARM_2:
      000026                        315 	.ds 2
      000028                        316 _drawPixel_PARM_3:
      000028                        317 	.ds 2
      00002A                        318 _drawCircle_PARM_2:
      00002A                        319 	.ds 2
      00002C                        320 _drawCircle_PARM_3:
      00002C                        321 	.ds 2
      00002E                        322 _drawCircle_PARM_4:
      00002E                        323 	.ds 2
      000030                        324 _drawCircle_x0_65536_103:
      000030                        325 	.ds 2
      000032                        326 _drawCircle_f_65536_104:
      000032                        327 	.ds 2
      000034                        328 _drawCircle_ddF_x_65536_104:
      000034                        329 	.ds 2
      000036                        330 _drawCircle_x_65536_104:
      000036                        331 	.ds 2
      000038                        332 _drawCircle_sloc0_1_0:
      000038                        333 	.ds 2
      00003A                        334 _drawCircle_sloc1_1_0:
      00003A                        335 	.ds 2
      00003C                        336 _drawCircle_sloc2_1_0:
      00003C                        337 	.ds 2
      00003E                        338 _testCircles_PARM_2:
      00003E                        339 	.ds 2
      000040                        340 _testCircles_w_65536_108:
      000040                        341 	.ds 2
      000042                        342 _testCircles_h_65536_108:
      000042                        343 	.ds 2
      000044                        344 _fillRect_PARM_2:
      000044                        345 	.ds 2
      000046                        346 _fillRect_PARM_3:
      000046                        347 	.ds 2
      000048                        348 _fillRect_PARM_4:
      000048                        349 	.ds 2
      00004A                        350 _fillRect_PARM_5:
      00004A                        351 	.ds 2
      00004C                        352 _drawChar_PARM_2:
      00004C                        353 	.ds 2
      00004E                        354 _drawChar_PARM_3:
      00004E                        355 	.ds 1
      00004F                        356 _drawChar_PARM_4:
      00004F                        357 	.ds 2
      000051                        358 _drawChar_PARM_5:
      000051                        359 	.ds 2
      000053                        360 _drawChar_PARM_6:
      000053                        361 	.ds 1
      000054                        362 _drawChar_i_131072_149:
      000054                        363 	.ds 1
      000055                        364 _drawChar_line_196608_150:
      000055                        365 	.ds 1
      000056                        366 _drawChar_j_262144_153:
      000056                        367 	.ds 1
      000057                        368 _drawChar_sloc1_1_0:
      000057                        369 	.ds 2
      000059                        370 _drawChar_sloc2_1_0:
      000059                        371 	.ds 2
      00005B                        372 _asciiToHex_store_65536_198:
      00005B                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; overlayable items in internal ram
                                    376 ;--------------------------------------------------------
                                    377 	.area	OSEG    (OVR,DATA)
      000000                        378 _iowrite8_PARM_2:
      000000                        379 	.ds 1
                                    380 	.area	OSEG    (OVR,DATA)
                                    381 	.area	OSEG    (OVR,DATA)
      000000                        382 _writeRegister8_PARM_2:
      000000                        383 	.ds 1
                                    384 	.area	OSEG    (OVR,DATA)
      000000                        385 _writeRegister16_PARM_2:
      000000                        386 	.ds 2
                                    387 	.area	OSEG    (OVR,DATA)
      000000                        388 _setCursor_PARM_2:
      000000                        389 	.ds 2
                                    390 	.area	OSEG    (OVR,DATA)
      000000                        391 _setTextColor_PARM_2:
      000000                        392 	.ds 2
                                    393 	.area	OSEG    (OVR,DATA)
                                    394 	.area	OSEG    (OVR,DATA)
      000000                        395 _setAddress_PARM_2:
      000000                        396 	.ds 2
      000002                        397 _setAddress_PARM_3:
      000002                        398 	.ds 2
      000004                        399 _setAddress_PARM_4:
      000004                        400 	.ds 2
                                    401 	.area	OSEG    (OVR,DATA)
                                    402 ;--------------------------------------------------------
                                    403 ; Stack segment in internal ram
                                    404 ;--------------------------------------------------------
                                    405 	.area	SSEG
      000000                        406 __start__stack:
      000000                        407 	.ds	1
                                    408 
                                    409 ;--------------------------------------------------------
                                    410 ; indirectly addressable internal ram data
                                    411 ;--------------------------------------------------------
                                    412 	.area ISEG    (DATA)
                                    413 ;--------------------------------------------------------
                                    414 ; absolute internal ram data
                                    415 ;--------------------------------------------------------
                                    416 	.area IABS    (ABS,DATA)
                                    417 	.area IABS    (ABS,DATA)
                                    418 ;--------------------------------------------------------
                                    419 ; bit data
                                    420 ;--------------------------------------------------------
                                    421 	.area BSEG    (BIT)
      000000                        422 _drawChar_sloc0_1_0:
      000000                        423 	.ds 1
                                    424 ;--------------------------------------------------------
                                    425 ; paged external ram data
                                    426 ;--------------------------------------------------------
                                    427 	.area PSEG    (PAG,XDATA)
                                    428 ;--------------------------------------------------------
                                    429 ; external ram data
                                    430 ;--------------------------------------------------------
                                    431 	.area XSEG    (XDATA)
                                    432 ;--------------------------------------------------------
                                    433 ; absolute external ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area XABS    (ABS,XDATA)
                                    436 ;--------------------------------------------------------
                                    437 ; external initialized ram data
                                    438 ;--------------------------------------------------------
                                    439 	.area XISEG   (XDATA)
                                    440 	.area HOME    (CODE)
                                    441 	.area GSINIT0 (CODE)
                                    442 	.area GSINIT1 (CODE)
                                    443 	.area GSINIT2 (CODE)
                                    444 	.area GSINIT3 (CODE)
                                    445 	.area GSINIT4 (CODE)
                                    446 	.area GSINIT5 (CODE)
                                    447 	.area GSINIT  (CODE)
                                    448 	.area GSFINAL (CODE)
                                    449 	.area CSEG    (CODE)
                                    450 ;--------------------------------------------------------
                                    451 ; interrupt vector
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
      000000                        454 __interrupt_vect:
      000000 02r00r00         [24]  455 	ljmp	__sdcc_gsinit_startup
                                    456 ;--------------------------------------------------------
                                    457 ; global & static initialisations
                                    458 ;--------------------------------------------------------
                                    459 	.area HOME    (CODE)
                                    460 	.area GSINIT  (CODE)
                                    461 	.area GSFINAL (CODE)
                                    462 	.area GSINIT  (CODE)
                                    463 	.globl __sdcc_gsinit_startup
                                    464 	.globl __sdcc_program_startup
                                    465 	.globl __start__stack
                                    466 	.globl __mcs51_genXINIT
                                    467 	.globl __mcs51_genXRAMCLEAR
                                    468 	.globl __mcs51_genRAMCLEAR
                                    469 ;	ecen4330_lcd_v3.c:41: uint8_t keypad[4][4] =	{{'1','4','7','E'},
      000000 75*00 31         [24]  470 	mov	_keypad,#0x31
      000003 75*01 34         [24]  471 	mov	(_keypad + 0x0001),#0x34
      000006 75*02 37         [24]  472 	mov	(_keypad + 0x0002),#0x37
      000009 75*03 45         [24]  473 	mov	(_keypad + 0x0003),#0x45
      00000C 75*04 32         [24]  474 	mov	(_keypad + 0x0004),#0x32
      00000F 75*05 35         [24]  475 	mov	(_keypad + 0x0005),#0x35
      000012 75*06 38         [24]  476 	mov	(_keypad + 0x0006),#0x38
      000015 75*07 30         [24]  477 	mov	(_keypad + 0x0007),#0x30
      000018 75*08 33         [24]  478 	mov	(_keypad + 0x0008),#0x33
      00001B 75*09 36         [24]  479 	mov	(_keypad + 0x0009),#0x36
      00001E 75*0A 39         [24]  480 	mov	(_keypad + 0x000a),#0x39
      000021 75*0B 46         [24]  481 	mov	(_keypad + 0x000b),#0x46
      000024 75*0C 41         [24]  482 	mov	(_keypad + 0x000c),#0x41
      000027 75*0D 42         [24]  483 	mov	(_keypad + 0x000d),#0x42
      00002A 75*0E 43         [24]  484 	mov	(_keypad + 0x000e),#0x43
      00002D 75*0F 44         [24]  485 	mov	(_keypad + 0x000f),#0x44
                                    486 ;	ecen4330_lcd_v3.c:47: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000030 75*12 00         [24]  487 	mov	_lcd_address,#0x00
      000033 75*13 40         [24]  488 	mov	(_lcd_address + 1),#0x40
                                    489 ;	ecen4330_lcd_v3.c:48: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000036 75*14 00         [24]  490 	mov	_seg7_address,#0x00
      000039 75*15 80         [24]  491 	mov	(_seg7_address + 1),#0x80
                                    492 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  493 	ljmp	__sdcc_program_startup
                                    494 ;--------------------------------------------------------
                                    495 ; Home
                                    496 ;--------------------------------------------------------
                                    497 	.area HOME    (CODE)
                                    498 	.area HOME    (CODE)
      000003                        499 __sdcc_program_startup:
      000003 02r0Fr23         [24]  500 	ljmp	_main
                                    501 ;	return from main will return to caller
                                    502 ;--------------------------------------------------------
                                    503 ; code
                                    504 ;--------------------------------------------------------
                                    505 	.area CSEG    (CODE)
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'iowrite8'
                                    508 ;------------------------------------------------------------
                                    509 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    510 ;map_address               Allocated to registers r6 r7 
                                    511 ;------------------------------------------------------------
                                    512 ;	ecen4330_lcd_v3.c:89: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    513 ;	-----------------------------------------
                                    514 ;	 function iowrite8
                                    515 ;	-----------------------------------------
      000000                        516 _iowrite8:
                           000007   517 	ar7 = 0x07
                           000006   518 	ar6 = 0x06
                           000005   519 	ar5 = 0x05
                           000004   520 	ar4 = 0x04
                           000003   521 	ar3 = 0x03
                           000002   522 	ar2 = 0x02
                           000001   523 	ar1 = 0x01
                           000000   524 	ar0 = 0x00
      000000 AE 82            [24]  525 	mov	r6,dpl
      000002 AF 83            [24]  526 	mov	r7,dph
                                    527 ;	ecen4330_lcd_v3.c:90: IOM = 1;
                                    528 ;	assignBit
      000004 D2 B4            [12]  529 	setb	_P3_4
                                    530 ;	ecen4330_lcd_v3.c:91: *map_address = d;
      000006 8E 82            [24]  531 	mov	dpl,r6
      000008 8F 83            [24]  532 	mov	dph,r7
      00000A E5*00            [12]  533 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  534 	movx	@dptr,a
                                    535 ;	ecen4330_lcd_v3.c:92: IOM = 0;
                                    536 ;	assignBit
      00000D C2 B4            [12]  537 	clr	_P3_4
                                    538 ;	ecen4330_lcd_v3.c:93: }
      00000F 22               [24]  539 	ret
                                    540 ;------------------------------------------------------------
                                    541 ;Allocation info for local variables in function 'delay'
                                    542 ;------------------------------------------------------------
                                    543 ;d                         Allocated to registers r6 r7 
                                    544 ;i                         Allocated to registers r4 r5 
                                    545 ;j                         Allocated to registers r2 r3 
                                    546 ;------------------------------------------------------------
                                    547 ;	ecen4330_lcd_v3.c:97: void delay (int16_t d) /// x 1ms
                                    548 ;	-----------------------------------------
                                    549 ;	 function delay
                                    550 ;	-----------------------------------------
      000010                        551 _delay:
      000010 AE 82            [24]  552 	mov	r6,dpl
      000012 AF 83            [24]  553 	mov	r7,dph
                                    554 ;	ecen4330_lcd_v3.c:100: for (i=0;i<d;i++) /// this is For(); loop delay used to define delay value in Embedded C
      000014 7C 00            [12]  555 	mov	r4,#0x00
      000016 7D 00            [12]  556 	mov	r5,#0x00
      000018                        557 00107$:
      000018 8C 02            [24]  558 	mov	ar2,r4
      00001A 8D 03            [24]  559 	mov	ar3,r5
      00001C C3               [12]  560 	clr	c
      00001D EA               [12]  561 	mov	a,r2
      00001E 9E               [12]  562 	subb	a,r6
      00001F EB               [12]  563 	mov	a,r3
      000020 64 80            [12]  564 	xrl	a,#0x80
      000022 8F F0            [24]  565 	mov	b,r7
      000024 63 F0 80         [24]  566 	xrl	b,#0x80
      000027 95 F0            [12]  567 	subb	a,b
      000029 50 14            [24]  568 	jnc	00109$
                                    569 ;	ecen4330_lcd_v3.c:102: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  570 	mov	r2,#0xe8
      00002D 7B 03            [12]  571 	mov	r3,#0x03
      00002F                        572 00105$:
      00002F 1A               [12]  573 	dec	r2
      000030 BA FF 01         [24]  574 	cjne	r2,#0xff,00130$
      000033 1B               [12]  575 	dec	r3
      000034                        576 00130$:
      000034 EA               [12]  577 	mov	a,r2
      000035 4B               [12]  578 	orl	a,r3
      000036 70 F7            [24]  579 	jnz	00105$
                                    580 ;	ecen4330_lcd_v3.c:100: for (i=0;i<d;i++) /// this is For(); loop delay used to define delay value in Embedded C
      000038 0C               [12]  581 	inc	r4
      000039 BC 00 DC         [24]  582 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  583 	inc	r5
      00003D 80 D9            [24]  584 	sjmp	00107$
      00003F                        585 00109$:
                                    586 ;	ecen4330_lcd_v3.c:104: }
      00003F 22               [24]  587 	ret
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'writeRegister8'
                                    590 ;------------------------------------------------------------
                                    591 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    592 ;a                         Allocated to registers r7 
                                    593 ;------------------------------------------------------------
                                    594 ;	ecen4330_lcd_v3.c:109: void writeRegister8 (uint8_t a, uint8_t d) {
                                    595 ;	-----------------------------------------
                                    596 ;	 function writeRegister8
                                    597 ;	-----------------------------------------
      000040                        598 _writeRegister8:
      000040 AF 82            [24]  599 	mov	r7,dpl
                                    600 ;	ecen4330_lcd_v3.c:111: CD = __CMD__;
                                    601 ;	assignBit
      000042 C2 B5            [12]  602 	clr	_P3_5
                                    603 ;	ecen4330_lcd_v3.c:112: write8(a);
                                    604 ;	assignBit
      000044 D2 B4            [12]  605 	setb	_P3_4
      000046 85*12 82         [24]  606 	mov	dpl,_lcd_address
      000049 85*13 83         [24]  607 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  608 	mov	a,r7
      00004D F0               [24]  609 	movx	@dptr,a
                                    610 ;	assignBit
      00004E C2 B4            [12]  611 	clr	_P3_4
                                    612 ;	ecen4330_lcd_v3.c:113: CD = __DATA__;
                                    613 ;	assignBit
      000050 D2 B5            [12]  614 	setb	_P3_5
                                    615 ;	ecen4330_lcd_v3.c:114: write8(d);
                                    616 ;	assignBit
      000052 D2 B4            [12]  617 	setb	_P3_4
      000054 85*12 82         [24]  618 	mov	dpl,_lcd_address
      000057 85*13 83         [24]  619 	mov	dph,(_lcd_address + 1)
      00005A E5*00            [12]  620 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  621 	movx	@dptr,a
                                    622 ;	assignBit
      00005D C2 B4            [12]  623 	clr	_P3_4
                                    624 ;	ecen4330_lcd_v3.c:116: }
      00005F 22               [24]  625 	ret
                                    626 ;------------------------------------------------------------
                                    627 ;Allocation info for local variables in function 'writeRegister16'
                                    628 ;------------------------------------------------------------
                                    629 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    630 ;a                         Allocated to registers r6 r7 
                                    631 ;hi                        Allocated to registers r7 
                                    632 ;lo                        Allocated to registers r6 
                                    633 ;------------------------------------------------------------
                                    634 ;	ecen4330_lcd_v3.c:120: void writeRegister16 (uint16_t a, uint16_t d) {
                                    635 ;	-----------------------------------------
                                    636 ;	 function writeRegister16
                                    637 ;	-----------------------------------------
      000060                        638 _writeRegister16:
      000060 AE 82            [24]  639 	mov	r6,dpl
      000062 AF 83            [24]  640 	mov	r7,dph
                                    641 ;	ecen4330_lcd_v3.c:122: hi = (a) >> 8;
      000064 8F 05            [24]  642 	mov	ar5,r7
                                    643 ;	ecen4330_lcd_v3.c:123: lo = (a);
                                    644 ;	ecen4330_lcd_v3.c:126: write8Reg(hi);
                                    645 ;	assignBit
      000066 C2 B5            [12]  646 	clr	_P3_5
                                    647 ;	assignBit
      000068 D2 B4            [12]  648 	setb	_P3_4
      00006A 85*12 82         [24]  649 	mov	dpl,_lcd_address
      00006D 85*13 83         [24]  650 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  651 	mov	a,r5
      000071 F0               [24]  652 	movx	@dptr,a
                                    653 ;	assignBit
      000072 C2 B4            [12]  654 	clr	_P3_4
                                    655 ;	ecen4330_lcd_v3.c:127: write8Reg(lo);
                                    656 ;	assignBit
      000074 C2 B5            [12]  657 	clr	_P3_5
                                    658 ;	assignBit
      000076 D2 B4            [12]  659 	setb	_P3_4
      000078 85*12 82         [24]  660 	mov	dpl,_lcd_address
      00007B 85*13 83         [24]  661 	mov	dph,(_lcd_address + 1)
      00007E EE               [12]  662 	mov	a,r6
      00007F F0               [24]  663 	movx	@dptr,a
                                    664 ;	assignBit
      000080 C2 B4            [12]  665 	clr	_P3_4
                                    666 ;	ecen4330_lcd_v3.c:128: hi = (d) >> 8;
      000082 AF*01            [24]  667 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    668 ;	ecen4330_lcd_v3.c:129: lo = (d);
      000084 AE*00            [24]  669 	mov	r6,_writeRegister16_PARM_2
                                    670 ;	ecen4330_lcd_v3.c:130: CD = 1 ;
                                    671 ;	assignBit
      000086 D2 B5            [12]  672 	setb	_P3_5
                                    673 ;	ecen4330_lcd_v3.c:131: write8Data(hi);
                                    674 ;	assignBit
      000088 D2 B5            [12]  675 	setb	_P3_5
                                    676 ;	assignBit
      00008A D2 B4            [12]  677 	setb	_P3_4
      00008C 85*12 82         [24]  678 	mov	dpl,_lcd_address
      00008F 85*13 83         [24]  679 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  680 	mov	a,r7
      000093 F0               [24]  681 	movx	@dptr,a
                                    682 ;	assignBit
      000094 C2 B4            [12]  683 	clr	_P3_4
                                    684 ;	ecen4330_lcd_v3.c:132: write8Data(lo);
                                    685 ;	assignBit
      000096 D2 B5            [12]  686 	setb	_P3_5
                                    687 ;	assignBit
      000098 D2 B4            [12]  688 	setb	_P3_4
      00009A 85*12 82         [24]  689 	mov	dpl,_lcd_address
      00009D 85*13 83         [24]  690 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  691 	mov	a,r6
      0000A1 F0               [24]  692 	movx	@dptr,a
                                    693 ;	assignBit
      0000A2 C2 B4            [12]  694 	clr	_P3_4
                                    695 ;	ecen4330_lcd_v3.c:134: }
      0000A4 22               [24]  696 	ret
                                    697 ;------------------------------------------------------------
                                    698 ;Allocation info for local variables in function 'setCursor'
                                    699 ;------------------------------------------------------------
                                    700 ;y                         Allocated with name '_setCursor_PARM_2'
                                    701 ;x                         Allocated to registers 
                                    702 ;------------------------------------------------------------
                                    703 ;	ecen4330_lcd_v3.c:137: void setCursor (uint16_t x, uint16_t y) {
                                    704 ;	-----------------------------------------
                                    705 ;	 function setCursor
                                    706 ;	-----------------------------------------
      0000A5                        707 _setCursor:
      0000A5 85 82*18         [24]  708 	mov	_cursor_x,dpl
      0000A8 85 83*19         [24]  709 	mov	(_cursor_x + 1),dph
                                    710 ;	ecen4330_lcd_v3.c:139: cursor_y = y;
      0000AB 85*00*1A         [24]  711 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85*01*1B         [24]  712 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    713 ;	ecen4330_lcd_v3.c:140: }
      0000B1 22               [24]  714 	ret
                                    715 ;------------------------------------------------------------
                                    716 ;Allocation info for local variables in function 'setTextColor'
                                    717 ;------------------------------------------------------------
                                    718 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    719 ;x                         Allocated to registers 
                                    720 ;------------------------------------------------------------
                                    721 ;	ecen4330_lcd_v3.c:142: void setTextColor (uint16_t x, uint16_t y) {
                                    722 ;	-----------------------------------------
                                    723 ;	 function setTextColor
                                    724 ;	-----------------------------------------
      0000B2                        725 _setTextColor:
      0000B2 85 82*1E         [24]  726 	mov	_textcolor,dpl
      0000B5 85 83*1F         [24]  727 	mov	(_textcolor + 1),dph
                                    728 ;	ecen4330_lcd_v3.c:144: textbgcolor = y;
      0000B8 85*00*20         [24]  729 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85*01*21         [24]  730 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    731 ;	ecen4330_lcd_v3.c:145: }
      0000BE 22               [24]  732 	ret
                                    733 ;------------------------------------------------------------
                                    734 ;Allocation info for local variables in function 'setTextSize'
                                    735 ;------------------------------------------------------------
                                    736 ;s                         Allocated to registers r7 
                                    737 ;------------------------------------------------------------
                                    738 ;	ecen4330_lcd_v3.c:148: void setTextSize (uint8_t s) {
                                    739 ;	-----------------------------------------
                                    740 ;	 function setTextSize
                                    741 ;	-----------------------------------------
      0000BF                        742 _setTextSize:
                                    743 ;	ecen4330_lcd_v3.c:149: if (s > 8) return;
      0000BF E5 82            [12]  744 	mov	a,dpl
      0000C1 FF               [12]  745 	mov	r7,a
      0000C2 24 F7            [12]  746 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  747 	jnc	00102$
      0000C6 22               [24]  748 	ret
      0000C7                        749 00102$:
                                    750 ;	ecen4330_lcd_v3.c:150: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  751 	mov	a,r7
      0000C8 60 06            [24]  752 	jz	00105$
      0000CA 8F 06            [24]  753 	mov	ar6,r7
      0000CC 7F 00            [12]  754 	mov	r7,#0x00
      0000CE 80 04            [24]  755 	sjmp	00106$
      0000D0                        756 00105$:
      0000D0 7E 01            [12]  757 	mov	r6,#0x01
      0000D2 7F 00            [12]  758 	mov	r7,#0x00
      0000D4                        759 00106$:
      0000D4 8E*1C            [24]  760 	mov	_textsize,r6
                                    761 ;	ecen4330_lcd_v3.c:151: }
      0000D6 22               [24]  762 	ret
                                    763 ;------------------------------------------------------------
                                    764 ;Allocation info for local variables in function 'setRotation'
                                    765 ;------------------------------------------------------------
                                    766 ;flag                      Allocated to registers r7 
                                    767 ;------------------------------------------------------------
                                    768 ;	ecen4330_lcd_v3.c:153: void setRotation (uint8_t flag) {
                                    769 ;	-----------------------------------------
                                    770 ;	 function setRotation
                                    771 ;	-----------------------------------------
      0000D7                        772 _setRotation:
                                    773 ;	ecen4330_lcd_v3.c:154: switch(flag) {
      0000D7 E5 82            [12]  774 	mov	a,dpl
      0000D9 FF               [12]  775 	mov	r7,a
      0000DA 24 FC            [12]  776 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  777 	jc	00105$
      0000DE EF               [12]  778 	mov	a,r7
      0000DF 2F               [12]  779 	add	a,r7
                                    780 ;	ecen4330_lcd_v3.c:155: case 0:
      0000E0 90r00rE4         [24]  781 	mov	dptr,#00115$
      0000E3 73               [24]  782 	jmp	@a+dptr
      0000E4                        783 00115$:
      0000E4 80 06            [24]  784 	sjmp	00101$
      0000E6 80 14            [24]  785 	sjmp	00102$
      0000E8 80 22            [24]  786 	sjmp	00103$
      0000EA 80 30            [24]  787 	sjmp	00104$
      0000EC                        788 00101$:
                                    789 ;	ecen4330_lcd_v3.c:156: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  790 	mov	r7,#0x48
                                    791 ;	ecen4330_lcd_v3.c:157: _width = TFTWIDTH;
      0000EE 75*22 F0         [24]  792 	mov	__width,#0xf0
      0000F1 75*23 00         [24]  793 	mov	(__width + 1),#0x00
                                    794 ;	ecen4330_lcd_v3.c:158: _height = TFTHEIGHT;
      0000F4 75*24 F0         [24]  795 	mov	__height,#0xf0
      0000F7 75*25 00         [24]  796 	mov	(__height + 1),#0x00
                                    797 ;	ecen4330_lcd_v3.c:159: break;
                                    798 ;	ecen4330_lcd_v3.c:160: case 1:
      0000FA 80 3E            [24]  799 	sjmp	00106$
      0000FC                        800 00102$:
                                    801 ;	ecen4330_lcd_v3.c:161: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  802 	mov	r7,#0x28
                                    803 ;	ecen4330_lcd_v3.c:162: _width = TFTHEIGHT;
      0000FE 75*22 F0         [24]  804 	mov	__width,#0xf0
      000101 75*23 00         [24]  805 	mov	(__width + 1),#0x00
                                    806 ;	ecen4330_lcd_v3.c:163: _height = TFTWIDTH;
      000104 75*24 F0         [24]  807 	mov	__height,#0xf0
      000107 75*25 00         [24]  808 	mov	(__height + 1),#0x00
                                    809 ;	ecen4330_lcd_v3.c:164: break;
                                    810 ;	ecen4330_lcd_v3.c:165: case 2:
      00010A 80 2E            [24]  811 	sjmp	00106$
      00010C                        812 00103$:
                                    813 ;	ecen4330_lcd_v3.c:166: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  814 	mov	r7,#0x88
                                    815 ;	ecen4330_lcd_v3.c:167: _width = TFTWIDTH;
      00010E 75*22 F0         [24]  816 	mov	__width,#0xf0
      000111 75*23 00         [24]  817 	mov	(__width + 1),#0x00
                                    818 ;	ecen4330_lcd_v3.c:168: _height = TFTHEIGHT;
      000114 75*24 F0         [24]  819 	mov	__height,#0xf0
      000117 75*25 00         [24]  820 	mov	(__height + 1),#0x00
                                    821 ;	ecen4330_lcd_v3.c:169: break;
                                    822 ;	ecen4330_lcd_v3.c:170: case 3:
      00011A 80 1E            [24]  823 	sjmp	00106$
      00011C                        824 00104$:
                                    825 ;	ecen4330_lcd_v3.c:171: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  826 	mov	r7,#0xe8
                                    827 ;	ecen4330_lcd_v3.c:172: _width = TFTHEIGHT;
      00011E 75*22 F0         [24]  828 	mov	__width,#0xf0
      000121 75*23 00         [24]  829 	mov	(__width + 1),#0x00
                                    830 ;	ecen4330_lcd_v3.c:173: _height = TFTWIDTH;
      000124 75*24 F0         [24]  831 	mov	__height,#0xf0
      000127 75*25 00         [24]  832 	mov	(__height + 1),#0x00
                                    833 ;	ecen4330_lcd_v3.c:174: break;
                                    834 ;	ecen4330_lcd_v3.c:175: default:
      00012A 80 0E            [24]  835 	sjmp	00106$
      00012C                        836 00105$:
                                    837 ;	ecen4330_lcd_v3.c:176: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  838 	mov	r7,#0x48
                                    839 ;	ecen4330_lcd_v3.c:177: _width = TFTWIDTH;
      00012E 75*22 F0         [24]  840 	mov	__width,#0xf0
      000131 75*23 00         [24]  841 	mov	(__width + 1),#0x00
                                    842 ;	ecen4330_lcd_v3.c:178: _height = TFTHEIGHT;
      000134 75*24 F0         [24]  843 	mov	__height,#0xf0
      000137 75*25 00         [24]  844 	mov	(__height + 1),#0x00
                                    845 ;	ecen4330_lcd_v3.c:180: }
      00013A                        846 00106$:
                                    847 ;	ecen4330_lcd_v3.c:181: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F*00            [24]  848 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  849 	mov	dpl,#0x36
                                    850 ;	ecen4330_lcd_v3.c:182: }
      00013F 02r00r40         [24]  851 	ljmp	_writeRegister8
                                    852 ;------------------------------------------------------------
                                    853 ;Allocation info for local variables in function 'setAddress'
                                    854 ;------------------------------------------------------------
                                    855 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    856 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    857 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    858 ;x1                        Allocated to registers r6 r7 
                                    859 ;------------------------------------------------------------
                                    860 ;	ecen4330_lcd_v3.c:185: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    861 ;	-----------------------------------------
                                    862 ;	 function setAddress
                                    863 ;	-----------------------------------------
      000142                        864 _setAddress:
      000142 AE 82            [24]  865 	mov	r6,dpl
      000144 AF 83            [24]  866 	mov	r7,dph
                                    867 ;	ecen4330_lcd_v3.c:187: write8Reg(0x2A);
                                    868 ;	assignBit
      000146 C2 B5            [12]  869 	clr	_P3_5
                                    870 ;	assignBit
      000148 D2 B4            [12]  871 	setb	_P3_4
      00014A 85*12 82         [24]  872 	mov	dpl,_lcd_address
      00014D 85*13 83         [24]  873 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  874 	mov	a,#0x2a
      000152 F0               [24]  875 	movx	@dptr,a
                                    876 ;	assignBit
      000153 C2 B4            [12]  877 	clr	_P3_4
                                    878 ;	ecen4330_lcd_v3.c:188: write8Data(x1 >> 8);
                                    879 ;	assignBit
      000155 D2 B5            [12]  880 	setb	_P3_5
                                    881 ;	assignBit
      000157 D2 B4            [12]  882 	setb	_P3_4
      000159 85*12 82         [24]  883 	mov	dpl,_lcd_address
      00015C 85*13 83         [24]  884 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  885 	mov	ar5,r7
      000161 ED               [12]  886 	mov	a,r5
      000162 F0               [24]  887 	movx	@dptr,a
                                    888 ;	assignBit
      000163 C2 B4            [12]  889 	clr	_P3_4
                                    890 ;	ecen4330_lcd_v3.c:189: write8Data(x1);
                                    891 ;	assignBit
      000165 D2 B5            [12]  892 	setb	_P3_5
                                    893 ;	assignBit
      000167 D2 B4            [12]  894 	setb	_P3_4
      000169 85*12 82         [24]  895 	mov	dpl,_lcd_address
      00016C 85*13 83         [24]  896 	mov	dph,(_lcd_address + 1)
      00016F EE               [12]  897 	mov	a,r6
      000170 F0               [24]  898 	movx	@dptr,a
                                    899 ;	assignBit
      000171 C2 B4            [12]  900 	clr	_P3_4
                                    901 ;	ecen4330_lcd_v3.c:190: write8Data(x2 >> 8);
                                    902 ;	assignBit
      000173 D2 B5            [12]  903 	setb	_P3_5
                                    904 ;	assignBit
      000175 D2 B4            [12]  905 	setb	_P3_4
      000177 85*12 82         [24]  906 	mov	dpl,_lcd_address
      00017A 85*13 83         [24]  907 	mov	dph,(_lcd_address + 1)
      00017D E5*03            [12]  908 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24]  909 	movx	@dptr,a
                                    910 ;	assignBit
      000180 C2 B4            [12]  911 	clr	_P3_4
                                    912 ;	ecen4330_lcd_v3.c:191: write8Data(x2);
                                    913 ;	assignBit
      000182 D2 B5            [12]  914 	setb	_P3_5
                                    915 ;	assignBit
      000184 D2 B4            [12]  916 	setb	_P3_4
      000186 85*12 82         [24]  917 	mov	dpl,_lcd_address
      000189 85*13 83         [24]  918 	mov	dph,(_lcd_address + 1)
      00018C E5*02            [12]  919 	mov	a,_setAddress_PARM_3
      00018E F0               [24]  920 	movx	@dptr,a
                                    921 ;	assignBit
      00018F C2 B4            [12]  922 	clr	_P3_4
                                    923 ;	ecen4330_lcd_v3.c:193: write8Reg(0x2B);
                                    924 ;	assignBit
      000191 C2 B5            [12]  925 	clr	_P3_5
                                    926 ;	assignBit
      000193 D2 B4            [12]  927 	setb	_P3_4
      000195 85*12 82         [24]  928 	mov	dpl,_lcd_address
      000198 85*13 83         [24]  929 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12]  930 	mov	a,#0x2b
      00019D F0               [24]  931 	movx	@dptr,a
                                    932 ;	assignBit
      00019E C2 B4            [12]  933 	clr	_P3_4
                                    934 ;	ecen4330_lcd_v3.c:194: write8Data(y1 >> 8);
                                    935 ;	assignBit
      0001A0 D2 B5            [12]  936 	setb	_P3_5
                                    937 ;	assignBit
      0001A2 D2 B4            [12]  938 	setb	_P3_4
      0001A4 85*12 82         [24]  939 	mov	dpl,_lcd_address
      0001A7 85*13 83         [24]  940 	mov	dph,(_lcd_address + 1)
      0001AA E5*01            [12]  941 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24]  942 	movx	@dptr,a
                                    943 ;	assignBit
      0001AD C2 B4            [12]  944 	clr	_P3_4
                                    945 ;	ecen4330_lcd_v3.c:195: write8Data(y1);
                                    946 ;	assignBit
      0001AF D2 B5            [12]  947 	setb	_P3_5
                                    948 ;	assignBit
      0001B1 D2 B4            [12]  949 	setb	_P3_4
      0001B3 85*12 82         [24]  950 	mov	dpl,_lcd_address
      0001B6 85*13 83         [24]  951 	mov	dph,(_lcd_address + 1)
      0001B9 E5*00            [12]  952 	mov	a,_setAddress_PARM_2
      0001BB F0               [24]  953 	movx	@dptr,a
                                    954 ;	assignBit
      0001BC C2 B4            [12]  955 	clr	_P3_4
                                    956 ;	ecen4330_lcd_v3.c:196: write8Data(y2 >> 8);
                                    957 ;	assignBit
      0001BE D2 B5            [12]  958 	setb	_P3_5
                                    959 ;	assignBit
      0001C0 D2 B4            [12]  960 	setb	_P3_4
      0001C2 85*12 82         [24]  961 	mov	dpl,_lcd_address
      0001C5 85*13 83         [24]  962 	mov	dph,(_lcd_address + 1)
      0001C8 E5*05            [12]  963 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24]  964 	movx	@dptr,a
                                    965 ;	assignBit
      0001CB C2 B4            [12]  966 	clr	_P3_4
                                    967 ;	ecen4330_lcd_v3.c:197: write8Data(y2);
                                    968 ;	assignBit
      0001CD D2 B5            [12]  969 	setb	_P3_5
                                    970 ;	assignBit
      0001CF D2 B4            [12]  971 	setb	_P3_4
      0001D1 85*12 82         [24]  972 	mov	dpl,_lcd_address
      0001D4 85*13 83         [24]  973 	mov	dph,(_lcd_address + 1)
      0001D7 E5*04            [12]  974 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24]  975 	movx	@dptr,a
                                    976 ;	assignBit
      0001DA C2 B4            [12]  977 	clr	_P3_4
                                    978 ;	ecen4330_lcd_v3.c:200: }
      0001DC 22               [24]  979 	ret
                                    980 ;------------------------------------------------------------
                                    981 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                    982 ;------------------------------------------------------------
                                    983 ;	ecen4330_lcd_v3.c:202: void TFT_LCD_INIT (void) {
                                    984 ;	-----------------------------------------
                                    985 ;	 function TFT_LCD_INIT
                                    986 ;	-----------------------------------------
      0001DD                        987 _TFT_LCD_INIT:
                                    988 ;	ecen4330_lcd_v3.c:205: _width = TFTWIDTH;
      0001DD 75*22 F0         [24]  989 	mov	__width,#0xf0
      0001E0 75*23 00         [24]  990 	mov	(__width + 1),#0x00
                                    991 ;	ecen4330_lcd_v3.c:206: _height = TFTHEIGHT;
      0001E3 75*24 F0         [24]  992 	mov	__height,#0xf0
      0001E6 75*25 00         [24]  993 	mov	(__height + 1),#0x00
                                    994 ;	ecen4330_lcd_v3.c:209: IOM = 0;
                                    995 ;	assignBit
      0001E9 C2 B4            [12]  996 	clr	_P3_4
                                    997 ;	ecen4330_lcd_v3.c:211: CD = 1;
                                    998 ;	assignBit
      0001EB D2 B5            [12]  999 	setb	_P3_5
                                   1000 ;	ecen4330_lcd_v3.c:213: write8Reg(0x00);
                                   1001 ;	assignBit
      0001ED C2 B5            [12] 1002 	clr	_P3_5
                                   1003 ;	assignBit
      0001EF D2 B4            [12] 1004 	setb	_P3_4
      0001F1 85*12 82         [24] 1005 	mov	dpl,_lcd_address
      0001F4 85*13 83         [24] 1006 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1007 	clr	a
      0001F8 F0               [24] 1008 	movx	@dptr,a
                                   1009 ;	assignBit
      0001F9 C2 B4            [12] 1010 	clr	_P3_4
                                   1011 ;	ecen4330_lcd_v3.c:214: write8Data(0x00);
                                   1012 ;	assignBit
      0001FB D2 B5            [12] 1013 	setb	_P3_5
                                   1014 ;	assignBit
      0001FD D2 B4            [12] 1015 	setb	_P3_4
      0001FF 85*12 82         [24] 1016 	mov	dpl,_lcd_address
      000202 85*13 83         [24] 1017 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1018 	clr	a
      000206 F0               [24] 1019 	movx	@dptr,a
                                   1020 ;	assignBit
      000207 C2 B4            [12] 1021 	clr	_P3_4
                                   1022 ;	ecen4330_lcd_v3.c:215: write8Data(0x00);
                                   1023 ;	assignBit
      000209 D2 B5            [12] 1024 	setb	_P3_5
                                   1025 ;	assignBit
      00020B D2 B4            [12] 1026 	setb	_P3_4
      00020D 85*12 82         [24] 1027 	mov	dpl,_lcd_address
      000210 85*13 83         [24] 1028 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1029 	clr	a
      000214 F0               [24] 1030 	movx	@dptr,a
                                   1031 ;	assignBit
      000215 C2 B4            [12] 1032 	clr	_P3_4
                                   1033 ;	ecen4330_lcd_v3.c:216: write8Data(0x00);
                                   1034 ;	assignBit
      000217 D2 B5            [12] 1035 	setb	_P3_5
                                   1036 ;	assignBit
      000219 D2 B4            [12] 1037 	setb	_P3_4
      00021B 85*12 82         [24] 1038 	mov	dpl,_lcd_address
      00021E 85*13 83         [24] 1039 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1040 	clr	a
      000222 F0               [24] 1041 	movx	@dptr,a
                                   1042 ;	assignBit
      000223 C2 B4            [12] 1043 	clr	_P3_4
                                   1044 ;	ecen4330_lcd_v3.c:218: delay(200);
      000225 90 00 C8         [24] 1045 	mov	dptr,#0x00c8
      000228 12r00r10         [24] 1046 	lcall	_delay
                                   1047 ;	ecen4330_lcd_v3.c:222: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75*00 00         [24] 1048 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1049 	mov	dpl,#0x01
      000231 12r00r40         [24] 1050 	lcall	_writeRegister8
                                   1051 ;	ecen4330_lcd_v3.c:223: delay(50);
      000234 90 00 32         [24] 1052 	mov	dptr,#0x0032
      000237 12r00r10         [24] 1053 	lcall	_delay
                                   1054 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75*00 00         [24] 1055 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1056 	mov	dpl,#0x28
      000240 12r00r40         [24] 1057 	lcall	_writeRegister8
                                   1058 ;	ecen4330_lcd_v3.c:225: delay(10);
      000243 90 00 0A         [24] 1059 	mov	dptr,#0x000a
      000246 12r00r10         [24] 1060 	lcall	_delay
                                   1061 ;	ecen4330_lcd_v3.c:227: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75*00 23         [24] 1062 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1063 	mov	dpl,#0xc0
      00024F 12r00r40         [24] 1064 	lcall	_writeRegister8
                                   1065 ;	ecen4330_lcd_v3.c:228: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75*00 11         [24] 1066 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1067 	mov	dpl,#0xc1
      000258 12r00r40         [24] 1068 	lcall	_writeRegister8
                                   1069 ;	ecen4330_lcd_v3.c:229: write8Reg(ILI9341_VCOMCONTROL1);
                                   1070 ;	assignBit
      00025B C2 B5            [12] 1071 	clr	_P3_5
                                   1072 ;	assignBit
      00025D D2 B4            [12] 1073 	setb	_P3_4
      00025F 85*12 82         [24] 1074 	mov	dpl,_lcd_address
      000262 85*13 83         [24] 1075 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1076 	mov	a,#0xc5
      000267 F0               [24] 1077 	movx	@dptr,a
                                   1078 ;	assignBit
      000268 C2 B4            [12] 1079 	clr	_P3_4
                                   1080 ;	ecen4330_lcd_v3.c:230: write8Data(0x3d);
                                   1081 ;	assignBit
      00026A D2 B5            [12] 1082 	setb	_P3_5
                                   1083 ;	assignBit
      00026C D2 B4            [12] 1084 	setb	_P3_4
      00026E 85*12 82         [24] 1085 	mov	dpl,_lcd_address
      000271 85*13 83         [24] 1086 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1087 	mov	a,#0x3d
      000276 F0               [24] 1088 	movx	@dptr,a
                                   1089 ;	assignBit
      000277 C2 B4            [12] 1090 	clr	_P3_4
                                   1091 ;	ecen4330_lcd_v3.c:231: write8Data(0x30);
                                   1092 ;	assignBit
      000279 D2 B5            [12] 1093 	setb	_P3_5
                                   1094 ;	assignBit
      00027B D2 B4            [12] 1095 	setb	_P3_4
      00027D 85*12 82         [24] 1096 	mov	dpl,_lcd_address
      000280 85*13 83         [24] 1097 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1098 	mov	a,#0x30
      000285 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	assignBit
      000286 C2 B4            [12] 1101 	clr	_P3_4
                                   1102 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75*00 AA         [24] 1103 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1104 	mov	dpl,#0xc7
      00028E 12r00r40         [24] 1105 	lcall	_writeRegister8
                                   1106 ;	ecen4330_lcd_v3.c:233: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75*00 88         [24] 1107 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1108 	mov	dpl,#0x36
      000297 12r00r40         [24] 1109 	lcall	_writeRegister8
                                   1110 ;	ecen4330_lcd_v3.c:234: write8Reg(ILI9341_PIXELFORMAT);
                                   1111 ;	assignBit
      00029A C2 B5            [12] 1112 	clr	_P3_5
                                   1113 ;	assignBit
      00029C D2 B4            [12] 1114 	setb	_P3_4
      00029E 85*12 82         [24] 1115 	mov	dpl,_lcd_address
      0002A1 85*13 83         [24] 1116 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1117 	mov	a,#0x3a
      0002A6 F0               [24] 1118 	movx	@dptr,a
                                   1119 ;	assignBit
      0002A7 C2 B4            [12] 1120 	clr	_P3_4
                                   1121 ;	ecen4330_lcd_v3.c:235: write8Data(0x55);write8Data(0x00);
                                   1122 ;	assignBit
      0002A9 D2 B5            [12] 1123 	setb	_P3_5
                                   1124 ;	assignBit
      0002AB D2 B4            [12] 1125 	setb	_P3_4
      0002AD 85*12 82         [24] 1126 	mov	dpl,_lcd_address
      0002B0 85*13 83         [24] 1127 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1128 	mov	a,#0x55
      0002B5 F0               [24] 1129 	movx	@dptr,a
                                   1130 ;	assignBit
      0002B6 C2 B4            [12] 1131 	clr	_P3_4
                                   1132 ;	assignBit
      0002B8 D2 B5            [12] 1133 	setb	_P3_5
                                   1134 ;	assignBit
      0002BA D2 B4            [12] 1135 	setb	_P3_4
      0002BC 85*12 82         [24] 1136 	mov	dpl,_lcd_address
      0002BF 85*13 83         [24] 1137 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1138 	clr	a
      0002C3 F0               [24] 1139 	movx	@dptr,a
                                   1140 ;	assignBit
      0002C4 C2 B4            [12] 1141 	clr	_P3_4
                                   1142 ;	ecen4330_lcd_v3.c:236: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75*00 1B         [24] 1143 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75*01 00         [24] 1144 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1145 	mov	dptr,#0x00b1
      0002CF 12r00r60         [24] 1146 	lcall	_writeRegister16
                                   1147 ;	ecen4330_lcd_v3.c:238: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75*00 07         [24] 1148 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1149 	mov	dpl,#0xb7
      0002D8 12r00r40         [24] 1150 	lcall	_writeRegister8
                                   1151 ;	ecen4330_lcd_v3.c:241: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75*00 00         [24] 1152 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1153 	mov	dpl,#0x11
      0002E1 12r00r40         [24] 1154 	lcall	_writeRegister8
                                   1155 ;	ecen4330_lcd_v3.c:242: delay(150);
      0002E4 90 00 96         [24] 1156 	mov	dptr,#0x0096
      0002E7 12r00r10         [24] 1157 	lcall	_delay
                                   1158 ;	ecen4330_lcd_v3.c:243: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75*00 00         [24] 1159 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1160 	mov	dpl,#0x29
      0002F0 12r00r40         [24] 1161 	lcall	_writeRegister8
                                   1162 ;	ecen4330_lcd_v3.c:244: delay(500);
      0002F3 90 01 F4         [24] 1163 	mov	dptr,#0x01f4
      0002F6 12r00r10         [24] 1164 	lcall	_delay
                                   1165 ;	ecen4330_lcd_v3.c:245: setAddress(0,0,_width-1,_height-1);
      0002F9 AE*22            [24] 1166 	mov	r6,__width
      0002FB AF*23            [24] 1167 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1168 	dec	r6
      0002FE BE FF 01         [24] 1169 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1170 	dec	r7
      000302                       1171 00103$:
      000302 8E*02            [24] 1172 	mov	_setAddress_PARM_3,r6
      000304 8F*03            [24] 1173 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE*24            [24] 1174 	mov	r6,__height
      000308 AF*25            [24] 1175 	mov	r7,(__height + 1)
      00030A 1E               [12] 1176 	dec	r6
      00030B BE FF 01         [24] 1177 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1178 	dec	r7
      00030F                       1179 00104$:
      00030F 8E*04            [24] 1180 	mov	_setAddress_PARM_4,r6
      000311 8F*05            [24] 1181 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1182 	clr	a
      000314 F5*00            [12] 1183 	mov	_setAddress_PARM_2,a
      000316 F5*01            [12] 1184 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1185 	mov	dptr,#0x0000
                                   1186 ;	ecen4330_lcd_v3.c:249: }
      00031B 02r01r42         [24] 1187 	ljmp	_setAddress
                                   1188 ;------------------------------------------------------------
                                   1189 ;Allocation info for local variables in function 'drawPixel'
                                   1190 ;------------------------------------------------------------
                                   1191 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1192 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1193 ;x3                        Allocated to registers r6 r7 
                                   1194 ;------------------------------------------------------------
                                   1195 ;	ecen4330_lcd_v3.c:251: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1196 ;	-----------------------------------------
                                   1197 ;	 function drawPixel
                                   1198 ;	-----------------------------------------
      00031E                       1199 _drawPixel:
      00031E AE 82            [24] 1200 	mov	r6,dpl
      000320 AF 83            [24] 1201 	mov	r7,dph
                                   1202 ;	ecen4330_lcd_v3.c:259: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1203 	mov	ar4,r6
      000324 8F 05            [24] 1204 	mov	ar5,r7
      000326 0C               [12] 1205 	inc	r4
      000327 BC 00 01         [24] 1206 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1207 	inc	r5
      00032B                       1208 00103$:
      00032B 8C*02            [24] 1209 	mov	_setAddress_PARM_3,r4
      00032D 8D*03            [24] 1210 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC*26            [24] 1211 	mov	r4,_drawPixel_PARM_2
      000331 AD*27            [24] 1212 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1213 	inc	r4
      000334 BC 00 01         [24] 1214 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1215 	inc	r5
      000338                       1216 00104$:
      000338 8C*04            [24] 1217 	mov	_setAddress_PARM_4,r4
      00033A 8D*05            [24] 1218 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85*26*00         [24] 1219 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85*27*01         [24] 1220 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1221 	mov	dpl,r6
      000344 8F 83            [24] 1222 	mov	dph,r7
      000346 12r01r42         [24] 1223 	lcall	_setAddress
                                   1224 ;	ecen4330_lcd_v3.c:263: CD=0; write8(0x2C);
                                   1225 ;	assignBit
      000349 C2 B5            [12] 1226 	clr	_P3_5
                                   1227 ;	assignBit
      00034B D2 B4            [12] 1228 	setb	_P3_4
      00034D 85*12 82         [24] 1229 	mov	dpl,_lcd_address
      000350 85*13 83         [24] 1230 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1231 	mov	a,#0x2c
      000355 F0               [24] 1232 	movx	@dptr,a
                                   1233 ;	assignBit
      000356 C2 B4            [12] 1234 	clr	_P3_4
                                   1235 ;	ecen4330_lcd_v3.c:265: CD = 1;
                                   1236 ;	assignBit
      000358 D2 B5            [12] 1237 	setb	_P3_5
                                   1238 ;	ecen4330_lcd_v3.c:266: write8(color1>>8);write8(color1);
                                   1239 ;	assignBit
      00035A D2 B4            [12] 1240 	setb	_P3_4
      00035C 85*12 82         [24] 1241 	mov	dpl,_lcd_address
      00035F 85*13 83         [24] 1242 	mov	dph,(_lcd_address + 1)
      000362 E5*29            [12] 1243 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1244 	movx	@dptr,a
                                   1245 ;	assignBit
      000365 C2 B4            [12] 1246 	clr	_P3_4
                                   1247 ;	assignBit
      000367 D2 B4            [12] 1248 	setb	_P3_4
      000369 85*12 82         [24] 1249 	mov	dpl,_lcd_address
      00036C 85*13 83         [24] 1250 	mov	dph,(_lcd_address + 1)
      00036F E5*28            [12] 1251 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1252 	movx	@dptr,a
                                   1253 ;	assignBit
      000372 C2 B4            [12] 1254 	clr	_P3_4
                                   1255 ;	ecen4330_lcd_v3.c:268: }
      000374 22               [24] 1256 	ret
                                   1257 ;------------------------------------------------------------
                                   1258 ;Allocation info for local variables in function 'drawCircle'
                                   1259 ;------------------------------------------------------------
                                   1260 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1261 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1262 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1263 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1264 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1265 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1266 ;ddF_y                     Allocated to registers r2 r3 
                                   1267 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1268 ;y                         Allocated to registers r0 r1 
                                   1269 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1270 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1271 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1272 ;------------------------------------------------------------
                                   1273 ;	ecen4330_lcd_v3.c:271: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1274 ;	-----------------------------------------
                                   1275 ;	 function drawCircle
                                   1276 ;	-----------------------------------------
      000375                       1277 _drawCircle:
      000375 85 82*30         [24] 1278 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83*31         [24] 1279 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1280 ;	ecen4330_lcd_v3.c:272: int f = 1 - r;
      00037B 74 01            [12] 1281 	mov	a,#0x01
      00037D C3               [12] 1282 	clr	c
      00037E 95*2C            [12] 1283 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1284 	mov	r4,a
      000381 E4               [12] 1285 	clr	a
      000382 95*2D            [12] 1286 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1287 	mov	r5,a
      000385 8C*32            [24] 1288 	mov	_drawCircle_f_65536_104,r4
      000387 8D*33            [24] 1289 	mov	(_drawCircle_f_65536_104 + 1),r5
                                   1290 ;	ecen4330_lcd_v3.c:274: int ddF_y = -2 * r;
      000389 85*2C*00         [24] 1291 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00038C 85*2D*01         [24] 1292 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00038F 90 FF FE         [24] 1293 	mov	dptr,#0xfffe
      000392 12r00r00         [24] 1294 	lcall	__mulint
      000395 AA 82            [24] 1295 	mov	r2,dpl
      000397 AB 83            [24] 1296 	mov	r3,dph
                                   1297 ;	ecen4330_lcd_v3.c:276: int y = r;
      000399 A8*2C            [24] 1298 	mov	r0,_drawCircle_PARM_3
      00039B A9*2D            [24] 1299 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   1300 ;	ecen4330_lcd_v3.c:278: drawPixel(x0  , y0+r, color);
      00039D E5*2C            [12] 1301 	mov	a,_drawCircle_PARM_3
      00039F 25*2A            [12] 1302 	add	a,_drawCircle_PARM_2
      0003A1 F5*26            [12] 1303 	mov	_drawPixel_PARM_2,a
      0003A3 E5*2D            [12] 1304 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A5 35*2B            [12] 1305 	addc	a,(_drawCircle_PARM_2 + 1)
      0003A7 F5*27            [12] 1306 	mov	(_drawPixel_PARM_2 + 1),a
      0003A9 85*2E*28         [24] 1307 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003AC 85*2F*29         [24] 1308 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003AF 85*30 82         [24] 1309 	mov	dpl,_drawCircle_x0_65536_103
      0003B2 85*31 83         [24] 1310 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B5 C0 03            [24] 1311 	push	ar3
      0003B7 C0 02            [24] 1312 	push	ar2
      0003B9 C0 01            [24] 1313 	push	ar1
      0003BB C0 00            [24] 1314 	push	ar0
      0003BD 12r03r1E         [24] 1315 	lcall	_drawPixel
                                   1316 ;	ecen4330_lcd_v3.c:279: drawPixel(x0  , y0-r, color);
      0003C0 E5*2A            [12] 1317 	mov	a,_drawCircle_PARM_2
      0003C2 C3               [12] 1318 	clr	c
      0003C3 95*2C            [12] 1319 	subb	a,_drawCircle_PARM_3
      0003C5 F5*26            [12] 1320 	mov	_drawPixel_PARM_2,a
      0003C7 E5*2B            [12] 1321 	mov	a,(_drawCircle_PARM_2 + 1)
      0003C9 95*2D            [12] 1322 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CB F5*27            [12] 1323 	mov	(_drawPixel_PARM_2 + 1),a
      0003CD 85*2E*28         [24] 1324 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D0 85*2F*29         [24] 1325 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D3 85*30 82         [24] 1326 	mov	dpl,_drawCircle_x0_65536_103
      0003D6 85*31 83         [24] 1327 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003D9 12r03r1E         [24] 1328 	lcall	_drawPixel
                                   1329 ;	ecen4330_lcd_v3.c:280: drawPixel(x0+r, y0  , color);
      0003DC E5*2C            [12] 1330 	mov	a,_drawCircle_PARM_3
      0003DE 25*30            [12] 1331 	add	a,_drawCircle_x0_65536_103
      0003E0 F5 82            [12] 1332 	mov	dpl,a
      0003E2 E5*2D            [12] 1333 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E4 35*31            [12] 1334 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003E6 F5 83            [12] 1335 	mov	dph,a
      0003E8 85*2A*26         [24] 1336 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EB 85*2B*27         [24] 1337 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003EE 85*2E*28         [24] 1338 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F1 85*2F*29         [24] 1339 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F4 12r03r1E         [24] 1340 	lcall	_drawPixel
                                   1341 ;	ecen4330_lcd_v3.c:281: drawPixel(x0-r, y0  , color);
      0003F7 E5*30            [12] 1342 	mov	a,_drawCircle_x0_65536_103
      0003F9 C3               [12] 1343 	clr	c
      0003FA 95*2C            [12] 1344 	subb	a,_drawCircle_PARM_3
      0003FC F5 82            [12] 1345 	mov	dpl,a
      0003FE E5*31            [12] 1346 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000400 95*2D            [12] 1347 	subb	a,(_drawCircle_PARM_3 + 1)
      000402 F5 83            [12] 1348 	mov	dph,a
      000404 85*2A*26         [24] 1349 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000407 85*2B*27         [24] 1350 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040A 85*2E*28         [24] 1351 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00040D 85*2F*29         [24] 1352 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000410 12r03r1E         [24] 1353 	lcall	_drawPixel
      000413 D0 00            [24] 1354 	pop	ar0
      000415 D0 01            [24] 1355 	pop	ar1
      000417 D0 02            [24] 1356 	pop	ar2
      000419 D0 03            [24] 1357 	pop	ar3
                                   1358 ;	ecen4330_lcd_v3.c:283: while (x<y) {
      00041B E4               [12] 1359 	clr	a
      00041C F5*36            [12] 1360 	mov	_drawCircle_x_65536_104,a
      00041E F5*37            [12] 1361 	mov	(_drawCircle_x_65536_104 + 1),a
      000420 75*34 01         [24] 1362 	mov	_drawCircle_ddF_x_65536_104,#0x01
                                   1363 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_104 + 1),#0x00
      000423 F5*35            [12] 1364 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
      000425                       1365 00103$:
      000425 C3               [12] 1366 	clr	c
      000426 E5*36            [12] 1367 	mov	a,_drawCircle_x_65536_104
      000428 98               [12] 1368 	subb	a,r0
      000429 E5*37            [12] 1369 	mov	a,(_drawCircle_x_65536_104 + 1)
      00042B 64 80            [12] 1370 	xrl	a,#0x80
      00042D 89 F0            [24] 1371 	mov	b,r1
      00042F 63 F0 80         [24] 1372 	xrl	b,#0x80
      000432 95 F0            [12] 1373 	subb	a,b
      000434 40 01            [24] 1374 	jc	00121$
      000436 22               [24] 1375 	ret
      000437                       1376 00121$:
                                   1377 ;	ecen4330_lcd_v3.c:284: if (f >= 0) {
      000437 E5*33            [12] 1378 	mov	a,(_drawCircle_f_65536_104 + 1)
      000439 20 E7 16         [24] 1379 	jb	acc.7,00102$
                                   1380 ;	ecen4330_lcd_v3.c:285: y--;
      00043C 18               [12] 1381 	dec	r0
      00043D B8 FF 01         [24] 1382 	cjne	r0,#0xff,00123$
      000440 19               [12] 1383 	dec	r1
      000441                       1384 00123$:
                                   1385 ;	ecen4330_lcd_v3.c:286: ddF_y += 2;
      000441 74 02            [12] 1386 	mov	a,#0x02
      000443 2A               [12] 1387 	add	a,r2
      000444 FA               [12] 1388 	mov	r2,a
      000445 E4               [12] 1389 	clr	a
      000446 3B               [12] 1390 	addc	a,r3
      000447 FB               [12] 1391 	mov	r3,a
                                   1392 ;	ecen4330_lcd_v3.c:287: f += ddF_y;
      000448 EA               [12] 1393 	mov	a,r2
      000449 25*32            [12] 1394 	add	a,_drawCircle_f_65536_104
      00044B F5*32            [12] 1395 	mov	_drawCircle_f_65536_104,a
      00044D EB               [12] 1396 	mov	a,r3
      00044E 35*33            [12] 1397 	addc	a,(_drawCircle_f_65536_104 + 1)
      000450 F5*33            [12] 1398 	mov	(_drawCircle_f_65536_104 + 1),a
      000452                       1399 00102$:
                                   1400 ;	ecen4330_lcd_v3.c:289: x++;
      000452 C0 02            [24] 1401 	push	ar2
      000454 C0 03            [24] 1402 	push	ar3
      000456 05*36            [12] 1403 	inc	_drawCircle_x_65536_104
      000458 E4               [12] 1404 	clr	a
      000459 B5*36 02         [24] 1405 	cjne	a,_drawCircle_x_65536_104,00124$
      00045C 05*37            [12] 1406 	inc	(_drawCircle_x_65536_104 + 1)
      00045E                       1407 00124$:
                                   1408 ;	ecen4330_lcd_v3.c:290: ddF_x += 2;
      00045E 74 02            [12] 1409 	mov	a,#0x02
      000460 25*34            [12] 1410 	add	a,_drawCircle_ddF_x_65536_104
      000462 F5*34            [12] 1411 	mov	_drawCircle_ddF_x_65536_104,a
      000464 E4               [12] 1412 	clr	a
      000465 35*35            [12] 1413 	addc	a,(_drawCircle_ddF_x_65536_104 + 1)
      000467 F5*35            [12] 1414 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
                                   1415 ;	ecen4330_lcd_v3.c:291: f += ddF_x;
      000469 E5*34            [12] 1416 	mov	a,_drawCircle_ddF_x_65536_104
      00046B 25*32            [12] 1417 	add	a,_drawCircle_f_65536_104
      00046D F5*32            [12] 1418 	mov	_drawCircle_f_65536_104,a
      00046F E5*35            [12] 1419 	mov	a,(_drawCircle_ddF_x_65536_104 + 1)
      000471 35*33            [12] 1420 	addc	a,(_drawCircle_f_65536_104 + 1)
      000473 F5*33            [12] 1421 	mov	(_drawCircle_f_65536_104 + 1),a
                                   1422 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 + x, y0 + y, color);
      000475 AC*30            [24] 1423 	mov	r4,_drawCircle_x0_65536_103
      000477 AD*31            [24] 1424 	mov	r5,(_drawCircle_x0_65536_103 + 1)
      000479 E5*36            [12] 1425 	mov	a,_drawCircle_x_65536_104
      00047B 2C               [12] 1426 	add	a,r4
      00047C FE               [12] 1427 	mov	r6,a
      00047D E5*37            [12] 1428 	mov	a,(_drawCircle_x_65536_104 + 1)
      00047F 3D               [12] 1429 	addc	a,r5
      000480 FF               [12] 1430 	mov	r7,a
      000481 8E*38            [24] 1431 	mov	_drawCircle_sloc0_1_0,r6
      000483 8F*39            [24] 1432 	mov	(_drawCircle_sloc0_1_0 + 1),r7
      000485 AA*2A            [24] 1433 	mov	r2,_drawCircle_PARM_2
      000487 AB*2B            [24] 1434 	mov	r3,(_drawCircle_PARM_2 + 1)
      000489 E8               [12] 1435 	mov	a,r0
      00048A 2A               [12] 1436 	add	a,r2
      00048B FE               [12] 1437 	mov	r6,a
      00048C E9               [12] 1438 	mov	a,r1
      00048D 3B               [12] 1439 	addc	a,r3
      00048E FF               [12] 1440 	mov	r7,a
      00048F 8E*3A            [24] 1441 	mov	_drawCircle_sloc1_1_0,r6
      000491 8F*3B            [24] 1442 	mov	(_drawCircle_sloc1_1_0 + 1),r7
      000493 85*3A*26         [24] 1443 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      000496 85*3B*27         [24] 1444 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      000499 85*2E*28         [24] 1445 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00049C 85*2F*29         [24] 1446 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00049F 85*38 82         [24] 1447 	mov	dpl,_drawCircle_sloc0_1_0
      0004A2 85*39 83         [24] 1448 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      0004A5 C0 05            [24] 1449 	push	ar5
      0004A7 C0 04            [24] 1450 	push	ar4
      0004A9 C0 03            [24] 1451 	push	ar3
      0004AB C0 02            [24] 1452 	push	ar2
      0004AD C0 01            [24] 1453 	push	ar1
      0004AF C0 00            [24] 1454 	push	ar0
      0004B1 12r03r1E         [24] 1455 	lcall	_drawPixel
      0004B4 D0 00            [24] 1456 	pop	ar0
      0004B6 D0 01            [24] 1457 	pop	ar1
      0004B8 D0 02            [24] 1458 	pop	ar2
      0004BA D0 03            [24] 1459 	pop	ar3
      0004BC D0 04            [24] 1460 	pop	ar4
      0004BE D0 05            [24] 1461 	pop	ar5
                                   1462 ;	ecen4330_lcd_v3.c:294: drawPixel(x0 - x, y0 + y, color);
      0004C0 EC               [12] 1463 	mov	a,r4
      0004C1 C3               [12] 1464 	clr	c
      0004C2 95*36            [12] 1465 	subb	a,_drawCircle_x_65536_104
      0004C4 FE               [12] 1466 	mov	r6,a
      0004C5 ED               [12] 1467 	mov	a,r5
      0004C6 95*37            [12] 1468 	subb	a,(_drawCircle_x_65536_104 + 1)
      0004C8 FF               [12] 1469 	mov	r7,a
      0004C9 8E*3C            [24] 1470 	mov	_drawCircle_sloc2_1_0,r6
      0004CB 8F*3D            [24] 1471 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      0004CD 85*3A*26         [24] 1472 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      0004D0 85*3B*27         [24] 1473 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      0004D3 85*2E*28         [24] 1474 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004D6 85*2F*29         [24] 1475 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004D9 85*3C 82         [24] 1476 	mov	dpl,_drawCircle_sloc2_1_0
      0004DC 85*3D 83         [24] 1477 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0004DF C0 05            [24] 1478 	push	ar5
      0004E1 C0 04            [24] 1479 	push	ar4
      0004E3 C0 03            [24] 1480 	push	ar3
      0004E5 C0 02            [24] 1481 	push	ar2
      0004E7 C0 01            [24] 1482 	push	ar1
      0004E9 C0 00            [24] 1483 	push	ar0
      0004EB 12r03r1E         [24] 1484 	lcall	_drawPixel
      0004EE D0 00            [24] 1485 	pop	ar0
      0004F0 D0 01            [24] 1486 	pop	ar1
      0004F2 D0 02            [24] 1487 	pop	ar2
      0004F4 D0 03            [24] 1488 	pop	ar3
      0004F6 D0 04            [24] 1489 	pop	ar4
      0004F8 D0 05            [24] 1490 	pop	ar5
                                   1491 ;	ecen4330_lcd_v3.c:295: drawPixel(x0 + x, y0 - y, color);
      0004FA EA               [12] 1492 	mov	a,r2
      0004FB C3               [12] 1493 	clr	c
      0004FC 98               [12] 1494 	subb	a,r0
      0004FD FE               [12] 1495 	mov	r6,a
      0004FE EB               [12] 1496 	mov	a,r3
      0004FF 99               [12] 1497 	subb	a,r1
      000500 FF               [12] 1498 	mov	r7,a
      000501 8E*26            [24] 1499 	mov	_drawPixel_PARM_2,r6
      000503 8F*27            [24] 1500 	mov	(_drawPixel_PARM_2 + 1),r7
      000505 85*2E*28         [24] 1501 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000508 85*2F*29         [24] 1502 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00050B 85*38 82         [24] 1503 	mov	dpl,_drawCircle_sloc0_1_0
      00050E 85*39 83         [24] 1504 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      000511 C0 07            [24] 1505 	push	ar7
      000513 C0 06            [24] 1506 	push	ar6
      000515 C0 05            [24] 1507 	push	ar5
      000517 C0 04            [24] 1508 	push	ar4
      000519 C0 03            [24] 1509 	push	ar3
      00051B C0 02            [24] 1510 	push	ar2
      00051D C0 01            [24] 1511 	push	ar1
      00051F C0 00            [24] 1512 	push	ar0
      000521 12r03r1E         [24] 1513 	lcall	_drawPixel
      000524 D0 00            [24] 1514 	pop	ar0
      000526 D0 01            [24] 1515 	pop	ar1
      000528 D0 02            [24] 1516 	pop	ar2
      00052A D0 03            [24] 1517 	pop	ar3
      00052C D0 04            [24] 1518 	pop	ar4
      00052E D0 05            [24] 1519 	pop	ar5
      000530 D0 06            [24] 1520 	pop	ar6
      000532 D0 07            [24] 1521 	pop	ar7
                                   1522 ;	ecen4330_lcd_v3.c:296: drawPixel(x0 - x, y0 - y, color);
      000534 8E*26            [24] 1523 	mov	_drawPixel_PARM_2,r6
      000536 8F*27            [24] 1524 	mov	(_drawPixel_PARM_2 + 1),r7
      000538 85*2E*28         [24] 1525 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00053B 85*2F*29         [24] 1526 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00053E 85*3C 82         [24] 1527 	mov	dpl,_drawCircle_sloc2_1_0
      000541 85*3D 83         [24] 1528 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000544 C0 05            [24] 1529 	push	ar5
      000546 C0 04            [24] 1530 	push	ar4
      000548 C0 03            [24] 1531 	push	ar3
      00054A C0 02            [24] 1532 	push	ar2
      00054C C0 01            [24] 1533 	push	ar1
      00054E C0 00            [24] 1534 	push	ar0
      000550 12r03r1E         [24] 1535 	lcall	_drawPixel
      000553 D0 00            [24] 1536 	pop	ar0
      000555 D0 01            [24] 1537 	pop	ar1
      000557 D0 02            [24] 1538 	pop	ar2
      000559 D0 03            [24] 1539 	pop	ar3
      00055B D0 04            [24] 1540 	pop	ar4
      00055D D0 05            [24] 1541 	pop	ar5
                                   1542 ;	ecen4330_lcd_v3.c:297: drawPixel(x0 + y, y0 + x, color);
      00055F E8               [12] 1543 	mov	a,r0
      000560 2C               [12] 1544 	add	a,r4
      000561 FE               [12] 1545 	mov	r6,a
      000562 E9               [12] 1546 	mov	a,r1
      000563 3D               [12] 1547 	addc	a,r5
      000564 FF               [12] 1548 	mov	r7,a
      000565 8E*3C            [24] 1549 	mov	_drawCircle_sloc2_1_0,r6
      000567 8F*3D            [24] 1550 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      000569 E5*36            [12] 1551 	mov	a,_drawCircle_x_65536_104
      00056B 2A               [12] 1552 	add	a,r2
      00056C FE               [12] 1553 	mov	r6,a
      00056D E5*37            [12] 1554 	mov	a,(_drawCircle_x_65536_104 + 1)
      00056F 3B               [12] 1555 	addc	a,r3
      000570 FF               [12] 1556 	mov	r7,a
      000571 8E*26            [24] 1557 	mov	_drawPixel_PARM_2,r6
      000573 8F*27            [24] 1558 	mov	(_drawPixel_PARM_2 + 1),r7
      000575 85*2E*28         [24] 1559 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000578 85*2F*29         [24] 1560 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00057B 85*3C 82         [24] 1561 	mov	dpl,_drawCircle_sloc2_1_0
      00057E 85*3D 83         [24] 1562 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000581 C0 07            [24] 1563 	push	ar7
      000583 C0 06            [24] 1564 	push	ar6
      000585 C0 05            [24] 1565 	push	ar5
      000587 C0 04            [24] 1566 	push	ar4
      000589 C0 03            [24] 1567 	push	ar3
      00058B C0 02            [24] 1568 	push	ar2
      00058D C0 01            [24] 1569 	push	ar1
      00058F C0 00            [24] 1570 	push	ar0
      000591 12r03r1E         [24] 1571 	lcall	_drawPixel
      000594 D0 00            [24] 1572 	pop	ar0
      000596 D0 01            [24] 1573 	pop	ar1
      000598 D0 02            [24] 1574 	pop	ar2
      00059A D0 03            [24] 1575 	pop	ar3
      00059C D0 04            [24] 1576 	pop	ar4
      00059E D0 05            [24] 1577 	pop	ar5
      0005A0 D0 06            [24] 1578 	pop	ar6
      0005A2 D0 07            [24] 1579 	pop	ar7
                                   1580 ;	ecen4330_lcd_v3.c:298: drawPixel(x0 - y, y0 + x, color);
      0005A4 EC               [12] 1581 	mov	a,r4
      0005A5 C3               [12] 1582 	clr	c
      0005A6 98               [12] 1583 	subb	a,r0
      0005A7 FC               [12] 1584 	mov	r4,a
      0005A8 ED               [12] 1585 	mov	a,r5
      0005A9 99               [12] 1586 	subb	a,r1
      0005AA FD               [12] 1587 	mov	r5,a
      0005AB 8E*26            [24] 1588 	mov	_drawPixel_PARM_2,r6
      0005AD 8F*27            [24] 1589 	mov	(_drawPixel_PARM_2 + 1),r7
      0005AF 85*2E*28         [24] 1590 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B2 85*2F*29         [24] 1591 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005B5 8C 82            [24] 1592 	mov	dpl,r4
      0005B7 8D 83            [24] 1593 	mov	dph,r5
      0005B9 C0 05            [24] 1594 	push	ar5
      0005BB C0 04            [24] 1595 	push	ar4
      0005BD C0 03            [24] 1596 	push	ar3
      0005BF C0 02            [24] 1597 	push	ar2
      0005C1 C0 01            [24] 1598 	push	ar1
      0005C3 C0 00            [24] 1599 	push	ar0
      0005C5 12r03r1E         [24] 1600 	lcall	_drawPixel
      0005C8 D0 00            [24] 1601 	pop	ar0
      0005CA D0 01            [24] 1602 	pop	ar1
      0005CC D0 02            [24] 1603 	pop	ar2
      0005CE D0 03            [24] 1604 	pop	ar3
                                   1605 ;	ecen4330_lcd_v3.c:299: drawPixel(x0 + y, y0 - x, color);
      0005D0 EA               [12] 1606 	mov	a,r2
      0005D1 C3               [12] 1607 	clr	c
      0005D2 95*36            [12] 1608 	subb	a,_drawCircle_x_65536_104
      0005D4 FA               [12] 1609 	mov	r2,a
      0005D5 EB               [12] 1610 	mov	a,r3
      0005D6 95*37            [12] 1611 	subb	a,(_drawCircle_x_65536_104 + 1)
      0005D8 FB               [12] 1612 	mov	r3,a
      0005D9 8A*26            [24] 1613 	mov	_drawPixel_PARM_2,r2
      0005DB 8B*27            [24] 1614 	mov	(_drawPixel_PARM_2 + 1),r3
      0005DD 85*2E*28         [24] 1615 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005E0 85*2F*29         [24] 1616 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005E3 85*3C 82         [24] 1617 	mov	dpl,_drawCircle_sloc2_1_0
      0005E6 85*3D 83         [24] 1618 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0005E9 C0 03            [24] 1619 	push	ar3
      0005EB C0 02            [24] 1620 	push	ar2
      0005ED C0 01            [24] 1621 	push	ar1
      0005EF C0 00            [24] 1622 	push	ar0
      0005F1 12r03r1E         [24] 1623 	lcall	_drawPixel
      0005F4 D0 00            [24] 1624 	pop	ar0
      0005F6 D0 01            [24] 1625 	pop	ar1
      0005F8 D0 02            [24] 1626 	pop	ar2
      0005FA D0 03            [24] 1627 	pop	ar3
      0005FC D0 04            [24] 1628 	pop	ar4
      0005FE D0 05            [24] 1629 	pop	ar5
                                   1630 ;	ecen4330_lcd_v3.c:300: drawPixel(x0 - y, y0 - x, color);
      000600 8A*26            [24] 1631 	mov	_drawPixel_PARM_2,r2
      000602 8B*27            [24] 1632 	mov	(_drawPixel_PARM_2 + 1),r3
      000604 85*2E*28         [24] 1633 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000607 85*2F*29         [24] 1634 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00060A 8C 82            [24] 1635 	mov	dpl,r4
      00060C 8D 83            [24] 1636 	mov	dph,r5
      00060E C0 03            [24] 1637 	push	ar3
      000610 C0 02            [24] 1638 	push	ar2
      000612 C0 01            [24] 1639 	push	ar1
      000614 C0 00            [24] 1640 	push	ar0
      000616 12r03r1E         [24] 1641 	lcall	_drawPixel
      000619 D0 00            [24] 1642 	pop	ar0
      00061B D0 01            [24] 1643 	pop	ar1
      00061D D0 02            [24] 1644 	pop	ar2
      00061F D0 03            [24] 1645 	pop	ar3
      000621 D0 03            [24] 1646 	pop	ar3
      000623 D0 02            [24] 1647 	pop	ar2
                                   1648 ;	ecen4330_lcd_v3.c:302: }
      000625 02r04r25         [24] 1649 	ljmp	00103$
                                   1650 ;------------------------------------------------------------
                                   1651 ;Allocation info for local variables in function 'testCircles'
                                   1652 ;------------------------------------------------------------
                                   1653 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1654 ;radius                    Allocated to registers r7 
                                   1655 ;x                         Allocated to registers r1 r2 
                                   1656 ;y                         Allocated to registers r0 r6 
                                   1657 ;r2                        Allocated to registers r3 r4 
                                   1658 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1659 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1660 ;------------------------------------------------------------
                                   1661 ;	ecen4330_lcd_v3.c:304: void testCircles (uint8_t radius, uint16_t color) {
                                   1662 ;	-----------------------------------------
                                   1663 ;	 function testCircles
                                   1664 ;	-----------------------------------------
      000628                       1665 _testCircles:
      000628 AF 82            [24] 1666 	mov	r7,dpl
                                   1667 ;	ecen4330_lcd_v3.c:305: int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00062A 8F 05            [24] 1668 	mov	ar5,r7
      00062C 7E 00            [12] 1669 	mov	r6,#0x00
      00062E ED               [12] 1670 	mov	a,r5
      00062F 2D               [12] 1671 	add	a,r5
      000630 FB               [12] 1672 	mov	r3,a
      000631 EE               [12] 1673 	mov	a,r6
      000632 33               [12] 1674 	rlc	a
      000633 FC               [12] 1675 	mov	r4,a
      000634 A9*22            [24] 1676 	mov	r1,__width
      000636 AA*23            [24] 1677 	mov	r2,(__width + 1)
      000638 ED               [12] 1678 	mov	a,r5
      000639 29               [12] 1679 	add	a,r1
      00063A F5*40            [12] 1680 	mov	_testCircles_w_65536_108,a
      00063C EE               [12] 1681 	mov	a,r6
      00063D 3A               [12] 1682 	addc	a,r2
      00063E F5*41            [12] 1683 	mov	(_testCircles_w_65536_108 + 1),a
      000640 A8*24            [24] 1684 	mov	r0,__height
      000642 AA*25            [24] 1685 	mov	r2,(__height + 1)
      000644 ED               [12] 1686 	mov	a,r5
      000645 28               [12] 1687 	add	a,r0
      000646 F5*42            [12] 1688 	mov	_testCircles_h_65536_108,a
      000648 EE               [12] 1689 	mov	a,r6
      000649 3A               [12] 1690 	addc	a,r2
      00064A F5*43            [12] 1691 	mov	(_testCircles_h_65536_108 + 1),a
                                   1692 ;	ecen4330_lcd_v3.c:307: for(x=0; x<w; x+=r2) {
      00064C 79 00            [12] 1693 	mov	r1,#0x00
      00064E 7A 00            [12] 1694 	mov	r2,#0x00
      000650                       1695 00107$:
      000650 C3               [12] 1696 	clr	c
      000651 E9               [12] 1697 	mov	a,r1
      000652 95*40            [12] 1698 	subb	a,_testCircles_w_65536_108
      000654 EA               [12] 1699 	mov	a,r2
      000655 64 80            [12] 1700 	xrl	a,#0x80
      000657 85*41 F0         [24] 1701 	mov	b,(_testCircles_w_65536_108 + 1)
      00065A 63 F0 80         [24] 1702 	xrl	b,#0x80
      00065D 95 F0            [12] 1703 	subb	a,b
      00065F 50 57            [24] 1704 	jnc	00109$
                                   1705 ;	ecen4330_lcd_v3.c:308: for(y=0; y<h; y+=r2) {
      000661 78 00            [12] 1706 	mov	r0,#0x00
      000663 7E 00            [12] 1707 	mov	r6,#0x00
      000665                       1708 00104$:
      000665 C3               [12] 1709 	clr	c
      000666 E8               [12] 1710 	mov	a,r0
      000667 95*42            [12] 1711 	subb	a,_testCircles_h_65536_108
      000669 EE               [12] 1712 	mov	a,r6
      00066A 64 80            [12] 1713 	xrl	a,#0x80
      00066C 85*43 F0         [24] 1714 	mov	b,(_testCircles_h_65536_108 + 1)
      00066F 63 F0 80         [24] 1715 	xrl	b,#0x80
      000672 95 F0            [12] 1716 	subb	a,b
      000674 50 3A            [24] 1717 	jnc	00108$
                                   1718 ;	ecen4330_lcd_v3.c:309: drawCircle(x, y, radius, color);
      000676 89 82            [24] 1719 	mov	dpl,r1
      000678 8A 83            [24] 1720 	mov	dph,r2
      00067A 88*2A            [24] 1721 	mov	_drawCircle_PARM_2,r0
      00067C 8E*2B            [24] 1722 	mov	(_drawCircle_PARM_2 + 1),r6
      00067E 8F*2C            [24] 1723 	mov	_drawCircle_PARM_3,r7
      000680 75*2D 00         [24] 1724 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000683 85*3E*2E         [24] 1725 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000686 85*3F*2F         [24] 1726 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000689 C0 07            [24] 1727 	push	ar7
      00068B C0 06            [24] 1728 	push	ar6
      00068D C0 04            [24] 1729 	push	ar4
      00068F C0 03            [24] 1730 	push	ar3
      000691 C0 02            [24] 1731 	push	ar2
      000693 C0 01            [24] 1732 	push	ar1
      000695 C0 00            [24] 1733 	push	ar0
      000697 12r03r75         [24] 1734 	lcall	_drawCircle
      00069A D0 00            [24] 1735 	pop	ar0
      00069C D0 01            [24] 1736 	pop	ar1
      00069E D0 02            [24] 1737 	pop	ar2
      0006A0 D0 03            [24] 1738 	pop	ar3
      0006A2 D0 04            [24] 1739 	pop	ar4
      0006A4 D0 06            [24] 1740 	pop	ar6
      0006A6 D0 07            [24] 1741 	pop	ar7
                                   1742 ;	ecen4330_lcd_v3.c:308: for(y=0; y<h; y+=r2) {
      0006A8 EB               [12] 1743 	mov	a,r3
      0006A9 28               [12] 1744 	add	a,r0
      0006AA F8               [12] 1745 	mov	r0,a
      0006AB EC               [12] 1746 	mov	a,r4
      0006AC 3E               [12] 1747 	addc	a,r6
      0006AD FE               [12] 1748 	mov	r6,a
      0006AE 80 B5            [24] 1749 	sjmp	00104$
      0006B0                       1750 00108$:
                                   1751 ;	ecen4330_lcd_v3.c:307: for(x=0; x<w; x+=r2) {
      0006B0 EB               [12] 1752 	mov	a,r3
      0006B1 29               [12] 1753 	add	a,r1
      0006B2 F9               [12] 1754 	mov	r1,a
      0006B3 EC               [12] 1755 	mov	a,r4
      0006B4 3A               [12] 1756 	addc	a,r2
      0006B5 FA               [12] 1757 	mov	r2,a
      0006B6 80 98            [24] 1758 	sjmp	00107$
      0006B8                       1759 00109$:
                                   1760 ;	ecen4330_lcd_v3.c:312: }
      0006B8 22               [24] 1761 	ret
                                   1762 ;------------------------------------------------------------
                                   1763 ;Allocation info for local variables in function 'fillRect'
                                   1764 ;------------------------------------------------------------
                                   1765 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1766 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1767 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1768 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1769 ;x                         Allocated to registers 
                                   1770 ;------------------------------------------------------------
                                   1771 ;	ecen4330_lcd_v3.c:314: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1772 ;	-----------------------------------------
                                   1773 ;	 function fillRect
                                   1774 ;	-----------------------------------------
      0006B9                       1775 _fillRect:
      0006B9 AE 82            [24] 1776 	mov	r6,dpl
      0006BB AF 83            [24] 1777 	mov	r7,dph
                                   1778 ;	ecen4330_lcd_v3.c:315: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0006BD 8E 04            [24] 1779 	mov	ar4,r6
      0006BF 8F 05            [24] 1780 	mov	ar5,r7
      0006C1 C3               [12] 1781 	clr	c
      0006C2 EC               [12] 1782 	mov	a,r4
      0006C3 94 F0            [12] 1783 	subb	a,#0xf0
      0006C5 ED               [12] 1784 	mov	a,r5
      0006C6 94 00            [12] 1785 	subb	a,#0x00
      0006C8 50 0D            [24] 1786 	jnc	00101$
      0006CA AC*44            [24] 1787 	mov	r4,_fillRect_PARM_2
      0006CC AD*45            [24] 1788 	mov	r5,(_fillRect_PARM_2 + 1)
      0006CE C3               [12] 1789 	clr	c
      0006CF EC               [12] 1790 	mov	a,r4
      0006D0 94 F0            [12] 1791 	subb	a,#0xf0
      0006D2 ED               [12] 1792 	mov	a,r5
      0006D3 94 00            [12] 1793 	subb	a,#0x00
      0006D5 40 01            [24] 1794 	jc	00102$
      0006D7                       1795 00101$:
                                   1796 ;	ecen4330_lcd_v3.c:317: return;
      0006D7 22               [24] 1797 	ret
      0006D8                       1798 00102$:
                                   1799 ;	ecen4330_lcd_v3.c:320: if ((x+w-1) >= TFTWIDTH)
      0006D8 E5*46            [12] 1800 	mov	a,_fillRect_PARM_3
      0006DA 2E               [12] 1801 	add	a,r6
      0006DB FC               [12] 1802 	mov	r4,a
      0006DC E5*47            [12] 1803 	mov	a,(_fillRect_PARM_3 + 1)
      0006DE 3F               [12] 1804 	addc	a,r7
      0006DF FD               [12] 1805 	mov	r5,a
      0006E0 1C               [12] 1806 	dec	r4
      0006E1 BC FF 01         [24] 1807 	cjne	r4,#0xff,00161$
      0006E4 1D               [12] 1808 	dec	r5
      0006E5                       1809 00161$:
      0006E5 C3               [12] 1810 	clr	c
      0006E6 EC               [12] 1811 	mov	a,r4
      0006E7 94 F0            [12] 1812 	subb	a,#0xf0
      0006E9 ED               [12] 1813 	mov	a,r5
      0006EA 94 00            [12] 1814 	subb	a,#0x00
      0006EC 40 0A            [24] 1815 	jc	00105$
                                   1816 ;	ecen4330_lcd_v3.c:322: w = TFTWIDTH-x;
      0006EE 74 F0            [12] 1817 	mov	a,#0xf0
      0006F0 C3               [12] 1818 	clr	c
      0006F1 9E               [12] 1819 	subb	a,r6
      0006F2 F5*46            [12] 1820 	mov	_fillRect_PARM_3,a
      0006F4 E4               [12] 1821 	clr	a
      0006F5 9F               [12] 1822 	subb	a,r7
      0006F6 F5*47            [12] 1823 	mov	(_fillRect_PARM_3 + 1),a
      0006F8                       1824 00105$:
                                   1825 ;	ecen4330_lcd_v3.c:325: if ((y+h-1) >= TFTHEIGHT)
      0006F8 E5*48            [12] 1826 	mov	a,_fillRect_PARM_4
      0006FA 25*44            [12] 1827 	add	a,_fillRect_PARM_2
      0006FC FC               [12] 1828 	mov	r4,a
      0006FD E5*49            [12] 1829 	mov	a,(_fillRect_PARM_4 + 1)
      0006FF 35*45            [12] 1830 	addc	a,(_fillRect_PARM_2 + 1)
      000701 FD               [12] 1831 	mov	r5,a
      000702 1C               [12] 1832 	dec	r4
      000703 BC FF 01         [24] 1833 	cjne	r4,#0xff,00163$
      000706 1D               [12] 1834 	dec	r5
      000707                       1835 00163$:
      000707 C3               [12] 1836 	clr	c
      000708 EC               [12] 1837 	mov	a,r4
      000709 94 F0            [12] 1838 	subb	a,#0xf0
      00070B ED               [12] 1839 	mov	a,r5
      00070C 94 00            [12] 1840 	subb	a,#0x00
      00070E 40 0C            [24] 1841 	jc	00107$
                                   1842 ;	ecen4330_lcd_v3.c:327: h = TFTHEIGHT-y;
      000710 74 F0            [12] 1843 	mov	a,#0xf0
      000712 C3               [12] 1844 	clr	c
      000713 95*44            [12] 1845 	subb	a,_fillRect_PARM_2
      000715 F5*48            [12] 1846 	mov	_fillRect_PARM_4,a
      000717 E4               [12] 1847 	clr	a
      000718 95*45            [12] 1848 	subb	a,(_fillRect_PARM_2 + 1)
      00071A F5*49            [12] 1849 	mov	(_fillRect_PARM_4 + 1),a
      00071C                       1850 00107$:
                                   1851 ;	ecen4330_lcd_v3.c:330: setAddress(x, y, x+w-1, y+h-1);
      00071C E5*46            [12] 1852 	mov	a,_fillRect_PARM_3
      00071E 2E               [12] 1853 	add	a,r6
      00071F FC               [12] 1854 	mov	r4,a
      000720 E5*47            [12] 1855 	mov	a,(_fillRect_PARM_3 + 1)
      000722 3F               [12] 1856 	addc	a,r7
      000723 FD               [12] 1857 	mov	r5,a
      000724 1C               [12] 1858 	dec	r4
      000725 BC FF 01         [24] 1859 	cjne	r4,#0xff,00165$
      000728 1D               [12] 1860 	dec	r5
      000729                       1861 00165$:
      000729 8C*02            [24] 1862 	mov	_setAddress_PARM_3,r4
      00072B 8D*03            [24] 1863 	mov	(_setAddress_PARM_3 + 1),r5
      00072D E5*48            [12] 1864 	mov	a,_fillRect_PARM_4
      00072F 25*44            [12] 1865 	add	a,_fillRect_PARM_2
      000731 FC               [12] 1866 	mov	r4,a
      000732 E5*49            [12] 1867 	mov	a,(_fillRect_PARM_4 + 1)
      000734 35*45            [12] 1868 	addc	a,(_fillRect_PARM_2 + 1)
      000736 FD               [12] 1869 	mov	r5,a
      000737 1C               [12] 1870 	dec	r4
      000738 BC FF 01         [24] 1871 	cjne	r4,#0xff,00166$
      00073B 1D               [12] 1872 	dec	r5
      00073C                       1873 00166$:
      00073C 8C*04            [24] 1874 	mov	_setAddress_PARM_4,r4
      00073E 8D*05            [24] 1875 	mov	(_setAddress_PARM_4 + 1),r5
      000740 85*44*00         [24] 1876 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000743 85*45*01         [24] 1877 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000746 8E 82            [24] 1878 	mov	dpl,r6
      000748 8F 83            [24] 1879 	mov	dph,r7
      00074A 12r01r42         [24] 1880 	lcall	_setAddress
                                   1881 ;	ecen4330_lcd_v3.c:334: write8Reg(0x2C);
                                   1882 ;	assignBit
      00074D C2 B5            [12] 1883 	clr	_P3_5
                                   1884 ;	assignBit
      00074F D2 B4            [12] 1885 	setb	_P3_4
      000751 85*12 82         [24] 1886 	mov	dpl,_lcd_address
      000754 85*13 83         [24] 1887 	mov	dph,(_lcd_address + 1)
      000757 74 2C            [12] 1888 	mov	a,#0x2c
      000759 F0               [24] 1889 	movx	@dptr,a
                                   1890 ;	assignBit
      00075A C2 B4            [12] 1891 	clr	_P3_4
                                   1892 ;	ecen4330_lcd_v3.c:336: CD = 1;
                                   1893 ;	assignBit
      00075C D2 B5            [12] 1894 	setb	_P3_5
                                   1895 ;	ecen4330_lcd_v3.c:337: for(y=h; y>0; y--)
      00075E AF*4B            [24] 1896 	mov	r7,(_fillRect_PARM_5 + 1)
      000760 AD*48            [24] 1897 	mov	r5,_fillRect_PARM_4
      000762 AE*49            [24] 1898 	mov	r6,(_fillRect_PARM_4 + 1)
      000764                       1899 00114$:
      000764 ED               [12] 1900 	mov	a,r5
      000765 4E               [12] 1901 	orl	a,r6
      000766 60 30            [24] 1902 	jz	00116$
                                   1903 ;	ecen4330_lcd_v3.c:339: for(x=w; x>0; x--)
      000768 AB*46            [24] 1904 	mov	r3,_fillRect_PARM_3
      00076A AC*47            [24] 1905 	mov	r4,(_fillRect_PARM_3 + 1)
      00076C                       1906 00111$:
      00076C EB               [12] 1907 	mov	a,r3
      00076D 4C               [12] 1908 	orl	a,r4
      00076E 60 21            [24] 1909 	jz	00115$
                                   1910 ;	ecen4330_lcd_v3.c:342: write8(color>>8); write8(color);
                                   1911 ;	assignBit
      000770 D2 B4            [12] 1912 	setb	_P3_4
      000772 85*12 82         [24] 1913 	mov	dpl,_lcd_address
      000775 85*13 83         [24] 1914 	mov	dph,(_lcd_address + 1)
      000778 EF               [12] 1915 	mov	a,r7
      000779 F0               [24] 1916 	movx	@dptr,a
                                   1917 ;	assignBit
      00077A C2 B4            [12] 1918 	clr	_P3_4
                                   1919 ;	assignBit
      00077C D2 B4            [12] 1920 	setb	_P3_4
      00077E 85*12 82         [24] 1921 	mov	dpl,_lcd_address
      000781 85*13 83         [24] 1922 	mov	dph,(_lcd_address + 1)
      000784 E5*4A            [12] 1923 	mov	a,_fillRect_PARM_5
      000786 FA               [12] 1924 	mov	r2,a
      000787 F0               [24] 1925 	movx	@dptr,a
                                   1926 ;	assignBit
      000788 C2 B4            [12] 1927 	clr	_P3_4
                                   1928 ;	ecen4330_lcd_v3.c:339: for(x=w; x>0; x--)
      00078A 1B               [12] 1929 	dec	r3
      00078B BB FF 01         [24] 1930 	cjne	r3,#0xff,00169$
      00078E 1C               [12] 1931 	dec	r4
      00078F                       1932 00169$:
      00078F 80 DB            [24] 1933 	sjmp	00111$
      000791                       1934 00115$:
                                   1935 ;	ecen4330_lcd_v3.c:337: for(y=h; y>0; y--)
      000791 1D               [12] 1936 	dec	r5
      000792 BD FF 01         [24] 1937 	cjne	r5,#0xff,00170$
      000795 1E               [12] 1938 	dec	r6
      000796                       1939 00170$:
      000796 80 CC            [24] 1940 	sjmp	00114$
      000798                       1941 00116$:
                                   1942 ;	ecen4330_lcd_v3.c:347: }
      000798 22               [24] 1943 	ret
                                   1944 ;------------------------------------------------------------
                                   1945 ;Allocation info for local variables in function 'fillScreen'
                                   1946 ;------------------------------------------------------------
                                   1947 ;Color                     Allocated to registers r6 r7 
                                   1948 ;len                       Allocated to registers 
                                   1949 ;blocks                    Allocated to registers r4 r7 
                                   1950 ;i                         Allocated to registers r3 
                                   1951 ;hi                        Allocated to registers r5 
                                   1952 ;lo                        Allocated to registers r6 
                                   1953 ;------------------------------------------------------------
                                   1954 ;	ecen4330_lcd_v3.c:349: void fillScreen (uint16_t Color) {
                                   1955 ;	-----------------------------------------
                                   1956 ;	 function fillScreen
                                   1957 ;	-----------------------------------------
      000799                       1958 _fillScreen:
      000799 AE 82            [24] 1959 	mov	r6,dpl
      00079B AF 83            [24] 1960 	mov	r7,dph
                                   1961 ;	ecen4330_lcd_v3.c:355: uint8_t  i, hi = Color >> 8,
      00079D 8F 05            [24] 1962 	mov	ar5,r7
                                   1963 ;	ecen4330_lcd_v3.c:356: lo = Color;
                                   1964 ;	ecen4330_lcd_v3.c:359: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      00079F E4               [12] 1965 	clr	a
      0007A0 F5*00            [12] 1966 	mov	_setAddress_PARM_2,a
      0007A2 F5*01            [12] 1967 	mov	(_setAddress_PARM_2 + 1),a
      0007A4 75*02 EF         [24] 1968 	mov	_setAddress_PARM_3,#0xef
                                   1969 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007A7 F5*03            [12] 1970 	mov	(_setAddress_PARM_3 + 1),a
      0007A9 75*04 EF         [24] 1971 	mov	_setAddress_PARM_4,#0xef
                                   1972 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_4 + 1),#0x00
      0007AC F5*05            [12] 1973 	mov	(_setAddress_PARM_4 + 1),a
      0007AE 90 00 00         [24] 1974 	mov	dptr,#0x0000
      0007B1 C0 06            [24] 1975 	push	ar6
      0007B3 C0 05            [24] 1976 	push	ar5
      0007B5 12r01r42         [24] 1977 	lcall	_setAddress
      0007B8 D0 05            [24] 1978 	pop	ar5
      0007BA D0 06            [24] 1979 	pop	ar6
                                   1980 ;	ecen4330_lcd_v3.c:364: write8Reg(0x2C);
                                   1981 ;	assignBit
      0007BC C2 B5            [12] 1982 	clr	_P3_5
                                   1983 ;	assignBit
      0007BE D2 B4            [12] 1984 	setb	_P3_4
      0007C0 85*12 82         [24] 1985 	mov	dpl,_lcd_address
      0007C3 85*13 83         [24] 1986 	mov	dph,(_lcd_address + 1)
      0007C6 74 2C            [12] 1987 	mov	a,#0x2c
      0007C8 F0               [24] 1988 	movx	@dptr,a
                                   1989 ;	assignBit
      0007C9 C2 B4            [12] 1990 	clr	_P3_4
                                   1991 ;	ecen4330_lcd_v3.c:366: CD = 1;
                                   1992 ;	assignBit
      0007CB D2 B5            [12] 1993 	setb	_P3_5
                                   1994 ;	ecen4330_lcd_v3.c:367: write8(hi); write8(lo);
                                   1995 ;	assignBit
      0007CD D2 B4            [12] 1996 	setb	_P3_4
      0007CF 85*12 82         [24] 1997 	mov	dpl,_lcd_address
      0007D2 85*13 83         [24] 1998 	mov	dph,(_lcd_address + 1)
      0007D5 ED               [12] 1999 	mov	a,r5
      0007D6 F0               [24] 2000 	movx	@dptr,a
                                   2001 ;	assignBit
      0007D7 C2 B4            [12] 2002 	clr	_P3_4
                                   2003 ;	assignBit
      0007D9 D2 B4            [12] 2004 	setb	_P3_4
      0007DB 85*12 82         [24] 2005 	mov	dpl,_lcd_address
      0007DE 85*13 83         [24] 2006 	mov	dph,(_lcd_address + 1)
      0007E1 EE               [12] 2007 	mov	a,r6
      0007E2 F0               [24] 2008 	movx	@dptr,a
                                   2009 ;	assignBit
      0007E3 C2 B4            [12] 2010 	clr	_P3_4
                                   2011 ;	ecen4330_lcd_v3.c:370: while (blocks--) {
      0007E5 7C 84            [12] 2012 	mov	r4,#0x84
      0007E7 7F 03            [12] 2013 	mov	r7,#0x03
      0007E9                       2014 00104$:
      0007E9 8C 02            [24] 2015 	mov	ar2,r4
      0007EB 8F 03            [24] 2016 	mov	ar3,r7
      0007ED 1C               [12] 2017 	dec	r4
      0007EE BC FF 01         [24] 2018 	cjne	r4,#0xff,00140$
      0007F1 1F               [12] 2019 	dec	r7
      0007F2                       2020 00140$:
      0007F2 EA               [12] 2021 	mov	a,r2
      0007F3 4B               [12] 2022 	orl	a,r3
      0007F4 60 66            [24] 2023 	jz	00106$
                                   2024 ;	ecen4330_lcd_v3.c:372: do {
      0007F6 7B 10            [12] 2025 	mov	r3,#0x10
      0007F8                       2026 00101$:
                                   2027 ;	ecen4330_lcd_v3.c:374: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2028 ;	assignBit
      0007F8 D2 B4            [12] 2029 	setb	_P3_4
      0007FA 85*12 82         [24] 2030 	mov	dpl,_lcd_address
      0007FD 85*13 83         [24] 2031 	mov	dph,(_lcd_address + 1)
      000800 ED               [12] 2032 	mov	a,r5
      000801 F0               [24] 2033 	movx	@dptr,a
                                   2034 ;	assignBit
      000802 C2 B4            [12] 2035 	clr	_P3_4
                                   2036 ;	assignBit
      000804 D2 B4            [12] 2037 	setb	_P3_4
      000806 85*12 82         [24] 2038 	mov	dpl,_lcd_address
      000809 85*13 83         [24] 2039 	mov	dph,(_lcd_address + 1)
      00080C EE               [12] 2040 	mov	a,r6
      00080D F0               [24] 2041 	movx	@dptr,a
                                   2042 ;	assignBit
      00080E C2 B4            [12] 2043 	clr	_P3_4
                                   2044 ;	assignBit
      000810 D2 B4            [12] 2045 	setb	_P3_4
      000812 85*12 82         [24] 2046 	mov	dpl,_lcd_address
      000815 85*13 83         [24] 2047 	mov	dph,(_lcd_address + 1)
      000818 ED               [12] 2048 	mov	a,r5
      000819 F0               [24] 2049 	movx	@dptr,a
                                   2050 ;	assignBit
      00081A C2 B4            [12] 2051 	clr	_P3_4
                                   2052 ;	assignBit
      00081C D2 B4            [12] 2053 	setb	_P3_4
      00081E 85*12 82         [24] 2054 	mov	dpl,_lcd_address
      000821 85*13 83         [24] 2055 	mov	dph,(_lcd_address + 1)
      000824 EE               [12] 2056 	mov	a,r6
      000825 F0               [24] 2057 	movx	@dptr,a
                                   2058 ;	assignBit
      000826 C2 B4            [12] 2059 	clr	_P3_4
                                   2060 ;	ecen4330_lcd_v3.c:375: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2061 ;	assignBit
      000828 D2 B4            [12] 2062 	setb	_P3_4
      00082A 85*12 82         [24] 2063 	mov	dpl,_lcd_address
      00082D 85*13 83         [24] 2064 	mov	dph,(_lcd_address + 1)
      000830 ED               [12] 2065 	mov	a,r5
      000831 F0               [24] 2066 	movx	@dptr,a
                                   2067 ;	assignBit
      000832 C2 B4            [12] 2068 	clr	_P3_4
                                   2069 ;	assignBit
      000834 D2 B4            [12] 2070 	setb	_P3_4
      000836 85*12 82         [24] 2071 	mov	dpl,_lcd_address
      000839 85*13 83         [24] 2072 	mov	dph,(_lcd_address + 1)
      00083C EE               [12] 2073 	mov	a,r6
      00083D F0               [24] 2074 	movx	@dptr,a
                                   2075 ;	assignBit
      00083E C2 B4            [12] 2076 	clr	_P3_4
                                   2077 ;	assignBit
      000840 D2 B4            [12] 2078 	setb	_P3_4
      000842 85*12 82         [24] 2079 	mov	dpl,_lcd_address
      000845 85*13 83         [24] 2080 	mov	dph,(_lcd_address + 1)
      000848 ED               [12] 2081 	mov	a,r5
      000849 F0               [24] 2082 	movx	@dptr,a
                                   2083 ;	assignBit
      00084A C2 B4            [12] 2084 	clr	_P3_4
                                   2085 ;	assignBit
      00084C D2 B4            [12] 2086 	setb	_P3_4
      00084E 85*12 82         [24] 2087 	mov	dpl,_lcd_address
      000851 85*13 83         [24] 2088 	mov	dph,(_lcd_address + 1)
      000854 EE               [12] 2089 	mov	a,r6
      000855 F0               [24] 2090 	movx	@dptr,a
                                   2091 ;	assignBit
      000856 C2 B4            [12] 2092 	clr	_P3_4
                                   2093 ;	ecen4330_lcd_v3.c:376: } while(--i);
      000858 DB 9E            [24] 2094 	djnz	r3,00101$
      00085A 80 8D            [24] 2095 	sjmp	00104$
      00085C                       2096 00106$:
                                   2097 ;	ecen4330_lcd_v3.c:378: for (i = (char)len & 63; i--; ) {
      00085C 7F 3F            [12] 2098 	mov	r7,#0x3f
      00085E                       2099 00109$:
      00085E 8F 04            [24] 2100 	mov	ar4,r7
      000860 1F               [12] 2101 	dec	r7
      000861 EC               [12] 2102 	mov	a,r4
      000862 60 1A            [24] 2103 	jz	00111$
                                   2104 ;	ecen4330_lcd_v3.c:380: write8(hi); write8(lo);
                                   2105 ;	assignBit
      000864 D2 B4            [12] 2106 	setb	_P3_4
      000866 85*12 82         [24] 2107 	mov	dpl,_lcd_address
      000869 85*13 83         [24] 2108 	mov	dph,(_lcd_address + 1)
      00086C ED               [12] 2109 	mov	a,r5
      00086D F0               [24] 2110 	movx	@dptr,a
                                   2111 ;	assignBit
      00086E C2 B4            [12] 2112 	clr	_P3_4
                                   2113 ;	assignBit
      000870 D2 B4            [12] 2114 	setb	_P3_4
      000872 85*12 82         [24] 2115 	mov	dpl,_lcd_address
      000875 85*13 83         [24] 2116 	mov	dph,(_lcd_address + 1)
      000878 EE               [12] 2117 	mov	a,r6
      000879 F0               [24] 2118 	movx	@dptr,a
                                   2119 ;	assignBit
      00087A C2 B4            [12] 2120 	clr	_P3_4
      00087C 80 E0            [24] 2121 	sjmp	00109$
      00087E                       2122 00111$:
                                   2123 ;	ecen4330_lcd_v3.c:386: }
      00087E 22               [24] 2124 	ret
                                   2125 ;------------------------------------------------------------
                                   2126 ;Allocation info for local variables in function 'drawChar'
                                   2127 ;------------------------------------------------------------
                                   2128 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2129 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2130 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2131 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2132 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2133 ;x                         Allocated to registers r6 r7 
                                   2134 ;i                         Allocated with name '_drawChar_i_131072_149'
                                   2135 ;line                      Allocated with name '_drawChar_line_196608_150'
                                   2136 ;j                         Allocated with name '_drawChar_j_262144_153'
                                   2137 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2138 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2139 ;------------------------------------------------------------
                                   2140 ;	ecen4330_lcd_v3.c:387: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2141 ;	-----------------------------------------
                                   2142 ;	 function drawChar
                                   2143 ;	-----------------------------------------
      00087F                       2144 _drawChar:
      00087F AE 82            [24] 2145 	mov	r6,dpl
      000881 AF 83            [24] 2146 	mov	r7,dph
                                   2147 ;	ecen4330_lcd_v3.c:388: if ((x >=TFTWIDTH) || // Clip right
      000883 C3               [12] 2148 	clr	c
      000884 EE               [12] 2149 	mov	a,r6
      000885 94 F0            [12] 2150 	subb	a,#0xf0
      000887 EF               [12] 2151 	mov	a,r7
      000888 64 80            [12] 2152 	xrl	a,#0x80
      00088A 94 80            [12] 2153 	subb	a,#0x80
      00088C 50 67            [24] 2154 	jnc	00101$
                                   2155 ;	ecen4330_lcd_v3.c:389: (y >=TFTHEIGHT)           || // Clip bottom
      00088E AC*4C            [24] 2156 	mov	r4,_drawChar_PARM_2
      000890 AD*4D            [24] 2157 	mov	r5,(_drawChar_PARM_2 + 1)
      000892 C3               [12] 2158 	clr	c
      000893 EC               [12] 2159 	mov	a,r4
      000894 94 F0            [12] 2160 	subb	a,#0xf0
      000896 ED               [12] 2161 	mov	a,r5
      000897 64 80            [12] 2162 	xrl	a,#0x80
      000899 94 80            [12] 2163 	subb	a,#0x80
      00089B 50 58            [24] 2164 	jnc	00101$
                                   2165 ;	ecen4330_lcd_v3.c:390: ((x + 6 * size - 1) < 0) || // Clip left
      00089D AA*53            [24] 2166 	mov	r2,_drawChar_PARM_6
      00089F 7B 00            [12] 2167 	mov	r3,#0x00
      0008A1 8A*00            [24] 2168 	mov	__mulint_PARM_2,r2
      0008A3 8B*01            [24] 2169 	mov	(__mulint_PARM_2 + 1),r3
      0008A5 90 00 06         [24] 2170 	mov	dptr,#0x0006
      0008A8 C0 07            [24] 2171 	push	ar7
      0008AA C0 06            [24] 2172 	push	ar6
      0008AC C0 05            [24] 2173 	push	ar5
      0008AE C0 04            [24] 2174 	push	ar4
      0008B0 C0 03            [24] 2175 	push	ar3
      0008B2 C0 02            [24] 2176 	push	ar2
      0008B4 12r00r00         [24] 2177 	lcall	__mulint
      0008B7 A8 82            [24] 2178 	mov	r0,dpl
      0008B9 A9 83            [24] 2179 	mov	r1,dph
      0008BB D0 02            [24] 2180 	pop	ar2
      0008BD D0 03            [24] 2181 	pop	ar3
      0008BF D0 04            [24] 2182 	pop	ar4
      0008C1 D0 05            [24] 2183 	pop	ar5
      0008C3 D0 06            [24] 2184 	pop	ar6
      0008C5 D0 07            [24] 2185 	pop	ar7
      0008C7 E8               [12] 2186 	mov	a,r0
      0008C8 2E               [12] 2187 	add	a,r6
      0008C9 F8               [12] 2188 	mov	r0,a
      0008CA E9               [12] 2189 	mov	a,r1
      0008CB 3F               [12] 2190 	addc	a,r7
      0008CC F9               [12] 2191 	mov	r1,a
      0008CD 18               [12] 2192 	dec	r0
      0008CE B8 FF 01         [24] 2193 	cjne	r0,#0xff,00182$
      0008D1 19               [12] 2194 	dec	r1
      0008D2                       2195 00182$:
      0008D2 E9               [12] 2196 	mov	a,r1
      0008D3 20 E7 1F         [24] 2197 	jb	acc.7,00101$
                                   2198 ;	ecen4330_lcd_v3.c:391: ((y + 8 * size - 1) < 0))   // Clip top
      0008D6 EB               [12] 2199 	mov	a,r3
      0008D7 C4               [12] 2200 	swap	a
      0008D8 03               [12] 2201 	rr	a
      0008D9 54 F8            [12] 2202 	anl	a,#0xf8
      0008DB CA               [12] 2203 	xch	a,r2
      0008DC C4               [12] 2204 	swap	a
      0008DD 03               [12] 2205 	rr	a
      0008DE CA               [12] 2206 	xch	a,r2
      0008DF 6A               [12] 2207 	xrl	a,r2
      0008E0 CA               [12] 2208 	xch	a,r2
      0008E1 54 F8            [12] 2209 	anl	a,#0xf8
      0008E3 CA               [12] 2210 	xch	a,r2
      0008E4 6A               [12] 2211 	xrl	a,r2
      0008E5 FB               [12] 2212 	mov	r3,a
      0008E6 EA               [12] 2213 	mov	a,r2
      0008E7 2C               [12] 2214 	add	a,r4
      0008E8 FA               [12] 2215 	mov	r2,a
      0008E9 EB               [12] 2216 	mov	a,r3
      0008EA 3D               [12] 2217 	addc	a,r5
      0008EB FB               [12] 2218 	mov	r3,a
      0008EC 1A               [12] 2219 	dec	r2
      0008ED BA FF 01         [24] 2220 	cjne	r2,#0xff,00184$
      0008F0 1B               [12] 2221 	dec	r3
      0008F1                       2222 00184$:
      0008F1 EB               [12] 2223 	mov	a,r3
      0008F2 30 E7 01         [24] 2224 	jnb	acc.7,00141$
      0008F5                       2225 00101$:
                                   2226 ;	ecen4330_lcd_v3.c:393: return;
      0008F5 22               [24] 2227 	ret
                                   2228 ;	ecen4330_lcd_v3.c:396: for (int8_t i=0; i<6; i++ )
      0008F6                       2229 00141$:
      0008F6 74 01            [12] 2230 	mov	a,#0x01
      0008F8 B5*53 04         [24] 2231 	cjne	a,_drawChar_PARM_6,00186$
      0008FB 74 01            [12] 2232 	mov	a,#0x01
      0008FD 80 01            [24] 2233 	sjmp	00187$
      0008FF                       2234 00186$:
      0008FF E4               [12] 2235 	clr	a
      000900                       2236 00187$:
      000900 FB               [12] 2237 	mov	r3,a
      000901 FA               [12] 2238 	mov	r2,a
      000902 E5*4F            [12] 2239 	mov	a,_drawChar_PARM_4
      000904 B5*51 08         [24] 2240 	cjne	a,_drawChar_PARM_5,00188$
      000907 E5*50            [12] 2241 	mov	a,(_drawChar_PARM_4 + 1)
      000909 B5*52 03         [24] 2242 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      00090C D3               [12] 2243 	setb	c
      00090D 80 01            [24] 2244 	sjmp	00189$
      00090F                       2245 00188$:
      00090F C3               [12] 2246 	clr	c
      000910                       2247 00189$:
      000910 92*00            [24] 2248 	mov	_drawChar_sloc0_1_0,c
      000912 75*54 00         [24] 2249 	mov	_drawChar_i_131072_149,#0x00
      000915                       2250 00126$:
      000915 C3               [12] 2251 	clr	c
      000916 E5*54            [12] 2252 	mov	a,_drawChar_i_131072_149
      000918 64 80            [12] 2253 	xrl	a,#0x80
      00091A 94 86            [12] 2254 	subb	a,#0x86
      00091C 40 01            [24] 2255 	jc	00190$
      00091E 22               [24] 2256 	ret
      00091F                       2257 00190$:
                                   2258 ;	ecen4330_lcd_v3.c:400: if (i == 5)
      00091F 74 05            [12] 2259 	mov	a,#0x05
      000921 B5*54 05         [24] 2260 	cjne	a,_drawChar_i_131072_149,00107$
                                   2261 ;	ecen4330_lcd_v3.c:402: line = 0x0;
      000924 75*55 00         [24] 2262 	mov	_drawChar_line_196608_150,#0x00
      000927 80 47            [24] 2263 	sjmp	00140$
      000929                       2264 00107$:
                                   2265 ;	ecen4330_lcd_v3.c:406: line = pgm_read_byte(font+(c*5)+i);
      000929 C0 02            [24] 2266 	push	ar2
      00092B 85*4E*00         [24] 2267 	mov	__mulint_PARM_2,_drawChar_PARM_3
      00092E 75*01 00         [24] 2268 	mov	(__mulint_PARM_2 + 1),#0x00
      000931 90 00 05         [24] 2269 	mov	dptr,#0x0005
      000934 C0 07            [24] 2270 	push	ar7
      000936 C0 06            [24] 2271 	push	ar6
      000938 C0 05            [24] 2272 	push	ar5
      00093A C0 04            [24] 2273 	push	ar4
      00093C C0 03            [24] 2274 	push	ar3
      00093E 12r00r00         [24] 2275 	lcall	__mulint
      000941 A9 82            [24] 2276 	mov	r1,dpl
      000943 AA 83            [24] 2277 	mov	r2,dph
      000945 D0 03            [24] 2278 	pop	ar3
      000947 D0 04            [24] 2279 	pop	ar4
      000949 D0 05            [24] 2280 	pop	ar5
      00094B D0 06            [24] 2281 	pop	ar6
      00094D D0 07            [24] 2282 	pop	ar7
      00094F E9               [12] 2283 	mov	a,r1
      000950 24r00            [12] 2284 	add	a,#_font
      000952 F5*57            [12] 2285 	mov	_drawChar_sloc1_1_0,a
      000954 EA               [12] 2286 	mov	a,r2
      000955 34s00            [12] 2287 	addc	a,#(_font >> 8)
      000957 F5*58            [12] 2288 	mov	(_drawChar_sloc1_1_0 + 1),a
      000959 E5*54            [12] 2289 	mov	a,_drawChar_i_131072_149
      00095B F9               [12] 2290 	mov	r1,a
      00095C 33               [12] 2291 	rlc	a
      00095D 95 E0            [12] 2292 	subb	a,acc
      00095F FA               [12] 2293 	mov	r2,a
      000960 E9               [12] 2294 	mov	a,r1
      000961 25*57            [12] 2295 	add	a,_drawChar_sloc1_1_0
      000963 F5 82            [12] 2296 	mov	dpl,a
      000965 EA               [12] 2297 	mov	a,r2
      000966 35*58            [12] 2298 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000968 F5 83            [12] 2299 	mov	dph,a
      00096A E4               [12] 2300 	clr	a
      00096B 93               [24] 2301 	movc	a,@a+dptr
      00096C F5*55            [12] 2302 	mov	_drawChar_line_196608_150,a
                                   2303 ;	ecen4330_lcd_v3.c:396: for (int8_t i=0; i<6; i++ )
      00096E D0 02            [24] 2304 	pop	ar2
                                   2305 ;	ecen4330_lcd_v3.c:409: for (int8_t j = 0; j<8; j++)
      000970                       2306 00140$:
      000970 C2 D5            [12] 2307 	clr	F0
      000972 85*53 F0         [24] 2308 	mov	b,_drawChar_PARM_6
      000975 E5*54            [12] 2309 	mov	a,_drawChar_i_131072_149
      000977 30 E7 04         [24] 2310 	jnb	acc.7,00193$
      00097A B2 D5            [12] 2311 	cpl	F0
      00097C F4               [12] 2312 	cpl	a
      00097D 04               [12] 2313 	inc	a
      00097E                       2314 00193$:
      00097E A4               [48] 2315 	mul	ab
      00097F 30 D5 0A         [24] 2316 	jnb	F0,00194$
      000982 F4               [12] 2317 	cpl	a
      000983 24 01            [12] 2318 	add	a,#0x01
      000985 C5 F0            [12] 2319 	xch	a,b
      000987 F4               [12] 2320 	cpl	a
      000988 34 00            [12] 2321 	addc	a,#0x00
      00098A C5 F0            [12] 2322 	xch	a,b
      00098C                       2323 00194$:
      00098C 2E               [12] 2324 	add	a,r6
      00098D F5*57            [12] 2325 	mov	_drawChar_sloc1_1_0,a
      00098F EF               [12] 2326 	mov	a,r7
      000990 35 F0            [12] 2327 	addc	a,b
      000992 F5*58            [12] 2328 	mov	(_drawChar_sloc1_1_0 + 1),a
      000994 85*57*59         [24] 2329 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000997 85*58*5A         [24] 2330 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      00099A 75*56 00         [24] 2331 	mov	_drawChar_j_262144_153,#0x00
      00099D                       2332 00123$:
      00099D C3               [12] 2333 	clr	c
      00099E E5*56            [12] 2334 	mov	a,_drawChar_j_262144_153
      0009A0 64 80            [12] 2335 	xrl	a,#0x80
      0009A2 94 88            [12] 2336 	subb	a,#0x88
      0009A4 40 03            [24] 2337 	jc	00195$
      0009A6 02r0Br08         [24] 2338 	ljmp	00127$
      0009A9                       2339 00195$:
                                   2340 ;	ecen4330_lcd_v3.c:411: if (line & 0x1)
      0009A9 E5*55            [12] 2341 	mov	a,_drawChar_line_196608_150
      0009AB 20 E0 03         [24] 2342 	jb	acc.0,00196$
      0009AE 02r0Ar56         [24] 2343 	ljmp	00118$
      0009B1                       2344 00196$:
                                   2345 ;	ecen4330_lcd_v3.c:413: if (size == 1) // default size
      0009B1 EB               [12] 2346 	mov	a,r3
      0009B2 60 46            [24] 2347 	jz	00110$
                                   2348 ;	ecen4330_lcd_v3.c:415: drawPixel(x+i, y+j, color);
      0009B4 E5*54            [12] 2349 	mov	a,_drawChar_i_131072_149
      0009B6 F8               [12] 2350 	mov	r0,a
      0009B7 33               [12] 2351 	rlc	a
      0009B8 95 E0            [12] 2352 	subb	a,acc
      0009BA F9               [12] 2353 	mov	r1,a
      0009BB E8               [12] 2354 	mov	a,r0
      0009BC 2E               [12] 2355 	add	a,r6
      0009BD F8               [12] 2356 	mov	r0,a
      0009BE E9               [12] 2357 	mov	a,r1
      0009BF 3F               [12] 2358 	addc	a,r7
      0009C0 F9               [12] 2359 	mov	r1,a
      0009C1 88 82            [24] 2360 	mov	dpl,r0
      0009C3 89 83            [24] 2361 	mov	dph,r1
      0009C5 E5*56            [12] 2362 	mov	a,_drawChar_j_262144_153
      0009C7 F8               [12] 2363 	mov	r0,a
      0009C8 33               [12] 2364 	rlc	a
      0009C9 95 E0            [12] 2365 	subb	a,acc
      0009CB F9               [12] 2366 	mov	r1,a
      0009CC E8               [12] 2367 	mov	a,r0
      0009CD 2C               [12] 2368 	add	a,r4
      0009CE F8               [12] 2369 	mov	r0,a
      0009CF E9               [12] 2370 	mov	a,r1
      0009D0 3D               [12] 2371 	addc	a,r5
      0009D1 F9               [12] 2372 	mov	r1,a
      0009D2 88*26            [24] 2373 	mov	_drawPixel_PARM_2,r0
      0009D4 89*27            [24] 2374 	mov	(_drawPixel_PARM_2 + 1),r1
      0009D6 85*4F*28         [24] 2375 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009D9 85*50*29         [24] 2376 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009DC C0 07            [24] 2377 	push	ar7
      0009DE C0 06            [24] 2378 	push	ar6
      0009E0 C0 05            [24] 2379 	push	ar5
      0009E2 C0 04            [24] 2380 	push	ar4
      0009E4 C0 03            [24] 2381 	push	ar3
      0009E6 C0 02            [24] 2382 	push	ar2
      0009E8 12r03r1E         [24] 2383 	lcall	_drawPixel
      0009EB D0 02            [24] 2384 	pop	ar2
      0009ED D0 03            [24] 2385 	pop	ar3
      0009EF D0 04            [24] 2386 	pop	ar4
      0009F1 D0 05            [24] 2387 	pop	ar5
      0009F3 D0 06            [24] 2388 	pop	ar6
      0009F5 D0 07            [24] 2389 	pop	ar7
      0009F7 02r0ArFD         [24] 2390 	ljmp	00119$
      0009FA                       2391 00110$:
                                   2392 ;	ecen4330_lcd_v3.c:418: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009FA 85*59 82         [24] 2393 	mov	dpl,_drawChar_sloc2_1_0
      0009FD 85*5A 83         [24] 2394 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000A00 C2 D5            [12] 2395 	clr	F0
      000A02 85*53 F0         [24] 2396 	mov	b,_drawChar_PARM_6
      000A05 E5*56            [12] 2397 	mov	a,_drawChar_j_262144_153
      000A07 30 E7 04         [24] 2398 	jnb	acc.7,00198$
      000A0A B2 D5            [12] 2399 	cpl	F0
      000A0C F4               [12] 2400 	cpl	a
      000A0D 04               [12] 2401 	inc	a
      000A0E                       2402 00198$:
      000A0E A4               [48] 2403 	mul	ab
      000A0F 30 D5 0A         [24] 2404 	jnb	F0,00199$
      000A12 F4               [12] 2405 	cpl	a
      000A13 24 01            [12] 2406 	add	a,#0x01
      000A15 C5 F0            [12] 2407 	xch	a,b
      000A17 F4               [12] 2408 	cpl	a
      000A18 34 00            [12] 2409 	addc	a,#0x00
      000A1A C5 F0            [12] 2410 	xch	a,b
      000A1C                       2411 00199$:
      000A1C 2C               [12] 2412 	add	a,r4
      000A1D F8               [12] 2413 	mov	r0,a
      000A1E ED               [12] 2414 	mov	a,r5
      000A1F 35 F0            [12] 2415 	addc	a,b
      000A21 F9               [12] 2416 	mov	r1,a
      000A22 88*44            [24] 2417 	mov	_fillRect_PARM_2,r0
      000A24 89*45            [24] 2418 	mov	(_fillRect_PARM_2 + 1),r1
      000A26 A8*53            [24] 2419 	mov	r0,_drawChar_PARM_6
      000A28 79 00            [12] 2420 	mov	r1,#0x00
      000A2A 88*46            [24] 2421 	mov	_fillRect_PARM_3,r0
      000A2C 89*47            [24] 2422 	mov	(_fillRect_PARM_3 + 1),r1
      000A2E 88*48            [24] 2423 	mov	_fillRect_PARM_4,r0
      000A30 89*49            [24] 2424 	mov	(_fillRect_PARM_4 + 1),r1
      000A32 85*4F*4A         [24] 2425 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A35 85*50*4B         [24] 2426 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A38 C0 07            [24] 2427 	push	ar7
      000A3A C0 06            [24] 2428 	push	ar6
      000A3C C0 05            [24] 2429 	push	ar5
      000A3E C0 04            [24] 2430 	push	ar4
      000A40 C0 03            [24] 2431 	push	ar3
      000A42 C0 02            [24] 2432 	push	ar2
      000A44 12r06rB9         [24] 2433 	lcall	_fillRect
      000A47 D0 02            [24] 2434 	pop	ar2
      000A49 D0 03            [24] 2435 	pop	ar3
      000A4B D0 04            [24] 2436 	pop	ar4
      000A4D D0 05            [24] 2437 	pop	ar5
      000A4F D0 06            [24] 2438 	pop	ar6
      000A51 D0 07            [24] 2439 	pop	ar7
      000A53 02r0ArFD         [24] 2440 	ljmp	00119$
      000A56                       2441 00118$:
                                   2442 ;	ecen4330_lcd_v3.c:420: } else if (bg != color)
      000A56 30*00 03         [24] 2443 	jnb	_drawChar_sloc0_1_0,00200$
      000A59 02r0ArFD         [24] 2444 	ljmp	00119$
      000A5C                       2445 00200$:
                                   2446 ;	ecen4330_lcd_v3.c:422: if (size == 1) // default size
      000A5C EA               [12] 2447 	mov	a,r2
      000A5D 60 45            [24] 2448 	jz	00113$
                                   2449 ;	ecen4330_lcd_v3.c:424: drawPixel(x+i, y+j, bg);
      000A5F E5*54            [12] 2450 	mov	a,_drawChar_i_131072_149
      000A61 F8               [12] 2451 	mov	r0,a
      000A62 33               [12] 2452 	rlc	a
      000A63 95 E0            [12] 2453 	subb	a,acc
      000A65 F9               [12] 2454 	mov	r1,a
      000A66 E8               [12] 2455 	mov	a,r0
      000A67 2E               [12] 2456 	add	a,r6
      000A68 F8               [12] 2457 	mov	r0,a
      000A69 E9               [12] 2458 	mov	a,r1
      000A6A 3F               [12] 2459 	addc	a,r7
      000A6B F9               [12] 2460 	mov	r1,a
      000A6C 88 82            [24] 2461 	mov	dpl,r0
      000A6E 89 83            [24] 2462 	mov	dph,r1
      000A70 E5*56            [12] 2463 	mov	a,_drawChar_j_262144_153
      000A72 F8               [12] 2464 	mov	r0,a
      000A73 33               [12] 2465 	rlc	a
      000A74 95 E0            [12] 2466 	subb	a,acc
      000A76 F9               [12] 2467 	mov	r1,a
      000A77 E8               [12] 2468 	mov	a,r0
      000A78 2C               [12] 2469 	add	a,r4
      000A79 F8               [12] 2470 	mov	r0,a
      000A7A E9               [12] 2471 	mov	a,r1
      000A7B 3D               [12] 2472 	addc	a,r5
      000A7C F9               [12] 2473 	mov	r1,a
      000A7D 88*26            [24] 2474 	mov	_drawPixel_PARM_2,r0
      000A7F 89*27            [24] 2475 	mov	(_drawPixel_PARM_2 + 1),r1
      000A81 85*51*28         [24] 2476 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A84 85*52*29         [24] 2477 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A87 C0 07            [24] 2478 	push	ar7
      000A89 C0 06            [24] 2479 	push	ar6
      000A8B C0 05            [24] 2480 	push	ar5
      000A8D C0 04            [24] 2481 	push	ar4
      000A8F C0 03            [24] 2482 	push	ar3
      000A91 C0 02            [24] 2483 	push	ar2
      000A93 12r03r1E         [24] 2484 	lcall	_drawPixel
      000A96 D0 02            [24] 2485 	pop	ar2
      000A98 D0 03            [24] 2486 	pop	ar3
      000A9A D0 04            [24] 2487 	pop	ar4
      000A9C D0 05            [24] 2488 	pop	ar5
      000A9E D0 06            [24] 2489 	pop	ar6
      000AA0 D0 07            [24] 2490 	pop	ar7
      000AA2 80 59            [24] 2491 	sjmp	00119$
      000AA4                       2492 00113$:
                                   2493 ;	ecen4330_lcd_v3.c:428: fillRect(x+i*size, y+j*size, size, size, bg);
      000AA4 85*57 82         [24] 2494 	mov	dpl,_drawChar_sloc1_1_0
      000AA7 85*58 83         [24] 2495 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000AAA C2 D5            [12] 2496 	clr	F0
      000AAC 85*53 F0         [24] 2497 	mov	b,_drawChar_PARM_6
      000AAF E5*56            [12] 2498 	mov	a,_drawChar_j_262144_153
      000AB1 30 E7 04         [24] 2499 	jnb	acc.7,00202$
      000AB4 B2 D5            [12] 2500 	cpl	F0
      000AB6 F4               [12] 2501 	cpl	a
      000AB7 04               [12] 2502 	inc	a
      000AB8                       2503 00202$:
      000AB8 A4               [48] 2504 	mul	ab
      000AB9 30 D5 0A         [24] 2505 	jnb	F0,00203$
      000ABC F4               [12] 2506 	cpl	a
      000ABD 24 01            [12] 2507 	add	a,#0x01
      000ABF C5 F0            [12] 2508 	xch	a,b
      000AC1 F4               [12] 2509 	cpl	a
      000AC2 34 00            [12] 2510 	addc	a,#0x00
      000AC4 C5 F0            [12] 2511 	xch	a,b
      000AC6                       2512 00203$:
      000AC6 2C               [12] 2513 	add	a,r4
      000AC7 F8               [12] 2514 	mov	r0,a
      000AC8 ED               [12] 2515 	mov	a,r5
      000AC9 35 F0            [12] 2516 	addc	a,b
      000ACB F9               [12] 2517 	mov	r1,a
      000ACC 88*44            [24] 2518 	mov	_fillRect_PARM_2,r0
      000ACE 89*45            [24] 2519 	mov	(_fillRect_PARM_2 + 1),r1
      000AD0 A8*53            [24] 2520 	mov	r0,_drawChar_PARM_6
      000AD2 79 00            [12] 2521 	mov	r1,#0x00
      000AD4 88*46            [24] 2522 	mov	_fillRect_PARM_3,r0
      000AD6 89*47            [24] 2523 	mov	(_fillRect_PARM_3 + 1),r1
      000AD8 88*48            [24] 2524 	mov	_fillRect_PARM_4,r0
      000ADA 89*49            [24] 2525 	mov	(_fillRect_PARM_4 + 1),r1
      000ADC 85*51*4A         [24] 2526 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000ADF 85*52*4B         [24] 2527 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000AE2 C0 07            [24] 2528 	push	ar7
      000AE4 C0 06            [24] 2529 	push	ar6
      000AE6 C0 05            [24] 2530 	push	ar5
      000AE8 C0 04            [24] 2531 	push	ar4
      000AEA C0 03            [24] 2532 	push	ar3
      000AEC C0 02            [24] 2533 	push	ar2
      000AEE 12r06rB9         [24] 2534 	lcall	_fillRect
      000AF1 D0 02            [24] 2535 	pop	ar2
      000AF3 D0 03            [24] 2536 	pop	ar3
      000AF5 D0 04            [24] 2537 	pop	ar4
      000AF7 D0 05            [24] 2538 	pop	ar5
      000AF9 D0 06            [24] 2539 	pop	ar6
      000AFB D0 07            [24] 2540 	pop	ar7
      000AFD                       2541 00119$:
                                   2542 ;	ecen4330_lcd_v3.c:432: line >>= 1;
      000AFD E5*55            [12] 2543 	mov	a,_drawChar_line_196608_150
      000AFF C3               [12] 2544 	clr	c
      000B00 13               [12] 2545 	rrc	a
      000B01 F5*55            [12] 2546 	mov	_drawChar_line_196608_150,a
                                   2547 ;	ecen4330_lcd_v3.c:409: for (int8_t j = 0; j<8; j++)
      000B03 05*56            [12] 2548 	inc	_drawChar_j_262144_153
      000B05 02r09r9D         [24] 2549 	ljmp	00123$
      000B08                       2550 00127$:
                                   2551 ;	ecen4330_lcd_v3.c:396: for (int8_t i=0; i<6; i++ )
      000B08 05*54            [12] 2552 	inc	_drawChar_i_131072_149
                                   2553 ;	ecen4330_lcd_v3.c:436: }
      000B0A 02r09r15         [24] 2554 	ljmp	00126$
                                   2555 ;------------------------------------------------------------
                                   2556 ;Allocation info for local variables in function 'write'
                                   2557 ;------------------------------------------------------------
                                   2558 ;c                         Allocated to registers r7 
                                   2559 ;------------------------------------------------------------
                                   2560 ;	ecen4330_lcd_v3.c:438: void write (uint8_t c)//write a character at setted coordinates after setting location and colour
                                   2561 ;	-----------------------------------------
                                   2562 ;	 function write
                                   2563 ;	-----------------------------------------
      000B0D                       2564 _write:
      000B0D AF 82            [24] 2565 	mov	r7,dpl
                                   2566 ;	ecen4330_lcd_v3.c:440: if (c == '\n')
      000B0F BF 0A 26         [24] 2567 	cjne	r7,#0x0a,00105$
                                   2568 ;	ecen4330_lcd_v3.c:442: cursor_y += textsize*8;
      000B12 AD*1C            [24] 2569 	mov	r5,_textsize
      000B14 E4               [12] 2570 	clr	a
      000B15 C4               [12] 2571 	swap	a
      000B16 03               [12] 2572 	rr	a
      000B17 54 F8            [12] 2573 	anl	a,#0xf8
      000B19 CD               [12] 2574 	xch	a,r5
      000B1A C4               [12] 2575 	swap	a
      000B1B 03               [12] 2576 	rr	a
      000B1C CD               [12] 2577 	xch	a,r5
      000B1D 6D               [12] 2578 	xrl	a,r5
      000B1E CD               [12] 2579 	xch	a,r5
      000B1F 54 F8            [12] 2580 	anl	a,#0xf8
      000B21 CD               [12] 2581 	xch	a,r5
      000B22 6D               [12] 2582 	xrl	a,r5
      000B23 FE               [12] 2583 	mov	r6,a
      000B24 AB*1A            [24] 2584 	mov	r3,_cursor_y
      000B26 AC*1B            [24] 2585 	mov	r4,(_cursor_y + 1)
      000B28 ED               [12] 2586 	mov	a,r5
      000B29 2B               [12] 2587 	add	a,r3
      000B2A FB               [12] 2588 	mov	r3,a
      000B2B EE               [12] 2589 	mov	a,r6
      000B2C 3C               [12] 2590 	addc	a,r4
      000B2D FC               [12] 2591 	mov	r4,a
      000B2E 8B*1A            [24] 2592 	mov	_cursor_y,r3
      000B30 8C*1B            [24] 2593 	mov	(_cursor_y + 1),r4
                                   2594 ;	ecen4330_lcd_v3.c:443: cursor_x  = 0;
      000B32 E4               [12] 2595 	clr	a
      000B33 F5*18            [12] 2596 	mov	_cursor_x,a
      000B35 F5*19            [12] 2597 	mov	(_cursor_x + 1),a
      000B37 22               [24] 2598 	ret
      000B38                       2599 00105$:
                                   2600 ;	ecen4330_lcd_v3.c:445: else if (c == '\r')
      000B38 BF 0D 01         [24] 2601 	cjne	r7,#0x0d,00119$
      000B3B 22               [24] 2602 	ret
      000B3C                       2603 00119$:
                                   2604 ;	ecen4330_lcd_v3.c:451: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B3C 85*1A*4C         [24] 2605 	mov	_drawChar_PARM_2,_cursor_y
      000B3F 85*1B*4D         [24] 2606 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B42 8F*4E            [24] 2607 	mov	_drawChar_PARM_3,r7
      000B44 85*1E*4F         [24] 2608 	mov	_drawChar_PARM_4,_textcolor
      000B47 85*1F*50         [24] 2609 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B4A 85*20*51         [24] 2610 	mov	_drawChar_PARM_5,_textbgcolor
      000B4D 85*21*52         [24] 2611 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B50 85*1C*53         [24] 2612 	mov	_drawChar_PARM_6,_textsize
      000B53 85*18 82         [24] 2613 	mov	dpl,_cursor_x
      000B56 85*19 83         [24] 2614 	mov	dph,(_cursor_x + 1)
      000B59 12r08r7F         [24] 2615 	lcall	_drawChar
                                   2616 ;	ecen4330_lcd_v3.c:452: cursor_x += textsize*6;
      000B5C 85*1C*00         [24] 2617 	mov	__mulint_PARM_2,_textsize
      000B5F 75*01 00         [24] 2618 	mov	(__mulint_PARM_2 + 1),#0x00
      000B62 90 00 06         [24] 2619 	mov	dptr,#0x0006
      000B65 12r00r00         [24] 2620 	lcall	__mulint
      000B68 AE 82            [24] 2621 	mov	r6,dpl
      000B6A AF 83            [24] 2622 	mov	r7,dph
      000B6C AC*18            [24] 2623 	mov	r4,_cursor_x
      000B6E AD*19            [24] 2624 	mov	r5,(_cursor_x + 1)
      000B70 EE               [12] 2625 	mov	a,r6
      000B71 2C               [12] 2626 	add	a,r4
      000B72 FC               [12] 2627 	mov	r4,a
      000B73 EF               [12] 2628 	mov	a,r7
      000B74 3D               [12] 2629 	addc	a,r5
      000B75 FD               [12] 2630 	mov	r5,a
      000B76 8C*18            [24] 2631 	mov	_cursor_x,r4
      000B78 8D*19            [24] 2632 	mov	(_cursor_x + 1),r5
                                   2633 ;	ecen4330_lcd_v3.c:454: }
      000B7A 22               [24] 2634 	ret
                                   2635 ;------------------------------------------------------------
                                   2636 ;Allocation info for local variables in function 'LCD_string_write'
                                   2637 ;------------------------------------------------------------
                                   2638 ;str                       Allocated to registers r5 r6 r7 
                                   2639 ;i                         Allocated to registers r3 r4 
                                   2640 ;------------------------------------------------------------
                                   2641 ;	ecen4330_lcd_v3.c:456: void LCD_string_write (int8_t *str)
                                   2642 ;	-----------------------------------------
                                   2643 ;	 function LCD_string_write
                                   2644 ;	-----------------------------------------
      000B7B                       2645 _LCD_string_write:
      000B7B AD 82            [24] 2646 	mov	r5,dpl
      000B7D AE 83            [24] 2647 	mov	r6,dph
      000B7F AF F0            [24] 2648 	mov	r7,b
                                   2649 ;	ecen4330_lcd_v3.c:459: for (i=0;str[i]!=0;i++)	/* Send each char of string till the NULL */
      000B81 7B 00            [12] 2650 	mov	r3,#0x00
      000B83 7C 00            [12] 2651 	mov	r4,#0x00
      000B85                       2652 00103$:
      000B85 EB               [12] 2653 	mov	a,r3
      000B86 2D               [12] 2654 	add	a,r5
      000B87 F8               [12] 2655 	mov	r0,a
      000B88 EC               [12] 2656 	mov	a,r4
      000B89 3E               [12] 2657 	addc	a,r6
      000B8A F9               [12] 2658 	mov	r1,a
      000B8B 8F 02            [24] 2659 	mov	ar2,r7
      000B8D 88 82            [24] 2660 	mov	dpl,r0
      000B8F 89 83            [24] 2661 	mov	dph,r1
      000B91 8A F0            [24] 2662 	mov	b,r2
      000B93 12r00r00         [24] 2663 	lcall	__gptrget
      000B96 FA               [12] 2664 	mov	r2,a
      000B97 60 20            [24] 2665 	jz	00105$
                                   2666 ;	ecen4330_lcd_v3.c:461: write(str[i]);	/* Call transmit data function */
      000B99 8A 82            [24] 2667 	mov	dpl,r2
      000B9B C0 07            [24] 2668 	push	ar7
      000B9D C0 06            [24] 2669 	push	ar6
      000B9F C0 05            [24] 2670 	push	ar5
      000BA1 C0 04            [24] 2671 	push	ar4
      000BA3 C0 03            [24] 2672 	push	ar3
      000BA5 12r0Br0D         [24] 2673 	lcall	_write
      000BA8 D0 03            [24] 2674 	pop	ar3
      000BAA D0 04            [24] 2675 	pop	ar4
      000BAC D0 05            [24] 2676 	pop	ar5
      000BAE D0 06            [24] 2677 	pop	ar6
      000BB0 D0 07            [24] 2678 	pop	ar7
                                   2679 ;	ecen4330_lcd_v3.c:459: for (i=0;str[i]!=0;i++)	/* Send each char of string till the NULL */
      000BB2 0B               [12] 2680 	inc	r3
      000BB3 BB 00 CF         [24] 2681 	cjne	r3,#0x00,00103$
      000BB6 0C               [12] 2682 	inc	r4
      000BB7 80 CC            [24] 2683 	sjmp	00103$
      000BB9                       2684 00105$:
                                   2685 ;	ecen4330_lcd_v3.c:463: }
      000BB9 22               [24] 2686 	ret
                                   2687 ;------------------------------------------------------------
                                   2688 ;Allocation info for local variables in function 'testRAM'
                                   2689 ;------------------------------------------------------------
                                   2690 ;d                         Allocated to registers r7 
                                   2691 ;i                         Allocated to registers r3 r4 r5 r6 
                                   2692 ;ram_address               Allocated to registers 
                                   2693 ;------------------------------------------------------------
                                   2694 ;	ecen4330_lcd_v3.c:468: void testRAM (uint8_t d) {
                                   2695 ;	-----------------------------------------
                                   2696 ;	 function testRAM
                                   2697 ;	-----------------------------------------
      000BBA                       2698 _testRAM:
      000BBA AF 82            [24] 2699 	mov	r7,dpl
                                   2700 ;	ecen4330_lcd_v3.c:472: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BBC 7B 00            [12] 2701 	mov	r3,#0x00
      000BBE 7C 00            [12] 2702 	mov	r4,#0x00
      000BC0 7D 00            [12] 2703 	mov	r5,#0x00
      000BC2 7E 00            [12] 2704 	mov	r6,#0x00
      000BC4                       2705 00102$:
                                   2706 ;	ecen4330_lcd_v3.c:473: IOM = 0;
                                   2707 ;	assignBit
      000BC4 C2 B4            [12] 2708 	clr	_P3_4
                                   2709 ;	ecen4330_lcd_v3.c:474: ram_address = (uint8_t __xdata*)(i);
      000BC6 8B 82            [24] 2710 	mov	dpl,r3
      000BC8 8C 83            [24] 2711 	mov	dph,r4
                                   2712 ;	ecen4330_lcd_v3.c:475: *ram_address = d;
      000BCA EF               [12] 2713 	mov	a,r7
      000BCB F0               [24] 2714 	movx	@dptr,a
                                   2715 ;	ecen4330_lcd_v3.c:476: IOM = 1;
                                   2716 ;	assignBit
      000BCC D2 B4            [12] 2717 	setb	_P3_4
                                   2718 ;	ecen4330_lcd_v3.c:472: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BCE 0B               [12] 2719 	inc	r3
      000BCF BB 00 09         [24] 2720 	cjne	r3,#0x00,00111$
      000BD2 0C               [12] 2721 	inc	r4
      000BD3 BC 00 05         [24] 2722 	cjne	r4,#0x00,00111$
      000BD6 0D               [12] 2723 	inc	r5
      000BD7 BD 00 01         [24] 2724 	cjne	r5,#0x00,00111$
      000BDA 0E               [12] 2725 	inc	r6
      000BDB                       2726 00111$:
      000BDB C3               [12] 2727 	clr	c
      000BDC EB               [12] 2728 	mov	a,r3
      000BDD 94 FF            [12] 2729 	subb	a,#0xff
      000BDF EC               [12] 2730 	mov	a,r4
      000BE0 94 FF            [12] 2731 	subb	a,#0xff
      000BE2 ED               [12] 2732 	mov	a,r5
      000BE3 94 00            [12] 2733 	subb	a,#0x00
      000BE5 EE               [12] 2734 	mov	a,r6
      000BE6 94 00            [12] 2735 	subb	a,#0x00
      000BE8 40 DA            [24] 2736 	jc	00102$
                                   2737 ;	ecen4330_lcd_v3.c:479: }
      000BEA 22               [24] 2738 	ret
                                   2739 ;------------------------------------------------------------
                                   2740 ;Allocation info for local variables in function 'freeType'
                                   2741 ;------------------------------------------------------------
                                   2742 ;count                     Allocated to registers r7 
                                   2743 ;d                         Allocated to registers 
                                   2744 ;------------------------------------------------------------
                                   2745 ;	ecen4330_lcd_v3.c:481: void freeType () {
                                   2746 ;	-----------------------------------------
                                   2747 ;	 function freeType
                                   2748 ;	-----------------------------------------
      000BEB                       2749 _freeType:
                                   2750 ;	ecen4330_lcd_v3.c:482: uint8_t count = 0;
      000BEB 7F 00            [12] 2751 	mov	r7,#0x00
                                   2752 ;	ecen4330_lcd_v3.c:484: while (1) {
      000BED                       2753 00105$:
                                   2754 ;	ecen4330_lcd_v3.c:487: if (count == 8) {
      000BED BF 08 0E         [24] 2755 	cjne	r7,#0x08,00102$
                                   2756 ;	ecen4330_lcd_v3.c:489: count = 0;
      000BF0 7F 00            [12] 2757 	mov	r7,#0x00
                                   2758 ;	ecen4330_lcd_v3.c:490: write(d);
      000BF2 75 82 0A         [24] 2759 	mov	dpl,#0x0a
      000BF5 C0 07            [24] 2760 	push	ar7
      000BF7 12r0Br0D         [24] 2761 	lcall	_write
      000BFA D0 07            [24] 2762 	pop	ar7
      000BFC 80 0A            [24] 2763 	sjmp	00103$
      000BFE                       2764 00102$:
                                   2765 ;	ecen4330_lcd_v3.c:493: d = keyDetect();
      000BFE C0 07            [24] 2766 	push	ar7
      000C00 12r0Cr0B         [24] 2767 	lcall	_keyDetect
                                   2768 ;	ecen4330_lcd_v3.c:494: write(d);
      000C03 12r0Br0D         [24] 2769 	lcall	_write
      000C06 D0 07            [24] 2770 	pop	ar7
      000C08                       2771 00103$:
                                   2772 ;	ecen4330_lcd_v3.c:497: count++;
      000C08 0F               [12] 2773 	inc	r7
                                   2774 ;	ecen4330_lcd_v3.c:499: }
      000C09 80 E2            [24] 2775 	sjmp	00105$
                                   2776 ;------------------------------------------------------------
                                   2777 ;Allocation info for local variables in function 'keyDetect'
                                   2778 ;------------------------------------------------------------
                                   2779 ;	ecen4330_lcd_v3.c:501: uint8_t keyDetect () {
                                   2780 ;	-----------------------------------------
                                   2781 ;	 function keyDetect
                                   2782 ;	-----------------------------------------
      000C0B                       2783 _keyDetect:
                                   2784 ;	ecen4330_lcd_v3.c:502: __KEYPAD_PORT__ = 0xF0;			/*set port direction as input-output*/
      000C0B 75 90 F0         [24] 2785 	mov	_P1,#0xf0
                                   2786 ;	ecen4330_lcd_v3.c:503: do
      000C0E                       2787 00101$:
                                   2788 ;	ecen4330_lcd_v3.c:505: __KEYPAD_PORT__ = 0xF0;
      000C0E 75 90 F0         [24] 2789 	mov	_P1,#0xf0
                                   2790 ;	ecen4330_lcd_v3.c:506: colloc = __KEYPAD_PORT__;
      000C11 85 90*10         [24] 2791 	mov	_colloc,_P1
                                   2792 ;	ecen4330_lcd_v3.c:507: colloc&= 0xF0;	/* mask port for column read only */
      000C14 53*10 F0         [24] 2793 	anl	_colloc,#0xf0
                                   2794 ;	ecen4330_lcd_v3.c:508: } while (colloc != 0xF0);		/* read status of column */
      000C17 74 F0            [12] 2795 	mov	a,#0xf0
      000C19 B5*10 F2         [24] 2796 	cjne	a,_colloc,00101$
                                   2797 ;	ecen4330_lcd_v3.c:512: do
      000C1C                       2798 00104$:
                                   2799 ;	ecen4330_lcd_v3.c:514: delay(20);	/* 20ms key debounce time */
      000C1C 90 00 14         [24] 2800 	mov	dptr,#0x0014
      000C1F 12r00r10         [24] 2801 	lcall	_delay
                                   2802 ;	ecen4330_lcd_v3.c:515: colloc = (__KEYPAD_PORT__ & 0xF0);	/* read status of column */
      000C22 E5 90            [12] 2803 	mov	a,_P1
      000C24 54 F0            [12] 2804 	anl	a,#0xf0
      000C26 F5*10            [12] 2805 	mov	_colloc,a
                                   2806 ;	ecen4330_lcd_v3.c:516: } while (colloc == 0xF0);	/* check for any key press */
      000C28 74 F0            [12] 2807 	mov	a,#0xf0
      000C2A B5*10 02         [24] 2808 	cjne	a,_colloc,00178$
      000C2D 80 ED            [24] 2809 	sjmp	00104$
      000C2F                       2810 00178$:
                                   2811 ;	ecen4330_lcd_v3.c:518: delay(1);
      000C2F 90 00 01         [24] 2812 	mov	dptr,#0x0001
      000C32 12r00r10         [24] 2813 	lcall	_delay
                                   2814 ;	ecen4330_lcd_v3.c:519: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C35 E5 90            [12] 2815 	mov	a,_P1
      000C37 54 F0            [12] 2816 	anl	a,#0xf0
      000C39 F5*10            [12] 2817 	mov	_colloc,a
                                   2818 ;	ecen4330_lcd_v3.c:520: } while (colloc == 0xF0);
      000C3B 74 F0            [12] 2819 	mov	a,#0xf0
      000C3D B5*10 02         [24] 2820 	cjne	a,_colloc,00179$
      000C40 80 DA            [24] 2821 	sjmp	00104$
      000C42                       2822 00179$:
                                   2823 ;	ecen4330_lcd_v3.c:522: while (1)
      000C42                       2824 00119$:
                                   2825 ;	ecen4330_lcd_v3.c:525: __KEYPAD_PORT__= 0xFE;											/* check for pressed key in 1st row */
      000C42 75 90 FE         [24] 2826 	mov	_P1,#0xfe
                                   2827 ;	ecen4330_lcd_v3.c:526: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C45 E5 90            [12] 2828 	mov	a,_P1
      000C47 54 F0            [12] 2829 	anl	a,#0xf0
      000C49 F5*10            [12] 2830 	mov	_colloc,a
                                   2831 ;	ecen4330_lcd_v3.c:527: if (colloc != 0xF0)
      000C4B 74 F0            [12] 2832 	mov	a,#0xf0
      000C4D B5*10 02         [24] 2833 	cjne	a,_colloc,00180$
      000C50 80 05            [24] 2834 	sjmp	00111$
      000C52                       2835 00180$:
                                   2836 ;	ecen4330_lcd_v3.c:529: rowloc = 0;
      000C52 75*11 00         [24] 2837 	mov	_rowloc,#0x00
                                   2838 ;	ecen4330_lcd_v3.c:530: break;
      000C55 80 3D            [24] 2839 	sjmp	00120$
      000C57                       2840 00111$:
                                   2841 ;	ecen4330_lcd_v3.c:533: __KEYPAD_PORT__ = 0xFD;									/* check for pressed key in 2nd row */
      000C57 75 90 FD         [24] 2842 	mov	_P1,#0xfd
                                   2843 ;	ecen4330_lcd_v3.c:534: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C5A E5 90            [12] 2844 	mov	a,_P1
      000C5C 54 F0            [12] 2845 	anl	a,#0xf0
      000C5E F5*10            [12] 2846 	mov	_colloc,a
                                   2847 ;	ecen4330_lcd_v3.c:535: if (colloc != 0xF0)
      000C60 74 F0            [12] 2848 	mov	a,#0xf0
      000C62 B5*10 02         [24] 2849 	cjne	a,_colloc,00181$
      000C65 80 05            [24] 2850 	sjmp	00113$
      000C67                       2851 00181$:
                                   2852 ;	ecen4330_lcd_v3.c:537: rowloc = 1;
      000C67 75*11 01         [24] 2853 	mov	_rowloc,#0x01
                                   2854 ;	ecen4330_lcd_v3.c:538: break;
      000C6A 80 28            [24] 2855 	sjmp	00120$
      000C6C                       2856 00113$:
                                   2857 ;	ecen4330_lcd_v3.c:541: __KEYPAD_PORT__ = 0xFB;			/* check for pressed key in 3rd row */
      000C6C 75 90 FB         [24] 2858 	mov	_P1,#0xfb
                                   2859 ;	ecen4330_lcd_v3.c:542: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C6F E5 90            [12] 2860 	mov	a,_P1
      000C71 54 F0            [12] 2861 	anl	a,#0xf0
      000C73 F5*10            [12] 2862 	mov	_colloc,a
                                   2863 ;	ecen4330_lcd_v3.c:543: if (colloc != 0xF0)
      000C75 74 F0            [12] 2864 	mov	a,#0xf0
      000C77 B5*10 02         [24] 2865 	cjne	a,_colloc,00182$
      000C7A 80 05            [24] 2866 	sjmp	00115$
      000C7C                       2867 00182$:
                                   2868 ;	ecen4330_lcd_v3.c:545: rowloc = 2;
      000C7C 75*11 02         [24] 2869 	mov	_rowloc,#0x02
                                   2870 ;	ecen4330_lcd_v3.c:546: break;
      000C7F 80 13            [24] 2871 	sjmp	00120$
      000C81                       2872 00115$:
                                   2873 ;	ecen4330_lcd_v3.c:549: __KEYPAD_PORT__ = 0xF7;			/* check for pressed key in 4th row */
      000C81 75 90 F7         [24] 2874 	mov	_P1,#0xf7
                                   2875 ;	ecen4330_lcd_v3.c:550: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C84 E5 90            [12] 2876 	mov	a,_P1
      000C86 54 F0            [12] 2877 	anl	a,#0xf0
      000C88 F5*10            [12] 2878 	mov	_colloc,a
                                   2879 ;	ecen4330_lcd_v3.c:551: if (colloc != 0xF0)
      000C8A 74 F0            [12] 2880 	mov	a,#0xf0
      000C8C B5*10 02         [24] 2881 	cjne	a,_colloc,00183$
      000C8F 80 B1            [24] 2882 	sjmp	00119$
      000C91                       2883 00183$:
                                   2884 ;	ecen4330_lcd_v3.c:553: rowloc = 3;
      000C91 75*11 03         [24] 2885 	mov	_rowloc,#0x03
                                   2886 ;	ecen4330_lcd_v3.c:554: break;
      000C94                       2887 00120$:
                                   2888 ;	ecen4330_lcd_v3.c:558: if (colloc == 0xE0)
      000C94 74 E0            [12] 2889 	mov	a,#0xe0
      000C96 B5*10 0C         [24] 2890 	cjne	a,_colloc,00128$
                                   2891 ;	ecen4330_lcd_v3.c:560: return (keypad[rowloc][0]);
      000C99 E5*11            [12] 2892 	mov	a,_rowloc
      000C9B 25*11            [12] 2893 	add	a,_rowloc
      000C9D 25 E0            [12] 2894 	add	a,acc
      000C9F 24r00            [12] 2895 	add	a,#_keypad
      000CA1 F9               [12] 2896 	mov	r1,a
      000CA2 87 82            [24] 2897 	mov	dpl,@r1
      000CA4 22               [24] 2898 	ret
      000CA5                       2899 00128$:
                                   2900 ;	ecen4330_lcd_v3.c:562: else if (colloc == 0xD0)
      000CA5 74 D0            [12] 2901 	mov	a,#0xd0
      000CA7 B5*10 0D         [24] 2902 	cjne	a,_colloc,00125$
                                   2903 ;	ecen4330_lcd_v3.c:564: return (keypad[rowloc][1]);
      000CAA E5*11            [12] 2904 	mov	a,_rowloc
      000CAC 25*11            [12] 2905 	add	a,_rowloc
      000CAE 25 E0            [12] 2906 	add	a,acc
      000CB0 24r00            [12] 2907 	add	a,#_keypad
      000CB2 04               [12] 2908 	inc	a
      000CB3 F9               [12] 2909 	mov	r1,a
      000CB4 87 82            [24] 2910 	mov	dpl,@r1
      000CB6 22               [24] 2911 	ret
      000CB7                       2912 00125$:
                                   2913 ;	ecen4330_lcd_v3.c:566: else if (colloc == 0xB0)
      000CB7 74 B0            [12] 2914 	mov	a,#0xb0
      000CB9 B5*10 0E         [24] 2915 	cjne	a,_colloc,00122$
                                   2916 ;	ecen4330_lcd_v3.c:568: return (keypad[rowloc][2]);
      000CBC E5*11            [12] 2917 	mov	a,_rowloc
      000CBE 25*11            [12] 2918 	add	a,_rowloc
      000CC0 25 E0            [12] 2919 	add	a,acc
      000CC2 24r00            [12] 2920 	add	a,#_keypad
      000CC4 24 02            [12] 2921 	add	a,#0x02
      000CC6 F9               [12] 2922 	mov	r1,a
      000CC7 87 82            [24] 2923 	mov	dpl,@r1
      000CC9 22               [24] 2924 	ret
      000CCA                       2925 00122$:
                                   2926 ;	ecen4330_lcd_v3.c:572: return (keypad[rowloc][3]);
      000CCA E5*11            [12] 2927 	mov	a,_rowloc
      000CCC 25*11            [12] 2928 	add	a,_rowloc
      000CCE 25 E0            [12] 2929 	add	a,acc
      000CD0 24r00            [12] 2930 	add	a,#_keypad
      000CD2 24 03            [12] 2931 	add	a,#0x03
      000CD4 F9               [12] 2932 	mov	r1,a
      000CD5 87 82            [24] 2933 	mov	dpl,@r1
                                   2934 ;	ecen4330_lcd_v3.c:574: }
      000CD7 22               [24] 2935 	ret
                                   2936 ;------------------------------------------------------------
                                   2937 ;Allocation info for local variables in function 'reverse'
                                   2938 ;------------------------------------------------------------
                                   2939 ;d                         Allocated to registers r7 
                                   2940 ;rev                       Allocated to registers r5 r6 
                                   2941 ;val                       Allocated to registers r1 r2 
                                   2942 ;------------------------------------------------------------
                                   2943 ;	ecen4330_lcd_v3.c:576: uint16_t reverse (uint8_t d) {
                                   2944 ;	-----------------------------------------
                                   2945 ;	 function reverse
                                   2946 ;	-----------------------------------------
      000CD8                       2947 _reverse:
      000CD8 AF 82            [24] 2948 	mov	r7,dpl
                                   2949 ;	ecen4330_lcd_v3.c:577: uint16_t rev = 0;
      000CDA 7D 00            [12] 2950 	mov	r5,#0x00
      000CDC 7E 00            [12] 2951 	mov	r6,#0x00
                                   2952 ;	ecen4330_lcd_v3.c:579: while (d >= 1) {
      000CDE                       2953 00101$:
      000CDE BF 01 00         [24] 2954 	cjne	r7,#0x01,00114$
      000CE1                       2955 00114$:
      000CE1 40 5F            [24] 2956 	jc	00103$
                                   2957 ;	ecen4330_lcd_v3.c:581: val = d%10;
      000CE3 8F 03            [24] 2958 	mov	ar3,r7
      000CE5 7C 00            [12] 2959 	mov	r4,#0x00
      000CE7 75*00 0A         [24] 2960 	mov	__modsint_PARM_2,#0x0a
                                   2961 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000CEA 8C*01            [24] 2962 	mov	(__modsint_PARM_2 + 1),r4
      000CEC 8B 82            [24] 2963 	mov	dpl,r3
      000CEE 8C 83            [24] 2964 	mov	dph,r4
      000CF0 C0 06            [24] 2965 	push	ar6
      000CF2 C0 05            [24] 2966 	push	ar5
      000CF4 C0 04            [24] 2967 	push	ar4
      000CF6 C0 03            [24] 2968 	push	ar3
      000CF8 12r00r00         [24] 2969 	lcall	__modsint
      000CFB A9 82            [24] 2970 	mov	r1,dpl
      000CFD AA 83            [24] 2971 	mov	r2,dph
      000CFF D0 03            [24] 2972 	pop	ar3
      000D01 D0 04            [24] 2973 	pop	ar4
                                   2974 ;	ecen4330_lcd_v3.c:582: d = d/10;
      000D03 75*00 0A         [24] 2975 	mov	__divsint_PARM_2,#0x0a
      000D06 75*01 00         [24] 2976 	mov	(__divsint_PARM_2 + 1),#0x00
      000D09 8B 82            [24] 2977 	mov	dpl,r3
      000D0B 8C 83            [24] 2978 	mov	dph,r4
      000D0D C0 02            [24] 2979 	push	ar2
      000D0F C0 01            [24] 2980 	push	ar1
      000D11 12r00r00         [24] 2981 	lcall	__divsint
      000D14 AB 82            [24] 2982 	mov	r3,dpl
      000D16 D0 01            [24] 2983 	pop	ar1
      000D18 D0 02            [24] 2984 	pop	ar2
      000D1A D0 05            [24] 2985 	pop	ar5
      000D1C D0 06            [24] 2986 	pop	ar6
      000D1E 8B 07            [24] 2987 	mov	ar7,r3
                                   2988 ;	ecen4330_lcd_v3.c:583: rev = rev * 10 + val;
      000D20 8D*00            [24] 2989 	mov	__mulint_PARM_2,r5
      000D22 8E*01            [24] 2990 	mov	(__mulint_PARM_2 + 1),r6
      000D24 90 00 0A         [24] 2991 	mov	dptr,#0x000a
      000D27 C0 07            [24] 2992 	push	ar7
      000D29 C0 02            [24] 2993 	push	ar2
      000D2B C0 01            [24] 2994 	push	ar1
      000D2D 12r00r00         [24] 2995 	lcall	__mulint
      000D30 AB 82            [24] 2996 	mov	r3,dpl
      000D32 AC 83            [24] 2997 	mov	r4,dph
      000D34 D0 01            [24] 2998 	pop	ar1
      000D36 D0 02            [24] 2999 	pop	ar2
      000D38 D0 07            [24] 3000 	pop	ar7
      000D3A E9               [12] 3001 	mov	a,r1
      000D3B 2B               [12] 3002 	add	a,r3
      000D3C FD               [12] 3003 	mov	r5,a
      000D3D EA               [12] 3004 	mov	a,r2
      000D3E 3C               [12] 3005 	addc	a,r4
      000D3F FE               [12] 3006 	mov	r6,a
      000D40 80 9C            [24] 3007 	sjmp	00101$
      000D42                       3008 00103$:
                                   3009 ;	ecen4330_lcd_v3.c:585: return rev;
      000D42 8D 82            [24] 3010 	mov	dpl,r5
      000D44 8E 83            [24] 3011 	mov	dph,r6
                                   3012 ;	ecen4330_lcd_v3.c:586: }
      000D46 22               [24] 3013 	ret
                                   3014 ;------------------------------------------------------------
                                   3015 ;Allocation info for local variables in function 'asciiToDec'
                                   3016 ;------------------------------------------------------------
                                   3017 ;d                         Allocated to registers 
                                   3018 ;val                       Allocated to registers r2 
                                   3019 ;id                        Allocated to registers r6 r7 
                                   3020 ;------------------------------------------------------------
                                   3021 ;	ecen4330_lcd_v3.c:588: void asciiToDec (uint8_t d) {
                                   3022 ;	-----------------------------------------
                                   3023 ;	 function asciiToDec
                                   3024 ;	-----------------------------------------
      000D47                       3025 _asciiToDec:
                                   3026 ;	ecen4330_lcd_v3.c:591: id = reverse(d);
      000D47 12r0CrD8         [24] 3027 	lcall	_reverse
      000D4A AE 82            [24] 3028 	mov	r6,dpl
      000D4C AF 83            [24] 3029 	mov	r7,dph
                                   3030 ;	ecen4330_lcd_v3.c:592: while (id >= 1){
      000D4E                       3031 00101$:
      000D4E 8E 04            [24] 3032 	mov	ar4,r6
      000D50 8F 05            [24] 3033 	mov	ar5,r7
      000D52 C3               [12] 3034 	clr	c
      000D53 EC               [12] 3035 	mov	a,r4
      000D54 94 01            [12] 3036 	subb	a,#0x01
      000D56 ED               [12] 3037 	mov	a,r5
      000D57 94 00            [12] 3038 	subb	a,#0x00
      000D59 40 42            [24] 3039 	jc	00103$
                                   3040 ;	ecen4330_lcd_v3.c:594: val = id % 10;
      000D5B 75*00 0A         [24] 3041 	mov	__moduint_PARM_2,#0x0a
      000D5E 75*01 00         [24] 3042 	mov	(__moduint_PARM_2 + 1),#0x00
      000D61 8C 82            [24] 3043 	mov	dpl,r4
      000D63 8D 83            [24] 3044 	mov	dph,r5
      000D65 C0 05            [24] 3045 	push	ar5
      000D67 C0 04            [24] 3046 	push	ar4
      000D69 12r00r00         [24] 3047 	lcall	__moduint
      000D6C AA 82            [24] 3048 	mov	r2,dpl
      000D6E D0 04            [24] 3049 	pop	ar4
      000D70 D0 05            [24] 3050 	pop	ar5
                                   3051 ;	ecen4330_lcd_v3.c:595: id = id/10;
      000D72 75*00 0A         [24] 3052 	mov	__divuint_PARM_2,#0x0a
      000D75 75*01 00         [24] 3053 	mov	(__divuint_PARM_2 + 1),#0x00
      000D78 8C 82            [24] 3054 	mov	dpl,r4
      000D7A 8D 83            [24] 3055 	mov	dph,r5
      000D7C C0 02            [24] 3056 	push	ar2
      000D7E 12r00r00         [24] 3057 	lcall	__divuint
      000D81 AC 82            [24] 3058 	mov	r4,dpl
      000D83 AD 83            [24] 3059 	mov	r5,dph
      000D85 D0 02            [24] 3060 	pop	ar2
      000D87 8C 06            [24] 3061 	mov	ar6,r4
      000D89 8D 07            [24] 3062 	mov	ar7,r5
                                   3063 ;	ecen4330_lcd_v3.c:596: write(val + '0');
      000D8B 74 30            [12] 3064 	mov	a,#0x30
      000D8D 2A               [12] 3065 	add	a,r2
      000D8E F5 82            [12] 3066 	mov	dpl,a
      000D90 C0 07            [24] 3067 	push	ar7
      000D92 C0 06            [24] 3068 	push	ar6
      000D94 12r0Br0D         [24] 3069 	lcall	_write
      000D97 D0 06            [24] 3070 	pop	ar6
      000D99 D0 07            [24] 3071 	pop	ar7
      000D9B 80 B1            [24] 3072 	sjmp	00101$
      000D9D                       3073 00103$:
                                   3074 ;	ecen4330_lcd_v3.c:598: write('\n');
      000D9D 75 82 0A         [24] 3075 	mov	dpl,#0x0a
                                   3076 ;	ecen4330_lcd_v3.c:599: }
      000DA0 02r0Br0D         [24] 3077 	ljmp	_write
                                   3078 ;------------------------------------------------------------
                                   3079 ;Allocation info for local variables in function 'asciiToHex'
                                   3080 ;------------------------------------------------------------
                                   3081 ;d                         Allocated to registers r7 
                                   3082 ;val                       Allocated to registers r2 
                                   3083 ;store                     Allocated with name '_asciiToHex_store_65536_198'
                                   3084 ;i                         Allocated to registers r6 
                                   3085 ;------------------------------------------------------------
                                   3086 ;	ecen4330_lcd_v3.c:601: void asciiToHex (uint8_t d) {
                                   3087 ;	-----------------------------------------
                                   3088 ;	 function asciiToHex
                                   3089 ;	-----------------------------------------
      000DA3                       3090 _asciiToHex:
      000DA3 AF 82            [24] 3091 	mov	r7,dpl
                                   3092 ;	ecen4330_lcd_v3.c:605: store[0] = 0;
      000DA5 75*5B 00         [24] 3093 	mov	_asciiToHex_store_65536_198,#0x00
                                   3094 ;	ecen4330_lcd_v3.c:606: store[1] = 0;
      000DA8 75*5C 00         [24] 3095 	mov	(_asciiToHex_store_65536_198 + 0x0001),#0x00
                                   3096 ;	ecen4330_lcd_v3.c:607: while (d >= 1){
      000DAB 7E 00            [12] 3097 	mov	r6,#0x00
      000DAD                       3098 00104$:
      000DAD BF 01 00         [24] 3099 	cjne	r7,#0x01,00122$
      000DB0                       3100 00122$:
      000DB0 40 5A            [24] 3101 	jc	00106$
                                   3102 ;	ecen4330_lcd_v3.c:609: val = d % 16;
      000DB2 8F 04            [24] 3103 	mov	ar4,r7
      000DB4 7D 00            [12] 3104 	mov	r5,#0x00
      000DB6 74 0F            [12] 3105 	mov	a,#0x0f
      000DB8 5C               [12] 3106 	anl	a,r4
      000DB9 FA               [12] 3107 	mov	r2,a
                                   3108 ;	ecen4330_lcd_v3.c:610: d = d/16;
      000DBA 75*00 10         [24] 3109 	mov	__divsint_PARM_2,#0x10
                                   3110 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000DBD 8D*01            [24] 3111 	mov	(__divsint_PARM_2 + 1),r5
      000DBF 8C 82            [24] 3112 	mov	dpl,r4
      000DC1 8D 83            [24] 3113 	mov	dph,r5
      000DC3 C0 06            [24] 3114 	push	ar6
      000DC5 C0 02            [24] 3115 	push	ar2
      000DC7 12r00r00         [24] 3116 	lcall	__divsint
      000DCA AC 82            [24] 3117 	mov	r4,dpl
      000DCC D0 02            [24] 3118 	pop	ar2
      000DCE D0 06            [24] 3119 	pop	ar6
      000DD0 8C 07            [24] 3120 	mov	ar7,r4
                                   3121 ;	ecen4330_lcd_v3.c:611: if (val <= 9) {
      000DD2 EA               [12] 3122 	mov	a,r2
      000DD3 24 F6            [12] 3123 	add	a,#0xff - 0x09
      000DD5 40 0C            [24] 3124 	jc	00102$
                                   3125 ;	ecen4330_lcd_v3.c:613: store[i] = val + '0';
      000DD7 EE               [12] 3126 	mov	a,r6
      000DD8 24r5B            [12] 3127 	add	a,#_asciiToHex_store_65536_198
      000DDA F9               [12] 3128 	mov	r1,a
      000DDB 8A 05            [24] 3129 	mov	ar5,r2
      000DDD 74 30            [12] 3130 	mov	a,#0x30
      000DDF 2D               [12] 3131 	add	a,r5
      000DE0 F7               [12] 3132 	mov	@r1,a
      000DE1 80 26            [24] 3133 	sjmp	00103$
      000DE3                       3134 00102$:
                                   3135 ;	ecen4330_lcd_v3.c:616: store[i] = (val%10) + 'A';
      000DE3 EE               [12] 3136 	mov	a,r6
      000DE4 24r5B            [12] 3137 	add	a,#_asciiToHex_store_65536_198
      000DE6 F9               [12] 3138 	mov	r1,a
      000DE7 7D 00            [12] 3139 	mov	r5,#0x00
      000DE9 75*00 0A         [24] 3140 	mov	__modsint_PARM_2,#0x0a
                                   3141 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DEC 8D*01            [24] 3142 	mov	(__modsint_PARM_2 + 1),r5
      000DEE 8A 82            [24] 3143 	mov	dpl,r2
      000DF0 8D 83            [24] 3144 	mov	dph,r5
      000DF2 C0 07            [24] 3145 	push	ar7
      000DF4 C0 06            [24] 3146 	push	ar6
      000DF6 C0 01            [24] 3147 	push	ar1
      000DF8 12r00r00         [24] 3148 	lcall	__modsint
      000DFB AC 82            [24] 3149 	mov	r4,dpl
      000DFD AD 83            [24] 3150 	mov	r5,dph
      000DFF D0 01            [24] 3151 	pop	ar1
      000E01 D0 06            [24] 3152 	pop	ar6
      000E03 D0 07            [24] 3153 	pop	ar7
      000E05 74 41            [12] 3154 	mov	a,#0x41
      000E07 2C               [12] 3155 	add	a,r4
      000E08 F7               [12] 3156 	mov	@r1,a
      000E09                       3157 00103$:
                                   3158 ;	ecen4330_lcd_v3.c:618: i++;
      000E09 0E               [12] 3159 	inc	r6
      000E0A 80 A1            [24] 3160 	sjmp	00104$
      000E0C                       3161 00106$:
                                   3162 ;	ecen4330_lcd_v3.c:620: write(store[1]);
      000E0C 85*5C 82         [24] 3163 	mov	dpl,(_asciiToHex_store_65536_198 + 0x0001)
      000E0F 12r0Br0D         [24] 3164 	lcall	_write
                                   3165 ;	ecen4330_lcd_v3.c:621: write(store[0]);
      000E12 85*5B 82         [24] 3166 	mov	dpl,_asciiToHex_store_65536_198
                                   3167 ;	ecen4330_lcd_v3.c:623: }
      000E15 02r0Br0D         [24] 3168 	ljmp	_write
                                   3169 ;------------------------------------------------------------
                                   3170 ;Allocation info for local variables in function 'writeSomeLines'
                                   3171 ;------------------------------------------------------------
                                   3172 ;	ecen4330_lcd_v3.c:625: void writeSomeLines () {
                                   3173 ;	-----------------------------------------
                                   3174 ;	 function writeSomeLines
                                   3175 ;	-----------------------------------------
      000E18                       3176 _writeSomeLines:
                                   3177 ;	ecen4330_lcd_v3.c:626: fillScreen(RED);
      000E18 90 F8 00         [24] 3178 	mov	dptr,#0xf800
      000E1B 12r07r99         [24] 3179 	lcall	_fillScreen
                                   3180 ;	ecen4330_lcd_v3.c:628: delay(20);
      000E1E 90 00 14         [24] 3181 	mov	dptr,#0x0014
      000E21 12r00r10         [24] 3182 	lcall	_delay
                                   3183 ;	ecen4330_lcd_v3.c:629: fillScreen(GREEN);
      000E24 90 07 E0         [24] 3184 	mov	dptr,#0x07e0
      000E27 12r07r99         [24] 3185 	lcall	_fillScreen
                                   3186 ;	ecen4330_lcd_v3.c:631: delay(20);
      000E2A 90 00 14         [24] 3187 	mov	dptr,#0x0014
      000E2D 12r00r10         [24] 3188 	lcall	_delay
                                   3189 ;	ecen4330_lcd_v3.c:634: setRotation(0);
      000E30 75 82 00         [24] 3190 	mov	dpl,#0x00
      000E33 12r00rD7         [24] 3191 	lcall	_setRotation
                                   3192 ;	ecen4330_lcd_v3.c:635: fillScreen(BLACK);
      000E36 90 00 00         [24] 3193 	mov	dptr,#0x0000
      000E39 12r07r99         [24] 3194 	lcall	_fillScreen
                                   3195 ;	ecen4330_lcd_v3.c:636: testCircles(20, RED);
      000E3C 75*3E 00         [24] 3196 	mov	_testCircles_PARM_2,#0x00
      000E3F 75*3F F8         [24] 3197 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000E42 75 82 14         [24] 3198 	mov	dpl,#0x14
      000E45 12r06r28         [24] 3199 	lcall	_testCircles
                                   3200 ;	ecen4330_lcd_v3.c:637: delay(100);
      000E48 90 00 64         [24] 3201 	mov	dptr,#0x0064
      000E4B 12r00r10         [24] 3202 	lcall	_delay
                                   3203 ;	ecen4330_lcd_v3.c:638: fillScreen(BLACK);
      000E4E 90 00 00         [24] 3204 	mov	dptr,#0x0000
      000E51 12r07r99         [24] 3205 	lcall	_fillScreen
                                   3206 ;	ecen4330_lcd_v3.c:639: setTextSize(5);
      000E54 75 82 05         [24] 3207 	mov	dpl,#0x05
      000E57 12r00rBF         [24] 3208 	lcall	_setTextSize
                                   3209 ;	ecen4330_lcd_v3.c:640: setTextColor(CYAN, BLACK);
      000E5A E4               [12] 3210 	clr	a
      000E5B F5*00            [12] 3211 	mov	_setTextColor_PARM_2,a
      000E5D F5*01            [12] 3212 	mov	(_setTextColor_PARM_2 + 1),a
      000E5F 90 07 FF         [24] 3213 	mov	dptr,#0x07ff
      000E62 12r00rB2         [24] 3214 	lcall	_setTextColor
                                   3215 ;	ecen4330_lcd_v3.c:641: LCD_string_write("Welcome\n");
      000E65 90r04rFB         [24] 3216 	mov	dptr,#___str_0
      000E68 75 F0 80         [24] 3217 	mov	b,#0x80
      000E6B 12r0Br7B         [24] 3218 	lcall	_LCD_string_write
                                   3219 ;	ecen4330_lcd_v3.c:642: setTextSize(3);
      000E6E 75 82 03         [24] 3220 	mov	dpl,#0x03
      000E71 12r00rBF         [24] 3221 	lcall	_setTextSize
                                   3222 ;	ecen4330_lcd_v3.c:643: LCD_string_write("ECEN-4330\n");
      000E74 90r05r04         [24] 3223 	mov	dptr,#___str_1
      000E77 75 F0 80         [24] 3224 	mov	b,#0x80
      000E7A 12r0Br7B         [24] 3225 	lcall	_LCD_string_write
                                   3226 ;	ecen4330_lcd_v3.c:644: LCD_string_write("Rotation 0");
      000E7D 90r05r0F         [24] 3227 	mov	dptr,#___str_2
      000E80 75 F0 80         [24] 3228 	mov	b,#0x80
      000E83 12r0Br7B         [24] 3229 	lcall	_LCD_string_write
                                   3230 ;	ecen4330_lcd_v3.c:645: delay(200);
      000E86 90 00 C8         [24] 3231 	mov	dptr,#0x00c8
      000E89 12r00r10         [24] 3232 	lcall	_delay
                                   3233 ;	ecen4330_lcd_v3.c:646: fillScreen(BLACK);
      000E8C 90 00 00         [24] 3234 	mov	dptr,#0x0000
      000E8F 12r07r99         [24] 3235 	lcall	_fillScreen
                                   3236 ;	ecen4330_lcd_v3.c:647: setRotation(1);
      000E92 75 82 01         [24] 3237 	mov	dpl,#0x01
      000E95 12r00rD7         [24] 3238 	lcall	_setRotation
                                   3239 ;	ecen4330_lcd_v3.c:648: setCursor(0,0);
      000E98 E4               [12] 3240 	clr	a
      000E99 F5*00            [12] 3241 	mov	_setCursor_PARM_2,a
      000E9B F5*01            [12] 3242 	mov	(_setCursor_PARM_2 + 1),a
      000E9D 90 00 00         [24] 3243 	mov	dptr,#0x0000
      000EA0 12r00rA5         [24] 3244 	lcall	_setCursor
                                   3245 ;	ecen4330_lcd_v3.c:649: LCD_string_write("Rotation 1");
      000EA3 90r05r1A         [24] 3246 	mov	dptr,#___str_3
      000EA6 75 F0 80         [24] 3247 	mov	b,#0x80
      000EA9 12r0Br7B         [24] 3248 	lcall	_LCD_string_write
                                   3249 ;	ecen4330_lcd_v3.c:650: delay(500);
      000EAC 90 01 F4         [24] 3250 	mov	dptr,#0x01f4
      000EAF 12r00r10         [24] 3251 	lcall	_delay
                                   3252 ;	ecen4330_lcd_v3.c:651: fillScreen(BLACK);
      000EB2 90 00 00         [24] 3253 	mov	dptr,#0x0000
      000EB5 12r07r99         [24] 3254 	lcall	_fillScreen
                                   3255 ;	ecen4330_lcd_v3.c:652: setRotation(2);
      000EB8 75 82 02         [24] 3256 	mov	dpl,#0x02
      000EBB 12r00rD7         [24] 3257 	lcall	_setRotation
                                   3258 ;	ecen4330_lcd_v3.c:653: setCursor(0,0);
      000EBE E4               [12] 3259 	clr	a
      000EBF F5*00            [12] 3260 	mov	_setCursor_PARM_2,a
      000EC1 F5*01            [12] 3261 	mov	(_setCursor_PARM_2 + 1),a
      000EC3 90 00 00         [24] 3262 	mov	dptr,#0x0000
      000EC6 12r00rA5         [24] 3263 	lcall	_setCursor
                                   3264 ;	ecen4330_lcd_v3.c:654: LCD_string_write("Rotation 2");
      000EC9 90r05r25         [24] 3265 	mov	dptr,#___str_4
      000ECC 75 F0 80         [24] 3266 	mov	b,#0x80
      000ECF 12r0Br7B         [24] 3267 	lcall	_LCD_string_write
                                   3268 ;	ecen4330_lcd_v3.c:655: delay(500);
      000ED2 90 01 F4         [24] 3269 	mov	dptr,#0x01f4
      000ED5 12r00r10         [24] 3270 	lcall	_delay
                                   3271 ;	ecen4330_lcd_v3.c:656: fillScreen(BLACK);
      000ED8 90 00 00         [24] 3272 	mov	dptr,#0x0000
      000EDB 12r07r99         [24] 3273 	lcall	_fillScreen
                                   3274 ;	ecen4330_lcd_v3.c:657: setRotation(3);
      000EDE 75 82 03         [24] 3275 	mov	dpl,#0x03
      000EE1 12r00rD7         [24] 3276 	lcall	_setRotation
                                   3277 ;	ecen4330_lcd_v3.c:658: setCursor(0,0);
      000EE4 E4               [12] 3278 	clr	a
      000EE5 F5*00            [12] 3279 	mov	_setCursor_PARM_2,a
      000EE7 F5*01            [12] 3280 	mov	(_setCursor_PARM_2 + 1),a
      000EE9 90 00 00         [24] 3281 	mov	dptr,#0x0000
      000EEC 12r00rA5         [24] 3282 	lcall	_setCursor
                                   3283 ;	ecen4330_lcd_v3.c:659: delay(200);
      000EEF 90 00 C8         [24] 3284 	mov	dptr,#0x00c8
      000EF2 12r00r10         [24] 3285 	lcall	_delay
                                   3286 ;	ecen4330_lcd_v3.c:660: LCD_string_write("Rotation 3");
      000EF5 90r05r30         [24] 3287 	mov	dptr,#___str_5
      000EF8 75 F0 80         [24] 3288 	mov	b,#0x80
      000EFB 12r0Br7B         [24] 3289 	lcall	_LCD_string_write
                                   3290 ;	ecen4330_lcd_v3.c:661: delay(200);
      000EFE 90 00 C8         [24] 3291 	mov	dptr,#0x00c8
                                   3292 ;	ecen4330_lcd_v3.c:662: }
      000F01 02r00r10         [24] 3293 	ljmp	_delay
                                   3294 ;------------------------------------------------------------
                                   3295 ;Allocation info for local variables in function 'keypadSeven'
                                   3296 ;------------------------------------------------------------
                                   3297 ;KPin                      Allocated to registers 
                                   3298 ;------------------------------------------------------------
                                   3299 ;	keypadSeven.c:1: void keypadSeven() {
                                   3300 ;	-----------------------------------------
                                   3301 ;	 function keypadSeven
                                   3302 ;	-----------------------------------------
      000F04                       3303 _keypadSeven:
                                   3304 ;	keypadSeven.c:8: KPin = keyDetect();
      000F04 12r0Cr0B         [24] 3305 	lcall	_keyDetect
      000F07 85 82 E0         [24] 3306 	mov	_ACC,dpl
                                   3307 ;	keypadSeven.c:23: __endasm;
                                   3308 ;	look up table for 7 segment display
                                   3309 ;	0 1 2 3 4 5 6 7 8 9 A B C D E F
      000F0A                       3310 	0002$:
      000F0A 3F 06 5B 4F 66 6D 7D  3311 	.DB 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
             07 7F 6F 77 7C 39 5E
             79 71
      000F1A                       3312 	 0000$:
      000F1A 90r0Fr0A         [24] 3313 	MOV	DPTR, #0002$ ; move the 7-segment display lut into the DPTR
      000F1D 93               [24] 3314 	MOVC	A, @A+DPTR ; move the correct output to A
      000F1E F5 80            [12] 3315 	MOV	P0, A ; output the output to Port 0
      000F20 80 F8            [24] 3316 	SJMP	0000$ ; do it again (INFINITE LOOP)
                                   3317 ;	keypadSeven.c:24: }
      000F22 22               [24] 3318 	ret
                                   3319 ;------------------------------------------------------------
                                   3320 ;Allocation info for local variables in function 'main'
                                   3321 ;------------------------------------------------------------
                                   3322 ;	main.c:14: void main() {
                                   3323 ;	-----------------------------------------
                                   3324 ;	 function main
                                   3325 ;	-----------------------------------------
      000F23                       3326 _main:
                                   3327 ;	main.c:17: keypadSeven();
      000F23 12r0Fr04         [24] 3328 	lcall	_keypadSeven
                                   3329 ;	main.c:45: while (1) {
      000F26                       3330 00102$:
                                   3331 ;	main.c:47: }
      000F26 80 FE            [24] 3332 	sjmp	00102$
                                   3333 	.area CSEG    (CODE)
                                   3334 	.area CONST   (CODE)
      000000                       3335 _font:
      000000 00                    3336 	.db #0x00	; 0
      000001 00                    3337 	.db #0x00	; 0
      000002 00                    3338 	.db #0x00	; 0
      000003 00                    3339 	.db #0x00	; 0
      000004 00                    3340 	.db #0x00	; 0
      000005 3E                    3341 	.db #0x3e	; 62
      000006 5B                    3342 	.db #0x5b	; 91
      000007 4F                    3343 	.db #0x4f	; 79	'O'
      000008 5B                    3344 	.db #0x5b	; 91
      000009 3E                    3345 	.db #0x3e	; 62
      00000A 3E                    3346 	.db #0x3e	; 62
      00000B 6B                    3347 	.db #0x6b	; 107	'k'
      00000C 4F                    3348 	.db #0x4f	; 79	'O'
      00000D 6B                    3349 	.db #0x6b	; 107	'k'
      00000E 3E                    3350 	.db #0x3e	; 62
      00000F 1C                    3351 	.db #0x1c	; 28
      000010 3E                    3352 	.db #0x3e	; 62
      000011 7C                    3353 	.db #0x7c	; 124
      000012 3E                    3354 	.db #0x3e	; 62
      000013 1C                    3355 	.db #0x1c	; 28
      000014 18                    3356 	.db #0x18	; 24
      000015 3C                    3357 	.db #0x3c	; 60
      000016 7E                    3358 	.db #0x7e	; 126
      000017 3C                    3359 	.db #0x3c	; 60
      000018 18                    3360 	.db #0x18	; 24
      000019 1C                    3361 	.db #0x1c	; 28
      00001A 57                    3362 	.db #0x57	; 87	'W'
      00001B 7D                    3363 	.db #0x7d	; 125
      00001C 57                    3364 	.db #0x57	; 87	'W'
      00001D 1C                    3365 	.db #0x1c	; 28
      00001E 1C                    3366 	.db #0x1c	; 28
      00001F 5E                    3367 	.db #0x5e	; 94
      000020 7F                    3368 	.db #0x7f	; 127
      000021 5E                    3369 	.db #0x5e	; 94
      000022 1C                    3370 	.db #0x1c	; 28
      000023 00                    3371 	.db #0x00	; 0
      000024 18                    3372 	.db #0x18	; 24
      000025 3C                    3373 	.db #0x3c	; 60
      000026 18                    3374 	.db #0x18	; 24
      000027 00                    3375 	.db #0x00	; 0
      000028 FF                    3376 	.db #0xff	; 255
      000029 E7                    3377 	.db #0xe7	; 231
      00002A C3                    3378 	.db #0xc3	; 195
      00002B E7                    3379 	.db #0xe7	; 231
      00002C FF                    3380 	.db #0xff	; 255
      00002D 00                    3381 	.db #0x00	; 0
      00002E 18                    3382 	.db #0x18	; 24
      00002F 24                    3383 	.db #0x24	; 36
      000030 18                    3384 	.db #0x18	; 24
      000031 00                    3385 	.db #0x00	; 0
      000032 FF                    3386 	.db #0xff	; 255
      000033 E7                    3387 	.db #0xe7	; 231
      000034 DB                    3388 	.db #0xdb	; 219
      000035 E7                    3389 	.db #0xe7	; 231
      000036 FF                    3390 	.db #0xff	; 255
      000037 30                    3391 	.db #0x30	; 48	'0'
      000038 48                    3392 	.db #0x48	; 72	'H'
      000039 3A                    3393 	.db #0x3a	; 58
      00003A 06                    3394 	.db #0x06	; 6
      00003B 0E                    3395 	.db #0x0e	; 14
      00003C 26                    3396 	.db #0x26	; 38
      00003D 29                    3397 	.db #0x29	; 41
      00003E 79                    3398 	.db #0x79	; 121	'y'
      00003F 29                    3399 	.db #0x29	; 41
      000040 26                    3400 	.db #0x26	; 38
      000041 40                    3401 	.db #0x40	; 64
      000042 7F                    3402 	.db #0x7f	; 127
      000043 05                    3403 	.db #0x05	; 5
      000044 05                    3404 	.db #0x05	; 5
      000045 07                    3405 	.db #0x07	; 7
      000046 40                    3406 	.db #0x40	; 64
      000047 7F                    3407 	.db #0x7f	; 127
      000048 05                    3408 	.db #0x05	; 5
      000049 25                    3409 	.db #0x25	; 37
      00004A 3F                    3410 	.db #0x3f	; 63
      00004B 5A                    3411 	.db #0x5a	; 90	'Z'
      00004C 3C                    3412 	.db #0x3c	; 60
      00004D E7                    3413 	.db #0xe7	; 231
      00004E 3C                    3414 	.db #0x3c	; 60
      00004F 5A                    3415 	.db #0x5a	; 90	'Z'
      000050 7F                    3416 	.db #0x7f	; 127
      000051 3E                    3417 	.db #0x3e	; 62
      000052 1C                    3418 	.db #0x1c	; 28
      000053 1C                    3419 	.db #0x1c	; 28
      000054 08                    3420 	.db #0x08	; 8
      000055 08                    3421 	.db #0x08	; 8
      000056 1C                    3422 	.db #0x1c	; 28
      000057 1C                    3423 	.db #0x1c	; 28
      000058 3E                    3424 	.db #0x3e	; 62
      000059 7F                    3425 	.db #0x7f	; 127
      00005A 14                    3426 	.db #0x14	; 20
      00005B 22                    3427 	.db #0x22	; 34
      00005C 7F                    3428 	.db #0x7f	; 127
      00005D 22                    3429 	.db #0x22	; 34
      00005E 14                    3430 	.db #0x14	; 20
      00005F 5F                    3431 	.db #0x5f	; 95
      000060 5F                    3432 	.db #0x5f	; 95
      000061 00                    3433 	.db #0x00	; 0
      000062 5F                    3434 	.db #0x5f	; 95
      000063 5F                    3435 	.db #0x5f	; 95
      000064 06                    3436 	.db #0x06	; 6
      000065 09                    3437 	.db #0x09	; 9
      000066 7F                    3438 	.db #0x7f	; 127
      000067 01                    3439 	.db #0x01	; 1
      000068 7F                    3440 	.db #0x7f	; 127
      000069 00                    3441 	.db #0x00	; 0
      00006A 66                    3442 	.db #0x66	; 102	'f'
      00006B 89                    3443 	.db #0x89	; 137
      00006C 95                    3444 	.db #0x95	; 149
      00006D 6A                    3445 	.db #0x6a	; 106	'j'
      00006E 60                    3446 	.db #0x60	; 96
      00006F 60                    3447 	.db #0x60	; 96
      000070 60                    3448 	.db #0x60	; 96
      000071 60                    3449 	.db #0x60	; 96
      000072 60                    3450 	.db #0x60	; 96
      000073 94                    3451 	.db #0x94	; 148
      000074 A2                    3452 	.db #0xa2	; 162
      000075 FF                    3453 	.db #0xff	; 255
      000076 A2                    3454 	.db #0xa2	; 162
      000077 94                    3455 	.db #0x94	; 148
      000078 08                    3456 	.db #0x08	; 8
      000079 04                    3457 	.db #0x04	; 4
      00007A 7E                    3458 	.db #0x7e	; 126
      00007B 04                    3459 	.db #0x04	; 4
      00007C 08                    3460 	.db #0x08	; 8
      00007D 10                    3461 	.db #0x10	; 16
      00007E 20                    3462 	.db #0x20	; 32
      00007F 7E                    3463 	.db #0x7e	; 126
      000080 20                    3464 	.db #0x20	; 32
      000081 10                    3465 	.db #0x10	; 16
      000082 08                    3466 	.db #0x08	; 8
      000083 08                    3467 	.db #0x08	; 8
      000084 2A                    3468 	.db #0x2a	; 42
      000085 1C                    3469 	.db #0x1c	; 28
      000086 08                    3470 	.db #0x08	; 8
      000087 08                    3471 	.db #0x08	; 8
      000088 1C                    3472 	.db #0x1c	; 28
      000089 2A                    3473 	.db #0x2a	; 42
      00008A 08                    3474 	.db #0x08	; 8
      00008B 08                    3475 	.db #0x08	; 8
      00008C 1E                    3476 	.db #0x1e	; 30
      00008D 10                    3477 	.db #0x10	; 16
      00008E 10                    3478 	.db #0x10	; 16
      00008F 10                    3479 	.db #0x10	; 16
      000090 10                    3480 	.db #0x10	; 16
      000091 0C                    3481 	.db #0x0c	; 12
      000092 1E                    3482 	.db #0x1e	; 30
      000093 0C                    3483 	.db #0x0c	; 12
      000094 1E                    3484 	.db #0x1e	; 30
      000095 0C                    3485 	.db #0x0c	; 12
      000096 30                    3486 	.db #0x30	; 48	'0'
      000097 38                    3487 	.db #0x38	; 56	'8'
      000098 3E                    3488 	.db #0x3e	; 62
      000099 38                    3489 	.db #0x38	; 56	'8'
      00009A 30                    3490 	.db #0x30	; 48	'0'
      00009B 06                    3491 	.db #0x06	; 6
      00009C 0E                    3492 	.db #0x0e	; 14
      00009D 3E                    3493 	.db #0x3e	; 62
      00009E 0E                    3494 	.db #0x0e	; 14
      00009F 06                    3495 	.db #0x06	; 6
      0000A0 00                    3496 	.db #0x00	; 0
      0000A1 00                    3497 	.db #0x00	; 0
      0000A2 00                    3498 	.db #0x00	; 0
      0000A3 00                    3499 	.db #0x00	; 0
      0000A4 00                    3500 	.db #0x00	; 0
      0000A5 00                    3501 	.db #0x00	; 0
      0000A6 00                    3502 	.db #0x00	; 0
      0000A7 5F                    3503 	.db #0x5f	; 95
      0000A8 00                    3504 	.db #0x00	; 0
      0000A9 00                    3505 	.db #0x00	; 0
      0000AA 00                    3506 	.db #0x00	; 0
      0000AB 07                    3507 	.db #0x07	; 7
      0000AC 00                    3508 	.db #0x00	; 0
      0000AD 07                    3509 	.db #0x07	; 7
      0000AE 00                    3510 	.db #0x00	; 0
      0000AF 14                    3511 	.db #0x14	; 20
      0000B0 7F                    3512 	.db #0x7f	; 127
      0000B1 14                    3513 	.db #0x14	; 20
      0000B2 7F                    3514 	.db #0x7f	; 127
      0000B3 14                    3515 	.db #0x14	; 20
      0000B4 24                    3516 	.db #0x24	; 36
      0000B5 2A                    3517 	.db #0x2a	; 42
      0000B6 7F                    3518 	.db #0x7f	; 127
      0000B7 2A                    3519 	.db #0x2a	; 42
      0000B8 12                    3520 	.db #0x12	; 18
      0000B9 23                    3521 	.db #0x23	; 35
      0000BA 13                    3522 	.db #0x13	; 19
      0000BB 08                    3523 	.db #0x08	; 8
      0000BC 64                    3524 	.db #0x64	; 100	'd'
      0000BD 62                    3525 	.db #0x62	; 98	'b'
      0000BE 36                    3526 	.db #0x36	; 54	'6'
      0000BF 49                    3527 	.db #0x49	; 73	'I'
      0000C0 56                    3528 	.db #0x56	; 86	'V'
      0000C1 20                    3529 	.db #0x20	; 32
      0000C2 50                    3530 	.db #0x50	; 80	'P'
      0000C3 00                    3531 	.db #0x00	; 0
      0000C4 08                    3532 	.db #0x08	; 8
      0000C5 07                    3533 	.db #0x07	; 7
      0000C6 03                    3534 	.db #0x03	; 3
      0000C7 00                    3535 	.db #0x00	; 0
      0000C8 00                    3536 	.db #0x00	; 0
      0000C9 1C                    3537 	.db #0x1c	; 28
      0000CA 22                    3538 	.db #0x22	; 34
      0000CB 41                    3539 	.db #0x41	; 65	'A'
      0000CC 00                    3540 	.db #0x00	; 0
      0000CD 00                    3541 	.db #0x00	; 0
      0000CE 41                    3542 	.db #0x41	; 65	'A'
      0000CF 22                    3543 	.db #0x22	; 34
      0000D0 1C                    3544 	.db #0x1c	; 28
      0000D1 00                    3545 	.db #0x00	; 0
      0000D2 2A                    3546 	.db #0x2a	; 42
      0000D3 1C                    3547 	.db #0x1c	; 28
      0000D4 7F                    3548 	.db #0x7f	; 127
      0000D5 1C                    3549 	.db #0x1c	; 28
      0000D6 2A                    3550 	.db #0x2a	; 42
      0000D7 08                    3551 	.db #0x08	; 8
      0000D8 08                    3552 	.db #0x08	; 8
      0000D9 3E                    3553 	.db #0x3e	; 62
      0000DA 08                    3554 	.db #0x08	; 8
      0000DB 08                    3555 	.db #0x08	; 8
      0000DC 00                    3556 	.db #0x00	; 0
      0000DD 80                    3557 	.db #0x80	; 128
      0000DE 70                    3558 	.db #0x70	; 112	'p'
      0000DF 30                    3559 	.db #0x30	; 48	'0'
      0000E0 00                    3560 	.db #0x00	; 0
      0000E1 08                    3561 	.db #0x08	; 8
      0000E2 08                    3562 	.db #0x08	; 8
      0000E3 08                    3563 	.db #0x08	; 8
      0000E4 08                    3564 	.db #0x08	; 8
      0000E5 08                    3565 	.db #0x08	; 8
      0000E6 00                    3566 	.db #0x00	; 0
      0000E7 00                    3567 	.db #0x00	; 0
      0000E8 60                    3568 	.db #0x60	; 96
      0000E9 60                    3569 	.db #0x60	; 96
      0000EA 00                    3570 	.db #0x00	; 0
      0000EB 20                    3571 	.db #0x20	; 32
      0000EC 10                    3572 	.db #0x10	; 16
      0000ED 08                    3573 	.db #0x08	; 8
      0000EE 04                    3574 	.db #0x04	; 4
      0000EF 02                    3575 	.db #0x02	; 2
      0000F0 3E                    3576 	.db #0x3e	; 62
      0000F1 51                    3577 	.db #0x51	; 81	'Q'
      0000F2 49                    3578 	.db #0x49	; 73	'I'
      0000F3 45                    3579 	.db #0x45	; 69	'E'
      0000F4 3E                    3580 	.db #0x3e	; 62
      0000F5 00                    3581 	.db #0x00	; 0
      0000F6 42                    3582 	.db #0x42	; 66	'B'
      0000F7 7F                    3583 	.db #0x7f	; 127
      0000F8 40                    3584 	.db #0x40	; 64
      0000F9 00                    3585 	.db #0x00	; 0
      0000FA 72                    3586 	.db #0x72	; 114	'r'
      0000FB 49                    3587 	.db #0x49	; 73	'I'
      0000FC 49                    3588 	.db #0x49	; 73	'I'
      0000FD 49                    3589 	.db #0x49	; 73	'I'
      0000FE 46                    3590 	.db #0x46	; 70	'F'
      0000FF 21                    3591 	.db #0x21	; 33
      000100 41                    3592 	.db #0x41	; 65	'A'
      000101 49                    3593 	.db #0x49	; 73	'I'
      000102 4D                    3594 	.db #0x4d	; 77	'M'
      000103 33                    3595 	.db #0x33	; 51	'3'
      000104 18                    3596 	.db #0x18	; 24
      000105 14                    3597 	.db #0x14	; 20
      000106 12                    3598 	.db #0x12	; 18
      000107 7F                    3599 	.db #0x7f	; 127
      000108 10                    3600 	.db #0x10	; 16
      000109 27                    3601 	.db #0x27	; 39
      00010A 45                    3602 	.db #0x45	; 69	'E'
      00010B 45                    3603 	.db #0x45	; 69	'E'
      00010C 45                    3604 	.db #0x45	; 69	'E'
      00010D 39                    3605 	.db #0x39	; 57	'9'
      00010E 3C                    3606 	.db #0x3c	; 60
      00010F 4A                    3607 	.db #0x4a	; 74	'J'
      000110 49                    3608 	.db #0x49	; 73	'I'
      000111 49                    3609 	.db #0x49	; 73	'I'
      000112 31                    3610 	.db #0x31	; 49	'1'
      000113 41                    3611 	.db #0x41	; 65	'A'
      000114 21                    3612 	.db #0x21	; 33
      000115 11                    3613 	.db #0x11	; 17
      000116 09                    3614 	.db #0x09	; 9
      000117 07                    3615 	.db #0x07	; 7
      000118 36                    3616 	.db #0x36	; 54	'6'
      000119 49                    3617 	.db #0x49	; 73	'I'
      00011A 49                    3618 	.db #0x49	; 73	'I'
      00011B 49                    3619 	.db #0x49	; 73	'I'
      00011C 36                    3620 	.db #0x36	; 54	'6'
      00011D 46                    3621 	.db #0x46	; 70	'F'
      00011E 49                    3622 	.db #0x49	; 73	'I'
      00011F 49                    3623 	.db #0x49	; 73	'I'
      000120 29                    3624 	.db #0x29	; 41
      000121 1E                    3625 	.db #0x1e	; 30
      000122 00                    3626 	.db #0x00	; 0
      000123 00                    3627 	.db #0x00	; 0
      000124 14                    3628 	.db #0x14	; 20
      000125 00                    3629 	.db #0x00	; 0
      000126 00                    3630 	.db #0x00	; 0
      000127 00                    3631 	.db #0x00	; 0
      000128 40                    3632 	.db #0x40	; 64
      000129 34                    3633 	.db #0x34	; 52	'4'
      00012A 00                    3634 	.db #0x00	; 0
      00012B 00                    3635 	.db #0x00	; 0
      00012C 00                    3636 	.db #0x00	; 0
      00012D 08                    3637 	.db #0x08	; 8
      00012E 14                    3638 	.db #0x14	; 20
      00012F 22                    3639 	.db #0x22	; 34
      000130 41                    3640 	.db #0x41	; 65	'A'
      000131 14                    3641 	.db #0x14	; 20
      000132 14                    3642 	.db #0x14	; 20
      000133 14                    3643 	.db #0x14	; 20
      000134 14                    3644 	.db #0x14	; 20
      000135 14                    3645 	.db #0x14	; 20
      000136 00                    3646 	.db #0x00	; 0
      000137 41                    3647 	.db #0x41	; 65	'A'
      000138 22                    3648 	.db #0x22	; 34
      000139 14                    3649 	.db #0x14	; 20
      00013A 08                    3650 	.db #0x08	; 8
      00013B 02                    3651 	.db #0x02	; 2
      00013C 01                    3652 	.db #0x01	; 1
      00013D 59                    3653 	.db #0x59	; 89	'Y'
      00013E 09                    3654 	.db #0x09	; 9
      00013F 06                    3655 	.db #0x06	; 6
      000140 3E                    3656 	.db #0x3e	; 62
      000141 41                    3657 	.db #0x41	; 65	'A'
      000142 5D                    3658 	.db #0x5d	; 93
      000143 59                    3659 	.db #0x59	; 89	'Y'
      000144 4E                    3660 	.db #0x4e	; 78	'N'
      000145 7C                    3661 	.db #0x7c	; 124
      000146 12                    3662 	.db #0x12	; 18
      000147 11                    3663 	.db #0x11	; 17
      000148 12                    3664 	.db #0x12	; 18
      000149 7C                    3665 	.db #0x7c	; 124
      00014A 7F                    3666 	.db #0x7f	; 127
      00014B 49                    3667 	.db #0x49	; 73	'I'
      00014C 49                    3668 	.db #0x49	; 73	'I'
      00014D 49                    3669 	.db #0x49	; 73	'I'
      00014E 36                    3670 	.db #0x36	; 54	'6'
      00014F 3E                    3671 	.db #0x3e	; 62
      000150 41                    3672 	.db #0x41	; 65	'A'
      000151 41                    3673 	.db #0x41	; 65	'A'
      000152 41                    3674 	.db #0x41	; 65	'A'
      000153 22                    3675 	.db #0x22	; 34
      000154 7F                    3676 	.db #0x7f	; 127
      000155 41                    3677 	.db #0x41	; 65	'A'
      000156 41                    3678 	.db #0x41	; 65	'A'
      000157 41                    3679 	.db #0x41	; 65	'A'
      000158 3E                    3680 	.db #0x3e	; 62
      000159 7F                    3681 	.db #0x7f	; 127
      00015A 49                    3682 	.db #0x49	; 73	'I'
      00015B 49                    3683 	.db #0x49	; 73	'I'
      00015C 49                    3684 	.db #0x49	; 73	'I'
      00015D 41                    3685 	.db #0x41	; 65	'A'
      00015E 7F                    3686 	.db #0x7f	; 127
      00015F 09                    3687 	.db #0x09	; 9
      000160 09                    3688 	.db #0x09	; 9
      000161 09                    3689 	.db #0x09	; 9
      000162 01                    3690 	.db #0x01	; 1
      000163 3E                    3691 	.db #0x3e	; 62
      000164 41                    3692 	.db #0x41	; 65	'A'
      000165 41                    3693 	.db #0x41	; 65	'A'
      000166 51                    3694 	.db #0x51	; 81	'Q'
      000167 73                    3695 	.db #0x73	; 115	's'
      000168 7F                    3696 	.db #0x7f	; 127
      000169 08                    3697 	.db #0x08	; 8
      00016A 08                    3698 	.db #0x08	; 8
      00016B 08                    3699 	.db #0x08	; 8
      00016C 7F                    3700 	.db #0x7f	; 127
      00016D 00                    3701 	.db #0x00	; 0
      00016E 41                    3702 	.db #0x41	; 65	'A'
      00016F 7F                    3703 	.db #0x7f	; 127
      000170 41                    3704 	.db #0x41	; 65	'A'
      000171 00                    3705 	.db #0x00	; 0
      000172 20                    3706 	.db #0x20	; 32
      000173 40                    3707 	.db #0x40	; 64
      000174 41                    3708 	.db #0x41	; 65	'A'
      000175 3F                    3709 	.db #0x3f	; 63
      000176 01                    3710 	.db #0x01	; 1
      000177 7F                    3711 	.db #0x7f	; 127
      000178 08                    3712 	.db #0x08	; 8
      000179 14                    3713 	.db #0x14	; 20
      00017A 22                    3714 	.db #0x22	; 34
      00017B 41                    3715 	.db #0x41	; 65	'A'
      00017C 7F                    3716 	.db #0x7f	; 127
      00017D 40                    3717 	.db #0x40	; 64
      00017E 40                    3718 	.db #0x40	; 64
      00017F 40                    3719 	.db #0x40	; 64
      000180 40                    3720 	.db #0x40	; 64
      000181 7F                    3721 	.db #0x7f	; 127
      000182 02                    3722 	.db #0x02	; 2
      000183 1C                    3723 	.db #0x1c	; 28
      000184 02                    3724 	.db #0x02	; 2
      000185 7F                    3725 	.db #0x7f	; 127
      000186 7F                    3726 	.db #0x7f	; 127
      000187 04                    3727 	.db #0x04	; 4
      000188 08                    3728 	.db #0x08	; 8
      000189 10                    3729 	.db #0x10	; 16
      00018A 7F                    3730 	.db #0x7f	; 127
      00018B 3E                    3731 	.db #0x3e	; 62
      00018C 41                    3732 	.db #0x41	; 65	'A'
      00018D 41                    3733 	.db #0x41	; 65	'A'
      00018E 41                    3734 	.db #0x41	; 65	'A'
      00018F 3E                    3735 	.db #0x3e	; 62
      000190 7F                    3736 	.db #0x7f	; 127
      000191 09                    3737 	.db #0x09	; 9
      000192 09                    3738 	.db #0x09	; 9
      000193 09                    3739 	.db #0x09	; 9
      000194 06                    3740 	.db #0x06	; 6
      000195 3E                    3741 	.db #0x3e	; 62
      000196 41                    3742 	.db #0x41	; 65	'A'
      000197 51                    3743 	.db #0x51	; 81	'Q'
      000198 21                    3744 	.db #0x21	; 33
      000199 5E                    3745 	.db #0x5e	; 94
      00019A 7F                    3746 	.db #0x7f	; 127
      00019B 09                    3747 	.db #0x09	; 9
      00019C 19                    3748 	.db #0x19	; 25
      00019D 29                    3749 	.db #0x29	; 41
      00019E 46                    3750 	.db #0x46	; 70	'F'
      00019F 26                    3751 	.db #0x26	; 38
      0001A0 49                    3752 	.db #0x49	; 73	'I'
      0001A1 49                    3753 	.db #0x49	; 73	'I'
      0001A2 49                    3754 	.db #0x49	; 73	'I'
      0001A3 32                    3755 	.db #0x32	; 50	'2'
      0001A4 03                    3756 	.db #0x03	; 3
      0001A5 01                    3757 	.db #0x01	; 1
      0001A6 7F                    3758 	.db #0x7f	; 127
      0001A7 01                    3759 	.db #0x01	; 1
      0001A8 03                    3760 	.db #0x03	; 3
      0001A9 3F                    3761 	.db #0x3f	; 63
      0001AA 40                    3762 	.db #0x40	; 64
      0001AB 40                    3763 	.db #0x40	; 64
      0001AC 40                    3764 	.db #0x40	; 64
      0001AD 3F                    3765 	.db #0x3f	; 63
      0001AE 1F                    3766 	.db #0x1f	; 31
      0001AF 20                    3767 	.db #0x20	; 32
      0001B0 40                    3768 	.db #0x40	; 64
      0001B1 20                    3769 	.db #0x20	; 32
      0001B2 1F                    3770 	.db #0x1f	; 31
      0001B3 3F                    3771 	.db #0x3f	; 63
      0001B4 40                    3772 	.db #0x40	; 64
      0001B5 38                    3773 	.db #0x38	; 56	'8'
      0001B6 40                    3774 	.db #0x40	; 64
      0001B7 3F                    3775 	.db #0x3f	; 63
      0001B8 63                    3776 	.db #0x63	; 99	'c'
      0001B9 14                    3777 	.db #0x14	; 20
      0001BA 08                    3778 	.db #0x08	; 8
      0001BB 14                    3779 	.db #0x14	; 20
      0001BC 63                    3780 	.db #0x63	; 99	'c'
      0001BD 03                    3781 	.db #0x03	; 3
      0001BE 04                    3782 	.db #0x04	; 4
      0001BF 78                    3783 	.db #0x78	; 120	'x'
      0001C0 04                    3784 	.db #0x04	; 4
      0001C1 03                    3785 	.db #0x03	; 3
      0001C2 61                    3786 	.db #0x61	; 97	'a'
      0001C3 59                    3787 	.db #0x59	; 89	'Y'
      0001C4 49                    3788 	.db #0x49	; 73	'I'
      0001C5 4D                    3789 	.db #0x4d	; 77	'M'
      0001C6 43                    3790 	.db #0x43	; 67	'C'
      0001C7 00                    3791 	.db #0x00	; 0
      0001C8 7F                    3792 	.db #0x7f	; 127
      0001C9 41                    3793 	.db #0x41	; 65	'A'
      0001CA 41                    3794 	.db #0x41	; 65	'A'
      0001CB 41                    3795 	.db #0x41	; 65	'A'
      0001CC 02                    3796 	.db #0x02	; 2
      0001CD 04                    3797 	.db #0x04	; 4
      0001CE 08                    3798 	.db #0x08	; 8
      0001CF 10                    3799 	.db #0x10	; 16
      0001D0 20                    3800 	.db #0x20	; 32
      0001D1 00                    3801 	.db #0x00	; 0
      0001D2 41                    3802 	.db #0x41	; 65	'A'
      0001D3 41                    3803 	.db #0x41	; 65	'A'
      0001D4 41                    3804 	.db #0x41	; 65	'A'
      0001D5 7F                    3805 	.db #0x7f	; 127
      0001D6 04                    3806 	.db #0x04	; 4
      0001D7 02                    3807 	.db #0x02	; 2
      0001D8 01                    3808 	.db #0x01	; 1
      0001D9 02                    3809 	.db #0x02	; 2
      0001DA 04                    3810 	.db #0x04	; 4
      0001DB 40                    3811 	.db #0x40	; 64
      0001DC 40                    3812 	.db #0x40	; 64
      0001DD 40                    3813 	.db #0x40	; 64
      0001DE 40                    3814 	.db #0x40	; 64
      0001DF 40                    3815 	.db #0x40	; 64
      0001E0 00                    3816 	.db #0x00	; 0
      0001E1 03                    3817 	.db #0x03	; 3
      0001E2 07                    3818 	.db #0x07	; 7
      0001E3 08                    3819 	.db #0x08	; 8
      0001E4 00                    3820 	.db #0x00	; 0
      0001E5 20                    3821 	.db #0x20	; 32
      0001E6 54                    3822 	.db #0x54	; 84	'T'
      0001E7 54                    3823 	.db #0x54	; 84	'T'
      0001E8 78                    3824 	.db #0x78	; 120	'x'
      0001E9 40                    3825 	.db #0x40	; 64
      0001EA 7F                    3826 	.db #0x7f	; 127
      0001EB 28                    3827 	.db #0x28	; 40
      0001EC 44                    3828 	.db #0x44	; 68	'D'
      0001ED 44                    3829 	.db #0x44	; 68	'D'
      0001EE 38                    3830 	.db #0x38	; 56	'8'
      0001EF 38                    3831 	.db #0x38	; 56	'8'
      0001F0 44                    3832 	.db #0x44	; 68	'D'
      0001F1 44                    3833 	.db #0x44	; 68	'D'
      0001F2 44                    3834 	.db #0x44	; 68	'D'
      0001F3 28                    3835 	.db #0x28	; 40
      0001F4 38                    3836 	.db #0x38	; 56	'8'
      0001F5 44                    3837 	.db #0x44	; 68	'D'
      0001F6 44                    3838 	.db #0x44	; 68	'D'
      0001F7 28                    3839 	.db #0x28	; 40
      0001F8 7F                    3840 	.db #0x7f	; 127
      0001F9 38                    3841 	.db #0x38	; 56	'8'
      0001FA 54                    3842 	.db #0x54	; 84	'T'
      0001FB 54                    3843 	.db #0x54	; 84	'T'
      0001FC 54                    3844 	.db #0x54	; 84	'T'
      0001FD 18                    3845 	.db #0x18	; 24
      0001FE 00                    3846 	.db #0x00	; 0
      0001FF 08                    3847 	.db #0x08	; 8
      000200 7E                    3848 	.db #0x7e	; 126
      000201 09                    3849 	.db #0x09	; 9
      000202 02                    3850 	.db #0x02	; 2
      000203 18                    3851 	.db #0x18	; 24
      000204 A4                    3852 	.db #0xa4	; 164
      000205 A4                    3853 	.db #0xa4	; 164
      000206 9C                    3854 	.db #0x9c	; 156
      000207 78                    3855 	.db #0x78	; 120	'x'
      000208 7F                    3856 	.db #0x7f	; 127
      000209 08                    3857 	.db #0x08	; 8
      00020A 04                    3858 	.db #0x04	; 4
      00020B 04                    3859 	.db #0x04	; 4
      00020C 78                    3860 	.db #0x78	; 120	'x'
      00020D 00                    3861 	.db #0x00	; 0
      00020E 44                    3862 	.db #0x44	; 68	'D'
      00020F 7D                    3863 	.db #0x7d	; 125
      000210 40                    3864 	.db #0x40	; 64
      000211 00                    3865 	.db #0x00	; 0
      000212 20                    3866 	.db #0x20	; 32
      000213 40                    3867 	.db #0x40	; 64
      000214 40                    3868 	.db #0x40	; 64
      000215 3D                    3869 	.db #0x3d	; 61
      000216 00                    3870 	.db #0x00	; 0
      000217 7F                    3871 	.db #0x7f	; 127
      000218 10                    3872 	.db #0x10	; 16
      000219 28                    3873 	.db #0x28	; 40
      00021A 44                    3874 	.db #0x44	; 68	'D'
      00021B 00                    3875 	.db #0x00	; 0
      00021C 00                    3876 	.db #0x00	; 0
      00021D 41                    3877 	.db #0x41	; 65	'A'
      00021E 7F                    3878 	.db #0x7f	; 127
      00021F 40                    3879 	.db #0x40	; 64
      000220 00                    3880 	.db #0x00	; 0
      000221 7C                    3881 	.db #0x7c	; 124
      000222 04                    3882 	.db #0x04	; 4
      000223 78                    3883 	.db #0x78	; 120	'x'
      000224 04                    3884 	.db #0x04	; 4
      000225 78                    3885 	.db #0x78	; 120	'x'
      000226 7C                    3886 	.db #0x7c	; 124
      000227 08                    3887 	.db #0x08	; 8
      000228 04                    3888 	.db #0x04	; 4
      000229 04                    3889 	.db #0x04	; 4
      00022A 78                    3890 	.db #0x78	; 120	'x'
      00022B 38                    3891 	.db #0x38	; 56	'8'
      00022C 44                    3892 	.db #0x44	; 68	'D'
      00022D 44                    3893 	.db #0x44	; 68	'D'
      00022E 44                    3894 	.db #0x44	; 68	'D'
      00022F 38                    3895 	.db #0x38	; 56	'8'
      000230 FC                    3896 	.db #0xfc	; 252
      000231 18                    3897 	.db #0x18	; 24
      000232 24                    3898 	.db #0x24	; 36
      000233 24                    3899 	.db #0x24	; 36
      000234 18                    3900 	.db #0x18	; 24
      000235 18                    3901 	.db #0x18	; 24
      000236 24                    3902 	.db #0x24	; 36
      000237 24                    3903 	.db #0x24	; 36
      000238 18                    3904 	.db #0x18	; 24
      000239 FC                    3905 	.db #0xfc	; 252
      00023A 7C                    3906 	.db #0x7c	; 124
      00023B 08                    3907 	.db #0x08	; 8
      00023C 04                    3908 	.db #0x04	; 4
      00023D 04                    3909 	.db #0x04	; 4
      00023E 08                    3910 	.db #0x08	; 8
      00023F 48                    3911 	.db #0x48	; 72	'H'
      000240 54                    3912 	.db #0x54	; 84	'T'
      000241 54                    3913 	.db #0x54	; 84	'T'
      000242 54                    3914 	.db #0x54	; 84	'T'
      000243 24                    3915 	.db #0x24	; 36
      000244 04                    3916 	.db #0x04	; 4
      000245 04                    3917 	.db #0x04	; 4
      000246 3F                    3918 	.db #0x3f	; 63
      000247 44                    3919 	.db #0x44	; 68	'D'
      000248 24                    3920 	.db #0x24	; 36
      000249 3C                    3921 	.db #0x3c	; 60
      00024A 40                    3922 	.db #0x40	; 64
      00024B 40                    3923 	.db #0x40	; 64
      00024C 20                    3924 	.db #0x20	; 32
      00024D 7C                    3925 	.db #0x7c	; 124
      00024E 1C                    3926 	.db #0x1c	; 28
      00024F 20                    3927 	.db #0x20	; 32
      000250 40                    3928 	.db #0x40	; 64
      000251 20                    3929 	.db #0x20	; 32
      000252 1C                    3930 	.db #0x1c	; 28
      000253 3C                    3931 	.db #0x3c	; 60
      000254 40                    3932 	.db #0x40	; 64
      000255 30                    3933 	.db #0x30	; 48	'0'
      000256 40                    3934 	.db #0x40	; 64
      000257 3C                    3935 	.db #0x3c	; 60
      000258 44                    3936 	.db #0x44	; 68	'D'
      000259 28                    3937 	.db #0x28	; 40
      00025A 10                    3938 	.db #0x10	; 16
      00025B 28                    3939 	.db #0x28	; 40
      00025C 44                    3940 	.db #0x44	; 68	'D'
      00025D 4C                    3941 	.db #0x4c	; 76	'L'
      00025E 90                    3942 	.db #0x90	; 144
      00025F 90                    3943 	.db #0x90	; 144
      000260 90                    3944 	.db #0x90	; 144
      000261 7C                    3945 	.db #0x7c	; 124
      000262 44                    3946 	.db #0x44	; 68	'D'
      000263 64                    3947 	.db #0x64	; 100	'd'
      000264 54                    3948 	.db #0x54	; 84	'T'
      000265 4C                    3949 	.db #0x4c	; 76	'L'
      000266 44                    3950 	.db #0x44	; 68	'D'
      000267 00                    3951 	.db #0x00	; 0
      000268 08                    3952 	.db #0x08	; 8
      000269 36                    3953 	.db #0x36	; 54	'6'
      00026A 41                    3954 	.db #0x41	; 65	'A'
      00026B 00                    3955 	.db #0x00	; 0
      00026C 00                    3956 	.db #0x00	; 0
      00026D 00                    3957 	.db #0x00	; 0
      00026E 77                    3958 	.db #0x77	; 119	'w'
      00026F 00                    3959 	.db #0x00	; 0
      000270 00                    3960 	.db #0x00	; 0
      000271 00                    3961 	.db #0x00	; 0
      000272 41                    3962 	.db #0x41	; 65	'A'
      000273 36                    3963 	.db #0x36	; 54	'6'
      000274 08                    3964 	.db #0x08	; 8
      000275 00                    3965 	.db #0x00	; 0
      000276 02                    3966 	.db #0x02	; 2
      000277 01                    3967 	.db #0x01	; 1
      000278 02                    3968 	.db #0x02	; 2
      000279 04                    3969 	.db #0x04	; 4
      00027A 02                    3970 	.db #0x02	; 2
      00027B 3C                    3971 	.db #0x3c	; 60
      00027C 26                    3972 	.db #0x26	; 38
      00027D 23                    3973 	.db #0x23	; 35
      00027E 26                    3974 	.db #0x26	; 38
      00027F 3C                    3975 	.db #0x3c	; 60
      000280 1E                    3976 	.db #0x1e	; 30
      000281 A1                    3977 	.db #0xa1	; 161
      000282 A1                    3978 	.db #0xa1	; 161
      000283 61                    3979 	.db #0x61	; 97	'a'
      000284 12                    3980 	.db #0x12	; 18
      000285 3A                    3981 	.db #0x3a	; 58
      000286 40                    3982 	.db #0x40	; 64
      000287 40                    3983 	.db #0x40	; 64
      000288 20                    3984 	.db #0x20	; 32
      000289 7A                    3985 	.db #0x7a	; 122	'z'
      00028A 38                    3986 	.db #0x38	; 56	'8'
      00028B 54                    3987 	.db #0x54	; 84	'T'
      00028C 54                    3988 	.db #0x54	; 84	'T'
      00028D 55                    3989 	.db #0x55	; 85	'U'
      00028E 59                    3990 	.db #0x59	; 89	'Y'
      00028F 21                    3991 	.db #0x21	; 33
      000290 55                    3992 	.db #0x55	; 85	'U'
      000291 55                    3993 	.db #0x55	; 85	'U'
      000292 79                    3994 	.db #0x79	; 121	'y'
      000293 41                    3995 	.db #0x41	; 65	'A'
      000294 22                    3996 	.db #0x22	; 34
      000295 54                    3997 	.db #0x54	; 84	'T'
      000296 54                    3998 	.db #0x54	; 84	'T'
      000297 78                    3999 	.db #0x78	; 120	'x'
      000298 42                    4000 	.db #0x42	; 66	'B'
      000299 21                    4001 	.db #0x21	; 33
      00029A 55                    4002 	.db #0x55	; 85	'U'
      00029B 54                    4003 	.db #0x54	; 84	'T'
      00029C 78                    4004 	.db #0x78	; 120	'x'
      00029D 40                    4005 	.db #0x40	; 64
      00029E 20                    4006 	.db #0x20	; 32
      00029F 54                    4007 	.db #0x54	; 84	'T'
      0002A0 55                    4008 	.db #0x55	; 85	'U'
      0002A1 79                    4009 	.db #0x79	; 121	'y'
      0002A2 40                    4010 	.db #0x40	; 64
      0002A3 0C                    4011 	.db #0x0c	; 12
      0002A4 1E                    4012 	.db #0x1e	; 30
      0002A5 52                    4013 	.db #0x52	; 82	'R'
      0002A6 72                    4014 	.db #0x72	; 114	'r'
      0002A7 12                    4015 	.db #0x12	; 18
      0002A8 39                    4016 	.db #0x39	; 57	'9'
      0002A9 55                    4017 	.db #0x55	; 85	'U'
      0002AA 55                    4018 	.db #0x55	; 85	'U'
      0002AB 55                    4019 	.db #0x55	; 85	'U'
      0002AC 59                    4020 	.db #0x59	; 89	'Y'
      0002AD 39                    4021 	.db #0x39	; 57	'9'
      0002AE 54                    4022 	.db #0x54	; 84	'T'
      0002AF 54                    4023 	.db #0x54	; 84	'T'
      0002B0 54                    4024 	.db #0x54	; 84	'T'
      0002B1 59                    4025 	.db #0x59	; 89	'Y'
      0002B2 39                    4026 	.db #0x39	; 57	'9'
      0002B3 55                    4027 	.db #0x55	; 85	'U'
      0002B4 54                    4028 	.db #0x54	; 84	'T'
      0002B5 54                    4029 	.db #0x54	; 84	'T'
      0002B6 58                    4030 	.db #0x58	; 88	'X'
      0002B7 00                    4031 	.db #0x00	; 0
      0002B8 00                    4032 	.db #0x00	; 0
      0002B9 45                    4033 	.db #0x45	; 69	'E'
      0002BA 7C                    4034 	.db #0x7c	; 124
      0002BB 41                    4035 	.db #0x41	; 65	'A'
      0002BC 00                    4036 	.db #0x00	; 0
      0002BD 02                    4037 	.db #0x02	; 2
      0002BE 45                    4038 	.db #0x45	; 69	'E'
      0002BF 7D                    4039 	.db #0x7d	; 125
      0002C0 42                    4040 	.db #0x42	; 66	'B'
      0002C1 00                    4041 	.db #0x00	; 0
      0002C2 01                    4042 	.db #0x01	; 1
      0002C3 45                    4043 	.db #0x45	; 69	'E'
      0002C4 7C                    4044 	.db #0x7c	; 124
      0002C5 40                    4045 	.db #0x40	; 64
      0002C6 7D                    4046 	.db #0x7d	; 125
      0002C7 12                    4047 	.db #0x12	; 18
      0002C8 11                    4048 	.db #0x11	; 17
      0002C9 12                    4049 	.db #0x12	; 18
      0002CA 7D                    4050 	.db #0x7d	; 125
      0002CB F0                    4051 	.db #0xf0	; 240
      0002CC 28                    4052 	.db #0x28	; 40
      0002CD 25                    4053 	.db #0x25	; 37
      0002CE 28                    4054 	.db #0x28	; 40
      0002CF F0                    4055 	.db #0xf0	; 240
      0002D0 7C                    4056 	.db #0x7c	; 124
      0002D1 54                    4057 	.db #0x54	; 84	'T'
      0002D2 55                    4058 	.db #0x55	; 85	'U'
      0002D3 45                    4059 	.db #0x45	; 69	'E'
      0002D4 00                    4060 	.db #0x00	; 0
      0002D5 20                    4061 	.db #0x20	; 32
      0002D6 54                    4062 	.db #0x54	; 84	'T'
      0002D7 54                    4063 	.db #0x54	; 84	'T'
      0002D8 7C                    4064 	.db #0x7c	; 124
      0002D9 54                    4065 	.db #0x54	; 84	'T'
      0002DA 7C                    4066 	.db #0x7c	; 124
      0002DB 0A                    4067 	.db #0x0a	; 10
      0002DC 09                    4068 	.db #0x09	; 9
      0002DD 7F                    4069 	.db #0x7f	; 127
      0002DE 49                    4070 	.db #0x49	; 73	'I'
      0002DF 32                    4071 	.db #0x32	; 50	'2'
      0002E0 49                    4072 	.db #0x49	; 73	'I'
      0002E1 49                    4073 	.db #0x49	; 73	'I'
      0002E2 49                    4074 	.db #0x49	; 73	'I'
      0002E3 32                    4075 	.db #0x32	; 50	'2'
      0002E4 3A                    4076 	.db #0x3a	; 58
      0002E5 44                    4077 	.db #0x44	; 68	'D'
      0002E6 44                    4078 	.db #0x44	; 68	'D'
      0002E7 44                    4079 	.db #0x44	; 68	'D'
      0002E8 3A                    4080 	.db #0x3a	; 58
      0002E9 32                    4081 	.db #0x32	; 50	'2'
      0002EA 4A                    4082 	.db #0x4a	; 74	'J'
      0002EB 48                    4083 	.db #0x48	; 72	'H'
      0002EC 48                    4084 	.db #0x48	; 72	'H'
      0002ED 30                    4085 	.db #0x30	; 48	'0'
      0002EE 3A                    4086 	.db #0x3a	; 58
      0002EF 41                    4087 	.db #0x41	; 65	'A'
      0002F0 41                    4088 	.db #0x41	; 65	'A'
      0002F1 21                    4089 	.db #0x21	; 33
      0002F2 7A                    4090 	.db #0x7a	; 122	'z'
      0002F3 3A                    4091 	.db #0x3a	; 58
      0002F4 42                    4092 	.db #0x42	; 66	'B'
      0002F5 40                    4093 	.db #0x40	; 64
      0002F6 20                    4094 	.db #0x20	; 32
      0002F7 78                    4095 	.db #0x78	; 120	'x'
      0002F8 00                    4096 	.db #0x00	; 0
      0002F9 9D                    4097 	.db #0x9d	; 157
      0002FA A0                    4098 	.db #0xa0	; 160
      0002FB A0                    4099 	.db #0xa0	; 160
      0002FC 7D                    4100 	.db #0x7d	; 125
      0002FD 3D                    4101 	.db #0x3d	; 61
      0002FE 42                    4102 	.db #0x42	; 66	'B'
      0002FF 42                    4103 	.db #0x42	; 66	'B'
      000300 42                    4104 	.db #0x42	; 66	'B'
      000301 3D                    4105 	.db #0x3d	; 61
      000302 3D                    4106 	.db #0x3d	; 61
      000303 40                    4107 	.db #0x40	; 64
      000304 40                    4108 	.db #0x40	; 64
      000305 40                    4109 	.db #0x40	; 64
      000306 3D                    4110 	.db #0x3d	; 61
      000307 3C                    4111 	.db #0x3c	; 60
      000308 24                    4112 	.db #0x24	; 36
      000309 FF                    4113 	.db #0xff	; 255
      00030A 24                    4114 	.db #0x24	; 36
      00030B 24                    4115 	.db #0x24	; 36
      00030C 48                    4116 	.db #0x48	; 72	'H'
      00030D 7E                    4117 	.db #0x7e	; 126
      00030E 49                    4118 	.db #0x49	; 73	'I'
      00030F 43                    4119 	.db #0x43	; 67	'C'
      000310 66                    4120 	.db #0x66	; 102	'f'
      000311 2B                    4121 	.db #0x2b	; 43
      000312 2F                    4122 	.db #0x2f	; 47
      000313 FC                    4123 	.db #0xfc	; 252
      000314 2F                    4124 	.db #0x2f	; 47
      000315 2B                    4125 	.db #0x2b	; 43
      000316 FF                    4126 	.db #0xff	; 255
      000317 09                    4127 	.db #0x09	; 9
      000318 29                    4128 	.db #0x29	; 41
      000319 F6                    4129 	.db #0xf6	; 246
      00031A 20                    4130 	.db #0x20	; 32
      00031B C0                    4131 	.db #0xc0	; 192
      00031C 88                    4132 	.db #0x88	; 136
      00031D 7E                    4133 	.db #0x7e	; 126
      00031E 09                    4134 	.db #0x09	; 9
      00031F 03                    4135 	.db #0x03	; 3
      000320 20                    4136 	.db #0x20	; 32
      000321 54                    4137 	.db #0x54	; 84	'T'
      000322 54                    4138 	.db #0x54	; 84	'T'
      000323 79                    4139 	.db #0x79	; 121	'y'
      000324 41                    4140 	.db #0x41	; 65	'A'
      000325 00                    4141 	.db #0x00	; 0
      000326 00                    4142 	.db #0x00	; 0
      000327 44                    4143 	.db #0x44	; 68	'D'
      000328 7D                    4144 	.db #0x7d	; 125
      000329 41                    4145 	.db #0x41	; 65	'A'
      00032A 30                    4146 	.db #0x30	; 48	'0'
      00032B 48                    4147 	.db #0x48	; 72	'H'
      00032C 48                    4148 	.db #0x48	; 72	'H'
      00032D 4A                    4149 	.db #0x4a	; 74	'J'
      00032E 32                    4150 	.db #0x32	; 50	'2'
      00032F 38                    4151 	.db #0x38	; 56	'8'
      000330 40                    4152 	.db #0x40	; 64
      000331 40                    4153 	.db #0x40	; 64
      000332 22                    4154 	.db #0x22	; 34
      000333 7A                    4155 	.db #0x7a	; 122	'z'
      000334 00                    4156 	.db #0x00	; 0
      000335 7A                    4157 	.db #0x7a	; 122	'z'
      000336 0A                    4158 	.db #0x0a	; 10
      000337 0A                    4159 	.db #0x0a	; 10
      000338 72                    4160 	.db #0x72	; 114	'r'
      000339 7D                    4161 	.db #0x7d	; 125
      00033A 0D                    4162 	.db #0x0d	; 13
      00033B 19                    4163 	.db #0x19	; 25
      00033C 31                    4164 	.db #0x31	; 49	'1'
      00033D 7D                    4165 	.db #0x7d	; 125
      00033E 26                    4166 	.db #0x26	; 38
      00033F 29                    4167 	.db #0x29	; 41
      000340 29                    4168 	.db #0x29	; 41
      000341 2F                    4169 	.db #0x2f	; 47
      000342 28                    4170 	.db #0x28	; 40
      000343 26                    4171 	.db #0x26	; 38
      000344 29                    4172 	.db #0x29	; 41
      000345 29                    4173 	.db #0x29	; 41
      000346 29                    4174 	.db #0x29	; 41
      000347 26                    4175 	.db #0x26	; 38
      000348 30                    4176 	.db #0x30	; 48	'0'
      000349 48                    4177 	.db #0x48	; 72	'H'
      00034A 4D                    4178 	.db #0x4d	; 77	'M'
      00034B 40                    4179 	.db #0x40	; 64
      00034C 20                    4180 	.db #0x20	; 32
      00034D 38                    4181 	.db #0x38	; 56	'8'
      00034E 08                    4182 	.db #0x08	; 8
      00034F 08                    4183 	.db #0x08	; 8
      000350 08                    4184 	.db #0x08	; 8
      000351 08                    4185 	.db #0x08	; 8
      000352 08                    4186 	.db #0x08	; 8
      000353 08                    4187 	.db #0x08	; 8
      000354 08                    4188 	.db #0x08	; 8
      000355 08                    4189 	.db #0x08	; 8
      000356 38                    4190 	.db #0x38	; 56	'8'
      000357 2F                    4191 	.db #0x2f	; 47
      000358 10                    4192 	.db #0x10	; 16
      000359 C8                    4193 	.db #0xc8	; 200
      00035A AC                    4194 	.db #0xac	; 172
      00035B BA                    4195 	.db #0xba	; 186
      00035C 2F                    4196 	.db #0x2f	; 47
      00035D 10                    4197 	.db #0x10	; 16
      00035E 28                    4198 	.db #0x28	; 40
      00035F 34                    4199 	.db #0x34	; 52	'4'
      000360 FA                    4200 	.db #0xfa	; 250
      000361 00                    4201 	.db #0x00	; 0
      000362 00                    4202 	.db #0x00	; 0
      000363 7B                    4203 	.db #0x7b	; 123
      000364 00                    4204 	.db #0x00	; 0
      000365 00                    4205 	.db #0x00	; 0
      000366 08                    4206 	.db #0x08	; 8
      000367 14                    4207 	.db #0x14	; 20
      000368 2A                    4208 	.db #0x2a	; 42
      000369 14                    4209 	.db #0x14	; 20
      00036A 22                    4210 	.db #0x22	; 34
      00036B 22                    4211 	.db #0x22	; 34
      00036C 14                    4212 	.db #0x14	; 20
      00036D 2A                    4213 	.db #0x2a	; 42
      00036E 14                    4214 	.db #0x14	; 20
      00036F 08                    4215 	.db #0x08	; 8
      000370 AA                    4216 	.db #0xaa	; 170
      000371 00                    4217 	.db #0x00	; 0
      000372 55                    4218 	.db #0x55	; 85	'U'
      000373 00                    4219 	.db #0x00	; 0
      000374 AA                    4220 	.db #0xaa	; 170
      000375 AA                    4221 	.db #0xaa	; 170
      000376 55                    4222 	.db #0x55	; 85	'U'
      000377 AA                    4223 	.db #0xaa	; 170
      000378 55                    4224 	.db #0x55	; 85	'U'
      000379 AA                    4225 	.db #0xaa	; 170
      00037A 00                    4226 	.db #0x00	; 0
      00037B 00                    4227 	.db #0x00	; 0
      00037C 00                    4228 	.db #0x00	; 0
      00037D FF                    4229 	.db #0xff	; 255
      00037E 00                    4230 	.db #0x00	; 0
      00037F 10                    4231 	.db #0x10	; 16
      000380 10                    4232 	.db #0x10	; 16
      000381 10                    4233 	.db #0x10	; 16
      000382 FF                    4234 	.db #0xff	; 255
      000383 00                    4235 	.db #0x00	; 0
      000384 14                    4236 	.db #0x14	; 20
      000385 14                    4237 	.db #0x14	; 20
      000386 14                    4238 	.db #0x14	; 20
      000387 FF                    4239 	.db #0xff	; 255
      000388 00                    4240 	.db #0x00	; 0
      000389 10                    4241 	.db #0x10	; 16
      00038A 10                    4242 	.db #0x10	; 16
      00038B FF                    4243 	.db #0xff	; 255
      00038C 00                    4244 	.db #0x00	; 0
      00038D FF                    4245 	.db #0xff	; 255
      00038E 10                    4246 	.db #0x10	; 16
      00038F 10                    4247 	.db #0x10	; 16
      000390 F0                    4248 	.db #0xf0	; 240
      000391 10                    4249 	.db #0x10	; 16
      000392 F0                    4250 	.db #0xf0	; 240
      000393 14                    4251 	.db #0x14	; 20
      000394 14                    4252 	.db #0x14	; 20
      000395 14                    4253 	.db #0x14	; 20
      000396 FC                    4254 	.db #0xfc	; 252
      000397 00                    4255 	.db #0x00	; 0
      000398 14                    4256 	.db #0x14	; 20
      000399 14                    4257 	.db #0x14	; 20
      00039A F7                    4258 	.db #0xf7	; 247
      00039B 00                    4259 	.db #0x00	; 0
      00039C FF                    4260 	.db #0xff	; 255
      00039D 00                    4261 	.db #0x00	; 0
      00039E 00                    4262 	.db #0x00	; 0
      00039F FF                    4263 	.db #0xff	; 255
      0003A0 00                    4264 	.db #0x00	; 0
      0003A1 FF                    4265 	.db #0xff	; 255
      0003A2 14                    4266 	.db #0x14	; 20
      0003A3 14                    4267 	.db #0x14	; 20
      0003A4 F4                    4268 	.db #0xf4	; 244
      0003A5 04                    4269 	.db #0x04	; 4
      0003A6 FC                    4270 	.db #0xfc	; 252
      0003A7 14                    4271 	.db #0x14	; 20
      0003A8 14                    4272 	.db #0x14	; 20
      0003A9 17                    4273 	.db #0x17	; 23
      0003AA 10                    4274 	.db #0x10	; 16
      0003AB 1F                    4275 	.db #0x1f	; 31
      0003AC 10                    4276 	.db #0x10	; 16
      0003AD 10                    4277 	.db #0x10	; 16
      0003AE 1F                    4278 	.db #0x1f	; 31
      0003AF 10                    4279 	.db #0x10	; 16
      0003B0 1F                    4280 	.db #0x1f	; 31
      0003B1 14                    4281 	.db #0x14	; 20
      0003B2 14                    4282 	.db #0x14	; 20
      0003B3 14                    4283 	.db #0x14	; 20
      0003B4 1F                    4284 	.db #0x1f	; 31
      0003B5 00                    4285 	.db #0x00	; 0
      0003B6 10                    4286 	.db #0x10	; 16
      0003B7 10                    4287 	.db #0x10	; 16
      0003B8 10                    4288 	.db #0x10	; 16
      0003B9 F0                    4289 	.db #0xf0	; 240
      0003BA 00                    4290 	.db #0x00	; 0
      0003BB 00                    4291 	.db #0x00	; 0
      0003BC 00                    4292 	.db #0x00	; 0
      0003BD 00                    4293 	.db #0x00	; 0
      0003BE 1F                    4294 	.db #0x1f	; 31
      0003BF 10                    4295 	.db #0x10	; 16
      0003C0 10                    4296 	.db #0x10	; 16
      0003C1 10                    4297 	.db #0x10	; 16
      0003C2 10                    4298 	.db #0x10	; 16
      0003C3 1F                    4299 	.db #0x1f	; 31
      0003C4 10                    4300 	.db #0x10	; 16
      0003C5 10                    4301 	.db #0x10	; 16
      0003C6 10                    4302 	.db #0x10	; 16
      0003C7 10                    4303 	.db #0x10	; 16
      0003C8 F0                    4304 	.db #0xf0	; 240
      0003C9 10                    4305 	.db #0x10	; 16
      0003CA 00                    4306 	.db #0x00	; 0
      0003CB 00                    4307 	.db #0x00	; 0
      0003CC 00                    4308 	.db #0x00	; 0
      0003CD FF                    4309 	.db #0xff	; 255
      0003CE 10                    4310 	.db #0x10	; 16
      0003CF 10                    4311 	.db #0x10	; 16
      0003D0 10                    4312 	.db #0x10	; 16
      0003D1 10                    4313 	.db #0x10	; 16
      0003D2 10                    4314 	.db #0x10	; 16
      0003D3 10                    4315 	.db #0x10	; 16
      0003D4 10                    4316 	.db #0x10	; 16
      0003D5 10                    4317 	.db #0x10	; 16
      0003D6 10                    4318 	.db #0x10	; 16
      0003D7 FF                    4319 	.db #0xff	; 255
      0003D8 10                    4320 	.db #0x10	; 16
      0003D9 00                    4321 	.db #0x00	; 0
      0003DA 00                    4322 	.db #0x00	; 0
      0003DB 00                    4323 	.db #0x00	; 0
      0003DC FF                    4324 	.db #0xff	; 255
      0003DD 14                    4325 	.db #0x14	; 20
      0003DE 00                    4326 	.db #0x00	; 0
      0003DF 00                    4327 	.db #0x00	; 0
      0003E0 FF                    4328 	.db #0xff	; 255
      0003E1 00                    4329 	.db #0x00	; 0
      0003E2 FF                    4330 	.db #0xff	; 255
      0003E3 00                    4331 	.db #0x00	; 0
      0003E4 00                    4332 	.db #0x00	; 0
      0003E5 1F                    4333 	.db #0x1f	; 31
      0003E6 10                    4334 	.db #0x10	; 16
      0003E7 17                    4335 	.db #0x17	; 23
      0003E8 00                    4336 	.db #0x00	; 0
      0003E9 00                    4337 	.db #0x00	; 0
      0003EA FC                    4338 	.db #0xfc	; 252
      0003EB 04                    4339 	.db #0x04	; 4
      0003EC F4                    4340 	.db #0xf4	; 244
      0003ED 14                    4341 	.db #0x14	; 20
      0003EE 14                    4342 	.db #0x14	; 20
      0003EF 17                    4343 	.db #0x17	; 23
      0003F0 10                    4344 	.db #0x10	; 16
      0003F1 17                    4345 	.db #0x17	; 23
      0003F2 14                    4346 	.db #0x14	; 20
      0003F3 14                    4347 	.db #0x14	; 20
      0003F4 F4                    4348 	.db #0xf4	; 244
      0003F5 04                    4349 	.db #0x04	; 4
      0003F6 F4                    4350 	.db #0xf4	; 244
      0003F7 00                    4351 	.db #0x00	; 0
      0003F8 00                    4352 	.db #0x00	; 0
      0003F9 FF                    4353 	.db #0xff	; 255
      0003FA 00                    4354 	.db #0x00	; 0
      0003FB F7                    4355 	.db #0xf7	; 247
      0003FC 14                    4356 	.db #0x14	; 20
      0003FD 14                    4357 	.db #0x14	; 20
      0003FE 14                    4358 	.db #0x14	; 20
      0003FF 14                    4359 	.db #0x14	; 20
      000400 14                    4360 	.db #0x14	; 20
      000401 14                    4361 	.db #0x14	; 20
      000402 14                    4362 	.db #0x14	; 20
      000403 F7                    4363 	.db #0xf7	; 247
      000404 00                    4364 	.db #0x00	; 0
      000405 F7                    4365 	.db #0xf7	; 247
      000406 14                    4366 	.db #0x14	; 20
      000407 14                    4367 	.db #0x14	; 20
      000408 14                    4368 	.db #0x14	; 20
      000409 17                    4369 	.db #0x17	; 23
      00040A 14                    4370 	.db #0x14	; 20
      00040B 10                    4371 	.db #0x10	; 16
      00040C 10                    4372 	.db #0x10	; 16
      00040D 1F                    4373 	.db #0x1f	; 31
      00040E 10                    4374 	.db #0x10	; 16
      00040F 1F                    4375 	.db #0x1f	; 31
      000410 14                    4376 	.db #0x14	; 20
      000411 14                    4377 	.db #0x14	; 20
      000412 14                    4378 	.db #0x14	; 20
      000413 F4                    4379 	.db #0xf4	; 244
      000414 14                    4380 	.db #0x14	; 20
      000415 10                    4381 	.db #0x10	; 16
      000416 10                    4382 	.db #0x10	; 16
      000417 F0                    4383 	.db #0xf0	; 240
      000418 10                    4384 	.db #0x10	; 16
      000419 F0                    4385 	.db #0xf0	; 240
      00041A 00                    4386 	.db #0x00	; 0
      00041B 00                    4387 	.db #0x00	; 0
      00041C 1F                    4388 	.db #0x1f	; 31
      00041D 10                    4389 	.db #0x10	; 16
      00041E 1F                    4390 	.db #0x1f	; 31
      00041F 00                    4391 	.db #0x00	; 0
      000420 00                    4392 	.db #0x00	; 0
      000421 00                    4393 	.db #0x00	; 0
      000422 1F                    4394 	.db #0x1f	; 31
      000423 14                    4395 	.db #0x14	; 20
      000424 00                    4396 	.db #0x00	; 0
      000425 00                    4397 	.db #0x00	; 0
      000426 00                    4398 	.db #0x00	; 0
      000427 FC                    4399 	.db #0xfc	; 252
      000428 14                    4400 	.db #0x14	; 20
      000429 00                    4401 	.db #0x00	; 0
      00042A 00                    4402 	.db #0x00	; 0
      00042B F0                    4403 	.db #0xf0	; 240
      00042C 10                    4404 	.db #0x10	; 16
      00042D F0                    4405 	.db #0xf0	; 240
      00042E 10                    4406 	.db #0x10	; 16
      00042F 10                    4407 	.db #0x10	; 16
      000430 FF                    4408 	.db #0xff	; 255
      000431 10                    4409 	.db #0x10	; 16
      000432 FF                    4410 	.db #0xff	; 255
      000433 14                    4411 	.db #0x14	; 20
      000434 14                    4412 	.db #0x14	; 20
      000435 14                    4413 	.db #0x14	; 20
      000436 FF                    4414 	.db #0xff	; 255
      000437 14                    4415 	.db #0x14	; 20
      000438 10                    4416 	.db #0x10	; 16
      000439 10                    4417 	.db #0x10	; 16
      00043A 10                    4418 	.db #0x10	; 16
      00043B 1F                    4419 	.db #0x1f	; 31
      00043C 00                    4420 	.db #0x00	; 0
      00043D 00                    4421 	.db #0x00	; 0
      00043E 00                    4422 	.db #0x00	; 0
      00043F 00                    4423 	.db #0x00	; 0
      000440 F0                    4424 	.db #0xf0	; 240
      000441 10                    4425 	.db #0x10	; 16
      000442 FF                    4426 	.db #0xff	; 255
      000443 FF                    4427 	.db #0xff	; 255
      000444 FF                    4428 	.db #0xff	; 255
      000445 FF                    4429 	.db #0xff	; 255
      000446 FF                    4430 	.db #0xff	; 255
      000447 F0                    4431 	.db #0xf0	; 240
      000448 F0                    4432 	.db #0xf0	; 240
      000449 F0                    4433 	.db #0xf0	; 240
      00044A F0                    4434 	.db #0xf0	; 240
      00044B F0                    4435 	.db #0xf0	; 240
      00044C FF                    4436 	.db #0xff	; 255
      00044D FF                    4437 	.db #0xff	; 255
      00044E FF                    4438 	.db #0xff	; 255
      00044F 00                    4439 	.db #0x00	; 0
      000450 00                    4440 	.db #0x00	; 0
      000451 00                    4441 	.db #0x00	; 0
      000452 00                    4442 	.db #0x00	; 0
      000453 00                    4443 	.db #0x00	; 0
      000454 FF                    4444 	.db #0xff	; 255
      000455 FF                    4445 	.db #0xff	; 255
      000456 0F                    4446 	.db #0x0f	; 15
      000457 0F                    4447 	.db #0x0f	; 15
      000458 0F                    4448 	.db #0x0f	; 15
      000459 0F                    4449 	.db #0x0f	; 15
      00045A 0F                    4450 	.db #0x0f	; 15
      00045B 38                    4451 	.db #0x38	; 56	'8'
      00045C 44                    4452 	.db #0x44	; 68	'D'
      00045D 44                    4453 	.db #0x44	; 68	'D'
      00045E 38                    4454 	.db #0x38	; 56	'8'
      00045F 44                    4455 	.db #0x44	; 68	'D'
      000460 FC                    4456 	.db #0xfc	; 252
      000461 4A                    4457 	.db #0x4a	; 74	'J'
      000462 4A                    4458 	.db #0x4a	; 74	'J'
      000463 4A                    4459 	.db #0x4a	; 74	'J'
      000464 34                    4460 	.db #0x34	; 52	'4'
      000465 7E                    4461 	.db #0x7e	; 126
      000466 02                    4462 	.db #0x02	; 2
      000467 02                    4463 	.db #0x02	; 2
      000468 06                    4464 	.db #0x06	; 6
      000469 06                    4465 	.db #0x06	; 6
      00046A 02                    4466 	.db #0x02	; 2
      00046B 7E                    4467 	.db #0x7e	; 126
      00046C 02                    4468 	.db #0x02	; 2
      00046D 7E                    4469 	.db #0x7e	; 126
      00046E 02                    4470 	.db #0x02	; 2
      00046F 63                    4471 	.db #0x63	; 99	'c'
      000470 55                    4472 	.db #0x55	; 85	'U'
      000471 49                    4473 	.db #0x49	; 73	'I'
      000472 41                    4474 	.db #0x41	; 65	'A'
      000473 63                    4475 	.db #0x63	; 99	'c'
      000474 38                    4476 	.db #0x38	; 56	'8'
      000475 44                    4477 	.db #0x44	; 68	'D'
      000476 44                    4478 	.db #0x44	; 68	'D'
      000477 3C                    4479 	.db #0x3c	; 60
      000478 04                    4480 	.db #0x04	; 4
      000479 40                    4481 	.db #0x40	; 64
      00047A 7E                    4482 	.db #0x7e	; 126
      00047B 20                    4483 	.db #0x20	; 32
      00047C 1E                    4484 	.db #0x1e	; 30
      00047D 20                    4485 	.db #0x20	; 32
      00047E 06                    4486 	.db #0x06	; 6
      00047F 02                    4487 	.db #0x02	; 2
      000480 7E                    4488 	.db #0x7e	; 126
      000481 02                    4489 	.db #0x02	; 2
      000482 02                    4490 	.db #0x02	; 2
      000483 99                    4491 	.db #0x99	; 153
      000484 A5                    4492 	.db #0xa5	; 165
      000485 E7                    4493 	.db #0xe7	; 231
      000486 A5                    4494 	.db #0xa5	; 165
      000487 99                    4495 	.db #0x99	; 153
      000488 1C                    4496 	.db #0x1c	; 28
      000489 2A                    4497 	.db #0x2a	; 42
      00048A 49                    4498 	.db #0x49	; 73	'I'
      00048B 2A                    4499 	.db #0x2a	; 42
      00048C 1C                    4500 	.db #0x1c	; 28
      00048D 4C                    4501 	.db #0x4c	; 76	'L'
      00048E 72                    4502 	.db #0x72	; 114	'r'
      00048F 01                    4503 	.db #0x01	; 1
      000490 72                    4504 	.db #0x72	; 114	'r'
      000491 4C                    4505 	.db #0x4c	; 76	'L'
      000492 30                    4506 	.db #0x30	; 48	'0'
      000493 4A                    4507 	.db #0x4a	; 74	'J'
      000494 4D                    4508 	.db #0x4d	; 77	'M'
      000495 4D                    4509 	.db #0x4d	; 77	'M'
      000496 30                    4510 	.db #0x30	; 48	'0'
      000497 30                    4511 	.db #0x30	; 48	'0'
      000498 48                    4512 	.db #0x48	; 72	'H'
      000499 78                    4513 	.db #0x78	; 120	'x'
      00049A 48                    4514 	.db #0x48	; 72	'H'
      00049B 30                    4515 	.db #0x30	; 48	'0'
      00049C BC                    4516 	.db #0xbc	; 188
      00049D 62                    4517 	.db #0x62	; 98	'b'
      00049E 5A                    4518 	.db #0x5a	; 90	'Z'
      00049F 46                    4519 	.db #0x46	; 70	'F'
      0004A0 3D                    4520 	.db #0x3d	; 61
      0004A1 3E                    4521 	.db #0x3e	; 62
      0004A2 49                    4522 	.db #0x49	; 73	'I'
      0004A3 49                    4523 	.db #0x49	; 73	'I'
      0004A4 49                    4524 	.db #0x49	; 73	'I'
      0004A5 00                    4525 	.db #0x00	; 0
      0004A6 7E                    4526 	.db #0x7e	; 126
      0004A7 01                    4527 	.db #0x01	; 1
      0004A8 01                    4528 	.db #0x01	; 1
      0004A9 01                    4529 	.db #0x01	; 1
      0004AA 7E                    4530 	.db #0x7e	; 126
      0004AB 2A                    4531 	.db #0x2a	; 42
      0004AC 2A                    4532 	.db #0x2a	; 42
      0004AD 2A                    4533 	.db #0x2a	; 42
      0004AE 2A                    4534 	.db #0x2a	; 42
      0004AF 2A                    4535 	.db #0x2a	; 42
      0004B0 44                    4536 	.db #0x44	; 68	'D'
      0004B1 44                    4537 	.db #0x44	; 68	'D'
      0004B2 5F                    4538 	.db #0x5f	; 95
      0004B3 44                    4539 	.db #0x44	; 68	'D'
      0004B4 44                    4540 	.db #0x44	; 68	'D'
      0004B5 40                    4541 	.db #0x40	; 64
      0004B6 51                    4542 	.db #0x51	; 81	'Q'
      0004B7 4A                    4543 	.db #0x4a	; 74	'J'
      0004B8 44                    4544 	.db #0x44	; 68	'D'
      0004B9 40                    4545 	.db #0x40	; 64
      0004BA 40                    4546 	.db #0x40	; 64
      0004BB 44                    4547 	.db #0x44	; 68	'D'
      0004BC 4A                    4548 	.db #0x4a	; 74	'J'
      0004BD 51                    4549 	.db #0x51	; 81	'Q'
      0004BE 40                    4550 	.db #0x40	; 64
      0004BF 00                    4551 	.db #0x00	; 0
      0004C0 00                    4552 	.db #0x00	; 0
      0004C1 FF                    4553 	.db #0xff	; 255
      0004C2 01                    4554 	.db #0x01	; 1
      0004C3 03                    4555 	.db #0x03	; 3
      0004C4 E0                    4556 	.db #0xe0	; 224
      0004C5 80                    4557 	.db #0x80	; 128
      0004C6 FF                    4558 	.db #0xff	; 255
      0004C7 00                    4559 	.db #0x00	; 0
      0004C8 00                    4560 	.db #0x00	; 0
      0004C9 08                    4561 	.db #0x08	; 8
      0004CA 08                    4562 	.db #0x08	; 8
      0004CB 6B                    4563 	.db #0x6b	; 107	'k'
      0004CC 6B                    4564 	.db #0x6b	; 107	'k'
      0004CD 08                    4565 	.db #0x08	; 8
      0004CE 36                    4566 	.db #0x36	; 54	'6'
      0004CF 12                    4567 	.db #0x12	; 18
      0004D0 36                    4568 	.db #0x36	; 54	'6'
      0004D1 24                    4569 	.db #0x24	; 36
      0004D2 36                    4570 	.db #0x36	; 54	'6'
      0004D3 06                    4571 	.db #0x06	; 6
      0004D4 0F                    4572 	.db #0x0f	; 15
      0004D5 09                    4573 	.db #0x09	; 9
      0004D6 0F                    4574 	.db #0x0f	; 15
      0004D7 06                    4575 	.db #0x06	; 6
      0004D8 00                    4576 	.db #0x00	; 0
      0004D9 00                    4577 	.db #0x00	; 0
      0004DA 18                    4578 	.db #0x18	; 24
      0004DB 18                    4579 	.db #0x18	; 24
      0004DC 00                    4580 	.db #0x00	; 0
      0004DD 00                    4581 	.db #0x00	; 0
      0004DE 00                    4582 	.db #0x00	; 0
      0004DF 10                    4583 	.db #0x10	; 16
      0004E0 10                    4584 	.db #0x10	; 16
      0004E1 00                    4585 	.db #0x00	; 0
      0004E2 30                    4586 	.db #0x30	; 48	'0'
      0004E3 40                    4587 	.db #0x40	; 64
      0004E4 FF                    4588 	.db #0xff	; 255
      0004E5 01                    4589 	.db #0x01	; 1
      0004E6 01                    4590 	.db #0x01	; 1
      0004E7 00                    4591 	.db #0x00	; 0
      0004E8 1F                    4592 	.db #0x1f	; 31
      0004E9 01                    4593 	.db #0x01	; 1
      0004EA 01                    4594 	.db #0x01	; 1
      0004EB 1E                    4595 	.db #0x1e	; 30
      0004EC 00                    4596 	.db #0x00	; 0
      0004ED 19                    4597 	.db #0x19	; 25
      0004EE 1D                    4598 	.db #0x1d	; 29
      0004EF 17                    4599 	.db #0x17	; 23
      0004F0 12                    4600 	.db #0x12	; 18
      0004F1 00                    4601 	.db #0x00	; 0
      0004F2 3C                    4602 	.db #0x3c	; 60
      0004F3 3C                    4603 	.db #0x3c	; 60
      0004F4 3C                    4604 	.db #0x3c	; 60
      0004F5 3C                    4605 	.db #0x3c	; 60
      0004F6 00                    4606 	.db #0x00	; 0
      0004F7 00                    4607 	.db #0x00	; 0
      0004F8 00                    4608 	.db #0x00	; 0
      0004F9 00                    4609 	.db #0x00	; 0
      0004FA 00                    4610 	.db #0x00	; 0
                                   4611 	.area CONST   (CODE)
      0004FB                       4612 ___str_0:
      0004FB 57 65 6C 63 6F 6D 65  4613 	.ascii "Welcome"
      000502 0A                    4614 	.db 0x0a
      000503 00                    4615 	.db 0x00
                                   4616 	.area CSEG    (CODE)
                                   4617 	.area CONST   (CODE)
      000504                       4618 ___str_1:
      000504 45 43 45 4E 2D 34 33  4619 	.ascii "ECEN-4330"
             33 30
      00050D 0A                    4620 	.db 0x0a
      00050E 00                    4621 	.db 0x00
                                   4622 	.area CSEG    (CODE)
                                   4623 	.area CONST   (CODE)
      00050F                       4624 ___str_2:
      00050F 52 6F 74 61 74 69 6F  4625 	.ascii "Rotation 0"
             6E 20 30
      000519 00                    4626 	.db 0x00
                                   4627 	.area CSEG    (CODE)
                                   4628 	.area CONST   (CODE)
      00051A                       4629 ___str_3:
      00051A 52 6F 74 61 74 69 6F  4630 	.ascii "Rotation 1"
             6E 20 31
      000524 00                    4631 	.db 0x00
                                   4632 	.area CSEG    (CODE)
                                   4633 	.area CONST   (CODE)
      000525                       4634 ___str_4:
      000525 52 6F 74 61 74 69 6F  4635 	.ascii "Rotation 2"
             6E 20 32
      00052F 00                    4636 	.db 0x00
                                   4637 	.area CSEG    (CODE)
                                   4638 	.area CONST   (CODE)
      000530                       4639 ___str_5:
      000530 52 6F 74 61 74 69 6F  4640 	.ascii "Rotation 3"
             6E 20 33
      00053A 00                    4641 	.db 0x00
                                   4642 	.area CSEG    (CODE)
                                   4643 	.area XINIT   (CODE)
                                   4644 	.area CABS    (ABS,CODE)
