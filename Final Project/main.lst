                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _basic
                                     23 	.globl _writeSomeLines
                                     24 	.globl _convertAsciiHex
                                     25 	.globl _write
                                     26 	.globl _drawChar
                                     27 	.globl _setRotation
                                     28 	.globl _ioread8
                                     29 	.globl _iowrite8
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _B
                                    106 	.globl _ACC
                                    107 	.globl _PSW
                                    108 	.globl _IP
                                    109 	.globl _P3
                                    110 	.globl _IE
                                    111 	.globl _P2
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _P1
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _P0
                                    126 	.globl _dumpPage_PARM_3
                                    127 	.globl _dumpPage_PARM_2
                                    128 	.globl __height
                                    129 	.globl __width
                                    130 	.globl _printCount_PARM_5
                                    131 	.globl _printCount_PARM_4
                                    132 	.globl _printCount_PARM_3
                                    133 	.globl _printCount_PARM_2
                                    134 	.globl _drawChar_PARM_6
                                    135 	.globl _drawChar_PARM_5
                                    136 	.globl _drawChar_PARM_4
                                    137 	.globl _drawChar_PARM_3
                                    138 	.globl _drawChar_PARM_2
                                    139 	.globl _fillRect_PARM_5
                                    140 	.globl _fillRect_PARM_4
                                    141 	.globl _fillRect_PARM_3
                                    142 	.globl _fillRect_PARM_2
                                    143 	.globl _testCircles_PARM_2
                                    144 	.globl _drawCircle_PARM_4
                                    145 	.globl _drawCircle_PARM_3
                                    146 	.globl _drawCircle_PARM_2
                                    147 	.globl _drawPixel_PARM_3
                                    148 	.globl _drawPixel_PARM_2
                                    149 	.globl _textbgcolor
                                    150 	.globl _textcolor
                                    151 	.globl _rotation
                                    152 	.globl _textsize
                                    153 	.globl _cursor_y
                                    154 	.globl _cursor_x
                                    155 	.globl _read_ram_address
                                    156 	.globl _light_address
                                    157 	.globl _temp_address
                                    158 	.globl _seg7_address
                                    159 	.globl _lcd_address
                                    160 	.globl _rowloc
                                    161 	.globl _colloc
                                    162 	.globl _delay
                                    163 	.globl _writeRegister8
                                    164 	.globl _writeRegister16
                                    165 	.globl _setCursor
                                    166 	.globl _setTextColor
                                    167 	.globl _setTextSize
                                    168 	.globl _setAddress
                                    169 	.globl _TFT_LCD_INIT
                                    170 	.globl _drawPixel
                                    171 	.globl _drawCircle
                                    172 	.globl _testCircles
                                    173 	.globl _fillRect
                                    174 	.globl _fillScreen
                                    175 	.globl _LCD_string_write
                                    176 	.globl _testRAM
                                    177 	.globl _freeType
                                    178 	.globl _keyDetect
                                    179 	.globl _reverse
                                    180 	.globl _asciiToDec
                                    181 	.globl _asciiToHex
                                    182 	.globl _getAddress
                                    183 	.globl _getByte
                                    184 	.globl _dumpPage
                                    185 	.globl _dump
                                    186 	.globl _check
                                    187 	.globl _move
                                    188 	.globl _editByte
                                    189 	.globl _edit
                                    190 	.globl _printCount
                                    191 	.globl _count
                                    192 	.globl _readTemp
                                    193 	.globl _readLight
                                    194 	.globl _displayTemp
                                    195 	.globl _displayLight
                                    196 	.globl _temperature
                                    197 	.globl _light
                                    198 ;--------------------------------------------------------
                                    199 ; special function registers
                                    200 ;--------------------------------------------------------
                                    201 	.area RSEG    (ABS,DATA)
      000000                        202 	.org 0x0000
                           000080   203 _P0	=	0x0080
                           000081   204 _SP	=	0x0081
                           000082   205 _DPL	=	0x0082
                           000083   206 _DPH	=	0x0083
                           000087   207 _PCON	=	0x0087
                           000088   208 _TCON	=	0x0088
                           000089   209 _TMOD	=	0x0089
                           00008A   210 _TL0	=	0x008a
                           00008B   211 _TL1	=	0x008b
                           00008C   212 _TH0	=	0x008c
                           00008D   213 _TH1	=	0x008d
                           000090   214 _P1	=	0x0090
                           000098   215 _SCON	=	0x0098
                           000099   216 _SBUF	=	0x0099
                           0000A0   217 _P2	=	0x00a0
                           0000A8   218 _IE	=	0x00a8
                           0000B0   219 _P3	=	0x00b0
                           0000B8   220 _IP	=	0x00b8
                           0000D0   221 _PSW	=	0x00d0
                           0000E0   222 _ACC	=	0x00e0
                           0000F0   223 _B	=	0x00f0
                                    224 ;--------------------------------------------------------
                                    225 ; special function bits
                                    226 ;--------------------------------------------------------
                                    227 	.area RSEG    (ABS,DATA)
      000000                        228 	.org 0x0000
                           000080   229 _P0_0	=	0x0080
                           000081   230 _P0_1	=	0x0081
                           000082   231 _P0_2	=	0x0082
                           000083   232 _P0_3	=	0x0083
                           000084   233 _P0_4	=	0x0084
                           000085   234 _P0_5	=	0x0085
                           000086   235 _P0_6	=	0x0086
                           000087   236 _P0_7	=	0x0087
                           000088   237 _IT0	=	0x0088
                           000089   238 _IE0	=	0x0089
                           00008A   239 _IT1	=	0x008a
                           00008B   240 _IE1	=	0x008b
                           00008C   241 _TR0	=	0x008c
                           00008D   242 _TF0	=	0x008d
                           00008E   243 _TR1	=	0x008e
                           00008F   244 _TF1	=	0x008f
                           000090   245 _P1_0	=	0x0090
                           000091   246 _P1_1	=	0x0091
                           000092   247 _P1_2	=	0x0092
                           000093   248 _P1_3	=	0x0093
                           000094   249 _P1_4	=	0x0094
                           000095   250 _P1_5	=	0x0095
                           000096   251 _P1_6	=	0x0096
                           000097   252 _P1_7	=	0x0097
                           000098   253 _RI	=	0x0098
                           000099   254 _TI	=	0x0099
                           00009A   255 _RB8	=	0x009a
                           00009B   256 _TB8	=	0x009b
                           00009C   257 _REN	=	0x009c
                           00009D   258 _SM2	=	0x009d
                           00009E   259 _SM1	=	0x009e
                           00009F   260 _SM0	=	0x009f
                           0000A0   261 _P2_0	=	0x00a0
                           0000A1   262 _P2_1	=	0x00a1
                           0000A2   263 _P2_2	=	0x00a2
                           0000A3   264 _P2_3	=	0x00a3
                           0000A4   265 _P2_4	=	0x00a4
                           0000A5   266 _P2_5	=	0x00a5
                           0000A6   267 _P2_6	=	0x00a6
                           0000A7   268 _P2_7	=	0x00a7
                           0000A8   269 _EX0	=	0x00a8
                           0000A9   270 _ET0	=	0x00a9
                           0000AA   271 _EX1	=	0x00aa
                           0000AB   272 _ET1	=	0x00ab
                           0000AC   273 _ES	=	0x00ac
                           0000AF   274 _EA	=	0x00af
                           0000B0   275 _P3_0	=	0x00b0
                           0000B1   276 _P3_1	=	0x00b1
                           0000B2   277 _P3_2	=	0x00b2
                           0000B3   278 _P3_3	=	0x00b3
                           0000B4   279 _P3_4	=	0x00b4
                           0000B5   280 _P3_5	=	0x00b5
                           0000B6   281 _P3_6	=	0x00b6
                           0000B7   282 _P3_7	=	0x00b7
                           0000B0   283 _RXD	=	0x00b0
                           0000B1   284 _TXD	=	0x00b1
                           0000B2   285 _INT0	=	0x00b2
                           0000B3   286 _INT1	=	0x00b3
                           0000B4   287 _T0	=	0x00b4
                           0000B5   288 _T1	=	0x00b5
                           0000B6   289 _WR	=	0x00b6
                           0000B7   290 _RD	=	0x00b7
                           0000B8   291 _PX0	=	0x00b8
                           0000B9   292 _PT0	=	0x00b9
                           0000BA   293 _PX1	=	0x00ba
                           0000BB   294 _PT1	=	0x00bb
                           0000BC   295 _PS	=	0x00bc
                           0000D0   296 _P	=	0x00d0
                           0000D1   297 _F1	=	0x00d1
                           0000D2   298 _OV	=	0x00d2
                           0000D3   299 _RS0	=	0x00d3
                           0000D4   300 _RS1	=	0x00d4
                           0000D5   301 _F0	=	0x00d5
                           0000D6   302 _AC	=	0x00d6
                           0000D7   303 _CY	=	0x00d7
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable register banks
                                    306 ;--------------------------------------------------------
                                    307 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        308 	.ds 8
                                    309 ;--------------------------------------------------------
                                    310 ; internal ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area DSEG    (DATA)
      000000                        313 _colloc::
      000000                        314 	.ds 1
      000001                        315 _rowloc::
      000001                        316 	.ds 1
      000002                        317 _lcd_address::
      000002                        318 	.ds 2
      000004                        319 _seg7_address::
      000004                        320 	.ds 2
      000006                        321 _temp_address::
      000006                        322 	.ds 2
      000008                        323 _light_address::
      000008                        324 	.ds 2
      00000A                        325 _read_ram_address::
      00000A                        326 	.ds 2
      00000C                        327 _cursor_x::
      00000C                        328 	.ds 2
      00000E                        329 _cursor_y::
      00000E                        330 	.ds 2
      000010                        331 _textsize::
      000010                        332 	.ds 1
      000011                        333 _rotation::
      000011                        334 	.ds 1
      000012                        335 _textcolor::
      000012                        336 	.ds 2
      000014                        337 _textbgcolor::
      000014                        338 	.ds 2
      000016                        339 _drawPixel_PARM_2:
      000016                        340 	.ds 2
      000018                        341 _drawPixel_PARM_3:
      000018                        342 	.ds 2
      00001A                        343 _drawCircle_PARM_2:
      00001A                        344 	.ds 2
      00001C                        345 _drawCircle_PARM_3:
      00001C                        346 	.ds 2
      00001E                        347 _drawCircle_PARM_4:
      00001E                        348 	.ds 2
      000020                        349 _drawCircle_x0_65536_105:
      000020                        350 	.ds 2
      000022                        351 _drawCircle_sloc0_1_0:
      000022                        352 	.ds 2
      000024                        353 _drawCircle_sloc1_1_0:
      000024                        354 	.ds 2
      000026                        355 _drawCircle_sloc2_1_0:
      000026                        356 	.ds 2
      000028                        357 _drawCircle_sloc3_1_0:
      000028                        358 	.ds 2
      00002A                        359 _drawCircle_sloc4_1_0:
      00002A                        360 	.ds 2
      00002C                        361 _testCircles_PARM_2:
      00002C                        362 	.ds 2
      00002E                        363 _testCircles_radius_65536_109:
      00002E                        364 	.ds 1
      00002F                        365 _testCircles_sloc0_1_0:
      00002F                        366 	.ds 2
      000031                        367 _fillRect_PARM_2:
      000031                        368 	.ds 2
      000033                        369 _fillRect_PARM_3:
      000033                        370 	.ds 2
      000035                        371 _fillRect_PARM_4:
      000035                        372 	.ds 2
      000037                        373 _fillRect_PARM_5:
      000037                        374 	.ds 2
      000039                        375 _drawChar_PARM_2:
      000039                        376 	.ds 2
      00003B                        377 _drawChar_PARM_3:
      00003B                        378 	.ds 1
      00003C                        379 _drawChar_PARM_4:
      00003C                        380 	.ds 2
      00003E                        381 _drawChar_PARM_5:
      00003E                        382 	.ds 2
      000040                        383 _drawChar_PARM_6:
      000040                        384 	.ds 1
      000041                        385 _drawChar_sloc1_1_0:
      000041                        386 	.ds 2
      000043                        387 _drawChar_sloc2_1_0:
      000043                        388 	.ds 2
      000045                        389 _drawChar_sloc3_1_0:
      000045                        390 	.ds 1
      000046                        391 _drawChar_sloc4_1_0:
      000046                        392 	.ds 1
      000047                        393 _drawChar_sloc5_1_0:
      000047                        394 	.ds 1
      000048                        395 _asciiToHex_store_65536_202:
      000048                        396 	.ds 2
      00004A                        397 _dumpPage_i_65537_236:
      00004A                        398 	.ds 2
      00004C                        399 _dumpPage_sloc0_1_0:
      00004C                        400 	.ds 2
      00004E                        401 _dumpPage_sloc1_1_0:
      00004E                        402 	.ds 1
      00004F                        403 _move_target_65537_272:
      00004F                        404 	.ds 2
      000051                        405 _printCount_PARM_2:
      000051                        406 	.ds 1
      000052                        407 _printCount_PARM_3:
      000052                        408 	.ds 1
      000053                        409 _printCount_PARM_4:
      000053                        410 	.ds 1
      000054                        411 _printCount_PARM_5:
      000054                        412 	.ds 1
      000055                        413 _printCount_start_65536_284:
      000055                        414 	.ds 2
      000057                        415 _count_i_65537_293:
      000057                        416 	.ds 1
      000058                        417 _count_n_65537_293:
      000058                        418 	.ds 1
                                    419 ;--------------------------------------------------------
                                    420 ; overlayable items in internal ram
                                    421 ;--------------------------------------------------------
                                    422 	.area	OSEG    (OVR,DATA)
      000000                        423 _iowrite8_PARM_2:
      000000                        424 	.ds 1
                                    425 	.area	OSEG    (OVR,DATA)
                                    426 	.area	OSEG    (OVR,DATA)
                                    427 	.area	OSEG    (OVR,DATA)
      000000                        428 _writeRegister8_PARM_2:
      000000                        429 	.ds 1
                                    430 	.area	OSEG    (OVR,DATA)
      000000                        431 _writeRegister16_PARM_2:
      000000                        432 	.ds 2
                                    433 	.area	OSEG    (OVR,DATA)
      000000                        434 _setCursor_PARM_2:
      000000                        435 	.ds 2
                                    436 	.area	OSEG    (OVR,DATA)
      000000                        437 _setTextColor_PARM_2:
      000000                        438 	.ds 2
                                    439 	.area	OSEG    (OVR,DATA)
                                    440 	.area	OSEG    (OVR,DATA)
      000000                        441 _setAddress_PARM_2:
      000000                        442 	.ds 2
      000002                        443 _setAddress_PARM_3:
      000002                        444 	.ds 2
      000004                        445 _setAddress_PARM_4:
      000004                        446 	.ds 2
                                    447 	.area	OSEG    (OVR,DATA)
                                    448 	.area	OSEG    (OVR,DATA)
                                    449 	.area	OSEG    (OVR,DATA)
                                    450 	.area	OSEG    (OVR,DATA)
                                    451 ;--------------------------------------------------------
                                    452 ; Stack segment in internal ram
                                    453 ;--------------------------------------------------------
                                    454 	.area	SSEG
      000000                        455 __start__stack:
      000000                        456 	.ds	1
                                    457 
                                    458 ;--------------------------------------------------------
                                    459 ; indirectly addressable internal ram data
                                    460 ;--------------------------------------------------------
                                    461 	.area ISEG    (DATA)
                                    462 ;--------------------------------------------------------
                                    463 ; absolute internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area IABS    (ABS,DATA)
                                    466 	.area IABS    (ABS,DATA)
                                    467 ;--------------------------------------------------------
                                    468 ; bit data
                                    469 ;--------------------------------------------------------
                                    470 	.area BSEG    (BIT)
      000000                        471 _drawChar_sloc0_1_0:
      000000                        472 	.ds 1
      000001                        473 _convertAsciiHex_sloc0_1_0:
      000001                        474 	.ds 1
                                    475 ;--------------------------------------------------------
                                    476 ; paged external ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area PSEG    (PAG,XDATA)
                                    479 ;--------------------------------------------------------
                                    480 ; external ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area XSEG    (XDATA)
      000000                        483 __width::
      000000                        484 	.ds 2
      000002                        485 __height::
      000002                        486 	.ds 2
      000004                        487 _drawCircle_f_65536_106:
      000004                        488 	.ds 2
      000006                        489 _testCircles_x_65536_110:
      000006                        490 	.ds 2
      000008                        491 _testCircles_y_65536_110:
      000008                        492 	.ds 2
      00000A                        493 _drawChar_line_196609_153:
      00000A                        494 	.ds 1
      00000B                        495 _testRAM_d_65536_174:
      00000B                        496 	.ds 1
      00000C                        497 _freeType_count_65536_178:
      00000C                        498 	.ds 1
      00000D                        499 _reverse_rev_65536_196:
      00000D                        500 	.ds 2
      00000F                        501 _reverse_val_65536_196:
      00000F                        502 	.ds 2
      000011                        503 _asciiToDec_d_65536_198:
      000011                        504 	.ds 1
      000012                        505 _asciiToDec_val_65536_199:
      000012                        506 	.ds 1
      000013                        507 _asciiToDec_id_65536_199:
      000013                        508 	.ds 2
      000015                        509 _getAddress_address_65536_228:
      000015                        510 	.ds 2
      000017                        511 _getByte_byte_65536_231:
      000017                        512 	.ds 1
      000018                        513 _dumpPage_PARM_2:
      000018                        514 	.ds 1
      000019                        515 _dumpPage_PARM_3:
      000019                        516 	.ds 1
      00001A                        517 _dumpPage_start_65536_234:
      00001A                        518 	.ds 2
      00001C                        519 _dump_type_65537_242:
      00001C                        520 	.ds 1
      00001D                        521 _dump_page_65537_242:
      00001D                        522 	.ds 1
      00001E                        523 _dump_address_65537_242:
      00001E                        524 	.ds 2
      000020                        525 _check_checker_65537_258:
      000020                        526 	.ds 1
      000021                        527 _check_error_65537_258:
      000021                        528 	.ds 1
      000022                        529 _editByte_add_65536_276:
      000022                        530 	.ds 2
      000024                        531 _edit_input_65537_279:
      000024                        532 	.ds 1
      000025                        533 _count_page_65537_293:
      000025                        534 	.ds 1
      000026                        535 _count_index_65537_293:
      000026                        536 	.ds 1
      000027                        537 _count_address_65537_293:
      000027                        538 	.ds 2
                                    539 ;--------------------------------------------------------
                                    540 ; absolute external ram data
                                    541 ;--------------------------------------------------------
                                    542 	.area XABS    (ABS,XDATA)
                                    543 ;--------------------------------------------------------
                                    544 ; external initialized ram data
                                    545 ;--------------------------------------------------------
                                    546 	.area XISEG   (XDATA)
                                    547 	.area HOME    (CODE)
                                    548 	.area GSINIT0 (CODE)
                                    549 	.area GSINIT1 (CODE)
                                    550 	.area GSINIT2 (CODE)
                                    551 	.area GSINIT3 (CODE)
                                    552 	.area GSINIT4 (CODE)
                                    553 	.area GSINIT5 (CODE)
                                    554 	.area GSINIT  (CODE)
                                    555 	.area GSFINAL (CODE)
                                    556 	.area CSEG    (CODE)
                                    557 ;--------------------------------------------------------
                                    558 ; interrupt vector
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
      000000                        561 __interrupt_vect:
      000000 02r00r00         [24]  562 	ljmp	__sdcc_gsinit_startup
                                    563 ;--------------------------------------------------------
                                    564 ; global & static initialisations
                                    565 ;--------------------------------------------------------
                                    566 	.area HOME    (CODE)
                                    567 	.area GSINIT  (CODE)
                                    568 	.area GSFINAL (CODE)
                                    569 	.area GSINIT  (CODE)
                                    570 	.globl __sdcc_gsinit_startup
                                    571 	.globl __sdcc_program_startup
                                    572 	.globl __start__stack
                                    573 	.globl __mcs51_genXINIT
                                    574 	.globl __mcs51_genXRAMCLEAR
                                    575 	.globl __mcs51_genRAMCLEAR
                                    576 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  577 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  578 	mov	(_lcd_address + 1),#0x40
                                    579 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  580 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  581 	mov	(_seg7_address + 1),#0x80
                                    582 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  583 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  584 	mov	(_temp_address + 1),#0xc0
                                    585 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  586 	clr	a
      000013 F5*08            [12]  587 	mov	_light_address,a
      000015 F5*09            [12]  588 	mov	(_light_address + 1),a
                                    589 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  590 	ljmp	__sdcc_program_startup
                                    591 ;--------------------------------------------------------
                                    592 ; Home
                                    593 ;--------------------------------------------------------
                                    594 	.area HOME    (CODE)
                                    595 	.area HOME    (CODE)
      000003                        596 __sdcc_program_startup:
      000003 02r1Er10         [24]  597 	ljmp	_main
                                    598 ;	return from main will return to caller
                                    599 ;--------------------------------------------------------
                                    600 ; code
                                    601 ;--------------------------------------------------------
                                    602 	.area CSEG    (CODE)
                                    603 ;------------------------------------------------------------
                                    604 ;Allocation info for local variables in function 'iowrite8'
                                    605 ;------------------------------------------------------------
                                    606 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    607 ;map_address               Allocated to registers r6 r7 
                                    608 ;------------------------------------------------------------
                                    609 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    610 ;	-----------------------------------------
                                    611 ;	 function iowrite8
                                    612 ;	-----------------------------------------
      000000                        613 _iowrite8:
                           000007   614 	ar7 = 0x07
                           000006   615 	ar6 = 0x06
                           000005   616 	ar5 = 0x05
                           000004   617 	ar4 = 0x04
                           000003   618 	ar3 = 0x03
                           000002   619 	ar2 = 0x02
                           000001   620 	ar1 = 0x01
                           000000   621 	ar0 = 0x00
      000000 AE 82            [24]  622 	mov	r6,dpl
      000002 AF 83            [24]  623 	mov	r7,dph
                                    624 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    625 ;	assignBit
      000004 D2 B4            [12]  626 	setb	_P3_4
                                    627 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  628 	mov	dpl,r6
      000008 8F 83            [24]  629 	mov	dph,r7
      00000A E5*00            [12]  630 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  631 	movx	@dptr,a
                                    632 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    633 ;	assignBit
      00000D C2 B4            [12]  634 	clr	_P3_4
                                    635 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  636 	ret
                                    637 ;------------------------------------------------------------
                                    638 ;Allocation info for local variables in function 'ioread8'
                                    639 ;------------------------------------------------------------
                                    640 ;map_address               Allocated to registers r6 r7 
                                    641 ;val                       Allocated to registers r6 
                                    642 ;------------------------------------------------------------
                                    643 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    644 ;	-----------------------------------------
                                    645 ;	 function ioread8
                                    646 ;	-----------------------------------------
      000010                        647 _ioread8:
      000010 AE 82            [24]  648 	mov	r6,dpl
      000012 AF 83            [24]  649 	mov	r7,dph
                                    650 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    651 ;	assignBit
      000014 D2 B4            [12]  652 	setb	_P3_4
                                    653 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      000016 8E 82            [24]  654 	mov	dpl,r6
      000018 8F 83            [24]  655 	mov	dph,r7
      00001A E0               [24]  656 	movx	a,@dptr
      00001B FE               [12]  657 	mov	r6,a
                                    658 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    659 ;	assignBit
      00001C C2 B4            [12]  660 	clr	_P3_4
                                    661 ;	ecen4330_lcd_v3.c:67: return val;
      00001E 8E 82            [24]  662 	mov	dpl,r6
                                    663 ;	ecen4330_lcd_v3.c:68: }
      000020 22               [24]  664 	ret
                                    665 ;------------------------------------------------------------
                                    666 ;Allocation info for local variables in function 'delay'
                                    667 ;------------------------------------------------------------
                                    668 ;i                         Allocated with name '_delay_i_65536_29'
                                    669 ;j                         Allocated with name '_delay_j_65536_29'
                                    670 ;d                         Allocated to registers r6 r7 
                                    671 ;------------------------------------------------------------
                                    672 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d)
                                    673 ;	-----------------------------------------
                                    674 ;	 function delay
                                    675 ;	-----------------------------------------
      000021                        676 _delay:
      000021 AE 82            [24]  677 	mov	r6,dpl
      000023 AF 83            [24]  678 	mov	r7,dph
                                    679 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000025 7C 00            [12]  680 	mov	r4,#0x00
      000027 7D 00            [12]  681 	mov	r5,#0x00
      000029                        682 00107$:
      000029 8C 02            [24]  683 	mov	ar2,r4
      00002B 8D 03            [24]  684 	mov	ar3,r5
      00002D C3               [12]  685 	clr	c
      00002E EA               [12]  686 	mov	a,r2
      00002F 9E               [12]  687 	subb	a,r6
      000030 EB               [12]  688 	mov	a,r3
      000031 64 80            [12]  689 	xrl	a,#0x80
      000033 8F F0            [24]  690 	mov	b,r7
      000035 63 F0 80         [24]  691 	xrl	b,#0x80
      000038 95 F0            [12]  692 	subb	a,b
      00003A 50 14            [24]  693 	jnc	00109$
                                    694 ;	ecen4330_lcd_v3.c:77: for (j=0;j<1000;j++);
      00003C 7A E8            [12]  695 	mov	r2,#0xe8
      00003E 7B 03            [12]  696 	mov	r3,#0x03
      000040                        697 00105$:
      000040 1A               [12]  698 	dec	r2
      000041 BA FF 01         [24]  699 	cjne	r2,#0xff,00130$
      000044 1B               [12]  700 	dec	r3
      000045                        701 00130$:
      000045 EA               [12]  702 	mov	a,r2
      000046 4B               [12]  703 	orl	a,r3
      000047 70 F7            [24]  704 	jnz	00105$
                                    705 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000049 0C               [12]  706 	inc	r4
      00004A BC 00 DC         [24]  707 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  708 	inc	r5
      00004E 80 D9            [24]  709 	sjmp	00107$
      000050                        710 00109$:
                                    711 ;	ecen4330_lcd_v3.c:79: }
      000050 22               [24]  712 	ret
                                    713 ;------------------------------------------------------------
                                    714 ;Allocation info for local variables in function 'writeRegister8'
                                    715 ;------------------------------------------------------------
                                    716 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    717 ;a                         Allocated to registers r7 
                                    718 ;------------------------------------------------------------
                                    719 ;	ecen4330_lcd_v3.c:89: void writeRegister8 (uint8_t a, uint8_t d) {
                                    720 ;	-----------------------------------------
                                    721 ;	 function writeRegister8
                                    722 ;	-----------------------------------------
      000051                        723 _writeRegister8:
      000051 AF 82            [24]  724 	mov	r7,dpl
                                    725 ;	ecen4330_lcd_v3.c:90: CD = __CMD__;
                                    726 ;	assignBit
      000053 C2 B5            [12]  727 	clr	_P3_5
                                    728 ;	ecen4330_lcd_v3.c:91: write8(a);
                                    729 ;	assignBit
      000055 D2 B4            [12]  730 	setb	_P3_4
      000057 85*02 82         [24]  731 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  732 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  733 	mov	a,r7
      00005E F0               [24]  734 	movx	@dptr,a
                                    735 ;	assignBit
      00005F C2 B4            [12]  736 	clr	_P3_4
                                    737 ;	ecen4330_lcd_v3.c:92: CD = __DATA__;
                                    738 ;	assignBit
      000061 D2 B5            [12]  739 	setb	_P3_5
                                    740 ;	ecen4330_lcd_v3.c:93: write8(d);
                                    741 ;	assignBit
      000063 D2 B4            [12]  742 	setb	_P3_4
      000065 85*02 82         [24]  743 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  744 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  745 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  746 	movx	@dptr,a
                                    747 ;	assignBit
      00006E C2 B4            [12]  748 	clr	_P3_4
                                    749 ;	ecen4330_lcd_v3.c:94: }
      000070 22               [24]  750 	ret
                                    751 ;------------------------------------------------------------
                                    752 ;Allocation info for local variables in function 'writeRegister16'
                                    753 ;------------------------------------------------------------
                                    754 ;hi                        Allocated with name '_writeRegister16_hi_65536_38'
                                    755 ;lo                        Allocated with name '_writeRegister16_lo_65536_38'
                                    756 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    757 ;a                         Allocated to registers r6 r7 
                                    758 ;------------------------------------------------------------
                                    759 ;	ecen4330_lcd_v3.c:98: void writeRegister16 (uint16_t a, uint16_t d) {
                                    760 ;	-----------------------------------------
                                    761 ;	 function writeRegister16
                                    762 ;	-----------------------------------------
      000071                        763 _writeRegister16:
      000071 AE 82            [24]  764 	mov	r6,dpl
      000073 AF 83            [24]  765 	mov	r7,dph
                                    766 ;	ecen4330_lcd_v3.c:100: hi = (a) >> 8;
      000075 8F 05            [24]  767 	mov	ar5,r7
                                    768 ;	ecen4330_lcd_v3.c:101: lo = (a);
                                    769 ;	ecen4330_lcd_v3.c:102: write8Reg(hi);
                                    770 ;	assignBit
      000077 C2 B5            [12]  771 	clr	_P3_5
                                    772 ;	assignBit
      000079 D2 B4            [12]  773 	setb	_P3_4
      00007B 85*02 82         [24]  774 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  775 	mov	dph,(_lcd_address + 1)
      000081 ED               [12]  776 	mov	a,r5
      000082 F0               [24]  777 	movx	@dptr,a
                                    778 ;	assignBit
      000083 C2 B4            [12]  779 	clr	_P3_4
                                    780 ;	ecen4330_lcd_v3.c:103: write8Reg(lo);
                                    781 ;	assignBit
      000085 C2 B5            [12]  782 	clr	_P3_5
                                    783 ;	assignBit
      000087 D2 B4            [12]  784 	setb	_P3_4
      000089 85*02 82         [24]  785 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  786 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  787 	mov	a,r6
      000090 F0               [24]  788 	movx	@dptr,a
                                    789 ;	assignBit
      000091 C2 B4            [12]  790 	clr	_P3_4
                                    791 ;	ecen4330_lcd_v3.c:104: hi = (d) >> 8;
      000093 AF*01            [24]  792 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    793 ;	ecen4330_lcd_v3.c:105: lo = (d);
      000095 AE*00            [24]  794 	mov	r6,_writeRegister16_PARM_2
                                    795 ;	ecen4330_lcd_v3.c:106: CD = 1 ;
                                    796 ;	assignBit
      000097 D2 B5            [12]  797 	setb	_P3_5
                                    798 ;	ecen4330_lcd_v3.c:107: write8Data(hi);
                                    799 ;	assignBit
      000099 D2 B5            [12]  800 	setb	_P3_5
                                    801 ;	assignBit
      00009B D2 B4            [12]  802 	setb	_P3_4
      00009D 85*02 82         [24]  803 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  804 	mov	dph,(_lcd_address + 1)
      0000A3 EF               [12]  805 	mov	a,r7
      0000A4 F0               [24]  806 	movx	@dptr,a
                                    807 ;	assignBit
      0000A5 C2 B4            [12]  808 	clr	_P3_4
                                    809 ;	ecen4330_lcd_v3.c:108: write8Data(lo);
                                    810 ;	assignBit
      0000A7 D2 B5            [12]  811 	setb	_P3_5
                                    812 ;	assignBit
      0000A9 D2 B4            [12]  813 	setb	_P3_4
      0000AB 85*02 82         [24]  814 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  815 	mov	dph,(_lcd_address + 1)
      0000B1 EE               [12]  816 	mov	a,r6
      0000B2 F0               [24]  817 	movx	@dptr,a
                                    818 ;	assignBit
      0000B3 C2 B4            [12]  819 	clr	_P3_4
                                    820 ;	ecen4330_lcd_v3.c:109: }
      0000B5 22               [24]  821 	ret
                                    822 ;------------------------------------------------------------
                                    823 ;Allocation info for local variables in function 'setCursor'
                                    824 ;------------------------------------------------------------
                                    825 ;y                         Allocated with name '_setCursor_PARM_2'
                                    826 ;x                         Allocated to registers 
                                    827 ;------------------------------------------------------------
                                    828 ;	ecen4330_lcd_v3.c:117: void setCursor (uint16_t x, uint16_t y) {
                                    829 ;	-----------------------------------------
                                    830 ;	 function setCursor
                                    831 ;	-----------------------------------------
      0000B6                        832 _setCursor:
      0000B6 85 82*0C         [24]  833 	mov	_cursor_x,dpl
      0000B9 85 83*0D         [24]  834 	mov	(_cursor_x + 1),dph
                                    835 ;	ecen4330_lcd_v3.c:119: cursor_y = y;
      0000BC 85*00*0E         [24]  836 	mov	_cursor_y,_setCursor_PARM_2
      0000BF 85*01*0F         [24]  837 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    838 ;	ecen4330_lcd_v3.c:120: }
      0000C2 22               [24]  839 	ret
                                    840 ;------------------------------------------------------------
                                    841 ;Allocation info for local variables in function 'setTextColor'
                                    842 ;------------------------------------------------------------
                                    843 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    844 ;x                         Allocated to registers 
                                    845 ;------------------------------------------------------------
                                    846 ;	ecen4330_lcd_v3.c:127: void setTextColor (uint16_t x, uint16_t y) {
                                    847 ;	-----------------------------------------
                                    848 ;	 function setTextColor
                                    849 ;	-----------------------------------------
      0000C3                        850 _setTextColor:
      0000C3 85 82*12         [24]  851 	mov	_textcolor,dpl
      0000C6 85 83*13         [24]  852 	mov	(_textcolor + 1),dph
                                    853 ;	ecen4330_lcd_v3.c:129: textbgcolor = y;
      0000C9 85*00*14         [24]  854 	mov	_textbgcolor,_setTextColor_PARM_2
      0000CC 85*01*15         [24]  855 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    856 ;	ecen4330_lcd_v3.c:130: }
      0000CF 22               [24]  857 	ret
                                    858 ;------------------------------------------------------------
                                    859 ;Allocation info for local variables in function 'setTextSize'
                                    860 ;------------------------------------------------------------
                                    861 ;s                         Allocated to registers r7 
                                    862 ;------------------------------------------------------------
                                    863 ;	ecen4330_lcd_v3.c:137: void setTextSize (uint8_t s) {
                                    864 ;	-----------------------------------------
                                    865 ;	 function setTextSize
                                    866 ;	-----------------------------------------
      0000D0                        867 _setTextSize:
                                    868 ;	ecen4330_lcd_v3.c:138: if (s > 8) return;
      0000D0 E5 82            [12]  869 	mov	a,dpl
      0000D2 FF               [12]  870 	mov	r7,a
      0000D3 24 F7            [12]  871 	add	a,#0xff - 0x08
      0000D5 50 01            [24]  872 	jnc	00102$
      0000D7 22               [24]  873 	ret
      0000D8                        874 00102$:
                                    875 ;	ecen4330_lcd_v3.c:139: textsize = (s>0) ? s : 1 ;
      0000D8 EF               [12]  876 	mov	a,r7
      0000D9 60 06            [24]  877 	jz	00105$
      0000DB 8F 06            [24]  878 	mov	ar6,r7
      0000DD 7F 00            [12]  879 	mov	r7,#0x00
      0000DF 80 04            [24]  880 	sjmp	00106$
      0000E1                        881 00105$:
      0000E1 7E 01            [12]  882 	mov	r6,#0x01
      0000E3 7F 00            [12]  883 	mov	r7,#0x00
      0000E5                        884 00106$:
      0000E5 8E*10            [24]  885 	mov	_textsize,r6
                                    886 ;	ecen4330_lcd_v3.c:140: }
      0000E7 22               [24]  887 	ret
                                    888 ;------------------------------------------------------------
                                    889 ;Allocation info for local variables in function 'setRotation'
                                    890 ;------------------------------------------------------------
                                    891 ;flag                      Allocated to registers r7 
                                    892 ;------------------------------------------------------------
                                    893 ;	ecen4330_lcd_v3.c:152: void setRotation (uint8_t flag) {
                                    894 ;	-----------------------------------------
                                    895 ;	 function setRotation
                                    896 ;	-----------------------------------------
      0000E8                        897 _setRotation:
                                    898 ;	ecen4330_lcd_v3.c:153: switch(flag) {
      0000E8 E5 82            [12]  899 	mov	a,dpl
      0000EA FF               [12]  900 	mov	r7,a
      0000EB 24 FC            [12]  901 	add	a,#0xff - 0x03
      0000ED 40 6A            [24]  902 	jc	00105$
      0000EF EF               [12]  903 	mov	a,r7
      0000F0 2F               [12]  904 	add	a,r7
                                    905 ;	ecen4330_lcd_v3.c:154: case 0:
      0000F1 90r00rF5         [24]  906 	mov	dptr,#00115$
      0000F4 73               [24]  907 	jmp	@a+dptr
      0000F5                        908 00115$:
      0000F5 80 06            [24]  909 	sjmp	00101$
      0000F7 80 1B            [24]  910 	sjmp	00102$
      0000F9 80 30            [24]  911 	sjmp	00103$
      0000FB 80 45            [24]  912 	sjmp	00104$
      0000FD                        913 00101$:
                                    914 ;	ecen4330_lcd_v3.c:155: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000FD 7F 48            [12]  915 	mov	r7,#0x48
                                    916 ;	ecen4330_lcd_v3.c:156: _width = TFTWIDTH;
      0000FF 90r00r00         [24]  917 	mov	dptr,#__width
      000102 74 F0            [12]  918 	mov	a,#0xf0
      000104 F0               [24]  919 	movx	@dptr,a
      000105 E4               [12]  920 	clr	a
      000106 A3               [24]  921 	inc	dptr
      000107 F0               [24]  922 	movx	@dptr,a
                                    923 ;	ecen4330_lcd_v3.c:157: _height = TFTHEIGHT;
      000108 90r00r02         [24]  924 	mov	dptr,#__height
      00010B 74 40            [12]  925 	mov	a,#0x40
      00010D F0               [24]  926 	movx	@dptr,a
      00010E 74 01            [12]  927 	mov	a,#0x01
      000110 A3               [24]  928 	inc	dptr
      000111 F0               [24]  929 	movx	@dptr,a
                                    930 ;	ecen4330_lcd_v3.c:158: break;
                                    931 ;	ecen4330_lcd_v3.c:159: case 1:
      000112 80 5A            [24]  932 	sjmp	00106$
      000114                        933 00102$:
                                    934 ;	ecen4330_lcd_v3.c:160: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000114 7F 28            [12]  935 	mov	r7,#0x28
                                    936 ;	ecen4330_lcd_v3.c:161: _width = TFTHEIGHT;
      000116 90r00r00         [24]  937 	mov	dptr,#__width
      000119 74 40            [12]  938 	mov	a,#0x40
      00011B F0               [24]  939 	movx	@dptr,a
      00011C 74 01            [12]  940 	mov	a,#0x01
      00011E A3               [24]  941 	inc	dptr
      00011F F0               [24]  942 	movx	@dptr,a
                                    943 ;	ecen4330_lcd_v3.c:162: _height = TFTWIDTH;
      000120 90r00r02         [24]  944 	mov	dptr,#__height
      000123 74 F0            [12]  945 	mov	a,#0xf0
      000125 F0               [24]  946 	movx	@dptr,a
      000126 E4               [12]  947 	clr	a
      000127 A3               [24]  948 	inc	dptr
      000128 F0               [24]  949 	movx	@dptr,a
                                    950 ;	ecen4330_lcd_v3.c:163: break;
                                    951 ;	ecen4330_lcd_v3.c:164: case 2:
      000129 80 43            [24]  952 	sjmp	00106$
      00012B                        953 00103$:
                                    954 ;	ecen4330_lcd_v3.c:165: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00012B 7F 88            [12]  955 	mov	r7,#0x88
                                    956 ;	ecen4330_lcd_v3.c:166: _width = TFTWIDTH;
      00012D 90r00r00         [24]  957 	mov	dptr,#__width
      000130 74 F0            [12]  958 	mov	a,#0xf0
      000132 F0               [24]  959 	movx	@dptr,a
      000133 E4               [12]  960 	clr	a
      000134 A3               [24]  961 	inc	dptr
      000135 F0               [24]  962 	movx	@dptr,a
                                    963 ;	ecen4330_lcd_v3.c:167: _height = TFTHEIGHT;
      000136 90r00r02         [24]  964 	mov	dptr,#__height
      000139 74 40            [12]  965 	mov	a,#0x40
      00013B F0               [24]  966 	movx	@dptr,a
      00013C 74 01            [12]  967 	mov	a,#0x01
      00013E A3               [24]  968 	inc	dptr
      00013F F0               [24]  969 	movx	@dptr,a
                                    970 ;	ecen4330_lcd_v3.c:168: break;
                                    971 ;	ecen4330_lcd_v3.c:169: case 3:
      000140 80 2C            [24]  972 	sjmp	00106$
      000142                        973 00104$:
                                    974 ;	ecen4330_lcd_v3.c:170: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000142 7F E8            [12]  975 	mov	r7,#0xe8
                                    976 ;	ecen4330_lcd_v3.c:171: _width = TFTHEIGHT;
      000144 90r00r00         [24]  977 	mov	dptr,#__width
      000147 74 40            [12]  978 	mov	a,#0x40
      000149 F0               [24]  979 	movx	@dptr,a
      00014A 74 01            [12]  980 	mov	a,#0x01
      00014C A3               [24]  981 	inc	dptr
      00014D F0               [24]  982 	movx	@dptr,a
                                    983 ;	ecen4330_lcd_v3.c:172: _height = TFTWIDTH;
      00014E 90r00r02         [24]  984 	mov	dptr,#__height
      000151 74 F0            [12]  985 	mov	a,#0xf0
      000153 F0               [24]  986 	movx	@dptr,a
      000154 E4               [12]  987 	clr	a
      000155 A3               [24]  988 	inc	dptr
      000156 F0               [24]  989 	movx	@dptr,a
                                    990 ;	ecen4330_lcd_v3.c:173: break;
                                    991 ;	ecen4330_lcd_v3.c:174: default:
      000157 80 15            [24]  992 	sjmp	00106$
      000159                        993 00105$:
                                    994 ;	ecen4330_lcd_v3.c:175: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000159 7F 48            [12]  995 	mov	r7,#0x48
                                    996 ;	ecen4330_lcd_v3.c:176: _width = TFTWIDTH;
      00015B 90r00r00         [24]  997 	mov	dptr,#__width
      00015E 74 F0            [12]  998 	mov	a,#0xf0
      000160 F0               [24]  999 	movx	@dptr,a
      000161 E4               [12] 1000 	clr	a
      000162 A3               [24] 1001 	inc	dptr
      000163 F0               [24] 1002 	movx	@dptr,a
                                   1003 ;	ecen4330_lcd_v3.c:177: _height = TFTHEIGHT;
      000164 90r00r02         [24] 1004 	mov	dptr,#__height
      000167 74 40            [12] 1005 	mov	a,#0x40
      000169 F0               [24] 1006 	movx	@dptr,a
      00016A 74 01            [12] 1007 	mov	a,#0x01
      00016C A3               [24] 1008 	inc	dptr
      00016D F0               [24] 1009 	movx	@dptr,a
                                   1010 ;	ecen4330_lcd_v3.c:179: }
      00016E                       1011 00106$:
                                   1012 ;	ecen4330_lcd_v3.c:180: writeRegister8(ILI9341_MEMCONTROL, flag);
      00016E 8F*00            [24] 1013 	mov	_writeRegister8_PARM_2,r7
      000170 75 82 36         [24] 1014 	mov	dpl,#0x36
                                   1015 ;	ecen4330_lcd_v3.c:181: }
      000173 02r00r51         [24] 1016 	ljmp	_writeRegister8
                                   1017 ;------------------------------------------------------------
                                   1018 ;Allocation info for local variables in function 'setAddress'
                                   1019 ;------------------------------------------------------------
                                   1020 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1021 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1022 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1023 ;x1                        Allocated to registers r6 r7 
                                   1024 ;------------------------------------------------------------
                                   1025 ;	ecen4330_lcd_v3.c:183: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                   1026 ;	-----------------------------------------
                                   1027 ;	 function setAddress
                                   1028 ;	-----------------------------------------
      000176                       1029 _setAddress:
      000176 AE 82            [24] 1030 	mov	r6,dpl
      000178 AF 83            [24] 1031 	mov	r7,dph
                                   1032 ;	ecen4330_lcd_v3.c:184: write8Reg(0x2A);
                                   1033 ;	assignBit
      00017A C2 B5            [12] 1034 	clr	_P3_5
                                   1035 ;	assignBit
      00017C D2 B4            [12] 1036 	setb	_P3_4
      00017E 85*02 82         [24] 1037 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1038 	mov	dph,(_lcd_address + 1)
      000184 74 2A            [12] 1039 	mov	a,#0x2a
      000186 F0               [24] 1040 	movx	@dptr,a
                                   1041 ;	assignBit
      000187 C2 B4            [12] 1042 	clr	_P3_4
                                   1043 ;	ecen4330_lcd_v3.c:185: write8Data(x1 >> 8);
                                   1044 ;	assignBit
      000189 D2 B5            [12] 1045 	setb	_P3_5
                                   1046 ;	assignBit
      00018B D2 B4            [12] 1047 	setb	_P3_4
      00018D 85*02 82         [24] 1048 	mov	dpl,_lcd_address
      000190 85*03 83         [24] 1049 	mov	dph,(_lcd_address + 1)
      000193 8F 05            [24] 1050 	mov	ar5,r7
      000195 ED               [12] 1051 	mov	a,r5
      000196 F0               [24] 1052 	movx	@dptr,a
                                   1053 ;	assignBit
      000197 C2 B4            [12] 1054 	clr	_P3_4
                                   1055 ;	ecen4330_lcd_v3.c:186: write8Data(x1);
                                   1056 ;	assignBit
      000199 D2 B5            [12] 1057 	setb	_P3_5
                                   1058 ;	assignBit
      00019B D2 B4            [12] 1059 	setb	_P3_4
      00019D 85*02 82         [24] 1060 	mov	dpl,_lcd_address
      0001A0 85*03 83         [24] 1061 	mov	dph,(_lcd_address + 1)
      0001A3 EE               [12] 1062 	mov	a,r6
      0001A4 F0               [24] 1063 	movx	@dptr,a
                                   1064 ;	assignBit
      0001A5 C2 B4            [12] 1065 	clr	_P3_4
                                   1066 ;	ecen4330_lcd_v3.c:187: write8Data(x2 >> 8);
                                   1067 ;	assignBit
      0001A7 D2 B5            [12] 1068 	setb	_P3_5
                                   1069 ;	assignBit
      0001A9 D2 B4            [12] 1070 	setb	_P3_4
      0001AB 85*02 82         [24] 1071 	mov	dpl,_lcd_address
      0001AE 85*03 83         [24] 1072 	mov	dph,(_lcd_address + 1)
      0001B1 E5*03            [12] 1073 	mov	a,(_setAddress_PARM_3 + 1)
      0001B3 F0               [24] 1074 	movx	@dptr,a
                                   1075 ;	assignBit
      0001B4 C2 B4            [12] 1076 	clr	_P3_4
                                   1077 ;	ecen4330_lcd_v3.c:188: write8Data(x2);
                                   1078 ;	assignBit
      0001B6 D2 B5            [12] 1079 	setb	_P3_5
                                   1080 ;	assignBit
      0001B8 D2 B4            [12] 1081 	setb	_P3_4
      0001BA 85*02 82         [24] 1082 	mov	dpl,_lcd_address
      0001BD 85*03 83         [24] 1083 	mov	dph,(_lcd_address + 1)
      0001C0 E5*02            [12] 1084 	mov	a,_setAddress_PARM_3
      0001C2 F0               [24] 1085 	movx	@dptr,a
                                   1086 ;	assignBit
      0001C3 C2 B4            [12] 1087 	clr	_P3_4
                                   1088 ;	ecen4330_lcd_v3.c:190: write8Reg(0x2B);
                                   1089 ;	assignBit
      0001C5 C2 B5            [12] 1090 	clr	_P3_5
                                   1091 ;	assignBit
      0001C7 D2 B4            [12] 1092 	setb	_P3_4
      0001C9 85*02 82         [24] 1093 	mov	dpl,_lcd_address
      0001CC 85*03 83         [24] 1094 	mov	dph,(_lcd_address + 1)
      0001CF 74 2B            [12] 1095 	mov	a,#0x2b
      0001D1 F0               [24] 1096 	movx	@dptr,a
                                   1097 ;	assignBit
      0001D2 C2 B4            [12] 1098 	clr	_P3_4
                                   1099 ;	ecen4330_lcd_v3.c:191: write8Data(y1 >> 8);
                                   1100 ;	assignBit
      0001D4 D2 B5            [12] 1101 	setb	_P3_5
                                   1102 ;	assignBit
      0001D6 D2 B4            [12] 1103 	setb	_P3_4
      0001D8 85*02 82         [24] 1104 	mov	dpl,_lcd_address
      0001DB 85*03 83         [24] 1105 	mov	dph,(_lcd_address + 1)
      0001DE E5*01            [12] 1106 	mov	a,(_setAddress_PARM_2 + 1)
      0001E0 F0               [24] 1107 	movx	@dptr,a
                                   1108 ;	assignBit
      0001E1 C2 B4            [12] 1109 	clr	_P3_4
                                   1110 ;	ecen4330_lcd_v3.c:192: write8Data(y1);
                                   1111 ;	assignBit
      0001E3 D2 B5            [12] 1112 	setb	_P3_5
                                   1113 ;	assignBit
      0001E5 D2 B4            [12] 1114 	setb	_P3_4
      0001E7 85*02 82         [24] 1115 	mov	dpl,_lcd_address
      0001EA 85*03 83         [24] 1116 	mov	dph,(_lcd_address + 1)
      0001ED E5*00            [12] 1117 	mov	a,_setAddress_PARM_2
      0001EF F0               [24] 1118 	movx	@dptr,a
                                   1119 ;	assignBit
      0001F0 C2 B4            [12] 1120 	clr	_P3_4
                                   1121 ;	ecen4330_lcd_v3.c:193: write8Data(y2 >> 8);
                                   1122 ;	assignBit
      0001F2 D2 B5            [12] 1123 	setb	_P3_5
                                   1124 ;	assignBit
      0001F4 D2 B4            [12] 1125 	setb	_P3_4
      0001F6 85*02 82         [24] 1126 	mov	dpl,_lcd_address
      0001F9 85*03 83         [24] 1127 	mov	dph,(_lcd_address + 1)
      0001FC E5*05            [12] 1128 	mov	a,(_setAddress_PARM_4 + 1)
      0001FE F0               [24] 1129 	movx	@dptr,a
                                   1130 ;	assignBit
      0001FF C2 B4            [12] 1131 	clr	_P3_4
                                   1132 ;	ecen4330_lcd_v3.c:194: write8Data(y2);
                                   1133 ;	assignBit
      000201 D2 B5            [12] 1134 	setb	_P3_5
                                   1135 ;	assignBit
      000203 D2 B4            [12] 1136 	setb	_P3_4
      000205 85*02 82         [24] 1137 	mov	dpl,_lcd_address
      000208 85*03 83         [24] 1138 	mov	dph,(_lcd_address + 1)
      00020B E5*04            [12] 1139 	mov	a,_setAddress_PARM_4
      00020D F0               [24] 1140 	movx	@dptr,a
                                   1141 ;	assignBit
      00020E C2 B4            [12] 1142 	clr	_P3_4
                                   1143 ;	ecen4330_lcd_v3.c:195: }
      000210 22               [24] 1144 	ret
                                   1145 ;------------------------------------------------------------
                                   1146 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1147 ;------------------------------------------------------------
                                   1148 ;	ecen4330_lcd_v3.c:201: void TFT_LCD_INIT (void) {
                                   1149 ;	-----------------------------------------
                                   1150 ;	 function TFT_LCD_INIT
                                   1151 ;	-----------------------------------------
      000211                       1152 _TFT_LCD_INIT:
                                   1153 ;	ecen4330_lcd_v3.c:202: _width = TFTWIDTH;
      000211 90r00r00         [24] 1154 	mov	dptr,#__width
      000214 74 F0            [12] 1155 	mov	a,#0xf0
      000216 F0               [24] 1156 	movx	@dptr,a
      000217 E4               [12] 1157 	clr	a
      000218 A3               [24] 1158 	inc	dptr
      000219 F0               [24] 1159 	movx	@dptr,a
                                   1160 ;	ecen4330_lcd_v3.c:203: _height = TFTHEIGHT;
      00021A 90r00r02         [24] 1161 	mov	dptr,#__height
      00021D 74 40            [12] 1162 	mov	a,#0x40
      00021F F0               [24] 1163 	movx	@dptr,a
      000220 74 01            [12] 1164 	mov	a,#0x01
      000222 A3               [24] 1165 	inc	dptr
      000223 F0               [24] 1166 	movx	@dptr,a
                                   1167 ;	ecen4330_lcd_v3.c:205: IOM = 0;
                                   1168 ;	assignBit
      000224 C2 B4            [12] 1169 	clr	_P3_4
                                   1170 ;	ecen4330_lcd_v3.c:206: CD = 1;
                                   1171 ;	assignBit
      000226 D2 B5            [12] 1172 	setb	_P3_5
                                   1173 ;	ecen4330_lcd_v3.c:208: write8Reg(0x00);
                                   1174 ;	assignBit
      000228 C2 B5            [12] 1175 	clr	_P3_5
                                   1176 ;	assignBit
      00022A D2 B4            [12] 1177 	setb	_P3_4
      00022C 85*02 82         [24] 1178 	mov	dpl,_lcd_address
      00022F 85*03 83         [24] 1179 	mov	dph,(_lcd_address + 1)
      000232 E4               [12] 1180 	clr	a
      000233 F0               [24] 1181 	movx	@dptr,a
                                   1182 ;	assignBit
      000234 C2 B4            [12] 1183 	clr	_P3_4
                                   1184 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1185 ;	assignBit
      000236 D2 B5            [12] 1186 	setb	_P3_5
                                   1187 ;	assignBit
      000238 D2 B4            [12] 1188 	setb	_P3_4
      00023A 85*02 82         [24] 1189 	mov	dpl,_lcd_address
      00023D 85*03 83         [24] 1190 	mov	dph,(_lcd_address + 1)
      000240 E4               [12] 1191 	clr	a
      000241 F0               [24] 1192 	movx	@dptr,a
                                   1193 ;	assignBit
      000242 C2 B4            [12] 1194 	clr	_P3_4
                                   1195 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1196 ;	assignBit
      000244 D2 B5            [12] 1197 	setb	_P3_5
                                   1198 ;	assignBit
      000246 D2 B4            [12] 1199 	setb	_P3_4
      000248 85*02 82         [24] 1200 	mov	dpl,_lcd_address
      00024B 85*03 83         [24] 1201 	mov	dph,(_lcd_address + 1)
      00024E E4               [12] 1202 	clr	a
      00024F F0               [24] 1203 	movx	@dptr,a
                                   1204 ;	assignBit
      000250 C2 B4            [12] 1205 	clr	_P3_4
                                   1206 ;	ecen4330_lcd_v3.c:211: write8Data(0x00);
                                   1207 ;	assignBit
      000252 D2 B5            [12] 1208 	setb	_P3_5
                                   1209 ;	assignBit
      000254 D2 B4            [12] 1210 	setb	_P3_4
      000256 85*02 82         [24] 1211 	mov	dpl,_lcd_address
      000259 85*03 83         [24] 1212 	mov	dph,(_lcd_address + 1)
      00025C E4               [12] 1213 	clr	a
      00025D F0               [24] 1214 	movx	@dptr,a
                                   1215 ;	assignBit
      00025E C2 B4            [12] 1216 	clr	_P3_4
                                   1217 ;	ecen4330_lcd_v3.c:212: delay(200);
      000260 90 00 C8         [24] 1218 	mov	dptr,#0x00c8
      000263 12r00r21         [24] 1219 	lcall	_delay
                                   1220 ;	ecen4330_lcd_v3.c:214: writeRegister8(ILI9341_SOFTRESET, 0);
      000266 75*00 00         [24] 1221 	mov	_writeRegister8_PARM_2,#0x00
      000269 75 82 01         [24] 1222 	mov	dpl,#0x01
      00026C 12r00r51         [24] 1223 	lcall	_writeRegister8
                                   1224 ;	ecen4330_lcd_v3.c:215: delay(50);
      00026F 90 00 32         [24] 1225 	mov	dptr,#0x0032
      000272 12r00r21         [24] 1226 	lcall	_delay
                                   1227 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000275 75*00 00         [24] 1228 	mov	_writeRegister8_PARM_2,#0x00
      000278 75 82 28         [24] 1229 	mov	dpl,#0x28
      00027B 12r00r51         [24] 1230 	lcall	_writeRegister8
                                   1231 ;	ecen4330_lcd_v3.c:217: delay(10);
      00027E 90 00 0A         [24] 1232 	mov	dptr,#0x000a
      000281 12r00r21         [24] 1233 	lcall	_delay
                                   1234 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000284 75*00 23         [24] 1235 	mov	_writeRegister8_PARM_2,#0x23
      000287 75 82 C0         [24] 1236 	mov	dpl,#0xc0
      00028A 12r00r51         [24] 1237 	lcall	_writeRegister8
                                   1238 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00028D 75*00 11         [24] 1239 	mov	_writeRegister8_PARM_2,#0x11
      000290 75 82 C1         [24] 1240 	mov	dpl,#0xc1
      000293 12r00r51         [24] 1241 	lcall	_writeRegister8
                                   1242 ;	ecen4330_lcd_v3.c:221: write8Reg(ILI9341_VCOMCONTROL1);
                                   1243 ;	assignBit
      000296 C2 B5            [12] 1244 	clr	_P3_5
                                   1245 ;	assignBit
      000298 D2 B4            [12] 1246 	setb	_P3_4
      00029A 85*02 82         [24] 1247 	mov	dpl,_lcd_address
      00029D 85*03 83         [24] 1248 	mov	dph,(_lcd_address + 1)
      0002A0 74 C5            [12] 1249 	mov	a,#0xc5
      0002A2 F0               [24] 1250 	movx	@dptr,a
                                   1251 ;	assignBit
      0002A3 C2 B4            [12] 1252 	clr	_P3_4
                                   1253 ;	ecen4330_lcd_v3.c:222: write8Data(0x3d);
                                   1254 ;	assignBit
      0002A5 D2 B5            [12] 1255 	setb	_P3_5
                                   1256 ;	assignBit
      0002A7 D2 B4            [12] 1257 	setb	_P3_4
      0002A9 85*02 82         [24] 1258 	mov	dpl,_lcd_address
      0002AC 85*03 83         [24] 1259 	mov	dph,(_lcd_address + 1)
      0002AF 74 3D            [12] 1260 	mov	a,#0x3d
      0002B1 F0               [24] 1261 	movx	@dptr,a
                                   1262 ;	assignBit
      0002B2 C2 B4            [12] 1263 	clr	_P3_4
                                   1264 ;	ecen4330_lcd_v3.c:223: write8Data(0x30);
                                   1265 ;	assignBit
      0002B4 D2 B5            [12] 1266 	setb	_P3_5
                                   1267 ;	assignBit
      0002B6 D2 B4            [12] 1268 	setb	_P3_4
      0002B8 85*02 82         [24] 1269 	mov	dpl,_lcd_address
      0002BB 85*03 83         [24] 1270 	mov	dph,(_lcd_address + 1)
      0002BE 74 30            [12] 1271 	mov	a,#0x30
      0002C0 F0               [24] 1272 	movx	@dptr,a
                                   1273 ;	assignBit
      0002C1 C2 B4            [12] 1274 	clr	_P3_4
                                   1275 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002C3 75*00 AA         [24] 1276 	mov	_writeRegister8_PARM_2,#0xaa
      0002C6 75 82 C7         [24] 1277 	mov	dpl,#0xc7
      0002C9 12r00r51         [24] 1278 	lcall	_writeRegister8
                                   1279 ;	ecen4330_lcd_v3.c:225: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002CC 75*00 88         [24] 1280 	mov	_writeRegister8_PARM_2,#0x88
      0002CF 75 82 36         [24] 1281 	mov	dpl,#0x36
      0002D2 12r00r51         [24] 1282 	lcall	_writeRegister8
                                   1283 ;	ecen4330_lcd_v3.c:226: write8Reg(ILI9341_PIXELFORMAT);
                                   1284 ;	assignBit
      0002D5 C2 B5            [12] 1285 	clr	_P3_5
                                   1286 ;	assignBit
      0002D7 D2 B4            [12] 1287 	setb	_P3_4
      0002D9 85*02 82         [24] 1288 	mov	dpl,_lcd_address
      0002DC 85*03 83         [24] 1289 	mov	dph,(_lcd_address + 1)
      0002DF 74 3A            [12] 1290 	mov	a,#0x3a
      0002E1 F0               [24] 1291 	movx	@dptr,a
                                   1292 ;	assignBit
      0002E2 C2 B4            [12] 1293 	clr	_P3_4
                                   1294 ;	ecen4330_lcd_v3.c:227: write8Data(0x55);write8Data(0x00);
                                   1295 ;	assignBit
      0002E4 D2 B5            [12] 1296 	setb	_P3_5
                                   1297 ;	assignBit
      0002E6 D2 B4            [12] 1298 	setb	_P3_4
      0002E8 85*02 82         [24] 1299 	mov	dpl,_lcd_address
      0002EB 85*03 83         [24] 1300 	mov	dph,(_lcd_address + 1)
      0002EE 74 55            [12] 1301 	mov	a,#0x55
      0002F0 F0               [24] 1302 	movx	@dptr,a
                                   1303 ;	assignBit
      0002F1 C2 B4            [12] 1304 	clr	_P3_4
                                   1305 ;	assignBit
      0002F3 D2 B5            [12] 1306 	setb	_P3_5
                                   1307 ;	assignBit
      0002F5 D2 B4            [12] 1308 	setb	_P3_4
      0002F7 85*02 82         [24] 1309 	mov	dpl,_lcd_address
      0002FA 85*03 83         [24] 1310 	mov	dph,(_lcd_address + 1)
      0002FD E4               [12] 1311 	clr	a
      0002FE F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	assignBit
      0002FF C2 B4            [12] 1314 	clr	_P3_4
                                   1315 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000301 75*00 1B         [24] 1316 	mov	_writeRegister16_PARM_2,#0x1b
      000304 75*01 00         [24] 1317 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000307 90 00 B1         [24] 1318 	mov	dptr,#0x00b1
      00030A 12r00r71         [24] 1319 	lcall	_writeRegister16
                                   1320 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00030D 75*00 07         [24] 1321 	mov	_writeRegister8_PARM_2,#0x07
      000310 75 82 B7         [24] 1322 	mov	dpl,#0xb7
      000313 12r00r51         [24] 1323 	lcall	_writeRegister8
                                   1324 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      000316 75*00 00         [24] 1325 	mov	_writeRegister8_PARM_2,#0x00
      000319 75 82 11         [24] 1326 	mov	dpl,#0x11
      00031C 12r00r51         [24] 1327 	lcall	_writeRegister8
                                   1328 ;	ecen4330_lcd_v3.c:233: delay(150);
      00031F 90 00 96         [24] 1329 	mov	dptr,#0x0096
      000322 12r00r21         [24] 1330 	lcall	_delay
                                   1331 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      000325 75*00 00         [24] 1332 	mov	_writeRegister8_PARM_2,#0x00
      000328 75 82 29         [24] 1333 	mov	dpl,#0x29
      00032B 12r00r51         [24] 1334 	lcall	_writeRegister8
                                   1335 ;	ecen4330_lcd_v3.c:235: delay(500);
      00032E 90 01 F4         [24] 1336 	mov	dptr,#0x01f4
      000331 12r00r21         [24] 1337 	lcall	_delay
                                   1338 ;	ecen4330_lcd_v3.c:236: setAddress(0,0,_width-1,_height-1);
      000334 90r00r00         [24] 1339 	mov	dptr,#__width
      000337 E0               [24] 1340 	movx	a,@dptr
      000338 FE               [12] 1341 	mov	r6,a
      000339 A3               [24] 1342 	inc	dptr
      00033A E0               [24] 1343 	movx	a,@dptr
      00033B FF               [12] 1344 	mov	r7,a
      00033C 1E               [12] 1345 	dec	r6
      00033D BE FF 01         [24] 1346 	cjne	r6,#0xff,00103$
      000340 1F               [12] 1347 	dec	r7
      000341                       1348 00103$:
      000341 8E*02            [24] 1349 	mov	_setAddress_PARM_3,r6
      000343 8F*03            [24] 1350 	mov	(_setAddress_PARM_3 + 1),r7
      000345 90r00r02         [24] 1351 	mov	dptr,#__height
      000348 E0               [24] 1352 	movx	a,@dptr
      000349 FE               [12] 1353 	mov	r6,a
      00034A A3               [24] 1354 	inc	dptr
      00034B E0               [24] 1355 	movx	a,@dptr
      00034C FF               [12] 1356 	mov	r7,a
      00034D 1E               [12] 1357 	dec	r6
      00034E BE FF 01         [24] 1358 	cjne	r6,#0xff,00104$
      000351 1F               [12] 1359 	dec	r7
      000352                       1360 00104$:
      000352 8E*04            [24] 1361 	mov	_setAddress_PARM_4,r6
      000354 8F*05            [24] 1362 	mov	(_setAddress_PARM_4 + 1),r7
      000356 E4               [12] 1363 	clr	a
      000357 F5*00            [12] 1364 	mov	_setAddress_PARM_2,a
      000359 F5*01            [12] 1365 	mov	(_setAddress_PARM_2 + 1),a
      00035B 90 00 00         [24] 1366 	mov	dptr,#0x0000
                                   1367 ;	ecen4330_lcd_v3.c:237: }
      00035E 02r01r76         [24] 1368 	ljmp	_setAddress
                                   1369 ;------------------------------------------------------------
                                   1370 ;Allocation info for local variables in function 'drawPixel'
                                   1371 ;------------------------------------------------------------
                                   1372 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1373 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1374 ;x3                        Allocated to registers r6 r7 
                                   1375 ;------------------------------------------------------------
                                   1376 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1377 ;	-----------------------------------------
                                   1378 ;	 function drawPixel
                                   1379 ;	-----------------------------------------
      000361                       1380 _drawPixel:
      000361 AE 82            [24] 1381 	mov	r6,dpl
      000363 AF 83            [24] 1382 	mov	r7,dph
                                   1383 ;	ecen4330_lcd_v3.c:248: setAddress(x3,y3,x3+1,y3+1);
      000365 8E 04            [24] 1384 	mov	ar4,r6
      000367 8F 05            [24] 1385 	mov	ar5,r7
      000369 0C               [12] 1386 	inc	r4
      00036A BC 00 01         [24] 1387 	cjne	r4,#0x00,00103$
      00036D 0D               [12] 1388 	inc	r5
      00036E                       1389 00103$:
      00036E 8C*02            [24] 1390 	mov	_setAddress_PARM_3,r4
      000370 8D*03            [24] 1391 	mov	(_setAddress_PARM_3 + 1),r5
      000372 AC*16            [24] 1392 	mov	r4,_drawPixel_PARM_2
      000374 AD*17            [24] 1393 	mov	r5,(_drawPixel_PARM_2 + 1)
      000376 0C               [12] 1394 	inc	r4
      000377 BC 00 01         [24] 1395 	cjne	r4,#0x00,00104$
      00037A 0D               [12] 1396 	inc	r5
      00037B                       1397 00104$:
      00037B 8C*04            [24] 1398 	mov	_setAddress_PARM_4,r4
      00037D 8D*05            [24] 1399 	mov	(_setAddress_PARM_4 + 1),r5
      00037F 85*16*00         [24] 1400 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000382 85*17*01         [24] 1401 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000385 8E 82            [24] 1402 	mov	dpl,r6
      000387 8F 83            [24] 1403 	mov	dph,r7
      000389 12r01r76         [24] 1404 	lcall	_setAddress
                                   1405 ;	ecen4330_lcd_v3.c:250: CD=0; write8(0x2C);
                                   1406 ;	assignBit
      00038C C2 B5            [12] 1407 	clr	_P3_5
                                   1408 ;	assignBit
      00038E D2 B4            [12] 1409 	setb	_P3_4
      000390 85*02 82         [24] 1410 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1411 	mov	dph,(_lcd_address + 1)
      000396 74 2C            [12] 1412 	mov	a,#0x2c
      000398 F0               [24] 1413 	movx	@dptr,a
                                   1414 ;	assignBit
      000399 C2 B4            [12] 1415 	clr	_P3_4
                                   1416 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1417 ;	assignBit
      00039B D2 B5            [12] 1418 	setb	_P3_5
                                   1419 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1420 ;	assignBit
      00039D D2 B4            [12] 1421 	setb	_P3_4
      00039F 85*02 82         [24] 1422 	mov	dpl,_lcd_address
      0003A2 85*03 83         [24] 1423 	mov	dph,(_lcd_address + 1)
      0003A5 E5*19            [12] 1424 	mov	a,(_drawPixel_PARM_3 + 1)
      0003A7 F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	assignBit
      0003A8 C2 B4            [12] 1427 	clr	_P3_4
                                   1428 ;	assignBit
      0003AA D2 B4            [12] 1429 	setb	_P3_4
      0003AC 85*02 82         [24] 1430 	mov	dpl,_lcd_address
      0003AF 85*03 83         [24] 1431 	mov	dph,(_lcd_address + 1)
      0003B2 E5*18            [12] 1432 	mov	a,_drawPixel_PARM_3
      0003B4 F0               [24] 1433 	movx	@dptr,a
                                   1434 ;	assignBit
      0003B5 C2 B4            [12] 1435 	clr	_P3_4
                                   1436 ;	ecen4330_lcd_v3.c:254: }
      0003B7 22               [24] 1437 	ret
                                   1438 ;------------------------------------------------------------
                                   1439 ;Allocation info for local variables in function 'drawCircle'
                                   1440 ;------------------------------------------------------------
                                   1441 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1442 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1443 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1444 ;x0                        Allocated with name '_drawCircle_x0_65536_105'
                                   1445 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1446 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1447 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1448 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1449 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1450 ;f                         Allocated with name '_drawCircle_f_65536_106'
                                   1451 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_106'
                                   1452 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_106'
                                   1453 ;x                         Allocated with name '_drawCircle_x_65536_106'
                                   1454 ;y                         Allocated with name '_drawCircle_y_65536_106'
                                   1455 ;------------------------------------------------------------
                                   1456 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1457 ;	-----------------------------------------
                                   1458 ;	 function drawCircle
                                   1459 ;	-----------------------------------------
      0003B8                       1460 _drawCircle:
      0003B8 85 82*20         [24] 1461 	mov	_drawCircle_x0_65536_105,dpl
      0003BB 85 83*21         [24] 1462 	mov	(_drawCircle_x0_65536_105 + 1),dph
                                   1463 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003BE 74 01            [12] 1464 	mov	a,#0x01
      0003C0 C3               [12] 1465 	clr	c
      0003C1 95*1C            [12] 1466 	subb	a,_drawCircle_PARM_3
      0003C3 FC               [12] 1467 	mov	r4,a
      0003C4 E4               [12] 1468 	clr	a
      0003C5 95*1D            [12] 1469 	subb	a,(_drawCircle_PARM_3 + 1)
      0003C7 FD               [12] 1470 	mov	r5,a
      0003C8 90r00r04         [24] 1471 	mov	dptr,#_drawCircle_f_65536_106
      0003CB EC               [12] 1472 	mov	a,r4
      0003CC F0               [24] 1473 	movx	@dptr,a
      0003CD ED               [12] 1474 	mov	a,r5
      0003CE A3               [24] 1475 	inc	dptr
      0003CF F0               [24] 1476 	movx	@dptr,a
                                   1477 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003D0 85*1C*00         [24] 1478 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003D3 85*1D*01         [24] 1479 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003D6 90 FF FE         [24] 1480 	mov	dptr,#0xfffe
      0003D9 12r00r00         [24] 1481 	lcall	__mulint
      0003DC AC 82            [24] 1482 	mov	r4,dpl
      0003DE AD 83            [24] 1483 	mov	r5,dph
                                   1484 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      0003E0 AA*1C            [24] 1485 	mov	r2,_drawCircle_PARM_3
      0003E2 AB*1D            [24] 1486 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1487 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      0003E4 E5*1C            [12] 1488 	mov	a,_drawCircle_PARM_3
      0003E6 25*1A            [12] 1489 	add	a,_drawCircle_PARM_2
      0003E8 F5*16            [12] 1490 	mov	_drawPixel_PARM_2,a
      0003EA E5*1D            [12] 1491 	mov	a,(_drawCircle_PARM_3 + 1)
      0003EC 35*1B            [12] 1492 	addc	a,(_drawCircle_PARM_2 + 1)
      0003EE F5*17            [12] 1493 	mov	(_drawPixel_PARM_2 + 1),a
      0003F0 85*1E*18         [24] 1494 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F3 85*1F*19         [24] 1495 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F6 85*20 82         [24] 1496 	mov	dpl,_drawCircle_x0_65536_105
      0003F9 85*21 83         [24] 1497 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      0003FC C0 05            [24] 1498 	push	ar5
      0003FE C0 04            [24] 1499 	push	ar4
      000400 C0 03            [24] 1500 	push	ar3
      000402 C0 02            [24] 1501 	push	ar2
      000404 12r03r61         [24] 1502 	lcall	_drawPixel
                                   1503 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      000407 E5*1A            [12] 1504 	mov	a,_drawCircle_PARM_2
      000409 C3               [12] 1505 	clr	c
      00040A 95*1C            [12] 1506 	subb	a,_drawCircle_PARM_3
      00040C F5*16            [12] 1507 	mov	_drawPixel_PARM_2,a
      00040E E5*1B            [12] 1508 	mov	a,(_drawCircle_PARM_2 + 1)
      000410 95*1D            [12] 1509 	subb	a,(_drawCircle_PARM_3 + 1)
      000412 F5*17            [12] 1510 	mov	(_drawPixel_PARM_2 + 1),a
      000414 85*1E*18         [24] 1511 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000417 85*1F*19         [24] 1512 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041A 85*20 82         [24] 1513 	mov	dpl,_drawCircle_x0_65536_105
      00041D 85*21 83         [24] 1514 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      000420 12r03r61         [24] 1515 	lcall	_drawPixel
                                   1516 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000423 E5*1C            [12] 1517 	mov	a,_drawCircle_PARM_3
      000425 25*20            [12] 1518 	add	a,_drawCircle_x0_65536_105
      000427 F5 82            [12] 1519 	mov	dpl,a
      000429 E5*1D            [12] 1520 	mov	a,(_drawCircle_PARM_3 + 1)
      00042B 35*21            [12] 1521 	addc	a,(_drawCircle_x0_65536_105 + 1)
      00042D F5 83            [12] 1522 	mov	dph,a
      00042F 85*1A*16         [24] 1523 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000432 85*1B*17         [24] 1524 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000435 85*1E*18         [24] 1525 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000438 85*1F*19         [24] 1526 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043B 12r03r61         [24] 1527 	lcall	_drawPixel
                                   1528 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      00043E E5*20            [12] 1529 	mov	a,_drawCircle_x0_65536_105
      000440 C3               [12] 1530 	clr	c
      000441 95*1C            [12] 1531 	subb	a,_drawCircle_PARM_3
      000443 F5 82            [12] 1532 	mov	dpl,a
      000445 E5*21            [12] 1533 	mov	a,(_drawCircle_x0_65536_105 + 1)
      000447 95*1D            [12] 1534 	subb	a,(_drawCircle_PARM_3 + 1)
      000449 F5 83            [12] 1535 	mov	dph,a
      00044B 85*1A*16         [24] 1536 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00044E 85*1B*17         [24] 1537 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000451 85*1E*18         [24] 1538 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000454 85*1F*19         [24] 1539 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000457 12r03r61         [24] 1540 	lcall	_drawPixel
      00045A D0 02            [24] 1541 	pop	ar2
      00045C D0 03            [24] 1542 	pop	ar3
      00045E D0 04            [24] 1543 	pop	ar4
      000460 D0 05            [24] 1544 	pop	ar5
                                   1545 ;	ecen4330_lcd_v3.c:276: while (x<y) {
      000462 78 00            [12] 1546 	mov	r0,#0x00
      000464 79 00            [12] 1547 	mov	r1,#0x00
      000466 75*22 01         [24] 1548 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1549 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000469 89*23            [24] 1550 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      00046B                       1551 00103$:
      00046B C3               [12] 1552 	clr	c
      00046C E8               [12] 1553 	mov	a,r0
      00046D 9A               [12] 1554 	subb	a,r2
      00046E E9               [12] 1555 	mov	a,r1
      00046F 64 80            [12] 1556 	xrl	a,#0x80
      000471 8B F0            [24] 1557 	mov	b,r3
      000473 63 F0 80         [24] 1558 	xrl	b,#0x80
      000476 95 F0            [12] 1559 	subb	a,b
      000478 40 01            [24] 1560 	jc	00121$
      00047A 22               [24] 1561 	ret
      00047B                       1562 00121$:
                                   1563 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      00047B 90r00r04         [24] 1564 	mov	dptr,#_drawCircle_f_65536_106
      00047E E0               [24] 1565 	movx	a,@dptr
      00047F F5*24            [12] 1566 	mov	_drawCircle_sloc1_1_0,a
      000481 A3               [24] 1567 	inc	dptr
      000482 E0               [24] 1568 	movx	a,@dptr
      000483 F5*25            [12] 1569 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000485 20 E7 18         [24] 1570 	jb	acc.7,00102$
                                   1571 ;	ecen4330_lcd_v3.c:278: y--;
      000488 1A               [12] 1572 	dec	r2
      000489 BA FF 01         [24] 1573 	cjne	r2,#0xff,00123$
      00048C 1B               [12] 1574 	dec	r3
      00048D                       1575 00123$:
                                   1576 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      00048D 74 02            [12] 1577 	mov	a,#0x02
      00048F 2C               [12] 1578 	add	a,r4
      000490 FC               [12] 1579 	mov	r4,a
      000491 E4               [12] 1580 	clr	a
      000492 3D               [12] 1581 	addc	a,r5
      000493 FD               [12] 1582 	mov	r5,a
                                   1583 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      000494 90r00r04         [24] 1584 	mov	dptr,#_drawCircle_f_65536_106
      000497 EC               [12] 1585 	mov	a,r4
      000498 25*24            [12] 1586 	add	a,_drawCircle_sloc1_1_0
      00049A F0               [24] 1587 	movx	@dptr,a
      00049B ED               [12] 1588 	mov	a,r5
      00049C 35*25            [12] 1589 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00049E A3               [24] 1590 	inc	dptr
      00049F F0               [24] 1591 	movx	@dptr,a
      0004A0                       1592 00102$:
                                   1593 ;	ecen4330_lcd_v3.c:282: x++;
      0004A0 C0 04            [24] 1594 	push	ar4
      0004A2 C0 05            [24] 1595 	push	ar5
      0004A4 08               [12] 1596 	inc	r0
      0004A5 B8 00 01         [24] 1597 	cjne	r0,#0x00,00124$
      0004A8 09               [12] 1598 	inc	r1
      0004A9                       1599 00124$:
                                   1600 ;	ecen4330_lcd_v3.c:283: ddF_x += 2;
      0004A9 74 02            [12] 1601 	mov	a,#0x02
      0004AB 25*22            [12] 1602 	add	a,_drawCircle_sloc0_1_0
      0004AD F5*22            [12] 1603 	mov	_drawCircle_sloc0_1_0,a
      0004AF E4               [12] 1604 	clr	a
      0004B0 35*23            [12] 1605 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004B2 F5*23            [12] 1606 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1607 ;	ecen4330_lcd_v3.c:284: f += ddF_x;
      0004B4 90r00r04         [24] 1608 	mov	dptr,#_drawCircle_f_65536_106
      0004B7 E0               [24] 1609 	movx	a,@dptr
      0004B8 FE               [12] 1610 	mov	r6,a
      0004B9 A3               [24] 1611 	inc	dptr
      0004BA E0               [24] 1612 	movx	a,@dptr
      0004BB FF               [12] 1613 	mov	r7,a
      0004BC 90r00r04         [24] 1614 	mov	dptr,#_drawCircle_f_65536_106
      0004BF E5*22            [12] 1615 	mov	a,_drawCircle_sloc0_1_0
      0004C1 2E               [12] 1616 	add	a,r6
      0004C2 F0               [24] 1617 	movx	@dptr,a
      0004C3 E5*23            [12] 1618 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004C5 3F               [12] 1619 	addc	a,r7
      0004C6 A3               [24] 1620 	inc	dptr
      0004C7 F0               [24] 1621 	movx	@dptr,a
                                   1622 ;	ecen4330_lcd_v3.c:286: drawPixel(x0 + x, y0 + y, color);
      0004C8 AE*20            [24] 1623 	mov	r6,_drawCircle_x0_65536_105
      0004CA AF*21            [24] 1624 	mov	r7,(_drawCircle_x0_65536_105 + 1)
      0004CC E8               [12] 1625 	mov	a,r0
      0004CD 2E               [12] 1626 	add	a,r6
      0004CE FC               [12] 1627 	mov	r4,a
      0004CF E9               [12] 1628 	mov	a,r1
      0004D0 3F               [12] 1629 	addc	a,r7
      0004D1 FD               [12] 1630 	mov	r5,a
      0004D2 8C*24            [24] 1631 	mov	_drawCircle_sloc1_1_0,r4
      0004D4 8D*25            [24] 1632 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004D6 85*1A*26         [24] 1633 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004D9 85*1B*27         [24] 1634 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      0004DC EA               [12] 1635 	mov	a,r2
      0004DD 25*26            [12] 1636 	add	a,_drawCircle_sloc2_1_0
      0004DF FC               [12] 1637 	mov	r4,a
      0004E0 EB               [12] 1638 	mov	a,r3
      0004E1 35*27            [12] 1639 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004E3 FD               [12] 1640 	mov	r5,a
      0004E4 8C*28            [24] 1641 	mov	_drawCircle_sloc3_1_0,r4
      0004E6 8D*29            [24] 1642 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004E8 85*28*16         [24] 1643 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004EB 85*29*17         [24] 1644 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EE 85*1E*18         [24] 1645 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004F1 85*1F*19         [24] 1646 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F4 85*24 82         [24] 1647 	mov	dpl,_drawCircle_sloc1_1_0
      0004F7 85*25 83         [24] 1648 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004FA C0 07            [24] 1649 	push	ar7
      0004FC C0 06            [24] 1650 	push	ar6
      0004FE C0 05            [24] 1651 	push	ar5
      000500 C0 04            [24] 1652 	push	ar4
      000502 C0 03            [24] 1653 	push	ar3
      000504 C0 02            [24] 1654 	push	ar2
      000506 C0 01            [24] 1655 	push	ar1
      000508 C0 00            [24] 1656 	push	ar0
      00050A 12r03r61         [24] 1657 	lcall	_drawPixel
      00050D D0 00            [24] 1658 	pop	ar0
      00050F D0 01            [24] 1659 	pop	ar1
      000511 D0 02            [24] 1660 	pop	ar2
      000513 D0 03            [24] 1661 	pop	ar3
      000515 D0 04            [24] 1662 	pop	ar4
      000517 D0 05            [24] 1663 	pop	ar5
      000519 D0 06            [24] 1664 	pop	ar6
      00051B D0 07            [24] 1665 	pop	ar7
                                   1666 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 - x, y0 + y, color);
      00051D EE               [12] 1667 	mov	a,r6
      00051E C3               [12] 1668 	clr	c
      00051F 98               [12] 1669 	subb	a,r0
      000520 FC               [12] 1670 	mov	r4,a
      000521 EF               [12] 1671 	mov	a,r7
      000522 99               [12] 1672 	subb	a,r1
      000523 FD               [12] 1673 	mov	r5,a
      000524 8C*2A            [24] 1674 	mov	_drawCircle_sloc4_1_0,r4
      000526 8D*2B            [24] 1675 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000528 85*28*16         [24] 1676 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      00052B 85*29*17         [24] 1677 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      00052E 85*1E*18         [24] 1678 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000531 85*1F*19         [24] 1679 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000534 85*2A 82         [24] 1680 	mov	dpl,_drawCircle_sloc4_1_0
      000537 85*2B 83         [24] 1681 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00053A C0 07            [24] 1682 	push	ar7
      00053C C0 06            [24] 1683 	push	ar6
      00053E C0 05            [24] 1684 	push	ar5
      000540 C0 04            [24] 1685 	push	ar4
      000542 C0 03            [24] 1686 	push	ar3
      000544 C0 02            [24] 1687 	push	ar2
      000546 C0 01            [24] 1688 	push	ar1
      000548 C0 00            [24] 1689 	push	ar0
      00054A 12r03r61         [24] 1690 	lcall	_drawPixel
      00054D D0 00            [24] 1691 	pop	ar0
      00054F D0 01            [24] 1692 	pop	ar1
      000551 D0 02            [24] 1693 	pop	ar2
      000553 D0 03            [24] 1694 	pop	ar3
      000555 D0 04            [24] 1695 	pop	ar4
      000557 D0 05            [24] 1696 	pop	ar5
                                   1697 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 + x, y0 - y, color);
      000559 E5*26            [12] 1698 	mov	a,_drawCircle_sloc2_1_0
      00055B C3               [12] 1699 	clr	c
      00055C 9A               [12] 1700 	subb	a,r2
      00055D FC               [12] 1701 	mov	r4,a
      00055E E5*27            [12] 1702 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000560 9B               [12] 1703 	subb	a,r3
      000561 FD               [12] 1704 	mov	r5,a
      000562 8C*16            [24] 1705 	mov	_drawPixel_PARM_2,r4
      000564 8D*17            [24] 1706 	mov	(_drawPixel_PARM_2 + 1),r5
      000566 85*1E*18         [24] 1707 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000569 85*1F*19         [24] 1708 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00056C 85*24 82         [24] 1709 	mov	dpl,_drawCircle_sloc1_1_0
      00056F 85*25 83         [24] 1710 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000572 C0 05            [24] 1711 	push	ar5
      000574 C0 04            [24] 1712 	push	ar4
      000576 C0 03            [24] 1713 	push	ar3
      000578 C0 02            [24] 1714 	push	ar2
      00057A C0 01            [24] 1715 	push	ar1
      00057C C0 00            [24] 1716 	push	ar0
      00057E 12r03r61         [24] 1717 	lcall	_drawPixel
      000581 D0 00            [24] 1718 	pop	ar0
      000583 D0 01            [24] 1719 	pop	ar1
      000585 D0 02            [24] 1720 	pop	ar2
      000587 D0 03            [24] 1721 	pop	ar3
      000589 D0 04            [24] 1722 	pop	ar4
      00058B D0 05            [24] 1723 	pop	ar5
                                   1724 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 - x, y0 - y, color);
      00058D 8C*16            [24] 1725 	mov	_drawPixel_PARM_2,r4
      00058F 8D*17            [24] 1726 	mov	(_drawPixel_PARM_2 + 1),r5
      000591 85*1E*18         [24] 1727 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000594 85*1F*19         [24] 1728 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000597 85*2A 82         [24] 1729 	mov	dpl,_drawCircle_sloc4_1_0
      00059A 85*2B 83         [24] 1730 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059D C0 05            [24] 1731 	push	ar5
      00059F C0 04            [24] 1732 	push	ar4
      0005A1 C0 03            [24] 1733 	push	ar3
      0005A3 C0 02            [24] 1734 	push	ar2
      0005A5 C0 01            [24] 1735 	push	ar1
      0005A7 C0 00            [24] 1736 	push	ar0
      0005A9 12r03r61         [24] 1737 	lcall	_drawPixel
      0005AC D0 00            [24] 1738 	pop	ar0
      0005AE D0 01            [24] 1739 	pop	ar1
      0005B0 D0 02            [24] 1740 	pop	ar2
      0005B2 D0 03            [24] 1741 	pop	ar3
      0005B4 D0 04            [24] 1742 	pop	ar4
      0005B6 D0 05            [24] 1743 	pop	ar5
      0005B8 D0 06            [24] 1744 	pop	ar6
      0005BA D0 07            [24] 1745 	pop	ar7
                                   1746 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 + y, y0 + x, color);
      0005BC EA               [12] 1747 	mov	a,r2
      0005BD 2E               [12] 1748 	add	a,r6
      0005BE FC               [12] 1749 	mov	r4,a
      0005BF EB               [12] 1750 	mov	a,r3
      0005C0 3F               [12] 1751 	addc	a,r7
      0005C1 FD               [12] 1752 	mov	r5,a
      0005C2 8C*2A            [24] 1753 	mov	_drawCircle_sloc4_1_0,r4
      0005C4 8D*2B            [24] 1754 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005C6 E8               [12] 1755 	mov	a,r0
      0005C7 25*26            [12] 1756 	add	a,_drawCircle_sloc2_1_0
      0005C9 FC               [12] 1757 	mov	r4,a
      0005CA E9               [12] 1758 	mov	a,r1
      0005CB 35*27            [12] 1759 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005CD FD               [12] 1760 	mov	r5,a
      0005CE 8C*16            [24] 1761 	mov	_drawPixel_PARM_2,r4
      0005D0 8D*17            [24] 1762 	mov	(_drawPixel_PARM_2 + 1),r5
      0005D2 85*1E*18         [24] 1763 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005D5 85*1F*19         [24] 1764 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005D8 85*2A 82         [24] 1765 	mov	dpl,_drawCircle_sloc4_1_0
      0005DB 85*2B 83         [24] 1766 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005DE C0 07            [24] 1767 	push	ar7
      0005E0 C0 06            [24] 1768 	push	ar6
      0005E2 C0 05            [24] 1769 	push	ar5
      0005E4 C0 04            [24] 1770 	push	ar4
      0005E6 C0 03            [24] 1771 	push	ar3
      0005E8 C0 02            [24] 1772 	push	ar2
      0005EA C0 01            [24] 1773 	push	ar1
      0005EC C0 00            [24] 1774 	push	ar0
      0005EE 12r03r61         [24] 1775 	lcall	_drawPixel
      0005F1 D0 00            [24] 1776 	pop	ar0
      0005F3 D0 01            [24] 1777 	pop	ar1
      0005F5 D0 02            [24] 1778 	pop	ar2
      0005F7 D0 03            [24] 1779 	pop	ar3
      0005F9 D0 04            [24] 1780 	pop	ar4
      0005FB D0 05            [24] 1781 	pop	ar5
      0005FD D0 06            [24] 1782 	pop	ar6
      0005FF D0 07            [24] 1783 	pop	ar7
                                   1784 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 - y, y0 + x, color);
      000601 EE               [12] 1785 	mov	a,r6
      000602 C3               [12] 1786 	clr	c
      000603 9A               [12] 1787 	subb	a,r2
      000604 FE               [12] 1788 	mov	r6,a
      000605 EF               [12] 1789 	mov	a,r7
      000606 9B               [12] 1790 	subb	a,r3
      000607 FF               [12] 1791 	mov	r7,a
      000608 8C*16            [24] 1792 	mov	_drawPixel_PARM_2,r4
      00060A 8D*17            [24] 1793 	mov	(_drawPixel_PARM_2 + 1),r5
      00060C 85*1E*18         [24] 1794 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00060F 85*1F*19         [24] 1795 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000612 8E 82            [24] 1796 	mov	dpl,r6
      000614 8F 83            [24] 1797 	mov	dph,r7
      000616 C0 07            [24] 1798 	push	ar7
      000618 C0 06            [24] 1799 	push	ar6
      00061A C0 05            [24] 1800 	push	ar5
      00061C C0 04            [24] 1801 	push	ar4
      00061E C0 03            [24] 1802 	push	ar3
      000620 C0 02            [24] 1803 	push	ar2
      000622 C0 01            [24] 1804 	push	ar1
      000624 C0 00            [24] 1805 	push	ar0
      000626 12r03r61         [24] 1806 	lcall	_drawPixel
      000629 D0 00            [24] 1807 	pop	ar0
      00062B D0 01            [24] 1808 	pop	ar1
      00062D D0 02            [24] 1809 	pop	ar2
      00062F D0 03            [24] 1810 	pop	ar3
      000631 D0 04            [24] 1811 	pop	ar4
      000633 D0 05            [24] 1812 	pop	ar5
                                   1813 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 + y, y0 - x, color);
      000635 E5*26            [12] 1814 	mov	a,_drawCircle_sloc2_1_0
      000637 C3               [12] 1815 	clr	c
      000638 98               [12] 1816 	subb	a,r0
      000639 FC               [12] 1817 	mov	r4,a
      00063A E5*27            [12] 1818 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00063C 99               [12] 1819 	subb	a,r1
      00063D FD               [12] 1820 	mov	r5,a
      00063E 8C*16            [24] 1821 	mov	_drawPixel_PARM_2,r4
      000640 8D*17            [24] 1822 	mov	(_drawPixel_PARM_2 + 1),r5
      000642 85*1E*18         [24] 1823 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000645 85*1F*19         [24] 1824 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000648 85*2A 82         [24] 1825 	mov	dpl,_drawCircle_sloc4_1_0
      00064B 85*2B 83         [24] 1826 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00064E C0 05            [24] 1827 	push	ar5
      000650 C0 04            [24] 1828 	push	ar4
      000652 C0 03            [24] 1829 	push	ar3
      000654 C0 02            [24] 1830 	push	ar2
      000656 C0 01            [24] 1831 	push	ar1
      000658 C0 00            [24] 1832 	push	ar0
      00065A 12r03r61         [24] 1833 	lcall	_drawPixel
      00065D D0 00            [24] 1834 	pop	ar0
      00065F D0 01            [24] 1835 	pop	ar1
      000661 D0 02            [24] 1836 	pop	ar2
      000663 D0 03            [24] 1837 	pop	ar3
      000665 D0 04            [24] 1838 	pop	ar4
      000667 D0 05            [24] 1839 	pop	ar5
      000669 D0 06            [24] 1840 	pop	ar6
      00066B D0 07            [24] 1841 	pop	ar7
                                   1842 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 - y, y0 - x, color);
      00066D 8C*16            [24] 1843 	mov	_drawPixel_PARM_2,r4
      00066F 8D*17            [24] 1844 	mov	(_drawPixel_PARM_2 + 1),r5
      000671 85*1E*18         [24] 1845 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000674 85*1F*19         [24] 1846 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000677 8E 82            [24] 1847 	mov	dpl,r6
      000679 8F 83            [24] 1848 	mov	dph,r7
      00067B C0 05            [24] 1849 	push	ar5
      00067D C0 04            [24] 1850 	push	ar4
      00067F C0 03            [24] 1851 	push	ar3
      000681 C0 02            [24] 1852 	push	ar2
      000683 C0 01            [24] 1853 	push	ar1
      000685 C0 00            [24] 1854 	push	ar0
      000687 12r03r61         [24] 1855 	lcall	_drawPixel
      00068A D0 00            [24] 1856 	pop	ar0
      00068C D0 01            [24] 1857 	pop	ar1
      00068E D0 02            [24] 1858 	pop	ar2
      000690 D0 03            [24] 1859 	pop	ar3
      000692 D0 04            [24] 1860 	pop	ar4
      000694 D0 05            [24] 1861 	pop	ar5
      000696 D0 05            [24] 1862 	pop	ar5
      000698 D0 04            [24] 1863 	pop	ar4
                                   1864 ;	ecen4330_lcd_v3.c:295: }
      00069A 02r04r6B         [24] 1865 	ljmp	00103$
                                   1866 ;------------------------------------------------------------
                                   1867 ;Allocation info for local variables in function 'testCircles'
                                   1868 ;------------------------------------------------------------
                                   1869 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1870 ;radius                    Allocated with name '_testCircles_radius_65536_109'
                                   1871 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1872 ;x                         Allocated with name '_testCircles_x_65536_110'
                                   1873 ;y                         Allocated with name '_testCircles_y_65536_110'
                                   1874 ;r2                        Allocated with name '_testCircles_r2_65536_110'
                                   1875 ;w                         Allocated with name '_testCircles_w_65536_110'
                                   1876 ;h                         Allocated with name '_testCircles_h_65536_110'
                                   1877 ;------------------------------------------------------------
                                   1878 ;	ecen4330_lcd_v3.c:303: void testCircles (uint8_t radius, uint16_t color) {
                                   1879 ;	-----------------------------------------
                                   1880 ;	 function testCircles
                                   1881 ;	-----------------------------------------
      00069D                       1882 _testCircles:
      00069D 85 82*2E         [24] 1883 	mov	_testCircles_radius_65536_109,dpl
                                   1884 ;	ecen4330_lcd_v3.c:304: __xdata int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006A0 AD*2E            [24] 1885 	mov	r5,_testCircles_radius_65536_109
      0006A2 7E 00            [12] 1886 	mov	r6,#0x00
      0006A4 ED               [12] 1887 	mov	a,r5
      0006A5 2D               [12] 1888 	add	a,r5
      0006A6 FB               [12] 1889 	mov	r3,a
      0006A7 EE               [12] 1890 	mov	a,r6
      0006A8 33               [12] 1891 	rlc	a
      0006A9 FC               [12] 1892 	mov	r4,a
      0006AA 90r00r00         [24] 1893 	mov	dptr,#__width
      0006AD E0               [24] 1894 	movx	a,@dptr
      0006AE F9               [12] 1895 	mov	r1,a
      0006AF A3               [24] 1896 	inc	dptr
      0006B0 E0               [24] 1897 	movx	a,@dptr
      0006B1 FA               [12] 1898 	mov	r2,a
      0006B2 ED               [12] 1899 	mov	a,r5
      0006B3 29               [12] 1900 	add	a,r1
      0006B4 F9               [12] 1901 	mov	r1,a
      0006B5 EE               [12] 1902 	mov	a,r6
      0006B6 3A               [12] 1903 	addc	a,r2
      0006B7 FA               [12] 1904 	mov	r2,a
      0006B8 90r00r02         [24] 1905 	mov	dptr,#__height
      0006BB E0               [24] 1906 	movx	a,@dptr
      0006BC FF               [12] 1907 	mov	r7,a
      0006BD A3               [24] 1908 	inc	dptr
      0006BE E0               [24] 1909 	movx	a,@dptr
      0006BF F8               [12] 1910 	mov	r0,a
      0006C0 ED               [12] 1911 	mov	a,r5
      0006C1 2F               [12] 1912 	add	a,r7
      0006C2 FF               [12] 1913 	mov	r7,a
      0006C3 EE               [12] 1914 	mov	a,r6
      0006C4 38               [12] 1915 	addc	a,r0
      0006C5 FE               [12] 1916 	mov	r6,a
                                   1917 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      0006C6 90r00r06         [24] 1918 	mov	dptr,#_testCircles_x_65536_110
      0006C9 E4               [12] 1919 	clr	a
      0006CA F0               [24] 1920 	movx	@dptr,a
      0006CB A3               [24] 1921 	inc	dptr
      0006CC F0               [24] 1922 	movx	@dptr,a
      0006CD                       1923 00107$:
      0006CD 90r00r06         [24] 1924 	mov	dptr,#_testCircles_x_65536_110
      0006D0 E0               [24] 1925 	movx	a,@dptr
      0006D1 F8               [12] 1926 	mov	r0,a
      0006D2 A3               [24] 1927 	inc	dptr
      0006D3 E0               [24] 1928 	movx	a,@dptr
      0006D4 FD               [12] 1929 	mov	r5,a
      0006D5 C3               [12] 1930 	clr	c
      0006D6 E8               [12] 1931 	mov	a,r0
      0006D7 99               [12] 1932 	subb	a,r1
      0006D8 ED               [12] 1933 	mov	a,r5
      0006D9 64 80            [12] 1934 	xrl	a,#0x80
      0006DB 8A F0            [24] 1935 	mov	b,r2
      0006DD 63 F0 80         [24] 1936 	xrl	b,#0x80
      0006E0 95 F0            [12] 1937 	subb	a,b
      0006E2 40 01            [24] 1938 	jc	00127$
      0006E4 22               [24] 1939 	ret
      0006E5                       1940 00127$:
                                   1941 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      0006E5 90r00r08         [24] 1942 	mov	dptr,#_testCircles_y_65536_110
      0006E8 E4               [12] 1943 	clr	a
      0006E9 F0               [24] 1944 	movx	@dptr,a
      0006EA A3               [24] 1945 	inc	dptr
      0006EB F0               [24] 1946 	movx	@dptr,a
      0006EC                       1947 00104$:
      0006EC 90r00r08         [24] 1948 	mov	dptr,#_testCircles_y_65536_110
      0006EF E0               [24] 1949 	movx	a,@dptr
      0006F0 F5*2F            [12] 1950 	mov	_testCircles_sloc0_1_0,a
      0006F2 A3               [24] 1951 	inc	dptr
      0006F3 E0               [24] 1952 	movx	a,@dptr
      0006F4 F5*30            [12] 1953 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006F6 C3               [12] 1954 	clr	c
      0006F7 E5*2F            [12] 1955 	mov	a,_testCircles_sloc0_1_0
      0006F9 9F               [12] 1956 	subb	a,r7
      0006FA E5*30            [12] 1957 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006FC 64 80            [12] 1958 	xrl	a,#0x80
      0006FE 8E F0            [24] 1959 	mov	b,r6
      000700 63 F0 80         [24] 1960 	xrl	b,#0x80
      000703 95 F0            [12] 1961 	subb	a,b
      000705 50 47            [24] 1962 	jnc	00108$
                                   1963 ;	ecen4330_lcd_v3.c:308: drawCircle(x, y, radius, color);
      000707 88 82            [24] 1964 	mov	dpl,r0
      000709 8D 83            [24] 1965 	mov	dph,r5
      00070B 85*2F*1A         [24] 1966 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      00070E 85*30*1B         [24] 1967 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000711 85*2E*1C         [24] 1968 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_109
      000714 75*1D 00         [24] 1969 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000717 85*2C*1E         [24] 1970 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00071A 85*2D*1F         [24] 1971 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      00071D C0 07            [24] 1972 	push	ar7
      00071F C0 06            [24] 1973 	push	ar6
      000721 C0 05            [24] 1974 	push	ar5
      000723 C0 04            [24] 1975 	push	ar4
      000725 C0 03            [24] 1976 	push	ar3
      000727 C0 02            [24] 1977 	push	ar2
      000729 C0 01            [24] 1978 	push	ar1
      00072B C0 00            [24] 1979 	push	ar0
      00072D 12r03rB8         [24] 1980 	lcall	_drawCircle
      000730 D0 00            [24] 1981 	pop	ar0
      000732 D0 01            [24] 1982 	pop	ar1
      000734 D0 02            [24] 1983 	pop	ar2
      000736 D0 03            [24] 1984 	pop	ar3
      000738 D0 04            [24] 1985 	pop	ar4
      00073A D0 05            [24] 1986 	pop	ar5
      00073C D0 06            [24] 1987 	pop	ar6
      00073E D0 07            [24] 1988 	pop	ar7
                                   1989 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      000740 90r00r08         [24] 1990 	mov	dptr,#_testCircles_y_65536_110
      000743 EB               [12] 1991 	mov	a,r3
      000744 25*2F            [12] 1992 	add	a,_testCircles_sloc0_1_0
      000746 F0               [24] 1993 	movx	@dptr,a
      000747 EC               [12] 1994 	mov	a,r4
      000748 35*30            [12] 1995 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00074A A3               [24] 1996 	inc	dptr
      00074B F0               [24] 1997 	movx	@dptr,a
      00074C 80 9E            [24] 1998 	sjmp	00104$
      00074E                       1999 00108$:
                                   2000 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      00074E 90r00r06         [24] 2001 	mov	dptr,#_testCircles_x_65536_110
      000751 E0               [24] 2002 	movx	a,@dptr
      000752 F8               [12] 2003 	mov	r0,a
      000753 A3               [24] 2004 	inc	dptr
      000754 E0               [24] 2005 	movx	a,@dptr
      000755 FD               [12] 2006 	mov	r5,a
      000756 90r00r06         [24] 2007 	mov	dptr,#_testCircles_x_65536_110
      000759 EB               [12] 2008 	mov	a,r3
      00075A 28               [12] 2009 	add	a,r0
      00075B F0               [24] 2010 	movx	@dptr,a
      00075C EC               [12] 2011 	mov	a,r4
      00075D 3D               [12] 2012 	addc	a,r5
      00075E A3               [24] 2013 	inc	dptr
      00075F F0               [24] 2014 	movx	@dptr,a
                                   2015 ;	ecen4330_lcd_v3.c:311: }
      000760 02r06rCD         [24] 2016 	ljmp	00107$
                                   2017 ;------------------------------------------------------------
                                   2018 ;Allocation info for local variables in function 'fillRect'
                                   2019 ;------------------------------------------------------------
                                   2020 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2021 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2022 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2023 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2024 ;x                         Allocated to registers 
                                   2025 ;------------------------------------------------------------
                                   2026 ;	ecen4330_lcd_v3.c:313: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2027 ;	-----------------------------------------
                                   2028 ;	 function fillRect
                                   2029 ;	-----------------------------------------
      000763                       2030 _fillRect:
      000763 AE 82            [24] 2031 	mov	r6,dpl
      000765 AF 83            [24] 2032 	mov	r7,dph
                                   2033 ;	ecen4330_lcd_v3.c:314: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000767 8E 04            [24] 2034 	mov	ar4,r6
      000769 8F 05            [24] 2035 	mov	ar5,r7
      00076B C3               [12] 2036 	clr	c
      00076C EC               [12] 2037 	mov	a,r4
      00076D 94 F0            [12] 2038 	subb	a,#0xf0
      00076F ED               [12] 2039 	mov	a,r5
      000770 94 00            [12] 2040 	subb	a,#0x00
      000772 50 0D            [24] 2041 	jnc	00101$
      000774 AC*31            [24] 2042 	mov	r4,_fillRect_PARM_2
      000776 AD*32            [24] 2043 	mov	r5,(_fillRect_PARM_2 + 1)
      000778 C3               [12] 2044 	clr	c
      000779 EC               [12] 2045 	mov	a,r4
      00077A 94 40            [12] 2046 	subb	a,#0x40
      00077C ED               [12] 2047 	mov	a,r5
      00077D 94 01            [12] 2048 	subb	a,#0x01
      00077F 40 01            [24] 2049 	jc	00102$
      000781                       2050 00101$:
                                   2051 ;	ecen4330_lcd_v3.c:316: return;
      000781 22               [24] 2052 	ret
      000782                       2053 00102$:
                                   2054 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH)
      000782 E5*33            [12] 2055 	mov	a,_fillRect_PARM_3
      000784 2E               [12] 2056 	add	a,r6
      000785 FC               [12] 2057 	mov	r4,a
      000786 E5*34            [12] 2058 	mov	a,(_fillRect_PARM_3 + 1)
      000788 3F               [12] 2059 	addc	a,r7
      000789 FD               [12] 2060 	mov	r5,a
      00078A 1C               [12] 2061 	dec	r4
      00078B BC FF 01         [24] 2062 	cjne	r4,#0xff,00161$
      00078E 1D               [12] 2063 	dec	r5
      00078F                       2064 00161$:
      00078F C3               [12] 2065 	clr	c
      000790 EC               [12] 2066 	mov	a,r4
      000791 94 F0            [12] 2067 	subb	a,#0xf0
      000793 ED               [12] 2068 	mov	a,r5
      000794 94 00            [12] 2069 	subb	a,#0x00
      000796 40 0A            [24] 2070 	jc	00105$
                                   2071 ;	ecen4330_lcd_v3.c:321: w = TFTWIDTH-x;
      000798 74 F0            [12] 2072 	mov	a,#0xf0
      00079A C3               [12] 2073 	clr	c
      00079B 9E               [12] 2074 	subb	a,r6
      00079C F5*33            [12] 2075 	mov	_fillRect_PARM_3,a
      00079E E4               [12] 2076 	clr	a
      00079F 9F               [12] 2077 	subb	a,r7
      0007A0 F5*34            [12] 2078 	mov	(_fillRect_PARM_3 + 1),a
      0007A2                       2079 00105$:
                                   2080 ;	ecen4330_lcd_v3.c:324: if ((y+h-1) >= TFTHEIGHT)
      0007A2 E5*35            [12] 2081 	mov	a,_fillRect_PARM_4
      0007A4 25*31            [12] 2082 	add	a,_fillRect_PARM_2
      0007A6 FC               [12] 2083 	mov	r4,a
      0007A7 E5*36            [12] 2084 	mov	a,(_fillRect_PARM_4 + 1)
      0007A9 35*32            [12] 2085 	addc	a,(_fillRect_PARM_2 + 1)
      0007AB FD               [12] 2086 	mov	r5,a
      0007AC 1C               [12] 2087 	dec	r4
      0007AD BC FF 01         [24] 2088 	cjne	r4,#0xff,00163$
      0007B0 1D               [12] 2089 	dec	r5
      0007B1                       2090 00163$:
      0007B1 C3               [12] 2091 	clr	c
      0007B2 EC               [12] 2092 	mov	a,r4
      0007B3 94 40            [12] 2093 	subb	a,#0x40
      0007B5 ED               [12] 2094 	mov	a,r5
      0007B6 94 01            [12] 2095 	subb	a,#0x01
      0007B8 40 0D            [24] 2096 	jc	00107$
                                   2097 ;	ecen4330_lcd_v3.c:326: h = TFTHEIGHT-y;
      0007BA 74 40            [12] 2098 	mov	a,#0x40
      0007BC C3               [12] 2099 	clr	c
      0007BD 95*31            [12] 2100 	subb	a,_fillRect_PARM_2
      0007BF F5*35            [12] 2101 	mov	_fillRect_PARM_4,a
      0007C1 74 01            [12] 2102 	mov	a,#0x01
      0007C3 95*32            [12] 2103 	subb	a,(_fillRect_PARM_2 + 1)
      0007C5 F5*36            [12] 2104 	mov	(_fillRect_PARM_4 + 1),a
      0007C7                       2105 00107$:
                                   2106 ;	ecen4330_lcd_v3.c:329: setAddress(x, y, x+w-1, y+h-1);
      0007C7 E5*33            [12] 2107 	mov	a,_fillRect_PARM_3
      0007C9 2E               [12] 2108 	add	a,r6
      0007CA FC               [12] 2109 	mov	r4,a
      0007CB E5*34            [12] 2110 	mov	a,(_fillRect_PARM_3 + 1)
      0007CD 3F               [12] 2111 	addc	a,r7
      0007CE FD               [12] 2112 	mov	r5,a
      0007CF 1C               [12] 2113 	dec	r4
      0007D0 BC FF 01         [24] 2114 	cjne	r4,#0xff,00165$
      0007D3 1D               [12] 2115 	dec	r5
      0007D4                       2116 00165$:
      0007D4 8C*02            [24] 2117 	mov	_setAddress_PARM_3,r4
      0007D6 8D*03            [24] 2118 	mov	(_setAddress_PARM_3 + 1),r5
      0007D8 E5*35            [12] 2119 	mov	a,_fillRect_PARM_4
      0007DA 25*31            [12] 2120 	add	a,_fillRect_PARM_2
      0007DC FC               [12] 2121 	mov	r4,a
      0007DD E5*36            [12] 2122 	mov	a,(_fillRect_PARM_4 + 1)
      0007DF 35*32            [12] 2123 	addc	a,(_fillRect_PARM_2 + 1)
      0007E1 FD               [12] 2124 	mov	r5,a
      0007E2 1C               [12] 2125 	dec	r4
      0007E3 BC FF 01         [24] 2126 	cjne	r4,#0xff,00166$
      0007E6 1D               [12] 2127 	dec	r5
      0007E7                       2128 00166$:
      0007E7 8C*04            [24] 2129 	mov	_setAddress_PARM_4,r4
      0007E9 8D*05            [24] 2130 	mov	(_setAddress_PARM_4 + 1),r5
      0007EB 85*31*00         [24] 2131 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007EE 85*32*01         [24] 2132 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007F1 8E 82            [24] 2133 	mov	dpl,r6
      0007F3 8F 83            [24] 2134 	mov	dph,r7
      0007F5 12r01r76         [24] 2135 	lcall	_setAddress
                                   2136 ;	ecen4330_lcd_v3.c:332: write8Reg(0x2C);
                                   2137 ;	assignBit
      0007F8 C2 B5            [12] 2138 	clr	_P3_5
                                   2139 ;	assignBit
      0007FA D2 B4            [12] 2140 	setb	_P3_4
      0007FC 85*02 82         [24] 2141 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2142 	mov	dph,(_lcd_address + 1)
      000802 74 2C            [12] 2143 	mov	a,#0x2c
      000804 F0               [24] 2144 	movx	@dptr,a
                                   2145 ;	assignBit
      000805 C2 B4            [12] 2146 	clr	_P3_4
                                   2147 ;	ecen4330_lcd_v3.c:333: CD = 1;
                                   2148 ;	assignBit
      000807 D2 B5            [12] 2149 	setb	_P3_5
                                   2150 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      000809 AF*38            [24] 2151 	mov	r7,(_fillRect_PARM_5 + 1)
      00080B AD*35            [24] 2152 	mov	r5,_fillRect_PARM_4
      00080D AE*36            [24] 2153 	mov	r6,(_fillRect_PARM_4 + 1)
      00080F                       2154 00114$:
      00080F ED               [12] 2155 	mov	a,r5
      000810 4E               [12] 2156 	orl	a,r6
      000811 60 30            [24] 2157 	jz	00116$
                                   2158 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000813 AB*33            [24] 2159 	mov	r3,_fillRect_PARM_3
      000815 AC*34            [24] 2160 	mov	r4,(_fillRect_PARM_3 + 1)
      000817                       2161 00111$:
      000817 EB               [12] 2162 	mov	a,r3
      000818 4C               [12] 2163 	orl	a,r4
      000819 60 21            [24] 2164 	jz	00115$
                                   2165 ;	ecen4330_lcd_v3.c:339: write8(color>>8); write8(color);
                                   2166 ;	assignBit
      00081B D2 B4            [12] 2167 	setb	_P3_4
      00081D 85*02 82         [24] 2168 	mov	dpl,_lcd_address
      000820 85*03 83         [24] 2169 	mov	dph,(_lcd_address + 1)
      000823 EF               [12] 2170 	mov	a,r7
      000824 F0               [24] 2171 	movx	@dptr,a
                                   2172 ;	assignBit
      000825 C2 B4            [12] 2173 	clr	_P3_4
                                   2174 ;	assignBit
      000827 D2 B4            [12] 2175 	setb	_P3_4
      000829 85*02 82         [24] 2176 	mov	dpl,_lcd_address
      00082C 85*03 83         [24] 2177 	mov	dph,(_lcd_address + 1)
      00082F E5*37            [12] 2178 	mov	a,_fillRect_PARM_5
      000831 FA               [12] 2179 	mov	r2,a
      000832 F0               [24] 2180 	movx	@dptr,a
                                   2181 ;	assignBit
      000833 C2 B4            [12] 2182 	clr	_P3_4
                                   2183 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000835 1B               [12] 2184 	dec	r3
      000836 BB FF 01         [24] 2185 	cjne	r3,#0xff,00169$
      000839 1C               [12] 2186 	dec	r4
      00083A                       2187 00169$:
      00083A 80 DB            [24] 2188 	sjmp	00111$
      00083C                       2189 00115$:
                                   2190 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      00083C 1D               [12] 2191 	dec	r5
      00083D BD FF 01         [24] 2192 	cjne	r5,#0xff,00170$
      000840 1E               [12] 2193 	dec	r6
      000841                       2194 00170$:
      000841 80 CC            [24] 2195 	sjmp	00114$
      000843                       2196 00116$:
                                   2197 ;	ecen4330_lcd_v3.c:343: }
      000843 22               [24] 2198 	ret
                                   2199 ;------------------------------------------------------------
                                   2200 ;Allocation info for local variables in function 'fillScreen'
                                   2201 ;------------------------------------------------------------
                                   2202 ;Color                     Allocated to registers r6 r7 
                                   2203 ;len                       Allocated with name '_fillScreen_len_65536_129'
                                   2204 ;blocks                    Allocated with name '_fillScreen_blocks_65536_129'
                                   2205 ;i                         Allocated with name '_fillScreen_i_65536_129'
                                   2206 ;hi                        Allocated with name '_fillScreen_hi_65536_129'
                                   2207 ;lo                        Allocated with name '_fillScreen_lo_65536_129'
                                   2208 ;------------------------------------------------------------
                                   2209 ;	ecen4330_lcd_v3.c:350: void fillScreen (uint16_t Color) {
                                   2210 ;	-----------------------------------------
                                   2211 ;	 function fillScreen
                                   2212 ;	-----------------------------------------
      000844                       2213 _fillScreen:
      000844 AE 82            [24] 2214 	mov	r6,dpl
      000846 AF 83            [24] 2215 	mov	r7,dph
                                   2216 ;	ecen4330_lcd_v3.c:355: __xdata uint8_t  i, hi = Color >> 8,
      000848 8F 05            [24] 2217 	mov	ar5,r7
                                   2218 ;	ecen4330_lcd_v3.c:356: lo = Color;
                                   2219 ;	ecen4330_lcd_v3.c:359: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      00084A E4               [12] 2220 	clr	a
      00084B F5*00            [12] 2221 	mov	_setAddress_PARM_2,a
      00084D F5*01            [12] 2222 	mov	(_setAddress_PARM_2 + 1),a
      00084F 75*02 EF         [24] 2223 	mov	_setAddress_PARM_3,#0xef
                                   2224 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000852 F5*03            [12] 2225 	mov	(_setAddress_PARM_3 + 1),a
      000854 75*04 3F         [24] 2226 	mov	_setAddress_PARM_4,#0x3f
      000857 75*05 01         [24] 2227 	mov	(_setAddress_PARM_4 + 1),#0x01
      00085A 90 00 00         [24] 2228 	mov	dptr,#0x0000
      00085D C0 06            [24] 2229 	push	ar6
      00085F C0 05            [24] 2230 	push	ar5
      000861 12r01r76         [24] 2231 	lcall	_setAddress
      000864 D0 05            [24] 2232 	pop	ar5
      000866 D0 06            [24] 2233 	pop	ar6
                                   2234 ;	ecen4330_lcd_v3.c:361: write8Reg(0x2C);
                                   2235 ;	assignBit
      000868 C2 B5            [12] 2236 	clr	_P3_5
                                   2237 ;	assignBit
      00086A D2 B4            [12] 2238 	setb	_P3_4
      00086C 85*02 82         [24] 2239 	mov	dpl,_lcd_address
      00086F 85*03 83         [24] 2240 	mov	dph,(_lcd_address + 1)
      000872 74 2C            [12] 2241 	mov	a,#0x2c
      000874 F0               [24] 2242 	movx	@dptr,a
                                   2243 ;	assignBit
      000875 C2 B4            [12] 2244 	clr	_P3_4
                                   2245 ;	ecen4330_lcd_v3.c:362: CD = 1;
                                   2246 ;	assignBit
      000877 D2 B5            [12] 2247 	setb	_P3_5
                                   2248 ;	ecen4330_lcd_v3.c:363: write8(hi); write8(lo);
                                   2249 ;	assignBit
      000879 D2 B4            [12] 2250 	setb	_P3_4
      00087B 85*02 82         [24] 2251 	mov	dpl,_lcd_address
      00087E 85*03 83         [24] 2252 	mov	dph,(_lcd_address + 1)
      000881 ED               [12] 2253 	mov	a,r5
      000882 F0               [24] 2254 	movx	@dptr,a
                                   2255 ;	assignBit
      000883 C2 B4            [12] 2256 	clr	_P3_4
                                   2257 ;	assignBit
      000885 D2 B4            [12] 2258 	setb	_P3_4
      000887 85*02 82         [24] 2259 	mov	dpl,_lcd_address
      00088A 85*03 83         [24] 2260 	mov	dph,(_lcd_address + 1)
      00088D EE               [12] 2261 	mov	a,r6
      00088E F0               [24] 2262 	movx	@dptr,a
                                   2263 ;	assignBit
      00088F C2 B4            [12] 2264 	clr	_P3_4
                                   2265 ;	ecen4330_lcd_v3.c:366: while (blocks--) {
      000891 7C B0            [12] 2266 	mov	r4,#0xb0
      000893 7F 04            [12] 2267 	mov	r7,#0x04
      000895                       2268 00104$:
      000895 8C 02            [24] 2269 	mov	ar2,r4
      000897 8F 03            [24] 2270 	mov	ar3,r7
      000899 1C               [12] 2271 	dec	r4
      00089A BC FF 01         [24] 2272 	cjne	r4,#0xff,00140$
      00089D 1F               [12] 2273 	dec	r7
      00089E                       2274 00140$:
      00089E EA               [12] 2275 	mov	a,r2
      00089F 4B               [12] 2276 	orl	a,r3
      0008A0 60 66            [24] 2277 	jz	00106$
                                   2278 ;	ecen4330_lcd_v3.c:368: do {
      0008A2 7B 10            [12] 2279 	mov	r3,#0x10
      0008A4                       2280 00101$:
                                   2281 ;	ecen4330_lcd_v3.c:370: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2282 ;	assignBit
      0008A4 D2 B4            [12] 2283 	setb	_P3_4
      0008A6 85*02 82         [24] 2284 	mov	dpl,_lcd_address
      0008A9 85*03 83         [24] 2285 	mov	dph,(_lcd_address + 1)
      0008AC ED               [12] 2286 	mov	a,r5
      0008AD F0               [24] 2287 	movx	@dptr,a
                                   2288 ;	assignBit
      0008AE C2 B4            [12] 2289 	clr	_P3_4
                                   2290 ;	assignBit
      0008B0 D2 B4            [12] 2291 	setb	_P3_4
      0008B2 85*02 82         [24] 2292 	mov	dpl,_lcd_address
      0008B5 85*03 83         [24] 2293 	mov	dph,(_lcd_address + 1)
      0008B8 EE               [12] 2294 	mov	a,r6
      0008B9 F0               [24] 2295 	movx	@dptr,a
                                   2296 ;	assignBit
      0008BA C2 B4            [12] 2297 	clr	_P3_4
                                   2298 ;	assignBit
      0008BC D2 B4            [12] 2299 	setb	_P3_4
      0008BE 85*02 82         [24] 2300 	mov	dpl,_lcd_address
      0008C1 85*03 83         [24] 2301 	mov	dph,(_lcd_address + 1)
      0008C4 ED               [12] 2302 	mov	a,r5
      0008C5 F0               [24] 2303 	movx	@dptr,a
                                   2304 ;	assignBit
      0008C6 C2 B4            [12] 2305 	clr	_P3_4
                                   2306 ;	assignBit
      0008C8 D2 B4            [12] 2307 	setb	_P3_4
      0008CA 85*02 82         [24] 2308 	mov	dpl,_lcd_address
      0008CD 85*03 83         [24] 2309 	mov	dph,(_lcd_address + 1)
      0008D0 EE               [12] 2310 	mov	a,r6
      0008D1 F0               [24] 2311 	movx	@dptr,a
                                   2312 ;	assignBit
      0008D2 C2 B4            [12] 2313 	clr	_P3_4
                                   2314 ;	ecen4330_lcd_v3.c:371: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2315 ;	assignBit
      0008D4 D2 B4            [12] 2316 	setb	_P3_4
      0008D6 85*02 82         [24] 2317 	mov	dpl,_lcd_address
      0008D9 85*03 83         [24] 2318 	mov	dph,(_lcd_address + 1)
      0008DC ED               [12] 2319 	mov	a,r5
      0008DD F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	assignBit
      0008DE C2 B4            [12] 2322 	clr	_P3_4
                                   2323 ;	assignBit
      0008E0 D2 B4            [12] 2324 	setb	_P3_4
      0008E2 85*02 82         [24] 2325 	mov	dpl,_lcd_address
      0008E5 85*03 83         [24] 2326 	mov	dph,(_lcd_address + 1)
      0008E8 EE               [12] 2327 	mov	a,r6
      0008E9 F0               [24] 2328 	movx	@dptr,a
                                   2329 ;	assignBit
      0008EA C2 B4            [12] 2330 	clr	_P3_4
                                   2331 ;	assignBit
      0008EC D2 B4            [12] 2332 	setb	_P3_4
      0008EE 85*02 82         [24] 2333 	mov	dpl,_lcd_address
      0008F1 85*03 83         [24] 2334 	mov	dph,(_lcd_address + 1)
      0008F4 ED               [12] 2335 	mov	a,r5
      0008F5 F0               [24] 2336 	movx	@dptr,a
                                   2337 ;	assignBit
      0008F6 C2 B4            [12] 2338 	clr	_P3_4
                                   2339 ;	assignBit
      0008F8 D2 B4            [12] 2340 	setb	_P3_4
      0008FA 85*02 82         [24] 2341 	mov	dpl,_lcd_address
      0008FD 85*03 83         [24] 2342 	mov	dph,(_lcd_address + 1)
      000900 EE               [12] 2343 	mov	a,r6
      000901 F0               [24] 2344 	movx	@dptr,a
                                   2345 ;	assignBit
      000902 C2 B4            [12] 2346 	clr	_P3_4
                                   2347 ;	ecen4330_lcd_v3.c:372: } while(--i);
      000904 DB 9E            [24] 2348 	djnz	r3,00101$
      000906 80 8D            [24] 2349 	sjmp	00104$
      000908                       2350 00106$:
                                   2351 ;	ecen4330_lcd_v3.c:374: for (i = (char)len & 63; i--; ) {
      000908 7F 3F            [12] 2352 	mov	r7,#0x3f
      00090A                       2353 00109$:
      00090A 8F 04            [24] 2354 	mov	ar4,r7
      00090C 1F               [12] 2355 	dec	r7
      00090D EC               [12] 2356 	mov	a,r4
      00090E 60 1A            [24] 2357 	jz	00111$
                                   2358 ;	ecen4330_lcd_v3.c:376: write8(hi); write8(lo);
                                   2359 ;	assignBit
      000910 D2 B4            [12] 2360 	setb	_P3_4
      000912 85*02 82         [24] 2361 	mov	dpl,_lcd_address
      000915 85*03 83         [24] 2362 	mov	dph,(_lcd_address + 1)
      000918 ED               [12] 2363 	mov	a,r5
      000919 F0               [24] 2364 	movx	@dptr,a
                                   2365 ;	assignBit
      00091A C2 B4            [12] 2366 	clr	_P3_4
                                   2367 ;	assignBit
      00091C D2 B4            [12] 2368 	setb	_P3_4
      00091E 85*02 82         [24] 2369 	mov	dpl,_lcd_address
      000921 85*03 83         [24] 2370 	mov	dph,(_lcd_address + 1)
      000924 EE               [12] 2371 	mov	a,r6
      000925 F0               [24] 2372 	movx	@dptr,a
                                   2373 ;	assignBit
      000926 C2 B4            [12] 2374 	clr	_P3_4
      000928 80 E0            [24] 2375 	sjmp	00109$
      00092A                       2376 00111$:
                                   2377 ;	ecen4330_lcd_v3.c:379: }
      00092A 22               [24] 2378 	ret
                                   2379 ;------------------------------------------------------------
                                   2380 ;Allocation info for local variables in function 'drawChar'
                                   2381 ;------------------------------------------------------------
                                   2382 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2383 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2384 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2385 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2386 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2387 ;x                         Allocated to registers r6 r7 
                                   2388 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2389 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2390 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2391 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2392 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2393 ;i                         Allocated with name '_drawChar_i_65537_151'
                                   2394 ;line                      Allocated with name '_drawChar_line_196609_153'
                                   2395 ;j                         Allocated with name '_drawChar_j_196610_156'
                                   2396 ;------------------------------------------------------------
                                   2397 ;	ecen4330_lcd_v3.c:390: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2398 ;	-----------------------------------------
                                   2399 ;	 function drawChar
                                   2400 ;	-----------------------------------------
      00092B                       2401 _drawChar:
      00092B AE 82            [24] 2402 	mov	r6,dpl
      00092D AF 83            [24] 2403 	mov	r7,dph
                                   2404 ;	ecen4330_lcd_v3.c:391: if ((x >=TFTWIDTH) ||
      00092F C3               [12] 2405 	clr	c
      000930 EE               [12] 2406 	mov	a,r6
      000931 94 F0            [12] 2407 	subb	a,#0xf0
      000933 EF               [12] 2408 	mov	a,r7
      000934 64 80            [12] 2409 	xrl	a,#0x80
      000936 94 80            [12] 2410 	subb	a,#0x80
      000938 50 67            [24] 2411 	jnc	00101$
                                   2412 ;	ecen4330_lcd_v3.c:392: (y >=TFTHEIGHT)           ||
      00093A AC*39            [24] 2413 	mov	r4,_drawChar_PARM_2
      00093C AD*3A            [24] 2414 	mov	r5,(_drawChar_PARM_2 + 1)
      00093E C3               [12] 2415 	clr	c
      00093F EC               [12] 2416 	mov	a,r4
      000940 94 40            [12] 2417 	subb	a,#0x40
      000942 ED               [12] 2418 	mov	a,r5
      000943 64 80            [12] 2419 	xrl	a,#0x80
      000945 94 81            [12] 2420 	subb	a,#0x81
      000947 50 58            [24] 2421 	jnc	00101$
                                   2422 ;	ecen4330_lcd_v3.c:393: ((x + 6 * size - 1) < 0) ||
      000949 AA*40            [24] 2423 	mov	r2,_drawChar_PARM_6
      00094B 7B 00            [12] 2424 	mov	r3,#0x00
      00094D 8A*00            [24] 2425 	mov	__mulint_PARM_2,r2
      00094F 8B*01            [24] 2426 	mov	(__mulint_PARM_2 + 1),r3
      000951 90 00 06         [24] 2427 	mov	dptr,#0x0006
      000954 C0 07            [24] 2428 	push	ar7
      000956 C0 06            [24] 2429 	push	ar6
      000958 C0 05            [24] 2430 	push	ar5
      00095A C0 04            [24] 2431 	push	ar4
      00095C C0 03            [24] 2432 	push	ar3
      00095E C0 02            [24] 2433 	push	ar2
      000960 12r00r00         [24] 2434 	lcall	__mulint
      000963 A8 82            [24] 2435 	mov	r0,dpl
      000965 A9 83            [24] 2436 	mov	r1,dph
      000967 D0 02            [24] 2437 	pop	ar2
      000969 D0 03            [24] 2438 	pop	ar3
      00096B D0 04            [24] 2439 	pop	ar4
      00096D D0 05            [24] 2440 	pop	ar5
      00096F D0 06            [24] 2441 	pop	ar6
      000971 D0 07            [24] 2442 	pop	ar7
      000973 E8               [12] 2443 	mov	a,r0
      000974 2E               [12] 2444 	add	a,r6
      000975 F8               [12] 2445 	mov	r0,a
      000976 E9               [12] 2446 	mov	a,r1
      000977 3F               [12] 2447 	addc	a,r7
      000978 F9               [12] 2448 	mov	r1,a
      000979 18               [12] 2449 	dec	r0
      00097A B8 FF 01         [24] 2450 	cjne	r0,#0xff,00176$
      00097D 19               [12] 2451 	dec	r1
      00097E                       2452 00176$:
      00097E E9               [12] 2453 	mov	a,r1
      00097F 20 E7 1F         [24] 2454 	jb	acc.7,00101$
                                   2455 ;	ecen4330_lcd_v3.c:394: ((y + 8 * size - 1) < 0))
      000982 EB               [12] 2456 	mov	a,r3
      000983 C4               [12] 2457 	swap	a
      000984 03               [12] 2458 	rr	a
      000985 54 F8            [12] 2459 	anl	a,#0xf8
      000987 CA               [12] 2460 	xch	a,r2
      000988 C4               [12] 2461 	swap	a
      000989 03               [12] 2462 	rr	a
      00098A CA               [12] 2463 	xch	a,r2
      00098B 6A               [12] 2464 	xrl	a,r2
      00098C CA               [12] 2465 	xch	a,r2
      00098D 54 F8            [12] 2466 	anl	a,#0xf8
      00098F CA               [12] 2467 	xch	a,r2
      000990 6A               [12] 2468 	xrl	a,r2
      000991 FB               [12] 2469 	mov	r3,a
      000992 EA               [12] 2470 	mov	a,r2
      000993 2C               [12] 2471 	add	a,r4
      000994 FA               [12] 2472 	mov	r2,a
      000995 EB               [12] 2473 	mov	a,r3
      000996 3D               [12] 2474 	addc	a,r5
      000997 FB               [12] 2475 	mov	r3,a
      000998 1A               [12] 2476 	dec	r2
      000999 BA FF 01         [24] 2477 	cjne	r2,#0xff,00178$
      00099C 1B               [12] 2478 	dec	r3
      00099D                       2479 00178$:
      00099D EB               [12] 2480 	mov	a,r3
      00099E 30 E7 01         [24] 2481 	jnb	acc.7,00138$
      0009A1                       2482 00101$:
                                   2483 ;	ecen4330_lcd_v3.c:396: return;
      0009A1 22               [24] 2484 	ret
                                   2485 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      0009A2                       2486 00138$:
      0009A2 74 01            [12] 2487 	mov	a,#0x01
      0009A4 B5*40 04         [24] 2488 	cjne	a,_drawChar_PARM_6,00180$
      0009A7 74 01            [12] 2489 	mov	a,#0x01
      0009A9 80 01            [24] 2490 	sjmp	00181$
      0009AB                       2491 00180$:
      0009AB E4               [12] 2492 	clr	a
      0009AC                       2493 00181$:
      0009AC FB               [12] 2494 	mov	r3,a
      0009AD 8B*47            [24] 2495 	mov	_drawChar_sloc5_1_0,r3
      0009AF E5*3C            [12] 2496 	mov	a,_drawChar_PARM_4
      0009B1 B5*3E 08         [24] 2497 	cjne	a,_drawChar_PARM_5,00182$
      0009B4 E5*3D            [12] 2498 	mov	a,(_drawChar_PARM_4 + 1)
      0009B6 B5*3F 03         [24] 2499 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009B9 D3               [12] 2500 	setb	c
      0009BA 80 01            [24] 2501 	sjmp	00183$
      0009BC                       2502 00182$:
      0009BC C3               [12] 2503 	clr	c
      0009BD                       2504 00183$:
      0009BD 92*00            [24] 2505 	mov	_drawChar_sloc0_1_0,c
      0009BF 79 00            [12] 2506 	mov	r1,#0x00
      0009C1                       2507 00124$:
                                   2508 ;	ecen4330_lcd_v3.c:405: if (i == 5)
      0009C1 B9 05 07         [24] 2509 	cjne	r1,#0x05,00107$
                                   2510 ;	ecen4330_lcd_v3.c:407: line = 0x0;
      0009C4 90r00r0A         [24] 2511 	mov	dptr,#_drawChar_line_196609_153
      0009C7 E4               [12] 2512 	clr	a
      0009C8 F0               [24] 2513 	movx	@dptr,a
      0009C9 80 49            [24] 2514 	sjmp	00136$
      0009CB                       2515 00107$:
                                   2516 ;	ecen4330_lcd_v3.c:411: line = pgm_read_byte(font+(c*5)+i);
      0009CB 85*3B*00         [24] 2517 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009CE 75*01 00         [24] 2518 	mov	(__mulint_PARM_2 + 1),#0x00
      0009D1 90 00 05         [24] 2519 	mov	dptr,#0x0005
      0009D4 C0 07            [24] 2520 	push	ar7
      0009D6 C0 06            [24] 2521 	push	ar6
      0009D8 C0 05            [24] 2522 	push	ar5
      0009DA C0 04            [24] 2523 	push	ar4
      0009DC C0 03            [24] 2524 	push	ar3
      0009DE C0 01            [24] 2525 	push	ar1
      0009E0 12r00r00         [24] 2526 	lcall	__mulint
      0009E3 A8 82            [24] 2527 	mov	r0,dpl
      0009E5 AA 83            [24] 2528 	mov	r2,dph
      0009E7 D0 01            [24] 2529 	pop	ar1
      0009E9 D0 03            [24] 2530 	pop	ar3
      0009EB D0 04            [24] 2531 	pop	ar4
      0009ED D0 05            [24] 2532 	pop	ar5
      0009EF D0 06            [24] 2533 	pop	ar6
      0009F1 D0 07            [24] 2534 	pop	ar7
      0009F3 E8               [12] 2535 	mov	a,r0
      0009F4 24r00            [12] 2536 	add	a,#_font
      0009F6 F5*41            [12] 2537 	mov	_drawChar_sloc1_1_0,a
      0009F8 EA               [12] 2538 	mov	a,r2
      0009F9 34s00            [12] 2539 	addc	a,#(_font >> 8)
      0009FB F5*42            [12] 2540 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009FD E9               [12] 2541 	mov	a,r1
      0009FE F8               [12] 2542 	mov	r0,a
      0009FF 33               [12] 2543 	rlc	a
      000A00 95 E0            [12] 2544 	subb	a,acc
      000A02 FA               [12] 2545 	mov	r2,a
      000A03 E8               [12] 2546 	mov	a,r0
      000A04 25*41            [12] 2547 	add	a,_drawChar_sloc1_1_0
      000A06 F5 82            [12] 2548 	mov	dpl,a
      000A08 EA               [12] 2549 	mov	a,r2
      000A09 35*42            [12] 2550 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A0B F5 83            [12] 2551 	mov	dph,a
      000A0D E4               [12] 2552 	clr	a
      000A0E 93               [24] 2553 	movc	a,@a+dptr
      000A0F FA               [12] 2554 	mov	r2,a
      000A10 90r00r0A         [24] 2555 	mov	dptr,#_drawChar_line_196609_153
      000A13 F0               [24] 2556 	movx	@dptr,a
                                   2557 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
                                   2558 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000A14                       2559 00136$:
      000A14 C2 D5            [12] 2560 	clr	F0
      000A16 85*40 F0         [24] 2561 	mov	b,_drawChar_PARM_6
      000A19 E9               [12] 2562 	mov	a,r1
      000A1A 30 E7 04         [24] 2563 	jnb	acc.7,00186$
      000A1D B2 D5            [12] 2564 	cpl	F0
      000A1F F4               [12] 2565 	cpl	a
      000A20 04               [12] 2566 	inc	a
      000A21                       2567 00186$:
      000A21 A4               [48] 2568 	mul	ab
      000A22 30 D5 0A         [24] 2569 	jnb	F0,00187$
      000A25 F4               [12] 2570 	cpl	a
      000A26 24 01            [12] 2571 	add	a,#0x01
      000A28 C5 F0            [12] 2572 	xch	a,b
      000A2A F4               [12] 2573 	cpl	a
      000A2B 34 00            [12] 2574 	addc	a,#0x00
      000A2D C5 F0            [12] 2575 	xch	a,b
      000A2F                       2576 00187$:
      000A2F 2E               [12] 2577 	add	a,r6
      000A30 F5*41            [12] 2578 	mov	_drawChar_sloc1_1_0,a
      000A32 EF               [12] 2579 	mov	a,r7
      000A33 35 F0            [12] 2580 	addc	a,b
      000A35 F5*42            [12] 2581 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A37 89 00            [24] 2582 	mov	ar0,r1
      000A39 85*41*43         [24] 2583 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A3C 85*42*44         [24] 2584 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A3F 89*45            [24] 2585 	mov	_drawChar_sloc3_1_0,r1
      000A41 75*46 00         [24] 2586 	mov	_drawChar_sloc4_1_0,#0x00
      000A44                       2587 00122$:
                                   2588 ;	ecen4330_lcd_v3.c:418: if (line & 0x1)
      000A44 90r00r0A         [24] 2589 	mov	dptr,#_drawChar_line_196609_153
      000A47 E0               [24] 2590 	movx	a,@dptr
      000A48 20 E0 03         [24] 2591 	jb	acc.0,00188$
      000A4B 02r0Br03         [24] 2592 	ljmp	00118$
      000A4E                       2593 00188$:
                                   2594 ;	ecen4330_lcd_v3.c:420: if (size == 1)
      000A4E EB               [12] 2595 	mov	a,r3
      000A4F 60 4E            [24] 2596 	jz	00110$
                                   2597 ;	ecen4330_lcd_v3.c:422: drawPixel(x+i, y+j, color);
      000A51 C0 00            [24] 2598 	push	ar0
      000A53 E5*45            [12] 2599 	mov	a,_drawChar_sloc3_1_0
      000A55 F8               [12] 2600 	mov	r0,a
      000A56 33               [12] 2601 	rlc	a
      000A57 95 E0            [12] 2602 	subb	a,acc
      000A59 FA               [12] 2603 	mov	r2,a
      000A5A E8               [12] 2604 	mov	a,r0
      000A5B 2E               [12] 2605 	add	a,r6
      000A5C F8               [12] 2606 	mov	r0,a
      000A5D EA               [12] 2607 	mov	a,r2
      000A5E 3F               [12] 2608 	addc	a,r7
      000A5F FA               [12] 2609 	mov	r2,a
      000A60 88 82            [24] 2610 	mov	dpl,r0
      000A62 8A 83            [24] 2611 	mov	dph,r2
      000A64 E5*46            [12] 2612 	mov	a,_drawChar_sloc4_1_0
      000A66 F8               [12] 2613 	mov	r0,a
      000A67 33               [12] 2614 	rlc	a
      000A68 95 E0            [12] 2615 	subb	a,acc
      000A6A FA               [12] 2616 	mov	r2,a
      000A6B E8               [12] 2617 	mov	a,r0
      000A6C 2C               [12] 2618 	add	a,r4
      000A6D F8               [12] 2619 	mov	r0,a
      000A6E EA               [12] 2620 	mov	a,r2
      000A6F 3D               [12] 2621 	addc	a,r5
      000A70 FA               [12] 2622 	mov	r2,a
      000A71 88*16            [24] 2623 	mov	_drawPixel_PARM_2,r0
      000A73 8A*17            [24] 2624 	mov	(_drawPixel_PARM_2 + 1),r2
      000A75 85*3C*18         [24] 2625 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A78 85*3D*19         [24] 2626 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A7B C0 07            [24] 2627 	push	ar7
      000A7D C0 06            [24] 2628 	push	ar6
      000A7F C0 05            [24] 2629 	push	ar5
      000A81 C0 04            [24] 2630 	push	ar4
      000A83 C0 03            [24] 2631 	push	ar3
      000A85 C0 01            [24] 2632 	push	ar1
      000A87 C0 00            [24] 2633 	push	ar0
      000A89 12r03r61         [24] 2634 	lcall	_drawPixel
      000A8C D0 00            [24] 2635 	pop	ar0
      000A8E D0 01            [24] 2636 	pop	ar1
      000A90 D0 03            [24] 2637 	pop	ar3
      000A92 D0 04            [24] 2638 	pop	ar4
      000A94 D0 05            [24] 2639 	pop	ar5
      000A96 D0 06            [24] 2640 	pop	ar6
      000A98 D0 07            [24] 2641 	pop	ar7
      000A9A D0 00            [24] 2642 	pop	ar0
      000A9C 02r0BrBA         [24] 2643 	ljmp	00119$
      000A9F                       2644 00110$:
                                   2645 ;	ecen4330_lcd_v3.c:425: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A9F C0 00            [24] 2646 	push	ar0
      000AA1 85*43 82         [24] 2647 	mov	dpl,_drawChar_sloc2_1_0
      000AA4 85*44 83         [24] 2648 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000AA7 C2 D5            [12] 2649 	clr	F0
      000AA9 85*40 F0         [24] 2650 	mov	b,_drawChar_PARM_6
      000AAC E5*46            [12] 2651 	mov	a,_drawChar_sloc4_1_0
      000AAE 30 E7 04         [24] 2652 	jnb	acc.7,00190$
      000AB1 B2 D5            [12] 2653 	cpl	F0
      000AB3 F4               [12] 2654 	cpl	a
      000AB4 04               [12] 2655 	inc	a
      000AB5                       2656 00190$:
      000AB5 A4               [48] 2657 	mul	ab
      000AB6 30 D5 0A         [24] 2658 	jnb	F0,00191$
      000AB9 F4               [12] 2659 	cpl	a
      000ABA 24 01            [12] 2660 	add	a,#0x01
      000ABC C5 F0            [12] 2661 	xch	a,b
      000ABE F4               [12] 2662 	cpl	a
      000ABF 34 00            [12] 2663 	addc	a,#0x00
      000AC1 C5 F0            [12] 2664 	xch	a,b
      000AC3                       2665 00191$:
      000AC3 2C               [12] 2666 	add	a,r4
      000AC4 F8               [12] 2667 	mov	r0,a
      000AC5 ED               [12] 2668 	mov	a,r5
      000AC6 35 F0            [12] 2669 	addc	a,b
      000AC8 FA               [12] 2670 	mov	r2,a
      000AC9 88*31            [24] 2671 	mov	_fillRect_PARM_2,r0
      000ACB 8A*32            [24] 2672 	mov	(_fillRect_PARM_2 + 1),r2
      000ACD A8*40            [24] 2673 	mov	r0,_drawChar_PARM_6
      000ACF 7A 00            [12] 2674 	mov	r2,#0x00
      000AD1 88*33            [24] 2675 	mov	_fillRect_PARM_3,r0
      000AD3 8A*34            [24] 2676 	mov	(_fillRect_PARM_3 + 1),r2
      000AD5 88*35            [24] 2677 	mov	_fillRect_PARM_4,r0
      000AD7 8A*36            [24] 2678 	mov	(_fillRect_PARM_4 + 1),r2
      000AD9 85*3C*37         [24] 2679 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000ADC 85*3D*38         [24] 2680 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000ADF C0 07            [24] 2681 	push	ar7
      000AE1 C0 06            [24] 2682 	push	ar6
      000AE3 C0 05            [24] 2683 	push	ar5
      000AE5 C0 04            [24] 2684 	push	ar4
      000AE7 C0 03            [24] 2685 	push	ar3
      000AE9 C0 01            [24] 2686 	push	ar1
      000AEB C0 00            [24] 2687 	push	ar0
      000AED 12r07r63         [24] 2688 	lcall	_fillRect
      000AF0 D0 00            [24] 2689 	pop	ar0
      000AF2 D0 01            [24] 2690 	pop	ar1
      000AF4 D0 03            [24] 2691 	pop	ar3
      000AF6 D0 04            [24] 2692 	pop	ar4
      000AF8 D0 05            [24] 2693 	pop	ar5
      000AFA D0 06            [24] 2694 	pop	ar6
      000AFC D0 07            [24] 2695 	pop	ar7
      000AFE D0 00            [24] 2696 	pop	ar0
      000B00 02r0BrBA         [24] 2697 	ljmp	00119$
      000B03                       2698 00118$:
                                   2699 ;	ecen4330_lcd_v3.c:427: } else if (bg != color)
      000B03 30*00 03         [24] 2700 	jnb	_drawChar_sloc0_1_0,00192$
      000B06 02r0BrBA         [24] 2701 	ljmp	00119$
      000B09                       2702 00192$:
                                   2703 ;	ecen4330_lcd_v3.c:429: if (size == 1)
      000B09 E5*47            [12] 2704 	mov	a,_drawChar_sloc5_1_0
      000B0B 60 4C            [24] 2705 	jz	00113$
                                   2706 ;	ecen4330_lcd_v3.c:431: drawPixel(x+i, y+j, bg);
      000B0D C0 03            [24] 2707 	push	ar3
      000B0F E8               [12] 2708 	mov	a,r0
      000B10 FA               [12] 2709 	mov	r2,a
      000B11 33               [12] 2710 	rlc	a
      000B12 95 E0            [12] 2711 	subb	a,acc
      000B14 FB               [12] 2712 	mov	r3,a
      000B15 EA               [12] 2713 	mov	a,r2
      000B16 2E               [12] 2714 	add	a,r6
      000B17 FA               [12] 2715 	mov	r2,a
      000B18 EB               [12] 2716 	mov	a,r3
      000B19 3F               [12] 2717 	addc	a,r7
      000B1A FB               [12] 2718 	mov	r3,a
      000B1B 8A 82            [24] 2719 	mov	dpl,r2
      000B1D 8B 83            [24] 2720 	mov	dph,r3
      000B1F E5*46            [12] 2721 	mov	a,_drawChar_sloc4_1_0
      000B21 FA               [12] 2722 	mov	r2,a
      000B22 33               [12] 2723 	rlc	a
      000B23 95 E0            [12] 2724 	subb	a,acc
      000B25 FB               [12] 2725 	mov	r3,a
      000B26 EA               [12] 2726 	mov	a,r2
      000B27 2C               [12] 2727 	add	a,r4
      000B28 FA               [12] 2728 	mov	r2,a
      000B29 EB               [12] 2729 	mov	a,r3
      000B2A 3D               [12] 2730 	addc	a,r5
      000B2B FB               [12] 2731 	mov	r3,a
      000B2C 8A*16            [24] 2732 	mov	_drawPixel_PARM_2,r2
      000B2E 8B*17            [24] 2733 	mov	(_drawPixel_PARM_2 + 1),r3
      000B30 85*3E*18         [24] 2734 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B33 85*3F*19         [24] 2735 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B36 C0 07            [24] 2736 	push	ar7
      000B38 C0 06            [24] 2737 	push	ar6
      000B3A C0 05            [24] 2738 	push	ar5
      000B3C C0 04            [24] 2739 	push	ar4
      000B3E C0 03            [24] 2740 	push	ar3
      000B40 C0 01            [24] 2741 	push	ar1
      000B42 C0 00            [24] 2742 	push	ar0
      000B44 12r03r61         [24] 2743 	lcall	_drawPixel
      000B47 D0 00            [24] 2744 	pop	ar0
      000B49 D0 01            [24] 2745 	pop	ar1
      000B4B D0 03            [24] 2746 	pop	ar3
      000B4D D0 04            [24] 2747 	pop	ar4
      000B4F D0 05            [24] 2748 	pop	ar5
      000B51 D0 06            [24] 2749 	pop	ar6
      000B53 D0 07            [24] 2750 	pop	ar7
      000B55 D0 03            [24] 2751 	pop	ar3
      000B57 80 61            [24] 2752 	sjmp	00119$
      000B59                       2753 00113$:
                                   2754 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000B59 C0 00            [24] 2755 	push	ar0
      000B5B 85*41 82         [24] 2756 	mov	dpl,_drawChar_sloc1_1_0
      000B5E 85*42 83         [24] 2757 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B61 C2 D5            [12] 2758 	clr	F0
      000B63 85*40 F0         [24] 2759 	mov	b,_drawChar_PARM_6
      000B66 E5*46            [12] 2760 	mov	a,_drawChar_sloc4_1_0
      000B68 30 E7 04         [24] 2761 	jnb	acc.7,00194$
      000B6B B2 D5            [12] 2762 	cpl	F0
      000B6D F4               [12] 2763 	cpl	a
      000B6E 04               [12] 2764 	inc	a
      000B6F                       2765 00194$:
      000B6F A4               [48] 2766 	mul	ab
      000B70 30 D5 0A         [24] 2767 	jnb	F0,00195$
      000B73 F4               [12] 2768 	cpl	a
      000B74 24 01            [12] 2769 	add	a,#0x01
      000B76 C5 F0            [12] 2770 	xch	a,b
      000B78 F4               [12] 2771 	cpl	a
      000B79 34 00            [12] 2772 	addc	a,#0x00
      000B7B C5 F0            [12] 2773 	xch	a,b
      000B7D                       2774 00195$:
      000B7D 2C               [12] 2775 	add	a,r4
      000B7E F8               [12] 2776 	mov	r0,a
      000B7F ED               [12] 2777 	mov	a,r5
      000B80 35 F0            [12] 2778 	addc	a,b
      000B82 FA               [12] 2779 	mov	r2,a
      000B83 88*31            [24] 2780 	mov	_fillRect_PARM_2,r0
      000B85 8A*32            [24] 2781 	mov	(_fillRect_PARM_2 + 1),r2
      000B87 A8*40            [24] 2782 	mov	r0,_drawChar_PARM_6
      000B89 7A 00            [12] 2783 	mov	r2,#0x00
      000B8B 88*33            [24] 2784 	mov	_fillRect_PARM_3,r0
      000B8D 8A*34            [24] 2785 	mov	(_fillRect_PARM_3 + 1),r2
      000B8F 88*35            [24] 2786 	mov	_fillRect_PARM_4,r0
      000B91 8A*36            [24] 2787 	mov	(_fillRect_PARM_4 + 1),r2
      000B93 85*3E*37         [24] 2788 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B96 85*3F*38         [24] 2789 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B99 C0 07            [24] 2790 	push	ar7
      000B9B C0 06            [24] 2791 	push	ar6
      000B9D C0 05            [24] 2792 	push	ar5
      000B9F C0 04            [24] 2793 	push	ar4
      000BA1 C0 03            [24] 2794 	push	ar3
      000BA3 C0 01            [24] 2795 	push	ar1
      000BA5 C0 00            [24] 2796 	push	ar0
      000BA7 12r07r63         [24] 2797 	lcall	_fillRect
      000BAA D0 00            [24] 2798 	pop	ar0
      000BAC D0 01            [24] 2799 	pop	ar1
      000BAE D0 03            [24] 2800 	pop	ar3
      000BB0 D0 04            [24] 2801 	pop	ar4
      000BB2 D0 05            [24] 2802 	pop	ar5
      000BB4 D0 06            [24] 2803 	pop	ar6
      000BB6 D0 07            [24] 2804 	pop	ar7
                                   2805 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BB8 D0 00            [24] 2806 	pop	ar0
                                   2807 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000BBA                       2808 00119$:
                                   2809 ;	ecen4330_lcd_v3.c:439: line >>= 1;
      000BBA 90r00r0A         [24] 2810 	mov	dptr,#_drawChar_line_196609_153
      000BBD E0               [24] 2811 	movx	a,@dptr
      000BBE C3               [12] 2812 	clr	c
      000BBF 13               [12] 2813 	rrc	a
      000BC0 FA               [12] 2814 	mov	r2,a
      000BC1 F0               [24] 2815 	movx	@dptr,a
                                   2816 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000BC2 05*46            [12] 2817 	inc	_drawChar_sloc4_1_0
      000BC4 C3               [12] 2818 	clr	c
      000BC5 E5*46            [12] 2819 	mov	a,_drawChar_sloc4_1_0
      000BC7 64 80            [12] 2820 	xrl	a,#0x80
      000BC9 94 88            [12] 2821 	subb	a,#0x88
      000BCB 50 03            [24] 2822 	jnc	00196$
      000BCD 02r0Ar44         [24] 2823 	ljmp	00122$
      000BD0                       2824 00196$:
                                   2825 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BD0 09               [12] 2826 	inc	r1
      000BD1 C3               [12] 2827 	clr	c
      000BD2 E9               [12] 2828 	mov	a,r1
      000BD3 64 80            [12] 2829 	xrl	a,#0x80
      000BD5 94 86            [12] 2830 	subb	a,#0x86
      000BD7 50 03            [24] 2831 	jnc	00197$
      000BD9 02r09rC1         [24] 2832 	ljmp	00124$
      000BDC                       2833 00197$:
                                   2834 ;	ecen4330_lcd_v3.c:443: }
      000BDC 22               [24] 2835 	ret
                                   2836 ;------------------------------------------------------------
                                   2837 ;Allocation info for local variables in function 'write'
                                   2838 ;------------------------------------------------------------
                                   2839 ;c                         Allocated to registers r7 
                                   2840 ;------------------------------------------------------------
                                   2841 ;	ecen4330_lcd_v3.c:450: void write (uint8_t c)
                                   2842 ;	-----------------------------------------
                                   2843 ;	 function write
                                   2844 ;	-----------------------------------------
      000BDD                       2845 _write:
      000BDD AF 82            [24] 2846 	mov	r7,dpl
                                   2847 ;	ecen4330_lcd_v3.c:452: if (c == '\n')
      000BDF BF 0A 26         [24] 2848 	cjne	r7,#0x0a,00105$
                                   2849 ;	ecen4330_lcd_v3.c:454: cursor_y += textsize*8;
      000BE2 AD*10            [24] 2850 	mov	r5,_textsize
      000BE4 E4               [12] 2851 	clr	a
      000BE5 C4               [12] 2852 	swap	a
      000BE6 03               [12] 2853 	rr	a
      000BE7 54 F8            [12] 2854 	anl	a,#0xf8
      000BE9 CD               [12] 2855 	xch	a,r5
      000BEA C4               [12] 2856 	swap	a
      000BEB 03               [12] 2857 	rr	a
      000BEC CD               [12] 2858 	xch	a,r5
      000BED 6D               [12] 2859 	xrl	a,r5
      000BEE CD               [12] 2860 	xch	a,r5
      000BEF 54 F8            [12] 2861 	anl	a,#0xf8
      000BF1 CD               [12] 2862 	xch	a,r5
      000BF2 6D               [12] 2863 	xrl	a,r5
      000BF3 FE               [12] 2864 	mov	r6,a
      000BF4 AB*0E            [24] 2865 	mov	r3,_cursor_y
      000BF6 AC*0F            [24] 2866 	mov	r4,(_cursor_y + 1)
      000BF8 ED               [12] 2867 	mov	a,r5
      000BF9 2B               [12] 2868 	add	a,r3
      000BFA FB               [12] 2869 	mov	r3,a
      000BFB EE               [12] 2870 	mov	a,r6
      000BFC 3C               [12] 2871 	addc	a,r4
      000BFD FC               [12] 2872 	mov	r4,a
      000BFE 8B*0E            [24] 2873 	mov	_cursor_y,r3
      000C00 8C*0F            [24] 2874 	mov	(_cursor_y + 1),r4
                                   2875 ;	ecen4330_lcd_v3.c:455: cursor_x  = 0;
      000C02 E4               [12] 2876 	clr	a
      000C03 F5*0C            [12] 2877 	mov	_cursor_x,a
      000C05 F5*0D            [12] 2878 	mov	(_cursor_x + 1),a
      000C07 22               [24] 2879 	ret
      000C08                       2880 00105$:
                                   2881 ;	ecen4330_lcd_v3.c:457: else if (c == '\r')
      000C08 BF 0D 01         [24] 2882 	cjne	r7,#0x0d,00119$
      000C0B 22               [24] 2883 	ret
      000C0C                       2884 00119$:
                                   2885 ;	ecen4330_lcd_v3.c:462: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C0C 85*0E*39         [24] 2886 	mov	_drawChar_PARM_2,_cursor_y
      000C0F 85*0F*3A         [24] 2887 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C12 8F*3B            [24] 2888 	mov	_drawChar_PARM_3,r7
      000C14 85*12*3C         [24] 2889 	mov	_drawChar_PARM_4,_textcolor
      000C17 85*13*3D         [24] 2890 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C1A 85*14*3E         [24] 2891 	mov	_drawChar_PARM_5,_textbgcolor
      000C1D 85*15*3F         [24] 2892 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C20 85*10*40         [24] 2893 	mov	_drawChar_PARM_6,_textsize
      000C23 85*0C 82         [24] 2894 	mov	dpl,_cursor_x
      000C26 85*0D 83         [24] 2895 	mov	dph,(_cursor_x + 1)
      000C29 12r09r2B         [24] 2896 	lcall	_drawChar
                                   2897 ;	ecen4330_lcd_v3.c:463: cursor_x += textsize*6;
      000C2C 85*10*00         [24] 2898 	mov	__mulint_PARM_2,_textsize
      000C2F 75*01 00         [24] 2899 	mov	(__mulint_PARM_2 + 1),#0x00
      000C32 90 00 06         [24] 2900 	mov	dptr,#0x0006
      000C35 12r00r00         [24] 2901 	lcall	__mulint
      000C38 AE 82            [24] 2902 	mov	r6,dpl
      000C3A AF 83            [24] 2903 	mov	r7,dph
      000C3C AC*0C            [24] 2904 	mov	r4,_cursor_x
      000C3E AD*0D            [24] 2905 	mov	r5,(_cursor_x + 1)
      000C40 EE               [12] 2906 	mov	a,r6
      000C41 2C               [12] 2907 	add	a,r4
      000C42 FC               [12] 2908 	mov	r4,a
      000C43 EF               [12] 2909 	mov	a,r7
      000C44 3D               [12] 2910 	addc	a,r5
      000C45 FD               [12] 2911 	mov	r5,a
      000C46 8C*0C            [24] 2912 	mov	_cursor_x,r4
      000C48 8D*0D            [24] 2913 	mov	(_cursor_x + 1),r5
                                   2914 ;	ecen4330_lcd_v3.c:465: }
      000C4A 22               [24] 2915 	ret
                                   2916 ;------------------------------------------------------------
                                   2917 ;Allocation info for local variables in function 'LCD_string_write'
                                   2918 ;------------------------------------------------------------
                                   2919 ;str                       Allocated to registers r5 r6 r7 
                                   2920 ;i                         Allocated with name '_LCD_string_write_i_65536_171'
                                   2921 ;------------------------------------------------------------
                                   2922 ;	ecen4330_lcd_v3.c:472: void LCD_string_write (int8_t *str)
                                   2923 ;	-----------------------------------------
                                   2924 ;	 function LCD_string_write
                                   2925 ;	-----------------------------------------
      000C4B                       2926 _LCD_string_write:
      000C4B AD 82            [24] 2927 	mov	r5,dpl
      000C4D AE 83            [24] 2928 	mov	r6,dph
      000C4F AF F0            [24] 2929 	mov	r7,b
                                   2930 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C51 7B 00            [12] 2931 	mov	r3,#0x00
      000C53 7C 00            [12] 2932 	mov	r4,#0x00
      000C55                       2933 00103$:
      000C55 EB               [12] 2934 	mov	a,r3
      000C56 2D               [12] 2935 	add	a,r5
      000C57 F8               [12] 2936 	mov	r0,a
      000C58 EC               [12] 2937 	mov	a,r4
      000C59 3E               [12] 2938 	addc	a,r6
      000C5A F9               [12] 2939 	mov	r1,a
      000C5B 8F 02            [24] 2940 	mov	ar2,r7
      000C5D 88 82            [24] 2941 	mov	dpl,r0
      000C5F 89 83            [24] 2942 	mov	dph,r1
      000C61 8A F0            [24] 2943 	mov	b,r2
      000C63 12r00r00         [24] 2944 	lcall	__gptrget
      000C66 FA               [12] 2945 	mov	r2,a
      000C67 60 20            [24] 2946 	jz	00105$
                                   2947 ;	ecen4330_lcd_v3.c:477: write(str[i]);
      000C69 8A 82            [24] 2948 	mov	dpl,r2
      000C6B C0 07            [24] 2949 	push	ar7
      000C6D C0 06            [24] 2950 	push	ar6
      000C6F C0 05            [24] 2951 	push	ar5
      000C71 C0 04            [24] 2952 	push	ar4
      000C73 C0 03            [24] 2953 	push	ar3
      000C75 12r0BrDD         [24] 2954 	lcall	_write
      000C78 D0 03            [24] 2955 	pop	ar3
      000C7A D0 04            [24] 2956 	pop	ar4
      000C7C D0 05            [24] 2957 	pop	ar5
      000C7E D0 06            [24] 2958 	pop	ar6
      000C80 D0 07            [24] 2959 	pop	ar7
                                   2960 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C82 0B               [12] 2961 	inc	r3
      000C83 BB 00 CF         [24] 2962 	cjne	r3,#0x00,00103$
      000C86 0C               [12] 2963 	inc	r4
      000C87 80 CC            [24] 2964 	sjmp	00103$
      000C89                       2965 00105$:
                                   2966 ;	ecen4330_lcd_v3.c:479: }
      000C89 22               [24] 2967 	ret
                                   2968 ;------------------------------------------------------------
                                   2969 ;Allocation info for local variables in function 'testRAM'
                                   2970 ;------------------------------------------------------------
                                   2971 ;d                         Allocated with name '_testRAM_d_65536_174'
                                   2972 ;i                         Allocated with name '_testRAM_i_65536_175'
                                   2973 ;ram_address               Allocated to registers 
                                   2974 ;------------------------------------------------------------
                                   2975 ;	ecen4330_lcd_v3.c:486: void testRAM (__xdata uint8_t d) {
                                   2976 ;	-----------------------------------------
                                   2977 ;	 function testRAM
                                   2978 ;	-----------------------------------------
      000C8A                       2979 _testRAM:
      000C8A E5 82            [12] 2980 	mov	a,dpl
      000C8C 90r00r0B         [24] 2981 	mov	dptr,#_testRAM_d_65536_174
      000C8F F0               [24] 2982 	movx	@dptr,a
                                   2983 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C90 E0               [24] 2984 	movx	a,@dptr
      000C91 FF               [12] 2985 	mov	r7,a
      000C92 7B 00            [12] 2986 	mov	r3,#0x00
      000C94 7C 00            [12] 2987 	mov	r4,#0x00
      000C96 7D 00            [12] 2988 	mov	r5,#0x00
      000C98 7E 00            [12] 2989 	mov	r6,#0x00
      000C9A                       2990 00102$:
                                   2991 ;	ecen4330_lcd_v3.c:491: IOM = 0;
                                   2992 ;	assignBit
      000C9A C2 B4            [12] 2993 	clr	_P3_4
                                   2994 ;	ecen4330_lcd_v3.c:492: ram_address = (uint8_t __xdata*)(i);
      000C9C 8B 82            [24] 2995 	mov	dpl,r3
      000C9E 8C 83            [24] 2996 	mov	dph,r4
                                   2997 ;	ecen4330_lcd_v3.c:493: *ram_address = d;
      000CA0 EF               [12] 2998 	mov	a,r7
      000CA1 F0               [24] 2999 	movx	@dptr,a
                                   3000 ;	ecen4330_lcd_v3.c:494: IOM = 1;
                                   3001 ;	assignBit
      000CA2 D2 B4            [12] 3002 	setb	_P3_4
                                   3003 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CA4 0B               [12] 3004 	inc	r3
      000CA5 BB 00 09         [24] 3005 	cjne	r3,#0x00,00111$
      000CA8 0C               [12] 3006 	inc	r4
      000CA9 BC 00 05         [24] 3007 	cjne	r4,#0x00,00111$
      000CAC 0D               [12] 3008 	inc	r5
      000CAD BD 00 01         [24] 3009 	cjne	r5,#0x00,00111$
      000CB0 0E               [12] 3010 	inc	r6
      000CB1                       3011 00111$:
      000CB1 C3               [12] 3012 	clr	c
      000CB2 EB               [12] 3013 	mov	a,r3
      000CB3 94 FF            [12] 3014 	subb	a,#0xff
      000CB5 EC               [12] 3015 	mov	a,r4
      000CB6 94 FF            [12] 3016 	subb	a,#0xff
      000CB8 ED               [12] 3017 	mov	a,r5
      000CB9 94 00            [12] 3018 	subb	a,#0x00
      000CBB EE               [12] 3019 	mov	a,r6
      000CBC 94 00            [12] 3020 	subb	a,#0x00
      000CBE 40 DA            [24] 3021 	jc	00102$
                                   3022 ;	ecen4330_lcd_v3.c:496: }
      000CC0 22               [24] 3023 	ret
                                   3024 ;------------------------------------------------------------
                                   3025 ;Allocation info for local variables in function 'freeType'
                                   3026 ;------------------------------------------------------------
                                   3027 ;count                     Allocated with name '_freeType_count_65536_178'
                                   3028 ;d                         Allocated with name '_freeType_d_65536_178'
                                   3029 ;------------------------------------------------------------
                                   3030 ;	ecen4330_lcd_v3.c:502: void freeType () {
                                   3031 ;	-----------------------------------------
                                   3032 ;	 function freeType
                                   3033 ;	-----------------------------------------
      000CC1                       3034 _freeType:
                                   3035 ;	ecen4330_lcd_v3.c:503: __xdata uint8_t count = 0;
      000CC1 90r00r0C         [24] 3036 	mov	dptr,#_freeType_count_65536_178
      000CC4 E4               [12] 3037 	clr	a
      000CC5 F0               [24] 3038 	movx	@dptr,a
                                   3039 ;	ecen4330_lcd_v3.c:505: while (1) {
      000CC6                       3040 00105$:
                                   3041 ;	ecen4330_lcd_v3.c:508: if (count == 8) {
      000CC6 90r00r0C         [24] 3042 	mov	dptr,#_freeType_count_65536_178
      000CC9 E0               [24] 3043 	movx	a,@dptr
      000CCA FF               [12] 3044 	mov	r7,a
      000CCB BF 08 0D         [24] 3045 	cjne	r7,#0x08,00102$
                                   3046 ;	ecen4330_lcd_v3.c:510: count = 0;
      000CCE 90r00r0C         [24] 3047 	mov	dptr,#_freeType_count_65536_178
      000CD1 E4               [12] 3048 	clr	a
      000CD2 F0               [24] 3049 	movx	@dptr,a
                                   3050 ;	ecen4330_lcd_v3.c:511: write(d);
      000CD3 75 82 0A         [24] 3051 	mov	dpl,#0x0a
      000CD6 12r0BrDD         [24] 3052 	lcall	_write
      000CD9 80 06            [24] 3053 	sjmp	00103$
      000CDB                       3054 00102$:
                                   3055 ;	ecen4330_lcd_v3.c:514: d = keyDetect();
      000CDB 12r0CrEA         [24] 3056 	lcall	_keyDetect
                                   3057 ;	ecen4330_lcd_v3.c:515: write(d);
      000CDE 12r0BrDD         [24] 3058 	lcall	_write
      000CE1                       3059 00103$:
                                   3060 ;	ecen4330_lcd_v3.c:518: count++;
      000CE1 90r00r0C         [24] 3061 	mov	dptr,#_freeType_count_65536_178
      000CE4 E0               [24] 3062 	movx	a,@dptr
      000CE5 24 01            [12] 3063 	add	a,#0x01
      000CE7 F0               [24] 3064 	movx	@dptr,a
                                   3065 ;	ecen4330_lcd_v3.c:520: }
      000CE8 80 DC            [24] 3066 	sjmp	00105$
                                   3067 ;------------------------------------------------------------
                                   3068 ;Allocation info for local variables in function 'keyDetect'
                                   3069 ;------------------------------------------------------------
                                   3070 ;	ecen4330_lcd_v3.c:527: uint8_t keyDetect () {
                                   3071 ;	-----------------------------------------
                                   3072 ;	 function keyDetect
                                   3073 ;	-----------------------------------------
      000CEA                       3074 _keyDetect:
                                   3075 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xF0;
      000CEA 75 90 F0         [24] 3076 	mov	_P1,#0xf0
                                   3077 ;	ecen4330_lcd_v3.c:529: do
      000CED                       3078 00101$:
                                   3079 ;	ecen4330_lcd_v3.c:531: __KEYPAD_PORT__ = 0xF0;
      000CED 75 90 F0         [24] 3080 	mov	_P1,#0xf0
                                   3081 ;	ecen4330_lcd_v3.c:532: colloc = __KEYPAD_PORT__;
      000CF0 85 90*00         [24] 3082 	mov	_colloc,_P1
                                   3083 ;	ecen4330_lcd_v3.c:533: colloc&= 0xF0;
      000CF3 53*00 F0         [24] 3084 	anl	_colloc,#0xf0
                                   3085 ;	ecen4330_lcd_v3.c:534: } while (colloc != 0xF0);
      000CF6 74 F0            [12] 3086 	mov	a,#0xf0
      000CF8 B5*00 F2         [24] 3087 	cjne	a,_colloc,00101$
                                   3088 ;	ecen4330_lcd_v3.c:538: do
      000CFB                       3089 00104$:
                                   3090 ;	ecen4330_lcd_v3.c:540: delay(20);
      000CFB 90 00 14         [24] 3091 	mov	dptr,#0x0014
      000CFE 12r00r21         [24] 3092 	lcall	_delay
                                   3093 ;	ecen4330_lcd_v3.c:541: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D01 E5 90            [12] 3094 	mov	a,_P1
      000D03 54 F0            [12] 3095 	anl	a,#0xf0
      000D05 F5*00            [12] 3096 	mov	_colloc,a
                                   3097 ;	ecen4330_lcd_v3.c:542: } while (colloc == 0xF0);
      000D07 74 F0            [12] 3098 	mov	a,#0xf0
      000D09 B5*00 02         [24] 3099 	cjne	a,_colloc,00178$
      000D0C 80 ED            [24] 3100 	sjmp	00104$
      000D0E                       3101 00178$:
                                   3102 ;	ecen4330_lcd_v3.c:544: delay(1);
      000D0E 90 00 01         [24] 3103 	mov	dptr,#0x0001
      000D11 12r00r21         [24] 3104 	lcall	_delay
                                   3105 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D14 E5 90            [12] 3106 	mov	a,_P1
      000D16 54 F0            [12] 3107 	anl	a,#0xf0
      000D18 F5*00            [12] 3108 	mov	_colloc,a
                                   3109 ;	ecen4330_lcd_v3.c:546: } while (colloc == 0xF0);
      000D1A 74 F0            [12] 3110 	mov	a,#0xf0
      000D1C B5*00 02         [24] 3111 	cjne	a,_colloc,00179$
      000D1F 80 DA            [24] 3112 	sjmp	00104$
      000D21                       3113 00179$:
                                   3114 ;	ecen4330_lcd_v3.c:548: while (1)
      000D21                       3115 00119$:
                                   3116 ;	ecen4330_lcd_v3.c:550: __KEYPAD_PORT__= 0xFE;
      000D21 75 90 FE         [24] 3117 	mov	_P1,#0xfe
                                   3118 ;	ecen4330_lcd_v3.c:551: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D24 E5 90            [12] 3119 	mov	a,_P1
      000D26 54 F0            [12] 3120 	anl	a,#0xf0
      000D28 F5*00            [12] 3121 	mov	_colloc,a
                                   3122 ;	ecen4330_lcd_v3.c:552: if (colloc != 0xF0)
      000D2A 74 F0            [12] 3123 	mov	a,#0xf0
      000D2C B5*00 02         [24] 3124 	cjne	a,_colloc,00180$
      000D2F 80 05            [24] 3125 	sjmp	00111$
      000D31                       3126 00180$:
                                   3127 ;	ecen4330_lcd_v3.c:554: rowloc = 0;
      000D31 75*01 00         [24] 3128 	mov	_rowloc,#0x00
                                   3129 ;	ecen4330_lcd_v3.c:555: break;
      000D34 80 3D            [24] 3130 	sjmp	00120$
      000D36                       3131 00111$:
                                   3132 ;	ecen4330_lcd_v3.c:558: __KEYPAD_PORT__ = 0xFD;
      000D36 75 90 FD         [24] 3133 	mov	_P1,#0xfd
                                   3134 ;	ecen4330_lcd_v3.c:559: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D39 E5 90            [12] 3135 	mov	a,_P1
      000D3B 54 F0            [12] 3136 	anl	a,#0xf0
      000D3D F5*00            [12] 3137 	mov	_colloc,a
                                   3138 ;	ecen4330_lcd_v3.c:560: if (colloc != 0xF0)
      000D3F 74 F0            [12] 3139 	mov	a,#0xf0
      000D41 B5*00 02         [24] 3140 	cjne	a,_colloc,00181$
      000D44 80 05            [24] 3141 	sjmp	00113$
      000D46                       3142 00181$:
                                   3143 ;	ecen4330_lcd_v3.c:562: rowloc = 1;
      000D46 75*01 01         [24] 3144 	mov	_rowloc,#0x01
                                   3145 ;	ecen4330_lcd_v3.c:563: break;
      000D49 80 28            [24] 3146 	sjmp	00120$
      000D4B                       3147 00113$:
                                   3148 ;	ecen4330_lcd_v3.c:566: __KEYPAD_PORT__ = 0xFB;
      000D4B 75 90 FB         [24] 3149 	mov	_P1,#0xfb
                                   3150 ;	ecen4330_lcd_v3.c:567: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D4E E5 90            [12] 3151 	mov	a,_P1
      000D50 54 F0            [12] 3152 	anl	a,#0xf0
      000D52 F5*00            [12] 3153 	mov	_colloc,a
                                   3154 ;	ecen4330_lcd_v3.c:568: if (colloc != 0xF0)
      000D54 74 F0            [12] 3155 	mov	a,#0xf0
      000D56 B5*00 02         [24] 3156 	cjne	a,_colloc,00182$
      000D59 80 05            [24] 3157 	sjmp	00115$
      000D5B                       3158 00182$:
                                   3159 ;	ecen4330_lcd_v3.c:570: rowloc = 2;
      000D5B 75*01 02         [24] 3160 	mov	_rowloc,#0x02
                                   3161 ;	ecen4330_lcd_v3.c:571: break;
      000D5E 80 13            [24] 3162 	sjmp	00120$
      000D60                       3163 00115$:
                                   3164 ;	ecen4330_lcd_v3.c:574: __KEYPAD_PORT__ = 0xF7;
      000D60 75 90 F7         [24] 3165 	mov	_P1,#0xf7
                                   3166 ;	ecen4330_lcd_v3.c:575: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D63 E5 90            [12] 3167 	mov	a,_P1
      000D65 54 F0            [12] 3168 	anl	a,#0xf0
      000D67 F5*00            [12] 3169 	mov	_colloc,a
                                   3170 ;	ecen4330_lcd_v3.c:576: if (colloc != 0xF0)
      000D69 74 F0            [12] 3171 	mov	a,#0xf0
      000D6B B5*00 02         [24] 3172 	cjne	a,_colloc,00183$
      000D6E 80 B1            [24] 3173 	sjmp	00119$
      000D70                       3174 00183$:
                                   3175 ;	ecen4330_lcd_v3.c:578: rowloc = 3;
      000D70 75*01 03         [24] 3176 	mov	_rowloc,#0x03
                                   3177 ;	ecen4330_lcd_v3.c:579: break;
      000D73                       3178 00120$:
                                   3179 ;	ecen4330_lcd_v3.c:583: if (colloc == 0xE0)
      000D73 74 E0            [12] 3180 	mov	a,#0xe0
      000D75 B5*00 15         [24] 3181 	cjne	a,_colloc,00128$
                                   3182 ;	ecen4330_lcd_v3.c:585: return (keypad[rowloc][0]);
      000D78 E5*01            [12] 3183 	mov	a,_rowloc
      000D7A 75 F0 04         [24] 3184 	mov	b,#0x04
      000D7D A4               [48] 3185 	mul	ab
      000D7E 24rFB            [12] 3186 	add	a,#_keypad
      000D80 F5 82            [12] 3187 	mov	dpl,a
      000D82 74s04            [12] 3188 	mov	a,#(_keypad >> 8)
      000D84 35 F0            [12] 3189 	addc	a,b
      000D86 F5 83            [12] 3190 	mov	dph,a
      000D88 E4               [12] 3191 	clr	a
      000D89 93               [24] 3192 	movc	a,@a+dptr
      000D8A F5 82            [12] 3193 	mov	dpl,a
      000D8C 22               [24] 3194 	ret
      000D8D                       3195 00128$:
                                   3196 ;	ecen4330_lcd_v3.c:587: else if (colloc == 0xD0)
      000D8D 74 D0            [12] 3197 	mov	a,#0xd0
      000D8F B5*00 18         [24] 3198 	cjne	a,_colloc,00125$
                                   3199 ;	ecen4330_lcd_v3.c:589: return (keypad[rowloc][1]);
      000D92 E5*01            [12] 3200 	mov	a,_rowloc
      000D94 75 F0 04         [24] 3201 	mov	b,#0x04
      000D97 A4               [48] 3202 	mul	ab
      000D98 24rFB            [12] 3203 	add	a,#_keypad
      000D9A FE               [12] 3204 	mov	r6,a
      000D9B 74s04            [12] 3205 	mov	a,#(_keypad >> 8)
      000D9D 35 F0            [12] 3206 	addc	a,b
      000D9F FF               [12] 3207 	mov	r7,a
      000DA0 8E 82            [24] 3208 	mov	dpl,r6
      000DA2 8F 83            [24] 3209 	mov	dph,r7
      000DA4 A3               [24] 3210 	inc	dptr
      000DA5 E4               [12] 3211 	clr	a
      000DA6 93               [24] 3212 	movc	a,@a+dptr
      000DA7 F5 82            [12] 3213 	mov	dpl,a
      000DA9 22               [24] 3214 	ret
      000DAA                       3215 00125$:
                                   3216 ;	ecen4330_lcd_v3.c:591: else if (colloc == 0xB0)
      000DAA 74 B0            [12] 3217 	mov	a,#0xb0
      000DAC B5*00 19         [24] 3218 	cjne	a,_colloc,00122$
                                   3219 ;	ecen4330_lcd_v3.c:593: return (keypad[rowloc][2]);
      000DAF E5*01            [12] 3220 	mov	a,_rowloc
      000DB1 75 F0 04         [24] 3221 	mov	b,#0x04
      000DB4 A4               [48] 3222 	mul	ab
      000DB5 24rFB            [12] 3223 	add	a,#_keypad
      000DB7 FE               [12] 3224 	mov	r6,a
      000DB8 74s04            [12] 3225 	mov	a,#(_keypad >> 8)
      000DBA 35 F0            [12] 3226 	addc	a,b
      000DBC FF               [12] 3227 	mov	r7,a
      000DBD 8E 82            [24] 3228 	mov	dpl,r6
      000DBF 8F 83            [24] 3229 	mov	dph,r7
      000DC1 A3               [24] 3230 	inc	dptr
      000DC2 A3               [24] 3231 	inc	dptr
      000DC3 E4               [12] 3232 	clr	a
      000DC4 93               [24] 3233 	movc	a,@a+dptr
      000DC5 F5 82            [12] 3234 	mov	dpl,a
      000DC7 22               [24] 3235 	ret
      000DC8                       3236 00122$:
                                   3237 ;	ecen4330_lcd_v3.c:597: return (keypad[rowloc][3]);
      000DC8 E5*01            [12] 3238 	mov	a,_rowloc
      000DCA 75 F0 04         [24] 3239 	mov	b,#0x04
      000DCD A4               [48] 3240 	mul	ab
      000DCE 24rFB            [12] 3241 	add	a,#_keypad
      000DD0 FE               [12] 3242 	mov	r6,a
      000DD1 74s04            [12] 3243 	mov	a,#(_keypad >> 8)
      000DD3 35 F0            [12] 3244 	addc	a,b
      000DD5 FF               [12] 3245 	mov	r7,a
      000DD6 8E 82            [24] 3246 	mov	dpl,r6
      000DD8 8F 83            [24] 3247 	mov	dph,r7
      000DDA A3               [24] 3248 	inc	dptr
      000DDB A3               [24] 3249 	inc	dptr
      000DDC A3               [24] 3250 	inc	dptr
      000DDD E4               [12] 3251 	clr	a
      000DDE 93               [24] 3252 	movc	a,@a+dptr
                                   3253 ;	ecen4330_lcd_v3.c:599: }
      000DDF F5 82            [12] 3254 	mov	dpl,a
      000DE1 22               [24] 3255 	ret
                                   3256 ;------------------------------------------------------------
                                   3257 ;Allocation info for local variables in function 'reverse'
                                   3258 ;------------------------------------------------------------
                                   3259 ;d                         Allocated to registers r7 
                                   3260 ;rev                       Allocated with name '_reverse_rev_65536_196'
                                   3261 ;val                       Allocated with name '_reverse_val_65536_196'
                                   3262 ;------------------------------------------------------------
                                   3263 ;	ecen4330_lcd_v3.c:601: uint16_t reverse (uint8_t d) {
                                   3264 ;	-----------------------------------------
                                   3265 ;	 function reverse
                                   3266 ;	-----------------------------------------
      000DE2                       3267 _reverse:
      000DE2 AF 82            [24] 3268 	mov	r7,dpl
                                   3269 ;	ecen4330_lcd_v3.c:602: __xdata uint16_t rev = 0;
      000DE4 90r00r0D         [24] 3270 	mov	dptr,#_reverse_rev_65536_196
      000DE7 E4               [12] 3271 	clr	a
      000DE8 F0               [24] 3272 	movx	@dptr,a
      000DE9 A3               [24] 3273 	inc	dptr
      000DEA F0               [24] 3274 	movx	@dptr,a
                                   3275 ;	ecen4330_lcd_v3.c:604: while (d >= 1) {
      000DEB                       3276 00101$:
      000DEB BF 01 00         [24] 3277 	cjne	r7,#0x01,00114$
      000DEE                       3278 00114$:
      000DEE 40 63            [24] 3279 	jc	00103$
                                   3280 ;	ecen4330_lcd_v3.c:606: val = d%10;
      000DF0 8F 05            [24] 3281 	mov	ar5,r7
      000DF2 7E 00            [12] 3282 	mov	r6,#0x00
      000DF4 75*00 0A         [24] 3283 	mov	__modsint_PARM_2,#0x0a
                                   3284 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DF7 8E*01            [24] 3285 	mov	(__modsint_PARM_2 + 1),r6
      000DF9 8D 82            [24] 3286 	mov	dpl,r5
      000DFB 8E 83            [24] 3287 	mov	dph,r6
      000DFD C0 06            [24] 3288 	push	ar6
      000DFF C0 05            [24] 3289 	push	ar5
      000E01 12r00r00         [24] 3290 	lcall	__modsint
      000E04 AB 82            [24] 3291 	mov	r3,dpl
      000E06 AC 83            [24] 3292 	mov	r4,dph
      000E08 D0 05            [24] 3293 	pop	ar5
      000E0A D0 06            [24] 3294 	pop	ar6
      000E0C 90r00r0F         [24] 3295 	mov	dptr,#_reverse_val_65536_196
      000E0F EB               [12] 3296 	mov	a,r3
      000E10 F0               [24] 3297 	movx	@dptr,a
      000E11 EC               [12] 3298 	mov	a,r4
      000E12 A3               [24] 3299 	inc	dptr
      000E13 F0               [24] 3300 	movx	@dptr,a
                                   3301 ;	ecen4330_lcd_v3.c:607: d = d/10;
      000E14 75*00 0A         [24] 3302 	mov	__divsint_PARM_2,#0x0a
      000E17 75*01 00         [24] 3303 	mov	(__divsint_PARM_2 + 1),#0x00
      000E1A 8D 82            [24] 3304 	mov	dpl,r5
      000E1C 8E 83            [24] 3305 	mov	dph,r6
      000E1E 12r00r00         [24] 3306 	lcall	__divsint
      000E21 AD 82            [24] 3307 	mov	r5,dpl
      000E23 8D 07            [24] 3308 	mov	ar7,r5
                                   3309 ;	ecen4330_lcd_v3.c:608: rev = rev * 10 + val;
      000E25 90r00r0D         [24] 3310 	mov	dptr,#_reverse_rev_65536_196
      000E28 E0               [24] 3311 	movx	a,@dptr
      000E29 FD               [12] 3312 	mov	r5,a
      000E2A A3               [24] 3313 	inc	dptr
      000E2B E0               [24] 3314 	movx	a,@dptr
      000E2C FE               [12] 3315 	mov	r6,a
      000E2D 8D*00            [24] 3316 	mov	__mulint_PARM_2,r5
      000E2F 8E*01            [24] 3317 	mov	(__mulint_PARM_2 + 1),r6
      000E31 90 00 0A         [24] 3318 	mov	dptr,#0x000a
      000E34 C0 07            [24] 3319 	push	ar7
      000E36 12r00r00         [24] 3320 	lcall	__mulint
      000E39 AD 82            [24] 3321 	mov	r5,dpl
      000E3B AE 83            [24] 3322 	mov	r6,dph
      000E3D D0 07            [24] 3323 	pop	ar7
      000E3F 90r00r0F         [24] 3324 	mov	dptr,#_reverse_val_65536_196
      000E42 E0               [24] 3325 	movx	a,@dptr
      000E43 FB               [12] 3326 	mov	r3,a
      000E44 A3               [24] 3327 	inc	dptr
      000E45 E0               [24] 3328 	movx	a,@dptr
      000E46 FC               [12] 3329 	mov	r4,a
      000E47 90r00r0D         [24] 3330 	mov	dptr,#_reverse_rev_65536_196
      000E4A EB               [12] 3331 	mov	a,r3
      000E4B 2D               [12] 3332 	add	a,r5
      000E4C F0               [24] 3333 	movx	@dptr,a
      000E4D EC               [12] 3334 	mov	a,r4
      000E4E 3E               [12] 3335 	addc	a,r6
      000E4F A3               [24] 3336 	inc	dptr
      000E50 F0               [24] 3337 	movx	@dptr,a
      000E51 80 98            [24] 3338 	sjmp	00101$
      000E53                       3339 00103$:
                                   3340 ;	ecen4330_lcd_v3.c:610: return rev;
      000E53 90r00r0D         [24] 3341 	mov	dptr,#_reverse_rev_65536_196
      000E56 E0               [24] 3342 	movx	a,@dptr
      000E57 FE               [12] 3343 	mov	r6,a
      000E58 A3               [24] 3344 	inc	dptr
      000E59 E0               [24] 3345 	movx	a,@dptr
                                   3346 ;	ecen4330_lcd_v3.c:611: }
      000E5A 8E 82            [24] 3347 	mov	dpl,r6
      000E5C F5 83            [12] 3348 	mov	dph,a
      000E5E 22               [24] 3349 	ret
                                   3350 ;------------------------------------------------------------
                                   3351 ;Allocation info for local variables in function 'asciiToDec'
                                   3352 ;------------------------------------------------------------
                                   3353 ;d                         Allocated with name '_asciiToDec_d_65536_198'
                                   3354 ;val                       Allocated with name '_asciiToDec_val_65536_199'
                                   3355 ;id                        Allocated with name '_asciiToDec_id_65536_199'
                                   3356 ;------------------------------------------------------------
                                   3357 ;	ecen4330_lcd_v3.c:618: void asciiToDec (__xdata uint8_t d) {
                                   3358 ;	-----------------------------------------
                                   3359 ;	 function asciiToDec
                                   3360 ;	-----------------------------------------
      000E5F                       3361 _asciiToDec:
      000E5F E5 82            [12] 3362 	mov	a,dpl
      000E61 90r00r11         [24] 3363 	mov	dptr,#_asciiToDec_d_65536_198
      000E64 F0               [24] 3364 	movx	@dptr,a
                                   3365 ;	ecen4330_lcd_v3.c:621: id = reverse(d);
      000E65 E0               [24] 3366 	movx	a,@dptr
      000E66 F5 82            [12] 3367 	mov	dpl,a
      000E68 12r0DrE2         [24] 3368 	lcall	_reverse
      000E6B E5 82            [12] 3369 	mov	a,dpl
      000E6D 85 83 F0         [24] 3370 	mov	b,dph
      000E70 90r00r13         [24] 3371 	mov	dptr,#_asciiToDec_id_65536_199
      000E73 F0               [24] 3372 	movx	@dptr,a
      000E74 E5 F0            [12] 3373 	mov	a,b
      000E76 A3               [24] 3374 	inc	dptr
      000E77 F0               [24] 3375 	movx	@dptr,a
                                   3376 ;	ecen4330_lcd_v3.c:622: while (id >= 1){
      000E78                       3377 00101$:
      000E78 90r00r13         [24] 3378 	mov	dptr,#_asciiToDec_id_65536_199
      000E7B E0               [24] 3379 	movx	a,@dptr
      000E7C FE               [12] 3380 	mov	r6,a
      000E7D A3               [24] 3381 	inc	dptr
      000E7E E0               [24] 3382 	movx	a,@dptr
      000E7F FF               [12] 3383 	mov	r7,a
      000E80 C3               [12] 3384 	clr	c
      000E81 EE               [12] 3385 	mov	a,r6
      000E82 94 01            [12] 3386 	subb	a,#0x01
      000E84 EF               [12] 3387 	mov	a,r7
      000E85 94 00            [12] 3388 	subb	a,#0x00
      000E87 40 42            [24] 3389 	jc	00104$
                                   3390 ;	ecen4330_lcd_v3.c:624: val = id % 10;
      000E89 75*00 0A         [24] 3391 	mov	__moduint_PARM_2,#0x0a
      000E8C 75*01 00         [24] 3392 	mov	(__moduint_PARM_2 + 1),#0x00
      000E8F 8E 82            [24] 3393 	mov	dpl,r6
      000E91 8F 83            [24] 3394 	mov	dph,r7
      000E93 C0 07            [24] 3395 	push	ar7
      000E95 C0 06            [24] 3396 	push	ar6
      000E97 12r00r00         [24] 3397 	lcall	__moduint
      000E9A AC 82            [24] 3398 	mov	r4,dpl
      000E9C D0 06            [24] 3399 	pop	ar6
      000E9E D0 07            [24] 3400 	pop	ar7
      000EA0 90r00r12         [24] 3401 	mov	dptr,#_asciiToDec_val_65536_199
      000EA3 EC               [12] 3402 	mov	a,r4
      000EA4 F0               [24] 3403 	movx	@dptr,a
                                   3404 ;	ecen4330_lcd_v3.c:625: id = id/10;
      000EA5 75*00 0A         [24] 3405 	mov	__divuint_PARM_2,#0x0a
      000EA8 75*01 00         [24] 3406 	mov	(__divuint_PARM_2 + 1),#0x00
      000EAB 8E 82            [24] 3407 	mov	dpl,r6
      000EAD 8F 83            [24] 3408 	mov	dph,r7
      000EAF 12r00r00         [24] 3409 	lcall	__divuint
      000EB2 AE 82            [24] 3410 	mov	r6,dpl
      000EB4 AF 83            [24] 3411 	mov	r7,dph
      000EB6 90r00r13         [24] 3412 	mov	dptr,#_asciiToDec_id_65536_199
      000EB9 EE               [12] 3413 	mov	a,r6
      000EBA F0               [24] 3414 	movx	@dptr,a
      000EBB EF               [12] 3415 	mov	a,r7
      000EBC A3               [24] 3416 	inc	dptr
      000EBD F0               [24] 3417 	movx	@dptr,a
                                   3418 ;	ecen4330_lcd_v3.c:626: write(val + '0');
      000EBE 90r00r12         [24] 3419 	mov	dptr,#_asciiToDec_val_65536_199
      000EC1 E0               [24] 3420 	movx	a,@dptr
      000EC2 24 30            [12] 3421 	add	a,#0x30
      000EC4 F5 82            [12] 3422 	mov	dpl,a
      000EC6 12r0BrDD         [24] 3423 	lcall	_write
      000EC9 80 AD            [24] 3424 	sjmp	00101$
      000ECB                       3425 00104$:
                                   3426 ;	ecen4330_lcd_v3.c:629: }
      000ECB 22               [24] 3427 	ret
                                   3428 ;------------------------------------------------------------
                                   3429 ;Allocation info for local variables in function 'asciiToHex'
                                   3430 ;------------------------------------------------------------
                                   3431 ;d                         Allocated to registers r7 
                                   3432 ;val                       Allocated to registers r2 
                                   3433 ;store                     Allocated with name '_asciiToHex_store_65536_202'
                                   3434 ;i                         Allocated to registers r6 
                                   3435 ;------------------------------------------------------------
                                   3436 ;	ecen4330_lcd_v3.c:636: void asciiToHex (uint8_t d) {
                                   3437 ;	-----------------------------------------
                                   3438 ;	 function asciiToHex
                                   3439 ;	-----------------------------------------
      000ECC                       3440 _asciiToHex:
      000ECC AF 82            [24] 3441 	mov	r7,dpl
                                   3442 ;	ecen4330_lcd_v3.c:640: store[0] = 0;
      000ECE 75*48 00         [24] 3443 	mov	_asciiToHex_store_65536_202,#0x00
                                   3444 ;	ecen4330_lcd_v3.c:641: store[1] = 0;
      000ED1 75*49 00         [24] 3445 	mov	(_asciiToHex_store_65536_202 + 0x0001),#0x00
                                   3446 ;	ecen4330_lcd_v3.c:642: while (d >= 1) {
      000ED4 7E 00            [12] 3447 	mov	r6,#0x00
      000ED6                       3448 00104$:
      000ED6 BF 01 00         [24] 3449 	cjne	r7,#0x01,00122$
      000ED9                       3450 00122$:
      000ED9 40 5A            [24] 3451 	jc	00106$
                                   3452 ;	ecen4330_lcd_v3.c:644: val = d % 16;
      000EDB 8F 04            [24] 3453 	mov	ar4,r7
      000EDD 7D 00            [12] 3454 	mov	r5,#0x00
      000EDF 74 0F            [12] 3455 	mov	a,#0x0f
      000EE1 5C               [12] 3456 	anl	a,r4
      000EE2 FA               [12] 3457 	mov	r2,a
                                   3458 ;	ecen4330_lcd_v3.c:645: d = d/16;
      000EE3 75*00 10         [24] 3459 	mov	__divsint_PARM_2,#0x10
                                   3460 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EE6 8D*01            [24] 3461 	mov	(__divsint_PARM_2 + 1),r5
      000EE8 8C 82            [24] 3462 	mov	dpl,r4
      000EEA 8D 83            [24] 3463 	mov	dph,r5
      000EEC C0 06            [24] 3464 	push	ar6
      000EEE C0 02            [24] 3465 	push	ar2
      000EF0 12r00r00         [24] 3466 	lcall	__divsint
      000EF3 AC 82            [24] 3467 	mov	r4,dpl
      000EF5 D0 02            [24] 3468 	pop	ar2
      000EF7 D0 06            [24] 3469 	pop	ar6
      000EF9 8C 07            [24] 3470 	mov	ar7,r4
                                   3471 ;	ecen4330_lcd_v3.c:646: if (val <= 9) {
      000EFB EA               [12] 3472 	mov	a,r2
      000EFC 24 F6            [12] 3473 	add	a,#0xff - 0x09
      000EFE 40 0C            [24] 3474 	jc	00102$
                                   3475 ;	ecen4330_lcd_v3.c:648: store[i] = val + '0';
      000F00 EE               [12] 3476 	mov	a,r6
      000F01 24r48            [12] 3477 	add	a,#_asciiToHex_store_65536_202
      000F03 F9               [12] 3478 	mov	r1,a
      000F04 8A 05            [24] 3479 	mov	ar5,r2
      000F06 74 30            [12] 3480 	mov	a,#0x30
      000F08 2D               [12] 3481 	add	a,r5
      000F09 F7               [12] 3482 	mov	@r1,a
      000F0A 80 26            [24] 3483 	sjmp	00103$
      000F0C                       3484 00102$:
                                   3485 ;	ecen4330_lcd_v3.c:651: store[i] = (val%10) + 'A';
      000F0C EE               [12] 3486 	mov	a,r6
      000F0D 24r48            [12] 3487 	add	a,#_asciiToHex_store_65536_202
      000F0F F9               [12] 3488 	mov	r1,a
      000F10 7D 00            [12] 3489 	mov	r5,#0x00
      000F12 75*00 0A         [24] 3490 	mov	__modsint_PARM_2,#0x0a
                                   3491 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F15 8D*01            [24] 3492 	mov	(__modsint_PARM_2 + 1),r5
      000F17 8A 82            [24] 3493 	mov	dpl,r2
      000F19 8D 83            [24] 3494 	mov	dph,r5
      000F1B C0 07            [24] 3495 	push	ar7
      000F1D C0 06            [24] 3496 	push	ar6
      000F1F C0 01            [24] 3497 	push	ar1
      000F21 12r00r00         [24] 3498 	lcall	__modsint
      000F24 AC 82            [24] 3499 	mov	r4,dpl
      000F26 AD 83            [24] 3500 	mov	r5,dph
      000F28 D0 01            [24] 3501 	pop	ar1
      000F2A D0 06            [24] 3502 	pop	ar6
      000F2C D0 07            [24] 3503 	pop	ar7
      000F2E 74 41            [12] 3504 	mov	a,#0x41
      000F30 2C               [12] 3505 	add	a,r4
      000F31 F7               [12] 3506 	mov	@r1,a
      000F32                       3507 00103$:
                                   3508 ;	ecen4330_lcd_v3.c:653: i++;
      000F32 0E               [12] 3509 	inc	r6
      000F33 80 A1            [24] 3510 	sjmp	00104$
      000F35                       3511 00106$:
                                   3512 ;	ecen4330_lcd_v3.c:655: write(store[1]);
      000F35 85*49 82         [24] 3513 	mov	dpl,(_asciiToHex_store_65536_202 + 0x0001)
      000F38 12r0BrDD         [24] 3514 	lcall	_write
                                   3515 ;	ecen4330_lcd_v3.c:656: write(store[0]);
      000F3B 85*48 82         [24] 3516 	mov	dpl,_asciiToHex_store_65536_202
                                   3517 ;	ecen4330_lcd_v3.c:657: }
      000F3E 02r0BrDD         [24] 3518 	ljmp	_write
                                   3519 ;------------------------------------------------------------
                                   3520 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3521 ;------------------------------------------------------------
                                   3522 ;d                         Allocated to registers r7 
                                   3523 ;------------------------------------------------------------
                                   3524 ;	ecen4330_lcd_v3.c:665: uint8_t convertAsciiHex(uint8_t d) {
                                   3525 ;	-----------------------------------------
                                   3526 ;	 function convertAsciiHex
                                   3527 ;	-----------------------------------------
      000F41                       3528 _convertAsciiHex:
                                   3529 ;	ecen4330_lcd_v3.c:666: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F41 E5 82            [12] 3530 	mov	a,dpl
      000F43 FF               [12] 3531 	mov	r7,a
      000F44 24 C6            [12] 3532 	add	a,#0xff - 0x39
      000F46 92*01            [24] 3533 	mov	_convertAsciiHex_sloc0_1_0,c
      000F48 40 08            [24] 3534 	jc	00103$
      000F4A 8F 06            [24] 3535 	mov	ar6,r7
      000F4C EE               [12] 3536 	mov	a,r6
      000F4D 24 D0            [12] 3537 	add	a,#0xd0
      000F4F FE               [12] 3538 	mov	r6,a
      000F50 80 04            [24] 3539 	sjmp	00104$
      000F52                       3540 00103$:
      000F52 74 C9            [12] 3541 	mov	a,#0xc9
      000F54 2F               [12] 3542 	add	a,r7
      000F55 FE               [12] 3543 	mov	r6,a
      000F56                       3544 00104$:
      000F56 8E 82            [24] 3545 	mov	dpl,r6
                                   3546 ;	ecen4330_lcd_v3.c:667: }
      000F58 22               [24] 3547 	ret
                                   3548 ;------------------------------------------------------------
                                   3549 ;Allocation info for local variables in function 'writeSomeLines'
                                   3550 ;------------------------------------------------------------
                                   3551 ;	ecen4330_lcd_v3.c:673: void writeSomeLines () {
                                   3552 ;	-----------------------------------------
                                   3553 ;	 function writeSomeLines
                                   3554 ;	-----------------------------------------
      000F59                       3555 _writeSomeLines:
                                   3556 ;	ecen4330_lcd_v3.c:674: fillScreen(RED);
      000F59 90 F8 00         [24] 3557 	mov	dptr,#0xf800
      000F5C 12r08r44         [24] 3558 	lcall	_fillScreen
                                   3559 ;	ecen4330_lcd_v3.c:676: delay(20);
      000F5F 90 00 14         [24] 3560 	mov	dptr,#0x0014
      000F62 12r00r21         [24] 3561 	lcall	_delay
                                   3562 ;	ecen4330_lcd_v3.c:677: fillScreen(GREEN);
      000F65 90 07 E0         [24] 3563 	mov	dptr,#0x07e0
      000F68 12r08r44         [24] 3564 	lcall	_fillScreen
                                   3565 ;	ecen4330_lcd_v3.c:679: delay(20);
      000F6B 90 00 14         [24] 3566 	mov	dptr,#0x0014
      000F6E 12r00r21         [24] 3567 	lcall	_delay
                                   3568 ;	ecen4330_lcd_v3.c:681: setRotation(0);
      000F71 75 82 00         [24] 3569 	mov	dpl,#0x00
      000F74 12r00rE8         [24] 3570 	lcall	_setRotation
                                   3571 ;	ecen4330_lcd_v3.c:682: fillScreen(BLACK);
      000F77 90 00 00         [24] 3572 	mov	dptr,#0x0000
      000F7A 12r08r44         [24] 3573 	lcall	_fillScreen
                                   3574 ;	ecen4330_lcd_v3.c:683: testCircles(20, RED);
      000F7D 75*2C 00         [24] 3575 	mov	_testCircles_PARM_2,#0x00
      000F80 75*2D F8         [24] 3576 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F83 75 82 14         [24] 3577 	mov	dpl,#0x14
      000F86 12r06r9D         [24] 3578 	lcall	_testCircles
                                   3579 ;	ecen4330_lcd_v3.c:684: delay(100);
      000F89 90 00 64         [24] 3580 	mov	dptr,#0x0064
      000F8C 12r00r21         [24] 3581 	lcall	_delay
                                   3582 ;	ecen4330_lcd_v3.c:685: fillScreen(BLACK);
      000F8F 90 00 00         [24] 3583 	mov	dptr,#0x0000
      000F92 12r08r44         [24] 3584 	lcall	_fillScreen
                                   3585 ;	ecen4330_lcd_v3.c:686: setTextSize(5);
      000F95 75 82 05         [24] 3586 	mov	dpl,#0x05
      000F98 12r00rD0         [24] 3587 	lcall	_setTextSize
                                   3588 ;	ecen4330_lcd_v3.c:687: setTextColor(CYAN, BLACK);
      000F9B E4               [12] 3589 	clr	a
      000F9C F5*00            [12] 3590 	mov	_setTextColor_PARM_2,a
      000F9E F5*01            [12] 3591 	mov	(_setTextColor_PARM_2 + 1),a
      000FA0 90 07 FF         [24] 3592 	mov	dptr,#0x07ff
      000FA3 12r00rC3         [24] 3593 	lcall	_setTextColor
                                   3594 ;	ecen4330_lcd_v3.c:688: LCD_string_write("Welcome\n");
      000FA6 90r05r0B         [24] 3595 	mov	dptr,#___str_0
      000FA9 75 F0 80         [24] 3596 	mov	b,#0x80
      000FAC 12r0Cr4B         [24] 3597 	lcall	_LCD_string_write
                                   3598 ;	ecen4330_lcd_v3.c:689: setTextSize(3);
      000FAF 75 82 03         [24] 3599 	mov	dpl,#0x03
      000FB2 12r00rD0         [24] 3600 	lcall	_setTextSize
                                   3601 ;	ecen4330_lcd_v3.c:690: LCD_string_write("ECEN-4330\n");
      000FB5 90r05r14         [24] 3602 	mov	dptr,#___str_1
      000FB8 75 F0 80         [24] 3603 	mov	b,#0x80
      000FBB 12r0Cr4B         [24] 3604 	lcall	_LCD_string_write
                                   3605 ;	ecen4330_lcd_v3.c:691: LCD_string_write("Rotation 0");
      000FBE 90r05r1F         [24] 3606 	mov	dptr,#___str_2
      000FC1 75 F0 80         [24] 3607 	mov	b,#0x80
      000FC4 12r0Cr4B         [24] 3608 	lcall	_LCD_string_write
                                   3609 ;	ecen4330_lcd_v3.c:692: delay(200);
      000FC7 90 00 C8         [24] 3610 	mov	dptr,#0x00c8
      000FCA 12r00r21         [24] 3611 	lcall	_delay
                                   3612 ;	ecen4330_lcd_v3.c:693: fillScreen(BLACK);
      000FCD 90 00 00         [24] 3613 	mov	dptr,#0x0000
      000FD0 12r08r44         [24] 3614 	lcall	_fillScreen
                                   3615 ;	ecen4330_lcd_v3.c:694: setRotation(1);
      000FD3 75 82 01         [24] 3616 	mov	dpl,#0x01
      000FD6 12r00rE8         [24] 3617 	lcall	_setRotation
                                   3618 ;	ecen4330_lcd_v3.c:695: setCursor(0,0);
      000FD9 E4               [12] 3619 	clr	a
      000FDA F5*00            [12] 3620 	mov	_setCursor_PARM_2,a
      000FDC F5*01            [12] 3621 	mov	(_setCursor_PARM_2 + 1),a
      000FDE 90 00 00         [24] 3622 	mov	dptr,#0x0000
      000FE1 12r00rB6         [24] 3623 	lcall	_setCursor
                                   3624 ;	ecen4330_lcd_v3.c:696: LCD_string_write("Rotation 1");
      000FE4 90r05r2A         [24] 3625 	mov	dptr,#___str_3
      000FE7 75 F0 80         [24] 3626 	mov	b,#0x80
      000FEA 12r0Cr4B         [24] 3627 	lcall	_LCD_string_write
                                   3628 ;	ecen4330_lcd_v3.c:697: delay(500);
      000FED 90 01 F4         [24] 3629 	mov	dptr,#0x01f4
      000FF0 12r00r21         [24] 3630 	lcall	_delay
                                   3631 ;	ecen4330_lcd_v3.c:698: fillScreen(BLACK);
      000FF3 90 00 00         [24] 3632 	mov	dptr,#0x0000
      000FF6 12r08r44         [24] 3633 	lcall	_fillScreen
                                   3634 ;	ecen4330_lcd_v3.c:699: setRotation(2);
      000FF9 75 82 02         [24] 3635 	mov	dpl,#0x02
      000FFC 12r00rE8         [24] 3636 	lcall	_setRotation
                                   3637 ;	ecen4330_lcd_v3.c:700: setCursor(0,0);
      000FFF E4               [12] 3638 	clr	a
      001000 F5*00            [12] 3639 	mov	_setCursor_PARM_2,a
      001002 F5*01            [12] 3640 	mov	(_setCursor_PARM_2 + 1),a
      001004 90 00 00         [24] 3641 	mov	dptr,#0x0000
      001007 12r00rB6         [24] 3642 	lcall	_setCursor
                                   3643 ;	ecen4330_lcd_v3.c:701: LCD_string_write("Rotation 2");
      00100A 90r05r35         [24] 3644 	mov	dptr,#___str_4
      00100D 75 F0 80         [24] 3645 	mov	b,#0x80
      001010 12r0Cr4B         [24] 3646 	lcall	_LCD_string_write
                                   3647 ;	ecen4330_lcd_v3.c:702: delay(500);
      001013 90 01 F4         [24] 3648 	mov	dptr,#0x01f4
      001016 12r00r21         [24] 3649 	lcall	_delay
                                   3650 ;	ecen4330_lcd_v3.c:703: fillScreen(BLACK);
      001019 90 00 00         [24] 3651 	mov	dptr,#0x0000
      00101C 12r08r44         [24] 3652 	lcall	_fillScreen
                                   3653 ;	ecen4330_lcd_v3.c:704: setRotation(3);
      00101F 75 82 03         [24] 3654 	mov	dpl,#0x03
      001022 12r00rE8         [24] 3655 	lcall	_setRotation
                                   3656 ;	ecen4330_lcd_v3.c:705: setCursor(0,0);
      001025 E4               [12] 3657 	clr	a
      001026 F5*00            [12] 3658 	mov	_setCursor_PARM_2,a
      001028 F5*01            [12] 3659 	mov	(_setCursor_PARM_2 + 1),a
      00102A 90 00 00         [24] 3660 	mov	dptr,#0x0000
      00102D 12r00rB6         [24] 3661 	lcall	_setCursor
                                   3662 ;	ecen4330_lcd_v3.c:706: delay(200);
      001030 90 00 C8         [24] 3663 	mov	dptr,#0x00c8
      001033 12r00r21         [24] 3664 	lcall	_delay
                                   3665 ;	ecen4330_lcd_v3.c:707: LCD_string_write("Rotation 3");
      001036 90r05r40         [24] 3666 	mov	dptr,#___str_5
      001039 75 F0 80         [24] 3667 	mov	b,#0x80
      00103C 12r0Cr4B         [24] 3668 	lcall	_LCD_string_write
                                   3669 ;	ecen4330_lcd_v3.c:708: delay(200);
      00103F 90 00 C8         [24] 3670 	mov	dptr,#0x00c8
                                   3671 ;	ecen4330_lcd_v3.c:709: }
      001042 02r00r21         [24] 3672 	ljmp	_delay
                                   3673 ;------------------------------------------------------------
                                   3674 ;Allocation info for local variables in function 'getAddress'
                                   3675 ;------------------------------------------------------------
                                   3676 ;input                     Allocated with name '_getAddress_input_65536_228'
                                   3677 ;hex                       Allocated with name '_getAddress_hex_65536_228'
                                   3678 ;i                         Allocated with name '_getAddress_i_65536_228'
                                   3679 ;address                   Allocated with name '_getAddress_address_65536_228'
                                   3680 ;------------------------------------------------------------
                                   3681 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3682 ;	-----------------------------------------
                                   3683 ;	 function getAddress
                                   3684 ;	-----------------------------------------
      001045                       3685 _getAddress:
                                   3686 ;	getFunctions.c:16: address = 0;
      001045 90r00r15         [24] 3687 	mov	dptr,#_getAddress_address_65536_228
      001048 E4               [12] 3688 	clr	a
      001049 F0               [24] 3689 	movx	@dptr,a
      00104A A3               [24] 3690 	inc	dptr
      00104B F0               [24] 3691 	movx	@dptr,a
                                   3692 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00104C 7F 00            [12] 3693 	mov	r7,#0x00
      00104E                       3694 00104$:
                                   3695 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      00104E C0 07            [24] 3696 	push	ar7
      001050 12r0CrEA         [24] 3697 	lcall	_keyDetect
                                   3698 ;	getFunctions.c:21: write(input);						// display nibble to user
      001053 AE 82            [24] 3699 	mov  r6,dpl
      001055 C0 06            [24] 3700 	push	ar6
      001057 12r0BrDD         [24] 3701 	lcall	_write
      00105A D0 06            [24] 3702 	pop	ar6
                                   3703 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      00105C 8E 82            [24] 3704 	mov	dpl,r6
      00105E 12r0Fr41         [24] 3705 	lcall	_convertAsciiHex
      001061 AE 82            [24] 3706 	mov	r6,dpl
      001063 D0 07            [24] 3707 	pop	ar7
                                   3708 ;	getFunctions.c:25: address = address | hex;
      001065 90r00r15         [24] 3709 	mov	dptr,#_getAddress_address_65536_228
      001068 E0               [24] 3710 	movx	a,@dptr
      001069 FC               [12] 3711 	mov	r4,a
      00106A A3               [24] 3712 	inc	dptr
      00106B E0               [24] 3713 	movx	a,@dptr
      00106C FD               [12] 3714 	mov	r5,a
      00106D 7B 00            [12] 3715 	mov	r3,#0x00
      00106F 90r00r15         [24] 3716 	mov	dptr,#_getAddress_address_65536_228
      001072 EE               [12] 3717 	mov	a,r6
      001073 4C               [12] 3718 	orl	a,r4
      001074 F0               [24] 3719 	movx	@dptr,a
      001075 EB               [12] 3720 	mov	a,r3
      001076 4D               [12] 3721 	orl	a,r5
      001077 A3               [24] 3722 	inc	dptr
      001078 F0               [24] 3723 	movx	@dptr,a
                                   3724 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      001079 BF 03 02         [24] 3725 	cjne	r7,#0x03,00121$
      00107C 80 1C            [24] 3726 	sjmp	00105$
      00107E                       3727 00121$:
      00107E 90r00r15         [24] 3728 	mov	dptr,#_getAddress_address_65536_228
      001081 E0               [24] 3729 	movx	a,@dptr
      001082 FD               [12] 3730 	mov	r5,a
      001083 A3               [24] 3731 	inc	dptr
      001084 E0               [24] 3732 	movx	a,@dptr
      001085 C4               [12] 3733 	swap	a
      001086 54 F0            [12] 3734 	anl	a,#0xf0
      001088 CD               [12] 3735 	xch	a,r5
      001089 C4               [12] 3736 	swap	a
      00108A CD               [12] 3737 	xch	a,r5
      00108B 6D               [12] 3738 	xrl	a,r5
      00108C CD               [12] 3739 	xch	a,r5
      00108D 54 F0            [12] 3740 	anl	a,#0xf0
      00108F CD               [12] 3741 	xch	a,r5
      001090 6D               [12] 3742 	xrl	a,r5
      001091 FE               [12] 3743 	mov	r6,a
      001092 90r00r15         [24] 3744 	mov	dptr,#_getAddress_address_65536_228
      001095 ED               [12] 3745 	mov	a,r5
      001096 F0               [24] 3746 	movx	@dptr,a
      001097 EE               [12] 3747 	mov	a,r6
      001098 A3               [24] 3748 	inc	dptr
      001099 F0               [24] 3749 	movx	@dptr,a
      00109A                       3750 00105$:
                                   3751 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00109A 0F               [12] 3752 	inc	r7
      00109B BF 04 00         [24] 3753 	cjne	r7,#0x04,00122$
      00109E                       3754 00122$:
      00109E 40 AE            [24] 3755 	jc	00104$
                                   3756 ;	getFunctions.c:28: return address;
      0010A0 90r00r15         [24] 3757 	mov	dptr,#_getAddress_address_65536_228
      0010A3 E0               [24] 3758 	movx	a,@dptr
      0010A4 FE               [12] 3759 	mov	r6,a
      0010A5 A3               [24] 3760 	inc	dptr
      0010A6 E0               [24] 3761 	movx	a,@dptr
                                   3762 ;	getFunctions.c:29: }
      0010A7 8E 82            [24] 3763 	mov	dpl,r6
      0010A9 F5 83            [12] 3764 	mov	dph,a
      0010AB 22               [24] 3765 	ret
                                   3766 ;------------------------------------------------------------
                                   3767 ;Allocation info for local variables in function 'getByte'
                                   3768 ;------------------------------------------------------------
                                   3769 ;input                     Allocated with name '_getByte_input_65536_231'
                                   3770 ;hex                       Allocated with name '_getByte_hex_65536_231'
                                   3771 ;byte                      Allocated with name '_getByte_byte_65536_231'
                                   3772 ;i                         Allocated with name '_getByte_i_65536_231'
                                   3773 ;------------------------------------------------------------
                                   3774 ;	getFunctions.c:36: uint8_t getByte() {
                                   3775 ;	-----------------------------------------
                                   3776 ;	 function getByte
                                   3777 ;	-----------------------------------------
      0010AC                       3778 _getByte:
                                   3779 ;	getFunctions.c:40: byte = 0;
      0010AC 90r00r17         [24] 3780 	mov	dptr,#_getByte_byte_65536_231
      0010AF E4               [12] 3781 	clr	a
      0010B0 F0               [24] 3782 	movx	@dptr,a
                                   3783 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010B1 7F 00            [12] 3784 	mov	r7,#0x00
      0010B3                       3785 00104$:
                                   3786 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      0010B3 C0 07            [24] 3787 	push	ar7
      0010B5 12r0CrEA         [24] 3788 	lcall	_keyDetect
                                   3789 ;	getFunctions.c:45: write(input);						// display nibble to user
      0010B8 AE 82            [24] 3790 	mov  r6,dpl
      0010BA C0 06            [24] 3791 	push	ar6
      0010BC 12r0BrDD         [24] 3792 	lcall	_write
      0010BF D0 06            [24] 3793 	pop	ar6
                                   3794 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      0010C1 8E 82            [24] 3795 	mov	dpl,r6
      0010C3 12r0Fr41         [24] 3796 	lcall	_convertAsciiHex
      0010C6 AE 82            [24] 3797 	mov	r6,dpl
      0010C8 D0 07            [24] 3798 	pop	ar7
                                   3799 ;	getFunctions.c:49: byte = byte | hex;
      0010CA 90r00r17         [24] 3800 	mov	dptr,#_getByte_byte_65536_231
      0010CD E0               [24] 3801 	movx	a,@dptr
      0010CE 4E               [12] 3802 	orl	a,r6
      0010CF F0               [24] 3803 	movx	@dptr,a
                                   3804 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010D0 BF 01 02         [24] 3805 	cjne	r7,#0x01,00121$
      0010D3 80 09            [24] 3806 	sjmp	00105$
      0010D5                       3807 00121$:
      0010D5 90r00r17         [24] 3808 	mov	dptr,#_getByte_byte_65536_231
      0010D8 E0               [24] 3809 	movx	a,@dptr
      0010D9 C4               [12] 3810 	swap	a
      0010DA 54 F0            [12] 3811 	anl	a,#0xf0
      0010DC FE               [12] 3812 	mov	r6,a
      0010DD F0               [24] 3813 	movx	@dptr,a
      0010DE                       3814 00105$:
                                   3815 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010DE 0F               [12] 3816 	inc	r7
      0010DF BF 02 00         [24] 3817 	cjne	r7,#0x02,00122$
      0010E2                       3818 00122$:
      0010E2 40 CF            [24] 3819 	jc	00104$
                                   3820 ;	getFunctions.c:52: return byte;
      0010E4 90r00r17         [24] 3821 	mov	dptr,#_getByte_byte_65536_231
      0010E7 E0               [24] 3822 	movx	a,@dptr
                                   3823 ;	getFunctions.c:53: }
      0010E8 F5 82            [12] 3824 	mov	dpl,a
      0010EA 22               [24] 3825 	ret
                                   3826 ;------------------------------------------------------------
                                   3827 ;Allocation info for local variables in function 'dumpPage'
                                   3828 ;------------------------------------------------------------
                                   3829 ;i                         Allocated with name '_dumpPage_i_65537_236'
                                   3830 ;data                      Allocated to registers r7 
                                   3831 ;ramAddress                Allocated to registers r0 r4 
                                   3832 ;high                      Allocated to registers 
                                   3833 ;low                       Allocated to registers r6 
                                   3834 ;sloc0                     Allocated with name '_dumpPage_sloc0_1_0'
                                   3835 ;sloc1                     Allocated with name '_dumpPage_sloc1_1_0'
                                   3836 ;n                         Allocated with name '_dumpPage_PARM_2'
                                   3837 ;type                      Allocated with name '_dumpPage_PARM_3'
                                   3838 ;start                     Allocated with name '_dumpPage_start_65536_234'
                                   3839 ;j                         Allocated with name '_dumpPage_j_65537_236'
                                   3840 ;------------------------------------------------------------
                                   3841 ;	dump2.c:8: void dumpPage(__xdata uint16_t start, __xdata uint8_t n, __xdata uint8_t type/*, uint8_t page, bool direction*/) {
                                   3842 ;	-----------------------------------------
                                   3843 ;	 function dumpPage
                                   3844 ;	-----------------------------------------
      0010EB                       3845 _dumpPage:
      0010EB AF 83            [24] 3846 	mov	r7,dph
      0010ED E5 82            [12] 3847 	mov	a,dpl
      0010EF 90r00r1A         [24] 3848 	mov	dptr,#_dumpPage_start_65536_234
      0010F2 F0               [24] 3849 	movx	@dptr,a
      0010F3 EF               [12] 3850 	mov	a,r7
      0010F4 A3               [24] 3851 	inc	dptr
      0010F5 F0               [24] 3852 	movx	@dptr,a
                                   3853 ;	dump2.c:10: fillScreen(GRAY);
      0010F6 90 D6 BA         [24] 3854 	mov	dptr,#0xd6ba
      0010F9 12r08r44         [24] 3855 	lcall	_fillScreen
                                   3856 ;	dump2.c:11: setCursor(0, 0);
      0010FC E4               [12] 3857 	clr	a
      0010FD F5*00            [12] 3858 	mov	_setCursor_PARM_2,a
      0010FF F5*01            [12] 3859 	mov	(_setCursor_PARM_2 + 1),a
      001101 90 00 00         [24] 3860 	mov	dptr,#0x0000
      001104 12r00rB6         [24] 3861 	lcall	_setCursor
                                   3862 ;	dump2.c:12: setTextSize(2);
      001107 75 82 02         [24] 3863 	mov	dpl,#0x02
      00110A 12r00rD0         [24] 3864 	lcall	_setTextSize
                                   3865 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      00110D E4               [12] 3866 	clr	a
      00110E F5*4A            [12] 3867 	mov	_dumpPage_i_65537_236,a
      001110 F5*4B            [12] 3868 	mov	(_dumpPage_i_65537_236 + 1),a
      001112 90r00r19         [24] 3869 	mov	dptr,#_dumpPage_PARM_3
      001115 E0               [24] 3870 	movx	a,@dptr
      001116 FD               [12] 3871 	mov	r5,a
      001117 90r00r18         [24] 3872 	mov	dptr,#_dumpPage_PARM_2
      00111A E0               [24] 3873 	movx	a,@dptr
      00111B F5 F0            [12] 3874 	mov	b,a
      00111D ED               [12] 3875 	mov	a,r5
      00111E A4               [48] 3876 	mul	ab
      00111F FB               [12] 3877 	mov	r3,a
      001120 AC F0            [24] 3878 	mov	r4,b
      001122                       3879 00109$:
      001122 A9*4A            [24] 3880 	mov	r1,_dumpPage_i_65537_236
      001124 AA*4B            [24] 3881 	mov	r2,(_dumpPage_i_65537_236 + 1)
      001126 8B 00            [24] 3882 	mov	ar0,r3
      001128 8C 07            [24] 3883 	mov	ar7,r4
      00112A C3               [12] 3884 	clr	c
      00112B E9               [12] 3885 	mov	a,r1
      00112C 98               [12] 3886 	subb	a,r0
      00112D EA               [12] 3887 	mov	a,r2
      00112E 9F               [12] 3888 	subb	a,r7
      00112F 40 01            [24] 3889 	jc	00134$
      001131 22               [24] 3890 	ret
      001132                       3891 00134$:
                                   3892 ;	dump2.c:25: if (i + start == __END_RAM__) break;
      001132 90r00r1A         [24] 3893 	mov	dptr,#_dumpPage_start_65536_234
      001135 E0               [24] 3894 	movx	a,@dptr
      001136 FE               [12] 3895 	mov	r6,a
      001137 A3               [24] 3896 	inc	dptr
      001138 E0               [24] 3897 	movx	a,@dptr
      001139 FF               [12] 3898 	mov	r7,a
      00113A EE               [12] 3899 	mov	a,r6
      00113B 25*4A            [12] 3900 	add	a,_dumpPage_i_65537_236
      00113D F9               [12] 3901 	mov	r1,a
      00113E EF               [12] 3902 	mov	a,r7
      00113F 35*4B            [12] 3903 	addc	a,(_dumpPage_i_65537_236 + 1)
      001141 FA               [12] 3904 	mov	r2,a
      001142 B9 FF 04         [24] 3905 	cjne	r1,#0xff,00135$
      001145 BA FF 01         [24] 3906 	cjne	r2,#0xff,00135$
      001148 22               [24] 3907 	ret
      001149                       3908 00135$:
                                   3909 ;	dump2.c:28: IOM = 0;
      001149 C0 03            [24] 3910 	push	ar3
      00114B C0 04            [24] 3911 	push	ar4
                                   3912 ;	assignBit
      00114D C2 B4            [12] 3913 	clr	_P3_4
                                   3914 ;	dump2.c:29: ramAddress = (uint16_t __xdata*)((i * type) + start);
      00114F 8D*00            [24] 3915 	mov	__mulint_PARM_2,r5
      001151 75*01 00         [24] 3916 	mov	(__mulint_PARM_2 + 1),#0x00
      001154 85*4A 82         [24] 3917 	mov	dpl,_dumpPage_i_65537_236
      001157 85*4B 83         [24] 3918 	mov	dph,(_dumpPage_i_65537_236 + 1)
      00115A C0 07            [24] 3919 	push	ar7
      00115C C0 06            [24] 3920 	push	ar6
      00115E C0 05            [24] 3921 	push	ar5
      001160 C0 04            [24] 3922 	push	ar4
      001162 C0 03            [24] 3923 	push	ar3
      001164 12r00r00         [24] 3924 	lcall	__mulint
      001167 E5 82            [12] 3925 	mov	a,dpl
      001169 85 83 F0         [24] 3926 	mov	b,dph
      00116C D0 03            [24] 3927 	pop	ar3
      00116E D0 04            [24] 3928 	pop	ar4
      001170 D0 05            [24] 3929 	pop	ar5
      001172 D0 06            [24] 3930 	pop	ar6
      001174 D0 07            [24] 3931 	pop	ar7
      001176 2E               [12] 3932 	add	a,r6
      001177 F9               [12] 3933 	mov	r1,a
      001178 EF               [12] 3934 	mov	a,r7
      001179 35 F0            [12] 3935 	addc	a,b
      00117B FA               [12] 3936 	mov	r2,a
      00117C 89 00            [24] 3937 	mov	ar0,r1
      00117E 8A 04            [24] 3938 	mov	ar4,r2
                                   3939 ;	dump2.c:30: IOM = 1;
                                   3940 ;	assignBit
      001180 D2 B4            [12] 3941 	setb	_P3_4
                                   3942 ;	dump2.c:32: high = HIGHBYTE(start + (i * type));
      001182 8A 82            [24] 3943 	mov	dpl,r2
                                   3944 ;	dump2.c:33: low = LOWBYTE(start + (i * type));
      001184 AF*4A            [24] 3945 	mov	r7,_dumpPage_i_65537_236
      001186 8F F0            [24] 3946 	mov	b,r7
      001188 ED               [12] 3947 	mov	a,r5
      001189 A4               [48] 3948 	mul	ab
      00118A 2E               [12] 3949 	add	a,r6
      00118B FE               [12] 3950 	mov	r6,a
                                   3951 ;	dump2.c:36: asciiToHex(high);
      00118C C0 06            [24] 3952 	push	ar6
      00118E C0 05            [24] 3953 	push	ar5
      001190 C0 04            [24] 3954 	push	ar4
      001192 C0 03            [24] 3955 	push	ar3
      001194 C0 00            [24] 3956 	push	ar0
      001196 12r0ErCC         [24] 3957 	lcall	_asciiToHex
      001199 D0 00            [24] 3958 	pop	ar0
      00119B D0 03            [24] 3959 	pop	ar3
      00119D D0 04            [24] 3960 	pop	ar4
      00119F D0 05            [24] 3961 	pop	ar5
      0011A1 D0 06            [24] 3962 	pop	ar6
                                   3963 ;	dump2.c:37: asciiToHex(low);
      0011A3 8E 82            [24] 3964 	mov	dpl,r6
      0011A5 C0 05            [24] 3965 	push	ar5
      0011A7 C0 04            [24] 3966 	push	ar4
      0011A9 C0 03            [24] 3967 	push	ar3
      0011AB C0 00            [24] 3968 	push	ar0
      0011AD 12r0ErCC         [24] 3969 	lcall	_asciiToHex
                                   3970 ;	dump2.c:39: LCD_string_write(": ");
      0011B0 90r05r4B         [24] 3971 	mov	dptr,#___str_6
      0011B3 75 F0 80         [24] 3972 	mov	b,#0x80
      0011B6 12r0Cr4B         [24] 3973 	lcall	_LCD_string_write
      0011B9 D0 00            [24] 3974 	pop	ar0
      0011BB D0 03            [24] 3975 	pop	ar3
      0011BD D0 04            [24] 3976 	pop	ar4
      0011BF D0 05            [24] 3977 	pop	ar5
                                   3978 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011C1 88*4C            [24] 3979 	mov	_dumpPage_sloc0_1_0,r0
      0011C3 8C*4D            [24] 3980 	mov	(_dumpPage_sloc0_1_0 + 1),r4
      0011C5 75*4E 00         [24] 3981 	mov	_dumpPage_sloc1_1_0,#0x00
                                   3982 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      0011C8 D0 04            [24] 3983 	pop	ar4
      0011CA D0 03            [24] 3984 	pop	ar3
                                   3985 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011CC                       3986 00106$:
      0011CC C3               [12] 3987 	clr	c
      0011CD E5*4E            [12] 3988 	mov	a,_dumpPage_sloc1_1_0
      0011CF 9D               [12] 3989 	subb	a,r5
      0011D0 50 2C            [24] 3990 	jnc	00103$
                                   3991 ;	dump2.c:44: IOM = 0;
                                   3992 ;	assignBit
      0011D2 C2 B4            [12] 3993 	clr	_P3_4
                                   3994 ;	dump2.c:45: data = *ramAddress;
      0011D4 85*4C 82         [24] 3995 	mov	dpl,_dumpPage_sloc0_1_0
      0011D7 85*4D 83         [24] 3996 	mov	dph,(_dumpPage_sloc0_1_0 + 1)
      0011DA E0               [24] 3997 	movx	a,@dptr
      0011DB FF               [12] 3998 	mov	r7,a
                                   3999 ;	dump2.c:46: &ramAddress++; // does this even work?
      0011DC 74 02            [12] 4000 	mov	a,#0x02
      0011DE 25*4C            [12] 4001 	add	a,_dumpPage_sloc0_1_0
      0011E0 F5*4C            [12] 4002 	mov	_dumpPage_sloc0_1_0,a
      0011E2 E4               [12] 4003 	clr	a
      0011E3 35*4D            [12] 4004 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      0011E5 F5*4D            [12] 4005 	mov	(_dumpPage_sloc0_1_0 + 1),a
                                   4006 ;	dump2.c:47: IOM = 1;
                                   4007 ;	assignBit
      0011E7 D2 B4            [12] 4008 	setb	_P3_4
                                   4009 ;	dump2.c:49: asciiToHex(data);
      0011E9 8F 82            [24] 4010 	mov	dpl,r7
      0011EB C0 05            [24] 4011 	push	ar5
      0011ED C0 04            [24] 4012 	push	ar4
      0011EF C0 03            [24] 4013 	push	ar3
      0011F1 12r0ErCC         [24] 4014 	lcall	_asciiToHex
      0011F4 D0 03            [24] 4015 	pop	ar3
      0011F6 D0 04            [24] 4016 	pop	ar4
      0011F8 D0 05            [24] 4017 	pop	ar5
                                   4018 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011FA 05*4E            [12] 4019 	inc	_dumpPage_sloc1_1_0
      0011FC 80 CE            [24] 4020 	sjmp	00106$
      0011FE                       4021 00103$:
                                   4022 ;	dump2.c:52: write('\n');
      0011FE 75 82 0A         [24] 4023 	mov	dpl,#0x0a
      001201 C0 05            [24] 4024 	push	ar5
      001203 C0 04            [24] 4025 	push	ar4
      001205 C0 03            [24] 4026 	push	ar3
      001207 12r0BrDD         [24] 4027 	lcall	_write
      00120A D0 03            [24] 4028 	pop	ar3
      00120C D0 04            [24] 4029 	pop	ar4
      00120E D0 05            [24] 4030 	pop	ar5
                                   4031 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      001210 8D 06            [24] 4032 	mov	ar6,r5
      001212 7F 00            [12] 4033 	mov	r7,#0x00
      001214 A9*4A            [24] 4034 	mov	r1,_dumpPage_i_65537_236
      001216 AA*4B            [24] 4035 	mov	r2,(_dumpPage_i_65537_236 + 1)
      001218 EE               [12] 4036 	mov	a,r6
      001219 29               [12] 4037 	add	a,r1
      00121A F9               [12] 4038 	mov	r1,a
      00121B EF               [12] 4039 	mov	a,r7
      00121C 3A               [12] 4040 	addc	a,r2
      00121D FA               [12] 4041 	mov	r2,a
      00121E 89*4A            [24] 4042 	mov	_dumpPage_i_65537_236,r1
      001220 8A*4B            [24] 4043 	mov	(_dumpPage_i_65537_236 + 1),r2
                                   4044 ;	dump2.c:60: }
      001222 02r11r22         [24] 4045 	ljmp	00109$
                                   4046 ;------------------------------------------------------------
                                   4047 ;Allocation info for local variables in function 'dump'
                                   4048 ;------------------------------------------------------------
                                   4049 ;type                      Allocated with name '_dump_type_65537_242'
                                   4050 ;size                      Allocated with name '_dump_size_65537_242'
                                   4051 ;page                      Allocated with name '_dump_page_65537_242'
                                   4052 ;input                     Allocated with name '_dump_input_65537_242'
                                   4053 ;pages                     Allocated with name '_dump_pages_65537_242'
                                   4054 ;address                   Allocated with name '_dump_address_65537_242'
                                   4055 ;------------------------------------------------------------
                                   4056 ;	dump2.c:66: void dump() {
                                   4057 ;	-----------------------------------------
                                   4058 ;	 function dump
                                   4059 ;	-----------------------------------------
      001225                       4060 _dump:
                                   4061 ;	dump2.c:68: fillScreen(GRAY);
      001225 90 D6 BA         [24] 4062 	mov	dptr,#0xd6ba
      001228 12r08r44         [24] 4063 	lcall	_fillScreen
                                   4064 ;	dump2.c:69: setCursor(0, 0);
      00122B E4               [12] 4065 	clr	a
      00122C F5*00            [12] 4066 	mov	_setCursor_PARM_2,a
      00122E F5*01            [12] 4067 	mov	(_setCursor_PARM_2 + 1),a
      001230 90 00 00         [24] 4068 	mov	dptr,#0x0000
      001233 12r00rB6         [24] 4069 	lcall	_setCursor
                                   4070 ;	dump2.c:70: setTextSize(2);
      001236 75 82 02         [24] 4071 	mov	dpl,#0x02
      001239 12r00rD0         [24] 4072 	lcall	_setTextSize
                                   4073 ;	dump2.c:80: page = 1;
      00123C 90r00r1D         [24] 4074 	mov	dptr,#_dump_page_65537_242
      00123F 74 01            [12] 4075 	mov	a,#0x01
      001241 F0               [24] 4076 	movx	@dptr,a
                                   4077 ;	dump2.c:83: LCD_string_write("Enter start address:\n");
      001242 90r05r4E         [24] 4078 	mov	dptr,#___str_7
      001245 75 F0 80         [24] 4079 	mov	b,#0x80
      001248 12r0Cr4B         [24] 4080 	lcall	_LCD_string_write
                                   4081 ;	dump2.c:84: address = getAddress();
      00124B 12r10r45         [24] 4082 	lcall	_getAddress
      00124E AE 82            [24] 4083 	mov	r6,dpl
      001250 AF 83            [24] 4084 	mov	r7,dph
      001252 90r00r1E         [24] 4085 	mov	dptr,#_dump_address_65537_242
      001255 EE               [12] 4086 	mov	a,r6
      001256 F0               [24] 4087 	movx	@dptr,a
      001257 EF               [12] 4088 	mov	a,r7
      001258 A3               [24] 4089 	inc	dptr
      001259 F0               [24] 4090 	movx	@dptr,a
                                   4091 ;	dump2.c:85: write('\n');
      00125A 75 82 0A         [24] 4092 	mov	dpl,#0x0a
      00125D C0 07            [24] 4093 	push	ar7
      00125F C0 06            [24] 4094 	push	ar6
      001261 12r0BrDD         [24] 4095 	lcall	_write
                                   4096 ;	dump2.c:88: LCD_string_write("Enter data type\n");
      001264 90r05r64         [24] 4097 	mov	dptr,#___str_8
      001267 75 F0 80         [24] 4098 	mov	b,#0x80
      00126A 12r0Cr4B         [24] 4099 	lcall	_LCD_string_write
                                   4100 ;	dump2.c:89: LCD_string_write("B-Byte, A-Word,\n");
      00126D 90r05r75         [24] 4101 	mov	dptr,#___str_9
      001270 75 F0 80         [24] 4102 	mov	b,#0x80
      001273 12r0Cr4B         [24] 4103 	lcall	_LCD_string_write
                                   4104 ;	dump2.c:90: LCD_string_write("D-Double word\n");
      001276 90r05r86         [24] 4105 	mov	dptr,#___str_10
      001279 75 F0 80         [24] 4106 	mov	b,#0x80
      00127C 12r0Cr4B         [24] 4107 	lcall	_LCD_string_write
      00127F D0 06            [24] 4108 	pop	ar6
      001281 D0 07            [24] 4109 	pop	ar7
                                   4110 ;	dump2.c:93: do {
      001283                       4111 00108$:
                                   4112 ;	dump2.c:94: type = keyDetect();
      001283 C0 07            [24] 4113 	push	ar7
      001285 C0 06            [24] 4114 	push	ar6
      001287 12r0CrEA         [24] 4115 	lcall	_keyDetect
      00128A AD 82            [24] 4116 	mov	r5,dpl
      00128C D0 06            [24] 4117 	pop	ar6
      00128E D0 07            [24] 4118 	pop	ar7
      001290 90r00r1C         [24] 4119 	mov	dptr,#_dump_type_65537_242
      001293 ED               [12] 4120 	mov	a,r5
      001294 F0               [24] 4121 	movx	@dptr,a
                                   4122 ;	dump2.c:95: switch(type) {
      001295 BD 41 02         [24] 4123 	cjne	r5,#0x41,00202$
      001298 80 23            [24] 4124 	sjmp	00102$
      00129A                       4125 00202$:
      00129A BD 42 02         [24] 4126 	cjne	r5,#0x42,00203$
      00129D 80 05            [24] 4127 	sjmp	00101$
      00129F                       4128 00203$:
                                   4129 ;	dump2.c:96: case 'B': {
      00129F BD 44 4B         [24] 4130 	cjne	r5,#0x44,00109$
      0012A2 80 32            [24] 4131 	sjmp	00103$
      0012A4                       4132 00101$:
                                   4133 ;	dump2.c:97: type = 1;
      0012A4 90r00r1C         [24] 4134 	mov	dptr,#_dump_type_65537_242
      0012A7 74 01            [12] 4135 	mov	a,#0x01
      0012A9 F0               [24] 4136 	movx	@dptr,a
                                   4137 ;	dump2.c:98: LCD_string_write("Byte\n");
      0012AA 90r05r95         [24] 4138 	mov	dptr,#___str_11
      0012AD 75 F0 80         [24] 4139 	mov	b,#0x80
      0012B0 C0 07            [24] 4140 	push	ar7
      0012B2 C0 06            [24] 4141 	push	ar6
      0012B4 12r0Cr4B         [24] 4142 	lcall	_LCD_string_write
      0012B7 D0 06            [24] 4143 	pop	ar6
      0012B9 D0 07            [24] 4144 	pop	ar7
                                   4145 ;	dump2.c:99: break;
                                   4146 ;	dump2.c:101: case 'A': {
      0012BB 80 30            [24] 4147 	sjmp	00109$
      0012BD                       4148 00102$:
                                   4149 ;	dump2.c:102: type = 2; 
      0012BD 90r00r1C         [24] 4150 	mov	dptr,#_dump_type_65537_242
      0012C0 74 02            [12] 4151 	mov	a,#0x02
      0012C2 F0               [24] 4152 	movx	@dptr,a
                                   4153 ;	dump2.c:103: LCD_string_write("Word\n");
      0012C3 90r05r9B         [24] 4154 	mov	dptr,#___str_12
      0012C6 75 F0 80         [24] 4155 	mov	b,#0x80
      0012C9 C0 07            [24] 4156 	push	ar7
      0012CB C0 06            [24] 4157 	push	ar6
      0012CD 12r0Cr4B         [24] 4158 	lcall	_LCD_string_write
      0012D0 D0 06            [24] 4159 	pop	ar6
      0012D2 D0 07            [24] 4160 	pop	ar7
                                   4161 ;	dump2.c:104: break;
                                   4162 ;	dump2.c:106: case 'D': {
      0012D4 80 17            [24] 4163 	sjmp	00109$
      0012D6                       4164 00103$:
                                   4165 ;	dump2.c:107: type = 4;
      0012D6 90r00r1C         [24] 4166 	mov	dptr,#_dump_type_65537_242
      0012D9 74 04            [12] 4167 	mov	a,#0x04
      0012DB F0               [24] 4168 	movx	@dptr,a
                                   4169 ;	dump2.c:108: LCD_string_write("Double word\n");
      0012DC 90r05rA1         [24] 4170 	mov	dptr,#___str_13
      0012DF 75 F0 80         [24] 4171 	mov	b,#0x80
      0012E2 C0 07            [24] 4172 	push	ar7
      0012E4 C0 06            [24] 4173 	push	ar6
      0012E6 12r0Cr4B         [24] 4174 	lcall	_LCD_string_write
      0012E9 D0 06            [24] 4175 	pop	ar6
      0012EB D0 07            [24] 4176 	pop	ar7
                                   4177 ;	dump2.c:112: }
      0012ED                       4178 00109$:
                                   4179 ;	dump2.c:113: } while(type != 1 && type != 2 && type != 4);
      0012ED 90r00r1C         [24] 4180 	mov	dptr,#_dump_type_65537_242
      0012F0 E0               [24] 4181 	movx	a,@dptr
      0012F1 FD               [12] 4182 	mov	r5,a
      0012F2 BD 01 02         [24] 4183 	cjne	r5,#0x01,00205$
      0012F5 80 0D            [24] 4184 	sjmp	00110$
      0012F7                       4185 00205$:
      0012F7 BD 02 02         [24] 4186 	cjne	r5,#0x02,00206$
      0012FA 80 08            [24] 4187 	sjmp	00110$
      0012FC                       4188 00206$:
      0012FC BD 04 02         [24] 4189 	cjne	r5,#0x04,00207$
      0012FF 80 03            [24] 4190 	sjmp	00208$
      001301                       4191 00207$:
      001301 02r12r83         [24] 4192 	ljmp	00108$
      001304                       4193 00208$:
      001304                       4194 00110$:
                                   4195 ;	dump2.c:116: LCD_string_write("Enter block size:\n");
      001304 90r05rAE         [24] 4196 	mov	dptr,#___str_14
      001307 75 F0 80         [24] 4197 	mov	b,#0x80
      00130A C0 07            [24] 4198 	push	ar7
      00130C C0 06            [24] 4199 	push	ar6
      00130E 12r0Cr4B         [24] 4200 	lcall	_LCD_string_write
                                   4201 ;	dump2.c:117: size = getByte();
      001311 12r10rAC         [24] 4202 	lcall	_getByte
      001314 AD 82            [24] 4203 	mov	r5,dpl
                                   4204 ;	dump2.c:118: write('\n');
      001316 75 82 0A         [24] 4205 	mov	dpl,#0x0a
      001319 C0 05            [24] 4206 	push	ar5
      00131B 12r0BrDD         [24] 4207 	lcall	_write
      00131E D0 05            [24] 4208 	pop	ar5
      001320 D0 06            [24] 4209 	pop	ar6
      001322 D0 07            [24] 4210 	pop	ar7
                                   4211 ;	dump2.c:123: if (size < NUM) {
      001324 BD 0F 00         [24] 4212 	cjne	r5,#0x0f,00209$
      001327                       4213 00209$:
      001327 50 1C            [24] 4214 	jnc	00112$
                                   4215 ;	dump2.c:124: dumpPage(address, size, type);
      001329 90r00r1C         [24] 4216 	mov	dptr,#_dump_type_65537_242
      00132C E0               [24] 4217 	movx	a,@dptr
      00132D FC               [12] 4218 	mov	r4,a
      00132E 90r00r18         [24] 4219 	mov	dptr,#_dumpPage_PARM_2
      001331 ED               [12] 4220 	mov	a,r5
      001332 F0               [24] 4221 	movx	@dptr,a
      001333 90r00r19         [24] 4222 	mov	dptr,#_dumpPage_PARM_3
      001336 EC               [12] 4223 	mov	a,r4
      001337 F0               [24] 4224 	movx	@dptr,a
      001338 8E 82            [24] 4225 	mov	dpl,r6
      00133A 8F 83            [24] 4226 	mov	dph,r7
      00133C C0 05            [24] 4227 	push	ar5
      00133E 12r10rEB         [24] 4228 	lcall	_dumpPage
      001341 D0 05            [24] 4229 	pop	ar5
      001343 80 1B            [24] 4230 	sjmp	00113$
      001345                       4231 00112$:
                                   4232 ;	dump2.c:126: dumpPage(address, NUM, type);
      001345 90r00r1C         [24] 4233 	mov	dptr,#_dump_type_65537_242
      001348 E0               [24] 4234 	movx	a,@dptr
      001349 FC               [12] 4235 	mov	r4,a
      00134A 90r00r18         [24] 4236 	mov	dptr,#_dumpPage_PARM_2
      00134D 74 0F            [12] 4237 	mov	a,#0x0f
      00134F F0               [24] 4238 	movx	@dptr,a
      001350 90r00r19         [24] 4239 	mov	dptr,#_dumpPage_PARM_3
      001353 EC               [12] 4240 	mov	a,r4
      001354 F0               [24] 4241 	movx	@dptr,a
      001355 8E 82            [24] 4242 	mov	dpl,r6
      001357 8F 83            [24] 4243 	mov	dph,r7
      001359 C0 05            [24] 4244 	push	ar5
      00135B 12r10rEB         [24] 4245 	lcall	_dumpPage
      00135E D0 05            [24] 4246 	pop	ar5
      001360                       4247 00113$:
                                   4248 ;	dump2.c:129: pages = size / NUM;
      001360 7F 00            [12] 4249 	mov	r7,#0x00
      001362 75*00 0F         [24] 4250 	mov	__divsint_PARM_2,#0x0f
                                   4251 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001365 8F*01            [24] 4252 	mov	(__divsint_PARM_2 + 1),r7
      001367 8D 82            [24] 4253 	mov	dpl,r5
      001369 8F 83            [24] 4254 	mov	dph,r7
      00136B 12r00r00         [24] 4255 	lcall	__divsint
      00136E AE 82            [24] 4256 	mov	r6,dpl
                                   4257 ;	dump2.c:131: do {
      001370 90r00r1C         [24] 4258 	mov	dptr,#_dump_type_65537_242
      001373 E0               [24] 4259 	movx	a,@dptr
      001374 FF               [12] 4260 	mov	r7,a
      001375 FD               [12] 4261 	mov	r5,a
      001376                       4262 00133$:
                                   4263 ;	dump2.c:133: if (page != 1 && page != pages) {
      001376 90r00r1D         [24] 4264 	mov	dptr,#_dump_page_65537_242
      001379 E0               [24] 4265 	movx	a,@dptr
      00137A FC               [12] 4266 	mov	r4,a
      00137B BC 01 02         [24] 4267 	cjne	r4,#0x01,00211$
      00137E 80 26            [24] 4268 	sjmp	00120$
      001380                       4269 00211$:
      001380 EC               [12] 4270 	mov	a,r4
      001381 B5 06 02         [24] 4271 	cjne	a,ar6,00212$
      001384 80 20            [24] 4272 	sjmp	00120$
      001386                       4273 00212$:
                                   4274 ;	dump2.c:134: LCD_string_write("Press A for previous\n");
      001386 90r05rC1         [24] 4275 	mov	dptr,#___str_15
      001389 75 F0 80         [24] 4276 	mov	b,#0x80
      00138C C0 07            [24] 4277 	push	ar7
      00138E C0 06            [24] 4278 	push	ar6
      001390 C0 05            [24] 4279 	push	ar5
      001392 12r0Cr4B         [24] 4280 	lcall	_LCD_string_write
                                   4281 ;	dump2.c:135: LCD_string_write("Press B for next\n");
      001395 90r05rD7         [24] 4282 	mov	dptr,#___str_16
      001398 75 F0 80         [24] 4283 	mov	b,#0x80
      00139B 12r0Cr4B         [24] 4284 	lcall	_LCD_string_write
      00139E D0 05            [24] 4285 	pop	ar5
      0013A0 D0 06            [24] 4286 	pop	ar6
      0013A2 D0 07            [24] 4287 	pop	ar7
      0013A4 80 3B            [24] 4288 	sjmp	00121$
      0013A6                       4289 00120$:
                                   4290 ;	dump2.c:136: } else if (page != pages) {
      0013A6 90r00r1D         [24] 4291 	mov	dptr,#_dump_page_65537_242
      0013A9 E0               [24] 4292 	movx	a,@dptr
      0013AA FC               [12] 4293 	mov	r4,a
      0013AB B5 06 02         [24] 4294 	cjne	a,ar6,00213$
      0013AE 80 17            [24] 4295 	sjmp	00117$
      0013B0                       4296 00213$:
                                   4297 ;	dump2.c:137: LCD_string_write("Press B for next\n");
      0013B0 90r05rD7         [24] 4298 	mov	dptr,#___str_16
      0013B3 75 F0 80         [24] 4299 	mov	b,#0x80
      0013B6 C0 07            [24] 4300 	push	ar7
      0013B8 C0 06            [24] 4301 	push	ar6
      0013BA C0 05            [24] 4302 	push	ar5
      0013BC 12r0Cr4B         [24] 4303 	lcall	_LCD_string_write
      0013BF D0 05            [24] 4304 	pop	ar5
      0013C1 D0 06            [24] 4305 	pop	ar6
      0013C3 D0 07            [24] 4306 	pop	ar7
      0013C5 80 1A            [24] 4307 	sjmp	00121$
      0013C7                       4308 00117$:
                                   4309 ;	dump2.c:138: } else if (page != 1) {
      0013C7 BC 01 02         [24] 4310 	cjne	r4,#0x01,00214$
      0013CA 80 15            [24] 4311 	sjmp	00121$
      0013CC                       4312 00214$:
                                   4313 ;	dump2.c:139: LCD_string_write("Press A for previous\n");
      0013CC 90r05rC1         [24] 4314 	mov	dptr,#___str_15
      0013CF 75 F0 80         [24] 4315 	mov	b,#0x80
      0013D2 C0 07            [24] 4316 	push	ar7
      0013D4 C0 06            [24] 4317 	push	ar6
      0013D6 C0 05            [24] 4318 	push	ar5
      0013D8 12r0Cr4B         [24] 4319 	lcall	_LCD_string_write
      0013DB D0 05            [24] 4320 	pop	ar5
      0013DD D0 06            [24] 4321 	pop	ar6
      0013DF D0 07            [24] 4322 	pop	ar7
      0013E1                       4323 00121$:
                                   4324 ;	dump2.c:142: LCD_string_write("Press 1 for menu\n");
      0013E1 90r05rE9         [24] 4325 	mov	dptr,#___str_17
      0013E4 75 F0 80         [24] 4326 	mov	b,#0x80
      0013E7 C0 07            [24] 4327 	push	ar7
      0013E9 C0 06            [24] 4328 	push	ar6
      0013EB C0 05            [24] 4329 	push	ar5
      0013ED 12r0Cr4B         [24] 4330 	lcall	_LCD_string_write
                                   4331 ;	dump2.c:144: input = keyDetect();
      0013F0 12r0CrEA         [24] 4332 	lcall	_keyDetect
      0013F3 AC 82            [24] 4333 	mov	r4,dpl
      0013F5 D0 05            [24] 4334 	pop	ar5
      0013F7 D0 06            [24] 4335 	pop	ar6
      0013F9 D0 07            [24] 4336 	pop	ar7
                                   4337 ;	dump2.c:149: if (input == 'B' && page != pages) {	// next
      0013FB BC 42 54         [24] 4338 	cjne	r4,#0x42,00130$
      0013FE 90r00r1D         [24] 4339 	mov	dptr,#_dump_page_65537_242
      001401 E0               [24] 4340 	movx	a,@dptr
      001402 FB               [12] 4341 	mov	r3,a
      001403 B5 06 02         [24] 4342 	cjne	a,ar6,00217$
      001406 80 4A            [24] 4343 	sjmp	00130$
      001408                       4344 00217$:
                                   4345 ;	dump2.c:150: address += NUM;
      001408 90r00r1E         [24] 4346 	mov	dptr,#_dump_address_65537_242
      00140B E0               [24] 4347 	movx	a,@dptr
      00140C F9               [12] 4348 	mov	r1,a
      00140D A3               [24] 4349 	inc	dptr
      00140E E0               [24] 4350 	movx	a,@dptr
      00140F FA               [12] 4351 	mov	r2,a
      001410 74 0F            [12] 4352 	mov	a,#0x0f
      001412 29               [12] 4353 	add	a,r1
      001413 F9               [12] 4354 	mov	r1,a
      001414 E4               [12] 4355 	clr	a
      001415 3A               [12] 4356 	addc	a,r2
      001416 FA               [12] 4357 	mov	r2,a
      001417 90r00r1E         [24] 4358 	mov	dptr,#_dump_address_65537_242
      00141A E9               [12] 4359 	mov	a,r1
      00141B F0               [24] 4360 	movx	@dptr,a
      00141C EA               [12] 4361 	mov	a,r2
      00141D A3               [24] 4362 	inc	dptr
      00141E F0               [24] 4363 	movx	@dptr,a
                                   4364 ;	dump2.c:151: dumpPage(address, NUM, type);
      00141F 90r00r1E         [24] 4365 	mov	dptr,#_dump_address_65537_242
      001422 E0               [24] 4366 	movx	a,@dptr
      001423 F9               [12] 4367 	mov	r1,a
      001424 A3               [24] 4368 	inc	dptr
      001425 E0               [24] 4369 	movx	a,@dptr
      001426 FA               [12] 4370 	mov	r2,a
      001427 90r00r18         [24] 4371 	mov	dptr,#_dumpPage_PARM_2
      00142A 74 0F            [12] 4372 	mov	a,#0x0f
      00142C F0               [24] 4373 	movx	@dptr,a
      00142D 90r00r19         [24] 4374 	mov	dptr,#_dumpPage_PARM_3
      001430 EF               [12] 4375 	mov	a,r7
      001431 F0               [24] 4376 	movx	@dptr,a
      001432 89 82            [24] 4377 	mov	dpl,r1
      001434 8A 83            [24] 4378 	mov	dph,r2
      001436 C0 07            [24] 4379 	push	ar7
      001438 C0 06            [24] 4380 	push	ar6
      00143A C0 05            [24] 4381 	push	ar5
      00143C C0 03            [24] 4382 	push	ar3
      00143E 12r10rEB         [24] 4383 	lcall	_dumpPage
      001441 D0 03            [24] 4384 	pop	ar3
      001443 D0 05            [24] 4385 	pop	ar5
      001445 D0 06            [24] 4386 	pop	ar6
      001447 D0 07            [24] 4387 	pop	ar7
                                   4388 ;	dump2.c:152: page++;
      001449 90r00r1D         [24] 4389 	mov	dptr,#_dump_page_65537_242
      00144C EB               [12] 4390 	mov	a,r3
      00144D 04               [12] 4391 	inc	a
      00144E F0               [24] 4392 	movx	@dptr,a
      00144F 02r13r76         [24] 4393 	ljmp	00133$
      001452                       4394 00130$:
                                   4395 ;	dump2.c:153: } else if (input == 'A' && page != 1) {				// previous
      001452 BC 41 55         [24] 4396 	cjne	r4,#0x41,00126$
      001455 90r00r1D         [24] 4397 	mov	dptr,#_dump_page_65537_242
      001458 E0               [24] 4398 	movx	a,@dptr
      001459 FB               [12] 4399 	mov	r3,a
      00145A BB 01 02         [24] 4400 	cjne	r3,#0x01,00220$
      00145D 80 4B            [24] 4401 	sjmp	00126$
      00145F                       4402 00220$:
                                   4403 ;	dump2.c:154: address -= NUM;
      00145F 90r00r1E         [24] 4404 	mov	dptr,#_dump_address_65537_242
      001462 E0               [24] 4405 	movx	a,@dptr
      001463 F9               [12] 4406 	mov	r1,a
      001464 A3               [24] 4407 	inc	dptr
      001465 E0               [24] 4408 	movx	a,@dptr
      001466 FA               [12] 4409 	mov	r2,a
      001467 E9               [12] 4410 	mov	a,r1
      001468 24 F1            [12] 4411 	add	a,#0xf1
      00146A F9               [12] 4412 	mov	r1,a
      00146B EA               [12] 4413 	mov	a,r2
      00146C 34 FF            [12] 4414 	addc	a,#0xff
      00146E FA               [12] 4415 	mov	r2,a
      00146F 90r00r1E         [24] 4416 	mov	dptr,#_dump_address_65537_242
      001472 E9               [12] 4417 	mov	a,r1
      001473 F0               [24] 4418 	movx	@dptr,a
      001474 EA               [12] 4419 	mov	a,r2
      001475 A3               [24] 4420 	inc	dptr
      001476 F0               [24] 4421 	movx	@dptr,a
                                   4422 ;	dump2.c:155: dumpPage(address, NUM, type);
      001477 90r00r1E         [24] 4423 	mov	dptr,#_dump_address_65537_242
      00147A E0               [24] 4424 	movx	a,@dptr
      00147B F9               [12] 4425 	mov	r1,a
      00147C A3               [24] 4426 	inc	dptr
      00147D E0               [24] 4427 	movx	a,@dptr
      00147E FA               [12] 4428 	mov	r2,a
      00147F 90r00r18         [24] 4429 	mov	dptr,#_dumpPage_PARM_2
      001482 74 0F            [12] 4430 	mov	a,#0x0f
      001484 F0               [24] 4431 	movx	@dptr,a
      001485 90r00r19         [24] 4432 	mov	dptr,#_dumpPage_PARM_3
      001488 ED               [12] 4433 	mov	a,r5
      001489 F0               [24] 4434 	movx	@dptr,a
      00148A 89 82            [24] 4435 	mov	dpl,r1
      00148C 8A 83            [24] 4436 	mov	dph,r2
      00148E C0 07            [24] 4437 	push	ar7
      001490 C0 06            [24] 4438 	push	ar6
      001492 C0 05            [24] 4439 	push	ar5
      001494 C0 03            [24] 4440 	push	ar3
      001496 12r10rEB         [24] 4441 	lcall	_dumpPage
      001499 D0 03            [24] 4442 	pop	ar3
      00149B D0 05            [24] 4443 	pop	ar5
      00149D D0 06            [24] 4444 	pop	ar6
      00149F D0 07            [24] 4445 	pop	ar7
                                   4446 ;	dump2.c:156: page--;
      0014A1 EB               [12] 4447 	mov	a,r3
      0014A2 14               [12] 4448 	dec	a
      0014A3 90r00r1D         [24] 4449 	mov	dptr,#_dump_page_65537_242
      0014A6 F0               [24] 4450 	movx	@dptr,a
      0014A7 02r13r76         [24] 4451 	ljmp	00133$
      0014AA                       4452 00126$:
                                   4453 ;	dump2.c:157: } else if (input == '1') {							// main menu
      0014AA BC 31 01         [24] 4454 	cjne	r4,#0x31,00221$
      0014AD 22               [24] 4455 	ret
      0014AE                       4456 00221$:
      0014AE 02r13r76         [24] 4457 	ljmp	00133$
                                   4458 ;	dump2.c:161: } while (1);
                                   4459 ;	dump2.c:163: }
      0014B1 22               [24] 4460 	ret
                                   4461 ;------------------------------------------------------------
                                   4462 ;Allocation info for local variables in function 'check'
                                   4463 ;------------------------------------------------------------
                                   4464 ;ramAddress                Allocated to registers r4 r5 
                                   4465 ;checker                   Allocated with name '_check_checker_65537_258'
                                   4466 ;input                     Allocated with name '_check_input_65537_258'
                                   4467 ;fetched                   Allocated with name '_check_fetched_65537_258'
                                   4468 ;i                         Allocated with name '_check_i_65537_258'
                                   4469 ;error                     Allocated with name '_check_error_65537_258'
                                   4470 ;------------------------------------------------------------
                                   4471 ;	check.c:6: void check() {
                                   4472 ;	-----------------------------------------
                                   4473 ;	 function check
                                   4474 ;	-----------------------------------------
      0014B2                       4475 _check:
                                   4476 ;	check.c:8: fillScreen(GRAY);
      0014B2 90 D6 BA         [24] 4477 	mov	dptr,#0xd6ba
      0014B5 12r08r44         [24] 4478 	lcall	_fillScreen
                                   4479 ;	check.c:9: setCursor(0, 0);
      0014B8 E4               [12] 4480 	clr	a
      0014B9 F5*00            [12] 4481 	mov	_setCursor_PARM_2,a
      0014BB F5*01            [12] 4482 	mov	(_setCursor_PARM_2 + 1),a
      0014BD 90 00 00         [24] 4483 	mov	dptr,#0x0000
      0014C0 12r00rB6         [24] 4484 	lcall	_setCursor
                                   4485 ;	check.c:10: setTextSize(2);
      0014C3 75 82 02         [24] 4486 	mov	dpl,#0x02
      0014C6 12r00rD0         [24] 4487 	lcall	_setTextSize
                                   4488 ;	check.c:17: __xdata bool error = false;
      0014C9 90r00r21         [24] 4489 	mov	dptr,#_check_error_65537_258
      0014CC E4               [12] 4490 	clr	a
      0014CD F0               [24] 4491 	movx	@dptr,a
                                   4492 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      0014CE 90r05rFB         [24] 4493 	mov	dptr,#___str_18
      0014D1 75 F0 80         [24] 4494 	mov	b,#0x80
      0014D4 12r0Cr4B         [24] 4495 	lcall	_LCD_string_write
                                   4496 ;	check.c:22: checker = getByte();
      0014D7 12r10rAC         [24] 4497 	lcall	_getByte
      0014DA E5 82            [12] 4498 	mov	a,dpl
      0014DC 90r00r20         [24] 4499 	mov	dptr,#_check_checker_65537_258
      0014DF F0               [24] 4500 	movx	@dptr,a
                                   4501 ;	check.c:23: write('\n');
      0014E0 75 82 0A         [24] 4502 	mov	dpl,#0x0a
      0014E3 12r0BrDD         [24] 4503 	lcall	_write
                                   4504 ;	check.c:24: LCD_string_write("In progress...\n");
      0014E6 90r06r10         [24] 4505 	mov	dptr,#___str_19
      0014E9 75 F0 80         [24] 4506 	mov	b,#0x80
      0014EC 12r0Cr4B         [24] 4507 	lcall	_LCD_string_write
                                   4508 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0014EF 7E 00            [12] 4509 	mov	r6,#0x00
      0014F1 7F 00            [12] 4510 	mov	r7,#0x00
      0014F3                       4511 00112$:
                                   4512 ;	check.c:30: IOM = 0;
                                   4513 ;	assignBit
      0014F3 C2 B4            [12] 4514 	clr	_P3_4
                                   4515 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      0014F5 8E 04            [24] 4516 	mov	ar4,r6
      0014F7 8F 05            [24] 4517 	mov	ar5,r7
                                   4518 ;	check.c:32: *ramAddress = checker;
      0014F9 90r00r20         [24] 4519 	mov	dptr,#_check_checker_65537_258
      0014FC E0               [24] 4520 	movx	a,@dptr
      0014FD FB               [12] 4521 	mov	r3,a
      0014FE F9               [12] 4522 	mov	r1,a
      0014FF 7A 00            [12] 4523 	mov	r2,#0x00
      001501 8C 82            [24] 4524 	mov	dpl,r4
      001503 8D 83            [24] 4525 	mov	dph,r5
      001505 E9               [12] 4526 	mov	a,r1
      001506 F0               [24] 4527 	movx	@dptr,a
      001507 EA               [12] 4528 	mov	a,r2
      001508 A3               [24] 4529 	inc	dptr
      001509 F0               [24] 4530 	movx	@dptr,a
                                   4531 ;	check.c:33: fetched = *ramAddress;
                                   4532 ;	check.c:34: IOM = 1;
                                   4533 ;	assignBit
      00150A D2 B4            [12] 4534 	setb	_P3_4
                                   4535 ;	check.c:35: if (fetched != checker) {
      00150C E9               [12] 4536 	mov	a,r1
      00150D B5 03 02         [24] 4537 	cjne	a,ar3,00136$
      001510 80 43            [24] 4538 	sjmp	00104$
      001512                       4539 00136$:
                                   4540 ;	check.c:36: asciiToHex(checker);
      001512 8B 82            [24] 4541 	mov	dpl,r3
      001514 C0 05            [24] 4542 	push	ar5
      001516 C0 04            [24] 4543 	push	ar4
      001518 C0 01            [24] 4544 	push	ar1
      00151A 12r0ErCC         [24] 4545 	lcall	_asciiToHex
                                   4546 ;	check.c:37: write(' ');
      00151D 75 82 20         [24] 4547 	mov	dpl,#0x20
      001520 12r0BrDD         [24] 4548 	lcall	_write
      001523 D0 01            [24] 4549 	pop	ar1
                                   4550 ;	check.c:38: asciiToHex(fetched);
      001525 89 82            [24] 4551 	mov	dpl,r1
      001527 12r0ErCC         [24] 4552 	lcall	_asciiToHex
                                   4553 ;	check.c:39: write(' ');
      00152A 75 82 20         [24] 4554 	mov	dpl,#0x20
      00152D 12r0BrDD         [24] 4555 	lcall	_write
      001530 D0 04            [24] 4556 	pop	ar4
      001532 D0 05            [24] 4557 	pop	ar5
                                   4558 ;	check.c:40: asciiToHex(*ramAddress);
      001534 8C 82            [24] 4559 	mov	dpl,r4
      001536 8D 83            [24] 4560 	mov	dph,r5
      001538 E0               [24] 4561 	movx	a,@dptr
      001539 F5 82            [12] 4562 	mov	dpl,a
      00153B 12r0ErCC         [24] 4563 	lcall	_asciiToHex
                                   4564 ;	check.c:41: write('\n');
      00153E 75 82 0A         [24] 4565 	mov	dpl,#0x0a
      001541 12r0BrDD         [24] 4566 	lcall	_write
                                   4567 ;	check.c:42: LCD_string_write("Memory check failed\n");
      001544 90r06r20         [24] 4568 	mov	dptr,#___str_20
      001547 75 F0 80         [24] 4569 	mov	b,#0x80
      00154A 12r0Cr4B         [24] 4570 	lcall	_LCD_string_write
                                   4571 ;	check.c:43: error = true;
      00154D 90r00r21         [24] 4572 	mov	dptr,#_check_error_65537_258
      001550 74 01            [12] 4573 	mov	a,#0x01
      001552 F0               [24] 4574 	movx	@dptr,a
                                   4575 ;	check.c:44: break;
      001553 80 78            [24] 4576 	sjmp	00106$
      001555                       4577 00104$:
                                   4578 ;	check.c:46: IOM = 0;
                                   4579 ;	assignBit
      001555 C2 B4            [12] 4580 	clr	_P3_4
                                   4581 ;	check.c:47: checker = ~checker;
      001557 90r00r20         [24] 4582 	mov	dptr,#_check_checker_65537_258
      00155A EB               [12] 4583 	mov	a,r3
      00155B F4               [12] 4584 	cpl	a
      00155C F0               [24] 4585 	movx	@dptr,a
                                   4586 ;	check.c:48: *ramAddress = checker;
      00155D E0               [24] 4587 	movx	a,@dptr
      00155E FB               [12] 4588 	mov	r3,a
      00155F F9               [12] 4589 	mov	r1,a
      001560 7A 00            [12] 4590 	mov	r2,#0x00
      001562 8C 82            [24] 4591 	mov	dpl,r4
      001564 8D 83            [24] 4592 	mov	dph,r5
      001566 E9               [12] 4593 	mov	a,r1
      001567 F0               [24] 4594 	movx	@dptr,a
      001568 EA               [12] 4595 	mov	a,r2
      001569 A3               [24] 4596 	inc	dptr
      00156A F0               [24] 4597 	movx	@dptr,a
                                   4598 ;	check.c:49: fetched = *ramAddress;
                                   4599 ;	check.c:50: IOM = 1;
                                   4600 ;	assignBit
      00156B D2 B4            [12] 4601 	setb	_P3_4
                                   4602 ;	check.c:51: if (fetched != checker) {
      00156D E9               [12] 4603 	mov	a,r1
      00156E B5 03 02         [24] 4604 	cjne	a,ar3,00137$
      001571 80 45            [24] 4605 	sjmp	00113$
      001573                       4606 00137$:
                                   4607 ;	check.c:52: asciiToHex(~checker);
      001573 EB               [12] 4608 	mov	a,r3
      001574 F4               [12] 4609 	cpl	a
      001575 F5 82            [12] 4610 	mov	dpl,a
      001577 C0 05            [24] 4611 	push	ar5
      001579 C0 04            [24] 4612 	push	ar4
      00157B C0 01            [24] 4613 	push	ar1
      00157D 12r0ErCC         [24] 4614 	lcall	_asciiToHex
                                   4615 ;	check.c:53: write(' ');
      001580 75 82 20         [24] 4616 	mov	dpl,#0x20
      001583 12r0BrDD         [24] 4617 	lcall	_write
      001586 D0 01            [24] 4618 	pop	ar1
                                   4619 ;	check.c:54: asciiToHex(fetched);
      001588 89 82            [24] 4620 	mov	dpl,r1
      00158A 12r0ErCC         [24] 4621 	lcall	_asciiToHex
                                   4622 ;	check.c:55: write(' ');
      00158D 75 82 20         [24] 4623 	mov	dpl,#0x20
      001590 12r0BrDD         [24] 4624 	lcall	_write
      001593 D0 04            [24] 4625 	pop	ar4
      001595 D0 05            [24] 4626 	pop	ar5
                                   4627 ;	check.c:56: asciiToHex(*ramAddress);
      001597 8C 82            [24] 4628 	mov	dpl,r4
      001599 8D 83            [24] 4629 	mov	dph,r5
      00159B E0               [24] 4630 	movx	a,@dptr
      00159C F5 82            [12] 4631 	mov	dpl,a
      00159E 12r0ErCC         [24] 4632 	lcall	_asciiToHex
                                   4633 ;	check.c:57: write('\n');
      0015A1 75 82 0A         [24] 4634 	mov	dpl,#0x0a
      0015A4 12r0BrDD         [24] 4635 	lcall	_write
                                   4636 ;	check.c:58: LCD_string_write("Memory check failed\n");
      0015A7 90r06r20         [24] 4637 	mov	dptr,#___str_20
      0015AA 75 F0 80         [24] 4638 	mov	b,#0x80
      0015AD 12r0Cr4B         [24] 4639 	lcall	_LCD_string_write
                                   4640 ;	check.c:59: error = true;
      0015B0 90r00r21         [24] 4641 	mov	dptr,#_check_error_65537_258
      0015B3 74 01            [12] 4642 	mov	a,#0x01
      0015B5 F0               [24] 4643 	movx	@dptr,a
                                   4644 ;	check.c:60: break;
      0015B6 80 15            [24] 4645 	sjmp	00106$
      0015B8                       4646 00113$:
                                   4647 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0015B8 0E               [12] 4648 	inc	r6
      0015B9 BE 00 01         [24] 4649 	cjne	r6,#0x00,00138$
      0015BC 0F               [12] 4650 	inc	r7
      0015BD                       4651 00138$:
      0015BD 8E 04            [24] 4652 	mov	ar4,r6
      0015BF 8F 05            [24] 4653 	mov	ar5,r7
      0015C1 C3               [12] 4654 	clr	c
      0015C2 EC               [12] 4655 	mov	a,r4
      0015C3 94 FF            [12] 4656 	subb	a,#0xff
      0015C5 ED               [12] 4657 	mov	a,r5
      0015C6 94 FF            [12] 4658 	subb	a,#0xff
      0015C8 50 03            [24] 4659 	jnc	00139$
      0015CA 02r14rF3         [24] 4660 	ljmp	00112$
      0015CD                       4661 00139$:
      0015CD                       4662 00106$:
                                   4663 ;	check.c:68: if (error != false) {
      0015CD 90r00r21         [24] 4664 	mov	dptr,#_check_error_65537_258
      0015D0 E0               [24] 4665 	movx	a,@dptr
      0015D1 60 09            [24] 4666 	jz	00108$
                                   4667 ;	check.c:69: LCD_string_write("Success!\n");
      0015D3 90r06r35         [24] 4668 	mov	dptr,#___str_21
      0015D6 75 F0 80         [24] 4669 	mov	b,#0x80
      0015D9 12r0Cr4B         [24] 4670 	lcall	_LCD_string_write
      0015DC                       4671 00108$:
                                   4672 ;	check.c:73: LCD_string_write("Press 1 for menu");
      0015DC 90r06r3F         [24] 4673 	mov	dptr,#___str_22
      0015DF 75 F0 80         [24] 4674 	mov	b,#0x80
      0015E2 12r0Cr4B         [24] 4675 	lcall	_LCD_string_write
                                   4676 ;	check.c:75: do {
      0015E5                       4677 00109$:
                                   4678 ;	check.c:76: input = keyDetect();
      0015E5 12r0CrEA         [24] 4679 	lcall	_keyDetect
      0015E8 AF 82            [24] 4680 	mov	r7,dpl
                                   4681 ;	check.c:77: } while (input != '1');
      0015EA BF 31 F8         [24] 4682 	cjne	r7,#0x31,00109$
                                   4683 ;	check.c:78: }
      0015ED 22               [24] 4684 	ret
                                   4685 ;------------------------------------------------------------
                                   4686 ;Allocation info for local variables in function 'basic'
                                   4687 ;------------------------------------------------------------
                                   4688 ;val                       Allocated to registers r7 
                                   4689 ;fetched                   Allocated to registers r7 
                                   4690 ;add                       Allocated to registers r5 r6 
                                   4691 ;ramAddress                Allocated to registers 
                                   4692 ;------------------------------------------------------------
                                   4693 ;	check.c:84: void basic() {
                                   4694 ;	-----------------------------------------
                                   4695 ;	 function basic
                                   4696 ;	-----------------------------------------
      0015EE                       4697 _basic:
                                   4698 ;	check.c:86: fillScreen(GRAY);
      0015EE 90 D6 BA         [24] 4699 	mov	dptr,#0xd6ba
      0015F1 12r08r44         [24] 4700 	lcall	_fillScreen
                                   4701 ;	check.c:87: setCursor(0, 0);
      0015F4 E4               [12] 4702 	clr	a
      0015F5 F5*00            [12] 4703 	mov	_setCursor_PARM_2,a
      0015F7 F5*01            [12] 4704 	mov	(_setCursor_PARM_2 + 1),a
      0015F9 90 00 00         [24] 4705 	mov	dptr,#0x0000
      0015FC 12r00rB6         [24] 4706 	lcall	_setCursor
                                   4707 ;	check.c:88: setTextSize(2);
      0015FF 75 82 02         [24] 4708 	mov	dpl,#0x02
      001602 12r00rD0         [24] 4709 	lcall	_setTextSize
                                   4710 ;	check.c:97: LCD_string_write("Enter byte\n");
      001605 90r06r50         [24] 4711 	mov	dptr,#___str_23
      001608 75 F0 80         [24] 4712 	mov	b,#0x80
      00160B 12r0Cr4B         [24] 4713 	lcall	_LCD_string_write
                                   4714 ;	check.c:98: val = getByte();
      00160E 12r10rAC         [24] 4715 	lcall	_getByte
      001611 AF 82            [24] 4716 	mov	r7,dpl
                                   4717 ;	check.c:99: write('\n');
      001613 75 82 0A         [24] 4718 	mov	dpl,#0x0a
      001616 C0 07            [24] 4719 	push	ar7
      001618 12r0BrDD         [24] 4720 	lcall	_write
                                   4721 ;	check.c:102: LCD_string_write("Enter address\n");
      00161B 90r06r5C         [24] 4722 	mov	dptr,#___str_24
      00161E 75 F0 80         [24] 4723 	mov	b,#0x80
      001621 12r0Cr4B         [24] 4724 	lcall	_LCD_string_write
                                   4725 ;	check.c:103: add = getAddress();
      001624 12r10r45         [24] 4726 	lcall	_getAddress
      001627 AD 82            [24] 4727 	mov	r5,dpl
      001629 AE 83            [24] 4728 	mov	r6,dph
                                   4729 ;	check.c:104: write('\n');
      00162B 75 82 0A         [24] 4730 	mov	dpl,#0x0a
      00162E C0 06            [24] 4731 	push	ar6
      001630 C0 05            [24] 4732 	push	ar5
      001632 12r0BrDD         [24] 4733 	lcall	_write
                                   4734 ;	check.c:105: LCD_string_write("In progress\n");
      001635 90r06r6B         [24] 4735 	mov	dptr,#___str_25
      001638 75 F0 80         [24] 4736 	mov	b,#0x80
      00163B 12r0Cr4B         [24] 4737 	lcall	_LCD_string_write
      00163E D0 05            [24] 4738 	pop	ar5
      001640 D0 06            [24] 4739 	pop	ar6
      001642 D0 07            [24] 4740 	pop	ar7
                                   4741 ;	check.c:107: IOM = 0;
                                   4742 ;	assignBit
      001644 C2 B4            [12] 4743 	clr	_P3_4
                                   4744 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      001646 8D 82            [24] 4745 	mov	dpl,r5
      001648 8E 83            [24] 4746 	mov	dph,r6
                                   4747 ;	check.c:111: *ramAddress = val;
      00164A 8F 05            [24] 4748 	mov	ar5,r7
      00164C 7E 00            [12] 4749 	mov	r6,#0x00
      00164E ED               [12] 4750 	mov	a,r5
      00164F F0               [24] 4751 	movx	@dptr,a
      001650 EE               [12] 4752 	mov	a,r6
      001651 A3               [24] 4753 	inc	dptr
      001652 F0               [24] 4754 	movx	@dptr,a
                                   4755 ;	check.c:114: fetched = *ramAddress;
                                   4756 ;	check.c:116: IOM = 1;
                                   4757 ;	assignBit
      001653 D2 B4            [12] 4758 	setb	_P3_4
                                   4759 ;	check.c:119: if (fetched == val) {
      001655 ED               [12] 4760 	mov	a,r5
      001656 B5 07 10         [24] 4761 	cjne	a,ar7,00102$
                                   4762 ;	check.c:120: asciiToHex(fetched);
      001659 8D 82            [24] 4763 	mov	dpl,r5
      00165B 12r0ErCC         [24] 4764 	lcall	_asciiToHex
                                   4765 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      00165E 90r06r78         [24] 4766 	mov	dptr,#___str_26
      001661 75 F0 80         [24] 4767 	mov	b,#0x80
      001664 12r0Cr4B         [24] 4768 	lcall	_LCD_string_write
      001667 80 09            [24] 4769 	sjmp	00103$
      001669                       4770 00102$:
                                   4771 ;	check.c:123: LCD_string_write("Check failed\n");
      001669 90r06r8C         [24] 4772 	mov	dptr,#___str_27
      00166C 75 F0 80         [24] 4773 	mov	b,#0x80
      00166F 12r0Cr4B         [24] 4774 	lcall	_LCD_string_write
      001672                       4775 00103$:
                                   4776 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      001672 90r05rE9         [24] 4777 	mov	dptr,#___str_17
      001675 75 F0 80         [24] 4778 	mov	b,#0x80
      001678 12r0Cr4B         [24] 4779 	lcall	_LCD_string_write
                                   4780 ;	check.c:128: do {
      00167B                       4781 00104$:
                                   4782 ;	check.c:129: fetched = keyDetect();
      00167B 12r0CrEA         [24] 4783 	lcall	_keyDetect
      00167E AF 82            [24] 4784 	mov	r7,dpl
                                   4785 ;	check.c:130: } while (fetched != '1');
      001680 BF 31 F8         [24] 4786 	cjne	r7,#0x31,00104$
                                   4787 ;	check.c:131: }
      001683 22               [24] 4788 	ret
                                   4789 ;------------------------------------------------------------
                                   4790 ;Allocation info for local variables in function 'move'
                                   4791 ;------------------------------------------------------------
                                   4792 ;origin                    Allocated to registers 
                                   4793 ;target                    Allocated with name '_move_target_65537_272'
                                   4794 ;startAdd                  Allocated with name '_move_startAdd_65537_272'
                                   4795 ;targetAdd                 Allocated with name '_move_targetAdd_65537_272'
                                   4796 ;i                         Allocated with name '_move_i_65537_272'
                                   4797 ;size                      Allocated with name '_move_size_65537_272'
                                   4798 ;o                         Allocated with name '_move_o_65537_272'
                                   4799 ;------------------------------------------------------------
                                   4800 ;	move.c:5: void move() {
                                   4801 ;	-----------------------------------------
                                   4802 ;	 function move
                                   4803 ;	-----------------------------------------
      001684                       4804 _move:
                                   4805 ;	move.c:7: fillScreen(GRAY);
      001684 90 D6 BA         [24] 4806 	mov	dptr,#0xd6ba
      001687 12r08r44         [24] 4807 	lcall	_fillScreen
                                   4808 ;	move.c:8: setCursor(0, 0);
      00168A E4               [12] 4809 	clr	a
      00168B F5*00            [12] 4810 	mov	_setCursor_PARM_2,a
      00168D F5*01            [12] 4811 	mov	(_setCursor_PARM_2 + 1),a
      00168F 90 00 00         [24] 4812 	mov	dptr,#0x0000
      001692 12r00rB6         [24] 4813 	lcall	_setCursor
                                   4814 ;	move.c:19: setTextSize(2);
      001695 75 82 02         [24] 4815 	mov	dpl,#0x02
      001698 12r00rD0         [24] 4816 	lcall	_setTextSize
                                   4817 ;	move.c:20: LCD_string_write("Enter start address:\n");
      00169B 90r05r4E         [24] 4818 	mov	dptr,#___str_7
      00169E 75 F0 80         [24] 4819 	mov	b,#0x80
      0016A1 12r0Cr4B         [24] 4820 	lcall	_LCD_string_write
                                   4821 ;	move.c:21: startAdd = getAddress();
      0016A4 12r10r45         [24] 4822 	lcall	_getAddress
      0016A7 AE 82            [24] 4823 	mov	r6,dpl
      0016A9 AF 83            [24] 4824 	mov	r7,dph
                                   4825 ;	move.c:22: write('\n');
      0016AB 75 82 0A         [24] 4826 	mov	dpl,#0x0a
      0016AE C0 07            [24] 4827 	push	ar7
      0016B0 C0 06            [24] 4828 	push	ar6
      0016B2 12r0BrDD         [24] 4829 	lcall	_write
                                   4830 ;	move.c:25: LCD_string_write("Enter target address:\n");
      0016B5 90r06r9A         [24] 4831 	mov	dptr,#___str_28
      0016B8 75 F0 80         [24] 4832 	mov	b,#0x80
      0016BB 12r0Cr4B         [24] 4833 	lcall	_LCD_string_write
                                   4834 ;	move.c:26: targetAdd = getAddress();
      0016BE 12r10r45         [24] 4835 	lcall	_getAddress
      0016C1 AC 82            [24] 4836 	mov	r4,dpl
      0016C3 AD 83            [24] 4837 	mov	r5,dph
                                   4838 ;	move.c:27: write('\n');
      0016C5 75 82 0A         [24] 4839 	mov	dpl,#0x0a
      0016C8 C0 05            [24] 4840 	push	ar5
      0016CA C0 04            [24] 4841 	push	ar4
      0016CC 12r0BrDD         [24] 4842 	lcall	_write
                                   4843 ;	move.c:30: LCD_string_write("Enter size:\n");
      0016CF 90r06rB1         [24] 4844 	mov	dptr,#___str_29
      0016D2 75 F0 80         [24] 4845 	mov	b,#0x80
      0016D5 12r0Cr4B         [24] 4846 	lcall	_LCD_string_write
                                   4847 ;	move.c:31: size = getByte();
      0016D8 12r10rAC         [24] 4848 	lcall	_getByte
      0016DB AB 82            [24] 4849 	mov	r3,dpl
                                   4850 ;	move.c:32: write('\n');
      0016DD 75 82 0A         [24] 4851 	mov	dpl,#0x0a
      0016E0 C0 03            [24] 4852 	push	ar3
      0016E2 12r0BrDD         [24] 4853 	lcall	_write
                                   4854 ;	move.c:35: LCD_string_write("Move in progress...\n");
      0016E5 90r06rBE         [24] 4855 	mov	dptr,#___str_30
      0016E8 75 F0 80         [24] 4856 	mov	b,#0x80
      0016EB 12r0Cr4B         [24] 4857 	lcall	_LCD_string_write
      0016EE D0 03            [24] 4858 	pop	ar3
      0016F0 D0 04            [24] 4859 	pop	ar4
      0016F2 D0 05            [24] 4860 	pop	ar5
      0016F4 D0 06            [24] 4861 	pop	ar6
      0016F6 D0 07            [24] 4862 	pop	ar7
                                   4863 ;	move.c:38: for (i = 0; i < size; i++) {
      0016F8 79 00            [12] 4864 	mov	r1,#0x00
      0016FA 7A 00            [12] 4865 	mov	r2,#0x00
      0016FC                       4866 00109$:
      0016FC C0 04            [24] 4867 	push	ar4
      0016FE C0 05            [24] 4868 	push	ar5
      001700 8B 00            [24] 4869 	mov	ar0,r3
      001702 7D 00            [12] 4870 	mov	r5,#0x00
      001704 C3               [12] 4871 	clr	c
      001705 E9               [12] 4872 	mov	a,r1
      001706 98               [12] 4873 	subb	a,r0
      001707 EA               [12] 4874 	mov	a,r2
      001708 9D               [12] 4875 	subb	a,r5
      001709 D0 05            [24] 4876 	pop	ar5
      00170B D0 04            [24] 4877 	pop	ar4
      00170D 50 52            [24] 4878 	jnc	00104$
                                   4879 ;	move.c:40: if ((i + startAdd == __END_RAM__) || (i + targetAdd == __END_RAM__)) break;
      00170F C0 03            [24] 4880 	push	ar3
      001711 EE               [12] 4881 	mov	a,r6
      001712 29               [12] 4882 	add	a,r1
      001713 F8               [12] 4883 	mov	r0,a
      001714 EF               [12] 4884 	mov	a,r7
      001715 3A               [12] 4885 	addc	a,r2
      001716 FB               [12] 4886 	mov	r3,a
      001717 B8 FF 07         [24] 4887 	cjne	r0,#0xff,00135$
      00171A BB FF 04         [24] 4888 	cjne	r3,#0xff,00135$
      00171D D0 03            [24] 4889 	pop	ar3
      00171F 80 40            [24] 4890 	sjmp	00104$
      001721                       4891 00135$:
      001721 EC               [12] 4892 	mov	a,r4
      001722 29               [12] 4893 	add	a,r1
      001723 F8               [12] 4894 	mov	r0,a
      001724 ED               [12] 4895 	mov	a,r5
      001725 3A               [12] 4896 	addc	a,r2
      001726 FB               [12] 4897 	mov	r3,a
      001727 B8 FF 07         [24] 4898 	cjne	r0,#0xff,00136$
      00172A BB FF 04         [24] 4899 	cjne	r3,#0xff,00136$
      00172D D0 03            [24] 4900 	pop	ar3
      00172F 80 30            [24] 4901 	sjmp	00104$
      001731                       4902 00136$:
                                   4903 ;	move.c:45: IOM = 0;
                                   4904 ;	assignBit
      001731 C2 B4            [12] 4905 	clr	_P3_4
                                   4906 ;	move.c:46: origin = (uint16_t __xdata*)(startAdd + i);
      001733 E9               [12] 4907 	mov	a,r1
      001734 2E               [12] 4908 	add	a,r6
      001735 F8               [12] 4909 	mov	r0,a
      001736 EA               [12] 4910 	mov	a,r2
      001737 3F               [12] 4911 	addc	a,r7
      001738 FB               [12] 4912 	mov	r3,a
      001739 88 82            [24] 4913 	mov	dpl,r0
      00173B 8B 83            [24] 4914 	mov	dph,r3
                                   4915 ;	move.c:47: target = (uint16_t __xdata*)(targetAdd + i);
      00173D E9               [12] 4916 	mov	a,r1
      00173E 2C               [12] 4917 	add	a,r4
      00173F F8               [12] 4918 	mov	r0,a
      001740 EA               [12] 4919 	mov	a,r2
      001741 3D               [12] 4920 	addc	a,r5
      001742 FB               [12] 4921 	mov	r3,a
      001743 88*4F            [24] 4922 	mov	_move_target_65537_272,r0
      001745 8B*50            [24] 4923 	mov	(_move_target_65537_272 + 1),r3
                                   4924 ;	move.c:48: o = *origin;
      001747 E0               [24] 4925 	movx	a,@dptr
                                   4926 ;	move.c:49: *target = o;
      001748 F8               [12] 4927 	mov	r0,a
      001749 7B 00            [12] 4928 	mov	r3,#0x00
      00174B 85*4F 82         [24] 4929 	mov	dpl,_move_target_65537_272
      00174E 85*50 83         [24] 4930 	mov	dph,(_move_target_65537_272 + 1)
      001751 E8               [12] 4931 	mov	a,r0
      001752 F0               [24] 4932 	movx	@dptr,a
      001753 EB               [12] 4933 	mov	a,r3
      001754 A3               [24] 4934 	inc	dptr
      001755 F0               [24] 4935 	movx	@dptr,a
                                   4936 ;	move.c:50: IOM = 1;
                                   4937 ;	assignBit
      001756 D2 B4            [12] 4938 	setb	_P3_4
                                   4939 ;	move.c:38: for (i = 0; i < size; i++) {
      001758 09               [12] 4940 	inc	r1
      001759 B9 00 01         [24] 4941 	cjne	r1,#0x00,00137$
      00175C 0A               [12] 4942 	inc	r2
      00175D                       4943 00137$:
      00175D D0 03            [24] 4944 	pop	ar3
      00175F 80 9B            [24] 4945 	sjmp	00109$
      001761                       4946 00104$:
                                   4947 ;	move.c:57: LCD_string_write("Done!\n");
      001761 90r06rD3         [24] 4948 	mov	dptr,#___str_31
      001764 75 F0 80         [24] 4949 	mov	b,#0x80
      001767 12r0Cr4B         [24] 4950 	lcall	_LCD_string_write
                                   4951 ;	move.c:58: LCD_string_write("Press 1 for menu\n");
      00176A 90r05rE9         [24] 4952 	mov	dptr,#___str_17
      00176D 75 F0 80         [24] 4953 	mov	b,#0x80
      001770 12r0Cr4B         [24] 4954 	lcall	_LCD_string_write
                                   4955 ;	move.c:60: do {
      001773                       4956 00105$:
                                   4957 ;	move.c:61: size = keyDetect();
      001773 12r0CrEA         [24] 4958 	lcall	_keyDetect
      001776 AF 82            [24] 4959 	mov	r7,dpl
                                   4960 ;	move.c:62: } while (size != '1');
      001778 BF 31 F8         [24] 4961 	cjne	r7,#0x31,00105$
                                   4962 ;	move.c:63: }
      00177B 22               [24] 4963 	ret
                                   4964 ;------------------------------------------------------------
                                   4965 ;Allocation info for local variables in function 'editByte'
                                   4966 ;------------------------------------------------------------
                                   4967 ;ramAddress                Allocated to registers r6 r7 
                                   4968 ;add                       Allocated with name '_editByte_add_65536_276'
                                   4969 ;val                       Allocated with name '_editByte_val_65536_277'
                                   4970 ;new                       Allocated with name '_editByte_new_65536_277'
                                   4971 ;high                      Allocated with name '_editByte_high_65536_277'
                                   4972 ;low                       Allocated with name '_editByte_low_65536_277'
                                   4973 ;------------------------------------------------------------
                                   4974 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   4975 ;	-----------------------------------------
                                   4976 ;	 function editByte
                                   4977 ;	-----------------------------------------
      00177C                       4978 _editByte:
      00177C AF 83            [24] 4979 	mov	r7,dph
      00177E E5 82            [12] 4980 	mov	a,dpl
      001780 90r00r22         [24] 4981 	mov	dptr,#_editByte_add_65536_276
      001783 F0               [24] 4982 	movx	@dptr,a
      001784 EF               [12] 4983 	mov	a,r7
      001785 A3               [24] 4984 	inc	dptr
      001786 F0               [24] 4985 	movx	@dptr,a
                                   4986 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      001787 90r00r22         [24] 4987 	mov	dptr,#_editByte_add_65536_276
      00178A E0               [24] 4988 	movx	a,@dptr
      00178B FE               [12] 4989 	mov	r6,a
      00178C A3               [24] 4990 	inc	dptr
      00178D E0               [24] 4991 	movx	a,@dptr
      00178E FF               [12] 4992 	mov	r7,a
      00178F FC               [12] 4993 	mov	r4,a
                                   4994 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      001790 8E 05            [24] 4995 	mov	ar5,r6
                                   4996 ;	edit.c:16: asciiToHex(high);
      001792 8C 82            [24] 4997 	mov	dpl,r4
      001794 C0 07            [24] 4998 	push	ar7
      001796 C0 06            [24] 4999 	push	ar6
      001798 C0 05            [24] 5000 	push	ar5
      00179A C0 04            [24] 5001 	push	ar4
      00179C 12r0ErCC         [24] 5002 	lcall	_asciiToHex
      00179F D0 04            [24] 5003 	pop	ar4
      0017A1 D0 05            [24] 5004 	pop	ar5
                                   5005 ;	edit.c:17: asciiToHex(low);
      0017A3 8D 82            [24] 5006 	mov	dpl,r5
      0017A5 C0 05            [24] 5007 	push	ar5
      0017A7 C0 04            [24] 5008 	push	ar4
      0017A9 12r0ErCC         [24] 5009 	lcall	_asciiToHex
                                   5010 ;	edit.c:19: LCD_string_write(": ");
      0017AC 90r05r4B         [24] 5011 	mov	dptr,#___str_6
      0017AF 75 F0 80         [24] 5012 	mov	b,#0x80
      0017B2 12r0Cr4B         [24] 5013 	lcall	_LCD_string_write
      0017B5 D0 04            [24] 5014 	pop	ar4
      0017B7 D0 05            [24] 5015 	pop	ar5
      0017B9 D0 06            [24] 5016 	pop	ar6
      0017BB D0 07            [24] 5017 	pop	ar7
                                   5018 ;	edit.c:22: IOM = 0;
                                   5019 ;	assignBit
      0017BD C2 B4            [12] 5020 	clr	_P3_4
                                   5021 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   5022 ;	edit.c:24: val = *ramAddress;
      0017BF 8E 82            [24] 5023 	mov	dpl,r6
      0017C1 8F 83            [24] 5024 	mov	dph,r7
      0017C3 E0               [24] 5025 	movx	a,@dptr
      0017C4 FB               [12] 5026 	mov	r3,a
                                   5027 ;	edit.c:25: IOM = 1;
                                   5028 ;	assignBit
      0017C5 D2 B4            [12] 5029 	setb	_P3_4
                                   5030 ;	edit.c:28: asciiToHex(val);
      0017C7 8B 82            [24] 5031 	mov	dpl,r3
      0017C9 C0 07            [24] 5032 	push	ar7
      0017CB C0 06            [24] 5033 	push	ar6
      0017CD C0 05            [24] 5034 	push	ar5
      0017CF C0 04            [24] 5035 	push	ar4
      0017D1 12r0ErCC         [24] 5036 	lcall	_asciiToHex
                                   5037 ;	edit.c:31: write('\n');
      0017D4 75 82 0A         [24] 5038 	mov	dpl,#0x0a
      0017D7 12r0BrDD         [24] 5039 	lcall	_write
                                   5040 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      0017DA 90r06rDA         [24] 5041 	mov	dptr,#___str_32
      0017DD 75 F0 80         [24] 5042 	mov	b,#0x80
      0017E0 12r0Cr4B         [24] 5043 	lcall	_LCD_string_write
                                   5044 ;	edit.c:33: new = getByte();
      0017E3 12r10rAC         [24] 5045 	lcall	_getByte
      0017E6 AB 82            [24] 5046 	mov	r3,dpl
                                   5047 ;	edit.c:34: write('\n');
      0017E8 75 82 0A         [24] 5048 	mov	dpl,#0x0a
      0017EB C0 03            [24] 5049 	push	ar3
      0017ED 12r0BrDD         [24] 5050 	lcall	_write
      0017F0 D0 03            [24] 5051 	pop	ar3
      0017F2 D0 04            [24] 5052 	pop	ar4
      0017F4 D0 05            [24] 5053 	pop	ar5
      0017F6 D0 06            [24] 5054 	pop	ar6
      0017F8 D0 07            [24] 5055 	pop	ar7
                                   5056 ;	edit.c:37: IOM = 0;
                                   5057 ;	assignBit
      0017FA C2 B4            [12] 5058 	clr	_P3_4
                                   5059 ;	edit.c:38: *ramAddress = new;
      0017FC 7A 00            [12] 5060 	mov	r2,#0x00
      0017FE 8E 82            [24] 5061 	mov	dpl,r6
      001800 8F 83            [24] 5062 	mov	dph,r7
      001802 EB               [12] 5063 	mov	a,r3
      001803 F0               [24] 5064 	movx	@dptr,a
      001804 EA               [12] 5065 	mov	a,r2
      001805 A3               [24] 5066 	inc	dptr
      001806 F0               [24] 5067 	movx	@dptr,a
                                   5068 ;	edit.c:39: val = *ramAddress;
                                   5069 ;	edit.c:40: IOM = 1;
                                   5070 ;	assignBit
      001807 D2 B4            [12] 5071 	setb	_P3_4
                                   5072 ;	edit.c:43: asciiToHex(high);
      001809 8C 82            [24] 5073 	mov	dpl,r4
      00180B C0 05            [24] 5074 	push	ar5
      00180D C0 03            [24] 5075 	push	ar3
      00180F 12r0ErCC         [24] 5076 	lcall	_asciiToHex
      001812 D0 03            [24] 5077 	pop	ar3
      001814 D0 05            [24] 5078 	pop	ar5
                                   5079 ;	edit.c:44: asciiToHex(low);
      001816 8D 82            [24] 5080 	mov	dpl,r5
      001818 C0 03            [24] 5081 	push	ar3
      00181A 12r0ErCC         [24] 5082 	lcall	_asciiToHex
                                   5083 ;	edit.c:45: LCD_string_write(": ");
      00181D 90r05r4B         [24] 5084 	mov	dptr,#___str_6
      001820 75 F0 80         [24] 5085 	mov	b,#0x80
      001823 12r0Cr4B         [24] 5086 	lcall	_LCD_string_write
      001826 D0 03            [24] 5087 	pop	ar3
                                   5088 ;	edit.c:46: asciiToHex(val);
      001828 8B 82            [24] 5089 	mov	dpl,r3
      00182A 12r0ErCC         [24] 5090 	lcall	_asciiToHex
                                   5091 ;	edit.c:47: write('\n');
      00182D 75 82 0A         [24] 5092 	mov	dpl,#0x0a
                                   5093 ;	edit.c:49: }
      001830 02r0BrDD         [24] 5094 	ljmp	_write
                                   5095 ;------------------------------------------------------------
                                   5096 ;Allocation info for local variables in function 'edit'
                                   5097 ;------------------------------------------------------------
                                   5098 ;input                     Allocated with name '_edit_input_65537_279'
                                   5099 ;add                       Allocated with name '_edit_add_65537_279'
                                   5100 ;------------------------------------------------------------
                                   5101 ;	edit.c:55: void edit() {
                                   5102 ;	-----------------------------------------
                                   5103 ;	 function edit
                                   5104 ;	-----------------------------------------
      001833                       5105 _edit:
                                   5106 ;	edit.c:57: fillScreen(GRAY);
      001833 90 D6 BA         [24] 5107 	mov	dptr,#0xd6ba
      001836 12r08r44         [24] 5108 	lcall	_fillScreen
                                   5109 ;	edit.c:58: setCursor(0, 0);
      001839 E4               [12] 5110 	clr	a
      00183A F5*00            [12] 5111 	mov	_setCursor_PARM_2,a
      00183C F5*01            [12] 5112 	mov	(_setCursor_PARM_2 + 1),a
      00183E 90 00 00         [24] 5113 	mov	dptr,#0x0000
      001841 12r00rB6         [24] 5114 	lcall	_setCursor
                                   5115 ;	edit.c:59: setTextSize(2);
      001844 75 82 02         [24] 5116 	mov	dpl,#0x02
      001847 12r00rD0         [24] 5117 	lcall	_setTextSize
                                   5118 ;	edit.c:66: LCD_string_write("Enter address:\n");
      00184A 90r06rEB         [24] 5119 	mov	dptr,#___str_33
      00184D 75 F0 80         [24] 5120 	mov	b,#0x80
      001850 12r0Cr4B         [24] 5121 	lcall	_LCD_string_write
                                   5122 ;	edit.c:67: add = getAddress();
      001853 12r10r45         [24] 5123 	lcall	_getAddress
      001856 AE 82            [24] 5124 	mov	r6,dpl
      001858 AF 83            [24] 5125 	mov	r7,dph
                                   5126 ;	edit.c:68: write('\n');
      00185A 75 82 0A         [24] 5127 	mov	dpl,#0x0a
      00185D C0 07            [24] 5128 	push	ar7
      00185F C0 06            [24] 5129 	push	ar6
      001861 12r0BrDD         [24] 5130 	lcall	_write
      001864 D0 06            [24] 5131 	pop	ar6
      001866 D0 07            [24] 5132 	pop	ar7
                                   5133 ;	edit.c:71: editByte(add);
      001868 8E 82            [24] 5134 	mov	dpl,r6
      00186A 8F 83            [24] 5135 	mov	dph,r7
      00186C C0 07            [24] 5136 	push	ar7
      00186E C0 06            [24] 5137 	push	ar6
      001870 12r17r7C         [24] 5138 	lcall	_editByte
      001873 D0 06            [24] 5139 	pop	ar6
      001875 D0 07            [24] 5140 	pop	ar7
                                   5141 ;	edit.c:74: do {
      001877                       5142 00111$:
                                   5143 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      001877 90r05rE9         [24] 5144 	mov	dptr,#___str_17
      00187A 75 F0 80         [24] 5145 	mov	b,#0x80
      00187D C0 07            [24] 5146 	push	ar7
      00187F C0 06            [24] 5147 	push	ar6
      001881 12r0Cr4B         [24] 5148 	lcall	_LCD_string_write
                                   5149 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      001884 90r06rFB         [24] 5150 	mov	dptr,#___str_34
      001887 75 F0 80         [24] 5151 	mov	b,#0x80
      00188A 12r0Cr4B         [24] 5152 	lcall	_LCD_string_write
                                   5153 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      00188D 90r07r12         [24] 5154 	mov	dptr,#___str_35
      001890 75 F0 80         [24] 5155 	mov	b,#0x80
      001893 12r0Cr4B         [24] 5156 	lcall	_LCD_string_write
                                   5157 ;	edit.c:78: input = keyDetect();
      001896 12r0CrEA         [24] 5158 	lcall	_keyDetect
      001899 AD 82            [24] 5159 	mov	r5,dpl
      00189B D0 06            [24] 5160 	pop	ar6
      00189D D0 07            [24] 5161 	pop	ar7
      00189F 90r00r24         [24] 5162 	mov	dptr,#_edit_input_65537_279
      0018A2 ED               [12] 5163 	mov	a,r5
      0018A3 F0               [24] 5164 	movx	@dptr,a
                                   5165 ;	edit.c:80: if (input == '1') {
      0018A4 BD 31 01         [24] 5166 	cjne	r5,#0x31,00141$
      0018A7 22               [24] 5167 	ret
      0018A8                       5168 00141$:
                                   5169 ;	edit.c:82: } else if (input =='2') {
      0018A8 BD 32 2F         [24] 5170 	cjne	r5,#0x32,00104$
                                   5171 ;	edit.c:83: fillScreen(GRAY);
      0018AB 90 D6 BA         [24] 5172 	mov	dptr,#0xd6ba
      0018AE C0 07            [24] 5173 	push	ar7
      0018B0 C0 06            [24] 5174 	push	ar6
      0018B2 12r08r44         [24] 5175 	lcall	_fillScreen
                                   5176 ;	edit.c:84: setCursor(0, 0);
      0018B5 E4               [12] 5177 	clr	a
      0018B6 F5*00            [12] 5178 	mov	_setCursor_PARM_2,a
      0018B8 F5*01            [12] 5179 	mov	(_setCursor_PARM_2 + 1),a
      0018BA 90 00 00         [24] 5180 	mov	dptr,#0x0000
      0018BD 12r00rB6         [24] 5181 	lcall	_setCursor
      0018C0 D0 06            [24] 5182 	pop	ar6
      0018C2 D0 07            [24] 5183 	pop	ar7
                                   5184 ;	edit.c:86: editByte(add);
      0018C4 8E 82            [24] 5185 	mov	dpl,r6
      0018C6 8F 83            [24] 5186 	mov	dph,r7
      0018C8 C0 07            [24] 5187 	push	ar7
      0018CA C0 06            [24] 5188 	push	ar6
      0018CC 12r17r7C         [24] 5189 	lcall	_editByte
      0018CF D0 06            [24] 5190 	pop	ar6
      0018D1 D0 07            [24] 5191 	pop	ar7
                                   5192 ;	edit.c:88: input = 0;
      0018D3 90r00r24         [24] 5193 	mov	dptr,#_edit_input_65537_279
      0018D6 E4               [12] 5194 	clr	a
      0018D7 F0               [24] 5195 	movx	@dptr,a
      0018D8 80 35            [24] 5196 	sjmp	00112$
      0018DA                       5197 00104$:
                                   5198 ;	edit.c:89: } else if (input == '3') {
      0018DA BD 33 32         [24] 5199 	cjne	r5,#0x33,00112$
                                   5200 ;	edit.c:90: fillScreen(GRAY);
      0018DD 90 D6 BA         [24] 5201 	mov	dptr,#0xd6ba
      0018E0 C0 07            [24] 5202 	push	ar7
      0018E2 C0 06            [24] 5203 	push	ar6
      0018E4 12r08r44         [24] 5204 	lcall	_fillScreen
                                   5205 ;	edit.c:91: setCursor(0, 0);
      0018E7 E4               [12] 5206 	clr	a
      0018E8 F5*00            [12] 5207 	mov	_setCursor_PARM_2,a
      0018EA F5*01            [12] 5208 	mov	(_setCursor_PARM_2 + 1),a
      0018EC 90 00 00         [24] 5209 	mov	dptr,#0x0000
      0018EF 12r00rB6         [24] 5210 	lcall	_setCursor
      0018F2 D0 06            [24] 5211 	pop	ar6
      0018F4 D0 07            [24] 5212 	pop	ar7
                                   5213 ;	edit.c:93: editByte(++add);
      0018F6 0E               [12] 5214 	inc	r6
      0018F7 BE 00 01         [24] 5215 	cjne	r6,#0x00,00146$
      0018FA 0F               [12] 5216 	inc	r7
      0018FB                       5217 00146$:
      0018FB 8E 82            [24] 5218 	mov	dpl,r6
      0018FD 8F 83            [24] 5219 	mov	dph,r7
      0018FF C0 07            [24] 5220 	push	ar7
      001901 C0 06            [24] 5221 	push	ar6
      001903 12r17r7C         [24] 5222 	lcall	_editByte
      001906 D0 06            [24] 5223 	pop	ar6
      001908 D0 07            [24] 5224 	pop	ar7
                                   5225 ;	edit.c:95: input = 0;
      00190A 90r00r24         [24] 5226 	mov	dptr,#_edit_input_65537_279
      00190D E4               [12] 5227 	clr	a
      00190E F0               [24] 5228 	movx	@dptr,a
      00190F                       5229 00112$:
                                   5230 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      00190F 90r00r24         [24] 5231 	mov	dptr,#_edit_input_65537_279
      001912 E0               [24] 5232 	movx	a,@dptr
      001913 FD               [12] 5233 	mov	r5,a
      001914 BD 31 01         [24] 5234 	cjne	r5,#0x31,00147$
      001917 22               [24] 5235 	ret
      001918                       5236 00147$:
      001918 BD 32 01         [24] 5237 	cjne	r5,#0x32,00148$
      00191B 22               [24] 5238 	ret
      00191C                       5239 00148$:
      00191C BD 33 01         [24] 5240 	cjne	r5,#0x33,00149$
      00191F 22               [24] 5241 	ret
      001920                       5242 00149$:
      001920 02r18r77         [24] 5243 	ljmp	00111$
                                   5244 ;	edit.c:99: }
      001923 22               [24] 5245 	ret
                                   5246 ;------------------------------------------------------------
                                   5247 ;Allocation info for local variables in function 'printCount'
                                   5248 ;------------------------------------------------------------
                                   5249 ;count                     Allocated with name '_printCount_PARM_2'
                                   5250 ;key                       Allocated with name '_printCount_PARM_3'
                                   5251 ;index                     Allocated with name '_printCount_PARM_4'
                                   5252 ;number                    Allocated with name '_printCount_PARM_5'
                                   5253 ;start                     Allocated with name '_printCount_start_65536_284'
                                   5254 ;i                         Allocated to registers r4 
                                   5255 ;found                     Allocated to registers r7 
                                   5256 ;high                      Allocated to registers 
                                   5257 ;low                       Allocated to registers r6 
                                   5258 ;ramAddress                Allocated to registers 
                                   5259 ;------------------------------------------------------------
                                   5260 ;	count3.c:1: void printCount(uint16_t start, uint8_t count, uint8_t key, uint8_t index, uint8_t number) {
                                   5261 ;	-----------------------------------------
                                   5262 ;	 function printCount
                                   5263 ;	-----------------------------------------
      001924                       5264 _printCount:
      001924 85 82*55         [24] 5265 	mov	_printCount_start_65536_284,dpl
      001927 85 83*56         [24] 5266 	mov	(_printCount_start_65536_284 + 1),dph
                                   5267 ;	count3.c:3: fillScreen(GRAY);
      00192A 90 D6 BA         [24] 5268 	mov	dptr,#0xd6ba
      00192D 12r08r44         [24] 5269 	lcall	_fillScreen
                                   5270 ;	count3.c:4: setCursor(0, 0);
      001930 E4               [12] 5271 	clr	a
      001931 F5*00            [12] 5272 	mov	_setCursor_PARM_2,a
      001933 F5*01            [12] 5273 	mov	(_setCursor_PARM_2 + 1),a
      001935 90 00 00         [24] 5274 	mov	dptr,#0x0000
      001938 12r00rB6         [24] 5275 	lcall	_setCursor
                                   5276 ;	count3.c:5: setTextSize(2);
      00193B 75 82 02         [24] 5277 	mov	dpl,#0x02
      00193E 12r00rD0         [24] 5278 	lcall	_setTextSize
                                   5279 ;	count3.c:14: if (number == 0) {
      001941 E5*54            [12] 5280 	mov	a,_printCount_PARM_5
      001943 70 0B            [24] 5281 	jnz	00102$
                                   5282 ;	count3.c:15: LCD_string_write("No matches found\n");
      001945 90r07r30         [24] 5283 	mov	dptr,#___str_36
      001948 75 F0 80         [24] 5284 	mov	b,#0x80
      00194B 12r0Cr4B         [24] 5285 	lcall	_LCD_string_write
      00194E 80 0F            [24] 5286 	sjmp	00115$
      001950                       5287 00102$:
                                   5288 ;	count3.c:17: asciiToHex(number);
      001950 85*54 82         [24] 5289 	mov	dpl,_printCount_PARM_5
      001953 12r0ErCC         [24] 5290 	lcall	_asciiToHex
                                   5291 ;	count3.c:18: LCD_string_write(" matches found\n");
      001956 90r07r42         [24] 5292 	mov	dptr,#___str_37
      001959 75 F0 80         [24] 5293 	mov	b,#0x80
      00195C 12r0Cr4B         [24] 5294 	lcall	_LCD_string_write
                                   5295 ;	count3.c:22: for (i = 0; i < count; i++) {
      00195F                       5296 00115$:
      00195F AD*53            [24] 5297 	mov	r5,_printCount_PARM_4
      001961 7C 00            [12] 5298 	mov	r4,#0x00
      001963                       5299 00108$:
      001963 C3               [12] 5300 	clr	c
      001964 EC               [12] 5301 	mov	a,r4
      001965 95*51            [12] 5302 	subb	a,_printCount_PARM_2
      001967 40 01            [24] 5303 	jc	00130$
      001969 22               [24] 5304 	ret
      00196A                       5305 00130$:
                                   5306 ;	count3.c:23: IOM = 0;
                                   5307 ;	assignBit
      00196A C2 B4            [12] 5308 	clr	_P3_4
                                   5309 ;	count3.c:24: ramAddress = (uint8_t __xdata*)(start + i);
      00196C 8C 02            [24] 5310 	mov	ar2,r4
      00196E 7B 00            [12] 5311 	mov	r3,#0x00
      001970 A8*55            [24] 5312 	mov	r0,_printCount_start_65536_284
      001972 A9*56            [24] 5313 	mov	r1,(_printCount_start_65536_284 + 1)
      001974 EA               [12] 5314 	mov	a,r2
      001975 28               [12] 5315 	add	a,r0
      001976 FE               [12] 5316 	mov	r6,a
      001977 EB               [12] 5317 	mov	a,r3
      001978 39               [12] 5318 	addc	a,r1
      001979 FF               [12] 5319 	mov	r7,a
      00197A 8E 82            [24] 5320 	mov	dpl,r6
      00197C 8F 83            [24] 5321 	mov	dph,r7
                                   5322 ;	count3.c:25: found = *ramAddress;
      00197E E0               [24] 5323 	movx	a,@dptr
      00197F FF               [12] 5324 	mov	r7,a
                                   5325 ;	count3.c:26: IOM = 1;
                                   5326 ;	assignBit
      001980 D2 B4            [12] 5327 	setb	_P3_4
                                   5328 ;	count3.c:28: if (found == key) {
      001982 EF               [12] 5329 	mov	a,r7
      001983 B5*52 54         [24] 5330 	cjne	a,_printCount_PARM_3,00109$
                                   5331 ;	count3.c:30: asciiToHex(index++);
      001986 8D 82            [24] 5332 	mov	dpl,r5
      001988 0D               [12] 5333 	inc	r5
      001989 C0 05            [24] 5334 	push	ar5
      00198B C0 04            [24] 5335 	push	ar4
      00198D C0 03            [24] 5336 	push	ar3
      00198F C0 02            [24] 5337 	push	ar2
      001991 C0 01            [24] 5338 	push	ar1
      001993 C0 00            [24] 5339 	push	ar0
      001995 12r0ErCC         [24] 5340 	lcall	_asciiToHex
                                   5341 ;	count3.c:31: LCD_string_write(": ");
      001998 90r05r4B         [24] 5342 	mov	dptr,#___str_6
      00199B 75 F0 80         [24] 5343 	mov	b,#0x80
      00199E 12r0Cr4B         [24] 5344 	lcall	_LCD_string_write
      0019A1 D0 00            [24] 5345 	pop	ar0
      0019A3 D0 01            [24] 5346 	pop	ar1
      0019A5 D0 02            [24] 5347 	pop	ar2
      0019A7 D0 03            [24] 5348 	pop	ar3
      0019A9 D0 04            [24] 5349 	pop	ar4
      0019AB D0 05            [24] 5350 	pop	ar5
                                   5351 ;	count3.c:33: high = HIGHBYTE(start + i);
      0019AD EA               [12] 5352 	mov	a,r2
      0019AE 28               [12] 5353 	add	a,r0
      0019AF EB               [12] 5354 	mov	a,r3
      0019B0 39               [12] 5355 	addc	a,r1
      0019B1 F5 82            [12] 5356 	mov	dpl,a
                                   5357 ;	count3.c:34: low = LOWBYTE(start + i);
      0019B3 AE*55            [24] 5358 	mov	r6,_printCount_start_65536_284
      0019B5 EC               [12] 5359 	mov	a,r4
      0019B6 2E               [12] 5360 	add	a,r6
      0019B7 FE               [12] 5361 	mov	r6,a
                                   5362 ;	count3.c:37: asciiToHex(high);
      0019B8 C0 06            [24] 5363 	push	ar6
      0019BA C0 05            [24] 5364 	push	ar5
      0019BC C0 04            [24] 5365 	push	ar4
      0019BE 12r0ErCC         [24] 5366 	lcall	_asciiToHex
      0019C1 D0 04            [24] 5367 	pop	ar4
      0019C3 D0 05            [24] 5368 	pop	ar5
      0019C5 D0 06            [24] 5369 	pop	ar6
                                   5370 ;	count3.c:38: asciiToHex(low);
      0019C7 8E 82            [24] 5371 	mov	dpl,r6
      0019C9 C0 05            [24] 5372 	push	ar5
      0019CB C0 04            [24] 5373 	push	ar4
      0019CD 12r0ErCC         [24] 5374 	lcall	_asciiToHex
                                   5375 ;	count3.c:40: write('\n');
      0019D0 75 82 0A         [24] 5376 	mov	dpl,#0x0a
      0019D3 12r0BrDD         [24] 5377 	lcall	_write
      0019D6 D0 04            [24] 5378 	pop	ar4
      0019D8 D0 05            [24] 5379 	pop	ar5
      0019DA                       5380 00109$:
                                   5381 ;	count3.c:22: for (i = 0; i < count; i++) {
      0019DA 0C               [12] 5382 	inc	r4
                                   5383 ;	count3.c:43: }
      0019DB 02r19r63         [24] 5384 	ljmp	00108$
                                   5385 ;------------------------------------------------------------
                                   5386 ;Allocation info for local variables in function 'count'
                                   5387 ;------------------------------------------------------------
                                   5388 ;key                       Allocated to registers r7 
                                   5389 ;i                         Allocated with name '_count_i_65537_293'
                                   5390 ;n                         Allocated with name '_count_n_65537_293'
                                   5391 ;found                     Allocated to registers r3 
                                   5392 ;ramAddress                Allocated to registers 
                                   5393 ;size                      Allocated with name '_count_size_65537_293'
                                   5394 ;input                     Allocated with name '_count_input_65537_293'
                                   5395 ;page                      Allocated with name '_count_page_65537_293'
                                   5396 ;index                     Allocated with name '_count_index_65537_293'
                                   5397 ;pages                     Allocated with name '_count_pages_65537_293'
                                   5398 ;address                   Allocated with name '_count_address_65537_293'
                                   5399 ;------------------------------------------------------------
                                   5400 ;	count3.c:45: void count() {
                                   5401 ;	-----------------------------------------
                                   5402 ;	 function count
                                   5403 ;	-----------------------------------------
      0019DE                       5404 _count:
                                   5405 ;	count3.c:47: fillScreen(GRAY);
      0019DE 90 D6 BA         [24] 5406 	mov	dptr,#0xd6ba
      0019E1 12r08r44         [24] 5407 	lcall	_fillScreen
                                   5408 ;	count3.c:48: setCursor(0, 0);
      0019E4 E4               [12] 5409 	clr	a
      0019E5 F5*00            [12] 5410 	mov	_setCursor_PARM_2,a
      0019E7 F5*01            [12] 5411 	mov	(_setCursor_PARM_2 + 1),a
      0019E9 90 00 00         [24] 5412 	mov	dptr,#0x0000
      0019EC 12r00rB6         [24] 5413 	lcall	_setCursor
                                   5414 ;	count3.c:49: setTextSize(2);
      0019EF 75 82 02         [24] 5415 	mov	dpl,#0x02
      0019F2 12r00rD0         [24] 5416 	lcall	_setTextSize
                                   5417 ;	count3.c:58: __xdata uint8_t page = 1;
      0019F5 90r00r25         [24] 5418 	mov	dptr,#_count_page_65537_293
      0019F8 74 01            [12] 5419 	mov	a,#0x01
      0019FA F0               [24] 5420 	movx	@dptr,a
                                   5421 ;	count3.c:59: __xdata uint8_t index = 0;
      0019FB 90r00r26         [24] 5422 	mov	dptr,#_count_index_65537_293
      0019FE E4               [12] 5423 	clr	a
      0019FF F0               [24] 5424 	movx	@dptr,a
                                   5425 ;	count3.c:65: LCD_string_write("Enter byte to count:\n");
      001A00 90r07r52         [24] 5426 	mov	dptr,#___str_38
      001A03 75 F0 80         [24] 5427 	mov	b,#0x80
      001A06 12r0Cr4B         [24] 5428 	lcall	_LCD_string_write
                                   5429 ;	count3.c:66: key = getByte();
      001A09 12r10rAC         [24] 5430 	lcall	_getByte
      001A0C AF 82            [24] 5431 	mov	r7,dpl
                                   5432 ;	count3.c:67: write('\n');
      001A0E 75 82 0A         [24] 5433 	mov	dpl,#0x0a
      001A11 C0 07            [24] 5434 	push	ar7
      001A13 12r0BrDD         [24] 5435 	lcall	_write
                                   5436 ;	count3.c:70: LCD_string_write("Enter start address:\n");
      001A16 90r05r4E         [24] 5437 	mov	dptr,#___str_7
      001A19 75 F0 80         [24] 5438 	mov	b,#0x80
      001A1C 12r0Cr4B         [24] 5439 	lcall	_LCD_string_write
                                   5440 ;	count3.c:71: address = getAddress();
      001A1F 12r10r45         [24] 5441 	lcall	_getAddress
      001A22 AD 82            [24] 5442 	mov	r5,dpl
      001A24 AE 83            [24] 5443 	mov	r6,dph
      001A26 90r00r27         [24] 5444 	mov	dptr,#_count_address_65537_293
      001A29 ED               [12] 5445 	mov	a,r5
      001A2A F0               [24] 5446 	movx	@dptr,a
      001A2B EE               [12] 5447 	mov	a,r6
      001A2C A3               [24] 5448 	inc	dptr
      001A2D F0               [24] 5449 	movx	@dptr,a
                                   5450 ;	count3.c:72: write('\n');
      001A2E 75 82 0A         [24] 5451 	mov	dpl,#0x0a
      001A31 C0 06            [24] 5452 	push	ar6
      001A33 C0 05            [24] 5453 	push	ar5
      001A35 12r0BrDD         [24] 5454 	lcall	_write
                                   5455 ;	count3.c:75: LCD_string_write("Enter block size:\n");
      001A38 90r05rAE         [24] 5456 	mov	dptr,#___str_14
      001A3B 75 F0 80         [24] 5457 	mov	b,#0x80
      001A3E 12r0Cr4B         [24] 5458 	lcall	_LCD_string_write
                                   5459 ;	count3.c:76: size = getByte();
      001A41 12r10rAC         [24] 5460 	lcall	_getByte
      001A44 AC 82            [24] 5461 	mov	r4,dpl
                                   5462 ;	count3.c:77: write('\n');
      001A46 75 82 0A         [24] 5463 	mov	dpl,#0x0a
      001A49 C0 04            [24] 5464 	push	ar4
      001A4B 12r0BrDD         [24] 5465 	lcall	_write
      001A4E D0 04            [24] 5466 	pop	ar4
      001A50 D0 05            [24] 5467 	pop	ar5
      001A52 D0 06            [24] 5468 	pop	ar6
      001A54 D0 07            [24] 5469 	pop	ar7
                                   5470 ;	count3.c:80: for (i = 0; i < size; i++) {
      001A56 75*58 00         [24] 5471 	mov	_count_n_65537_293,#0x00
      001A59 75*57 00         [24] 5472 	mov	_count_i_65537_293,#0x00
      001A5C                       5473 00135$:
      001A5C C3               [12] 5474 	clr	c
      001A5D E5*57            [12] 5475 	mov	a,_count_i_65537_293
      001A5F 9C               [12] 5476 	subb	a,r4
      001A60 50 22            [24] 5477 	jnc	00158$
                                   5478 ;	count3.c:81: IOM = 0;
                                   5479 ;	assignBit
      001A62 C2 B4            [12] 5480 	clr	_P3_4
                                   5481 ;	count3.c:82: ramAddress = (uint16_t __xdata*)(address + i);
      001A64 A8*57            [24] 5482 	mov	r0,_count_i_65537_293
      001A66 79 00            [12] 5483 	mov	r1,#0x00
      001A68 8D 02            [24] 5484 	mov	ar2,r5
      001A6A 8E 03            [24] 5485 	mov	ar3,r6
      001A6C E8               [12] 5486 	mov	a,r0
      001A6D 2A               [12] 5487 	add	a,r2
      001A6E FA               [12] 5488 	mov	r2,a
      001A6F E9               [12] 5489 	mov	a,r1
      001A70 3B               [12] 5490 	addc	a,r3
      001A71 FB               [12] 5491 	mov	r3,a
      001A72 8A 82            [24] 5492 	mov	dpl,r2
      001A74 8B 83            [24] 5493 	mov	dph,r3
                                   5494 ;	count3.c:83: found = *ramAddress;
      001A76 E0               [24] 5495 	movx	a,@dptr
      001A77 FB               [12] 5496 	mov	r3,a
                                   5497 ;	count3.c:84: IOM = 1;
                                   5498 ;	assignBit
      001A78 D2 B4            [12] 5499 	setb	_P3_4
                                   5500 ;	count3.c:86: if (found == key) n++;
      001A7A EB               [12] 5501 	mov	a,r3
      001A7B B5 07 02         [24] 5502 	cjne	a,ar7,00136$
      001A7E 05*58            [12] 5503 	inc	_count_n_65537_293
      001A80                       5504 00136$:
                                   5505 ;	count3.c:80: for (i = 0; i < size; i++) {
      001A80 05*57            [12] 5506 	inc	_count_i_65537_293
      001A82 80 D8            [24] 5507 	sjmp	00135$
      001A84                       5508 00158$:
      001A84 AB*58            [24] 5509 	mov	r3,_count_n_65537_293
                                   5510 ;	count3.c:90: if (n > NUM) {
      001A86 C3               [12] 5511 	clr	c
      001A87 74 0F            [12] 5512 	mov	a,#0x0f
      001A89 95*58            [12] 5513 	subb	a,_count_n_65537_293
      001A8B E4               [12] 5514 	clr	a
      001A8C 33               [12] 5515 	rlc	a
      001A8D FA               [12] 5516 	mov	r2,a
      001A8E 60 2A            [24] 5517 	jz	00105$
                                   5518 ;	count3.c:91: printCount(address, NUM, key, index, n);
      001A90 75*51 0F         [24] 5519 	mov	_printCount_PARM_2,#0x0f
      001A93 8F*52            [24] 5520 	mov	_printCount_PARM_3,r7
      001A95 75*53 00         [24] 5521 	mov	_printCount_PARM_4,#0x00
      001A98 85*58*54         [24] 5522 	mov	_printCount_PARM_5,_count_n_65537_293
      001A9B 8D 82            [24] 5523 	mov	dpl,r5
      001A9D 8E 83            [24] 5524 	mov	dph,r6
      001A9F C0 07            [24] 5525 	push	ar7
      001AA1 C0 04            [24] 5526 	push	ar4
      001AA3 C0 03            [24] 5527 	push	ar3
      001AA5 C0 02            [24] 5528 	push	ar2
      001AA7 12r19r24         [24] 5529 	lcall	_printCount
      001AAA D0 02            [24] 5530 	pop	ar2
      001AAC D0 03            [24] 5531 	pop	ar3
      001AAE D0 04            [24] 5532 	pop	ar4
      001AB0 D0 07            [24] 5533 	pop	ar7
                                   5534 ;	count3.c:92: index += NUM;
      001AB2 90r00r26         [24] 5535 	mov	dptr,#_count_index_65537_293
      001AB5 74 0F            [12] 5536 	mov	a,#0x0f
      001AB7 F0               [24] 5537 	movx	@dptr,a
      001AB8 80 22            [24] 5538 	sjmp	00106$
      001ABA                       5539 00105$:
                                   5540 ;	count3.c:94: printCount(address, n, key, index, n);
      001ABA 85*58*51         [24] 5541 	mov	_printCount_PARM_2,_count_n_65537_293
      001ABD 8F*52            [24] 5542 	mov	_printCount_PARM_3,r7
      001ABF 75*53 00         [24] 5543 	mov	_printCount_PARM_4,#0x00
      001AC2 85*58*54         [24] 5544 	mov	_printCount_PARM_5,_count_n_65537_293
      001AC5 8D 82            [24] 5545 	mov	dpl,r5
      001AC7 8E 83            [24] 5546 	mov	dph,r6
      001AC9 C0 07            [24] 5547 	push	ar7
      001ACB C0 04            [24] 5548 	push	ar4
      001ACD C0 03            [24] 5549 	push	ar3
      001ACF C0 02            [24] 5550 	push	ar2
      001AD1 12r19r24         [24] 5551 	lcall	_printCount
      001AD4 D0 02            [24] 5552 	pop	ar2
      001AD6 D0 03            [24] 5553 	pop	ar3
      001AD8 D0 04            [24] 5554 	pop	ar4
      001ADA D0 07            [24] 5555 	pop	ar7
      001ADC                       5556 00106$:
                                   5557 ;	count3.c:97: pages = size / NUM;
      001ADC 7E 00            [12] 5558 	mov	r6,#0x00
      001ADE 75*00 0F         [24] 5559 	mov	__divsint_PARM_2,#0x0f
                                   5560 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001AE1 8E*01            [24] 5561 	mov	(__divsint_PARM_2 + 1),r6
      001AE3 8C 82            [24] 5562 	mov	dpl,r4
      001AE5 8E 83            [24] 5563 	mov	dph,r6
      001AE7 C0 07            [24] 5564 	push	ar7
      001AE9 C0 03            [24] 5565 	push	ar3
      001AEB C0 02            [24] 5566 	push	ar2
      001AED 12r00r00         [24] 5567 	lcall	__divsint
      001AF0 AD 82            [24] 5568 	mov	r5,dpl
      001AF2 AE 83            [24] 5569 	mov	r6,dph
      001AF4 D0 02            [24] 5570 	pop	ar2
      001AF6 D0 03            [24] 5571 	pop	ar3
      001AF8 D0 07            [24] 5572 	pop	ar7
                                   5573 ;	count3.c:100: do {
      001AFA                       5574 00131$:
                                   5575 ;	count3.c:102: if (page != 1 && page != pages && n > NUM) {
      001AFA 90r00r25         [24] 5576 	mov	dptr,#_count_page_65537_293
      001AFD E0               [24] 5577 	movx	a,@dptr
      001AFE FE               [12] 5578 	mov	r6,a
      001AFF BE 01 02         [24] 5579 	cjne	r6,#0x01,00220$
      001B02 80 2D            [24] 5580 	sjmp	00115$
      001B04                       5581 00220$:
      001B04 EE               [12] 5582 	mov	a,r6
      001B05 B5 05 02         [24] 5583 	cjne	a,ar5,00221$
      001B08 80 27            [24] 5584 	sjmp	00115$
      001B0A                       5585 00221$:
      001B0A EA               [12] 5586 	mov	a,r2
      001B0B 60 24            [24] 5587 	jz	00115$
                                   5588 ;	count3.c:103: LCD_string_write("Press A for previous\n");
      001B0D 90r05rC1         [24] 5589 	mov	dptr,#___str_15
      001B10 75 F0 80         [24] 5590 	mov	b,#0x80
      001B13 C0 07            [24] 5591 	push	ar7
      001B15 C0 05            [24] 5592 	push	ar5
      001B17 C0 03            [24] 5593 	push	ar3
      001B19 C0 02            [24] 5594 	push	ar2
      001B1B 12r0Cr4B         [24] 5595 	lcall	_LCD_string_write
                                   5596 ;	count3.c:104: LCD_string_write("Press B for next\n");
      001B1E 90r05rD7         [24] 5597 	mov	dptr,#___str_16
      001B21 75 F0 80         [24] 5598 	mov	b,#0x80
      001B24 12r0Cr4B         [24] 5599 	lcall	_LCD_string_write
      001B27 D0 02            [24] 5600 	pop	ar2
      001B29 D0 03            [24] 5601 	pop	ar3
      001B2B D0 05            [24] 5602 	pop	ar5
      001B2D D0 07            [24] 5603 	pop	ar7
      001B2F 80 4D            [24] 5604 	sjmp	00116$
      001B31                       5605 00115$:
                                   5606 ;	count3.c:105: } else if (page != pages && n > NUM) {
      001B31 90r00r25         [24] 5607 	mov	dptr,#_count_page_65537_293
      001B34 E0               [24] 5608 	movx	a,@dptr
      001B35 B5 05 02         [24] 5609 	cjne	a,ar5,00223$
      001B38 80 1E            [24] 5610 	sjmp	00111$
      001B3A                       5611 00223$:
      001B3A EA               [12] 5612 	mov	a,r2
      001B3B 60 1B            [24] 5613 	jz	00111$
                                   5614 ;	count3.c:106: LCD_string_write("Press B for next\n");
      001B3D 90r05rD7         [24] 5615 	mov	dptr,#___str_16
      001B40 75 F0 80         [24] 5616 	mov	b,#0x80
      001B43 C0 07            [24] 5617 	push	ar7
      001B45 C0 05            [24] 5618 	push	ar5
      001B47 C0 03            [24] 5619 	push	ar3
      001B49 C0 02            [24] 5620 	push	ar2
      001B4B 12r0Cr4B         [24] 5621 	lcall	_LCD_string_write
      001B4E D0 02            [24] 5622 	pop	ar2
      001B50 D0 03            [24] 5623 	pop	ar3
      001B52 D0 05            [24] 5624 	pop	ar5
      001B54 D0 07            [24] 5625 	pop	ar7
      001B56 80 26            [24] 5626 	sjmp	00116$
      001B58                       5627 00111$:
                                   5628 ;	count3.c:107: } else if (page != 1 && n > NUM) {
      001B58 90r00r25         [24] 5629 	mov	dptr,#_count_page_65537_293
      001B5B E0               [24] 5630 	movx	a,@dptr
      001B5C FE               [12] 5631 	mov	r6,a
      001B5D BE 01 02         [24] 5632 	cjne	r6,#0x01,00225$
      001B60 80 1C            [24] 5633 	sjmp	00116$
      001B62                       5634 00225$:
      001B62 EA               [12] 5635 	mov	a,r2
      001B63 60 19            [24] 5636 	jz	00116$
                                   5637 ;	count3.c:108: LCD_string_write("Press A for previous\n");
      001B65 90r05rC1         [24] 5638 	mov	dptr,#___str_15
      001B68 75 F0 80         [24] 5639 	mov	b,#0x80
      001B6B C0 07            [24] 5640 	push	ar7
      001B6D C0 05            [24] 5641 	push	ar5
      001B6F C0 03            [24] 5642 	push	ar3
      001B71 C0 02            [24] 5643 	push	ar2
      001B73 12r0Cr4B         [24] 5644 	lcall	_LCD_string_write
      001B76 D0 02            [24] 5645 	pop	ar2
      001B78 D0 03            [24] 5646 	pop	ar3
      001B7A D0 05            [24] 5647 	pop	ar5
      001B7C D0 07            [24] 5648 	pop	ar7
      001B7E                       5649 00116$:
                                   5650 ;	count3.c:112: LCD_string_write("Press 1 for menu\n");
      001B7E 90r05rE9         [24] 5651 	mov	dptr,#___str_17
      001B81 75 F0 80         [24] 5652 	mov	b,#0x80
      001B84 C0 07            [24] 5653 	push	ar7
      001B86 C0 05            [24] 5654 	push	ar5
      001B88 C0 03            [24] 5655 	push	ar3
      001B8A C0 02            [24] 5656 	push	ar2
      001B8C 12r0Cr4B         [24] 5657 	lcall	_LCD_string_write
                                   5658 ;	count3.c:115: input = keyDetect();
      001B8F 12r0CrEA         [24] 5659 	lcall	_keyDetect
      001B92 AE 82            [24] 5660 	mov	r6,dpl
      001B94 D0 02            [24] 5661 	pop	ar2
      001B96 D0 03            [24] 5662 	pop	ar3
      001B98 D0 05            [24] 5663 	pop	ar5
      001B9A D0 07            [24] 5664 	pop	ar7
                                   5665 ;	count3.c:118: if (input == '1') {
      001B9C BE 31 01         [24] 5666 	cjne	r6,#0x31,00227$
      001B9F 22               [24] 5667 	ret
      001BA0                       5668 00227$:
                                   5669 ;	count3.c:120: } else if (input == 'B' && page != pages && n > NUM) {
      001BA0 BE 42 64         [24] 5670 	cjne	r6,#0x42,00124$
      001BA3 90r00r25         [24] 5671 	mov	dptr,#_count_page_65537_293
      001BA6 E0               [24] 5672 	movx	a,@dptr
      001BA7 FC               [12] 5673 	mov	r4,a
      001BA8 B5 05 02         [24] 5674 	cjne	a,ar5,00230$
      001BAB 80 5A            [24] 5675 	sjmp	00124$
      001BAD                       5676 00230$:
      001BAD EA               [12] 5677 	mov	a,r2
      001BAE 60 57            [24] 5678 	jz	00124$
                                   5679 ;	count3.c:121: index += NUM;
      001BB0 90r00r26         [24] 5680 	mov	dptr,#_count_index_65537_293
      001BB3 E0               [24] 5681 	movx	a,@dptr
      001BB4 24 0F            [12] 5682 	add	a,#0x0f
      001BB6 F0               [24] 5683 	movx	@dptr,a
                                   5684 ;	count3.c:122: address += NUM;
      001BB7 90r00r27         [24] 5685 	mov	dptr,#_count_address_65537_293
      001BBA E0               [24] 5686 	movx	a,@dptr
      001BBB F8               [12] 5687 	mov	r0,a
      001BBC A3               [24] 5688 	inc	dptr
      001BBD E0               [24] 5689 	movx	a,@dptr
      001BBE F9               [12] 5690 	mov	r1,a
      001BBF 74 0F            [12] 5691 	mov	a,#0x0f
      001BC1 28               [12] 5692 	add	a,r0
      001BC2 F8               [12] 5693 	mov	r0,a
      001BC3 E4               [12] 5694 	clr	a
      001BC4 39               [12] 5695 	addc	a,r1
      001BC5 F9               [12] 5696 	mov	r1,a
      001BC6 90r00r27         [24] 5697 	mov	dptr,#_count_address_65537_293
      001BC9 E8               [12] 5698 	mov	a,r0
      001BCA F0               [24] 5699 	movx	@dptr,a
      001BCB E9               [12] 5700 	mov	a,r1
      001BCC A3               [24] 5701 	inc	dptr
      001BCD F0               [24] 5702 	movx	@dptr,a
                                   5703 ;	count3.c:123: printCount(address, NUM, key, index, n);
      001BCE 90r00r27         [24] 5704 	mov	dptr,#_count_address_65537_293
      001BD1 E0               [24] 5705 	movx	a,@dptr
      001BD2 F8               [12] 5706 	mov	r0,a
      001BD3 A3               [24] 5707 	inc	dptr
      001BD4 E0               [24] 5708 	movx	a,@dptr
      001BD5 F9               [12] 5709 	mov	r1,a
      001BD6 90r00r26         [24] 5710 	mov	dptr,#_count_index_65537_293
      001BD9 E0               [24] 5711 	movx	a,@dptr
      001BDA F5*53            [12] 5712 	mov	_printCount_PARM_4,a
      001BDC 75*51 0F         [24] 5713 	mov	_printCount_PARM_2,#0x0f
      001BDF 8F*52            [24] 5714 	mov	_printCount_PARM_3,r7
      001BE1 8B*54            [24] 5715 	mov	_printCount_PARM_5,r3
      001BE3 88 82            [24] 5716 	mov	dpl,r0
      001BE5 89 83            [24] 5717 	mov	dph,r1
      001BE7 C0 07            [24] 5718 	push	ar7
      001BE9 C0 05            [24] 5719 	push	ar5
      001BEB C0 04            [24] 5720 	push	ar4
      001BED C0 03            [24] 5721 	push	ar3
      001BEF C0 02            [24] 5722 	push	ar2
      001BF1 12r19r24         [24] 5723 	lcall	_printCount
      001BF4 D0 02            [24] 5724 	pop	ar2
      001BF6 D0 03            [24] 5725 	pop	ar3
      001BF8 D0 04            [24] 5726 	pop	ar4
      001BFA D0 05            [24] 5727 	pop	ar5
      001BFC D0 07            [24] 5728 	pop	ar7
                                   5729 ;	count3.c:124: page++;
      001BFE 90r00r25         [24] 5730 	mov	dptr,#_count_page_65537_293
      001C01 EC               [12] 5731 	mov	a,r4
      001C02 04               [12] 5732 	inc	a
      001C03 F0               [24] 5733 	movx	@dptr,a
      001C04 02r1ArFA         [24] 5734 	ljmp	00131$
      001C07                       5735 00124$:
                                   5736 ;	count3.c:125: } else if (input == 'A' && page != 1 && n > NUM) {
      001C07 BE 41 02         [24] 5737 	cjne	r6,#0x41,00232$
      001C0A 80 03            [24] 5738 	sjmp	00233$
      001C0C                       5739 00232$:
      001C0C 02r1ArFA         [24] 5740 	ljmp	00131$
      001C0F                       5741 00233$:
      001C0F 90r00r25         [24] 5742 	mov	dptr,#_count_page_65537_293
      001C12 E0               [24] 5743 	movx	a,@dptr
      001C13 FE               [12] 5744 	mov	r6,a
      001C14 BE 01 03         [24] 5745 	cjne	r6,#0x01,00234$
      001C17 02r1ArFA         [24] 5746 	ljmp	00131$
      001C1A                       5747 00234$:
      001C1A EA               [12] 5748 	mov	a,r2
      001C1B 70 03            [24] 5749 	jnz	00235$
      001C1D 02r1ArFA         [24] 5750 	ljmp	00131$
      001C20                       5751 00235$:
                                   5752 ;	count3.c:126: index -= NUM;
      001C20 90r00r26         [24] 5753 	mov	dptr,#_count_index_65537_293
      001C23 E0               [24] 5754 	movx	a,@dptr
      001C24 24 F1            [12] 5755 	add	a,#0xf1
      001C26 F0               [24] 5756 	movx	@dptr,a
                                   5757 ;	count3.c:127: address -= NUM;
      001C27 90r00r27         [24] 5758 	mov	dptr,#_count_address_65537_293
      001C2A E0               [24] 5759 	movx	a,@dptr
      001C2B F9               [12] 5760 	mov	r1,a
      001C2C A3               [24] 5761 	inc	dptr
      001C2D E0               [24] 5762 	movx	a,@dptr
      001C2E FC               [12] 5763 	mov	r4,a
      001C2F E9               [12] 5764 	mov	a,r1
      001C30 24 F1            [12] 5765 	add	a,#0xf1
      001C32 F9               [12] 5766 	mov	r1,a
      001C33 EC               [12] 5767 	mov	a,r4
      001C34 34 FF            [12] 5768 	addc	a,#0xff
      001C36 FC               [12] 5769 	mov	r4,a
      001C37 90r00r27         [24] 5770 	mov	dptr,#_count_address_65537_293
      001C3A E9               [12] 5771 	mov	a,r1
      001C3B F0               [24] 5772 	movx	@dptr,a
      001C3C EC               [12] 5773 	mov	a,r4
      001C3D A3               [24] 5774 	inc	dptr
      001C3E F0               [24] 5775 	movx	@dptr,a
                                   5776 ;	count3.c:128: printCount(address, NUM, key, index, n);
      001C3F 90r00r27         [24] 5777 	mov	dptr,#_count_address_65537_293
      001C42 E0               [24] 5778 	movx	a,@dptr
      001C43 F9               [12] 5779 	mov	r1,a
      001C44 A3               [24] 5780 	inc	dptr
      001C45 E0               [24] 5781 	movx	a,@dptr
      001C46 FC               [12] 5782 	mov	r4,a
      001C47 90r00r26         [24] 5783 	mov	dptr,#_count_index_65537_293
      001C4A E0               [24] 5784 	movx	a,@dptr
      001C4B F5*53            [12] 5785 	mov	_printCount_PARM_4,a
      001C4D 75*51 0F         [24] 5786 	mov	_printCount_PARM_2,#0x0f
      001C50 8F*52            [24] 5787 	mov	_printCount_PARM_3,r7
      001C52 8B*54            [24] 5788 	mov	_printCount_PARM_5,r3
      001C54 89 82            [24] 5789 	mov	dpl,r1
      001C56 8C 83            [24] 5790 	mov	dph,r4
      001C58 C0 07            [24] 5791 	push	ar7
      001C5A C0 06            [24] 5792 	push	ar6
      001C5C C0 05            [24] 5793 	push	ar5
      001C5E C0 03            [24] 5794 	push	ar3
      001C60 C0 02            [24] 5795 	push	ar2
      001C62 12r19r24         [24] 5796 	lcall	_printCount
      001C65 D0 02            [24] 5797 	pop	ar2
      001C67 D0 03            [24] 5798 	pop	ar3
      001C69 D0 05            [24] 5799 	pop	ar5
      001C6B D0 06            [24] 5800 	pop	ar6
      001C6D D0 07            [24] 5801 	pop	ar7
                                   5802 ;	count3.c:129: page--;
      001C6F EE               [12] 5803 	mov	a,r6
      001C70 14               [12] 5804 	dec	a
      001C71 90r00r25         [24] 5805 	mov	dptr,#_count_page_65537_293
      001C74 F0               [24] 5806 	movx	@dptr,a
                                   5807 ;	count3.c:131: } while (1);
                                   5808 ;	count3.c:132: }
      001C75 02r1ArFA         [24] 5809 	ljmp	00131$
                                   5810 ;------------------------------------------------------------
                                   5811 ;Allocation info for local variables in function 'readTemp'
                                   5812 ;------------------------------------------------------------
                                   5813 ;val                       Allocated with name '_readTemp_val_65536_305'
                                   5814 ;address                   Allocated to registers 
                                   5815 ;------------------------------------------------------------
                                   5816 ;	analog.c:6: uint8_t readTemp() {
                                   5817 ;	-----------------------------------------
                                   5818 ;	 function readTemp
                                   5819 ;	-----------------------------------------
      001C78                       5820 _readTemp:
                                   5821 ;	analog.c:9: IOM = 1;
                                   5822 ;	assignBit
      001C78 D2 B4            [12] 5823 	setb	_P3_4
                                   5824 ;	analog.c:10: address = (uint16_t __xdata*)(temp_address);
      001C7A 85*06 82         [24] 5825 	mov	dpl,_temp_address
      001C7D 85*07 83         [24] 5826 	mov	dph,(_temp_address + 1)
                                   5827 ;	analog.c:11: val = *address;
      001C80 E0               [24] 5828 	movx	a,@dptr
                                   5829 ;	analog.c:13: return val;
                                   5830 ;	analog.c:14: }
      001C81 F5 82            [12] 5831 	mov	dpl,a
      001C83 22               [24] 5832 	ret
                                   5833 ;------------------------------------------------------------
                                   5834 ;Allocation info for local variables in function 'readLight'
                                   5835 ;------------------------------------------------------------
                                   5836 ;val                       Allocated with name '_readLight_val_65536_306'
                                   5837 ;address                   Allocated to registers 
                                   5838 ;------------------------------------------------------------
                                   5839 ;	analog.c:21: uint8_t readLight() {
                                   5840 ;	-----------------------------------------
                                   5841 ;	 function readLight
                                   5842 ;	-----------------------------------------
      001C84                       5843 _readLight:
                                   5844 ;	analog.c:24: IOM = 1;
                                   5845 ;	assignBit
      001C84 D2 B4            [12] 5846 	setb	_P3_4
                                   5847 ;	analog.c:25: address = (uint16_t __xdata*)(light_address);
      001C86 85*08 82         [24] 5848 	mov	dpl,_light_address
      001C89 85*09 83         [24] 5849 	mov	dph,(_light_address + 1)
                                   5850 ;	analog.c:26: val = *address;
      001C8C E0               [24] 5851 	movx	a,@dptr
                                   5852 ;	analog.c:28: return val;
                                   5853 ;	analog.c:29: }
      001C8D F5 82            [12] 5854 	mov	dpl,a
      001C8F 22               [24] 5855 	ret
                                   5856 ;------------------------------------------------------------
                                   5857 ;Allocation info for local variables in function 'displayTemp'
                                   5858 ;------------------------------------------------------------
                                   5859 ;t                         Allocated to registers r7 
                                   5860 ;------------------------------------------------------------
                                   5861 ;	analog.c:36: void displayTemp(uint8_t t) {
                                   5862 ;	-----------------------------------------
                                   5863 ;	 function displayTemp
                                   5864 ;	-----------------------------------------
      001C90                       5865 _displayTemp:
      001C90 AF 82            [24] 5866 	mov	r7,dpl
                                   5867 ;	analog.c:38: fillScreen(GRAY);
      001C92 90 D6 BA         [24] 5868 	mov	dptr,#0xd6ba
      001C95 C0 07            [24] 5869 	push	ar7
      001C97 12r08r44         [24] 5870 	lcall	_fillScreen
                                   5871 ;	analog.c:39: setCursor(0, 0);
      001C9A E4               [12] 5872 	clr	a
      001C9B F5*00            [12] 5873 	mov	_setCursor_PARM_2,a
      001C9D F5*01            [12] 5874 	mov	(_setCursor_PARM_2 + 1),a
      001C9F 90 00 00         [24] 5875 	mov	dptr,#0x0000
      001CA2 12r00rB6         [24] 5876 	lcall	_setCursor
                                   5877 ;	analog.c:41: LCD_string_write("Temperature: ");
      001CA5 90r07r68         [24] 5878 	mov	dptr,#___str_39
      001CA8 75 F0 80         [24] 5879 	mov	b,#0x80
      001CAB 12r0Cr4B         [24] 5880 	lcall	_LCD_string_write
      001CAE D0 07            [24] 5881 	pop	ar7
                                   5882 ;	analog.c:43: asciiToHex(t);
      001CB0 8F 82            [24] 5883 	mov	dpl,r7
      001CB2 12r0ErCC         [24] 5884 	lcall	_asciiToHex
                                   5885 ;	analog.c:45: write('\n');
      001CB5 75 82 0A         [24] 5886 	mov	dpl,#0x0a
      001CB8 12r0BrDD         [24] 5887 	lcall	_write
                                   5888 ;	analog.c:46: LCD_string_write("Press 1 for menu\n");
      001CBB 90r05rE9         [24] 5889 	mov	dptr,#___str_17
      001CBE 75 F0 80         [24] 5890 	mov	b,#0x80
      001CC1 12r0Cr4B         [24] 5891 	lcall	_LCD_string_write
                                   5892 ;	analog.c:47: LCD_string_write("Press key to refresh\n");
      001CC4 90r07r76         [24] 5893 	mov	dptr,#___str_40
      001CC7 75 F0 80         [24] 5894 	mov	b,#0x80
                                   5895 ;	analog.c:48: }
      001CCA 02r0Cr4B         [24] 5896 	ljmp	_LCD_string_write
                                   5897 ;------------------------------------------------------------
                                   5898 ;Allocation info for local variables in function 'displayLight'
                                   5899 ;------------------------------------------------------------
                                   5900 ;l                         Allocated to registers r7 
                                   5901 ;------------------------------------------------------------
                                   5902 ;	analog.c:55: void displayLight(uint8_t l) {
                                   5903 ;	-----------------------------------------
                                   5904 ;	 function displayLight
                                   5905 ;	-----------------------------------------
      001CCD                       5906 _displayLight:
      001CCD AF 82            [24] 5907 	mov	r7,dpl
                                   5908 ;	analog.c:57: fillScreen(GRAY);
      001CCF 90 D6 BA         [24] 5909 	mov	dptr,#0xd6ba
      001CD2 C0 07            [24] 5910 	push	ar7
      001CD4 12r08r44         [24] 5911 	lcall	_fillScreen
                                   5912 ;	analog.c:58: setCursor(0, 0);
      001CD7 E4               [12] 5913 	clr	a
      001CD8 F5*00            [12] 5914 	mov	_setCursor_PARM_2,a
      001CDA F5*01            [12] 5915 	mov	(_setCursor_PARM_2 + 1),a
      001CDC 90 00 00         [24] 5916 	mov	dptr,#0x0000
      001CDF 12r00rB6         [24] 5917 	lcall	_setCursor
                                   5918 ;	analog.c:60: LCD_string_write("Light level: ");
      001CE2 90r07r8C         [24] 5919 	mov	dptr,#___str_41
      001CE5 75 F0 80         [24] 5920 	mov	b,#0x80
      001CE8 12r0Cr4B         [24] 5921 	lcall	_LCD_string_write
      001CEB D0 07            [24] 5922 	pop	ar7
                                   5923 ;	analog.c:62: asciiToHex(l);
      001CED 8F 82            [24] 5924 	mov	dpl,r7
      001CEF 12r0ErCC         [24] 5925 	lcall	_asciiToHex
                                   5926 ;	analog.c:64: write('\n');
      001CF2 75 82 0A         [24] 5927 	mov	dpl,#0x0a
      001CF5 12r0BrDD         [24] 5928 	lcall	_write
                                   5929 ;	analog.c:65: LCD_string_write("Press 1 for menu\n");
      001CF8 90r05rE9         [24] 5930 	mov	dptr,#___str_17
      001CFB 75 F0 80         [24] 5931 	mov	b,#0x80
      001CFE 12r0Cr4B         [24] 5932 	lcall	_LCD_string_write
                                   5933 ;	analog.c:66: LCD_string_write("Press key to refresh\n");
      001D01 90r07r76         [24] 5934 	mov	dptr,#___str_40
      001D04 75 F0 80         [24] 5935 	mov	b,#0x80
                                   5936 ;	analog.c:67: }
      001D07 02r0Cr4B         [24] 5937 	ljmp	_LCD_string_write
                                   5938 ;------------------------------------------------------------
                                   5939 ;Allocation info for local variables in function 'temperature'
                                   5940 ;------------------------------------------------------------
                                   5941 ;temp                      Allocated to registers 
                                   5942 ;input                     Allocated with name '_temperature_input_65537_312'
                                   5943 ;------------------------------------------------------------
                                   5944 ;	analog.c:74: void temperature() {
                                   5945 ;	-----------------------------------------
                                   5946 ;	 function temperature
                                   5947 ;	-----------------------------------------
      001D0A                       5948 _temperature:
                                   5949 ;	analog.c:76: fillScreen(GRAY);
      001D0A 90 D6 BA         [24] 5950 	mov	dptr,#0xd6ba
      001D0D 12r08r44         [24] 5951 	lcall	_fillScreen
                                   5952 ;	analog.c:77: setCursor(0, 0);
      001D10 E4               [12] 5953 	clr	a
      001D11 F5*00            [12] 5954 	mov	_setCursor_PARM_2,a
      001D13 F5*01            [12] 5955 	mov	(_setCursor_PARM_2 + 1),a
      001D15 90 00 00         [24] 5956 	mov	dptr,#0x0000
      001D18 12r00rB6         [24] 5957 	lcall	_setCursor
                                   5958 ;	analog.c:78: setTextSize(2);
      001D1B 75 82 02         [24] 5959 	mov	dpl,#0x02
      001D1E 12r00rD0         [24] 5960 	lcall	_setTextSize
                                   5961 ;	analog.c:86: temp = ioread8(temp_address);
      001D21 85*06 82         [24] 5962 	mov	dpl,_temp_address
      001D24 85*07 83         [24] 5963 	mov	dph,(_temp_address + 1)
      001D27 12r00r10         [24] 5964 	lcall	_ioread8
                                   5965 ;	analog.c:88: displayTemp(temp);
      001D2A 12r1Cr90         [24] 5966 	lcall	_displayTemp
                                   5967 ;	analog.c:91: while (1) {
      001D2D                       5968 00104$:
                                   5969 ;	analog.c:92: input = keyDetect();
      001D2D 12r0CrEA         [24] 5970 	lcall	_keyDetect
      001D30 AF 82            [24] 5971 	mov	r7,dpl
                                   5972 ;	analog.c:94: if (input == '1') break;
      001D32 BF 31 01         [24] 5973 	cjne	r7,#0x31,00118$
      001D35 22               [24] 5974 	ret
      001D36                       5975 00118$:
                                   5976 ;	analog.c:98: temp = ioread8(temp_address);
      001D36 85*06 82         [24] 5977 	mov	dpl,_temp_address
      001D39 85*07 83         [24] 5978 	mov	dph,(_temp_address + 1)
      001D3C 12r00r10         [24] 5979 	lcall	_ioread8
                                   5980 ;	analog.c:99: displayTemp(temp);
      001D3F 12r1Cr90         [24] 5981 	lcall	_displayTemp
                                   5982 ;	analog.c:101: }
      001D42 80 E9            [24] 5983 	sjmp	00104$
                                   5984 ;------------------------------------------------------------
                                   5985 ;Allocation info for local variables in function 'light'
                                   5986 ;------------------------------------------------------------
                                   5987 ;light                     Allocated to registers 
                                   5988 ;input                     Allocated with name '_light_input_65537_315'
                                   5989 ;------------------------------------------------------------
                                   5990 ;	analog.c:108: void light() {
                                   5991 ;	-----------------------------------------
                                   5992 ;	 function light
                                   5993 ;	-----------------------------------------
      001D44                       5994 _light:
                                   5995 ;	analog.c:110: fillScreen(GRAY);
      001D44 90 D6 BA         [24] 5996 	mov	dptr,#0xd6ba
      001D47 12r08r44         [24] 5997 	lcall	_fillScreen
                                   5998 ;	analog.c:111: setCursor(0, 0);
      001D4A E4               [12] 5999 	clr	a
      001D4B F5*00            [12] 6000 	mov	_setCursor_PARM_2,a
      001D4D F5*01            [12] 6001 	mov	(_setCursor_PARM_2 + 1),a
      001D4F 90 00 00         [24] 6002 	mov	dptr,#0x0000
      001D52 12r00rB6         [24] 6003 	lcall	_setCursor
                                   6004 ;	analog.c:112: setTextSize(2);
      001D55 75 82 02         [24] 6005 	mov	dpl,#0x02
      001D58 12r00rD0         [24] 6006 	lcall	_setTextSize
                                   6007 ;	analog.c:120: light = ioread8(light_address);
      001D5B 85*08 82         [24] 6008 	mov	dpl,_light_address
      001D5E 85*09 83         [24] 6009 	mov	dph,(_light_address + 1)
      001D61 12r00r10         [24] 6010 	lcall	_ioread8
                                   6011 ;	analog.c:122: displayLight(light);
      001D64 12r1CrCD         [24] 6012 	lcall	_displayLight
                                   6013 ;	analog.c:125: while (1) {
      001D67                       6014 00104$:
                                   6015 ;	analog.c:126: input = keyDetect();
      001D67 12r0CrEA         [24] 6016 	lcall	_keyDetect
      001D6A AF 82            [24] 6017 	mov	r7,dpl
                                   6018 ;	analog.c:128: if (input == '1') break;
      001D6C BF 31 01         [24] 6019 	cjne	r7,#0x31,00118$
      001D6F 22               [24] 6020 	ret
      001D70                       6021 00118$:
                                   6022 ;	analog.c:132: light = ioread8(light_address);
      001D70 85*08 82         [24] 6023 	mov	dpl,_light_address
      001D73 85*09 83         [24] 6024 	mov	dph,(_light_address + 1)
      001D76 12r00r10         [24] 6025 	lcall	_ioread8
                                   6026 ;	analog.c:133: displayLight(light);
      001D79 12r1CrCD         [24] 6027 	lcall	_displayLight
                                   6028 ;	analog.c:135: }
      001D7C 80 E9            [24] 6029 	sjmp	00104$
                                   6030 ;------------------------------------------------------------
                                   6031 ;Allocation info for local variables in function 'menu'
                                   6032 ;------------------------------------------------------------
                                   6033 ;	main.c:32: void menu(void) {
                                   6034 ;	-----------------------------------------
                                   6035 ;	 function menu
                                   6036 ;	-----------------------------------------
      001D7E                       6037 _menu:
                                   6038 ;	main.c:34: setRotation(2);
      001D7E 75 82 02         [24] 6039 	mov	dpl,#0x02
      001D81 12r00rE8         [24] 6040 	lcall	_setRotation
                                   6041 ;	main.c:35: setTextSize(3);
      001D84 75 82 03         [24] 6042 	mov	dpl,#0x03
      001D87 12r00rD0         [24] 6043 	lcall	_setTextSize
                                   6044 ;	main.c:36: fillScreen(GRAY);
      001D8A 90 D6 BA         [24] 6045 	mov	dptr,#0xd6ba
      001D8D 12r08r44         [24] 6046 	lcall	_fillScreen
                                   6047 ;	main.c:37: setTextColor(BLACK, GRAY);
      001D90 75*00 BA         [24] 6048 	mov	_setTextColor_PARM_2,#0xba
      001D93 75*01 D6         [24] 6049 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001D96 90 00 00         [24] 6050 	mov	dptr,#0x0000
      001D99 12r00rC3         [24] 6051 	lcall	_setTextColor
                                   6052 ;	main.c:38: setCursor(0, 0);
      001D9C E4               [12] 6053 	clr	a
      001D9D F5*00            [12] 6054 	mov	_setCursor_PARM_2,a
      001D9F F5*01            [12] 6055 	mov	(_setCursor_PARM_2 + 1),a
      001DA1 90 00 00         [24] 6056 	mov	dptr,#0x0000
      001DA4 12r00rB6         [24] 6057 	lcall	_setCursor
                                   6058 ;	main.c:41: LCD_string_write("Brandon Cline\n");
      001DA7 90r07r9A         [24] 6059 	mov	dptr,#___str_42
      001DAA 75 F0 80         [24] 6060 	mov	b,#0x80
      001DAD 12r0Cr4B         [24] 6061 	lcall	_LCD_string_write
                                   6062 ;	main.c:42: LCD_string_write("ECEN 4330\n");
      001DB0 90r07rA9         [24] 6063 	mov	dptr,#___str_43
      001DB3 75 F0 80         [24] 6064 	mov	b,#0x80
      001DB6 12r0Cr4B         [24] 6065 	lcall	_LCD_string_write
                                   6066 ;	main.c:44: setTextSize(2);
      001DB9 75 82 02         [24] 6067 	mov	dpl,#0x02
      001DBC 12r00rD0         [24] 6068 	lcall	_setTextSize
                                   6069 ;	main.c:48: LCD_string_write("1: Basic check\n");
      001DBF 90r07rB4         [24] 6070 	mov	dptr,#___str_44
      001DC2 75 F0 80         [24] 6071 	mov	b,#0x80
      001DC5 12r0Cr4B         [24] 6072 	lcall	_LCD_string_write
                                   6073 ;	main.c:50: LCD_string_write("2: Dump\n");
      001DC8 90r07rC4         [24] 6074 	mov	dptr,#___str_45
      001DCB 75 F0 80         [24] 6075 	mov	b,#0x80
      001DCE 12r0Cr4B         [24] 6076 	lcall	_LCD_string_write
                                   6077 ;	main.c:52: LCD_string_write("3: Check\n");
      001DD1 90r07rCD         [24] 6078 	mov	dptr,#___str_46
      001DD4 75 F0 80         [24] 6079 	mov	b,#0x80
      001DD7 12r0Cr4B         [24] 6080 	lcall	_LCD_string_write
                                   6081 ;	main.c:54: LCD_string_write("A: Move\n");
      001DDA 90r07rD7         [24] 6082 	mov	dptr,#___str_47
      001DDD 75 F0 80         [24] 6083 	mov	b,#0x80
      001DE0 12r0Cr4B         [24] 6084 	lcall	_LCD_string_write
                                   6085 ;	main.c:56: LCD_string_write("4: Edit\n");
      001DE3 90r07rE0         [24] 6086 	mov	dptr,#___str_48
      001DE6 75 F0 80         [24] 6087 	mov	b,#0x80
      001DE9 12r0Cr4B         [24] 6088 	lcall	_LCD_string_write
                                   6089 ;	main.c:58: LCD_string_write("5: Find\n");
      001DEC 90r07rE9         [24] 6090 	mov	dptr,#___str_49
      001DEF 75 F0 80         [24] 6091 	mov	b,#0x80
      001DF2 12r0Cr4B         [24] 6092 	lcall	_LCD_string_write
                                   6093 ;	main.c:60: LCD_string_write("6: Count\n");
      001DF5 90r07rF2         [24] 6094 	mov	dptr,#___str_50
      001DF8 75 F0 80         [24] 6095 	mov	b,#0x80
      001DFB 12r0Cr4B         [24] 6096 	lcall	_LCD_string_write
                                   6097 ;	main.c:63: LCD_string_write("B: Temperature\n");
      001DFE 90r07rFC         [24] 6098 	mov	dptr,#___str_51
      001E01 75 F0 80         [24] 6099 	mov	b,#0x80
      001E04 12r0Cr4B         [24] 6100 	lcall	_LCD_string_write
                                   6101 ;	main.c:65: LCD_string_write("7: Light\n");
      001E07 90r08r0C         [24] 6102 	mov	dptr,#___str_52
      001E0A 75 F0 80         [24] 6103 	mov	b,#0x80
                                   6104 ;	main.c:66: }
      001E0D 02r0Cr4B         [24] 6105 	ljmp	_LCD_string_write
                                   6106 ;------------------------------------------------------------
                                   6107 ;Allocation info for local variables in function 'main'
                                   6108 ;------------------------------------------------------------
                                   6109 ;input                     Allocated with name '_main_input_65536_320'
                                   6110 ;------------------------------------------------------------
                                   6111 ;	main.c:68: void main(void) {
                                   6112 ;	-----------------------------------------
                                   6113 ;	 function main
                                   6114 ;	-----------------------------------------
      001E10                       6115 _main:
                                   6116 ;	main.c:73: iowrite8(seg7_address, 0x00);
      001E10 75*00 00         [24] 6117 	mov	_iowrite8_PARM_2,#0x00
      001E13 85*04 82         [24] 6118 	mov	dpl,_seg7_address
      001E16 85*05 83         [24] 6119 	mov	dph,(_seg7_address + 1)
      001E19 12r00r00         [24] 6120 	lcall	_iowrite8
                                   6121 ;	main.c:76: TFT_LCD_INIT();
      001E1C 12r02r11         [24] 6122 	lcall	_TFT_LCD_INIT
                                   6123 ;	main.c:78: fillScreen(BLACK);
      001E1F 90 00 00         [24] 6124 	mov	dptr,#0x0000
      001E22 12r08r44         [24] 6125 	lcall	_fillScreen
                                   6126 ;	main.c:79: setRotation(0);
      001E25 75 82 00         [24] 6127 	mov	dpl,#0x00
      001E28 12r00rE8         [24] 6128 	lcall	_setRotation
                                   6129 ;	main.c:80: testCircles(20, BLUE);
      001E2B 75*2C 1F         [24] 6130 	mov	_testCircles_PARM_2,#0x1f
      001E2E 75*2D 00         [24] 6131 	mov	(_testCircles_PARM_2 + 1),#0x00
      001E31 75 82 14         [24] 6132 	mov	dpl,#0x14
      001E34 12r06r9D         [24] 6133 	lcall	_testCircles
                                   6134 ;	main.c:84: while (1) {
      001E37                       6135 00112$:
                                   6136 ;	main.c:86: menu();
      001E37 12r1Dr7E         [24] 6137 	lcall	_menu
                                   6138 ;	main.c:89: input = keyDetect();
      001E3A 12r0CrEA         [24] 6139 	lcall	_keyDetect
      001E3D AF 82            [24] 6140 	mov	r7,dpl
                                   6141 ;	main.c:93: switch(input) {
      001E3F BF 31 02         [24] 6142 	cjne	r7,#0x31,00152$
      001E42 80 23            [24] 6143 	sjmp	00101$
      001E44                       6144 00152$:
      001E44 BF 32 02         [24] 6145 	cjne	r7,#0x32,00153$
      001E47 80 23            [24] 6146 	sjmp	00102$
      001E49                       6147 00153$:
      001E49 BF 33 02         [24] 6148 	cjne	r7,#0x33,00154$
      001E4C 80 23            [24] 6149 	sjmp	00103$
      001E4E                       6150 00154$:
      001E4E BF 34 02         [24] 6151 	cjne	r7,#0x34,00155$
      001E51 80 28            [24] 6152 	sjmp	00105$
      001E53                       6153 00155$:
      001E53 BF 36 02         [24] 6154 	cjne	r7,#0x36,00156$
      001E56 80 28            [24] 6155 	sjmp	00106$
      001E58                       6156 00156$:
      001E58 BF 37 02         [24] 6157 	cjne	r7,#0x37,00157$
      001E5B 80 2D            [24] 6158 	sjmp	00108$
      001E5D                       6159 00157$:
      001E5D BF 41 02         [24] 6160 	cjne	r7,#0x41,00158$
      001E60 80 14            [24] 6161 	sjmp	00104$
      001E62                       6162 00158$:
                                   6163 ;	main.c:94: case '1': basic(); break;
      001E62 BF 42 D2         [24] 6164 	cjne	r7,#0x42,00112$
      001E65 80 1E            [24] 6165 	sjmp	00107$
      001E67                       6166 00101$:
      001E67 12r15rEE         [24] 6167 	lcall	_basic
                                   6168 ;	main.c:95: case '2': dump(); break;
      001E6A 80 CB            [24] 6169 	sjmp	00112$
      001E6C                       6170 00102$:
      001E6C 12r12r25         [24] 6171 	lcall	_dump
                                   6172 ;	main.c:96: case '3': check(); break;
      001E6F 80 C6            [24] 6173 	sjmp	00112$
      001E71                       6174 00103$:
      001E71 12r14rB2         [24] 6175 	lcall	_check
                                   6176 ;	main.c:97: case 'A': move(); break;
      001E74 80 C1            [24] 6177 	sjmp	00112$
      001E76                       6178 00104$:
      001E76 12r16r84         [24] 6179 	lcall	_move
                                   6180 ;	main.c:98: case '4': edit(); break;
      001E79 80 BC            [24] 6181 	sjmp	00112$
      001E7B                       6182 00105$:
      001E7B 12r18r33         [24] 6183 	lcall	_edit
                                   6184 ;	main.c:100: case '6': count(); break;
      001E7E 80 B7            [24] 6185 	sjmp	00112$
      001E80                       6186 00106$:
      001E80 12r19rDE         [24] 6187 	lcall	_count
                                   6188 ;	main.c:101: case 'B': temperature(); break;
      001E83 80 B2            [24] 6189 	sjmp	00112$
      001E85                       6190 00107$:
      001E85 12r1Dr0A         [24] 6191 	lcall	_temperature
                                   6192 ;	main.c:102: case '7': light(); break;
      001E88 80 AD            [24] 6193 	sjmp	00112$
      001E8A                       6194 00108$:
      001E8A 12r1Dr44         [24] 6195 	lcall	_light
                                   6196 ;	main.c:104: }
                                   6197 ;	main.c:106: }
      001E8D 80 A8            [24] 6198 	sjmp	00112$
                                   6199 	.area CSEG    (CODE)
                                   6200 	.area CONST   (CODE)
      000000                       6201 _font:
      000000 00                    6202 	.db #0x00	; 0
      000001 00                    6203 	.db #0x00	; 0
      000002 00                    6204 	.db #0x00	; 0
      000003 00                    6205 	.db #0x00	; 0
      000004 00                    6206 	.db #0x00	; 0
      000005 3E                    6207 	.db #0x3e	; 62
      000006 5B                    6208 	.db #0x5b	; 91
      000007 4F                    6209 	.db #0x4f	; 79	'O'
      000008 5B                    6210 	.db #0x5b	; 91
      000009 3E                    6211 	.db #0x3e	; 62
      00000A 3E                    6212 	.db #0x3e	; 62
      00000B 6B                    6213 	.db #0x6b	; 107	'k'
      00000C 4F                    6214 	.db #0x4f	; 79	'O'
      00000D 6B                    6215 	.db #0x6b	; 107	'k'
      00000E 3E                    6216 	.db #0x3e	; 62
      00000F 1C                    6217 	.db #0x1c	; 28
      000010 3E                    6218 	.db #0x3e	; 62
      000011 7C                    6219 	.db #0x7c	; 124
      000012 3E                    6220 	.db #0x3e	; 62
      000013 1C                    6221 	.db #0x1c	; 28
      000014 18                    6222 	.db #0x18	; 24
      000015 3C                    6223 	.db #0x3c	; 60
      000016 7E                    6224 	.db #0x7e	; 126
      000017 3C                    6225 	.db #0x3c	; 60
      000018 18                    6226 	.db #0x18	; 24
      000019 1C                    6227 	.db #0x1c	; 28
      00001A 57                    6228 	.db #0x57	; 87	'W'
      00001B 7D                    6229 	.db #0x7d	; 125
      00001C 57                    6230 	.db #0x57	; 87	'W'
      00001D 1C                    6231 	.db #0x1c	; 28
      00001E 1C                    6232 	.db #0x1c	; 28
      00001F 5E                    6233 	.db #0x5e	; 94
      000020 7F                    6234 	.db #0x7f	; 127
      000021 5E                    6235 	.db #0x5e	; 94
      000022 1C                    6236 	.db #0x1c	; 28
      000023 00                    6237 	.db #0x00	; 0
      000024 18                    6238 	.db #0x18	; 24
      000025 3C                    6239 	.db #0x3c	; 60
      000026 18                    6240 	.db #0x18	; 24
      000027 00                    6241 	.db #0x00	; 0
      000028 FF                    6242 	.db #0xff	; 255
      000029 E7                    6243 	.db #0xe7	; 231
      00002A C3                    6244 	.db #0xc3	; 195
      00002B E7                    6245 	.db #0xe7	; 231
      00002C FF                    6246 	.db #0xff	; 255
      00002D 00                    6247 	.db #0x00	; 0
      00002E 18                    6248 	.db #0x18	; 24
      00002F 24                    6249 	.db #0x24	; 36
      000030 18                    6250 	.db #0x18	; 24
      000031 00                    6251 	.db #0x00	; 0
      000032 FF                    6252 	.db #0xff	; 255
      000033 E7                    6253 	.db #0xe7	; 231
      000034 DB                    6254 	.db #0xdb	; 219
      000035 E7                    6255 	.db #0xe7	; 231
      000036 FF                    6256 	.db #0xff	; 255
      000037 30                    6257 	.db #0x30	; 48	'0'
      000038 48                    6258 	.db #0x48	; 72	'H'
      000039 3A                    6259 	.db #0x3a	; 58
      00003A 06                    6260 	.db #0x06	; 6
      00003B 0E                    6261 	.db #0x0e	; 14
      00003C 26                    6262 	.db #0x26	; 38
      00003D 29                    6263 	.db #0x29	; 41
      00003E 79                    6264 	.db #0x79	; 121	'y'
      00003F 29                    6265 	.db #0x29	; 41
      000040 26                    6266 	.db #0x26	; 38
      000041 40                    6267 	.db #0x40	; 64
      000042 7F                    6268 	.db #0x7f	; 127
      000043 05                    6269 	.db #0x05	; 5
      000044 05                    6270 	.db #0x05	; 5
      000045 07                    6271 	.db #0x07	; 7
      000046 40                    6272 	.db #0x40	; 64
      000047 7F                    6273 	.db #0x7f	; 127
      000048 05                    6274 	.db #0x05	; 5
      000049 25                    6275 	.db #0x25	; 37
      00004A 3F                    6276 	.db #0x3f	; 63
      00004B 5A                    6277 	.db #0x5a	; 90	'Z'
      00004C 3C                    6278 	.db #0x3c	; 60
      00004D E7                    6279 	.db #0xe7	; 231
      00004E 3C                    6280 	.db #0x3c	; 60
      00004F 5A                    6281 	.db #0x5a	; 90	'Z'
      000050 7F                    6282 	.db #0x7f	; 127
      000051 3E                    6283 	.db #0x3e	; 62
      000052 1C                    6284 	.db #0x1c	; 28
      000053 1C                    6285 	.db #0x1c	; 28
      000054 08                    6286 	.db #0x08	; 8
      000055 08                    6287 	.db #0x08	; 8
      000056 1C                    6288 	.db #0x1c	; 28
      000057 1C                    6289 	.db #0x1c	; 28
      000058 3E                    6290 	.db #0x3e	; 62
      000059 7F                    6291 	.db #0x7f	; 127
      00005A 14                    6292 	.db #0x14	; 20
      00005B 22                    6293 	.db #0x22	; 34
      00005C 7F                    6294 	.db #0x7f	; 127
      00005D 22                    6295 	.db #0x22	; 34
      00005E 14                    6296 	.db #0x14	; 20
      00005F 5F                    6297 	.db #0x5f	; 95
      000060 5F                    6298 	.db #0x5f	; 95
      000061 00                    6299 	.db #0x00	; 0
      000062 5F                    6300 	.db #0x5f	; 95
      000063 5F                    6301 	.db #0x5f	; 95
      000064 06                    6302 	.db #0x06	; 6
      000065 09                    6303 	.db #0x09	; 9
      000066 7F                    6304 	.db #0x7f	; 127
      000067 01                    6305 	.db #0x01	; 1
      000068 7F                    6306 	.db #0x7f	; 127
      000069 00                    6307 	.db #0x00	; 0
      00006A 66                    6308 	.db #0x66	; 102	'f'
      00006B 89                    6309 	.db #0x89	; 137
      00006C 95                    6310 	.db #0x95	; 149
      00006D 6A                    6311 	.db #0x6a	; 106	'j'
      00006E 60                    6312 	.db #0x60	; 96
      00006F 60                    6313 	.db #0x60	; 96
      000070 60                    6314 	.db #0x60	; 96
      000071 60                    6315 	.db #0x60	; 96
      000072 60                    6316 	.db #0x60	; 96
      000073 94                    6317 	.db #0x94	; 148
      000074 A2                    6318 	.db #0xa2	; 162
      000075 FF                    6319 	.db #0xff	; 255
      000076 A2                    6320 	.db #0xa2	; 162
      000077 94                    6321 	.db #0x94	; 148
      000078 08                    6322 	.db #0x08	; 8
      000079 04                    6323 	.db #0x04	; 4
      00007A 7E                    6324 	.db #0x7e	; 126
      00007B 04                    6325 	.db #0x04	; 4
      00007C 08                    6326 	.db #0x08	; 8
      00007D 10                    6327 	.db #0x10	; 16
      00007E 20                    6328 	.db #0x20	; 32
      00007F 7E                    6329 	.db #0x7e	; 126
      000080 20                    6330 	.db #0x20	; 32
      000081 10                    6331 	.db #0x10	; 16
      000082 08                    6332 	.db #0x08	; 8
      000083 08                    6333 	.db #0x08	; 8
      000084 2A                    6334 	.db #0x2a	; 42
      000085 1C                    6335 	.db #0x1c	; 28
      000086 08                    6336 	.db #0x08	; 8
      000087 08                    6337 	.db #0x08	; 8
      000088 1C                    6338 	.db #0x1c	; 28
      000089 2A                    6339 	.db #0x2a	; 42
      00008A 08                    6340 	.db #0x08	; 8
      00008B 08                    6341 	.db #0x08	; 8
      00008C 1E                    6342 	.db #0x1e	; 30
      00008D 10                    6343 	.db #0x10	; 16
      00008E 10                    6344 	.db #0x10	; 16
      00008F 10                    6345 	.db #0x10	; 16
      000090 10                    6346 	.db #0x10	; 16
      000091 0C                    6347 	.db #0x0c	; 12
      000092 1E                    6348 	.db #0x1e	; 30
      000093 0C                    6349 	.db #0x0c	; 12
      000094 1E                    6350 	.db #0x1e	; 30
      000095 0C                    6351 	.db #0x0c	; 12
      000096 30                    6352 	.db #0x30	; 48	'0'
      000097 38                    6353 	.db #0x38	; 56	'8'
      000098 3E                    6354 	.db #0x3e	; 62
      000099 38                    6355 	.db #0x38	; 56	'8'
      00009A 30                    6356 	.db #0x30	; 48	'0'
      00009B 06                    6357 	.db #0x06	; 6
      00009C 0E                    6358 	.db #0x0e	; 14
      00009D 3E                    6359 	.db #0x3e	; 62
      00009E 0E                    6360 	.db #0x0e	; 14
      00009F 06                    6361 	.db #0x06	; 6
      0000A0 00                    6362 	.db #0x00	; 0
      0000A1 00                    6363 	.db #0x00	; 0
      0000A2 00                    6364 	.db #0x00	; 0
      0000A3 00                    6365 	.db #0x00	; 0
      0000A4 00                    6366 	.db #0x00	; 0
      0000A5 00                    6367 	.db #0x00	; 0
      0000A6 00                    6368 	.db #0x00	; 0
      0000A7 5F                    6369 	.db #0x5f	; 95
      0000A8 00                    6370 	.db #0x00	; 0
      0000A9 00                    6371 	.db #0x00	; 0
      0000AA 00                    6372 	.db #0x00	; 0
      0000AB 07                    6373 	.db #0x07	; 7
      0000AC 00                    6374 	.db #0x00	; 0
      0000AD 07                    6375 	.db #0x07	; 7
      0000AE 00                    6376 	.db #0x00	; 0
      0000AF 14                    6377 	.db #0x14	; 20
      0000B0 7F                    6378 	.db #0x7f	; 127
      0000B1 14                    6379 	.db #0x14	; 20
      0000B2 7F                    6380 	.db #0x7f	; 127
      0000B3 14                    6381 	.db #0x14	; 20
      0000B4 24                    6382 	.db #0x24	; 36
      0000B5 2A                    6383 	.db #0x2a	; 42
      0000B6 7F                    6384 	.db #0x7f	; 127
      0000B7 2A                    6385 	.db #0x2a	; 42
      0000B8 12                    6386 	.db #0x12	; 18
      0000B9 23                    6387 	.db #0x23	; 35
      0000BA 13                    6388 	.db #0x13	; 19
      0000BB 08                    6389 	.db #0x08	; 8
      0000BC 64                    6390 	.db #0x64	; 100	'd'
      0000BD 62                    6391 	.db #0x62	; 98	'b'
      0000BE 36                    6392 	.db #0x36	; 54	'6'
      0000BF 49                    6393 	.db #0x49	; 73	'I'
      0000C0 56                    6394 	.db #0x56	; 86	'V'
      0000C1 20                    6395 	.db #0x20	; 32
      0000C2 50                    6396 	.db #0x50	; 80	'P'
      0000C3 00                    6397 	.db #0x00	; 0
      0000C4 08                    6398 	.db #0x08	; 8
      0000C5 07                    6399 	.db #0x07	; 7
      0000C6 03                    6400 	.db #0x03	; 3
      0000C7 00                    6401 	.db #0x00	; 0
      0000C8 00                    6402 	.db #0x00	; 0
      0000C9 1C                    6403 	.db #0x1c	; 28
      0000CA 22                    6404 	.db #0x22	; 34
      0000CB 41                    6405 	.db #0x41	; 65	'A'
      0000CC 00                    6406 	.db #0x00	; 0
      0000CD 00                    6407 	.db #0x00	; 0
      0000CE 41                    6408 	.db #0x41	; 65	'A'
      0000CF 22                    6409 	.db #0x22	; 34
      0000D0 1C                    6410 	.db #0x1c	; 28
      0000D1 00                    6411 	.db #0x00	; 0
      0000D2 2A                    6412 	.db #0x2a	; 42
      0000D3 1C                    6413 	.db #0x1c	; 28
      0000D4 7F                    6414 	.db #0x7f	; 127
      0000D5 1C                    6415 	.db #0x1c	; 28
      0000D6 2A                    6416 	.db #0x2a	; 42
      0000D7 08                    6417 	.db #0x08	; 8
      0000D8 08                    6418 	.db #0x08	; 8
      0000D9 3E                    6419 	.db #0x3e	; 62
      0000DA 08                    6420 	.db #0x08	; 8
      0000DB 08                    6421 	.db #0x08	; 8
      0000DC 00                    6422 	.db #0x00	; 0
      0000DD 80                    6423 	.db #0x80	; 128
      0000DE 70                    6424 	.db #0x70	; 112	'p'
      0000DF 30                    6425 	.db #0x30	; 48	'0'
      0000E0 00                    6426 	.db #0x00	; 0
      0000E1 08                    6427 	.db #0x08	; 8
      0000E2 08                    6428 	.db #0x08	; 8
      0000E3 08                    6429 	.db #0x08	; 8
      0000E4 08                    6430 	.db #0x08	; 8
      0000E5 08                    6431 	.db #0x08	; 8
      0000E6 00                    6432 	.db #0x00	; 0
      0000E7 00                    6433 	.db #0x00	; 0
      0000E8 60                    6434 	.db #0x60	; 96
      0000E9 60                    6435 	.db #0x60	; 96
      0000EA 00                    6436 	.db #0x00	; 0
      0000EB 20                    6437 	.db #0x20	; 32
      0000EC 10                    6438 	.db #0x10	; 16
      0000ED 08                    6439 	.db #0x08	; 8
      0000EE 04                    6440 	.db #0x04	; 4
      0000EF 02                    6441 	.db #0x02	; 2
      0000F0 3E                    6442 	.db #0x3e	; 62
      0000F1 51                    6443 	.db #0x51	; 81	'Q'
      0000F2 49                    6444 	.db #0x49	; 73	'I'
      0000F3 45                    6445 	.db #0x45	; 69	'E'
      0000F4 3E                    6446 	.db #0x3e	; 62
      0000F5 00                    6447 	.db #0x00	; 0
      0000F6 42                    6448 	.db #0x42	; 66	'B'
      0000F7 7F                    6449 	.db #0x7f	; 127
      0000F8 40                    6450 	.db #0x40	; 64
      0000F9 00                    6451 	.db #0x00	; 0
      0000FA 72                    6452 	.db #0x72	; 114	'r'
      0000FB 49                    6453 	.db #0x49	; 73	'I'
      0000FC 49                    6454 	.db #0x49	; 73	'I'
      0000FD 49                    6455 	.db #0x49	; 73	'I'
      0000FE 46                    6456 	.db #0x46	; 70	'F'
      0000FF 21                    6457 	.db #0x21	; 33
      000100 41                    6458 	.db #0x41	; 65	'A'
      000101 49                    6459 	.db #0x49	; 73	'I'
      000102 4D                    6460 	.db #0x4d	; 77	'M'
      000103 33                    6461 	.db #0x33	; 51	'3'
      000104 18                    6462 	.db #0x18	; 24
      000105 14                    6463 	.db #0x14	; 20
      000106 12                    6464 	.db #0x12	; 18
      000107 7F                    6465 	.db #0x7f	; 127
      000108 10                    6466 	.db #0x10	; 16
      000109 27                    6467 	.db #0x27	; 39
      00010A 45                    6468 	.db #0x45	; 69	'E'
      00010B 45                    6469 	.db #0x45	; 69	'E'
      00010C 45                    6470 	.db #0x45	; 69	'E'
      00010D 39                    6471 	.db #0x39	; 57	'9'
      00010E 3C                    6472 	.db #0x3c	; 60
      00010F 4A                    6473 	.db #0x4a	; 74	'J'
      000110 49                    6474 	.db #0x49	; 73	'I'
      000111 49                    6475 	.db #0x49	; 73	'I'
      000112 31                    6476 	.db #0x31	; 49	'1'
      000113 41                    6477 	.db #0x41	; 65	'A'
      000114 21                    6478 	.db #0x21	; 33
      000115 11                    6479 	.db #0x11	; 17
      000116 09                    6480 	.db #0x09	; 9
      000117 07                    6481 	.db #0x07	; 7
      000118 36                    6482 	.db #0x36	; 54	'6'
      000119 49                    6483 	.db #0x49	; 73	'I'
      00011A 49                    6484 	.db #0x49	; 73	'I'
      00011B 49                    6485 	.db #0x49	; 73	'I'
      00011C 36                    6486 	.db #0x36	; 54	'6'
      00011D 46                    6487 	.db #0x46	; 70	'F'
      00011E 49                    6488 	.db #0x49	; 73	'I'
      00011F 49                    6489 	.db #0x49	; 73	'I'
      000120 29                    6490 	.db #0x29	; 41
      000121 1E                    6491 	.db #0x1e	; 30
      000122 00                    6492 	.db #0x00	; 0
      000123 00                    6493 	.db #0x00	; 0
      000124 14                    6494 	.db #0x14	; 20
      000125 00                    6495 	.db #0x00	; 0
      000126 00                    6496 	.db #0x00	; 0
      000127 00                    6497 	.db #0x00	; 0
      000128 40                    6498 	.db #0x40	; 64
      000129 34                    6499 	.db #0x34	; 52	'4'
      00012A 00                    6500 	.db #0x00	; 0
      00012B 00                    6501 	.db #0x00	; 0
      00012C 00                    6502 	.db #0x00	; 0
      00012D 08                    6503 	.db #0x08	; 8
      00012E 14                    6504 	.db #0x14	; 20
      00012F 22                    6505 	.db #0x22	; 34
      000130 41                    6506 	.db #0x41	; 65	'A'
      000131 14                    6507 	.db #0x14	; 20
      000132 14                    6508 	.db #0x14	; 20
      000133 14                    6509 	.db #0x14	; 20
      000134 14                    6510 	.db #0x14	; 20
      000135 14                    6511 	.db #0x14	; 20
      000136 00                    6512 	.db #0x00	; 0
      000137 41                    6513 	.db #0x41	; 65	'A'
      000138 22                    6514 	.db #0x22	; 34
      000139 14                    6515 	.db #0x14	; 20
      00013A 08                    6516 	.db #0x08	; 8
      00013B 02                    6517 	.db #0x02	; 2
      00013C 01                    6518 	.db #0x01	; 1
      00013D 59                    6519 	.db #0x59	; 89	'Y'
      00013E 09                    6520 	.db #0x09	; 9
      00013F 06                    6521 	.db #0x06	; 6
      000140 3E                    6522 	.db #0x3e	; 62
      000141 41                    6523 	.db #0x41	; 65	'A'
      000142 5D                    6524 	.db #0x5d	; 93
      000143 59                    6525 	.db #0x59	; 89	'Y'
      000144 4E                    6526 	.db #0x4e	; 78	'N'
      000145 7C                    6527 	.db #0x7c	; 124
      000146 12                    6528 	.db #0x12	; 18
      000147 11                    6529 	.db #0x11	; 17
      000148 12                    6530 	.db #0x12	; 18
      000149 7C                    6531 	.db #0x7c	; 124
      00014A 7F                    6532 	.db #0x7f	; 127
      00014B 49                    6533 	.db #0x49	; 73	'I'
      00014C 49                    6534 	.db #0x49	; 73	'I'
      00014D 49                    6535 	.db #0x49	; 73	'I'
      00014E 36                    6536 	.db #0x36	; 54	'6'
      00014F 3E                    6537 	.db #0x3e	; 62
      000150 41                    6538 	.db #0x41	; 65	'A'
      000151 41                    6539 	.db #0x41	; 65	'A'
      000152 41                    6540 	.db #0x41	; 65	'A'
      000153 22                    6541 	.db #0x22	; 34
      000154 7F                    6542 	.db #0x7f	; 127
      000155 41                    6543 	.db #0x41	; 65	'A'
      000156 41                    6544 	.db #0x41	; 65	'A'
      000157 41                    6545 	.db #0x41	; 65	'A'
      000158 3E                    6546 	.db #0x3e	; 62
      000159 7F                    6547 	.db #0x7f	; 127
      00015A 49                    6548 	.db #0x49	; 73	'I'
      00015B 49                    6549 	.db #0x49	; 73	'I'
      00015C 49                    6550 	.db #0x49	; 73	'I'
      00015D 41                    6551 	.db #0x41	; 65	'A'
      00015E 7F                    6552 	.db #0x7f	; 127
      00015F 09                    6553 	.db #0x09	; 9
      000160 09                    6554 	.db #0x09	; 9
      000161 09                    6555 	.db #0x09	; 9
      000162 01                    6556 	.db #0x01	; 1
      000163 3E                    6557 	.db #0x3e	; 62
      000164 41                    6558 	.db #0x41	; 65	'A'
      000165 41                    6559 	.db #0x41	; 65	'A'
      000166 51                    6560 	.db #0x51	; 81	'Q'
      000167 73                    6561 	.db #0x73	; 115	's'
      000168 7F                    6562 	.db #0x7f	; 127
      000169 08                    6563 	.db #0x08	; 8
      00016A 08                    6564 	.db #0x08	; 8
      00016B 08                    6565 	.db #0x08	; 8
      00016C 7F                    6566 	.db #0x7f	; 127
      00016D 00                    6567 	.db #0x00	; 0
      00016E 41                    6568 	.db #0x41	; 65	'A'
      00016F 7F                    6569 	.db #0x7f	; 127
      000170 41                    6570 	.db #0x41	; 65	'A'
      000171 00                    6571 	.db #0x00	; 0
      000172 20                    6572 	.db #0x20	; 32
      000173 40                    6573 	.db #0x40	; 64
      000174 41                    6574 	.db #0x41	; 65	'A'
      000175 3F                    6575 	.db #0x3f	; 63
      000176 01                    6576 	.db #0x01	; 1
      000177 7F                    6577 	.db #0x7f	; 127
      000178 08                    6578 	.db #0x08	; 8
      000179 14                    6579 	.db #0x14	; 20
      00017A 22                    6580 	.db #0x22	; 34
      00017B 41                    6581 	.db #0x41	; 65	'A'
      00017C 7F                    6582 	.db #0x7f	; 127
      00017D 40                    6583 	.db #0x40	; 64
      00017E 40                    6584 	.db #0x40	; 64
      00017F 40                    6585 	.db #0x40	; 64
      000180 40                    6586 	.db #0x40	; 64
      000181 7F                    6587 	.db #0x7f	; 127
      000182 02                    6588 	.db #0x02	; 2
      000183 1C                    6589 	.db #0x1c	; 28
      000184 02                    6590 	.db #0x02	; 2
      000185 7F                    6591 	.db #0x7f	; 127
      000186 7F                    6592 	.db #0x7f	; 127
      000187 04                    6593 	.db #0x04	; 4
      000188 08                    6594 	.db #0x08	; 8
      000189 10                    6595 	.db #0x10	; 16
      00018A 7F                    6596 	.db #0x7f	; 127
      00018B 3E                    6597 	.db #0x3e	; 62
      00018C 41                    6598 	.db #0x41	; 65	'A'
      00018D 41                    6599 	.db #0x41	; 65	'A'
      00018E 41                    6600 	.db #0x41	; 65	'A'
      00018F 3E                    6601 	.db #0x3e	; 62
      000190 7F                    6602 	.db #0x7f	; 127
      000191 09                    6603 	.db #0x09	; 9
      000192 09                    6604 	.db #0x09	; 9
      000193 09                    6605 	.db #0x09	; 9
      000194 06                    6606 	.db #0x06	; 6
      000195 3E                    6607 	.db #0x3e	; 62
      000196 41                    6608 	.db #0x41	; 65	'A'
      000197 51                    6609 	.db #0x51	; 81	'Q'
      000198 21                    6610 	.db #0x21	; 33
      000199 5E                    6611 	.db #0x5e	; 94
      00019A 7F                    6612 	.db #0x7f	; 127
      00019B 09                    6613 	.db #0x09	; 9
      00019C 19                    6614 	.db #0x19	; 25
      00019D 29                    6615 	.db #0x29	; 41
      00019E 46                    6616 	.db #0x46	; 70	'F'
      00019F 26                    6617 	.db #0x26	; 38
      0001A0 49                    6618 	.db #0x49	; 73	'I'
      0001A1 49                    6619 	.db #0x49	; 73	'I'
      0001A2 49                    6620 	.db #0x49	; 73	'I'
      0001A3 32                    6621 	.db #0x32	; 50	'2'
      0001A4 03                    6622 	.db #0x03	; 3
      0001A5 01                    6623 	.db #0x01	; 1
      0001A6 7F                    6624 	.db #0x7f	; 127
      0001A7 01                    6625 	.db #0x01	; 1
      0001A8 03                    6626 	.db #0x03	; 3
      0001A9 3F                    6627 	.db #0x3f	; 63
      0001AA 40                    6628 	.db #0x40	; 64
      0001AB 40                    6629 	.db #0x40	; 64
      0001AC 40                    6630 	.db #0x40	; 64
      0001AD 3F                    6631 	.db #0x3f	; 63
      0001AE 1F                    6632 	.db #0x1f	; 31
      0001AF 20                    6633 	.db #0x20	; 32
      0001B0 40                    6634 	.db #0x40	; 64
      0001B1 20                    6635 	.db #0x20	; 32
      0001B2 1F                    6636 	.db #0x1f	; 31
      0001B3 3F                    6637 	.db #0x3f	; 63
      0001B4 40                    6638 	.db #0x40	; 64
      0001B5 38                    6639 	.db #0x38	; 56	'8'
      0001B6 40                    6640 	.db #0x40	; 64
      0001B7 3F                    6641 	.db #0x3f	; 63
      0001B8 63                    6642 	.db #0x63	; 99	'c'
      0001B9 14                    6643 	.db #0x14	; 20
      0001BA 08                    6644 	.db #0x08	; 8
      0001BB 14                    6645 	.db #0x14	; 20
      0001BC 63                    6646 	.db #0x63	; 99	'c'
      0001BD 03                    6647 	.db #0x03	; 3
      0001BE 04                    6648 	.db #0x04	; 4
      0001BF 78                    6649 	.db #0x78	; 120	'x'
      0001C0 04                    6650 	.db #0x04	; 4
      0001C1 03                    6651 	.db #0x03	; 3
      0001C2 61                    6652 	.db #0x61	; 97	'a'
      0001C3 59                    6653 	.db #0x59	; 89	'Y'
      0001C4 49                    6654 	.db #0x49	; 73	'I'
      0001C5 4D                    6655 	.db #0x4d	; 77	'M'
      0001C6 43                    6656 	.db #0x43	; 67	'C'
      0001C7 00                    6657 	.db #0x00	; 0
      0001C8 7F                    6658 	.db #0x7f	; 127
      0001C9 41                    6659 	.db #0x41	; 65	'A'
      0001CA 41                    6660 	.db #0x41	; 65	'A'
      0001CB 41                    6661 	.db #0x41	; 65	'A'
      0001CC 02                    6662 	.db #0x02	; 2
      0001CD 04                    6663 	.db #0x04	; 4
      0001CE 08                    6664 	.db #0x08	; 8
      0001CF 10                    6665 	.db #0x10	; 16
      0001D0 20                    6666 	.db #0x20	; 32
      0001D1 00                    6667 	.db #0x00	; 0
      0001D2 41                    6668 	.db #0x41	; 65	'A'
      0001D3 41                    6669 	.db #0x41	; 65	'A'
      0001D4 41                    6670 	.db #0x41	; 65	'A'
      0001D5 7F                    6671 	.db #0x7f	; 127
      0001D6 04                    6672 	.db #0x04	; 4
      0001D7 02                    6673 	.db #0x02	; 2
      0001D8 01                    6674 	.db #0x01	; 1
      0001D9 02                    6675 	.db #0x02	; 2
      0001DA 04                    6676 	.db #0x04	; 4
      0001DB 40                    6677 	.db #0x40	; 64
      0001DC 40                    6678 	.db #0x40	; 64
      0001DD 40                    6679 	.db #0x40	; 64
      0001DE 40                    6680 	.db #0x40	; 64
      0001DF 40                    6681 	.db #0x40	; 64
      0001E0 00                    6682 	.db #0x00	; 0
      0001E1 03                    6683 	.db #0x03	; 3
      0001E2 07                    6684 	.db #0x07	; 7
      0001E3 08                    6685 	.db #0x08	; 8
      0001E4 00                    6686 	.db #0x00	; 0
      0001E5 20                    6687 	.db #0x20	; 32
      0001E6 54                    6688 	.db #0x54	; 84	'T'
      0001E7 54                    6689 	.db #0x54	; 84	'T'
      0001E8 78                    6690 	.db #0x78	; 120	'x'
      0001E9 40                    6691 	.db #0x40	; 64
      0001EA 7F                    6692 	.db #0x7f	; 127
      0001EB 28                    6693 	.db #0x28	; 40
      0001EC 44                    6694 	.db #0x44	; 68	'D'
      0001ED 44                    6695 	.db #0x44	; 68	'D'
      0001EE 38                    6696 	.db #0x38	; 56	'8'
      0001EF 38                    6697 	.db #0x38	; 56	'8'
      0001F0 44                    6698 	.db #0x44	; 68	'D'
      0001F1 44                    6699 	.db #0x44	; 68	'D'
      0001F2 44                    6700 	.db #0x44	; 68	'D'
      0001F3 28                    6701 	.db #0x28	; 40
      0001F4 38                    6702 	.db #0x38	; 56	'8'
      0001F5 44                    6703 	.db #0x44	; 68	'D'
      0001F6 44                    6704 	.db #0x44	; 68	'D'
      0001F7 28                    6705 	.db #0x28	; 40
      0001F8 7F                    6706 	.db #0x7f	; 127
      0001F9 38                    6707 	.db #0x38	; 56	'8'
      0001FA 54                    6708 	.db #0x54	; 84	'T'
      0001FB 54                    6709 	.db #0x54	; 84	'T'
      0001FC 54                    6710 	.db #0x54	; 84	'T'
      0001FD 18                    6711 	.db #0x18	; 24
      0001FE 00                    6712 	.db #0x00	; 0
      0001FF 08                    6713 	.db #0x08	; 8
      000200 7E                    6714 	.db #0x7e	; 126
      000201 09                    6715 	.db #0x09	; 9
      000202 02                    6716 	.db #0x02	; 2
      000203 18                    6717 	.db #0x18	; 24
      000204 A4                    6718 	.db #0xa4	; 164
      000205 A4                    6719 	.db #0xa4	; 164
      000206 9C                    6720 	.db #0x9c	; 156
      000207 78                    6721 	.db #0x78	; 120	'x'
      000208 7F                    6722 	.db #0x7f	; 127
      000209 08                    6723 	.db #0x08	; 8
      00020A 04                    6724 	.db #0x04	; 4
      00020B 04                    6725 	.db #0x04	; 4
      00020C 78                    6726 	.db #0x78	; 120	'x'
      00020D 00                    6727 	.db #0x00	; 0
      00020E 44                    6728 	.db #0x44	; 68	'D'
      00020F 7D                    6729 	.db #0x7d	; 125
      000210 40                    6730 	.db #0x40	; 64
      000211 00                    6731 	.db #0x00	; 0
      000212 20                    6732 	.db #0x20	; 32
      000213 40                    6733 	.db #0x40	; 64
      000214 40                    6734 	.db #0x40	; 64
      000215 3D                    6735 	.db #0x3d	; 61
      000216 00                    6736 	.db #0x00	; 0
      000217 7F                    6737 	.db #0x7f	; 127
      000218 10                    6738 	.db #0x10	; 16
      000219 28                    6739 	.db #0x28	; 40
      00021A 44                    6740 	.db #0x44	; 68	'D'
      00021B 00                    6741 	.db #0x00	; 0
      00021C 00                    6742 	.db #0x00	; 0
      00021D 41                    6743 	.db #0x41	; 65	'A'
      00021E 7F                    6744 	.db #0x7f	; 127
      00021F 40                    6745 	.db #0x40	; 64
      000220 00                    6746 	.db #0x00	; 0
      000221 7C                    6747 	.db #0x7c	; 124
      000222 04                    6748 	.db #0x04	; 4
      000223 78                    6749 	.db #0x78	; 120	'x'
      000224 04                    6750 	.db #0x04	; 4
      000225 78                    6751 	.db #0x78	; 120	'x'
      000226 7C                    6752 	.db #0x7c	; 124
      000227 08                    6753 	.db #0x08	; 8
      000228 04                    6754 	.db #0x04	; 4
      000229 04                    6755 	.db #0x04	; 4
      00022A 78                    6756 	.db #0x78	; 120	'x'
      00022B 38                    6757 	.db #0x38	; 56	'8'
      00022C 44                    6758 	.db #0x44	; 68	'D'
      00022D 44                    6759 	.db #0x44	; 68	'D'
      00022E 44                    6760 	.db #0x44	; 68	'D'
      00022F 38                    6761 	.db #0x38	; 56	'8'
      000230 FC                    6762 	.db #0xfc	; 252
      000231 18                    6763 	.db #0x18	; 24
      000232 24                    6764 	.db #0x24	; 36
      000233 24                    6765 	.db #0x24	; 36
      000234 18                    6766 	.db #0x18	; 24
      000235 18                    6767 	.db #0x18	; 24
      000236 24                    6768 	.db #0x24	; 36
      000237 24                    6769 	.db #0x24	; 36
      000238 18                    6770 	.db #0x18	; 24
      000239 FC                    6771 	.db #0xfc	; 252
      00023A 7C                    6772 	.db #0x7c	; 124
      00023B 08                    6773 	.db #0x08	; 8
      00023C 04                    6774 	.db #0x04	; 4
      00023D 04                    6775 	.db #0x04	; 4
      00023E 08                    6776 	.db #0x08	; 8
      00023F 48                    6777 	.db #0x48	; 72	'H'
      000240 54                    6778 	.db #0x54	; 84	'T'
      000241 54                    6779 	.db #0x54	; 84	'T'
      000242 54                    6780 	.db #0x54	; 84	'T'
      000243 24                    6781 	.db #0x24	; 36
      000244 04                    6782 	.db #0x04	; 4
      000245 04                    6783 	.db #0x04	; 4
      000246 3F                    6784 	.db #0x3f	; 63
      000247 44                    6785 	.db #0x44	; 68	'D'
      000248 24                    6786 	.db #0x24	; 36
      000249 3C                    6787 	.db #0x3c	; 60
      00024A 40                    6788 	.db #0x40	; 64
      00024B 40                    6789 	.db #0x40	; 64
      00024C 20                    6790 	.db #0x20	; 32
      00024D 7C                    6791 	.db #0x7c	; 124
      00024E 1C                    6792 	.db #0x1c	; 28
      00024F 20                    6793 	.db #0x20	; 32
      000250 40                    6794 	.db #0x40	; 64
      000251 20                    6795 	.db #0x20	; 32
      000252 1C                    6796 	.db #0x1c	; 28
      000253 3C                    6797 	.db #0x3c	; 60
      000254 40                    6798 	.db #0x40	; 64
      000255 30                    6799 	.db #0x30	; 48	'0'
      000256 40                    6800 	.db #0x40	; 64
      000257 3C                    6801 	.db #0x3c	; 60
      000258 44                    6802 	.db #0x44	; 68	'D'
      000259 28                    6803 	.db #0x28	; 40
      00025A 10                    6804 	.db #0x10	; 16
      00025B 28                    6805 	.db #0x28	; 40
      00025C 44                    6806 	.db #0x44	; 68	'D'
      00025D 4C                    6807 	.db #0x4c	; 76	'L'
      00025E 90                    6808 	.db #0x90	; 144
      00025F 90                    6809 	.db #0x90	; 144
      000260 90                    6810 	.db #0x90	; 144
      000261 7C                    6811 	.db #0x7c	; 124
      000262 44                    6812 	.db #0x44	; 68	'D'
      000263 64                    6813 	.db #0x64	; 100	'd'
      000264 54                    6814 	.db #0x54	; 84	'T'
      000265 4C                    6815 	.db #0x4c	; 76	'L'
      000266 44                    6816 	.db #0x44	; 68	'D'
      000267 00                    6817 	.db #0x00	; 0
      000268 08                    6818 	.db #0x08	; 8
      000269 36                    6819 	.db #0x36	; 54	'6'
      00026A 41                    6820 	.db #0x41	; 65	'A'
      00026B 00                    6821 	.db #0x00	; 0
      00026C 00                    6822 	.db #0x00	; 0
      00026D 00                    6823 	.db #0x00	; 0
      00026E 77                    6824 	.db #0x77	; 119	'w'
      00026F 00                    6825 	.db #0x00	; 0
      000270 00                    6826 	.db #0x00	; 0
      000271 00                    6827 	.db #0x00	; 0
      000272 41                    6828 	.db #0x41	; 65	'A'
      000273 36                    6829 	.db #0x36	; 54	'6'
      000274 08                    6830 	.db #0x08	; 8
      000275 00                    6831 	.db #0x00	; 0
      000276 02                    6832 	.db #0x02	; 2
      000277 01                    6833 	.db #0x01	; 1
      000278 02                    6834 	.db #0x02	; 2
      000279 04                    6835 	.db #0x04	; 4
      00027A 02                    6836 	.db #0x02	; 2
      00027B 3C                    6837 	.db #0x3c	; 60
      00027C 26                    6838 	.db #0x26	; 38
      00027D 23                    6839 	.db #0x23	; 35
      00027E 26                    6840 	.db #0x26	; 38
      00027F 3C                    6841 	.db #0x3c	; 60
      000280 1E                    6842 	.db #0x1e	; 30
      000281 A1                    6843 	.db #0xa1	; 161
      000282 A1                    6844 	.db #0xa1	; 161
      000283 61                    6845 	.db #0x61	; 97	'a'
      000284 12                    6846 	.db #0x12	; 18
      000285 3A                    6847 	.db #0x3a	; 58
      000286 40                    6848 	.db #0x40	; 64
      000287 40                    6849 	.db #0x40	; 64
      000288 20                    6850 	.db #0x20	; 32
      000289 7A                    6851 	.db #0x7a	; 122	'z'
      00028A 38                    6852 	.db #0x38	; 56	'8'
      00028B 54                    6853 	.db #0x54	; 84	'T'
      00028C 54                    6854 	.db #0x54	; 84	'T'
      00028D 55                    6855 	.db #0x55	; 85	'U'
      00028E 59                    6856 	.db #0x59	; 89	'Y'
      00028F 21                    6857 	.db #0x21	; 33
      000290 55                    6858 	.db #0x55	; 85	'U'
      000291 55                    6859 	.db #0x55	; 85	'U'
      000292 79                    6860 	.db #0x79	; 121	'y'
      000293 41                    6861 	.db #0x41	; 65	'A'
      000294 22                    6862 	.db #0x22	; 34
      000295 54                    6863 	.db #0x54	; 84	'T'
      000296 54                    6864 	.db #0x54	; 84	'T'
      000297 78                    6865 	.db #0x78	; 120	'x'
      000298 42                    6866 	.db #0x42	; 66	'B'
      000299 21                    6867 	.db #0x21	; 33
      00029A 55                    6868 	.db #0x55	; 85	'U'
      00029B 54                    6869 	.db #0x54	; 84	'T'
      00029C 78                    6870 	.db #0x78	; 120	'x'
      00029D 40                    6871 	.db #0x40	; 64
      00029E 20                    6872 	.db #0x20	; 32
      00029F 54                    6873 	.db #0x54	; 84	'T'
      0002A0 55                    6874 	.db #0x55	; 85	'U'
      0002A1 79                    6875 	.db #0x79	; 121	'y'
      0002A2 40                    6876 	.db #0x40	; 64
      0002A3 0C                    6877 	.db #0x0c	; 12
      0002A4 1E                    6878 	.db #0x1e	; 30
      0002A5 52                    6879 	.db #0x52	; 82	'R'
      0002A6 72                    6880 	.db #0x72	; 114	'r'
      0002A7 12                    6881 	.db #0x12	; 18
      0002A8 39                    6882 	.db #0x39	; 57	'9'
      0002A9 55                    6883 	.db #0x55	; 85	'U'
      0002AA 55                    6884 	.db #0x55	; 85	'U'
      0002AB 55                    6885 	.db #0x55	; 85	'U'
      0002AC 59                    6886 	.db #0x59	; 89	'Y'
      0002AD 39                    6887 	.db #0x39	; 57	'9'
      0002AE 54                    6888 	.db #0x54	; 84	'T'
      0002AF 54                    6889 	.db #0x54	; 84	'T'
      0002B0 54                    6890 	.db #0x54	; 84	'T'
      0002B1 59                    6891 	.db #0x59	; 89	'Y'
      0002B2 39                    6892 	.db #0x39	; 57	'9'
      0002B3 55                    6893 	.db #0x55	; 85	'U'
      0002B4 54                    6894 	.db #0x54	; 84	'T'
      0002B5 54                    6895 	.db #0x54	; 84	'T'
      0002B6 58                    6896 	.db #0x58	; 88	'X'
      0002B7 00                    6897 	.db #0x00	; 0
      0002B8 00                    6898 	.db #0x00	; 0
      0002B9 45                    6899 	.db #0x45	; 69	'E'
      0002BA 7C                    6900 	.db #0x7c	; 124
      0002BB 41                    6901 	.db #0x41	; 65	'A'
      0002BC 00                    6902 	.db #0x00	; 0
      0002BD 02                    6903 	.db #0x02	; 2
      0002BE 45                    6904 	.db #0x45	; 69	'E'
      0002BF 7D                    6905 	.db #0x7d	; 125
      0002C0 42                    6906 	.db #0x42	; 66	'B'
      0002C1 00                    6907 	.db #0x00	; 0
      0002C2 01                    6908 	.db #0x01	; 1
      0002C3 45                    6909 	.db #0x45	; 69	'E'
      0002C4 7C                    6910 	.db #0x7c	; 124
      0002C5 40                    6911 	.db #0x40	; 64
      0002C6 7D                    6912 	.db #0x7d	; 125
      0002C7 12                    6913 	.db #0x12	; 18
      0002C8 11                    6914 	.db #0x11	; 17
      0002C9 12                    6915 	.db #0x12	; 18
      0002CA 7D                    6916 	.db #0x7d	; 125
      0002CB F0                    6917 	.db #0xf0	; 240
      0002CC 28                    6918 	.db #0x28	; 40
      0002CD 25                    6919 	.db #0x25	; 37
      0002CE 28                    6920 	.db #0x28	; 40
      0002CF F0                    6921 	.db #0xf0	; 240
      0002D0 7C                    6922 	.db #0x7c	; 124
      0002D1 54                    6923 	.db #0x54	; 84	'T'
      0002D2 55                    6924 	.db #0x55	; 85	'U'
      0002D3 45                    6925 	.db #0x45	; 69	'E'
      0002D4 00                    6926 	.db #0x00	; 0
      0002D5 20                    6927 	.db #0x20	; 32
      0002D6 54                    6928 	.db #0x54	; 84	'T'
      0002D7 54                    6929 	.db #0x54	; 84	'T'
      0002D8 7C                    6930 	.db #0x7c	; 124
      0002D9 54                    6931 	.db #0x54	; 84	'T'
      0002DA 7C                    6932 	.db #0x7c	; 124
      0002DB 0A                    6933 	.db #0x0a	; 10
      0002DC 09                    6934 	.db #0x09	; 9
      0002DD 7F                    6935 	.db #0x7f	; 127
      0002DE 49                    6936 	.db #0x49	; 73	'I'
      0002DF 32                    6937 	.db #0x32	; 50	'2'
      0002E0 49                    6938 	.db #0x49	; 73	'I'
      0002E1 49                    6939 	.db #0x49	; 73	'I'
      0002E2 49                    6940 	.db #0x49	; 73	'I'
      0002E3 32                    6941 	.db #0x32	; 50	'2'
      0002E4 3A                    6942 	.db #0x3a	; 58
      0002E5 44                    6943 	.db #0x44	; 68	'D'
      0002E6 44                    6944 	.db #0x44	; 68	'D'
      0002E7 44                    6945 	.db #0x44	; 68	'D'
      0002E8 3A                    6946 	.db #0x3a	; 58
      0002E9 32                    6947 	.db #0x32	; 50	'2'
      0002EA 4A                    6948 	.db #0x4a	; 74	'J'
      0002EB 48                    6949 	.db #0x48	; 72	'H'
      0002EC 48                    6950 	.db #0x48	; 72	'H'
      0002ED 30                    6951 	.db #0x30	; 48	'0'
      0002EE 3A                    6952 	.db #0x3a	; 58
      0002EF 41                    6953 	.db #0x41	; 65	'A'
      0002F0 41                    6954 	.db #0x41	; 65	'A'
      0002F1 21                    6955 	.db #0x21	; 33
      0002F2 7A                    6956 	.db #0x7a	; 122	'z'
      0002F3 3A                    6957 	.db #0x3a	; 58
      0002F4 42                    6958 	.db #0x42	; 66	'B'
      0002F5 40                    6959 	.db #0x40	; 64
      0002F6 20                    6960 	.db #0x20	; 32
      0002F7 78                    6961 	.db #0x78	; 120	'x'
      0002F8 00                    6962 	.db #0x00	; 0
      0002F9 9D                    6963 	.db #0x9d	; 157
      0002FA A0                    6964 	.db #0xa0	; 160
      0002FB A0                    6965 	.db #0xa0	; 160
      0002FC 7D                    6966 	.db #0x7d	; 125
      0002FD 3D                    6967 	.db #0x3d	; 61
      0002FE 42                    6968 	.db #0x42	; 66	'B'
      0002FF 42                    6969 	.db #0x42	; 66	'B'
      000300 42                    6970 	.db #0x42	; 66	'B'
      000301 3D                    6971 	.db #0x3d	; 61
      000302 3D                    6972 	.db #0x3d	; 61
      000303 40                    6973 	.db #0x40	; 64
      000304 40                    6974 	.db #0x40	; 64
      000305 40                    6975 	.db #0x40	; 64
      000306 3D                    6976 	.db #0x3d	; 61
      000307 3C                    6977 	.db #0x3c	; 60
      000308 24                    6978 	.db #0x24	; 36
      000309 FF                    6979 	.db #0xff	; 255
      00030A 24                    6980 	.db #0x24	; 36
      00030B 24                    6981 	.db #0x24	; 36
      00030C 48                    6982 	.db #0x48	; 72	'H'
      00030D 7E                    6983 	.db #0x7e	; 126
      00030E 49                    6984 	.db #0x49	; 73	'I'
      00030F 43                    6985 	.db #0x43	; 67	'C'
      000310 66                    6986 	.db #0x66	; 102	'f'
      000311 2B                    6987 	.db #0x2b	; 43
      000312 2F                    6988 	.db #0x2f	; 47
      000313 FC                    6989 	.db #0xfc	; 252
      000314 2F                    6990 	.db #0x2f	; 47
      000315 2B                    6991 	.db #0x2b	; 43
      000316 FF                    6992 	.db #0xff	; 255
      000317 09                    6993 	.db #0x09	; 9
      000318 29                    6994 	.db #0x29	; 41
      000319 F6                    6995 	.db #0xf6	; 246
      00031A 20                    6996 	.db #0x20	; 32
      00031B C0                    6997 	.db #0xc0	; 192
      00031C 88                    6998 	.db #0x88	; 136
      00031D 7E                    6999 	.db #0x7e	; 126
      00031E 09                    7000 	.db #0x09	; 9
      00031F 03                    7001 	.db #0x03	; 3
      000320 20                    7002 	.db #0x20	; 32
      000321 54                    7003 	.db #0x54	; 84	'T'
      000322 54                    7004 	.db #0x54	; 84	'T'
      000323 79                    7005 	.db #0x79	; 121	'y'
      000324 41                    7006 	.db #0x41	; 65	'A'
      000325 00                    7007 	.db #0x00	; 0
      000326 00                    7008 	.db #0x00	; 0
      000327 44                    7009 	.db #0x44	; 68	'D'
      000328 7D                    7010 	.db #0x7d	; 125
      000329 41                    7011 	.db #0x41	; 65	'A'
      00032A 30                    7012 	.db #0x30	; 48	'0'
      00032B 48                    7013 	.db #0x48	; 72	'H'
      00032C 48                    7014 	.db #0x48	; 72	'H'
      00032D 4A                    7015 	.db #0x4a	; 74	'J'
      00032E 32                    7016 	.db #0x32	; 50	'2'
      00032F 38                    7017 	.db #0x38	; 56	'8'
      000330 40                    7018 	.db #0x40	; 64
      000331 40                    7019 	.db #0x40	; 64
      000332 22                    7020 	.db #0x22	; 34
      000333 7A                    7021 	.db #0x7a	; 122	'z'
      000334 00                    7022 	.db #0x00	; 0
      000335 7A                    7023 	.db #0x7a	; 122	'z'
      000336 0A                    7024 	.db #0x0a	; 10
      000337 0A                    7025 	.db #0x0a	; 10
      000338 72                    7026 	.db #0x72	; 114	'r'
      000339 7D                    7027 	.db #0x7d	; 125
      00033A 0D                    7028 	.db #0x0d	; 13
      00033B 19                    7029 	.db #0x19	; 25
      00033C 31                    7030 	.db #0x31	; 49	'1'
      00033D 7D                    7031 	.db #0x7d	; 125
      00033E 26                    7032 	.db #0x26	; 38
      00033F 29                    7033 	.db #0x29	; 41
      000340 29                    7034 	.db #0x29	; 41
      000341 2F                    7035 	.db #0x2f	; 47
      000342 28                    7036 	.db #0x28	; 40
      000343 26                    7037 	.db #0x26	; 38
      000344 29                    7038 	.db #0x29	; 41
      000345 29                    7039 	.db #0x29	; 41
      000346 29                    7040 	.db #0x29	; 41
      000347 26                    7041 	.db #0x26	; 38
      000348 30                    7042 	.db #0x30	; 48	'0'
      000349 48                    7043 	.db #0x48	; 72	'H'
      00034A 4D                    7044 	.db #0x4d	; 77	'M'
      00034B 40                    7045 	.db #0x40	; 64
      00034C 20                    7046 	.db #0x20	; 32
      00034D 38                    7047 	.db #0x38	; 56	'8'
      00034E 08                    7048 	.db #0x08	; 8
      00034F 08                    7049 	.db #0x08	; 8
      000350 08                    7050 	.db #0x08	; 8
      000351 08                    7051 	.db #0x08	; 8
      000352 08                    7052 	.db #0x08	; 8
      000353 08                    7053 	.db #0x08	; 8
      000354 08                    7054 	.db #0x08	; 8
      000355 08                    7055 	.db #0x08	; 8
      000356 38                    7056 	.db #0x38	; 56	'8'
      000357 2F                    7057 	.db #0x2f	; 47
      000358 10                    7058 	.db #0x10	; 16
      000359 C8                    7059 	.db #0xc8	; 200
      00035A AC                    7060 	.db #0xac	; 172
      00035B BA                    7061 	.db #0xba	; 186
      00035C 2F                    7062 	.db #0x2f	; 47
      00035D 10                    7063 	.db #0x10	; 16
      00035E 28                    7064 	.db #0x28	; 40
      00035F 34                    7065 	.db #0x34	; 52	'4'
      000360 FA                    7066 	.db #0xfa	; 250
      000361 00                    7067 	.db #0x00	; 0
      000362 00                    7068 	.db #0x00	; 0
      000363 7B                    7069 	.db #0x7b	; 123
      000364 00                    7070 	.db #0x00	; 0
      000365 00                    7071 	.db #0x00	; 0
      000366 08                    7072 	.db #0x08	; 8
      000367 14                    7073 	.db #0x14	; 20
      000368 2A                    7074 	.db #0x2a	; 42
      000369 14                    7075 	.db #0x14	; 20
      00036A 22                    7076 	.db #0x22	; 34
      00036B 22                    7077 	.db #0x22	; 34
      00036C 14                    7078 	.db #0x14	; 20
      00036D 2A                    7079 	.db #0x2a	; 42
      00036E 14                    7080 	.db #0x14	; 20
      00036F 08                    7081 	.db #0x08	; 8
      000370 AA                    7082 	.db #0xaa	; 170
      000371 00                    7083 	.db #0x00	; 0
      000372 55                    7084 	.db #0x55	; 85	'U'
      000373 00                    7085 	.db #0x00	; 0
      000374 AA                    7086 	.db #0xaa	; 170
      000375 AA                    7087 	.db #0xaa	; 170
      000376 55                    7088 	.db #0x55	; 85	'U'
      000377 AA                    7089 	.db #0xaa	; 170
      000378 55                    7090 	.db #0x55	; 85	'U'
      000379 AA                    7091 	.db #0xaa	; 170
      00037A 00                    7092 	.db #0x00	; 0
      00037B 00                    7093 	.db #0x00	; 0
      00037C 00                    7094 	.db #0x00	; 0
      00037D FF                    7095 	.db #0xff	; 255
      00037E 00                    7096 	.db #0x00	; 0
      00037F 10                    7097 	.db #0x10	; 16
      000380 10                    7098 	.db #0x10	; 16
      000381 10                    7099 	.db #0x10	; 16
      000382 FF                    7100 	.db #0xff	; 255
      000383 00                    7101 	.db #0x00	; 0
      000384 14                    7102 	.db #0x14	; 20
      000385 14                    7103 	.db #0x14	; 20
      000386 14                    7104 	.db #0x14	; 20
      000387 FF                    7105 	.db #0xff	; 255
      000388 00                    7106 	.db #0x00	; 0
      000389 10                    7107 	.db #0x10	; 16
      00038A 10                    7108 	.db #0x10	; 16
      00038B FF                    7109 	.db #0xff	; 255
      00038C 00                    7110 	.db #0x00	; 0
      00038D FF                    7111 	.db #0xff	; 255
      00038E 10                    7112 	.db #0x10	; 16
      00038F 10                    7113 	.db #0x10	; 16
      000390 F0                    7114 	.db #0xf0	; 240
      000391 10                    7115 	.db #0x10	; 16
      000392 F0                    7116 	.db #0xf0	; 240
      000393 14                    7117 	.db #0x14	; 20
      000394 14                    7118 	.db #0x14	; 20
      000395 14                    7119 	.db #0x14	; 20
      000396 FC                    7120 	.db #0xfc	; 252
      000397 00                    7121 	.db #0x00	; 0
      000398 14                    7122 	.db #0x14	; 20
      000399 14                    7123 	.db #0x14	; 20
      00039A F7                    7124 	.db #0xf7	; 247
      00039B 00                    7125 	.db #0x00	; 0
      00039C FF                    7126 	.db #0xff	; 255
      00039D 00                    7127 	.db #0x00	; 0
      00039E 00                    7128 	.db #0x00	; 0
      00039F FF                    7129 	.db #0xff	; 255
      0003A0 00                    7130 	.db #0x00	; 0
      0003A1 FF                    7131 	.db #0xff	; 255
      0003A2 14                    7132 	.db #0x14	; 20
      0003A3 14                    7133 	.db #0x14	; 20
      0003A4 F4                    7134 	.db #0xf4	; 244
      0003A5 04                    7135 	.db #0x04	; 4
      0003A6 FC                    7136 	.db #0xfc	; 252
      0003A7 14                    7137 	.db #0x14	; 20
      0003A8 14                    7138 	.db #0x14	; 20
      0003A9 17                    7139 	.db #0x17	; 23
      0003AA 10                    7140 	.db #0x10	; 16
      0003AB 1F                    7141 	.db #0x1f	; 31
      0003AC 10                    7142 	.db #0x10	; 16
      0003AD 10                    7143 	.db #0x10	; 16
      0003AE 1F                    7144 	.db #0x1f	; 31
      0003AF 10                    7145 	.db #0x10	; 16
      0003B0 1F                    7146 	.db #0x1f	; 31
      0003B1 14                    7147 	.db #0x14	; 20
      0003B2 14                    7148 	.db #0x14	; 20
      0003B3 14                    7149 	.db #0x14	; 20
      0003B4 1F                    7150 	.db #0x1f	; 31
      0003B5 00                    7151 	.db #0x00	; 0
      0003B6 10                    7152 	.db #0x10	; 16
      0003B7 10                    7153 	.db #0x10	; 16
      0003B8 10                    7154 	.db #0x10	; 16
      0003B9 F0                    7155 	.db #0xf0	; 240
      0003BA 00                    7156 	.db #0x00	; 0
      0003BB 00                    7157 	.db #0x00	; 0
      0003BC 00                    7158 	.db #0x00	; 0
      0003BD 00                    7159 	.db #0x00	; 0
      0003BE 1F                    7160 	.db #0x1f	; 31
      0003BF 10                    7161 	.db #0x10	; 16
      0003C0 10                    7162 	.db #0x10	; 16
      0003C1 10                    7163 	.db #0x10	; 16
      0003C2 10                    7164 	.db #0x10	; 16
      0003C3 1F                    7165 	.db #0x1f	; 31
      0003C4 10                    7166 	.db #0x10	; 16
      0003C5 10                    7167 	.db #0x10	; 16
      0003C6 10                    7168 	.db #0x10	; 16
      0003C7 10                    7169 	.db #0x10	; 16
      0003C8 F0                    7170 	.db #0xf0	; 240
      0003C9 10                    7171 	.db #0x10	; 16
      0003CA 00                    7172 	.db #0x00	; 0
      0003CB 00                    7173 	.db #0x00	; 0
      0003CC 00                    7174 	.db #0x00	; 0
      0003CD FF                    7175 	.db #0xff	; 255
      0003CE 10                    7176 	.db #0x10	; 16
      0003CF 10                    7177 	.db #0x10	; 16
      0003D0 10                    7178 	.db #0x10	; 16
      0003D1 10                    7179 	.db #0x10	; 16
      0003D2 10                    7180 	.db #0x10	; 16
      0003D3 10                    7181 	.db #0x10	; 16
      0003D4 10                    7182 	.db #0x10	; 16
      0003D5 10                    7183 	.db #0x10	; 16
      0003D6 10                    7184 	.db #0x10	; 16
      0003D7 FF                    7185 	.db #0xff	; 255
      0003D8 10                    7186 	.db #0x10	; 16
      0003D9 00                    7187 	.db #0x00	; 0
      0003DA 00                    7188 	.db #0x00	; 0
      0003DB 00                    7189 	.db #0x00	; 0
      0003DC FF                    7190 	.db #0xff	; 255
      0003DD 14                    7191 	.db #0x14	; 20
      0003DE 00                    7192 	.db #0x00	; 0
      0003DF 00                    7193 	.db #0x00	; 0
      0003E0 FF                    7194 	.db #0xff	; 255
      0003E1 00                    7195 	.db #0x00	; 0
      0003E2 FF                    7196 	.db #0xff	; 255
      0003E3 00                    7197 	.db #0x00	; 0
      0003E4 00                    7198 	.db #0x00	; 0
      0003E5 1F                    7199 	.db #0x1f	; 31
      0003E6 10                    7200 	.db #0x10	; 16
      0003E7 17                    7201 	.db #0x17	; 23
      0003E8 00                    7202 	.db #0x00	; 0
      0003E9 00                    7203 	.db #0x00	; 0
      0003EA FC                    7204 	.db #0xfc	; 252
      0003EB 04                    7205 	.db #0x04	; 4
      0003EC F4                    7206 	.db #0xf4	; 244
      0003ED 14                    7207 	.db #0x14	; 20
      0003EE 14                    7208 	.db #0x14	; 20
      0003EF 17                    7209 	.db #0x17	; 23
      0003F0 10                    7210 	.db #0x10	; 16
      0003F1 17                    7211 	.db #0x17	; 23
      0003F2 14                    7212 	.db #0x14	; 20
      0003F3 14                    7213 	.db #0x14	; 20
      0003F4 F4                    7214 	.db #0xf4	; 244
      0003F5 04                    7215 	.db #0x04	; 4
      0003F6 F4                    7216 	.db #0xf4	; 244
      0003F7 00                    7217 	.db #0x00	; 0
      0003F8 00                    7218 	.db #0x00	; 0
      0003F9 FF                    7219 	.db #0xff	; 255
      0003FA 00                    7220 	.db #0x00	; 0
      0003FB F7                    7221 	.db #0xf7	; 247
      0003FC 14                    7222 	.db #0x14	; 20
      0003FD 14                    7223 	.db #0x14	; 20
      0003FE 14                    7224 	.db #0x14	; 20
      0003FF 14                    7225 	.db #0x14	; 20
      000400 14                    7226 	.db #0x14	; 20
      000401 14                    7227 	.db #0x14	; 20
      000402 14                    7228 	.db #0x14	; 20
      000403 F7                    7229 	.db #0xf7	; 247
      000404 00                    7230 	.db #0x00	; 0
      000405 F7                    7231 	.db #0xf7	; 247
      000406 14                    7232 	.db #0x14	; 20
      000407 14                    7233 	.db #0x14	; 20
      000408 14                    7234 	.db #0x14	; 20
      000409 17                    7235 	.db #0x17	; 23
      00040A 14                    7236 	.db #0x14	; 20
      00040B 10                    7237 	.db #0x10	; 16
      00040C 10                    7238 	.db #0x10	; 16
      00040D 1F                    7239 	.db #0x1f	; 31
      00040E 10                    7240 	.db #0x10	; 16
      00040F 1F                    7241 	.db #0x1f	; 31
      000410 14                    7242 	.db #0x14	; 20
      000411 14                    7243 	.db #0x14	; 20
      000412 14                    7244 	.db #0x14	; 20
      000413 F4                    7245 	.db #0xf4	; 244
      000414 14                    7246 	.db #0x14	; 20
      000415 10                    7247 	.db #0x10	; 16
      000416 10                    7248 	.db #0x10	; 16
      000417 F0                    7249 	.db #0xf0	; 240
      000418 10                    7250 	.db #0x10	; 16
      000419 F0                    7251 	.db #0xf0	; 240
      00041A 00                    7252 	.db #0x00	; 0
      00041B 00                    7253 	.db #0x00	; 0
      00041C 1F                    7254 	.db #0x1f	; 31
      00041D 10                    7255 	.db #0x10	; 16
      00041E 1F                    7256 	.db #0x1f	; 31
      00041F 00                    7257 	.db #0x00	; 0
      000420 00                    7258 	.db #0x00	; 0
      000421 00                    7259 	.db #0x00	; 0
      000422 1F                    7260 	.db #0x1f	; 31
      000423 14                    7261 	.db #0x14	; 20
      000424 00                    7262 	.db #0x00	; 0
      000425 00                    7263 	.db #0x00	; 0
      000426 00                    7264 	.db #0x00	; 0
      000427 FC                    7265 	.db #0xfc	; 252
      000428 14                    7266 	.db #0x14	; 20
      000429 00                    7267 	.db #0x00	; 0
      00042A 00                    7268 	.db #0x00	; 0
      00042B F0                    7269 	.db #0xf0	; 240
      00042C 10                    7270 	.db #0x10	; 16
      00042D F0                    7271 	.db #0xf0	; 240
      00042E 10                    7272 	.db #0x10	; 16
      00042F 10                    7273 	.db #0x10	; 16
      000430 FF                    7274 	.db #0xff	; 255
      000431 10                    7275 	.db #0x10	; 16
      000432 FF                    7276 	.db #0xff	; 255
      000433 14                    7277 	.db #0x14	; 20
      000434 14                    7278 	.db #0x14	; 20
      000435 14                    7279 	.db #0x14	; 20
      000436 FF                    7280 	.db #0xff	; 255
      000437 14                    7281 	.db #0x14	; 20
      000438 10                    7282 	.db #0x10	; 16
      000439 10                    7283 	.db #0x10	; 16
      00043A 10                    7284 	.db #0x10	; 16
      00043B 1F                    7285 	.db #0x1f	; 31
      00043C 00                    7286 	.db #0x00	; 0
      00043D 00                    7287 	.db #0x00	; 0
      00043E 00                    7288 	.db #0x00	; 0
      00043F 00                    7289 	.db #0x00	; 0
      000440 F0                    7290 	.db #0xf0	; 240
      000441 10                    7291 	.db #0x10	; 16
      000442 FF                    7292 	.db #0xff	; 255
      000443 FF                    7293 	.db #0xff	; 255
      000444 FF                    7294 	.db #0xff	; 255
      000445 FF                    7295 	.db #0xff	; 255
      000446 FF                    7296 	.db #0xff	; 255
      000447 F0                    7297 	.db #0xf0	; 240
      000448 F0                    7298 	.db #0xf0	; 240
      000449 F0                    7299 	.db #0xf0	; 240
      00044A F0                    7300 	.db #0xf0	; 240
      00044B F0                    7301 	.db #0xf0	; 240
      00044C FF                    7302 	.db #0xff	; 255
      00044D FF                    7303 	.db #0xff	; 255
      00044E FF                    7304 	.db #0xff	; 255
      00044F 00                    7305 	.db #0x00	; 0
      000450 00                    7306 	.db #0x00	; 0
      000451 00                    7307 	.db #0x00	; 0
      000452 00                    7308 	.db #0x00	; 0
      000453 00                    7309 	.db #0x00	; 0
      000454 FF                    7310 	.db #0xff	; 255
      000455 FF                    7311 	.db #0xff	; 255
      000456 0F                    7312 	.db #0x0f	; 15
      000457 0F                    7313 	.db #0x0f	; 15
      000458 0F                    7314 	.db #0x0f	; 15
      000459 0F                    7315 	.db #0x0f	; 15
      00045A 0F                    7316 	.db #0x0f	; 15
      00045B 38                    7317 	.db #0x38	; 56	'8'
      00045C 44                    7318 	.db #0x44	; 68	'D'
      00045D 44                    7319 	.db #0x44	; 68	'D'
      00045E 38                    7320 	.db #0x38	; 56	'8'
      00045F 44                    7321 	.db #0x44	; 68	'D'
      000460 FC                    7322 	.db #0xfc	; 252
      000461 4A                    7323 	.db #0x4a	; 74	'J'
      000462 4A                    7324 	.db #0x4a	; 74	'J'
      000463 4A                    7325 	.db #0x4a	; 74	'J'
      000464 34                    7326 	.db #0x34	; 52	'4'
      000465 7E                    7327 	.db #0x7e	; 126
      000466 02                    7328 	.db #0x02	; 2
      000467 02                    7329 	.db #0x02	; 2
      000468 06                    7330 	.db #0x06	; 6
      000469 06                    7331 	.db #0x06	; 6
      00046A 02                    7332 	.db #0x02	; 2
      00046B 7E                    7333 	.db #0x7e	; 126
      00046C 02                    7334 	.db #0x02	; 2
      00046D 7E                    7335 	.db #0x7e	; 126
      00046E 02                    7336 	.db #0x02	; 2
      00046F 63                    7337 	.db #0x63	; 99	'c'
      000470 55                    7338 	.db #0x55	; 85	'U'
      000471 49                    7339 	.db #0x49	; 73	'I'
      000472 41                    7340 	.db #0x41	; 65	'A'
      000473 63                    7341 	.db #0x63	; 99	'c'
      000474 38                    7342 	.db #0x38	; 56	'8'
      000475 44                    7343 	.db #0x44	; 68	'D'
      000476 44                    7344 	.db #0x44	; 68	'D'
      000477 3C                    7345 	.db #0x3c	; 60
      000478 04                    7346 	.db #0x04	; 4
      000479 40                    7347 	.db #0x40	; 64
      00047A 7E                    7348 	.db #0x7e	; 126
      00047B 20                    7349 	.db #0x20	; 32
      00047C 1E                    7350 	.db #0x1e	; 30
      00047D 20                    7351 	.db #0x20	; 32
      00047E 06                    7352 	.db #0x06	; 6
      00047F 02                    7353 	.db #0x02	; 2
      000480 7E                    7354 	.db #0x7e	; 126
      000481 02                    7355 	.db #0x02	; 2
      000482 02                    7356 	.db #0x02	; 2
      000483 99                    7357 	.db #0x99	; 153
      000484 A5                    7358 	.db #0xa5	; 165
      000485 E7                    7359 	.db #0xe7	; 231
      000486 A5                    7360 	.db #0xa5	; 165
      000487 99                    7361 	.db #0x99	; 153
      000488 1C                    7362 	.db #0x1c	; 28
      000489 2A                    7363 	.db #0x2a	; 42
      00048A 49                    7364 	.db #0x49	; 73	'I'
      00048B 2A                    7365 	.db #0x2a	; 42
      00048C 1C                    7366 	.db #0x1c	; 28
      00048D 4C                    7367 	.db #0x4c	; 76	'L'
      00048E 72                    7368 	.db #0x72	; 114	'r'
      00048F 01                    7369 	.db #0x01	; 1
      000490 72                    7370 	.db #0x72	; 114	'r'
      000491 4C                    7371 	.db #0x4c	; 76	'L'
      000492 30                    7372 	.db #0x30	; 48	'0'
      000493 4A                    7373 	.db #0x4a	; 74	'J'
      000494 4D                    7374 	.db #0x4d	; 77	'M'
      000495 4D                    7375 	.db #0x4d	; 77	'M'
      000496 30                    7376 	.db #0x30	; 48	'0'
      000497 30                    7377 	.db #0x30	; 48	'0'
      000498 48                    7378 	.db #0x48	; 72	'H'
      000499 78                    7379 	.db #0x78	; 120	'x'
      00049A 48                    7380 	.db #0x48	; 72	'H'
      00049B 30                    7381 	.db #0x30	; 48	'0'
      00049C BC                    7382 	.db #0xbc	; 188
      00049D 62                    7383 	.db #0x62	; 98	'b'
      00049E 5A                    7384 	.db #0x5a	; 90	'Z'
      00049F 46                    7385 	.db #0x46	; 70	'F'
      0004A0 3D                    7386 	.db #0x3d	; 61
      0004A1 3E                    7387 	.db #0x3e	; 62
      0004A2 49                    7388 	.db #0x49	; 73	'I'
      0004A3 49                    7389 	.db #0x49	; 73	'I'
      0004A4 49                    7390 	.db #0x49	; 73	'I'
      0004A5 00                    7391 	.db #0x00	; 0
      0004A6 7E                    7392 	.db #0x7e	; 126
      0004A7 01                    7393 	.db #0x01	; 1
      0004A8 01                    7394 	.db #0x01	; 1
      0004A9 01                    7395 	.db #0x01	; 1
      0004AA 7E                    7396 	.db #0x7e	; 126
      0004AB 2A                    7397 	.db #0x2a	; 42
      0004AC 2A                    7398 	.db #0x2a	; 42
      0004AD 2A                    7399 	.db #0x2a	; 42
      0004AE 2A                    7400 	.db #0x2a	; 42
      0004AF 2A                    7401 	.db #0x2a	; 42
      0004B0 44                    7402 	.db #0x44	; 68	'D'
      0004B1 44                    7403 	.db #0x44	; 68	'D'
      0004B2 5F                    7404 	.db #0x5f	; 95
      0004B3 44                    7405 	.db #0x44	; 68	'D'
      0004B4 44                    7406 	.db #0x44	; 68	'D'
      0004B5 40                    7407 	.db #0x40	; 64
      0004B6 51                    7408 	.db #0x51	; 81	'Q'
      0004B7 4A                    7409 	.db #0x4a	; 74	'J'
      0004B8 44                    7410 	.db #0x44	; 68	'D'
      0004B9 40                    7411 	.db #0x40	; 64
      0004BA 40                    7412 	.db #0x40	; 64
      0004BB 44                    7413 	.db #0x44	; 68	'D'
      0004BC 4A                    7414 	.db #0x4a	; 74	'J'
      0004BD 51                    7415 	.db #0x51	; 81	'Q'
      0004BE 40                    7416 	.db #0x40	; 64
      0004BF 00                    7417 	.db #0x00	; 0
      0004C0 00                    7418 	.db #0x00	; 0
      0004C1 FF                    7419 	.db #0xff	; 255
      0004C2 01                    7420 	.db #0x01	; 1
      0004C3 03                    7421 	.db #0x03	; 3
      0004C4 E0                    7422 	.db #0xe0	; 224
      0004C5 80                    7423 	.db #0x80	; 128
      0004C6 FF                    7424 	.db #0xff	; 255
      0004C7 00                    7425 	.db #0x00	; 0
      0004C8 00                    7426 	.db #0x00	; 0
      0004C9 08                    7427 	.db #0x08	; 8
      0004CA 08                    7428 	.db #0x08	; 8
      0004CB 6B                    7429 	.db #0x6b	; 107	'k'
      0004CC 6B                    7430 	.db #0x6b	; 107	'k'
      0004CD 08                    7431 	.db #0x08	; 8
      0004CE 36                    7432 	.db #0x36	; 54	'6'
      0004CF 12                    7433 	.db #0x12	; 18
      0004D0 36                    7434 	.db #0x36	; 54	'6'
      0004D1 24                    7435 	.db #0x24	; 36
      0004D2 36                    7436 	.db #0x36	; 54	'6'
      0004D3 06                    7437 	.db #0x06	; 6
      0004D4 0F                    7438 	.db #0x0f	; 15
      0004D5 09                    7439 	.db #0x09	; 9
      0004D6 0F                    7440 	.db #0x0f	; 15
      0004D7 06                    7441 	.db #0x06	; 6
      0004D8 00                    7442 	.db #0x00	; 0
      0004D9 00                    7443 	.db #0x00	; 0
      0004DA 18                    7444 	.db #0x18	; 24
      0004DB 18                    7445 	.db #0x18	; 24
      0004DC 00                    7446 	.db #0x00	; 0
      0004DD 00                    7447 	.db #0x00	; 0
      0004DE 00                    7448 	.db #0x00	; 0
      0004DF 10                    7449 	.db #0x10	; 16
      0004E0 10                    7450 	.db #0x10	; 16
      0004E1 00                    7451 	.db #0x00	; 0
      0004E2 30                    7452 	.db #0x30	; 48	'0'
      0004E3 40                    7453 	.db #0x40	; 64
      0004E4 FF                    7454 	.db #0xff	; 255
      0004E5 01                    7455 	.db #0x01	; 1
      0004E6 01                    7456 	.db #0x01	; 1
      0004E7 00                    7457 	.db #0x00	; 0
      0004E8 1F                    7458 	.db #0x1f	; 31
      0004E9 01                    7459 	.db #0x01	; 1
      0004EA 01                    7460 	.db #0x01	; 1
      0004EB 1E                    7461 	.db #0x1e	; 30
      0004EC 00                    7462 	.db #0x00	; 0
      0004ED 19                    7463 	.db #0x19	; 25
      0004EE 1D                    7464 	.db #0x1d	; 29
      0004EF 17                    7465 	.db #0x17	; 23
      0004F0 12                    7466 	.db #0x12	; 18
      0004F1 00                    7467 	.db #0x00	; 0
      0004F2 3C                    7468 	.db #0x3c	; 60
      0004F3 3C                    7469 	.db #0x3c	; 60
      0004F4 3C                    7470 	.db #0x3c	; 60
      0004F5 3C                    7471 	.db #0x3c	; 60
      0004F6 00                    7472 	.db #0x00	; 0
      0004F7 00                    7473 	.db #0x00	; 0
      0004F8 00                    7474 	.db #0x00	; 0
      0004F9 00                    7475 	.db #0x00	; 0
      0004FA 00                    7476 	.db #0x00	; 0
      0004FB                       7477 _keypad:
      0004FB 31                    7478 	.db #0x31	; 49	'1'
      0004FC 34                    7479 	.db #0x34	; 52	'4'
      0004FD 37                    7480 	.db #0x37	; 55	'7'
      0004FE 46                    7481 	.db #0x46	; 70	'F'
      0004FF 32                    7482 	.db #0x32	; 50	'2'
      000500 35                    7483 	.db #0x35	; 53	'5'
      000501 38                    7484 	.db #0x38	; 56	'8'
      000502 30                    7485 	.db #0x30	; 48	'0'
      000503 33                    7486 	.db #0x33	; 51	'3'
      000504 36                    7487 	.db #0x36	; 54	'6'
      000505 39                    7488 	.db #0x39	; 57	'9'
      000506 45                    7489 	.db #0x45	; 69	'E'
      000507 41                    7490 	.db #0x41	; 65	'A'
      000508 42                    7491 	.db #0x42	; 66	'B'
      000509 43                    7492 	.db #0x43	; 67	'C'
      00050A 44                    7493 	.db #0x44	; 68	'D'
                                   7494 	.area CONST   (CODE)
      00050B                       7495 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  7496 	.ascii "Welcome"
      000512 0A                    7497 	.db 0x0a
      000513 00                    7498 	.db 0x00
                                   7499 	.area CSEG    (CODE)
                                   7500 	.area CONST   (CODE)
      000514                       7501 ___str_1:
      000514 45 43 45 4E 2D 34 33  7502 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    7503 	.db 0x0a
      00051E 00                    7504 	.db 0x00
                                   7505 	.area CSEG    (CODE)
                                   7506 	.area CONST   (CODE)
      00051F                       7507 ___str_2:
      00051F 52 6F 74 61 74 69 6F  7508 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    7509 	.db 0x00
                                   7510 	.area CSEG    (CODE)
                                   7511 	.area CONST   (CODE)
      00052A                       7512 ___str_3:
      00052A 52 6F 74 61 74 69 6F  7513 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    7514 	.db 0x00
                                   7515 	.area CSEG    (CODE)
                                   7516 	.area CONST   (CODE)
      000535                       7517 ___str_4:
      000535 52 6F 74 61 74 69 6F  7518 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    7519 	.db 0x00
                                   7520 	.area CSEG    (CODE)
                                   7521 	.area CONST   (CODE)
      000540                       7522 ___str_5:
      000540 52 6F 74 61 74 69 6F  7523 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    7524 	.db 0x00
                                   7525 	.area CSEG    (CODE)
                                   7526 	.area CONST   (CODE)
      00054B                       7527 ___str_6:
      00054B 3A 20                 7528 	.ascii ": "
      00054D 00                    7529 	.db 0x00
                                   7530 	.area CSEG    (CODE)
                                   7531 	.area CONST   (CODE)
      00054E                       7532 ___str_7:
      00054E 45 6E 74 65 72 20 73  7533 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      000562 0A                    7534 	.db 0x0a
      000563 00                    7535 	.db 0x00
                                   7536 	.area CSEG    (CODE)
                                   7537 	.area CONST   (CODE)
      000564                       7538 ___str_8:
      000564 45 6E 74 65 72 20 64  7539 	.ascii "Enter data type"
             61 74 61 20 74 79 70
             65
      000573 0A                    7540 	.db 0x0a
      000574 00                    7541 	.db 0x00
                                   7542 	.area CSEG    (CODE)
                                   7543 	.area CONST   (CODE)
      000575                       7544 ___str_9:
      000575 42 2D 42 79 74 65 2C  7545 	.ascii "B-Byte, A-Word,"
             20 41 2D 57 6F 72 64
             2C
      000584 0A                    7546 	.db 0x0a
      000585 00                    7547 	.db 0x00
                                   7548 	.area CSEG    (CODE)
                                   7549 	.area CONST   (CODE)
      000586                       7550 ___str_10:
      000586 44 2D 44 6F 75 62 6C  7551 	.ascii "D-Double word"
             65 20 77 6F 72 64
      000593 0A                    7552 	.db 0x0a
      000594 00                    7553 	.db 0x00
                                   7554 	.area CSEG    (CODE)
                                   7555 	.area CONST   (CODE)
      000595                       7556 ___str_11:
      000595 42 79 74 65           7557 	.ascii "Byte"
      000599 0A                    7558 	.db 0x0a
      00059A 00                    7559 	.db 0x00
                                   7560 	.area CSEG    (CODE)
                                   7561 	.area CONST   (CODE)
      00059B                       7562 ___str_12:
      00059B 57 6F 72 64           7563 	.ascii "Word"
      00059F 0A                    7564 	.db 0x0a
      0005A0 00                    7565 	.db 0x00
                                   7566 	.area CSEG    (CODE)
                                   7567 	.area CONST   (CODE)
      0005A1                       7568 ___str_13:
      0005A1 44 6F 75 62 6C 65 20  7569 	.ascii "Double word"
             77 6F 72 64
      0005AC 0A                    7570 	.db 0x0a
      0005AD 00                    7571 	.db 0x00
                                   7572 	.area CSEG    (CODE)
                                   7573 	.area CONST   (CODE)
      0005AE                       7574 ___str_14:
      0005AE 45 6E 74 65 72 20 62  7575 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0005BF 0A                    7576 	.db 0x0a
      0005C0 00                    7577 	.db 0x00
                                   7578 	.area CSEG    (CODE)
                                   7579 	.area CONST   (CODE)
      0005C1                       7580 ___str_15:
      0005C1 50 72 65 73 73 20 41  7581 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0005D5 0A                    7582 	.db 0x0a
      0005D6 00                    7583 	.db 0x00
                                   7584 	.area CSEG    (CODE)
                                   7585 	.area CONST   (CODE)
      0005D7                       7586 ___str_16:
      0005D7 50 72 65 73 73 20 42  7587 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0005E7 0A                    7588 	.db 0x0a
      0005E8 00                    7589 	.db 0x00
                                   7590 	.area CSEG    (CODE)
                                   7591 	.area CONST   (CODE)
      0005E9                       7592 ___str_17:
      0005E9 50 72 65 73 73 20 31  7593 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0005F9 0A                    7594 	.db 0x0a
      0005FA 00                    7595 	.db 0x00
                                   7596 	.area CSEG    (CODE)
                                   7597 	.area CONST   (CODE)
      0005FB                       7598 ___str_18:
      0005FB 45 6E 74 65 72 20 62  7599 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00060E 0A                    7600 	.db 0x0a
      00060F 00                    7601 	.db 0x00
                                   7602 	.area CSEG    (CODE)
                                   7603 	.area CONST   (CODE)
      000610                       7604 ___str_19:
      000610 49 6E 20 70 72 6F 67  7605 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00061E 0A                    7606 	.db 0x0a
      00061F 00                    7607 	.db 0x00
                                   7608 	.area CSEG    (CODE)
                                   7609 	.area CONST   (CODE)
      000620                       7610 ___str_20:
      000620 4D 65 6D 6F 72 79 20  7611 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000633 0A                    7612 	.db 0x0a
      000634 00                    7613 	.db 0x00
                                   7614 	.area CSEG    (CODE)
                                   7615 	.area CONST   (CODE)
      000635                       7616 ___str_21:
      000635 53 75 63 63 65 73 73  7617 	.ascii "Success!"
             21
      00063D 0A                    7618 	.db 0x0a
      00063E 00                    7619 	.db 0x00
                                   7620 	.area CSEG    (CODE)
                                   7621 	.area CONST   (CODE)
      00063F                       7622 ___str_22:
      00063F 50 72 65 73 73 20 31  7623 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00064F 00                    7624 	.db 0x00
                                   7625 	.area CSEG    (CODE)
                                   7626 	.area CONST   (CODE)
      000650                       7627 ___str_23:
      000650 45 6E 74 65 72 20 62  7628 	.ascii "Enter byte"
             79 74 65
      00065A 0A                    7629 	.db 0x0a
      00065B 00                    7630 	.db 0x00
                                   7631 	.area CSEG    (CODE)
                                   7632 	.area CONST   (CODE)
      00065C                       7633 ___str_24:
      00065C 45 6E 74 65 72 20 61  7634 	.ascii "Enter address"
             64 64 72 65 73 73
      000669 0A                    7635 	.db 0x0a
      00066A 00                    7636 	.db 0x00
                                   7637 	.area CSEG    (CODE)
                                   7638 	.area CONST   (CODE)
      00066B                       7639 ___str_25:
      00066B 49 6E 20 70 72 6F 67  7640 	.ascii "In progress"
             72 65 73 73
      000676 0A                    7641 	.db 0x0a
      000677 00                    7642 	.db 0x00
                                   7643 	.area CSEG    (CODE)
                                   7644 	.area CONST   (CODE)
      000678                       7645 ___str_26:
      000678 20 66 65 74 63 68 65  7646 	.ascii " fetched!"
             64 21
      000681 0A                    7647 	.db 0x0a
      000682 53 75 63 63 65 73 73  7648 	.ascii "Success!"
             21
      00068A 0A                    7649 	.db 0x0a
      00068B 00                    7650 	.db 0x00
                                   7651 	.area CSEG    (CODE)
                                   7652 	.area CONST   (CODE)
      00068C                       7653 ___str_27:
      00068C 43 68 65 63 6B 20 66  7654 	.ascii "Check failed"
             61 69 6C 65 64
      000698 0A                    7655 	.db 0x0a
      000699 00                    7656 	.db 0x00
                                   7657 	.area CSEG    (CODE)
                                   7658 	.area CONST   (CODE)
      00069A                       7659 ___str_28:
      00069A 45 6E 74 65 72 20 74  7660 	.ascii "Enter target address:"
             61 72 67 65 74 20 61
             64 64 72 65 73 73 3A
      0006AF 0A                    7661 	.db 0x0a
      0006B0 00                    7662 	.db 0x00
                                   7663 	.area CSEG    (CODE)
                                   7664 	.area CONST   (CODE)
      0006B1                       7665 ___str_29:
      0006B1 45 6E 74 65 72 20 73  7666 	.ascii "Enter size:"
             69 7A 65 3A
      0006BC 0A                    7667 	.db 0x0a
      0006BD 00                    7668 	.db 0x00
                                   7669 	.area CSEG    (CODE)
                                   7670 	.area CONST   (CODE)
      0006BE                       7671 ___str_30:
      0006BE 4D 6F 76 65 20 69 6E  7672 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      0006D1 0A                    7673 	.db 0x0a
      0006D2 00                    7674 	.db 0x00
                                   7675 	.area CSEG    (CODE)
                                   7676 	.area CONST   (CODE)
      0006D3                       7677 ___str_31:
      0006D3 44 6F 6E 65 21        7678 	.ascii "Done!"
      0006D8 0A                    7679 	.db 0x0a
      0006D9 00                    7680 	.db 0x00
                                   7681 	.area CSEG    (CODE)
                                   7682 	.area CONST   (CODE)
      0006DA                       7683 ___str_32:
      0006DA 45 6E 74 65 72 20 6E  7684 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      0006E9 0A                    7685 	.db 0x0a
      0006EA 00                    7686 	.db 0x00
                                   7687 	.area CSEG    (CODE)
                                   7688 	.area CONST   (CODE)
      0006EB                       7689 ___str_33:
      0006EB 45 6E 74 65 72 20 61  7690 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      0006F9 0A                    7691 	.db 0x0a
      0006FA 00                    7692 	.db 0x00
                                   7693 	.area CSEG    (CODE)
                                   7694 	.area CONST   (CODE)
      0006FB                       7695 ___str_34:
      0006FB 50 72 65 73 73 20 32  7696 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      000710 0A                    7697 	.db 0x0a
      000711 00                    7698 	.db 0x00
                                   7699 	.area CSEG    (CODE)
                                   7700 	.area CONST   (CODE)
      000712                       7701 ___str_35:
      000712 50 72 65 73 73 20 33  7702 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      00072E 0A                    7703 	.db 0x0a
      00072F 00                    7704 	.db 0x00
                                   7705 	.area CSEG    (CODE)
                                   7706 	.area CONST   (CODE)
      000730                       7707 ___str_36:
      000730 4E 6F 20 6D 61 74 63  7708 	.ascii "No matches found"
             68 65 73 20 66 6F 75
             6E 64
      000740 0A                    7709 	.db 0x0a
      000741 00                    7710 	.db 0x00
                                   7711 	.area CSEG    (CODE)
                                   7712 	.area CONST   (CODE)
      000742                       7713 ___str_37:
      000742 20 6D 61 74 63 68 65  7714 	.ascii " matches found"
             73 20 66 6F 75 6E 64
      000750 0A                    7715 	.db 0x0a
      000751 00                    7716 	.db 0x00
                                   7717 	.area CSEG    (CODE)
                                   7718 	.area CONST   (CODE)
      000752                       7719 ___str_38:
      000752 45 6E 74 65 72 20 62  7720 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      000766 0A                    7721 	.db 0x0a
      000767 00                    7722 	.db 0x00
                                   7723 	.area CSEG    (CODE)
                                   7724 	.area CONST   (CODE)
      000768                       7725 ___str_39:
      000768 54 65 6D 70 65 72 61  7726 	.ascii "Temperature: "
             74 75 72 65 3A 20
      000775 00                    7727 	.db 0x00
                                   7728 	.area CSEG    (CODE)
                                   7729 	.area CONST   (CODE)
      000776                       7730 ___str_40:
      000776 50 72 65 73 73 20 6B  7731 	.ascii "Press key to refresh"
             65 79 20 74 6F 20 72
             65 66 72 65 73 68
      00078A 0A                    7732 	.db 0x0a
      00078B 00                    7733 	.db 0x00
                                   7734 	.area CSEG    (CODE)
                                   7735 	.area CONST   (CODE)
      00078C                       7736 ___str_41:
      00078C 4C 69 67 68 74 20 6C  7737 	.ascii "Light level: "
             65 76 65 6C 3A 20
      000799 00                    7738 	.db 0x00
                                   7739 	.area CSEG    (CODE)
                                   7740 	.area CONST   (CODE)
      00079A                       7741 ___str_42:
      00079A 42 72 61 6E 64 6F 6E  7742 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      0007A7 0A                    7743 	.db 0x0a
      0007A8 00                    7744 	.db 0x00
                                   7745 	.area CSEG    (CODE)
                                   7746 	.area CONST   (CODE)
      0007A9                       7747 ___str_43:
      0007A9 45 43 45 4E 20 34 33  7748 	.ascii "ECEN 4330"
             33 30
      0007B2 0A                    7749 	.db 0x0a
      0007B3 00                    7750 	.db 0x00
                                   7751 	.area CSEG    (CODE)
                                   7752 	.area CONST   (CODE)
      0007B4                       7753 ___str_44:
      0007B4 31 3A 20 42 61 73 69  7754 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      0007C2 0A                    7755 	.db 0x0a
      0007C3 00                    7756 	.db 0x00
                                   7757 	.area CSEG    (CODE)
                                   7758 	.area CONST   (CODE)
      0007C4                       7759 ___str_45:
      0007C4 32 3A 20 44 75 6D 70  7760 	.ascii "2: Dump"
      0007CB 0A                    7761 	.db 0x0a
      0007CC 00                    7762 	.db 0x00
                                   7763 	.area CSEG    (CODE)
                                   7764 	.area CONST   (CODE)
      0007CD                       7765 ___str_46:
      0007CD 33 3A 20 43 68 65 63  7766 	.ascii "3: Check"
             6B
      0007D5 0A                    7767 	.db 0x0a
      0007D6 00                    7768 	.db 0x00
                                   7769 	.area CSEG    (CODE)
                                   7770 	.area CONST   (CODE)
      0007D7                       7771 ___str_47:
      0007D7 41 3A 20 4D 6F 76 65  7772 	.ascii "A: Move"
      0007DE 0A                    7773 	.db 0x0a
      0007DF 00                    7774 	.db 0x00
                                   7775 	.area CSEG    (CODE)
                                   7776 	.area CONST   (CODE)
      0007E0                       7777 ___str_48:
      0007E0 34 3A 20 45 64 69 74  7778 	.ascii "4: Edit"
      0007E7 0A                    7779 	.db 0x0a
      0007E8 00                    7780 	.db 0x00
                                   7781 	.area CSEG    (CODE)
                                   7782 	.area CONST   (CODE)
      0007E9                       7783 ___str_49:
      0007E9 35 3A 20 46 69 6E 64  7784 	.ascii "5: Find"
      0007F0 0A                    7785 	.db 0x0a
      0007F1 00                    7786 	.db 0x00
                                   7787 	.area CSEG    (CODE)
                                   7788 	.area CONST   (CODE)
      0007F2                       7789 ___str_50:
      0007F2 36 3A 20 43 6F 75 6E  7790 	.ascii "6: Count"
             74
      0007FA 0A                    7791 	.db 0x0a
      0007FB 00                    7792 	.db 0x00
                                   7793 	.area CSEG    (CODE)
                                   7794 	.area CONST   (CODE)
      0007FC                       7795 ___str_51:
      0007FC 42 3A 20 54 65 6D 70  7796 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      00080A 0A                    7797 	.db 0x0a
      00080B 00                    7798 	.db 0x00
                                   7799 	.area CSEG    (CODE)
                                   7800 	.area CONST   (CODE)
      00080C                       7801 ___str_52:
      00080C 37 3A 20 4C 69 67 68  7802 	.ascii "7: Light"
             74
      000814 0A                    7803 	.db 0x0a
      000815 00                    7804 	.db 0x00
                                   7805 	.area CSEG    (CODE)
                                   7806 	.area XINIT   (CODE)
                                   7807 	.area CABS    (ABS,CODE)
