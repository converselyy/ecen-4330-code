                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _basic
                                     23 	.globl _writeSomeLines
                                     24 	.globl _convertAsciiHex
                                     25 	.globl _write
                                     26 	.globl _drawChar
                                     27 	.globl _setRotation
                                     28 	.globl _ioread8
                                     29 	.globl _iowrite8
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _B
                                    106 	.globl _ACC
                                    107 	.globl _PSW
                                    108 	.globl _IP
                                    109 	.globl _P3
                                    110 	.globl _IE
                                    111 	.globl _P2
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _P1
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _P0
                                    126 	.globl __height
                                    127 	.globl __width
                                    128 	.globl _printCount_PARM_5
                                    129 	.globl _printCount_PARM_4
                                    130 	.globl _printCount_PARM_3
                                    131 	.globl _printCount_PARM_2
                                    132 	.globl _drawChar_PARM_6
                                    133 	.globl _drawChar_PARM_5
                                    134 	.globl _drawChar_PARM_4
                                    135 	.globl _drawChar_PARM_3
                                    136 	.globl _drawChar_PARM_2
                                    137 	.globl _fillRect_PARM_5
                                    138 	.globl _fillRect_PARM_4
                                    139 	.globl _fillRect_PARM_3
                                    140 	.globl _fillRect_PARM_2
                                    141 	.globl _testCircles_PARM_2
                                    142 	.globl _drawCircle_PARM_4
                                    143 	.globl _drawCircle_PARM_3
                                    144 	.globl _drawCircle_PARM_2
                                    145 	.globl _drawPixel_PARM_3
                                    146 	.globl _drawPixel_PARM_2
                                    147 	.globl _textbgcolor
                                    148 	.globl _textcolor
                                    149 	.globl _rotation
                                    150 	.globl _textsize
                                    151 	.globl _cursor_y
                                    152 	.globl _cursor_x
                                    153 	.globl _read_ram_address
                                    154 	.globl _light_address
                                    155 	.globl _temp_address
                                    156 	.globl _seg7_address
                                    157 	.globl _lcd_address
                                    158 	.globl _rowloc
                                    159 	.globl _colloc
                                    160 	.globl _delay
                                    161 	.globl _writeRegister8
                                    162 	.globl _writeRegister16
                                    163 	.globl _setCursor
                                    164 	.globl _setTextColor
                                    165 	.globl _setTextSize
                                    166 	.globl _setAddress
                                    167 	.globl _TFT_LCD_INIT
                                    168 	.globl _drawPixel
                                    169 	.globl _drawCircle
                                    170 	.globl _testCircles
                                    171 	.globl _fillRect
                                    172 	.globl _fillScreen
                                    173 	.globl _LCD_string_write
                                    174 	.globl _testRAM
                                    175 	.globl _freeType
                                    176 	.globl _keyDetect
                                    177 	.globl _reverse
                                    178 	.globl _asciiToDec
                                    179 	.globl _asciiToHex
                                    180 	.globl _getAddress
                                    181 	.globl _getByte
                                    182 	.globl _check
                                    183 	.globl _move
                                    184 	.globl _editByte
                                    185 	.globl _edit
                                    186 	.globl _printCount
                                    187 	.globl _count
                                    188 	.globl _readTemp
                                    189 	.globl _readLight
                                    190 	.globl _displayTemp
                                    191 	.globl _displayLight
                                    192 	.globl _temperature
                                    193 	.globl _light
                                    194 ;--------------------------------------------------------
                                    195 ; special function registers
                                    196 ;--------------------------------------------------------
                                    197 	.area RSEG    (ABS,DATA)
      000000                        198 	.org 0x0000
                           000080   199 _P0	=	0x0080
                           000081   200 _SP	=	0x0081
                           000082   201 _DPL	=	0x0082
                           000083   202 _DPH	=	0x0083
                           000087   203 _PCON	=	0x0087
                           000088   204 _TCON	=	0x0088
                           000089   205 _TMOD	=	0x0089
                           00008A   206 _TL0	=	0x008a
                           00008B   207 _TL1	=	0x008b
                           00008C   208 _TH0	=	0x008c
                           00008D   209 _TH1	=	0x008d
                           000090   210 _P1	=	0x0090
                           000098   211 _SCON	=	0x0098
                           000099   212 _SBUF	=	0x0099
                           0000A0   213 _P2	=	0x00a0
                           0000A8   214 _IE	=	0x00a8
                           0000B0   215 _P3	=	0x00b0
                           0000B8   216 _IP	=	0x00b8
                           0000D0   217 _PSW	=	0x00d0
                           0000E0   218 _ACC	=	0x00e0
                           0000F0   219 _B	=	0x00f0
                                    220 ;--------------------------------------------------------
                                    221 ; special function bits
                                    222 ;--------------------------------------------------------
                                    223 	.area RSEG    (ABS,DATA)
      000000                        224 	.org 0x0000
                           000080   225 _P0_0	=	0x0080
                           000081   226 _P0_1	=	0x0081
                           000082   227 _P0_2	=	0x0082
                           000083   228 _P0_3	=	0x0083
                           000084   229 _P0_4	=	0x0084
                           000085   230 _P0_5	=	0x0085
                           000086   231 _P0_6	=	0x0086
                           000087   232 _P0_7	=	0x0087
                           000088   233 _IT0	=	0x0088
                           000089   234 _IE0	=	0x0089
                           00008A   235 _IT1	=	0x008a
                           00008B   236 _IE1	=	0x008b
                           00008C   237 _TR0	=	0x008c
                           00008D   238 _TF0	=	0x008d
                           00008E   239 _TR1	=	0x008e
                           00008F   240 _TF1	=	0x008f
                           000090   241 _P1_0	=	0x0090
                           000091   242 _P1_1	=	0x0091
                           000092   243 _P1_2	=	0x0092
                           000093   244 _P1_3	=	0x0093
                           000094   245 _P1_4	=	0x0094
                           000095   246 _P1_5	=	0x0095
                           000096   247 _P1_6	=	0x0096
                           000097   248 _P1_7	=	0x0097
                           000098   249 _RI	=	0x0098
                           000099   250 _TI	=	0x0099
                           00009A   251 _RB8	=	0x009a
                           00009B   252 _TB8	=	0x009b
                           00009C   253 _REN	=	0x009c
                           00009D   254 _SM2	=	0x009d
                           00009E   255 _SM1	=	0x009e
                           00009F   256 _SM0	=	0x009f
                           0000A0   257 _P2_0	=	0x00a0
                           0000A1   258 _P2_1	=	0x00a1
                           0000A2   259 _P2_2	=	0x00a2
                           0000A3   260 _P2_3	=	0x00a3
                           0000A4   261 _P2_4	=	0x00a4
                           0000A5   262 _P2_5	=	0x00a5
                           0000A6   263 _P2_6	=	0x00a6
                           0000A7   264 _P2_7	=	0x00a7
                           0000A8   265 _EX0	=	0x00a8
                           0000A9   266 _ET0	=	0x00a9
                           0000AA   267 _EX1	=	0x00aa
                           0000AB   268 _ET1	=	0x00ab
                           0000AC   269 _ES	=	0x00ac
                           0000AF   270 _EA	=	0x00af
                           0000B0   271 _P3_0	=	0x00b0
                           0000B1   272 _P3_1	=	0x00b1
                           0000B2   273 _P3_2	=	0x00b2
                           0000B3   274 _P3_3	=	0x00b3
                           0000B4   275 _P3_4	=	0x00b4
                           0000B5   276 _P3_5	=	0x00b5
                           0000B6   277 _P3_6	=	0x00b6
                           0000B7   278 _P3_7	=	0x00b7
                           0000B0   279 _RXD	=	0x00b0
                           0000B1   280 _TXD	=	0x00b1
                           0000B2   281 _INT0	=	0x00b2
                           0000B3   282 _INT1	=	0x00b3
                           0000B4   283 _T0	=	0x00b4
                           0000B5   284 _T1	=	0x00b5
                           0000B6   285 _WR	=	0x00b6
                           0000B7   286 _RD	=	0x00b7
                           0000B8   287 _PX0	=	0x00b8
                           0000B9   288 _PT0	=	0x00b9
                           0000BA   289 _PX1	=	0x00ba
                           0000BB   290 _PT1	=	0x00bb
                           0000BC   291 _PS	=	0x00bc
                           0000D0   292 _P	=	0x00d0
                           0000D1   293 _F1	=	0x00d1
                           0000D2   294 _OV	=	0x00d2
                           0000D3   295 _RS0	=	0x00d3
                           0000D4   296 _RS1	=	0x00d4
                           0000D5   297 _F0	=	0x00d5
                           0000D6   298 _AC	=	0x00d6
                           0000D7   299 _CY	=	0x00d7
                                    300 ;--------------------------------------------------------
                                    301 ; overlayable register banks
                                    302 ;--------------------------------------------------------
                                    303 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        304 	.ds 8
                                    305 ;--------------------------------------------------------
                                    306 ; internal ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area DSEG    (DATA)
      000000                        309 _colloc::
      000000                        310 	.ds 1
      000001                        311 _rowloc::
      000001                        312 	.ds 1
      000002                        313 _lcd_address::
      000002                        314 	.ds 2
      000004                        315 _seg7_address::
      000004                        316 	.ds 2
      000006                        317 _temp_address::
      000006                        318 	.ds 2
      000008                        319 _light_address::
      000008                        320 	.ds 2
      00000A                        321 _read_ram_address::
      00000A                        322 	.ds 2
      00000C                        323 _cursor_x::
      00000C                        324 	.ds 2
      00000E                        325 _cursor_y::
      00000E                        326 	.ds 2
      000010                        327 _textsize::
      000010                        328 	.ds 1
      000011                        329 _rotation::
      000011                        330 	.ds 1
      000012                        331 _textcolor::
      000012                        332 	.ds 2
      000014                        333 _textbgcolor::
      000014                        334 	.ds 2
      000016                        335 _drawPixel_PARM_2:
      000016                        336 	.ds 2
      000018                        337 _drawPixel_PARM_3:
      000018                        338 	.ds 2
      00001A                        339 _drawCircle_PARM_2:
      00001A                        340 	.ds 2
      00001C                        341 _drawCircle_PARM_3:
      00001C                        342 	.ds 2
      00001E                        343 _drawCircle_PARM_4:
      00001E                        344 	.ds 2
      000020                        345 _drawCircle_x0_65536_105:
      000020                        346 	.ds 2
      000022                        347 _drawCircle_sloc0_1_0:
      000022                        348 	.ds 2
      000024                        349 _drawCircle_sloc1_1_0:
      000024                        350 	.ds 2
      000026                        351 _drawCircle_sloc2_1_0:
      000026                        352 	.ds 2
      000028                        353 _drawCircle_sloc3_1_0:
      000028                        354 	.ds 2
      00002A                        355 _drawCircle_sloc4_1_0:
      00002A                        356 	.ds 2
      00002C                        357 _testCircles_PARM_2:
      00002C                        358 	.ds 2
      00002E                        359 _testCircles_radius_65536_109:
      00002E                        360 	.ds 1
      00002F                        361 _testCircles_sloc0_1_0:
      00002F                        362 	.ds 2
      000031                        363 _fillRect_PARM_2:
      000031                        364 	.ds 2
      000033                        365 _fillRect_PARM_3:
      000033                        366 	.ds 2
      000035                        367 _fillRect_PARM_4:
      000035                        368 	.ds 2
      000037                        369 _fillRect_PARM_5:
      000037                        370 	.ds 2
      000039                        371 _drawChar_PARM_2:
      000039                        372 	.ds 2
      00003B                        373 _drawChar_PARM_3:
      00003B                        374 	.ds 1
      00003C                        375 _drawChar_PARM_4:
      00003C                        376 	.ds 2
      00003E                        377 _drawChar_PARM_5:
      00003E                        378 	.ds 2
      000040                        379 _drawChar_PARM_6:
      000040                        380 	.ds 1
      000041                        381 _drawChar_sloc1_1_0:
      000041                        382 	.ds 2
      000043                        383 _drawChar_sloc2_1_0:
      000043                        384 	.ds 2
      000045                        385 _drawChar_sloc3_1_0:
      000045                        386 	.ds 1
      000046                        387 _drawChar_sloc4_1_0:
      000046                        388 	.ds 1
      000047                        389 _drawChar_sloc5_1_0:
      000047                        390 	.ds 1
      000048                        391 _asciiToHex_store_65536_202:
      000048                        392 	.ds 2
      00004A                        393 _move_target_65537_249:
      00004A                        394 	.ds 2
      00004C                        395 _move_sloc0_1_0:
      00004C                        396 	.ds 2
      00004E                        397 _move_sloc1_1_0:
      00004E                        398 	.ds 2
      000050                        399 _printCount_PARM_2:
      000050                        400 	.ds 1
      000051                        401 _printCount_PARM_3:
      000051                        402 	.ds 1
      000052                        403 _printCount_PARM_4:
      000052                        404 	.ds 1
      000053                        405 _printCount_PARM_5:
      000053                        406 	.ds 1
      000054                        407 _count_key_65537_270:
      000054                        408 	.ds 1
      000055                        409 _count_n_65537_270:
      000055                        410 	.ds 1
      000056                        411 _count_size_65537_270:
      000056                        412 	.ds 1
      000057                        413 _count_index_65537_270:
      000057                        414 	.ds 1
      000058                        415 _count_pages_65537_270:
      000058                        416 	.ds 1
      000059                        417 _count_sloc0_1_0:
      000059                        418 	.ds 1
      00005A                        419 _count_sloc1_1_0:
      00005A                        420 	.ds 1
      00005B                        421 _count_sloc2_1_0:
      00005B                        422 	.ds 1
      00005C                        423 _count_sloc3_1_0:
      00005C                        424 	.ds 1
      00005D                        425 _count_sloc4_1_0:
      00005D                        426 	.ds 1
                                    427 ;--------------------------------------------------------
                                    428 ; overlayable items in internal ram
                                    429 ;--------------------------------------------------------
                                    430 	.area	OSEG    (OVR,DATA)
      000000                        431 _iowrite8_PARM_2:
      000000                        432 	.ds 1
                                    433 	.area	OSEG    (OVR,DATA)
                                    434 	.area	OSEG    (OVR,DATA)
                                    435 	.area	OSEG    (OVR,DATA)
      000000                        436 _writeRegister8_PARM_2:
      000000                        437 	.ds 1
                                    438 	.area	OSEG    (OVR,DATA)
      000000                        439 _writeRegister16_PARM_2:
      000000                        440 	.ds 2
                                    441 	.area	OSEG    (OVR,DATA)
      000000                        442 _setCursor_PARM_2:
      000000                        443 	.ds 2
                                    444 	.area	OSEG    (OVR,DATA)
      000000                        445 _setTextColor_PARM_2:
      000000                        446 	.ds 2
                                    447 	.area	OSEG    (OVR,DATA)
                                    448 	.area	OSEG    (OVR,DATA)
      000000                        449 _setAddress_PARM_2:
      000000                        450 	.ds 2
      000002                        451 _setAddress_PARM_3:
      000002                        452 	.ds 2
      000004                        453 _setAddress_PARM_4:
      000004                        454 	.ds 2
                                    455 	.area	OSEG    (OVR,DATA)
                                    456 	.area	OSEG    (OVR,DATA)
                                    457 	.area	OSEG    (OVR,DATA)
                                    458 	.area	OSEG    (OVR,DATA)
                                    459 ;--------------------------------------------------------
                                    460 ; Stack segment in internal ram
                                    461 ;--------------------------------------------------------
                                    462 	.area	SSEG
      000000                        463 __start__stack:
      000000                        464 	.ds	1
                                    465 
                                    466 ;--------------------------------------------------------
                                    467 ; indirectly addressable internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area ISEG    (DATA)
                                    470 ;--------------------------------------------------------
                                    471 ; absolute internal ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area IABS    (ABS,DATA)
                                    474 	.area IABS    (ABS,DATA)
                                    475 ;--------------------------------------------------------
                                    476 ; bit data
                                    477 ;--------------------------------------------------------
                                    478 	.area BSEG    (BIT)
      000000                        479 _drawChar_sloc0_1_0:
      000000                        480 	.ds 1
      000001                        481 _convertAsciiHex_sloc0_1_0:
      000001                        482 	.ds 1
                                    483 ;--------------------------------------------------------
                                    484 ; paged external ram data
                                    485 ;--------------------------------------------------------
                                    486 	.area PSEG    (PAG,XDATA)
                                    487 ;--------------------------------------------------------
                                    488 ; external ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area XSEG    (XDATA)
      000000                        491 __width::
      000000                        492 	.ds 2
      000002                        493 __height::
      000002                        494 	.ds 2
      000004                        495 _drawCircle_f_65536_106:
      000004                        496 	.ds 2
      000006                        497 _testCircles_x_65536_110:
      000006                        498 	.ds 2
      000008                        499 _testCircles_y_65536_110:
      000008                        500 	.ds 2
      00000A                        501 _drawChar_line_196609_153:
      00000A                        502 	.ds 1
      00000B                        503 _testRAM_d_65536_174:
      00000B                        504 	.ds 1
      00000C                        505 _freeType_count_65536_178:
      00000C                        506 	.ds 1
      00000D                        507 _reverse_rev_65536_196:
      00000D                        508 	.ds 2
      00000F                        509 _reverse_val_65536_196:
      00000F                        510 	.ds 2
      000011                        511 _asciiToDec_d_65536_198:
      000011                        512 	.ds 1
      000012                        513 _asciiToDec_val_65536_199:
      000012                        514 	.ds 1
      000013                        515 _asciiToDec_id_65536_199:
      000013                        516 	.ds 2
      000015                        517 _getAddress_address_65536_228:
      000015                        518 	.ds 2
      000017                        519 _getByte_byte_65536_231:
      000017                        520 	.ds 1
      000018                        521 _check_checker_65537_235:
      000018                        522 	.ds 1
      000019                        523 _check_error_65537_235:
      000019                        524 	.ds 1
      00001A                        525 _editByte_add_65536_253:
      00001A                        526 	.ds 2
      00001C                        527 _edit_input_65537_256:
      00001C                        528 	.ds 1
      00001D                        529 _count_page_65537_270:
      00001D                        530 	.ds 1
                                    531 ;--------------------------------------------------------
                                    532 ; absolute external ram data
                                    533 ;--------------------------------------------------------
                                    534 	.area XABS    (ABS,XDATA)
                                    535 ;--------------------------------------------------------
                                    536 ; external initialized ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area XISEG   (XDATA)
                                    539 	.area HOME    (CODE)
                                    540 	.area GSINIT0 (CODE)
                                    541 	.area GSINIT1 (CODE)
                                    542 	.area GSINIT2 (CODE)
                                    543 	.area GSINIT3 (CODE)
                                    544 	.area GSINIT4 (CODE)
                                    545 	.area GSINIT5 (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area CSEG    (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; interrupt vector
                                    551 ;--------------------------------------------------------
                                    552 	.area HOME    (CODE)
      000000                        553 __interrupt_vect:
      000000 02r00r00         [24]  554 	ljmp	__sdcc_gsinit_startup
                                    555 ;--------------------------------------------------------
                                    556 ; global & static initialisations
                                    557 ;--------------------------------------------------------
                                    558 	.area HOME    (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.area GSFINAL (CODE)
                                    561 	.area GSINIT  (CODE)
                                    562 	.globl __sdcc_gsinit_startup
                                    563 	.globl __sdcc_program_startup
                                    564 	.globl __start__stack
                                    565 	.globl __mcs51_genXINIT
                                    566 	.globl __mcs51_genXRAMCLEAR
                                    567 	.globl __mcs51_genRAMCLEAR
                                    568 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  569 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  570 	mov	(_lcd_address + 1),#0x40
                                    571 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  572 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  573 	mov	(_seg7_address + 1),#0x80
                                    574 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  575 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  576 	mov	(_temp_address + 1),#0xc0
                                    577 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  578 	clr	a
      000013 F5*08            [12]  579 	mov	_light_address,a
      000015 F5*09            [12]  580 	mov	(_light_address + 1),a
                                    581 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  582 	ljmp	__sdcc_program_startup
                                    583 ;--------------------------------------------------------
                                    584 ; Home
                                    585 ;--------------------------------------------------------
                                    586 	.area HOME    (CODE)
                                    587 	.area HOME    (CODE)
      000003                        588 __sdcc_program_startup:
      000003 02r1Ar14         [24]  589 	ljmp	_main
                                    590 ;	return from main will return to caller
                                    591 ;--------------------------------------------------------
                                    592 ; code
                                    593 ;--------------------------------------------------------
                                    594 	.area CSEG    (CODE)
                                    595 ;------------------------------------------------------------
                                    596 ;Allocation info for local variables in function 'iowrite8'
                                    597 ;------------------------------------------------------------
                                    598 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    599 ;map_address               Allocated to registers r6 r7 
                                    600 ;------------------------------------------------------------
                                    601 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    602 ;	-----------------------------------------
                                    603 ;	 function iowrite8
                                    604 ;	-----------------------------------------
      000000                        605 _iowrite8:
                           000007   606 	ar7 = 0x07
                           000006   607 	ar6 = 0x06
                           000005   608 	ar5 = 0x05
                           000004   609 	ar4 = 0x04
                           000003   610 	ar3 = 0x03
                           000002   611 	ar2 = 0x02
                           000001   612 	ar1 = 0x01
                           000000   613 	ar0 = 0x00
      000000 AE 82            [24]  614 	mov	r6,dpl
      000002 AF 83            [24]  615 	mov	r7,dph
                                    616 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    617 ;	assignBit
      000004 D2 B4            [12]  618 	setb	_P3_4
                                    619 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  620 	mov	dpl,r6
      000008 8F 83            [24]  621 	mov	dph,r7
      00000A E5*00            [12]  622 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  623 	movx	@dptr,a
                                    624 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    625 ;	assignBit
      00000D C2 B4            [12]  626 	clr	_P3_4
                                    627 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  628 	ret
                                    629 ;------------------------------------------------------------
                                    630 ;Allocation info for local variables in function 'ioread8'
                                    631 ;------------------------------------------------------------
                                    632 ;map_address               Allocated to registers r6 r7 
                                    633 ;val                       Allocated to registers r6 
                                    634 ;------------------------------------------------------------
                                    635 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    636 ;	-----------------------------------------
                                    637 ;	 function ioread8
                                    638 ;	-----------------------------------------
      000010                        639 _ioread8:
      000010 AE 82            [24]  640 	mov	r6,dpl
      000012 AF 83            [24]  641 	mov	r7,dph
                                    642 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    643 ;	assignBit
      000014 D2 B4            [12]  644 	setb	_P3_4
                                    645 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      000016 8E 82            [24]  646 	mov	dpl,r6
      000018 8F 83            [24]  647 	mov	dph,r7
      00001A E0               [24]  648 	movx	a,@dptr
      00001B FE               [12]  649 	mov	r6,a
                                    650 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    651 ;	assignBit
      00001C C2 B4            [12]  652 	clr	_P3_4
                                    653 ;	ecen4330_lcd_v3.c:67: return val;
      00001E 8E 82            [24]  654 	mov	dpl,r6
                                    655 ;	ecen4330_lcd_v3.c:68: }
      000020 22               [24]  656 	ret
                                    657 ;------------------------------------------------------------
                                    658 ;Allocation info for local variables in function 'delay'
                                    659 ;------------------------------------------------------------
                                    660 ;i                         Allocated with name '_delay_i_65536_29'
                                    661 ;j                         Allocated with name '_delay_j_65536_29'
                                    662 ;d                         Allocated to registers r6 r7 
                                    663 ;------------------------------------------------------------
                                    664 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d)
                                    665 ;	-----------------------------------------
                                    666 ;	 function delay
                                    667 ;	-----------------------------------------
      000021                        668 _delay:
      000021 AE 82            [24]  669 	mov	r6,dpl
      000023 AF 83            [24]  670 	mov	r7,dph
                                    671 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000025 7C 00            [12]  672 	mov	r4,#0x00
      000027 7D 00            [12]  673 	mov	r5,#0x00
      000029                        674 00107$:
      000029 8C 02            [24]  675 	mov	ar2,r4
      00002B 8D 03            [24]  676 	mov	ar3,r5
      00002D C3               [12]  677 	clr	c
      00002E EA               [12]  678 	mov	a,r2
      00002F 9E               [12]  679 	subb	a,r6
      000030 EB               [12]  680 	mov	a,r3
      000031 64 80            [12]  681 	xrl	a,#0x80
      000033 8F F0            [24]  682 	mov	b,r7
      000035 63 F0 80         [24]  683 	xrl	b,#0x80
      000038 95 F0            [12]  684 	subb	a,b
      00003A 50 14            [24]  685 	jnc	00109$
                                    686 ;	ecen4330_lcd_v3.c:77: for (j=0;j<1000;j++);
      00003C 7A E8            [12]  687 	mov	r2,#0xe8
      00003E 7B 03            [12]  688 	mov	r3,#0x03
      000040                        689 00105$:
      000040 1A               [12]  690 	dec	r2
      000041 BA FF 01         [24]  691 	cjne	r2,#0xff,00130$
      000044 1B               [12]  692 	dec	r3
      000045                        693 00130$:
      000045 EA               [12]  694 	mov	a,r2
      000046 4B               [12]  695 	orl	a,r3
      000047 70 F7            [24]  696 	jnz	00105$
                                    697 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000049 0C               [12]  698 	inc	r4
      00004A BC 00 DC         [24]  699 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  700 	inc	r5
      00004E 80 D9            [24]  701 	sjmp	00107$
      000050                        702 00109$:
                                    703 ;	ecen4330_lcd_v3.c:79: }
      000050 22               [24]  704 	ret
                                    705 ;------------------------------------------------------------
                                    706 ;Allocation info for local variables in function 'writeRegister8'
                                    707 ;------------------------------------------------------------
                                    708 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    709 ;a                         Allocated to registers r7 
                                    710 ;------------------------------------------------------------
                                    711 ;	ecen4330_lcd_v3.c:89: void writeRegister8 (uint8_t a, uint8_t d) {
                                    712 ;	-----------------------------------------
                                    713 ;	 function writeRegister8
                                    714 ;	-----------------------------------------
      000051                        715 _writeRegister8:
      000051 AF 82            [24]  716 	mov	r7,dpl
                                    717 ;	ecen4330_lcd_v3.c:90: CD = __CMD__;
                                    718 ;	assignBit
      000053 C2 B5            [12]  719 	clr	_P3_5
                                    720 ;	ecen4330_lcd_v3.c:91: write8(a);
                                    721 ;	assignBit
      000055 D2 B4            [12]  722 	setb	_P3_4
      000057 85*02 82         [24]  723 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  724 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  725 	mov	a,r7
      00005E F0               [24]  726 	movx	@dptr,a
                                    727 ;	assignBit
      00005F C2 B4            [12]  728 	clr	_P3_4
                                    729 ;	ecen4330_lcd_v3.c:92: CD = __DATA__;
                                    730 ;	assignBit
      000061 D2 B5            [12]  731 	setb	_P3_5
                                    732 ;	ecen4330_lcd_v3.c:93: write8(d);
                                    733 ;	assignBit
      000063 D2 B4            [12]  734 	setb	_P3_4
      000065 85*02 82         [24]  735 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  736 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  737 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  738 	movx	@dptr,a
                                    739 ;	assignBit
      00006E C2 B4            [12]  740 	clr	_P3_4
                                    741 ;	ecen4330_lcd_v3.c:94: }
      000070 22               [24]  742 	ret
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'writeRegister16'
                                    745 ;------------------------------------------------------------
                                    746 ;hi                        Allocated with name '_writeRegister16_hi_65536_38'
                                    747 ;lo                        Allocated with name '_writeRegister16_lo_65536_38'
                                    748 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    749 ;a                         Allocated to registers r6 r7 
                                    750 ;------------------------------------------------------------
                                    751 ;	ecen4330_lcd_v3.c:98: void writeRegister16 (uint16_t a, uint16_t d) {
                                    752 ;	-----------------------------------------
                                    753 ;	 function writeRegister16
                                    754 ;	-----------------------------------------
      000071                        755 _writeRegister16:
      000071 AE 82            [24]  756 	mov	r6,dpl
      000073 AF 83            [24]  757 	mov	r7,dph
                                    758 ;	ecen4330_lcd_v3.c:100: hi = (a) >> 8;
      000075 8F 05            [24]  759 	mov	ar5,r7
                                    760 ;	ecen4330_lcd_v3.c:101: lo = (a);
                                    761 ;	ecen4330_lcd_v3.c:102: write8Reg(hi);
                                    762 ;	assignBit
      000077 C2 B5            [12]  763 	clr	_P3_5
                                    764 ;	assignBit
      000079 D2 B4            [12]  765 	setb	_P3_4
      00007B 85*02 82         [24]  766 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  767 	mov	dph,(_lcd_address + 1)
      000081 ED               [12]  768 	mov	a,r5
      000082 F0               [24]  769 	movx	@dptr,a
                                    770 ;	assignBit
      000083 C2 B4            [12]  771 	clr	_P3_4
                                    772 ;	ecen4330_lcd_v3.c:103: write8Reg(lo);
                                    773 ;	assignBit
      000085 C2 B5            [12]  774 	clr	_P3_5
                                    775 ;	assignBit
      000087 D2 B4            [12]  776 	setb	_P3_4
      000089 85*02 82         [24]  777 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  778 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  779 	mov	a,r6
      000090 F0               [24]  780 	movx	@dptr,a
                                    781 ;	assignBit
      000091 C2 B4            [12]  782 	clr	_P3_4
                                    783 ;	ecen4330_lcd_v3.c:104: hi = (d) >> 8;
      000093 AF*01            [24]  784 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    785 ;	ecen4330_lcd_v3.c:105: lo = (d);
      000095 AE*00            [24]  786 	mov	r6,_writeRegister16_PARM_2
                                    787 ;	ecen4330_lcd_v3.c:106: CD = 1 ;
                                    788 ;	assignBit
      000097 D2 B5            [12]  789 	setb	_P3_5
                                    790 ;	ecen4330_lcd_v3.c:107: write8Data(hi);
                                    791 ;	assignBit
      000099 D2 B5            [12]  792 	setb	_P3_5
                                    793 ;	assignBit
      00009B D2 B4            [12]  794 	setb	_P3_4
      00009D 85*02 82         [24]  795 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  796 	mov	dph,(_lcd_address + 1)
      0000A3 EF               [12]  797 	mov	a,r7
      0000A4 F0               [24]  798 	movx	@dptr,a
                                    799 ;	assignBit
      0000A5 C2 B4            [12]  800 	clr	_P3_4
                                    801 ;	ecen4330_lcd_v3.c:108: write8Data(lo);
                                    802 ;	assignBit
      0000A7 D2 B5            [12]  803 	setb	_P3_5
                                    804 ;	assignBit
      0000A9 D2 B4            [12]  805 	setb	_P3_4
      0000AB 85*02 82         [24]  806 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  807 	mov	dph,(_lcd_address + 1)
      0000B1 EE               [12]  808 	mov	a,r6
      0000B2 F0               [24]  809 	movx	@dptr,a
                                    810 ;	assignBit
      0000B3 C2 B4            [12]  811 	clr	_P3_4
                                    812 ;	ecen4330_lcd_v3.c:109: }
      0000B5 22               [24]  813 	ret
                                    814 ;------------------------------------------------------------
                                    815 ;Allocation info for local variables in function 'setCursor'
                                    816 ;------------------------------------------------------------
                                    817 ;y                         Allocated with name '_setCursor_PARM_2'
                                    818 ;x                         Allocated to registers 
                                    819 ;------------------------------------------------------------
                                    820 ;	ecen4330_lcd_v3.c:117: void setCursor (uint16_t x, uint16_t y) {
                                    821 ;	-----------------------------------------
                                    822 ;	 function setCursor
                                    823 ;	-----------------------------------------
      0000B6                        824 _setCursor:
      0000B6 85 82*0C         [24]  825 	mov	_cursor_x,dpl
      0000B9 85 83*0D         [24]  826 	mov	(_cursor_x + 1),dph
                                    827 ;	ecen4330_lcd_v3.c:119: cursor_y = y;
      0000BC 85*00*0E         [24]  828 	mov	_cursor_y,_setCursor_PARM_2
      0000BF 85*01*0F         [24]  829 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    830 ;	ecen4330_lcd_v3.c:120: }
      0000C2 22               [24]  831 	ret
                                    832 ;------------------------------------------------------------
                                    833 ;Allocation info for local variables in function 'setTextColor'
                                    834 ;------------------------------------------------------------
                                    835 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    836 ;x                         Allocated to registers 
                                    837 ;------------------------------------------------------------
                                    838 ;	ecen4330_lcd_v3.c:127: void setTextColor (uint16_t x, uint16_t y) {
                                    839 ;	-----------------------------------------
                                    840 ;	 function setTextColor
                                    841 ;	-----------------------------------------
      0000C3                        842 _setTextColor:
      0000C3 85 82*12         [24]  843 	mov	_textcolor,dpl
      0000C6 85 83*13         [24]  844 	mov	(_textcolor + 1),dph
                                    845 ;	ecen4330_lcd_v3.c:129: textbgcolor = y;
      0000C9 85*00*14         [24]  846 	mov	_textbgcolor,_setTextColor_PARM_2
      0000CC 85*01*15         [24]  847 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    848 ;	ecen4330_lcd_v3.c:130: }
      0000CF 22               [24]  849 	ret
                                    850 ;------------------------------------------------------------
                                    851 ;Allocation info for local variables in function 'setTextSize'
                                    852 ;------------------------------------------------------------
                                    853 ;s                         Allocated to registers r7 
                                    854 ;------------------------------------------------------------
                                    855 ;	ecen4330_lcd_v3.c:137: void setTextSize (uint8_t s) {
                                    856 ;	-----------------------------------------
                                    857 ;	 function setTextSize
                                    858 ;	-----------------------------------------
      0000D0                        859 _setTextSize:
                                    860 ;	ecen4330_lcd_v3.c:138: if (s > 8) return;
      0000D0 E5 82            [12]  861 	mov	a,dpl
      0000D2 FF               [12]  862 	mov	r7,a
      0000D3 24 F7            [12]  863 	add	a,#0xff - 0x08
      0000D5 50 01            [24]  864 	jnc	00102$
      0000D7 22               [24]  865 	ret
      0000D8                        866 00102$:
                                    867 ;	ecen4330_lcd_v3.c:139: textsize = (s>0) ? s : 1 ;
      0000D8 EF               [12]  868 	mov	a,r7
      0000D9 60 06            [24]  869 	jz	00105$
      0000DB 8F 06            [24]  870 	mov	ar6,r7
      0000DD 7F 00            [12]  871 	mov	r7,#0x00
      0000DF 80 04            [24]  872 	sjmp	00106$
      0000E1                        873 00105$:
      0000E1 7E 01            [12]  874 	mov	r6,#0x01
      0000E3 7F 00            [12]  875 	mov	r7,#0x00
      0000E5                        876 00106$:
      0000E5 8E*10            [24]  877 	mov	_textsize,r6
                                    878 ;	ecen4330_lcd_v3.c:140: }
      0000E7 22               [24]  879 	ret
                                    880 ;------------------------------------------------------------
                                    881 ;Allocation info for local variables in function 'setRotation'
                                    882 ;------------------------------------------------------------
                                    883 ;flag                      Allocated to registers r7 
                                    884 ;------------------------------------------------------------
                                    885 ;	ecen4330_lcd_v3.c:152: void setRotation (uint8_t flag) {
                                    886 ;	-----------------------------------------
                                    887 ;	 function setRotation
                                    888 ;	-----------------------------------------
      0000E8                        889 _setRotation:
                                    890 ;	ecen4330_lcd_v3.c:153: switch(flag) {
      0000E8 E5 82            [12]  891 	mov	a,dpl
      0000EA FF               [12]  892 	mov	r7,a
      0000EB 24 FC            [12]  893 	add	a,#0xff - 0x03
      0000ED 40 6A            [24]  894 	jc	00105$
      0000EF EF               [12]  895 	mov	a,r7
      0000F0 2F               [12]  896 	add	a,r7
                                    897 ;	ecen4330_lcd_v3.c:154: case 0:
      0000F1 90r00rF5         [24]  898 	mov	dptr,#00115$
      0000F4 73               [24]  899 	jmp	@a+dptr
      0000F5                        900 00115$:
      0000F5 80 06            [24]  901 	sjmp	00101$
      0000F7 80 1B            [24]  902 	sjmp	00102$
      0000F9 80 30            [24]  903 	sjmp	00103$
      0000FB 80 45            [24]  904 	sjmp	00104$
      0000FD                        905 00101$:
                                    906 ;	ecen4330_lcd_v3.c:155: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000FD 7F 48            [12]  907 	mov	r7,#0x48
                                    908 ;	ecen4330_lcd_v3.c:156: _width = TFTWIDTH;
      0000FF 90r00r00         [24]  909 	mov	dptr,#__width
      000102 74 F0            [12]  910 	mov	a,#0xf0
      000104 F0               [24]  911 	movx	@dptr,a
      000105 E4               [12]  912 	clr	a
      000106 A3               [24]  913 	inc	dptr
      000107 F0               [24]  914 	movx	@dptr,a
                                    915 ;	ecen4330_lcd_v3.c:157: _height = TFTHEIGHT;
      000108 90r00r02         [24]  916 	mov	dptr,#__height
      00010B 74 40            [12]  917 	mov	a,#0x40
      00010D F0               [24]  918 	movx	@dptr,a
      00010E 74 01            [12]  919 	mov	a,#0x01
      000110 A3               [24]  920 	inc	dptr
      000111 F0               [24]  921 	movx	@dptr,a
                                    922 ;	ecen4330_lcd_v3.c:158: break;
                                    923 ;	ecen4330_lcd_v3.c:159: case 1:
      000112 80 5A            [24]  924 	sjmp	00106$
      000114                        925 00102$:
                                    926 ;	ecen4330_lcd_v3.c:160: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000114 7F 28            [12]  927 	mov	r7,#0x28
                                    928 ;	ecen4330_lcd_v3.c:161: _width = TFTHEIGHT;
      000116 90r00r00         [24]  929 	mov	dptr,#__width
      000119 74 40            [12]  930 	mov	a,#0x40
      00011B F0               [24]  931 	movx	@dptr,a
      00011C 74 01            [12]  932 	mov	a,#0x01
      00011E A3               [24]  933 	inc	dptr
      00011F F0               [24]  934 	movx	@dptr,a
                                    935 ;	ecen4330_lcd_v3.c:162: _height = TFTWIDTH;
      000120 90r00r02         [24]  936 	mov	dptr,#__height
      000123 74 F0            [12]  937 	mov	a,#0xf0
      000125 F0               [24]  938 	movx	@dptr,a
      000126 E4               [12]  939 	clr	a
      000127 A3               [24]  940 	inc	dptr
      000128 F0               [24]  941 	movx	@dptr,a
                                    942 ;	ecen4330_lcd_v3.c:163: break;
                                    943 ;	ecen4330_lcd_v3.c:164: case 2:
      000129 80 43            [24]  944 	sjmp	00106$
      00012B                        945 00103$:
                                    946 ;	ecen4330_lcd_v3.c:165: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00012B 7F 88            [12]  947 	mov	r7,#0x88
                                    948 ;	ecen4330_lcd_v3.c:166: _width = TFTWIDTH;
      00012D 90r00r00         [24]  949 	mov	dptr,#__width
      000130 74 F0            [12]  950 	mov	a,#0xf0
      000132 F0               [24]  951 	movx	@dptr,a
      000133 E4               [12]  952 	clr	a
      000134 A3               [24]  953 	inc	dptr
      000135 F0               [24]  954 	movx	@dptr,a
                                    955 ;	ecen4330_lcd_v3.c:167: _height = TFTHEIGHT;
      000136 90r00r02         [24]  956 	mov	dptr,#__height
      000139 74 40            [12]  957 	mov	a,#0x40
      00013B F0               [24]  958 	movx	@dptr,a
      00013C 74 01            [12]  959 	mov	a,#0x01
      00013E A3               [24]  960 	inc	dptr
      00013F F0               [24]  961 	movx	@dptr,a
                                    962 ;	ecen4330_lcd_v3.c:168: break;
                                    963 ;	ecen4330_lcd_v3.c:169: case 3:
      000140 80 2C            [24]  964 	sjmp	00106$
      000142                        965 00104$:
                                    966 ;	ecen4330_lcd_v3.c:170: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000142 7F E8            [12]  967 	mov	r7,#0xe8
                                    968 ;	ecen4330_lcd_v3.c:171: _width = TFTHEIGHT;
      000144 90r00r00         [24]  969 	mov	dptr,#__width
      000147 74 40            [12]  970 	mov	a,#0x40
      000149 F0               [24]  971 	movx	@dptr,a
      00014A 74 01            [12]  972 	mov	a,#0x01
      00014C A3               [24]  973 	inc	dptr
      00014D F0               [24]  974 	movx	@dptr,a
                                    975 ;	ecen4330_lcd_v3.c:172: _height = TFTWIDTH;
      00014E 90r00r02         [24]  976 	mov	dptr,#__height
      000151 74 F0            [12]  977 	mov	a,#0xf0
      000153 F0               [24]  978 	movx	@dptr,a
      000154 E4               [12]  979 	clr	a
      000155 A3               [24]  980 	inc	dptr
      000156 F0               [24]  981 	movx	@dptr,a
                                    982 ;	ecen4330_lcd_v3.c:173: break;
                                    983 ;	ecen4330_lcd_v3.c:174: default:
      000157 80 15            [24]  984 	sjmp	00106$
      000159                        985 00105$:
                                    986 ;	ecen4330_lcd_v3.c:175: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000159 7F 48            [12]  987 	mov	r7,#0x48
                                    988 ;	ecen4330_lcd_v3.c:176: _width = TFTWIDTH;
      00015B 90r00r00         [24]  989 	mov	dptr,#__width
      00015E 74 F0            [12]  990 	mov	a,#0xf0
      000160 F0               [24]  991 	movx	@dptr,a
      000161 E4               [12]  992 	clr	a
      000162 A3               [24]  993 	inc	dptr
      000163 F0               [24]  994 	movx	@dptr,a
                                    995 ;	ecen4330_lcd_v3.c:177: _height = TFTHEIGHT;
      000164 90r00r02         [24]  996 	mov	dptr,#__height
      000167 74 40            [12]  997 	mov	a,#0x40
      000169 F0               [24]  998 	movx	@dptr,a
      00016A 74 01            [12]  999 	mov	a,#0x01
      00016C A3               [24] 1000 	inc	dptr
      00016D F0               [24] 1001 	movx	@dptr,a
                                   1002 ;	ecen4330_lcd_v3.c:179: }
      00016E                       1003 00106$:
                                   1004 ;	ecen4330_lcd_v3.c:180: writeRegister8(ILI9341_MEMCONTROL, flag);
      00016E 8F*00            [24] 1005 	mov	_writeRegister8_PARM_2,r7
      000170 75 82 36         [24] 1006 	mov	dpl,#0x36
                                   1007 ;	ecen4330_lcd_v3.c:181: }
      000173 02r00r51         [24] 1008 	ljmp	_writeRegister8
                                   1009 ;------------------------------------------------------------
                                   1010 ;Allocation info for local variables in function 'setAddress'
                                   1011 ;------------------------------------------------------------
                                   1012 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1013 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1014 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1015 ;x1                        Allocated to registers r6 r7 
                                   1016 ;------------------------------------------------------------
                                   1017 ;	ecen4330_lcd_v3.c:183: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                   1018 ;	-----------------------------------------
                                   1019 ;	 function setAddress
                                   1020 ;	-----------------------------------------
      000176                       1021 _setAddress:
      000176 AE 82            [24] 1022 	mov	r6,dpl
      000178 AF 83            [24] 1023 	mov	r7,dph
                                   1024 ;	ecen4330_lcd_v3.c:184: write8Reg(0x2A);
                                   1025 ;	assignBit
      00017A C2 B5            [12] 1026 	clr	_P3_5
                                   1027 ;	assignBit
      00017C D2 B4            [12] 1028 	setb	_P3_4
      00017E 85*02 82         [24] 1029 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1030 	mov	dph,(_lcd_address + 1)
      000184 74 2A            [12] 1031 	mov	a,#0x2a
      000186 F0               [24] 1032 	movx	@dptr,a
                                   1033 ;	assignBit
      000187 C2 B4            [12] 1034 	clr	_P3_4
                                   1035 ;	ecen4330_lcd_v3.c:185: write8Data(x1 >> 8);
                                   1036 ;	assignBit
      000189 D2 B5            [12] 1037 	setb	_P3_5
                                   1038 ;	assignBit
      00018B D2 B4            [12] 1039 	setb	_P3_4
      00018D 85*02 82         [24] 1040 	mov	dpl,_lcd_address
      000190 85*03 83         [24] 1041 	mov	dph,(_lcd_address + 1)
      000193 8F 05            [24] 1042 	mov	ar5,r7
      000195 ED               [12] 1043 	mov	a,r5
      000196 F0               [24] 1044 	movx	@dptr,a
                                   1045 ;	assignBit
      000197 C2 B4            [12] 1046 	clr	_P3_4
                                   1047 ;	ecen4330_lcd_v3.c:186: write8Data(x1);
                                   1048 ;	assignBit
      000199 D2 B5            [12] 1049 	setb	_P3_5
                                   1050 ;	assignBit
      00019B D2 B4            [12] 1051 	setb	_P3_4
      00019D 85*02 82         [24] 1052 	mov	dpl,_lcd_address
      0001A0 85*03 83         [24] 1053 	mov	dph,(_lcd_address + 1)
      0001A3 EE               [12] 1054 	mov	a,r6
      0001A4 F0               [24] 1055 	movx	@dptr,a
                                   1056 ;	assignBit
      0001A5 C2 B4            [12] 1057 	clr	_P3_4
                                   1058 ;	ecen4330_lcd_v3.c:187: write8Data(x2 >> 8);
                                   1059 ;	assignBit
      0001A7 D2 B5            [12] 1060 	setb	_P3_5
                                   1061 ;	assignBit
      0001A9 D2 B4            [12] 1062 	setb	_P3_4
      0001AB 85*02 82         [24] 1063 	mov	dpl,_lcd_address
      0001AE 85*03 83         [24] 1064 	mov	dph,(_lcd_address + 1)
      0001B1 E5*03            [12] 1065 	mov	a,(_setAddress_PARM_3 + 1)
      0001B3 F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	assignBit
      0001B4 C2 B4            [12] 1068 	clr	_P3_4
                                   1069 ;	ecen4330_lcd_v3.c:188: write8Data(x2);
                                   1070 ;	assignBit
      0001B6 D2 B5            [12] 1071 	setb	_P3_5
                                   1072 ;	assignBit
      0001B8 D2 B4            [12] 1073 	setb	_P3_4
      0001BA 85*02 82         [24] 1074 	mov	dpl,_lcd_address
      0001BD 85*03 83         [24] 1075 	mov	dph,(_lcd_address + 1)
      0001C0 E5*02            [12] 1076 	mov	a,_setAddress_PARM_3
      0001C2 F0               [24] 1077 	movx	@dptr,a
                                   1078 ;	assignBit
      0001C3 C2 B4            [12] 1079 	clr	_P3_4
                                   1080 ;	ecen4330_lcd_v3.c:190: write8Reg(0x2B);
                                   1081 ;	assignBit
      0001C5 C2 B5            [12] 1082 	clr	_P3_5
                                   1083 ;	assignBit
      0001C7 D2 B4            [12] 1084 	setb	_P3_4
      0001C9 85*02 82         [24] 1085 	mov	dpl,_lcd_address
      0001CC 85*03 83         [24] 1086 	mov	dph,(_lcd_address + 1)
      0001CF 74 2B            [12] 1087 	mov	a,#0x2b
      0001D1 F0               [24] 1088 	movx	@dptr,a
                                   1089 ;	assignBit
      0001D2 C2 B4            [12] 1090 	clr	_P3_4
                                   1091 ;	ecen4330_lcd_v3.c:191: write8Data(y1 >> 8);
                                   1092 ;	assignBit
      0001D4 D2 B5            [12] 1093 	setb	_P3_5
                                   1094 ;	assignBit
      0001D6 D2 B4            [12] 1095 	setb	_P3_4
      0001D8 85*02 82         [24] 1096 	mov	dpl,_lcd_address
      0001DB 85*03 83         [24] 1097 	mov	dph,(_lcd_address + 1)
      0001DE E5*01            [12] 1098 	mov	a,(_setAddress_PARM_2 + 1)
      0001E0 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	assignBit
      0001E1 C2 B4            [12] 1101 	clr	_P3_4
                                   1102 ;	ecen4330_lcd_v3.c:192: write8Data(y1);
                                   1103 ;	assignBit
      0001E3 D2 B5            [12] 1104 	setb	_P3_5
                                   1105 ;	assignBit
      0001E5 D2 B4            [12] 1106 	setb	_P3_4
      0001E7 85*02 82         [24] 1107 	mov	dpl,_lcd_address
      0001EA 85*03 83         [24] 1108 	mov	dph,(_lcd_address + 1)
      0001ED E5*00            [12] 1109 	mov	a,_setAddress_PARM_2
      0001EF F0               [24] 1110 	movx	@dptr,a
                                   1111 ;	assignBit
      0001F0 C2 B4            [12] 1112 	clr	_P3_4
                                   1113 ;	ecen4330_lcd_v3.c:193: write8Data(y2 >> 8);
                                   1114 ;	assignBit
      0001F2 D2 B5            [12] 1115 	setb	_P3_5
                                   1116 ;	assignBit
      0001F4 D2 B4            [12] 1117 	setb	_P3_4
      0001F6 85*02 82         [24] 1118 	mov	dpl,_lcd_address
      0001F9 85*03 83         [24] 1119 	mov	dph,(_lcd_address + 1)
      0001FC E5*05            [12] 1120 	mov	a,(_setAddress_PARM_4 + 1)
      0001FE F0               [24] 1121 	movx	@dptr,a
                                   1122 ;	assignBit
      0001FF C2 B4            [12] 1123 	clr	_P3_4
                                   1124 ;	ecen4330_lcd_v3.c:194: write8Data(y2);
                                   1125 ;	assignBit
      000201 D2 B5            [12] 1126 	setb	_P3_5
                                   1127 ;	assignBit
      000203 D2 B4            [12] 1128 	setb	_P3_4
      000205 85*02 82         [24] 1129 	mov	dpl,_lcd_address
      000208 85*03 83         [24] 1130 	mov	dph,(_lcd_address + 1)
      00020B E5*04            [12] 1131 	mov	a,_setAddress_PARM_4
      00020D F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	assignBit
      00020E C2 B4            [12] 1134 	clr	_P3_4
                                   1135 ;	ecen4330_lcd_v3.c:195: }
      000210 22               [24] 1136 	ret
                                   1137 ;------------------------------------------------------------
                                   1138 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1139 ;------------------------------------------------------------
                                   1140 ;	ecen4330_lcd_v3.c:201: void TFT_LCD_INIT (void) {
                                   1141 ;	-----------------------------------------
                                   1142 ;	 function TFT_LCD_INIT
                                   1143 ;	-----------------------------------------
      000211                       1144 _TFT_LCD_INIT:
                                   1145 ;	ecen4330_lcd_v3.c:202: _width = TFTWIDTH;
      000211 90r00r00         [24] 1146 	mov	dptr,#__width
      000214 74 F0            [12] 1147 	mov	a,#0xf0
      000216 F0               [24] 1148 	movx	@dptr,a
      000217 E4               [12] 1149 	clr	a
      000218 A3               [24] 1150 	inc	dptr
      000219 F0               [24] 1151 	movx	@dptr,a
                                   1152 ;	ecen4330_lcd_v3.c:203: _height = TFTHEIGHT;
      00021A 90r00r02         [24] 1153 	mov	dptr,#__height
      00021D 74 40            [12] 1154 	mov	a,#0x40
      00021F F0               [24] 1155 	movx	@dptr,a
      000220 74 01            [12] 1156 	mov	a,#0x01
      000222 A3               [24] 1157 	inc	dptr
      000223 F0               [24] 1158 	movx	@dptr,a
                                   1159 ;	ecen4330_lcd_v3.c:205: IOM = 0;
                                   1160 ;	assignBit
      000224 C2 B4            [12] 1161 	clr	_P3_4
                                   1162 ;	ecen4330_lcd_v3.c:206: CD = 1;
                                   1163 ;	assignBit
      000226 D2 B5            [12] 1164 	setb	_P3_5
                                   1165 ;	ecen4330_lcd_v3.c:208: write8Reg(0x00);
                                   1166 ;	assignBit
      000228 C2 B5            [12] 1167 	clr	_P3_5
                                   1168 ;	assignBit
      00022A D2 B4            [12] 1169 	setb	_P3_4
      00022C 85*02 82         [24] 1170 	mov	dpl,_lcd_address
      00022F 85*03 83         [24] 1171 	mov	dph,(_lcd_address + 1)
      000232 E4               [12] 1172 	clr	a
      000233 F0               [24] 1173 	movx	@dptr,a
                                   1174 ;	assignBit
      000234 C2 B4            [12] 1175 	clr	_P3_4
                                   1176 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1177 ;	assignBit
      000236 D2 B5            [12] 1178 	setb	_P3_5
                                   1179 ;	assignBit
      000238 D2 B4            [12] 1180 	setb	_P3_4
      00023A 85*02 82         [24] 1181 	mov	dpl,_lcd_address
      00023D 85*03 83         [24] 1182 	mov	dph,(_lcd_address + 1)
      000240 E4               [12] 1183 	clr	a
      000241 F0               [24] 1184 	movx	@dptr,a
                                   1185 ;	assignBit
      000242 C2 B4            [12] 1186 	clr	_P3_4
                                   1187 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1188 ;	assignBit
      000244 D2 B5            [12] 1189 	setb	_P3_5
                                   1190 ;	assignBit
      000246 D2 B4            [12] 1191 	setb	_P3_4
      000248 85*02 82         [24] 1192 	mov	dpl,_lcd_address
      00024B 85*03 83         [24] 1193 	mov	dph,(_lcd_address + 1)
      00024E E4               [12] 1194 	clr	a
      00024F F0               [24] 1195 	movx	@dptr,a
                                   1196 ;	assignBit
      000250 C2 B4            [12] 1197 	clr	_P3_4
                                   1198 ;	ecen4330_lcd_v3.c:211: write8Data(0x00);
                                   1199 ;	assignBit
      000252 D2 B5            [12] 1200 	setb	_P3_5
                                   1201 ;	assignBit
      000254 D2 B4            [12] 1202 	setb	_P3_4
      000256 85*02 82         [24] 1203 	mov	dpl,_lcd_address
      000259 85*03 83         [24] 1204 	mov	dph,(_lcd_address + 1)
      00025C E4               [12] 1205 	clr	a
      00025D F0               [24] 1206 	movx	@dptr,a
                                   1207 ;	assignBit
      00025E C2 B4            [12] 1208 	clr	_P3_4
                                   1209 ;	ecen4330_lcd_v3.c:212: delay(200);
      000260 90 00 C8         [24] 1210 	mov	dptr,#0x00c8
      000263 12r00r21         [24] 1211 	lcall	_delay
                                   1212 ;	ecen4330_lcd_v3.c:214: writeRegister8(ILI9341_SOFTRESET, 0);
      000266 75*00 00         [24] 1213 	mov	_writeRegister8_PARM_2,#0x00
      000269 75 82 01         [24] 1214 	mov	dpl,#0x01
      00026C 12r00r51         [24] 1215 	lcall	_writeRegister8
                                   1216 ;	ecen4330_lcd_v3.c:215: delay(50);
      00026F 90 00 32         [24] 1217 	mov	dptr,#0x0032
      000272 12r00r21         [24] 1218 	lcall	_delay
                                   1219 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000275 75*00 00         [24] 1220 	mov	_writeRegister8_PARM_2,#0x00
      000278 75 82 28         [24] 1221 	mov	dpl,#0x28
      00027B 12r00r51         [24] 1222 	lcall	_writeRegister8
                                   1223 ;	ecen4330_lcd_v3.c:217: delay(10);
      00027E 90 00 0A         [24] 1224 	mov	dptr,#0x000a
      000281 12r00r21         [24] 1225 	lcall	_delay
                                   1226 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000284 75*00 23         [24] 1227 	mov	_writeRegister8_PARM_2,#0x23
      000287 75 82 C0         [24] 1228 	mov	dpl,#0xc0
      00028A 12r00r51         [24] 1229 	lcall	_writeRegister8
                                   1230 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00028D 75*00 11         [24] 1231 	mov	_writeRegister8_PARM_2,#0x11
      000290 75 82 C1         [24] 1232 	mov	dpl,#0xc1
      000293 12r00r51         [24] 1233 	lcall	_writeRegister8
                                   1234 ;	ecen4330_lcd_v3.c:221: write8Reg(ILI9341_VCOMCONTROL1);
                                   1235 ;	assignBit
      000296 C2 B5            [12] 1236 	clr	_P3_5
                                   1237 ;	assignBit
      000298 D2 B4            [12] 1238 	setb	_P3_4
      00029A 85*02 82         [24] 1239 	mov	dpl,_lcd_address
      00029D 85*03 83         [24] 1240 	mov	dph,(_lcd_address + 1)
      0002A0 74 C5            [12] 1241 	mov	a,#0xc5
      0002A2 F0               [24] 1242 	movx	@dptr,a
                                   1243 ;	assignBit
      0002A3 C2 B4            [12] 1244 	clr	_P3_4
                                   1245 ;	ecen4330_lcd_v3.c:222: write8Data(0x3d);
                                   1246 ;	assignBit
      0002A5 D2 B5            [12] 1247 	setb	_P3_5
                                   1248 ;	assignBit
      0002A7 D2 B4            [12] 1249 	setb	_P3_4
      0002A9 85*02 82         [24] 1250 	mov	dpl,_lcd_address
      0002AC 85*03 83         [24] 1251 	mov	dph,(_lcd_address + 1)
      0002AF 74 3D            [12] 1252 	mov	a,#0x3d
      0002B1 F0               [24] 1253 	movx	@dptr,a
                                   1254 ;	assignBit
      0002B2 C2 B4            [12] 1255 	clr	_P3_4
                                   1256 ;	ecen4330_lcd_v3.c:223: write8Data(0x30);
                                   1257 ;	assignBit
      0002B4 D2 B5            [12] 1258 	setb	_P3_5
                                   1259 ;	assignBit
      0002B6 D2 B4            [12] 1260 	setb	_P3_4
      0002B8 85*02 82         [24] 1261 	mov	dpl,_lcd_address
      0002BB 85*03 83         [24] 1262 	mov	dph,(_lcd_address + 1)
      0002BE 74 30            [12] 1263 	mov	a,#0x30
      0002C0 F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	assignBit
      0002C1 C2 B4            [12] 1266 	clr	_P3_4
                                   1267 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002C3 75*00 AA         [24] 1268 	mov	_writeRegister8_PARM_2,#0xaa
      0002C6 75 82 C7         [24] 1269 	mov	dpl,#0xc7
      0002C9 12r00r51         [24] 1270 	lcall	_writeRegister8
                                   1271 ;	ecen4330_lcd_v3.c:225: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002CC 75*00 88         [24] 1272 	mov	_writeRegister8_PARM_2,#0x88
      0002CF 75 82 36         [24] 1273 	mov	dpl,#0x36
      0002D2 12r00r51         [24] 1274 	lcall	_writeRegister8
                                   1275 ;	ecen4330_lcd_v3.c:226: write8Reg(ILI9341_PIXELFORMAT);
                                   1276 ;	assignBit
      0002D5 C2 B5            [12] 1277 	clr	_P3_5
                                   1278 ;	assignBit
      0002D7 D2 B4            [12] 1279 	setb	_P3_4
      0002D9 85*02 82         [24] 1280 	mov	dpl,_lcd_address
      0002DC 85*03 83         [24] 1281 	mov	dph,(_lcd_address + 1)
      0002DF 74 3A            [12] 1282 	mov	a,#0x3a
      0002E1 F0               [24] 1283 	movx	@dptr,a
                                   1284 ;	assignBit
      0002E2 C2 B4            [12] 1285 	clr	_P3_4
                                   1286 ;	ecen4330_lcd_v3.c:227: write8Data(0x55);write8Data(0x00);
                                   1287 ;	assignBit
      0002E4 D2 B5            [12] 1288 	setb	_P3_5
                                   1289 ;	assignBit
      0002E6 D2 B4            [12] 1290 	setb	_P3_4
      0002E8 85*02 82         [24] 1291 	mov	dpl,_lcd_address
      0002EB 85*03 83         [24] 1292 	mov	dph,(_lcd_address + 1)
      0002EE 74 55            [12] 1293 	mov	a,#0x55
      0002F0 F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	assignBit
      0002F1 C2 B4            [12] 1296 	clr	_P3_4
                                   1297 ;	assignBit
      0002F3 D2 B5            [12] 1298 	setb	_P3_5
                                   1299 ;	assignBit
      0002F5 D2 B4            [12] 1300 	setb	_P3_4
      0002F7 85*02 82         [24] 1301 	mov	dpl,_lcd_address
      0002FA 85*03 83         [24] 1302 	mov	dph,(_lcd_address + 1)
      0002FD E4               [12] 1303 	clr	a
      0002FE F0               [24] 1304 	movx	@dptr,a
                                   1305 ;	assignBit
      0002FF C2 B4            [12] 1306 	clr	_P3_4
                                   1307 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000301 75*00 1B         [24] 1308 	mov	_writeRegister16_PARM_2,#0x1b
      000304 75*01 00         [24] 1309 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000307 90 00 B1         [24] 1310 	mov	dptr,#0x00b1
      00030A 12r00r71         [24] 1311 	lcall	_writeRegister16
                                   1312 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00030D 75*00 07         [24] 1313 	mov	_writeRegister8_PARM_2,#0x07
      000310 75 82 B7         [24] 1314 	mov	dpl,#0xb7
      000313 12r00r51         [24] 1315 	lcall	_writeRegister8
                                   1316 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      000316 75*00 00         [24] 1317 	mov	_writeRegister8_PARM_2,#0x00
      000319 75 82 11         [24] 1318 	mov	dpl,#0x11
      00031C 12r00r51         [24] 1319 	lcall	_writeRegister8
                                   1320 ;	ecen4330_lcd_v3.c:233: delay(150);
      00031F 90 00 96         [24] 1321 	mov	dptr,#0x0096
      000322 12r00r21         [24] 1322 	lcall	_delay
                                   1323 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      000325 75*00 00         [24] 1324 	mov	_writeRegister8_PARM_2,#0x00
      000328 75 82 29         [24] 1325 	mov	dpl,#0x29
      00032B 12r00r51         [24] 1326 	lcall	_writeRegister8
                                   1327 ;	ecen4330_lcd_v3.c:235: delay(500);
      00032E 90 01 F4         [24] 1328 	mov	dptr,#0x01f4
      000331 12r00r21         [24] 1329 	lcall	_delay
                                   1330 ;	ecen4330_lcd_v3.c:236: setAddress(0,0,_width-1,_height-1);
      000334 90r00r00         [24] 1331 	mov	dptr,#__width
      000337 E0               [24] 1332 	movx	a,@dptr
      000338 FE               [12] 1333 	mov	r6,a
      000339 A3               [24] 1334 	inc	dptr
      00033A E0               [24] 1335 	movx	a,@dptr
      00033B FF               [12] 1336 	mov	r7,a
      00033C 1E               [12] 1337 	dec	r6
      00033D BE FF 01         [24] 1338 	cjne	r6,#0xff,00103$
      000340 1F               [12] 1339 	dec	r7
      000341                       1340 00103$:
      000341 8E*02            [24] 1341 	mov	_setAddress_PARM_3,r6
      000343 8F*03            [24] 1342 	mov	(_setAddress_PARM_3 + 1),r7
      000345 90r00r02         [24] 1343 	mov	dptr,#__height
      000348 E0               [24] 1344 	movx	a,@dptr
      000349 FE               [12] 1345 	mov	r6,a
      00034A A3               [24] 1346 	inc	dptr
      00034B E0               [24] 1347 	movx	a,@dptr
      00034C FF               [12] 1348 	mov	r7,a
      00034D 1E               [12] 1349 	dec	r6
      00034E BE FF 01         [24] 1350 	cjne	r6,#0xff,00104$
      000351 1F               [12] 1351 	dec	r7
      000352                       1352 00104$:
      000352 8E*04            [24] 1353 	mov	_setAddress_PARM_4,r6
      000354 8F*05            [24] 1354 	mov	(_setAddress_PARM_4 + 1),r7
      000356 E4               [12] 1355 	clr	a
      000357 F5*00            [12] 1356 	mov	_setAddress_PARM_2,a
      000359 F5*01            [12] 1357 	mov	(_setAddress_PARM_2 + 1),a
      00035B 90 00 00         [24] 1358 	mov	dptr,#0x0000
                                   1359 ;	ecen4330_lcd_v3.c:237: }
      00035E 02r01r76         [24] 1360 	ljmp	_setAddress
                                   1361 ;------------------------------------------------------------
                                   1362 ;Allocation info for local variables in function 'drawPixel'
                                   1363 ;------------------------------------------------------------
                                   1364 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1365 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1366 ;x3                        Allocated to registers r6 r7 
                                   1367 ;------------------------------------------------------------
                                   1368 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1369 ;	-----------------------------------------
                                   1370 ;	 function drawPixel
                                   1371 ;	-----------------------------------------
      000361                       1372 _drawPixel:
      000361 AE 82            [24] 1373 	mov	r6,dpl
      000363 AF 83            [24] 1374 	mov	r7,dph
                                   1375 ;	ecen4330_lcd_v3.c:248: setAddress(x3,y3,x3+1,y3+1);
      000365 8E 04            [24] 1376 	mov	ar4,r6
      000367 8F 05            [24] 1377 	mov	ar5,r7
      000369 0C               [12] 1378 	inc	r4
      00036A BC 00 01         [24] 1379 	cjne	r4,#0x00,00103$
      00036D 0D               [12] 1380 	inc	r5
      00036E                       1381 00103$:
      00036E 8C*02            [24] 1382 	mov	_setAddress_PARM_3,r4
      000370 8D*03            [24] 1383 	mov	(_setAddress_PARM_3 + 1),r5
      000372 AC*16            [24] 1384 	mov	r4,_drawPixel_PARM_2
      000374 AD*17            [24] 1385 	mov	r5,(_drawPixel_PARM_2 + 1)
      000376 0C               [12] 1386 	inc	r4
      000377 BC 00 01         [24] 1387 	cjne	r4,#0x00,00104$
      00037A 0D               [12] 1388 	inc	r5
      00037B                       1389 00104$:
      00037B 8C*04            [24] 1390 	mov	_setAddress_PARM_4,r4
      00037D 8D*05            [24] 1391 	mov	(_setAddress_PARM_4 + 1),r5
      00037F 85*16*00         [24] 1392 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000382 85*17*01         [24] 1393 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000385 8E 82            [24] 1394 	mov	dpl,r6
      000387 8F 83            [24] 1395 	mov	dph,r7
      000389 12r01r76         [24] 1396 	lcall	_setAddress
                                   1397 ;	ecen4330_lcd_v3.c:250: CD=0; write8(0x2C);
                                   1398 ;	assignBit
      00038C C2 B5            [12] 1399 	clr	_P3_5
                                   1400 ;	assignBit
      00038E D2 B4            [12] 1401 	setb	_P3_4
      000390 85*02 82         [24] 1402 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1403 	mov	dph,(_lcd_address + 1)
      000396 74 2C            [12] 1404 	mov	a,#0x2c
      000398 F0               [24] 1405 	movx	@dptr,a
                                   1406 ;	assignBit
      000399 C2 B4            [12] 1407 	clr	_P3_4
                                   1408 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1409 ;	assignBit
      00039B D2 B5            [12] 1410 	setb	_P3_5
                                   1411 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1412 ;	assignBit
      00039D D2 B4            [12] 1413 	setb	_P3_4
      00039F 85*02 82         [24] 1414 	mov	dpl,_lcd_address
      0003A2 85*03 83         [24] 1415 	mov	dph,(_lcd_address + 1)
      0003A5 E5*19            [12] 1416 	mov	a,(_drawPixel_PARM_3 + 1)
      0003A7 F0               [24] 1417 	movx	@dptr,a
                                   1418 ;	assignBit
      0003A8 C2 B4            [12] 1419 	clr	_P3_4
                                   1420 ;	assignBit
      0003AA D2 B4            [12] 1421 	setb	_P3_4
      0003AC 85*02 82         [24] 1422 	mov	dpl,_lcd_address
      0003AF 85*03 83         [24] 1423 	mov	dph,(_lcd_address + 1)
      0003B2 E5*18            [12] 1424 	mov	a,_drawPixel_PARM_3
      0003B4 F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	assignBit
      0003B5 C2 B4            [12] 1427 	clr	_P3_4
                                   1428 ;	ecen4330_lcd_v3.c:254: }
      0003B7 22               [24] 1429 	ret
                                   1430 ;------------------------------------------------------------
                                   1431 ;Allocation info for local variables in function 'drawCircle'
                                   1432 ;------------------------------------------------------------
                                   1433 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1434 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1435 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1436 ;x0                        Allocated with name '_drawCircle_x0_65536_105'
                                   1437 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1438 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1439 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1440 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1441 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1442 ;f                         Allocated with name '_drawCircle_f_65536_106'
                                   1443 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_106'
                                   1444 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_106'
                                   1445 ;x                         Allocated with name '_drawCircle_x_65536_106'
                                   1446 ;y                         Allocated with name '_drawCircle_y_65536_106'
                                   1447 ;------------------------------------------------------------
                                   1448 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function drawCircle
                                   1451 ;	-----------------------------------------
      0003B8                       1452 _drawCircle:
      0003B8 85 82*20         [24] 1453 	mov	_drawCircle_x0_65536_105,dpl
      0003BB 85 83*21         [24] 1454 	mov	(_drawCircle_x0_65536_105 + 1),dph
                                   1455 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003BE 74 01            [12] 1456 	mov	a,#0x01
      0003C0 C3               [12] 1457 	clr	c
      0003C1 95*1C            [12] 1458 	subb	a,_drawCircle_PARM_3
      0003C3 FC               [12] 1459 	mov	r4,a
      0003C4 E4               [12] 1460 	clr	a
      0003C5 95*1D            [12] 1461 	subb	a,(_drawCircle_PARM_3 + 1)
      0003C7 FD               [12] 1462 	mov	r5,a
      0003C8 90r00r04         [24] 1463 	mov	dptr,#_drawCircle_f_65536_106
      0003CB EC               [12] 1464 	mov	a,r4
      0003CC F0               [24] 1465 	movx	@dptr,a
      0003CD ED               [12] 1466 	mov	a,r5
      0003CE A3               [24] 1467 	inc	dptr
      0003CF F0               [24] 1468 	movx	@dptr,a
                                   1469 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003D0 85*1C*00         [24] 1470 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003D3 85*1D*01         [24] 1471 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003D6 90 FF FE         [24] 1472 	mov	dptr,#0xfffe
      0003D9 12r00r00         [24] 1473 	lcall	__mulint
      0003DC AC 82            [24] 1474 	mov	r4,dpl
      0003DE AD 83            [24] 1475 	mov	r5,dph
                                   1476 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      0003E0 AA*1C            [24] 1477 	mov	r2,_drawCircle_PARM_3
      0003E2 AB*1D            [24] 1478 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1479 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      0003E4 E5*1C            [12] 1480 	mov	a,_drawCircle_PARM_3
      0003E6 25*1A            [12] 1481 	add	a,_drawCircle_PARM_2
      0003E8 F5*16            [12] 1482 	mov	_drawPixel_PARM_2,a
      0003EA E5*1D            [12] 1483 	mov	a,(_drawCircle_PARM_3 + 1)
      0003EC 35*1B            [12] 1484 	addc	a,(_drawCircle_PARM_2 + 1)
      0003EE F5*17            [12] 1485 	mov	(_drawPixel_PARM_2 + 1),a
      0003F0 85*1E*18         [24] 1486 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F3 85*1F*19         [24] 1487 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F6 85*20 82         [24] 1488 	mov	dpl,_drawCircle_x0_65536_105
      0003F9 85*21 83         [24] 1489 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      0003FC C0 05            [24] 1490 	push	ar5
      0003FE C0 04            [24] 1491 	push	ar4
      000400 C0 03            [24] 1492 	push	ar3
      000402 C0 02            [24] 1493 	push	ar2
      000404 12r03r61         [24] 1494 	lcall	_drawPixel
                                   1495 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      000407 E5*1A            [12] 1496 	mov	a,_drawCircle_PARM_2
      000409 C3               [12] 1497 	clr	c
      00040A 95*1C            [12] 1498 	subb	a,_drawCircle_PARM_3
      00040C F5*16            [12] 1499 	mov	_drawPixel_PARM_2,a
      00040E E5*1B            [12] 1500 	mov	a,(_drawCircle_PARM_2 + 1)
      000410 95*1D            [12] 1501 	subb	a,(_drawCircle_PARM_3 + 1)
      000412 F5*17            [12] 1502 	mov	(_drawPixel_PARM_2 + 1),a
      000414 85*1E*18         [24] 1503 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000417 85*1F*19         [24] 1504 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041A 85*20 82         [24] 1505 	mov	dpl,_drawCircle_x0_65536_105
      00041D 85*21 83         [24] 1506 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      000420 12r03r61         [24] 1507 	lcall	_drawPixel
                                   1508 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000423 E5*1C            [12] 1509 	mov	a,_drawCircle_PARM_3
      000425 25*20            [12] 1510 	add	a,_drawCircle_x0_65536_105
      000427 F5 82            [12] 1511 	mov	dpl,a
      000429 E5*1D            [12] 1512 	mov	a,(_drawCircle_PARM_3 + 1)
      00042B 35*21            [12] 1513 	addc	a,(_drawCircle_x0_65536_105 + 1)
      00042D F5 83            [12] 1514 	mov	dph,a
      00042F 85*1A*16         [24] 1515 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000432 85*1B*17         [24] 1516 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000435 85*1E*18         [24] 1517 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000438 85*1F*19         [24] 1518 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043B 12r03r61         [24] 1519 	lcall	_drawPixel
                                   1520 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      00043E E5*20            [12] 1521 	mov	a,_drawCircle_x0_65536_105
      000440 C3               [12] 1522 	clr	c
      000441 95*1C            [12] 1523 	subb	a,_drawCircle_PARM_3
      000443 F5 82            [12] 1524 	mov	dpl,a
      000445 E5*21            [12] 1525 	mov	a,(_drawCircle_x0_65536_105 + 1)
      000447 95*1D            [12] 1526 	subb	a,(_drawCircle_PARM_3 + 1)
      000449 F5 83            [12] 1527 	mov	dph,a
      00044B 85*1A*16         [24] 1528 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00044E 85*1B*17         [24] 1529 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000451 85*1E*18         [24] 1530 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000454 85*1F*19         [24] 1531 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000457 12r03r61         [24] 1532 	lcall	_drawPixel
      00045A D0 02            [24] 1533 	pop	ar2
      00045C D0 03            [24] 1534 	pop	ar3
      00045E D0 04            [24] 1535 	pop	ar4
      000460 D0 05            [24] 1536 	pop	ar5
                                   1537 ;	ecen4330_lcd_v3.c:276: while (x<y) {
      000462 78 00            [12] 1538 	mov	r0,#0x00
      000464 79 00            [12] 1539 	mov	r1,#0x00
      000466 75*22 01         [24] 1540 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1541 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000469 89*23            [24] 1542 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      00046B                       1543 00103$:
      00046B C3               [12] 1544 	clr	c
      00046C E8               [12] 1545 	mov	a,r0
      00046D 9A               [12] 1546 	subb	a,r2
      00046E E9               [12] 1547 	mov	a,r1
      00046F 64 80            [12] 1548 	xrl	a,#0x80
      000471 8B F0            [24] 1549 	mov	b,r3
      000473 63 F0 80         [24] 1550 	xrl	b,#0x80
      000476 95 F0            [12] 1551 	subb	a,b
      000478 40 01            [24] 1552 	jc	00121$
      00047A 22               [24] 1553 	ret
      00047B                       1554 00121$:
                                   1555 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      00047B 90r00r04         [24] 1556 	mov	dptr,#_drawCircle_f_65536_106
      00047E E0               [24] 1557 	movx	a,@dptr
      00047F F5*24            [12] 1558 	mov	_drawCircle_sloc1_1_0,a
      000481 A3               [24] 1559 	inc	dptr
      000482 E0               [24] 1560 	movx	a,@dptr
      000483 F5*25            [12] 1561 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000485 20 E7 18         [24] 1562 	jb	acc.7,00102$
                                   1563 ;	ecen4330_lcd_v3.c:278: y--;
      000488 1A               [12] 1564 	dec	r2
      000489 BA FF 01         [24] 1565 	cjne	r2,#0xff,00123$
      00048C 1B               [12] 1566 	dec	r3
      00048D                       1567 00123$:
                                   1568 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      00048D 74 02            [12] 1569 	mov	a,#0x02
      00048F 2C               [12] 1570 	add	a,r4
      000490 FC               [12] 1571 	mov	r4,a
      000491 E4               [12] 1572 	clr	a
      000492 3D               [12] 1573 	addc	a,r5
      000493 FD               [12] 1574 	mov	r5,a
                                   1575 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      000494 90r00r04         [24] 1576 	mov	dptr,#_drawCircle_f_65536_106
      000497 EC               [12] 1577 	mov	a,r4
      000498 25*24            [12] 1578 	add	a,_drawCircle_sloc1_1_0
      00049A F0               [24] 1579 	movx	@dptr,a
      00049B ED               [12] 1580 	mov	a,r5
      00049C 35*25            [12] 1581 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00049E A3               [24] 1582 	inc	dptr
      00049F F0               [24] 1583 	movx	@dptr,a
      0004A0                       1584 00102$:
                                   1585 ;	ecen4330_lcd_v3.c:282: x++;
      0004A0 C0 04            [24] 1586 	push	ar4
      0004A2 C0 05            [24] 1587 	push	ar5
      0004A4 08               [12] 1588 	inc	r0
      0004A5 B8 00 01         [24] 1589 	cjne	r0,#0x00,00124$
      0004A8 09               [12] 1590 	inc	r1
      0004A9                       1591 00124$:
                                   1592 ;	ecen4330_lcd_v3.c:283: ddF_x += 2;
      0004A9 74 02            [12] 1593 	mov	a,#0x02
      0004AB 25*22            [12] 1594 	add	a,_drawCircle_sloc0_1_0
      0004AD F5*22            [12] 1595 	mov	_drawCircle_sloc0_1_0,a
      0004AF E4               [12] 1596 	clr	a
      0004B0 35*23            [12] 1597 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004B2 F5*23            [12] 1598 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1599 ;	ecen4330_lcd_v3.c:284: f += ddF_x;
      0004B4 90r00r04         [24] 1600 	mov	dptr,#_drawCircle_f_65536_106
      0004B7 E0               [24] 1601 	movx	a,@dptr
      0004B8 FE               [12] 1602 	mov	r6,a
      0004B9 A3               [24] 1603 	inc	dptr
      0004BA E0               [24] 1604 	movx	a,@dptr
      0004BB FF               [12] 1605 	mov	r7,a
      0004BC 90r00r04         [24] 1606 	mov	dptr,#_drawCircle_f_65536_106
      0004BF E5*22            [12] 1607 	mov	a,_drawCircle_sloc0_1_0
      0004C1 2E               [12] 1608 	add	a,r6
      0004C2 F0               [24] 1609 	movx	@dptr,a
      0004C3 E5*23            [12] 1610 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004C5 3F               [12] 1611 	addc	a,r7
      0004C6 A3               [24] 1612 	inc	dptr
      0004C7 F0               [24] 1613 	movx	@dptr,a
                                   1614 ;	ecen4330_lcd_v3.c:286: drawPixel(x0 + x, y0 + y, color);
      0004C8 AE*20            [24] 1615 	mov	r6,_drawCircle_x0_65536_105
      0004CA AF*21            [24] 1616 	mov	r7,(_drawCircle_x0_65536_105 + 1)
      0004CC E8               [12] 1617 	mov	a,r0
      0004CD 2E               [12] 1618 	add	a,r6
      0004CE FC               [12] 1619 	mov	r4,a
      0004CF E9               [12] 1620 	mov	a,r1
      0004D0 3F               [12] 1621 	addc	a,r7
      0004D1 FD               [12] 1622 	mov	r5,a
      0004D2 8C*24            [24] 1623 	mov	_drawCircle_sloc1_1_0,r4
      0004D4 8D*25            [24] 1624 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004D6 85*1A*26         [24] 1625 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004D9 85*1B*27         [24] 1626 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      0004DC EA               [12] 1627 	mov	a,r2
      0004DD 25*26            [12] 1628 	add	a,_drawCircle_sloc2_1_0
      0004DF FC               [12] 1629 	mov	r4,a
      0004E0 EB               [12] 1630 	mov	a,r3
      0004E1 35*27            [12] 1631 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004E3 FD               [12] 1632 	mov	r5,a
      0004E4 8C*28            [24] 1633 	mov	_drawCircle_sloc3_1_0,r4
      0004E6 8D*29            [24] 1634 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004E8 85*28*16         [24] 1635 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004EB 85*29*17         [24] 1636 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EE 85*1E*18         [24] 1637 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004F1 85*1F*19         [24] 1638 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F4 85*24 82         [24] 1639 	mov	dpl,_drawCircle_sloc1_1_0
      0004F7 85*25 83         [24] 1640 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004FA C0 07            [24] 1641 	push	ar7
      0004FC C0 06            [24] 1642 	push	ar6
      0004FE C0 05            [24] 1643 	push	ar5
      000500 C0 04            [24] 1644 	push	ar4
      000502 C0 03            [24] 1645 	push	ar3
      000504 C0 02            [24] 1646 	push	ar2
      000506 C0 01            [24] 1647 	push	ar1
      000508 C0 00            [24] 1648 	push	ar0
      00050A 12r03r61         [24] 1649 	lcall	_drawPixel
      00050D D0 00            [24] 1650 	pop	ar0
      00050F D0 01            [24] 1651 	pop	ar1
      000511 D0 02            [24] 1652 	pop	ar2
      000513 D0 03            [24] 1653 	pop	ar3
      000515 D0 04            [24] 1654 	pop	ar4
      000517 D0 05            [24] 1655 	pop	ar5
      000519 D0 06            [24] 1656 	pop	ar6
      00051B D0 07            [24] 1657 	pop	ar7
                                   1658 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 - x, y0 + y, color);
      00051D EE               [12] 1659 	mov	a,r6
      00051E C3               [12] 1660 	clr	c
      00051F 98               [12] 1661 	subb	a,r0
      000520 FC               [12] 1662 	mov	r4,a
      000521 EF               [12] 1663 	mov	a,r7
      000522 99               [12] 1664 	subb	a,r1
      000523 FD               [12] 1665 	mov	r5,a
      000524 8C*2A            [24] 1666 	mov	_drawCircle_sloc4_1_0,r4
      000526 8D*2B            [24] 1667 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000528 85*28*16         [24] 1668 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      00052B 85*29*17         [24] 1669 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      00052E 85*1E*18         [24] 1670 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000531 85*1F*19         [24] 1671 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000534 85*2A 82         [24] 1672 	mov	dpl,_drawCircle_sloc4_1_0
      000537 85*2B 83         [24] 1673 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00053A C0 07            [24] 1674 	push	ar7
      00053C C0 06            [24] 1675 	push	ar6
      00053E C0 05            [24] 1676 	push	ar5
      000540 C0 04            [24] 1677 	push	ar4
      000542 C0 03            [24] 1678 	push	ar3
      000544 C0 02            [24] 1679 	push	ar2
      000546 C0 01            [24] 1680 	push	ar1
      000548 C0 00            [24] 1681 	push	ar0
      00054A 12r03r61         [24] 1682 	lcall	_drawPixel
      00054D D0 00            [24] 1683 	pop	ar0
      00054F D0 01            [24] 1684 	pop	ar1
      000551 D0 02            [24] 1685 	pop	ar2
      000553 D0 03            [24] 1686 	pop	ar3
      000555 D0 04            [24] 1687 	pop	ar4
      000557 D0 05            [24] 1688 	pop	ar5
                                   1689 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 + x, y0 - y, color);
      000559 E5*26            [12] 1690 	mov	a,_drawCircle_sloc2_1_0
      00055B C3               [12] 1691 	clr	c
      00055C 9A               [12] 1692 	subb	a,r2
      00055D FC               [12] 1693 	mov	r4,a
      00055E E5*27            [12] 1694 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000560 9B               [12] 1695 	subb	a,r3
      000561 FD               [12] 1696 	mov	r5,a
      000562 8C*16            [24] 1697 	mov	_drawPixel_PARM_2,r4
      000564 8D*17            [24] 1698 	mov	(_drawPixel_PARM_2 + 1),r5
      000566 85*1E*18         [24] 1699 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000569 85*1F*19         [24] 1700 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00056C 85*24 82         [24] 1701 	mov	dpl,_drawCircle_sloc1_1_0
      00056F 85*25 83         [24] 1702 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000572 C0 05            [24] 1703 	push	ar5
      000574 C0 04            [24] 1704 	push	ar4
      000576 C0 03            [24] 1705 	push	ar3
      000578 C0 02            [24] 1706 	push	ar2
      00057A C0 01            [24] 1707 	push	ar1
      00057C C0 00            [24] 1708 	push	ar0
      00057E 12r03r61         [24] 1709 	lcall	_drawPixel
      000581 D0 00            [24] 1710 	pop	ar0
      000583 D0 01            [24] 1711 	pop	ar1
      000585 D0 02            [24] 1712 	pop	ar2
      000587 D0 03            [24] 1713 	pop	ar3
      000589 D0 04            [24] 1714 	pop	ar4
      00058B D0 05            [24] 1715 	pop	ar5
                                   1716 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 - x, y0 - y, color);
      00058D 8C*16            [24] 1717 	mov	_drawPixel_PARM_2,r4
      00058F 8D*17            [24] 1718 	mov	(_drawPixel_PARM_2 + 1),r5
      000591 85*1E*18         [24] 1719 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000594 85*1F*19         [24] 1720 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000597 85*2A 82         [24] 1721 	mov	dpl,_drawCircle_sloc4_1_0
      00059A 85*2B 83         [24] 1722 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059D C0 05            [24] 1723 	push	ar5
      00059F C0 04            [24] 1724 	push	ar4
      0005A1 C0 03            [24] 1725 	push	ar3
      0005A3 C0 02            [24] 1726 	push	ar2
      0005A5 C0 01            [24] 1727 	push	ar1
      0005A7 C0 00            [24] 1728 	push	ar0
      0005A9 12r03r61         [24] 1729 	lcall	_drawPixel
      0005AC D0 00            [24] 1730 	pop	ar0
      0005AE D0 01            [24] 1731 	pop	ar1
      0005B0 D0 02            [24] 1732 	pop	ar2
      0005B2 D0 03            [24] 1733 	pop	ar3
      0005B4 D0 04            [24] 1734 	pop	ar4
      0005B6 D0 05            [24] 1735 	pop	ar5
      0005B8 D0 06            [24] 1736 	pop	ar6
      0005BA D0 07            [24] 1737 	pop	ar7
                                   1738 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 + y, y0 + x, color);
      0005BC EA               [12] 1739 	mov	a,r2
      0005BD 2E               [12] 1740 	add	a,r6
      0005BE FC               [12] 1741 	mov	r4,a
      0005BF EB               [12] 1742 	mov	a,r3
      0005C0 3F               [12] 1743 	addc	a,r7
      0005C1 FD               [12] 1744 	mov	r5,a
      0005C2 8C*2A            [24] 1745 	mov	_drawCircle_sloc4_1_0,r4
      0005C4 8D*2B            [24] 1746 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005C6 E8               [12] 1747 	mov	a,r0
      0005C7 25*26            [12] 1748 	add	a,_drawCircle_sloc2_1_0
      0005C9 FC               [12] 1749 	mov	r4,a
      0005CA E9               [12] 1750 	mov	a,r1
      0005CB 35*27            [12] 1751 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005CD FD               [12] 1752 	mov	r5,a
      0005CE 8C*16            [24] 1753 	mov	_drawPixel_PARM_2,r4
      0005D0 8D*17            [24] 1754 	mov	(_drawPixel_PARM_2 + 1),r5
      0005D2 85*1E*18         [24] 1755 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005D5 85*1F*19         [24] 1756 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005D8 85*2A 82         [24] 1757 	mov	dpl,_drawCircle_sloc4_1_0
      0005DB 85*2B 83         [24] 1758 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005DE C0 07            [24] 1759 	push	ar7
      0005E0 C0 06            [24] 1760 	push	ar6
      0005E2 C0 05            [24] 1761 	push	ar5
      0005E4 C0 04            [24] 1762 	push	ar4
      0005E6 C0 03            [24] 1763 	push	ar3
      0005E8 C0 02            [24] 1764 	push	ar2
      0005EA C0 01            [24] 1765 	push	ar1
      0005EC C0 00            [24] 1766 	push	ar0
      0005EE 12r03r61         [24] 1767 	lcall	_drawPixel
      0005F1 D0 00            [24] 1768 	pop	ar0
      0005F3 D0 01            [24] 1769 	pop	ar1
      0005F5 D0 02            [24] 1770 	pop	ar2
      0005F7 D0 03            [24] 1771 	pop	ar3
      0005F9 D0 04            [24] 1772 	pop	ar4
      0005FB D0 05            [24] 1773 	pop	ar5
      0005FD D0 06            [24] 1774 	pop	ar6
      0005FF D0 07            [24] 1775 	pop	ar7
                                   1776 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 - y, y0 + x, color);
      000601 EE               [12] 1777 	mov	a,r6
      000602 C3               [12] 1778 	clr	c
      000603 9A               [12] 1779 	subb	a,r2
      000604 FE               [12] 1780 	mov	r6,a
      000605 EF               [12] 1781 	mov	a,r7
      000606 9B               [12] 1782 	subb	a,r3
      000607 FF               [12] 1783 	mov	r7,a
      000608 8C*16            [24] 1784 	mov	_drawPixel_PARM_2,r4
      00060A 8D*17            [24] 1785 	mov	(_drawPixel_PARM_2 + 1),r5
      00060C 85*1E*18         [24] 1786 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00060F 85*1F*19         [24] 1787 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000612 8E 82            [24] 1788 	mov	dpl,r6
      000614 8F 83            [24] 1789 	mov	dph,r7
      000616 C0 07            [24] 1790 	push	ar7
      000618 C0 06            [24] 1791 	push	ar6
      00061A C0 05            [24] 1792 	push	ar5
      00061C C0 04            [24] 1793 	push	ar4
      00061E C0 03            [24] 1794 	push	ar3
      000620 C0 02            [24] 1795 	push	ar2
      000622 C0 01            [24] 1796 	push	ar1
      000624 C0 00            [24] 1797 	push	ar0
      000626 12r03r61         [24] 1798 	lcall	_drawPixel
      000629 D0 00            [24] 1799 	pop	ar0
      00062B D0 01            [24] 1800 	pop	ar1
      00062D D0 02            [24] 1801 	pop	ar2
      00062F D0 03            [24] 1802 	pop	ar3
      000631 D0 04            [24] 1803 	pop	ar4
      000633 D0 05            [24] 1804 	pop	ar5
                                   1805 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 + y, y0 - x, color);
      000635 E5*26            [12] 1806 	mov	a,_drawCircle_sloc2_1_0
      000637 C3               [12] 1807 	clr	c
      000638 98               [12] 1808 	subb	a,r0
      000639 FC               [12] 1809 	mov	r4,a
      00063A E5*27            [12] 1810 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00063C 99               [12] 1811 	subb	a,r1
      00063D FD               [12] 1812 	mov	r5,a
      00063E 8C*16            [24] 1813 	mov	_drawPixel_PARM_2,r4
      000640 8D*17            [24] 1814 	mov	(_drawPixel_PARM_2 + 1),r5
      000642 85*1E*18         [24] 1815 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000645 85*1F*19         [24] 1816 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000648 85*2A 82         [24] 1817 	mov	dpl,_drawCircle_sloc4_1_0
      00064B 85*2B 83         [24] 1818 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00064E C0 05            [24] 1819 	push	ar5
      000650 C0 04            [24] 1820 	push	ar4
      000652 C0 03            [24] 1821 	push	ar3
      000654 C0 02            [24] 1822 	push	ar2
      000656 C0 01            [24] 1823 	push	ar1
      000658 C0 00            [24] 1824 	push	ar0
      00065A 12r03r61         [24] 1825 	lcall	_drawPixel
      00065D D0 00            [24] 1826 	pop	ar0
      00065F D0 01            [24] 1827 	pop	ar1
      000661 D0 02            [24] 1828 	pop	ar2
      000663 D0 03            [24] 1829 	pop	ar3
      000665 D0 04            [24] 1830 	pop	ar4
      000667 D0 05            [24] 1831 	pop	ar5
      000669 D0 06            [24] 1832 	pop	ar6
      00066B D0 07            [24] 1833 	pop	ar7
                                   1834 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 - y, y0 - x, color);
      00066D 8C*16            [24] 1835 	mov	_drawPixel_PARM_2,r4
      00066F 8D*17            [24] 1836 	mov	(_drawPixel_PARM_2 + 1),r5
      000671 85*1E*18         [24] 1837 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000674 85*1F*19         [24] 1838 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000677 8E 82            [24] 1839 	mov	dpl,r6
      000679 8F 83            [24] 1840 	mov	dph,r7
      00067B C0 05            [24] 1841 	push	ar5
      00067D C0 04            [24] 1842 	push	ar4
      00067F C0 03            [24] 1843 	push	ar3
      000681 C0 02            [24] 1844 	push	ar2
      000683 C0 01            [24] 1845 	push	ar1
      000685 C0 00            [24] 1846 	push	ar0
      000687 12r03r61         [24] 1847 	lcall	_drawPixel
      00068A D0 00            [24] 1848 	pop	ar0
      00068C D0 01            [24] 1849 	pop	ar1
      00068E D0 02            [24] 1850 	pop	ar2
      000690 D0 03            [24] 1851 	pop	ar3
      000692 D0 04            [24] 1852 	pop	ar4
      000694 D0 05            [24] 1853 	pop	ar5
      000696 D0 05            [24] 1854 	pop	ar5
      000698 D0 04            [24] 1855 	pop	ar4
                                   1856 ;	ecen4330_lcd_v3.c:295: }
      00069A 02r04r6B         [24] 1857 	ljmp	00103$
                                   1858 ;------------------------------------------------------------
                                   1859 ;Allocation info for local variables in function 'testCircles'
                                   1860 ;------------------------------------------------------------
                                   1861 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1862 ;radius                    Allocated with name '_testCircles_radius_65536_109'
                                   1863 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1864 ;x                         Allocated with name '_testCircles_x_65536_110'
                                   1865 ;y                         Allocated with name '_testCircles_y_65536_110'
                                   1866 ;r2                        Allocated with name '_testCircles_r2_65536_110'
                                   1867 ;w                         Allocated with name '_testCircles_w_65536_110'
                                   1868 ;h                         Allocated with name '_testCircles_h_65536_110'
                                   1869 ;------------------------------------------------------------
                                   1870 ;	ecen4330_lcd_v3.c:303: void testCircles (uint8_t radius, uint16_t color) {
                                   1871 ;	-----------------------------------------
                                   1872 ;	 function testCircles
                                   1873 ;	-----------------------------------------
      00069D                       1874 _testCircles:
      00069D 85 82*2E         [24] 1875 	mov	_testCircles_radius_65536_109,dpl
                                   1876 ;	ecen4330_lcd_v3.c:304: __xdata int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006A0 AD*2E            [24] 1877 	mov	r5,_testCircles_radius_65536_109
      0006A2 7E 00            [12] 1878 	mov	r6,#0x00
      0006A4 ED               [12] 1879 	mov	a,r5
      0006A5 2D               [12] 1880 	add	a,r5
      0006A6 FB               [12] 1881 	mov	r3,a
      0006A7 EE               [12] 1882 	mov	a,r6
      0006A8 33               [12] 1883 	rlc	a
      0006A9 FC               [12] 1884 	mov	r4,a
      0006AA 90r00r00         [24] 1885 	mov	dptr,#__width
      0006AD E0               [24] 1886 	movx	a,@dptr
      0006AE F9               [12] 1887 	mov	r1,a
      0006AF A3               [24] 1888 	inc	dptr
      0006B0 E0               [24] 1889 	movx	a,@dptr
      0006B1 FA               [12] 1890 	mov	r2,a
      0006B2 ED               [12] 1891 	mov	a,r5
      0006B3 29               [12] 1892 	add	a,r1
      0006B4 F9               [12] 1893 	mov	r1,a
      0006B5 EE               [12] 1894 	mov	a,r6
      0006B6 3A               [12] 1895 	addc	a,r2
      0006B7 FA               [12] 1896 	mov	r2,a
      0006B8 90r00r02         [24] 1897 	mov	dptr,#__height
      0006BB E0               [24] 1898 	movx	a,@dptr
      0006BC FF               [12] 1899 	mov	r7,a
      0006BD A3               [24] 1900 	inc	dptr
      0006BE E0               [24] 1901 	movx	a,@dptr
      0006BF F8               [12] 1902 	mov	r0,a
      0006C0 ED               [12] 1903 	mov	a,r5
      0006C1 2F               [12] 1904 	add	a,r7
      0006C2 FF               [12] 1905 	mov	r7,a
      0006C3 EE               [12] 1906 	mov	a,r6
      0006C4 38               [12] 1907 	addc	a,r0
      0006C5 FE               [12] 1908 	mov	r6,a
                                   1909 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      0006C6 90r00r06         [24] 1910 	mov	dptr,#_testCircles_x_65536_110
      0006C9 E4               [12] 1911 	clr	a
      0006CA F0               [24] 1912 	movx	@dptr,a
      0006CB A3               [24] 1913 	inc	dptr
      0006CC F0               [24] 1914 	movx	@dptr,a
      0006CD                       1915 00107$:
      0006CD 90r00r06         [24] 1916 	mov	dptr,#_testCircles_x_65536_110
      0006D0 E0               [24] 1917 	movx	a,@dptr
      0006D1 F8               [12] 1918 	mov	r0,a
      0006D2 A3               [24] 1919 	inc	dptr
      0006D3 E0               [24] 1920 	movx	a,@dptr
      0006D4 FD               [12] 1921 	mov	r5,a
      0006D5 C3               [12] 1922 	clr	c
      0006D6 E8               [12] 1923 	mov	a,r0
      0006D7 99               [12] 1924 	subb	a,r1
      0006D8 ED               [12] 1925 	mov	a,r5
      0006D9 64 80            [12] 1926 	xrl	a,#0x80
      0006DB 8A F0            [24] 1927 	mov	b,r2
      0006DD 63 F0 80         [24] 1928 	xrl	b,#0x80
      0006E0 95 F0            [12] 1929 	subb	a,b
      0006E2 40 01            [24] 1930 	jc	00127$
      0006E4 22               [24] 1931 	ret
      0006E5                       1932 00127$:
                                   1933 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      0006E5 90r00r08         [24] 1934 	mov	dptr,#_testCircles_y_65536_110
      0006E8 E4               [12] 1935 	clr	a
      0006E9 F0               [24] 1936 	movx	@dptr,a
      0006EA A3               [24] 1937 	inc	dptr
      0006EB F0               [24] 1938 	movx	@dptr,a
      0006EC                       1939 00104$:
      0006EC 90r00r08         [24] 1940 	mov	dptr,#_testCircles_y_65536_110
      0006EF E0               [24] 1941 	movx	a,@dptr
      0006F0 F5*2F            [12] 1942 	mov	_testCircles_sloc0_1_0,a
      0006F2 A3               [24] 1943 	inc	dptr
      0006F3 E0               [24] 1944 	movx	a,@dptr
      0006F4 F5*30            [12] 1945 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006F6 C3               [12] 1946 	clr	c
      0006F7 E5*2F            [12] 1947 	mov	a,_testCircles_sloc0_1_0
      0006F9 9F               [12] 1948 	subb	a,r7
      0006FA E5*30            [12] 1949 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006FC 64 80            [12] 1950 	xrl	a,#0x80
      0006FE 8E F0            [24] 1951 	mov	b,r6
      000700 63 F0 80         [24] 1952 	xrl	b,#0x80
      000703 95 F0            [12] 1953 	subb	a,b
      000705 50 47            [24] 1954 	jnc	00108$
                                   1955 ;	ecen4330_lcd_v3.c:308: drawCircle(x, y, radius, color);
      000707 88 82            [24] 1956 	mov	dpl,r0
      000709 8D 83            [24] 1957 	mov	dph,r5
      00070B 85*2F*1A         [24] 1958 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      00070E 85*30*1B         [24] 1959 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000711 85*2E*1C         [24] 1960 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_109
      000714 75*1D 00         [24] 1961 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000717 85*2C*1E         [24] 1962 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00071A 85*2D*1F         [24] 1963 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      00071D C0 07            [24] 1964 	push	ar7
      00071F C0 06            [24] 1965 	push	ar6
      000721 C0 05            [24] 1966 	push	ar5
      000723 C0 04            [24] 1967 	push	ar4
      000725 C0 03            [24] 1968 	push	ar3
      000727 C0 02            [24] 1969 	push	ar2
      000729 C0 01            [24] 1970 	push	ar1
      00072B C0 00            [24] 1971 	push	ar0
      00072D 12r03rB8         [24] 1972 	lcall	_drawCircle
      000730 D0 00            [24] 1973 	pop	ar0
      000732 D0 01            [24] 1974 	pop	ar1
      000734 D0 02            [24] 1975 	pop	ar2
      000736 D0 03            [24] 1976 	pop	ar3
      000738 D0 04            [24] 1977 	pop	ar4
      00073A D0 05            [24] 1978 	pop	ar5
      00073C D0 06            [24] 1979 	pop	ar6
      00073E D0 07            [24] 1980 	pop	ar7
                                   1981 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      000740 90r00r08         [24] 1982 	mov	dptr,#_testCircles_y_65536_110
      000743 EB               [12] 1983 	mov	a,r3
      000744 25*2F            [12] 1984 	add	a,_testCircles_sloc0_1_0
      000746 F0               [24] 1985 	movx	@dptr,a
      000747 EC               [12] 1986 	mov	a,r4
      000748 35*30            [12] 1987 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00074A A3               [24] 1988 	inc	dptr
      00074B F0               [24] 1989 	movx	@dptr,a
      00074C 80 9E            [24] 1990 	sjmp	00104$
      00074E                       1991 00108$:
                                   1992 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      00074E 90r00r06         [24] 1993 	mov	dptr,#_testCircles_x_65536_110
      000751 E0               [24] 1994 	movx	a,@dptr
      000752 F8               [12] 1995 	mov	r0,a
      000753 A3               [24] 1996 	inc	dptr
      000754 E0               [24] 1997 	movx	a,@dptr
      000755 FD               [12] 1998 	mov	r5,a
      000756 90r00r06         [24] 1999 	mov	dptr,#_testCircles_x_65536_110
      000759 EB               [12] 2000 	mov	a,r3
      00075A 28               [12] 2001 	add	a,r0
      00075B F0               [24] 2002 	movx	@dptr,a
      00075C EC               [12] 2003 	mov	a,r4
      00075D 3D               [12] 2004 	addc	a,r5
      00075E A3               [24] 2005 	inc	dptr
      00075F F0               [24] 2006 	movx	@dptr,a
                                   2007 ;	ecen4330_lcd_v3.c:311: }
      000760 02r06rCD         [24] 2008 	ljmp	00107$
                                   2009 ;------------------------------------------------------------
                                   2010 ;Allocation info for local variables in function 'fillRect'
                                   2011 ;------------------------------------------------------------
                                   2012 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2013 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2014 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2015 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2016 ;x                         Allocated to registers 
                                   2017 ;------------------------------------------------------------
                                   2018 ;	ecen4330_lcd_v3.c:313: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2019 ;	-----------------------------------------
                                   2020 ;	 function fillRect
                                   2021 ;	-----------------------------------------
      000763                       2022 _fillRect:
      000763 AE 82            [24] 2023 	mov	r6,dpl
      000765 AF 83            [24] 2024 	mov	r7,dph
                                   2025 ;	ecen4330_lcd_v3.c:314: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000767 8E 04            [24] 2026 	mov	ar4,r6
      000769 8F 05            [24] 2027 	mov	ar5,r7
      00076B C3               [12] 2028 	clr	c
      00076C EC               [12] 2029 	mov	a,r4
      00076D 94 F0            [12] 2030 	subb	a,#0xf0
      00076F ED               [12] 2031 	mov	a,r5
      000770 94 00            [12] 2032 	subb	a,#0x00
      000772 50 0D            [24] 2033 	jnc	00101$
      000774 AC*31            [24] 2034 	mov	r4,_fillRect_PARM_2
      000776 AD*32            [24] 2035 	mov	r5,(_fillRect_PARM_2 + 1)
      000778 C3               [12] 2036 	clr	c
      000779 EC               [12] 2037 	mov	a,r4
      00077A 94 40            [12] 2038 	subb	a,#0x40
      00077C ED               [12] 2039 	mov	a,r5
      00077D 94 01            [12] 2040 	subb	a,#0x01
      00077F 40 01            [24] 2041 	jc	00102$
      000781                       2042 00101$:
                                   2043 ;	ecen4330_lcd_v3.c:316: return;
      000781 22               [24] 2044 	ret
      000782                       2045 00102$:
                                   2046 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH)
      000782 E5*33            [12] 2047 	mov	a,_fillRect_PARM_3
      000784 2E               [12] 2048 	add	a,r6
      000785 FC               [12] 2049 	mov	r4,a
      000786 E5*34            [12] 2050 	mov	a,(_fillRect_PARM_3 + 1)
      000788 3F               [12] 2051 	addc	a,r7
      000789 FD               [12] 2052 	mov	r5,a
      00078A 1C               [12] 2053 	dec	r4
      00078B BC FF 01         [24] 2054 	cjne	r4,#0xff,00161$
      00078E 1D               [12] 2055 	dec	r5
      00078F                       2056 00161$:
      00078F C3               [12] 2057 	clr	c
      000790 EC               [12] 2058 	mov	a,r4
      000791 94 F0            [12] 2059 	subb	a,#0xf0
      000793 ED               [12] 2060 	mov	a,r5
      000794 94 00            [12] 2061 	subb	a,#0x00
      000796 40 0A            [24] 2062 	jc	00105$
                                   2063 ;	ecen4330_lcd_v3.c:321: w = TFTWIDTH-x;
      000798 74 F0            [12] 2064 	mov	a,#0xf0
      00079A C3               [12] 2065 	clr	c
      00079B 9E               [12] 2066 	subb	a,r6
      00079C F5*33            [12] 2067 	mov	_fillRect_PARM_3,a
      00079E E4               [12] 2068 	clr	a
      00079F 9F               [12] 2069 	subb	a,r7
      0007A0 F5*34            [12] 2070 	mov	(_fillRect_PARM_3 + 1),a
      0007A2                       2071 00105$:
                                   2072 ;	ecen4330_lcd_v3.c:324: if ((y+h-1) >= TFTHEIGHT)
      0007A2 E5*35            [12] 2073 	mov	a,_fillRect_PARM_4
      0007A4 25*31            [12] 2074 	add	a,_fillRect_PARM_2
      0007A6 FC               [12] 2075 	mov	r4,a
      0007A7 E5*36            [12] 2076 	mov	a,(_fillRect_PARM_4 + 1)
      0007A9 35*32            [12] 2077 	addc	a,(_fillRect_PARM_2 + 1)
      0007AB FD               [12] 2078 	mov	r5,a
      0007AC 1C               [12] 2079 	dec	r4
      0007AD BC FF 01         [24] 2080 	cjne	r4,#0xff,00163$
      0007B0 1D               [12] 2081 	dec	r5
      0007B1                       2082 00163$:
      0007B1 C3               [12] 2083 	clr	c
      0007B2 EC               [12] 2084 	mov	a,r4
      0007B3 94 40            [12] 2085 	subb	a,#0x40
      0007B5 ED               [12] 2086 	mov	a,r5
      0007B6 94 01            [12] 2087 	subb	a,#0x01
      0007B8 40 0D            [24] 2088 	jc	00107$
                                   2089 ;	ecen4330_lcd_v3.c:326: h = TFTHEIGHT-y;
      0007BA 74 40            [12] 2090 	mov	a,#0x40
      0007BC C3               [12] 2091 	clr	c
      0007BD 95*31            [12] 2092 	subb	a,_fillRect_PARM_2
      0007BF F5*35            [12] 2093 	mov	_fillRect_PARM_4,a
      0007C1 74 01            [12] 2094 	mov	a,#0x01
      0007C3 95*32            [12] 2095 	subb	a,(_fillRect_PARM_2 + 1)
      0007C5 F5*36            [12] 2096 	mov	(_fillRect_PARM_4 + 1),a
      0007C7                       2097 00107$:
                                   2098 ;	ecen4330_lcd_v3.c:329: setAddress(x, y, x+w-1, y+h-1);
      0007C7 E5*33            [12] 2099 	mov	a,_fillRect_PARM_3
      0007C9 2E               [12] 2100 	add	a,r6
      0007CA FC               [12] 2101 	mov	r4,a
      0007CB E5*34            [12] 2102 	mov	a,(_fillRect_PARM_3 + 1)
      0007CD 3F               [12] 2103 	addc	a,r7
      0007CE FD               [12] 2104 	mov	r5,a
      0007CF 1C               [12] 2105 	dec	r4
      0007D0 BC FF 01         [24] 2106 	cjne	r4,#0xff,00165$
      0007D3 1D               [12] 2107 	dec	r5
      0007D4                       2108 00165$:
      0007D4 8C*02            [24] 2109 	mov	_setAddress_PARM_3,r4
      0007D6 8D*03            [24] 2110 	mov	(_setAddress_PARM_3 + 1),r5
      0007D8 E5*35            [12] 2111 	mov	a,_fillRect_PARM_4
      0007DA 25*31            [12] 2112 	add	a,_fillRect_PARM_2
      0007DC FC               [12] 2113 	mov	r4,a
      0007DD E5*36            [12] 2114 	mov	a,(_fillRect_PARM_4 + 1)
      0007DF 35*32            [12] 2115 	addc	a,(_fillRect_PARM_2 + 1)
      0007E1 FD               [12] 2116 	mov	r5,a
      0007E2 1C               [12] 2117 	dec	r4
      0007E3 BC FF 01         [24] 2118 	cjne	r4,#0xff,00166$
      0007E6 1D               [12] 2119 	dec	r5
      0007E7                       2120 00166$:
      0007E7 8C*04            [24] 2121 	mov	_setAddress_PARM_4,r4
      0007E9 8D*05            [24] 2122 	mov	(_setAddress_PARM_4 + 1),r5
      0007EB 85*31*00         [24] 2123 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007EE 85*32*01         [24] 2124 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007F1 8E 82            [24] 2125 	mov	dpl,r6
      0007F3 8F 83            [24] 2126 	mov	dph,r7
      0007F5 12r01r76         [24] 2127 	lcall	_setAddress
                                   2128 ;	ecen4330_lcd_v3.c:332: write8Reg(0x2C);
                                   2129 ;	assignBit
      0007F8 C2 B5            [12] 2130 	clr	_P3_5
                                   2131 ;	assignBit
      0007FA D2 B4            [12] 2132 	setb	_P3_4
      0007FC 85*02 82         [24] 2133 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2134 	mov	dph,(_lcd_address + 1)
      000802 74 2C            [12] 2135 	mov	a,#0x2c
      000804 F0               [24] 2136 	movx	@dptr,a
                                   2137 ;	assignBit
      000805 C2 B4            [12] 2138 	clr	_P3_4
                                   2139 ;	ecen4330_lcd_v3.c:333: CD = 1;
                                   2140 ;	assignBit
      000807 D2 B5            [12] 2141 	setb	_P3_5
                                   2142 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      000809 AF*38            [24] 2143 	mov	r7,(_fillRect_PARM_5 + 1)
      00080B AD*35            [24] 2144 	mov	r5,_fillRect_PARM_4
      00080D AE*36            [24] 2145 	mov	r6,(_fillRect_PARM_4 + 1)
      00080F                       2146 00114$:
      00080F ED               [12] 2147 	mov	a,r5
      000810 4E               [12] 2148 	orl	a,r6
      000811 60 30            [24] 2149 	jz	00116$
                                   2150 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000813 AB*33            [24] 2151 	mov	r3,_fillRect_PARM_3
      000815 AC*34            [24] 2152 	mov	r4,(_fillRect_PARM_3 + 1)
      000817                       2153 00111$:
      000817 EB               [12] 2154 	mov	a,r3
      000818 4C               [12] 2155 	orl	a,r4
      000819 60 21            [24] 2156 	jz	00115$
                                   2157 ;	ecen4330_lcd_v3.c:339: write8(color>>8); write8(color);
                                   2158 ;	assignBit
      00081B D2 B4            [12] 2159 	setb	_P3_4
      00081D 85*02 82         [24] 2160 	mov	dpl,_lcd_address
      000820 85*03 83         [24] 2161 	mov	dph,(_lcd_address + 1)
      000823 EF               [12] 2162 	mov	a,r7
      000824 F0               [24] 2163 	movx	@dptr,a
                                   2164 ;	assignBit
      000825 C2 B4            [12] 2165 	clr	_P3_4
                                   2166 ;	assignBit
      000827 D2 B4            [12] 2167 	setb	_P3_4
      000829 85*02 82         [24] 2168 	mov	dpl,_lcd_address
      00082C 85*03 83         [24] 2169 	mov	dph,(_lcd_address + 1)
      00082F E5*37            [12] 2170 	mov	a,_fillRect_PARM_5
      000831 FA               [12] 2171 	mov	r2,a
      000832 F0               [24] 2172 	movx	@dptr,a
                                   2173 ;	assignBit
      000833 C2 B4            [12] 2174 	clr	_P3_4
                                   2175 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000835 1B               [12] 2176 	dec	r3
      000836 BB FF 01         [24] 2177 	cjne	r3,#0xff,00169$
      000839 1C               [12] 2178 	dec	r4
      00083A                       2179 00169$:
      00083A 80 DB            [24] 2180 	sjmp	00111$
      00083C                       2181 00115$:
                                   2182 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      00083C 1D               [12] 2183 	dec	r5
      00083D BD FF 01         [24] 2184 	cjne	r5,#0xff,00170$
      000840 1E               [12] 2185 	dec	r6
      000841                       2186 00170$:
      000841 80 CC            [24] 2187 	sjmp	00114$
      000843                       2188 00116$:
                                   2189 ;	ecen4330_lcd_v3.c:343: }
      000843 22               [24] 2190 	ret
                                   2191 ;------------------------------------------------------------
                                   2192 ;Allocation info for local variables in function 'fillScreen'
                                   2193 ;------------------------------------------------------------
                                   2194 ;Color                     Allocated to registers r6 r7 
                                   2195 ;len                       Allocated with name '_fillScreen_len_65536_129'
                                   2196 ;blocks                    Allocated with name '_fillScreen_blocks_65536_129'
                                   2197 ;i                         Allocated with name '_fillScreen_i_65536_129'
                                   2198 ;hi                        Allocated with name '_fillScreen_hi_65536_129'
                                   2199 ;lo                        Allocated with name '_fillScreen_lo_65536_129'
                                   2200 ;------------------------------------------------------------
                                   2201 ;	ecen4330_lcd_v3.c:350: void fillScreen (uint16_t Color) {
                                   2202 ;	-----------------------------------------
                                   2203 ;	 function fillScreen
                                   2204 ;	-----------------------------------------
      000844                       2205 _fillScreen:
      000844 AE 82            [24] 2206 	mov	r6,dpl
      000846 AF 83            [24] 2207 	mov	r7,dph
                                   2208 ;	ecen4330_lcd_v3.c:355: __xdata uint8_t  i, hi = Color >> 8,
      000848 8F 05            [24] 2209 	mov	ar5,r7
                                   2210 ;	ecen4330_lcd_v3.c:356: lo = Color;
                                   2211 ;	ecen4330_lcd_v3.c:359: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      00084A E4               [12] 2212 	clr	a
      00084B F5*00            [12] 2213 	mov	_setAddress_PARM_2,a
      00084D F5*01            [12] 2214 	mov	(_setAddress_PARM_2 + 1),a
      00084F 75*02 EF         [24] 2215 	mov	_setAddress_PARM_3,#0xef
                                   2216 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000852 F5*03            [12] 2217 	mov	(_setAddress_PARM_3 + 1),a
      000854 75*04 3F         [24] 2218 	mov	_setAddress_PARM_4,#0x3f
      000857 75*05 01         [24] 2219 	mov	(_setAddress_PARM_4 + 1),#0x01
      00085A 90 00 00         [24] 2220 	mov	dptr,#0x0000
      00085D C0 06            [24] 2221 	push	ar6
      00085F C0 05            [24] 2222 	push	ar5
      000861 12r01r76         [24] 2223 	lcall	_setAddress
      000864 D0 05            [24] 2224 	pop	ar5
      000866 D0 06            [24] 2225 	pop	ar6
                                   2226 ;	ecen4330_lcd_v3.c:361: write8Reg(0x2C);
                                   2227 ;	assignBit
      000868 C2 B5            [12] 2228 	clr	_P3_5
                                   2229 ;	assignBit
      00086A D2 B4            [12] 2230 	setb	_P3_4
      00086C 85*02 82         [24] 2231 	mov	dpl,_lcd_address
      00086F 85*03 83         [24] 2232 	mov	dph,(_lcd_address + 1)
      000872 74 2C            [12] 2233 	mov	a,#0x2c
      000874 F0               [24] 2234 	movx	@dptr,a
                                   2235 ;	assignBit
      000875 C2 B4            [12] 2236 	clr	_P3_4
                                   2237 ;	ecen4330_lcd_v3.c:362: CD = 1;
                                   2238 ;	assignBit
      000877 D2 B5            [12] 2239 	setb	_P3_5
                                   2240 ;	ecen4330_lcd_v3.c:363: write8(hi); write8(lo);
                                   2241 ;	assignBit
      000879 D2 B4            [12] 2242 	setb	_P3_4
      00087B 85*02 82         [24] 2243 	mov	dpl,_lcd_address
      00087E 85*03 83         [24] 2244 	mov	dph,(_lcd_address + 1)
      000881 ED               [12] 2245 	mov	a,r5
      000882 F0               [24] 2246 	movx	@dptr,a
                                   2247 ;	assignBit
      000883 C2 B4            [12] 2248 	clr	_P3_4
                                   2249 ;	assignBit
      000885 D2 B4            [12] 2250 	setb	_P3_4
      000887 85*02 82         [24] 2251 	mov	dpl,_lcd_address
      00088A 85*03 83         [24] 2252 	mov	dph,(_lcd_address + 1)
      00088D EE               [12] 2253 	mov	a,r6
      00088E F0               [24] 2254 	movx	@dptr,a
                                   2255 ;	assignBit
      00088F C2 B4            [12] 2256 	clr	_P3_4
                                   2257 ;	ecen4330_lcd_v3.c:366: while (blocks--) {
      000891 7C B0            [12] 2258 	mov	r4,#0xb0
      000893 7F 04            [12] 2259 	mov	r7,#0x04
      000895                       2260 00104$:
      000895 8C 02            [24] 2261 	mov	ar2,r4
      000897 8F 03            [24] 2262 	mov	ar3,r7
      000899 1C               [12] 2263 	dec	r4
      00089A BC FF 01         [24] 2264 	cjne	r4,#0xff,00140$
      00089D 1F               [12] 2265 	dec	r7
      00089E                       2266 00140$:
      00089E EA               [12] 2267 	mov	a,r2
      00089F 4B               [12] 2268 	orl	a,r3
      0008A0 60 66            [24] 2269 	jz	00106$
                                   2270 ;	ecen4330_lcd_v3.c:368: do {
      0008A2 7B 10            [12] 2271 	mov	r3,#0x10
      0008A4                       2272 00101$:
                                   2273 ;	ecen4330_lcd_v3.c:370: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2274 ;	assignBit
      0008A4 D2 B4            [12] 2275 	setb	_P3_4
      0008A6 85*02 82         [24] 2276 	mov	dpl,_lcd_address
      0008A9 85*03 83         [24] 2277 	mov	dph,(_lcd_address + 1)
      0008AC ED               [12] 2278 	mov	a,r5
      0008AD F0               [24] 2279 	movx	@dptr,a
                                   2280 ;	assignBit
      0008AE C2 B4            [12] 2281 	clr	_P3_4
                                   2282 ;	assignBit
      0008B0 D2 B4            [12] 2283 	setb	_P3_4
      0008B2 85*02 82         [24] 2284 	mov	dpl,_lcd_address
      0008B5 85*03 83         [24] 2285 	mov	dph,(_lcd_address + 1)
      0008B8 EE               [12] 2286 	mov	a,r6
      0008B9 F0               [24] 2287 	movx	@dptr,a
                                   2288 ;	assignBit
      0008BA C2 B4            [12] 2289 	clr	_P3_4
                                   2290 ;	assignBit
      0008BC D2 B4            [12] 2291 	setb	_P3_4
      0008BE 85*02 82         [24] 2292 	mov	dpl,_lcd_address
      0008C1 85*03 83         [24] 2293 	mov	dph,(_lcd_address + 1)
      0008C4 ED               [12] 2294 	mov	a,r5
      0008C5 F0               [24] 2295 	movx	@dptr,a
                                   2296 ;	assignBit
      0008C6 C2 B4            [12] 2297 	clr	_P3_4
                                   2298 ;	assignBit
      0008C8 D2 B4            [12] 2299 	setb	_P3_4
      0008CA 85*02 82         [24] 2300 	mov	dpl,_lcd_address
      0008CD 85*03 83         [24] 2301 	mov	dph,(_lcd_address + 1)
      0008D0 EE               [12] 2302 	mov	a,r6
      0008D1 F0               [24] 2303 	movx	@dptr,a
                                   2304 ;	assignBit
      0008D2 C2 B4            [12] 2305 	clr	_P3_4
                                   2306 ;	ecen4330_lcd_v3.c:371: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2307 ;	assignBit
      0008D4 D2 B4            [12] 2308 	setb	_P3_4
      0008D6 85*02 82         [24] 2309 	mov	dpl,_lcd_address
      0008D9 85*03 83         [24] 2310 	mov	dph,(_lcd_address + 1)
      0008DC ED               [12] 2311 	mov	a,r5
      0008DD F0               [24] 2312 	movx	@dptr,a
                                   2313 ;	assignBit
      0008DE C2 B4            [12] 2314 	clr	_P3_4
                                   2315 ;	assignBit
      0008E0 D2 B4            [12] 2316 	setb	_P3_4
      0008E2 85*02 82         [24] 2317 	mov	dpl,_lcd_address
      0008E5 85*03 83         [24] 2318 	mov	dph,(_lcd_address + 1)
      0008E8 EE               [12] 2319 	mov	a,r6
      0008E9 F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	assignBit
      0008EA C2 B4            [12] 2322 	clr	_P3_4
                                   2323 ;	assignBit
      0008EC D2 B4            [12] 2324 	setb	_P3_4
      0008EE 85*02 82         [24] 2325 	mov	dpl,_lcd_address
      0008F1 85*03 83         [24] 2326 	mov	dph,(_lcd_address + 1)
      0008F4 ED               [12] 2327 	mov	a,r5
      0008F5 F0               [24] 2328 	movx	@dptr,a
                                   2329 ;	assignBit
      0008F6 C2 B4            [12] 2330 	clr	_P3_4
                                   2331 ;	assignBit
      0008F8 D2 B4            [12] 2332 	setb	_P3_4
      0008FA 85*02 82         [24] 2333 	mov	dpl,_lcd_address
      0008FD 85*03 83         [24] 2334 	mov	dph,(_lcd_address + 1)
      000900 EE               [12] 2335 	mov	a,r6
      000901 F0               [24] 2336 	movx	@dptr,a
                                   2337 ;	assignBit
      000902 C2 B4            [12] 2338 	clr	_P3_4
                                   2339 ;	ecen4330_lcd_v3.c:372: } while(--i);
      000904 DB 9E            [24] 2340 	djnz	r3,00101$
      000906 80 8D            [24] 2341 	sjmp	00104$
      000908                       2342 00106$:
                                   2343 ;	ecen4330_lcd_v3.c:374: for (i = (char)len & 63; i--; ) {
      000908 7F 3F            [12] 2344 	mov	r7,#0x3f
      00090A                       2345 00109$:
      00090A 8F 04            [24] 2346 	mov	ar4,r7
      00090C 1F               [12] 2347 	dec	r7
      00090D EC               [12] 2348 	mov	a,r4
      00090E 60 1A            [24] 2349 	jz	00111$
                                   2350 ;	ecen4330_lcd_v3.c:376: write8(hi); write8(lo);
                                   2351 ;	assignBit
      000910 D2 B4            [12] 2352 	setb	_P3_4
      000912 85*02 82         [24] 2353 	mov	dpl,_lcd_address
      000915 85*03 83         [24] 2354 	mov	dph,(_lcd_address + 1)
      000918 ED               [12] 2355 	mov	a,r5
      000919 F0               [24] 2356 	movx	@dptr,a
                                   2357 ;	assignBit
      00091A C2 B4            [12] 2358 	clr	_P3_4
                                   2359 ;	assignBit
      00091C D2 B4            [12] 2360 	setb	_P3_4
      00091E 85*02 82         [24] 2361 	mov	dpl,_lcd_address
      000921 85*03 83         [24] 2362 	mov	dph,(_lcd_address + 1)
      000924 EE               [12] 2363 	mov	a,r6
      000925 F0               [24] 2364 	movx	@dptr,a
                                   2365 ;	assignBit
      000926 C2 B4            [12] 2366 	clr	_P3_4
      000928 80 E0            [24] 2367 	sjmp	00109$
      00092A                       2368 00111$:
                                   2369 ;	ecen4330_lcd_v3.c:379: }
      00092A 22               [24] 2370 	ret
                                   2371 ;------------------------------------------------------------
                                   2372 ;Allocation info for local variables in function 'drawChar'
                                   2373 ;------------------------------------------------------------
                                   2374 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2375 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2376 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2377 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2378 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2379 ;x                         Allocated to registers r6 r7 
                                   2380 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2381 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2382 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2383 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2384 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2385 ;i                         Allocated with name '_drawChar_i_65537_151'
                                   2386 ;line                      Allocated with name '_drawChar_line_196609_153'
                                   2387 ;j                         Allocated with name '_drawChar_j_196610_156'
                                   2388 ;------------------------------------------------------------
                                   2389 ;	ecen4330_lcd_v3.c:390: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2390 ;	-----------------------------------------
                                   2391 ;	 function drawChar
                                   2392 ;	-----------------------------------------
      00092B                       2393 _drawChar:
      00092B AE 82            [24] 2394 	mov	r6,dpl
      00092D AF 83            [24] 2395 	mov	r7,dph
                                   2396 ;	ecen4330_lcd_v3.c:391: if ((x >=TFTWIDTH) ||
      00092F C3               [12] 2397 	clr	c
      000930 EE               [12] 2398 	mov	a,r6
      000931 94 F0            [12] 2399 	subb	a,#0xf0
      000933 EF               [12] 2400 	mov	a,r7
      000934 64 80            [12] 2401 	xrl	a,#0x80
      000936 94 80            [12] 2402 	subb	a,#0x80
      000938 50 67            [24] 2403 	jnc	00101$
                                   2404 ;	ecen4330_lcd_v3.c:392: (y >=TFTHEIGHT)           ||
      00093A AC*39            [24] 2405 	mov	r4,_drawChar_PARM_2
      00093C AD*3A            [24] 2406 	mov	r5,(_drawChar_PARM_2 + 1)
      00093E C3               [12] 2407 	clr	c
      00093F EC               [12] 2408 	mov	a,r4
      000940 94 40            [12] 2409 	subb	a,#0x40
      000942 ED               [12] 2410 	mov	a,r5
      000943 64 80            [12] 2411 	xrl	a,#0x80
      000945 94 81            [12] 2412 	subb	a,#0x81
      000947 50 58            [24] 2413 	jnc	00101$
                                   2414 ;	ecen4330_lcd_v3.c:393: ((x + 6 * size - 1) < 0) ||
      000949 AA*40            [24] 2415 	mov	r2,_drawChar_PARM_6
      00094B 7B 00            [12] 2416 	mov	r3,#0x00
      00094D 8A*00            [24] 2417 	mov	__mulint_PARM_2,r2
      00094F 8B*01            [24] 2418 	mov	(__mulint_PARM_2 + 1),r3
      000951 90 00 06         [24] 2419 	mov	dptr,#0x0006
      000954 C0 07            [24] 2420 	push	ar7
      000956 C0 06            [24] 2421 	push	ar6
      000958 C0 05            [24] 2422 	push	ar5
      00095A C0 04            [24] 2423 	push	ar4
      00095C C0 03            [24] 2424 	push	ar3
      00095E C0 02            [24] 2425 	push	ar2
      000960 12r00r00         [24] 2426 	lcall	__mulint
      000963 A8 82            [24] 2427 	mov	r0,dpl
      000965 A9 83            [24] 2428 	mov	r1,dph
      000967 D0 02            [24] 2429 	pop	ar2
      000969 D0 03            [24] 2430 	pop	ar3
      00096B D0 04            [24] 2431 	pop	ar4
      00096D D0 05            [24] 2432 	pop	ar5
      00096F D0 06            [24] 2433 	pop	ar6
      000971 D0 07            [24] 2434 	pop	ar7
      000973 E8               [12] 2435 	mov	a,r0
      000974 2E               [12] 2436 	add	a,r6
      000975 F8               [12] 2437 	mov	r0,a
      000976 E9               [12] 2438 	mov	a,r1
      000977 3F               [12] 2439 	addc	a,r7
      000978 F9               [12] 2440 	mov	r1,a
      000979 18               [12] 2441 	dec	r0
      00097A B8 FF 01         [24] 2442 	cjne	r0,#0xff,00176$
      00097D 19               [12] 2443 	dec	r1
      00097E                       2444 00176$:
      00097E E9               [12] 2445 	mov	a,r1
      00097F 20 E7 1F         [24] 2446 	jb	acc.7,00101$
                                   2447 ;	ecen4330_lcd_v3.c:394: ((y + 8 * size - 1) < 0))
      000982 EB               [12] 2448 	mov	a,r3
      000983 C4               [12] 2449 	swap	a
      000984 03               [12] 2450 	rr	a
      000985 54 F8            [12] 2451 	anl	a,#0xf8
      000987 CA               [12] 2452 	xch	a,r2
      000988 C4               [12] 2453 	swap	a
      000989 03               [12] 2454 	rr	a
      00098A CA               [12] 2455 	xch	a,r2
      00098B 6A               [12] 2456 	xrl	a,r2
      00098C CA               [12] 2457 	xch	a,r2
      00098D 54 F8            [12] 2458 	anl	a,#0xf8
      00098F CA               [12] 2459 	xch	a,r2
      000990 6A               [12] 2460 	xrl	a,r2
      000991 FB               [12] 2461 	mov	r3,a
      000992 EA               [12] 2462 	mov	a,r2
      000993 2C               [12] 2463 	add	a,r4
      000994 FA               [12] 2464 	mov	r2,a
      000995 EB               [12] 2465 	mov	a,r3
      000996 3D               [12] 2466 	addc	a,r5
      000997 FB               [12] 2467 	mov	r3,a
      000998 1A               [12] 2468 	dec	r2
      000999 BA FF 01         [24] 2469 	cjne	r2,#0xff,00178$
      00099C 1B               [12] 2470 	dec	r3
      00099D                       2471 00178$:
      00099D EB               [12] 2472 	mov	a,r3
      00099E 30 E7 01         [24] 2473 	jnb	acc.7,00138$
      0009A1                       2474 00101$:
                                   2475 ;	ecen4330_lcd_v3.c:396: return;
      0009A1 22               [24] 2476 	ret
                                   2477 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      0009A2                       2478 00138$:
      0009A2 74 01            [12] 2479 	mov	a,#0x01
      0009A4 B5*40 04         [24] 2480 	cjne	a,_drawChar_PARM_6,00180$
      0009A7 74 01            [12] 2481 	mov	a,#0x01
      0009A9 80 01            [24] 2482 	sjmp	00181$
      0009AB                       2483 00180$:
      0009AB E4               [12] 2484 	clr	a
      0009AC                       2485 00181$:
      0009AC FB               [12] 2486 	mov	r3,a
      0009AD 8B*47            [24] 2487 	mov	_drawChar_sloc5_1_0,r3
      0009AF E5*3C            [12] 2488 	mov	a,_drawChar_PARM_4
      0009B1 B5*3E 08         [24] 2489 	cjne	a,_drawChar_PARM_5,00182$
      0009B4 E5*3D            [12] 2490 	mov	a,(_drawChar_PARM_4 + 1)
      0009B6 B5*3F 03         [24] 2491 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009B9 D3               [12] 2492 	setb	c
      0009BA 80 01            [24] 2493 	sjmp	00183$
      0009BC                       2494 00182$:
      0009BC C3               [12] 2495 	clr	c
      0009BD                       2496 00183$:
      0009BD 92*00            [24] 2497 	mov	_drawChar_sloc0_1_0,c
      0009BF 79 00            [12] 2498 	mov	r1,#0x00
      0009C1                       2499 00124$:
                                   2500 ;	ecen4330_lcd_v3.c:405: if (i == 5)
      0009C1 B9 05 07         [24] 2501 	cjne	r1,#0x05,00107$
                                   2502 ;	ecen4330_lcd_v3.c:407: line = 0x0;
      0009C4 90r00r0A         [24] 2503 	mov	dptr,#_drawChar_line_196609_153
      0009C7 E4               [12] 2504 	clr	a
      0009C8 F0               [24] 2505 	movx	@dptr,a
      0009C9 80 49            [24] 2506 	sjmp	00136$
      0009CB                       2507 00107$:
                                   2508 ;	ecen4330_lcd_v3.c:411: line = pgm_read_byte(font+(c*5)+i);
      0009CB 85*3B*00         [24] 2509 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009CE 75*01 00         [24] 2510 	mov	(__mulint_PARM_2 + 1),#0x00
      0009D1 90 00 05         [24] 2511 	mov	dptr,#0x0005
      0009D4 C0 07            [24] 2512 	push	ar7
      0009D6 C0 06            [24] 2513 	push	ar6
      0009D8 C0 05            [24] 2514 	push	ar5
      0009DA C0 04            [24] 2515 	push	ar4
      0009DC C0 03            [24] 2516 	push	ar3
      0009DE C0 01            [24] 2517 	push	ar1
      0009E0 12r00r00         [24] 2518 	lcall	__mulint
      0009E3 A8 82            [24] 2519 	mov	r0,dpl
      0009E5 AA 83            [24] 2520 	mov	r2,dph
      0009E7 D0 01            [24] 2521 	pop	ar1
      0009E9 D0 03            [24] 2522 	pop	ar3
      0009EB D0 04            [24] 2523 	pop	ar4
      0009ED D0 05            [24] 2524 	pop	ar5
      0009EF D0 06            [24] 2525 	pop	ar6
      0009F1 D0 07            [24] 2526 	pop	ar7
      0009F3 E8               [12] 2527 	mov	a,r0
      0009F4 24r00            [12] 2528 	add	a,#_font
      0009F6 F5*41            [12] 2529 	mov	_drawChar_sloc1_1_0,a
      0009F8 EA               [12] 2530 	mov	a,r2
      0009F9 34s00            [12] 2531 	addc	a,#(_font >> 8)
      0009FB F5*42            [12] 2532 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009FD E9               [12] 2533 	mov	a,r1
      0009FE F8               [12] 2534 	mov	r0,a
      0009FF 33               [12] 2535 	rlc	a
      000A00 95 E0            [12] 2536 	subb	a,acc
      000A02 FA               [12] 2537 	mov	r2,a
      000A03 E8               [12] 2538 	mov	a,r0
      000A04 25*41            [12] 2539 	add	a,_drawChar_sloc1_1_0
      000A06 F5 82            [12] 2540 	mov	dpl,a
      000A08 EA               [12] 2541 	mov	a,r2
      000A09 35*42            [12] 2542 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A0B F5 83            [12] 2543 	mov	dph,a
      000A0D E4               [12] 2544 	clr	a
      000A0E 93               [24] 2545 	movc	a,@a+dptr
      000A0F FA               [12] 2546 	mov	r2,a
      000A10 90r00r0A         [24] 2547 	mov	dptr,#_drawChar_line_196609_153
      000A13 F0               [24] 2548 	movx	@dptr,a
                                   2549 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
                                   2550 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000A14                       2551 00136$:
      000A14 C2 D5            [12] 2552 	clr	F0
      000A16 85*40 F0         [24] 2553 	mov	b,_drawChar_PARM_6
      000A19 E9               [12] 2554 	mov	a,r1
      000A1A 30 E7 04         [24] 2555 	jnb	acc.7,00186$
      000A1D B2 D5            [12] 2556 	cpl	F0
      000A1F F4               [12] 2557 	cpl	a
      000A20 04               [12] 2558 	inc	a
      000A21                       2559 00186$:
      000A21 A4               [48] 2560 	mul	ab
      000A22 30 D5 0A         [24] 2561 	jnb	F0,00187$
      000A25 F4               [12] 2562 	cpl	a
      000A26 24 01            [12] 2563 	add	a,#0x01
      000A28 C5 F0            [12] 2564 	xch	a,b
      000A2A F4               [12] 2565 	cpl	a
      000A2B 34 00            [12] 2566 	addc	a,#0x00
      000A2D C5 F0            [12] 2567 	xch	a,b
      000A2F                       2568 00187$:
      000A2F 2E               [12] 2569 	add	a,r6
      000A30 F5*41            [12] 2570 	mov	_drawChar_sloc1_1_0,a
      000A32 EF               [12] 2571 	mov	a,r7
      000A33 35 F0            [12] 2572 	addc	a,b
      000A35 F5*42            [12] 2573 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A37 89 00            [24] 2574 	mov	ar0,r1
      000A39 85*41*43         [24] 2575 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A3C 85*42*44         [24] 2576 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A3F 89*45            [24] 2577 	mov	_drawChar_sloc3_1_0,r1
      000A41 75*46 00         [24] 2578 	mov	_drawChar_sloc4_1_0,#0x00
      000A44                       2579 00122$:
                                   2580 ;	ecen4330_lcd_v3.c:418: if (line & 0x1)
      000A44 90r00r0A         [24] 2581 	mov	dptr,#_drawChar_line_196609_153
      000A47 E0               [24] 2582 	movx	a,@dptr
      000A48 20 E0 03         [24] 2583 	jb	acc.0,00188$
      000A4B 02r0Br03         [24] 2584 	ljmp	00118$
      000A4E                       2585 00188$:
                                   2586 ;	ecen4330_lcd_v3.c:420: if (size == 1)
      000A4E EB               [12] 2587 	mov	a,r3
      000A4F 60 4E            [24] 2588 	jz	00110$
                                   2589 ;	ecen4330_lcd_v3.c:422: drawPixel(x+i, y+j, color);
      000A51 C0 00            [24] 2590 	push	ar0
      000A53 E5*45            [12] 2591 	mov	a,_drawChar_sloc3_1_0
      000A55 F8               [12] 2592 	mov	r0,a
      000A56 33               [12] 2593 	rlc	a
      000A57 95 E0            [12] 2594 	subb	a,acc
      000A59 FA               [12] 2595 	mov	r2,a
      000A5A E8               [12] 2596 	mov	a,r0
      000A5B 2E               [12] 2597 	add	a,r6
      000A5C F8               [12] 2598 	mov	r0,a
      000A5D EA               [12] 2599 	mov	a,r2
      000A5E 3F               [12] 2600 	addc	a,r7
      000A5F FA               [12] 2601 	mov	r2,a
      000A60 88 82            [24] 2602 	mov	dpl,r0
      000A62 8A 83            [24] 2603 	mov	dph,r2
      000A64 E5*46            [12] 2604 	mov	a,_drawChar_sloc4_1_0
      000A66 F8               [12] 2605 	mov	r0,a
      000A67 33               [12] 2606 	rlc	a
      000A68 95 E0            [12] 2607 	subb	a,acc
      000A6A FA               [12] 2608 	mov	r2,a
      000A6B E8               [12] 2609 	mov	a,r0
      000A6C 2C               [12] 2610 	add	a,r4
      000A6D F8               [12] 2611 	mov	r0,a
      000A6E EA               [12] 2612 	mov	a,r2
      000A6F 3D               [12] 2613 	addc	a,r5
      000A70 FA               [12] 2614 	mov	r2,a
      000A71 88*16            [24] 2615 	mov	_drawPixel_PARM_2,r0
      000A73 8A*17            [24] 2616 	mov	(_drawPixel_PARM_2 + 1),r2
      000A75 85*3C*18         [24] 2617 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A78 85*3D*19         [24] 2618 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A7B C0 07            [24] 2619 	push	ar7
      000A7D C0 06            [24] 2620 	push	ar6
      000A7F C0 05            [24] 2621 	push	ar5
      000A81 C0 04            [24] 2622 	push	ar4
      000A83 C0 03            [24] 2623 	push	ar3
      000A85 C0 01            [24] 2624 	push	ar1
      000A87 C0 00            [24] 2625 	push	ar0
      000A89 12r03r61         [24] 2626 	lcall	_drawPixel
      000A8C D0 00            [24] 2627 	pop	ar0
      000A8E D0 01            [24] 2628 	pop	ar1
      000A90 D0 03            [24] 2629 	pop	ar3
      000A92 D0 04            [24] 2630 	pop	ar4
      000A94 D0 05            [24] 2631 	pop	ar5
      000A96 D0 06            [24] 2632 	pop	ar6
      000A98 D0 07            [24] 2633 	pop	ar7
      000A9A D0 00            [24] 2634 	pop	ar0
      000A9C 02r0BrBA         [24] 2635 	ljmp	00119$
      000A9F                       2636 00110$:
                                   2637 ;	ecen4330_lcd_v3.c:425: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A9F C0 00            [24] 2638 	push	ar0
      000AA1 85*43 82         [24] 2639 	mov	dpl,_drawChar_sloc2_1_0
      000AA4 85*44 83         [24] 2640 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000AA7 C2 D5            [12] 2641 	clr	F0
      000AA9 85*40 F0         [24] 2642 	mov	b,_drawChar_PARM_6
      000AAC E5*46            [12] 2643 	mov	a,_drawChar_sloc4_1_0
      000AAE 30 E7 04         [24] 2644 	jnb	acc.7,00190$
      000AB1 B2 D5            [12] 2645 	cpl	F0
      000AB3 F4               [12] 2646 	cpl	a
      000AB4 04               [12] 2647 	inc	a
      000AB5                       2648 00190$:
      000AB5 A4               [48] 2649 	mul	ab
      000AB6 30 D5 0A         [24] 2650 	jnb	F0,00191$
      000AB9 F4               [12] 2651 	cpl	a
      000ABA 24 01            [12] 2652 	add	a,#0x01
      000ABC C5 F0            [12] 2653 	xch	a,b
      000ABE F4               [12] 2654 	cpl	a
      000ABF 34 00            [12] 2655 	addc	a,#0x00
      000AC1 C5 F0            [12] 2656 	xch	a,b
      000AC3                       2657 00191$:
      000AC3 2C               [12] 2658 	add	a,r4
      000AC4 F8               [12] 2659 	mov	r0,a
      000AC5 ED               [12] 2660 	mov	a,r5
      000AC6 35 F0            [12] 2661 	addc	a,b
      000AC8 FA               [12] 2662 	mov	r2,a
      000AC9 88*31            [24] 2663 	mov	_fillRect_PARM_2,r0
      000ACB 8A*32            [24] 2664 	mov	(_fillRect_PARM_2 + 1),r2
      000ACD A8*40            [24] 2665 	mov	r0,_drawChar_PARM_6
      000ACF 7A 00            [12] 2666 	mov	r2,#0x00
      000AD1 88*33            [24] 2667 	mov	_fillRect_PARM_3,r0
      000AD3 8A*34            [24] 2668 	mov	(_fillRect_PARM_3 + 1),r2
      000AD5 88*35            [24] 2669 	mov	_fillRect_PARM_4,r0
      000AD7 8A*36            [24] 2670 	mov	(_fillRect_PARM_4 + 1),r2
      000AD9 85*3C*37         [24] 2671 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000ADC 85*3D*38         [24] 2672 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000ADF C0 07            [24] 2673 	push	ar7
      000AE1 C0 06            [24] 2674 	push	ar6
      000AE3 C0 05            [24] 2675 	push	ar5
      000AE5 C0 04            [24] 2676 	push	ar4
      000AE7 C0 03            [24] 2677 	push	ar3
      000AE9 C0 01            [24] 2678 	push	ar1
      000AEB C0 00            [24] 2679 	push	ar0
      000AED 12r07r63         [24] 2680 	lcall	_fillRect
      000AF0 D0 00            [24] 2681 	pop	ar0
      000AF2 D0 01            [24] 2682 	pop	ar1
      000AF4 D0 03            [24] 2683 	pop	ar3
      000AF6 D0 04            [24] 2684 	pop	ar4
      000AF8 D0 05            [24] 2685 	pop	ar5
      000AFA D0 06            [24] 2686 	pop	ar6
      000AFC D0 07            [24] 2687 	pop	ar7
      000AFE D0 00            [24] 2688 	pop	ar0
      000B00 02r0BrBA         [24] 2689 	ljmp	00119$
      000B03                       2690 00118$:
                                   2691 ;	ecen4330_lcd_v3.c:427: } else if (bg != color)
      000B03 30*00 03         [24] 2692 	jnb	_drawChar_sloc0_1_0,00192$
      000B06 02r0BrBA         [24] 2693 	ljmp	00119$
      000B09                       2694 00192$:
                                   2695 ;	ecen4330_lcd_v3.c:429: if (size == 1)
      000B09 E5*47            [12] 2696 	mov	a,_drawChar_sloc5_1_0
      000B0B 60 4C            [24] 2697 	jz	00113$
                                   2698 ;	ecen4330_lcd_v3.c:431: drawPixel(x+i, y+j, bg);
      000B0D C0 03            [24] 2699 	push	ar3
      000B0F E8               [12] 2700 	mov	a,r0
      000B10 FA               [12] 2701 	mov	r2,a
      000B11 33               [12] 2702 	rlc	a
      000B12 95 E0            [12] 2703 	subb	a,acc
      000B14 FB               [12] 2704 	mov	r3,a
      000B15 EA               [12] 2705 	mov	a,r2
      000B16 2E               [12] 2706 	add	a,r6
      000B17 FA               [12] 2707 	mov	r2,a
      000B18 EB               [12] 2708 	mov	a,r3
      000B19 3F               [12] 2709 	addc	a,r7
      000B1A FB               [12] 2710 	mov	r3,a
      000B1B 8A 82            [24] 2711 	mov	dpl,r2
      000B1D 8B 83            [24] 2712 	mov	dph,r3
      000B1F E5*46            [12] 2713 	mov	a,_drawChar_sloc4_1_0
      000B21 FA               [12] 2714 	mov	r2,a
      000B22 33               [12] 2715 	rlc	a
      000B23 95 E0            [12] 2716 	subb	a,acc
      000B25 FB               [12] 2717 	mov	r3,a
      000B26 EA               [12] 2718 	mov	a,r2
      000B27 2C               [12] 2719 	add	a,r4
      000B28 FA               [12] 2720 	mov	r2,a
      000B29 EB               [12] 2721 	mov	a,r3
      000B2A 3D               [12] 2722 	addc	a,r5
      000B2B FB               [12] 2723 	mov	r3,a
      000B2C 8A*16            [24] 2724 	mov	_drawPixel_PARM_2,r2
      000B2E 8B*17            [24] 2725 	mov	(_drawPixel_PARM_2 + 1),r3
      000B30 85*3E*18         [24] 2726 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B33 85*3F*19         [24] 2727 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B36 C0 07            [24] 2728 	push	ar7
      000B38 C0 06            [24] 2729 	push	ar6
      000B3A C0 05            [24] 2730 	push	ar5
      000B3C C0 04            [24] 2731 	push	ar4
      000B3E C0 03            [24] 2732 	push	ar3
      000B40 C0 01            [24] 2733 	push	ar1
      000B42 C0 00            [24] 2734 	push	ar0
      000B44 12r03r61         [24] 2735 	lcall	_drawPixel
      000B47 D0 00            [24] 2736 	pop	ar0
      000B49 D0 01            [24] 2737 	pop	ar1
      000B4B D0 03            [24] 2738 	pop	ar3
      000B4D D0 04            [24] 2739 	pop	ar4
      000B4F D0 05            [24] 2740 	pop	ar5
      000B51 D0 06            [24] 2741 	pop	ar6
      000B53 D0 07            [24] 2742 	pop	ar7
      000B55 D0 03            [24] 2743 	pop	ar3
      000B57 80 61            [24] 2744 	sjmp	00119$
      000B59                       2745 00113$:
                                   2746 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000B59 C0 00            [24] 2747 	push	ar0
      000B5B 85*41 82         [24] 2748 	mov	dpl,_drawChar_sloc1_1_0
      000B5E 85*42 83         [24] 2749 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B61 C2 D5            [12] 2750 	clr	F0
      000B63 85*40 F0         [24] 2751 	mov	b,_drawChar_PARM_6
      000B66 E5*46            [12] 2752 	mov	a,_drawChar_sloc4_1_0
      000B68 30 E7 04         [24] 2753 	jnb	acc.7,00194$
      000B6B B2 D5            [12] 2754 	cpl	F0
      000B6D F4               [12] 2755 	cpl	a
      000B6E 04               [12] 2756 	inc	a
      000B6F                       2757 00194$:
      000B6F A4               [48] 2758 	mul	ab
      000B70 30 D5 0A         [24] 2759 	jnb	F0,00195$
      000B73 F4               [12] 2760 	cpl	a
      000B74 24 01            [12] 2761 	add	a,#0x01
      000B76 C5 F0            [12] 2762 	xch	a,b
      000B78 F4               [12] 2763 	cpl	a
      000B79 34 00            [12] 2764 	addc	a,#0x00
      000B7B C5 F0            [12] 2765 	xch	a,b
      000B7D                       2766 00195$:
      000B7D 2C               [12] 2767 	add	a,r4
      000B7E F8               [12] 2768 	mov	r0,a
      000B7F ED               [12] 2769 	mov	a,r5
      000B80 35 F0            [12] 2770 	addc	a,b
      000B82 FA               [12] 2771 	mov	r2,a
      000B83 88*31            [24] 2772 	mov	_fillRect_PARM_2,r0
      000B85 8A*32            [24] 2773 	mov	(_fillRect_PARM_2 + 1),r2
      000B87 A8*40            [24] 2774 	mov	r0,_drawChar_PARM_6
      000B89 7A 00            [12] 2775 	mov	r2,#0x00
      000B8B 88*33            [24] 2776 	mov	_fillRect_PARM_3,r0
      000B8D 8A*34            [24] 2777 	mov	(_fillRect_PARM_3 + 1),r2
      000B8F 88*35            [24] 2778 	mov	_fillRect_PARM_4,r0
      000B91 8A*36            [24] 2779 	mov	(_fillRect_PARM_4 + 1),r2
      000B93 85*3E*37         [24] 2780 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B96 85*3F*38         [24] 2781 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B99 C0 07            [24] 2782 	push	ar7
      000B9B C0 06            [24] 2783 	push	ar6
      000B9D C0 05            [24] 2784 	push	ar5
      000B9F C0 04            [24] 2785 	push	ar4
      000BA1 C0 03            [24] 2786 	push	ar3
      000BA3 C0 01            [24] 2787 	push	ar1
      000BA5 C0 00            [24] 2788 	push	ar0
      000BA7 12r07r63         [24] 2789 	lcall	_fillRect
      000BAA D0 00            [24] 2790 	pop	ar0
      000BAC D0 01            [24] 2791 	pop	ar1
      000BAE D0 03            [24] 2792 	pop	ar3
      000BB0 D0 04            [24] 2793 	pop	ar4
      000BB2 D0 05            [24] 2794 	pop	ar5
      000BB4 D0 06            [24] 2795 	pop	ar6
      000BB6 D0 07            [24] 2796 	pop	ar7
                                   2797 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BB8 D0 00            [24] 2798 	pop	ar0
                                   2799 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000BBA                       2800 00119$:
                                   2801 ;	ecen4330_lcd_v3.c:439: line >>= 1;
      000BBA 90r00r0A         [24] 2802 	mov	dptr,#_drawChar_line_196609_153
      000BBD E0               [24] 2803 	movx	a,@dptr
      000BBE C3               [12] 2804 	clr	c
      000BBF 13               [12] 2805 	rrc	a
      000BC0 FA               [12] 2806 	mov	r2,a
      000BC1 F0               [24] 2807 	movx	@dptr,a
                                   2808 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000BC2 05*46            [12] 2809 	inc	_drawChar_sloc4_1_0
      000BC4 C3               [12] 2810 	clr	c
      000BC5 E5*46            [12] 2811 	mov	a,_drawChar_sloc4_1_0
      000BC7 64 80            [12] 2812 	xrl	a,#0x80
      000BC9 94 88            [12] 2813 	subb	a,#0x88
      000BCB 50 03            [24] 2814 	jnc	00196$
      000BCD 02r0Ar44         [24] 2815 	ljmp	00122$
      000BD0                       2816 00196$:
                                   2817 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BD0 09               [12] 2818 	inc	r1
      000BD1 C3               [12] 2819 	clr	c
      000BD2 E9               [12] 2820 	mov	a,r1
      000BD3 64 80            [12] 2821 	xrl	a,#0x80
      000BD5 94 86            [12] 2822 	subb	a,#0x86
      000BD7 50 03            [24] 2823 	jnc	00197$
      000BD9 02r09rC1         [24] 2824 	ljmp	00124$
      000BDC                       2825 00197$:
                                   2826 ;	ecen4330_lcd_v3.c:443: }
      000BDC 22               [24] 2827 	ret
                                   2828 ;------------------------------------------------------------
                                   2829 ;Allocation info for local variables in function 'write'
                                   2830 ;------------------------------------------------------------
                                   2831 ;c                         Allocated to registers r7 
                                   2832 ;------------------------------------------------------------
                                   2833 ;	ecen4330_lcd_v3.c:450: void write (uint8_t c)
                                   2834 ;	-----------------------------------------
                                   2835 ;	 function write
                                   2836 ;	-----------------------------------------
      000BDD                       2837 _write:
      000BDD AF 82            [24] 2838 	mov	r7,dpl
                                   2839 ;	ecen4330_lcd_v3.c:452: if (c == '\n')
      000BDF BF 0A 26         [24] 2840 	cjne	r7,#0x0a,00105$
                                   2841 ;	ecen4330_lcd_v3.c:454: cursor_y += textsize*8;
      000BE2 AD*10            [24] 2842 	mov	r5,_textsize
      000BE4 E4               [12] 2843 	clr	a
      000BE5 C4               [12] 2844 	swap	a
      000BE6 03               [12] 2845 	rr	a
      000BE7 54 F8            [12] 2846 	anl	a,#0xf8
      000BE9 CD               [12] 2847 	xch	a,r5
      000BEA C4               [12] 2848 	swap	a
      000BEB 03               [12] 2849 	rr	a
      000BEC CD               [12] 2850 	xch	a,r5
      000BED 6D               [12] 2851 	xrl	a,r5
      000BEE CD               [12] 2852 	xch	a,r5
      000BEF 54 F8            [12] 2853 	anl	a,#0xf8
      000BF1 CD               [12] 2854 	xch	a,r5
      000BF2 6D               [12] 2855 	xrl	a,r5
      000BF3 FE               [12] 2856 	mov	r6,a
      000BF4 AB*0E            [24] 2857 	mov	r3,_cursor_y
      000BF6 AC*0F            [24] 2858 	mov	r4,(_cursor_y + 1)
      000BF8 ED               [12] 2859 	mov	a,r5
      000BF9 2B               [12] 2860 	add	a,r3
      000BFA FB               [12] 2861 	mov	r3,a
      000BFB EE               [12] 2862 	mov	a,r6
      000BFC 3C               [12] 2863 	addc	a,r4
      000BFD FC               [12] 2864 	mov	r4,a
      000BFE 8B*0E            [24] 2865 	mov	_cursor_y,r3
      000C00 8C*0F            [24] 2866 	mov	(_cursor_y + 1),r4
                                   2867 ;	ecen4330_lcd_v3.c:455: cursor_x  = 0;
      000C02 E4               [12] 2868 	clr	a
      000C03 F5*0C            [12] 2869 	mov	_cursor_x,a
      000C05 F5*0D            [12] 2870 	mov	(_cursor_x + 1),a
      000C07 22               [24] 2871 	ret
      000C08                       2872 00105$:
                                   2873 ;	ecen4330_lcd_v3.c:457: else if (c == '\r')
      000C08 BF 0D 01         [24] 2874 	cjne	r7,#0x0d,00119$
      000C0B 22               [24] 2875 	ret
      000C0C                       2876 00119$:
                                   2877 ;	ecen4330_lcd_v3.c:462: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C0C 85*0E*39         [24] 2878 	mov	_drawChar_PARM_2,_cursor_y
      000C0F 85*0F*3A         [24] 2879 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C12 8F*3B            [24] 2880 	mov	_drawChar_PARM_3,r7
      000C14 85*12*3C         [24] 2881 	mov	_drawChar_PARM_4,_textcolor
      000C17 85*13*3D         [24] 2882 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C1A 85*14*3E         [24] 2883 	mov	_drawChar_PARM_5,_textbgcolor
      000C1D 85*15*3F         [24] 2884 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C20 85*10*40         [24] 2885 	mov	_drawChar_PARM_6,_textsize
      000C23 85*0C 82         [24] 2886 	mov	dpl,_cursor_x
      000C26 85*0D 83         [24] 2887 	mov	dph,(_cursor_x + 1)
      000C29 12r09r2B         [24] 2888 	lcall	_drawChar
                                   2889 ;	ecen4330_lcd_v3.c:463: cursor_x += textsize*6;
      000C2C 85*10*00         [24] 2890 	mov	__mulint_PARM_2,_textsize
      000C2F 75*01 00         [24] 2891 	mov	(__mulint_PARM_2 + 1),#0x00
      000C32 90 00 06         [24] 2892 	mov	dptr,#0x0006
      000C35 12r00r00         [24] 2893 	lcall	__mulint
      000C38 AE 82            [24] 2894 	mov	r6,dpl
      000C3A AF 83            [24] 2895 	mov	r7,dph
      000C3C AC*0C            [24] 2896 	mov	r4,_cursor_x
      000C3E AD*0D            [24] 2897 	mov	r5,(_cursor_x + 1)
      000C40 EE               [12] 2898 	mov	a,r6
      000C41 2C               [12] 2899 	add	a,r4
      000C42 FC               [12] 2900 	mov	r4,a
      000C43 EF               [12] 2901 	mov	a,r7
      000C44 3D               [12] 2902 	addc	a,r5
      000C45 FD               [12] 2903 	mov	r5,a
      000C46 8C*0C            [24] 2904 	mov	_cursor_x,r4
      000C48 8D*0D            [24] 2905 	mov	(_cursor_x + 1),r5
                                   2906 ;	ecen4330_lcd_v3.c:465: }
      000C4A 22               [24] 2907 	ret
                                   2908 ;------------------------------------------------------------
                                   2909 ;Allocation info for local variables in function 'LCD_string_write'
                                   2910 ;------------------------------------------------------------
                                   2911 ;str                       Allocated to registers r5 r6 r7 
                                   2912 ;i                         Allocated with name '_LCD_string_write_i_65536_171'
                                   2913 ;------------------------------------------------------------
                                   2914 ;	ecen4330_lcd_v3.c:472: void LCD_string_write (int8_t *str)
                                   2915 ;	-----------------------------------------
                                   2916 ;	 function LCD_string_write
                                   2917 ;	-----------------------------------------
      000C4B                       2918 _LCD_string_write:
      000C4B AD 82            [24] 2919 	mov	r5,dpl
      000C4D AE 83            [24] 2920 	mov	r6,dph
      000C4F AF F0            [24] 2921 	mov	r7,b
                                   2922 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C51 7B 00            [12] 2923 	mov	r3,#0x00
      000C53 7C 00            [12] 2924 	mov	r4,#0x00
      000C55                       2925 00103$:
      000C55 EB               [12] 2926 	mov	a,r3
      000C56 2D               [12] 2927 	add	a,r5
      000C57 F8               [12] 2928 	mov	r0,a
      000C58 EC               [12] 2929 	mov	a,r4
      000C59 3E               [12] 2930 	addc	a,r6
      000C5A F9               [12] 2931 	mov	r1,a
      000C5B 8F 02            [24] 2932 	mov	ar2,r7
      000C5D 88 82            [24] 2933 	mov	dpl,r0
      000C5F 89 83            [24] 2934 	mov	dph,r1
      000C61 8A F0            [24] 2935 	mov	b,r2
      000C63 12r00r00         [24] 2936 	lcall	__gptrget
      000C66 FA               [12] 2937 	mov	r2,a
      000C67 60 20            [24] 2938 	jz	00105$
                                   2939 ;	ecen4330_lcd_v3.c:477: write(str[i]);
      000C69 8A 82            [24] 2940 	mov	dpl,r2
      000C6B C0 07            [24] 2941 	push	ar7
      000C6D C0 06            [24] 2942 	push	ar6
      000C6F C0 05            [24] 2943 	push	ar5
      000C71 C0 04            [24] 2944 	push	ar4
      000C73 C0 03            [24] 2945 	push	ar3
      000C75 12r0BrDD         [24] 2946 	lcall	_write
      000C78 D0 03            [24] 2947 	pop	ar3
      000C7A D0 04            [24] 2948 	pop	ar4
      000C7C D0 05            [24] 2949 	pop	ar5
      000C7E D0 06            [24] 2950 	pop	ar6
      000C80 D0 07            [24] 2951 	pop	ar7
                                   2952 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C82 0B               [12] 2953 	inc	r3
      000C83 BB 00 CF         [24] 2954 	cjne	r3,#0x00,00103$
      000C86 0C               [12] 2955 	inc	r4
      000C87 80 CC            [24] 2956 	sjmp	00103$
      000C89                       2957 00105$:
                                   2958 ;	ecen4330_lcd_v3.c:479: }
      000C89 22               [24] 2959 	ret
                                   2960 ;------------------------------------------------------------
                                   2961 ;Allocation info for local variables in function 'testRAM'
                                   2962 ;------------------------------------------------------------
                                   2963 ;d                         Allocated with name '_testRAM_d_65536_174'
                                   2964 ;i                         Allocated with name '_testRAM_i_65536_175'
                                   2965 ;ram_address               Allocated to registers 
                                   2966 ;------------------------------------------------------------
                                   2967 ;	ecen4330_lcd_v3.c:486: void testRAM (__xdata uint8_t d) {
                                   2968 ;	-----------------------------------------
                                   2969 ;	 function testRAM
                                   2970 ;	-----------------------------------------
      000C8A                       2971 _testRAM:
      000C8A E5 82            [12] 2972 	mov	a,dpl
      000C8C 90r00r0B         [24] 2973 	mov	dptr,#_testRAM_d_65536_174
      000C8F F0               [24] 2974 	movx	@dptr,a
                                   2975 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C90 E0               [24] 2976 	movx	a,@dptr
      000C91 FF               [12] 2977 	mov	r7,a
      000C92 7B 00            [12] 2978 	mov	r3,#0x00
      000C94 7C 00            [12] 2979 	mov	r4,#0x00
      000C96 7D 00            [12] 2980 	mov	r5,#0x00
      000C98 7E 00            [12] 2981 	mov	r6,#0x00
      000C9A                       2982 00102$:
                                   2983 ;	ecen4330_lcd_v3.c:491: IOM = 0;
                                   2984 ;	assignBit
      000C9A C2 B4            [12] 2985 	clr	_P3_4
                                   2986 ;	ecen4330_lcd_v3.c:492: ram_address = (uint8_t __xdata*)(i);
      000C9C 8B 82            [24] 2987 	mov	dpl,r3
      000C9E 8C 83            [24] 2988 	mov	dph,r4
                                   2989 ;	ecen4330_lcd_v3.c:493: *ram_address = d;
      000CA0 EF               [12] 2990 	mov	a,r7
      000CA1 F0               [24] 2991 	movx	@dptr,a
                                   2992 ;	ecen4330_lcd_v3.c:494: IOM = 1;
                                   2993 ;	assignBit
      000CA2 D2 B4            [12] 2994 	setb	_P3_4
                                   2995 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CA4 0B               [12] 2996 	inc	r3
      000CA5 BB 00 09         [24] 2997 	cjne	r3,#0x00,00111$
      000CA8 0C               [12] 2998 	inc	r4
      000CA9 BC 00 05         [24] 2999 	cjne	r4,#0x00,00111$
      000CAC 0D               [12] 3000 	inc	r5
      000CAD BD 00 01         [24] 3001 	cjne	r5,#0x00,00111$
      000CB0 0E               [12] 3002 	inc	r6
      000CB1                       3003 00111$:
      000CB1 C3               [12] 3004 	clr	c
      000CB2 EB               [12] 3005 	mov	a,r3
      000CB3 94 FF            [12] 3006 	subb	a,#0xff
      000CB5 EC               [12] 3007 	mov	a,r4
      000CB6 94 FF            [12] 3008 	subb	a,#0xff
      000CB8 ED               [12] 3009 	mov	a,r5
      000CB9 94 00            [12] 3010 	subb	a,#0x00
      000CBB EE               [12] 3011 	mov	a,r6
      000CBC 94 00            [12] 3012 	subb	a,#0x00
      000CBE 40 DA            [24] 3013 	jc	00102$
                                   3014 ;	ecen4330_lcd_v3.c:496: }
      000CC0 22               [24] 3015 	ret
                                   3016 ;------------------------------------------------------------
                                   3017 ;Allocation info for local variables in function 'freeType'
                                   3018 ;------------------------------------------------------------
                                   3019 ;count                     Allocated with name '_freeType_count_65536_178'
                                   3020 ;d                         Allocated with name '_freeType_d_65536_178'
                                   3021 ;------------------------------------------------------------
                                   3022 ;	ecen4330_lcd_v3.c:502: void freeType () {
                                   3023 ;	-----------------------------------------
                                   3024 ;	 function freeType
                                   3025 ;	-----------------------------------------
      000CC1                       3026 _freeType:
                                   3027 ;	ecen4330_lcd_v3.c:503: __xdata uint8_t count = 0;
      000CC1 90r00r0C         [24] 3028 	mov	dptr,#_freeType_count_65536_178
      000CC4 E4               [12] 3029 	clr	a
      000CC5 F0               [24] 3030 	movx	@dptr,a
                                   3031 ;	ecen4330_lcd_v3.c:505: while (1) {
      000CC6                       3032 00105$:
                                   3033 ;	ecen4330_lcd_v3.c:508: if (count == 8) {
      000CC6 90r00r0C         [24] 3034 	mov	dptr,#_freeType_count_65536_178
      000CC9 E0               [24] 3035 	movx	a,@dptr
      000CCA FF               [12] 3036 	mov	r7,a
      000CCB BF 08 0D         [24] 3037 	cjne	r7,#0x08,00102$
                                   3038 ;	ecen4330_lcd_v3.c:510: count = 0;
      000CCE 90r00r0C         [24] 3039 	mov	dptr,#_freeType_count_65536_178
      000CD1 E4               [12] 3040 	clr	a
      000CD2 F0               [24] 3041 	movx	@dptr,a
                                   3042 ;	ecen4330_lcd_v3.c:511: write(d);
      000CD3 75 82 0A         [24] 3043 	mov	dpl,#0x0a
      000CD6 12r0BrDD         [24] 3044 	lcall	_write
      000CD9 80 06            [24] 3045 	sjmp	00103$
      000CDB                       3046 00102$:
                                   3047 ;	ecen4330_lcd_v3.c:514: d = keyDetect();
      000CDB 12r0CrEA         [24] 3048 	lcall	_keyDetect
                                   3049 ;	ecen4330_lcd_v3.c:515: write(d);
      000CDE 12r0BrDD         [24] 3050 	lcall	_write
      000CE1                       3051 00103$:
                                   3052 ;	ecen4330_lcd_v3.c:518: count++;
      000CE1 90r00r0C         [24] 3053 	mov	dptr,#_freeType_count_65536_178
      000CE4 E0               [24] 3054 	movx	a,@dptr
      000CE5 24 01            [12] 3055 	add	a,#0x01
      000CE7 F0               [24] 3056 	movx	@dptr,a
                                   3057 ;	ecen4330_lcd_v3.c:520: }
      000CE8 80 DC            [24] 3058 	sjmp	00105$
                                   3059 ;------------------------------------------------------------
                                   3060 ;Allocation info for local variables in function 'keyDetect'
                                   3061 ;------------------------------------------------------------
                                   3062 ;	ecen4330_lcd_v3.c:527: uint8_t keyDetect () {
                                   3063 ;	-----------------------------------------
                                   3064 ;	 function keyDetect
                                   3065 ;	-----------------------------------------
      000CEA                       3066 _keyDetect:
                                   3067 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xF0;
      000CEA 75 90 F0         [24] 3068 	mov	_P1,#0xf0
                                   3069 ;	ecen4330_lcd_v3.c:529: do
      000CED                       3070 00101$:
                                   3071 ;	ecen4330_lcd_v3.c:531: __KEYPAD_PORT__ = 0xF0;
      000CED 75 90 F0         [24] 3072 	mov	_P1,#0xf0
                                   3073 ;	ecen4330_lcd_v3.c:532: colloc = __KEYPAD_PORT__;
      000CF0 85 90*00         [24] 3074 	mov	_colloc,_P1
                                   3075 ;	ecen4330_lcd_v3.c:533: colloc&= 0xF0;
      000CF3 53*00 F0         [24] 3076 	anl	_colloc,#0xf0
                                   3077 ;	ecen4330_lcd_v3.c:534: } while (colloc != 0xF0);
      000CF6 74 F0            [12] 3078 	mov	a,#0xf0
      000CF8 B5*00 F2         [24] 3079 	cjne	a,_colloc,00101$
                                   3080 ;	ecen4330_lcd_v3.c:538: do
      000CFB                       3081 00104$:
                                   3082 ;	ecen4330_lcd_v3.c:540: delay(20);
      000CFB 90 00 14         [24] 3083 	mov	dptr,#0x0014
      000CFE 12r00r21         [24] 3084 	lcall	_delay
                                   3085 ;	ecen4330_lcd_v3.c:541: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D01 E5 90            [12] 3086 	mov	a,_P1
      000D03 54 F0            [12] 3087 	anl	a,#0xf0
      000D05 F5*00            [12] 3088 	mov	_colloc,a
                                   3089 ;	ecen4330_lcd_v3.c:542: } while (colloc == 0xF0);
      000D07 74 F0            [12] 3090 	mov	a,#0xf0
      000D09 B5*00 02         [24] 3091 	cjne	a,_colloc,00178$
      000D0C 80 ED            [24] 3092 	sjmp	00104$
      000D0E                       3093 00178$:
                                   3094 ;	ecen4330_lcd_v3.c:544: delay(1);
      000D0E 90 00 01         [24] 3095 	mov	dptr,#0x0001
      000D11 12r00r21         [24] 3096 	lcall	_delay
                                   3097 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D14 E5 90            [12] 3098 	mov	a,_P1
      000D16 54 F0            [12] 3099 	anl	a,#0xf0
      000D18 F5*00            [12] 3100 	mov	_colloc,a
                                   3101 ;	ecen4330_lcd_v3.c:546: } while (colloc == 0xF0);
      000D1A 74 F0            [12] 3102 	mov	a,#0xf0
      000D1C B5*00 02         [24] 3103 	cjne	a,_colloc,00179$
      000D1F 80 DA            [24] 3104 	sjmp	00104$
      000D21                       3105 00179$:
                                   3106 ;	ecen4330_lcd_v3.c:548: while (1)
      000D21                       3107 00119$:
                                   3108 ;	ecen4330_lcd_v3.c:550: __KEYPAD_PORT__= 0xFE;
      000D21 75 90 FE         [24] 3109 	mov	_P1,#0xfe
                                   3110 ;	ecen4330_lcd_v3.c:551: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D24 E5 90            [12] 3111 	mov	a,_P1
      000D26 54 F0            [12] 3112 	anl	a,#0xf0
      000D28 F5*00            [12] 3113 	mov	_colloc,a
                                   3114 ;	ecen4330_lcd_v3.c:552: if (colloc != 0xF0)
      000D2A 74 F0            [12] 3115 	mov	a,#0xf0
      000D2C B5*00 02         [24] 3116 	cjne	a,_colloc,00180$
      000D2F 80 05            [24] 3117 	sjmp	00111$
      000D31                       3118 00180$:
                                   3119 ;	ecen4330_lcd_v3.c:554: rowloc = 0;
      000D31 75*01 00         [24] 3120 	mov	_rowloc,#0x00
                                   3121 ;	ecen4330_lcd_v3.c:555: break;
      000D34 80 3D            [24] 3122 	sjmp	00120$
      000D36                       3123 00111$:
                                   3124 ;	ecen4330_lcd_v3.c:558: __KEYPAD_PORT__ = 0xFD;
      000D36 75 90 FD         [24] 3125 	mov	_P1,#0xfd
                                   3126 ;	ecen4330_lcd_v3.c:559: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D39 E5 90            [12] 3127 	mov	a,_P1
      000D3B 54 F0            [12] 3128 	anl	a,#0xf0
      000D3D F5*00            [12] 3129 	mov	_colloc,a
                                   3130 ;	ecen4330_lcd_v3.c:560: if (colloc != 0xF0)
      000D3F 74 F0            [12] 3131 	mov	a,#0xf0
      000D41 B5*00 02         [24] 3132 	cjne	a,_colloc,00181$
      000D44 80 05            [24] 3133 	sjmp	00113$
      000D46                       3134 00181$:
                                   3135 ;	ecen4330_lcd_v3.c:562: rowloc = 1;
      000D46 75*01 01         [24] 3136 	mov	_rowloc,#0x01
                                   3137 ;	ecen4330_lcd_v3.c:563: break;
      000D49 80 28            [24] 3138 	sjmp	00120$
      000D4B                       3139 00113$:
                                   3140 ;	ecen4330_lcd_v3.c:566: __KEYPAD_PORT__ = 0xFB;
      000D4B 75 90 FB         [24] 3141 	mov	_P1,#0xfb
                                   3142 ;	ecen4330_lcd_v3.c:567: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D4E E5 90            [12] 3143 	mov	a,_P1
      000D50 54 F0            [12] 3144 	anl	a,#0xf0
      000D52 F5*00            [12] 3145 	mov	_colloc,a
                                   3146 ;	ecen4330_lcd_v3.c:568: if (colloc != 0xF0)
      000D54 74 F0            [12] 3147 	mov	a,#0xf0
      000D56 B5*00 02         [24] 3148 	cjne	a,_colloc,00182$
      000D59 80 05            [24] 3149 	sjmp	00115$
      000D5B                       3150 00182$:
                                   3151 ;	ecen4330_lcd_v3.c:570: rowloc = 2;
      000D5B 75*01 02         [24] 3152 	mov	_rowloc,#0x02
                                   3153 ;	ecen4330_lcd_v3.c:571: break;
      000D5E 80 13            [24] 3154 	sjmp	00120$
      000D60                       3155 00115$:
                                   3156 ;	ecen4330_lcd_v3.c:574: __KEYPAD_PORT__ = 0xF7;
      000D60 75 90 F7         [24] 3157 	mov	_P1,#0xf7
                                   3158 ;	ecen4330_lcd_v3.c:575: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D63 E5 90            [12] 3159 	mov	a,_P1
      000D65 54 F0            [12] 3160 	anl	a,#0xf0
      000D67 F5*00            [12] 3161 	mov	_colloc,a
                                   3162 ;	ecen4330_lcd_v3.c:576: if (colloc != 0xF0)
      000D69 74 F0            [12] 3163 	mov	a,#0xf0
      000D6B B5*00 02         [24] 3164 	cjne	a,_colloc,00183$
      000D6E 80 B1            [24] 3165 	sjmp	00119$
      000D70                       3166 00183$:
                                   3167 ;	ecen4330_lcd_v3.c:578: rowloc = 3;
      000D70 75*01 03         [24] 3168 	mov	_rowloc,#0x03
                                   3169 ;	ecen4330_lcd_v3.c:579: break;
      000D73                       3170 00120$:
                                   3171 ;	ecen4330_lcd_v3.c:583: if (colloc == 0xE0)
      000D73 74 E0            [12] 3172 	mov	a,#0xe0
      000D75 B5*00 15         [24] 3173 	cjne	a,_colloc,00128$
                                   3174 ;	ecen4330_lcd_v3.c:585: return (keypad[rowloc][0]);
      000D78 E5*01            [12] 3175 	mov	a,_rowloc
      000D7A 75 F0 04         [24] 3176 	mov	b,#0x04
      000D7D A4               [48] 3177 	mul	ab
      000D7E 24rFB            [12] 3178 	add	a,#_keypad
      000D80 F5 82            [12] 3179 	mov	dpl,a
      000D82 74s04            [12] 3180 	mov	a,#(_keypad >> 8)
      000D84 35 F0            [12] 3181 	addc	a,b
      000D86 F5 83            [12] 3182 	mov	dph,a
      000D88 E4               [12] 3183 	clr	a
      000D89 93               [24] 3184 	movc	a,@a+dptr
      000D8A F5 82            [12] 3185 	mov	dpl,a
      000D8C 22               [24] 3186 	ret
      000D8D                       3187 00128$:
                                   3188 ;	ecen4330_lcd_v3.c:587: else if (colloc == 0xD0)
      000D8D 74 D0            [12] 3189 	mov	a,#0xd0
      000D8F B5*00 18         [24] 3190 	cjne	a,_colloc,00125$
                                   3191 ;	ecen4330_lcd_v3.c:589: return (keypad[rowloc][1]);
      000D92 E5*01            [12] 3192 	mov	a,_rowloc
      000D94 75 F0 04         [24] 3193 	mov	b,#0x04
      000D97 A4               [48] 3194 	mul	ab
      000D98 24rFB            [12] 3195 	add	a,#_keypad
      000D9A FE               [12] 3196 	mov	r6,a
      000D9B 74s04            [12] 3197 	mov	a,#(_keypad >> 8)
      000D9D 35 F0            [12] 3198 	addc	a,b
      000D9F FF               [12] 3199 	mov	r7,a
      000DA0 8E 82            [24] 3200 	mov	dpl,r6
      000DA2 8F 83            [24] 3201 	mov	dph,r7
      000DA4 A3               [24] 3202 	inc	dptr
      000DA5 E4               [12] 3203 	clr	a
      000DA6 93               [24] 3204 	movc	a,@a+dptr
      000DA7 F5 82            [12] 3205 	mov	dpl,a
      000DA9 22               [24] 3206 	ret
      000DAA                       3207 00125$:
                                   3208 ;	ecen4330_lcd_v3.c:591: else if (colloc == 0xB0)
      000DAA 74 B0            [12] 3209 	mov	a,#0xb0
      000DAC B5*00 19         [24] 3210 	cjne	a,_colloc,00122$
                                   3211 ;	ecen4330_lcd_v3.c:593: return (keypad[rowloc][2]);
      000DAF E5*01            [12] 3212 	mov	a,_rowloc
      000DB1 75 F0 04         [24] 3213 	mov	b,#0x04
      000DB4 A4               [48] 3214 	mul	ab
      000DB5 24rFB            [12] 3215 	add	a,#_keypad
      000DB7 FE               [12] 3216 	mov	r6,a
      000DB8 74s04            [12] 3217 	mov	a,#(_keypad >> 8)
      000DBA 35 F0            [12] 3218 	addc	a,b
      000DBC FF               [12] 3219 	mov	r7,a
      000DBD 8E 82            [24] 3220 	mov	dpl,r6
      000DBF 8F 83            [24] 3221 	mov	dph,r7
      000DC1 A3               [24] 3222 	inc	dptr
      000DC2 A3               [24] 3223 	inc	dptr
      000DC3 E4               [12] 3224 	clr	a
      000DC4 93               [24] 3225 	movc	a,@a+dptr
      000DC5 F5 82            [12] 3226 	mov	dpl,a
      000DC7 22               [24] 3227 	ret
      000DC8                       3228 00122$:
                                   3229 ;	ecen4330_lcd_v3.c:597: return (keypad[rowloc][3]);
      000DC8 E5*01            [12] 3230 	mov	a,_rowloc
      000DCA 75 F0 04         [24] 3231 	mov	b,#0x04
      000DCD A4               [48] 3232 	mul	ab
      000DCE 24rFB            [12] 3233 	add	a,#_keypad
      000DD0 FE               [12] 3234 	mov	r6,a
      000DD1 74s04            [12] 3235 	mov	a,#(_keypad >> 8)
      000DD3 35 F0            [12] 3236 	addc	a,b
      000DD5 FF               [12] 3237 	mov	r7,a
      000DD6 8E 82            [24] 3238 	mov	dpl,r6
      000DD8 8F 83            [24] 3239 	mov	dph,r7
      000DDA A3               [24] 3240 	inc	dptr
      000DDB A3               [24] 3241 	inc	dptr
      000DDC A3               [24] 3242 	inc	dptr
      000DDD E4               [12] 3243 	clr	a
      000DDE 93               [24] 3244 	movc	a,@a+dptr
                                   3245 ;	ecen4330_lcd_v3.c:599: }
      000DDF F5 82            [12] 3246 	mov	dpl,a
      000DE1 22               [24] 3247 	ret
                                   3248 ;------------------------------------------------------------
                                   3249 ;Allocation info for local variables in function 'reverse'
                                   3250 ;------------------------------------------------------------
                                   3251 ;d                         Allocated to registers r7 
                                   3252 ;rev                       Allocated with name '_reverse_rev_65536_196'
                                   3253 ;val                       Allocated with name '_reverse_val_65536_196'
                                   3254 ;------------------------------------------------------------
                                   3255 ;	ecen4330_lcd_v3.c:601: uint16_t reverse (uint8_t d) {
                                   3256 ;	-----------------------------------------
                                   3257 ;	 function reverse
                                   3258 ;	-----------------------------------------
      000DE2                       3259 _reverse:
      000DE2 AF 82            [24] 3260 	mov	r7,dpl
                                   3261 ;	ecen4330_lcd_v3.c:602: __xdata uint16_t rev = 0;
      000DE4 90r00r0D         [24] 3262 	mov	dptr,#_reverse_rev_65536_196
      000DE7 E4               [12] 3263 	clr	a
      000DE8 F0               [24] 3264 	movx	@dptr,a
      000DE9 A3               [24] 3265 	inc	dptr
      000DEA F0               [24] 3266 	movx	@dptr,a
                                   3267 ;	ecen4330_lcd_v3.c:604: while (d >= 1) {
      000DEB                       3268 00101$:
      000DEB BF 01 00         [24] 3269 	cjne	r7,#0x01,00114$
      000DEE                       3270 00114$:
      000DEE 40 63            [24] 3271 	jc	00103$
                                   3272 ;	ecen4330_lcd_v3.c:606: val = d%10;
      000DF0 8F 05            [24] 3273 	mov	ar5,r7
      000DF2 7E 00            [12] 3274 	mov	r6,#0x00
      000DF4 75*00 0A         [24] 3275 	mov	__modsint_PARM_2,#0x0a
                                   3276 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DF7 8E*01            [24] 3277 	mov	(__modsint_PARM_2 + 1),r6
      000DF9 8D 82            [24] 3278 	mov	dpl,r5
      000DFB 8E 83            [24] 3279 	mov	dph,r6
      000DFD C0 06            [24] 3280 	push	ar6
      000DFF C0 05            [24] 3281 	push	ar5
      000E01 12r00r00         [24] 3282 	lcall	__modsint
      000E04 AB 82            [24] 3283 	mov	r3,dpl
      000E06 AC 83            [24] 3284 	mov	r4,dph
      000E08 D0 05            [24] 3285 	pop	ar5
      000E0A D0 06            [24] 3286 	pop	ar6
      000E0C 90r00r0F         [24] 3287 	mov	dptr,#_reverse_val_65536_196
      000E0F EB               [12] 3288 	mov	a,r3
      000E10 F0               [24] 3289 	movx	@dptr,a
      000E11 EC               [12] 3290 	mov	a,r4
      000E12 A3               [24] 3291 	inc	dptr
      000E13 F0               [24] 3292 	movx	@dptr,a
                                   3293 ;	ecen4330_lcd_v3.c:607: d = d/10;
      000E14 75*00 0A         [24] 3294 	mov	__divsint_PARM_2,#0x0a
      000E17 75*01 00         [24] 3295 	mov	(__divsint_PARM_2 + 1),#0x00
      000E1A 8D 82            [24] 3296 	mov	dpl,r5
      000E1C 8E 83            [24] 3297 	mov	dph,r6
      000E1E 12r00r00         [24] 3298 	lcall	__divsint
      000E21 AD 82            [24] 3299 	mov	r5,dpl
      000E23 8D 07            [24] 3300 	mov	ar7,r5
                                   3301 ;	ecen4330_lcd_v3.c:608: rev = rev * 10 + val;
      000E25 90r00r0D         [24] 3302 	mov	dptr,#_reverse_rev_65536_196
      000E28 E0               [24] 3303 	movx	a,@dptr
      000E29 FD               [12] 3304 	mov	r5,a
      000E2A A3               [24] 3305 	inc	dptr
      000E2B E0               [24] 3306 	movx	a,@dptr
      000E2C FE               [12] 3307 	mov	r6,a
      000E2D 8D*00            [24] 3308 	mov	__mulint_PARM_2,r5
      000E2F 8E*01            [24] 3309 	mov	(__mulint_PARM_2 + 1),r6
      000E31 90 00 0A         [24] 3310 	mov	dptr,#0x000a
      000E34 C0 07            [24] 3311 	push	ar7
      000E36 12r00r00         [24] 3312 	lcall	__mulint
      000E39 AD 82            [24] 3313 	mov	r5,dpl
      000E3B AE 83            [24] 3314 	mov	r6,dph
      000E3D D0 07            [24] 3315 	pop	ar7
      000E3F 90r00r0F         [24] 3316 	mov	dptr,#_reverse_val_65536_196
      000E42 E0               [24] 3317 	movx	a,@dptr
      000E43 FB               [12] 3318 	mov	r3,a
      000E44 A3               [24] 3319 	inc	dptr
      000E45 E0               [24] 3320 	movx	a,@dptr
      000E46 FC               [12] 3321 	mov	r4,a
      000E47 90r00r0D         [24] 3322 	mov	dptr,#_reverse_rev_65536_196
      000E4A EB               [12] 3323 	mov	a,r3
      000E4B 2D               [12] 3324 	add	a,r5
      000E4C F0               [24] 3325 	movx	@dptr,a
      000E4D EC               [12] 3326 	mov	a,r4
      000E4E 3E               [12] 3327 	addc	a,r6
      000E4F A3               [24] 3328 	inc	dptr
      000E50 F0               [24] 3329 	movx	@dptr,a
      000E51 80 98            [24] 3330 	sjmp	00101$
      000E53                       3331 00103$:
                                   3332 ;	ecen4330_lcd_v3.c:610: return rev;
      000E53 90r00r0D         [24] 3333 	mov	dptr,#_reverse_rev_65536_196
      000E56 E0               [24] 3334 	movx	a,@dptr
      000E57 FE               [12] 3335 	mov	r6,a
      000E58 A3               [24] 3336 	inc	dptr
      000E59 E0               [24] 3337 	movx	a,@dptr
                                   3338 ;	ecen4330_lcd_v3.c:611: }
      000E5A 8E 82            [24] 3339 	mov	dpl,r6
      000E5C F5 83            [12] 3340 	mov	dph,a
      000E5E 22               [24] 3341 	ret
                                   3342 ;------------------------------------------------------------
                                   3343 ;Allocation info for local variables in function 'asciiToDec'
                                   3344 ;------------------------------------------------------------
                                   3345 ;d                         Allocated with name '_asciiToDec_d_65536_198'
                                   3346 ;val                       Allocated with name '_asciiToDec_val_65536_199'
                                   3347 ;id                        Allocated with name '_asciiToDec_id_65536_199'
                                   3348 ;------------------------------------------------------------
                                   3349 ;	ecen4330_lcd_v3.c:618: void asciiToDec (__xdata uint8_t d) {
                                   3350 ;	-----------------------------------------
                                   3351 ;	 function asciiToDec
                                   3352 ;	-----------------------------------------
      000E5F                       3353 _asciiToDec:
      000E5F E5 82            [12] 3354 	mov	a,dpl
      000E61 90r00r11         [24] 3355 	mov	dptr,#_asciiToDec_d_65536_198
      000E64 F0               [24] 3356 	movx	@dptr,a
                                   3357 ;	ecen4330_lcd_v3.c:621: id = reverse(d);
      000E65 E0               [24] 3358 	movx	a,@dptr
      000E66 F5 82            [12] 3359 	mov	dpl,a
      000E68 12r0DrE2         [24] 3360 	lcall	_reverse
      000E6B E5 82            [12] 3361 	mov	a,dpl
      000E6D 85 83 F0         [24] 3362 	mov	b,dph
      000E70 90r00r13         [24] 3363 	mov	dptr,#_asciiToDec_id_65536_199
      000E73 F0               [24] 3364 	movx	@dptr,a
      000E74 E5 F0            [12] 3365 	mov	a,b
      000E76 A3               [24] 3366 	inc	dptr
      000E77 F0               [24] 3367 	movx	@dptr,a
                                   3368 ;	ecen4330_lcd_v3.c:622: while (id >= 1){
      000E78                       3369 00101$:
      000E78 90r00r13         [24] 3370 	mov	dptr,#_asciiToDec_id_65536_199
      000E7B E0               [24] 3371 	movx	a,@dptr
      000E7C FE               [12] 3372 	mov	r6,a
      000E7D A3               [24] 3373 	inc	dptr
      000E7E E0               [24] 3374 	movx	a,@dptr
      000E7F FF               [12] 3375 	mov	r7,a
      000E80 C3               [12] 3376 	clr	c
      000E81 EE               [12] 3377 	mov	a,r6
      000E82 94 01            [12] 3378 	subb	a,#0x01
      000E84 EF               [12] 3379 	mov	a,r7
      000E85 94 00            [12] 3380 	subb	a,#0x00
      000E87 40 42            [24] 3381 	jc	00104$
                                   3382 ;	ecen4330_lcd_v3.c:624: val = id % 10;
      000E89 75*00 0A         [24] 3383 	mov	__moduint_PARM_2,#0x0a
      000E8C 75*01 00         [24] 3384 	mov	(__moduint_PARM_2 + 1),#0x00
      000E8F 8E 82            [24] 3385 	mov	dpl,r6
      000E91 8F 83            [24] 3386 	mov	dph,r7
      000E93 C0 07            [24] 3387 	push	ar7
      000E95 C0 06            [24] 3388 	push	ar6
      000E97 12r00r00         [24] 3389 	lcall	__moduint
      000E9A AC 82            [24] 3390 	mov	r4,dpl
      000E9C D0 06            [24] 3391 	pop	ar6
      000E9E D0 07            [24] 3392 	pop	ar7
      000EA0 90r00r12         [24] 3393 	mov	dptr,#_asciiToDec_val_65536_199
      000EA3 EC               [12] 3394 	mov	a,r4
      000EA4 F0               [24] 3395 	movx	@dptr,a
                                   3396 ;	ecen4330_lcd_v3.c:625: id = id/10;
      000EA5 75*00 0A         [24] 3397 	mov	__divuint_PARM_2,#0x0a
      000EA8 75*01 00         [24] 3398 	mov	(__divuint_PARM_2 + 1),#0x00
      000EAB 8E 82            [24] 3399 	mov	dpl,r6
      000EAD 8F 83            [24] 3400 	mov	dph,r7
      000EAF 12r00r00         [24] 3401 	lcall	__divuint
      000EB2 AE 82            [24] 3402 	mov	r6,dpl
      000EB4 AF 83            [24] 3403 	mov	r7,dph
      000EB6 90r00r13         [24] 3404 	mov	dptr,#_asciiToDec_id_65536_199
      000EB9 EE               [12] 3405 	mov	a,r6
      000EBA F0               [24] 3406 	movx	@dptr,a
      000EBB EF               [12] 3407 	mov	a,r7
      000EBC A3               [24] 3408 	inc	dptr
      000EBD F0               [24] 3409 	movx	@dptr,a
                                   3410 ;	ecen4330_lcd_v3.c:626: write(val + '0');
      000EBE 90r00r12         [24] 3411 	mov	dptr,#_asciiToDec_val_65536_199
      000EC1 E0               [24] 3412 	movx	a,@dptr
      000EC2 24 30            [12] 3413 	add	a,#0x30
      000EC4 F5 82            [12] 3414 	mov	dpl,a
      000EC6 12r0BrDD         [24] 3415 	lcall	_write
      000EC9 80 AD            [24] 3416 	sjmp	00101$
      000ECB                       3417 00104$:
                                   3418 ;	ecen4330_lcd_v3.c:629: }
      000ECB 22               [24] 3419 	ret
                                   3420 ;------------------------------------------------------------
                                   3421 ;Allocation info for local variables in function 'asciiToHex'
                                   3422 ;------------------------------------------------------------
                                   3423 ;d                         Allocated to registers r7 
                                   3424 ;val                       Allocated to registers r2 
                                   3425 ;store                     Allocated with name '_asciiToHex_store_65536_202'
                                   3426 ;i                         Allocated to registers r6 
                                   3427 ;------------------------------------------------------------
                                   3428 ;	ecen4330_lcd_v3.c:636: void asciiToHex (uint8_t d) {
                                   3429 ;	-----------------------------------------
                                   3430 ;	 function asciiToHex
                                   3431 ;	-----------------------------------------
      000ECC                       3432 _asciiToHex:
      000ECC AF 82            [24] 3433 	mov	r7,dpl
                                   3434 ;	ecen4330_lcd_v3.c:640: store[0] = 0;
      000ECE 75*48 00         [24] 3435 	mov	_asciiToHex_store_65536_202,#0x00
                                   3436 ;	ecen4330_lcd_v3.c:641: store[1] = 0;
      000ED1 75*49 00         [24] 3437 	mov	(_asciiToHex_store_65536_202 + 0x0001),#0x00
                                   3438 ;	ecen4330_lcd_v3.c:642: while (d >= 1) {
      000ED4 7E 00            [12] 3439 	mov	r6,#0x00
      000ED6                       3440 00104$:
      000ED6 BF 01 00         [24] 3441 	cjne	r7,#0x01,00122$
      000ED9                       3442 00122$:
      000ED9 40 5A            [24] 3443 	jc	00106$
                                   3444 ;	ecen4330_lcd_v3.c:644: val = d % 16;
      000EDB 8F 04            [24] 3445 	mov	ar4,r7
      000EDD 7D 00            [12] 3446 	mov	r5,#0x00
      000EDF 74 0F            [12] 3447 	mov	a,#0x0f
      000EE1 5C               [12] 3448 	anl	a,r4
      000EE2 FA               [12] 3449 	mov	r2,a
                                   3450 ;	ecen4330_lcd_v3.c:645: d = d/16;
      000EE3 75*00 10         [24] 3451 	mov	__divsint_PARM_2,#0x10
                                   3452 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EE6 8D*01            [24] 3453 	mov	(__divsint_PARM_2 + 1),r5
      000EE8 8C 82            [24] 3454 	mov	dpl,r4
      000EEA 8D 83            [24] 3455 	mov	dph,r5
      000EEC C0 06            [24] 3456 	push	ar6
      000EEE C0 02            [24] 3457 	push	ar2
      000EF0 12r00r00         [24] 3458 	lcall	__divsint
      000EF3 AC 82            [24] 3459 	mov	r4,dpl
      000EF5 D0 02            [24] 3460 	pop	ar2
      000EF7 D0 06            [24] 3461 	pop	ar6
      000EF9 8C 07            [24] 3462 	mov	ar7,r4
                                   3463 ;	ecen4330_lcd_v3.c:646: if (val <= 9) {
      000EFB EA               [12] 3464 	mov	a,r2
      000EFC 24 F6            [12] 3465 	add	a,#0xff - 0x09
      000EFE 40 0C            [24] 3466 	jc	00102$
                                   3467 ;	ecen4330_lcd_v3.c:648: store[i] = val + '0';
      000F00 EE               [12] 3468 	mov	a,r6
      000F01 24r48            [12] 3469 	add	a,#_asciiToHex_store_65536_202
      000F03 F9               [12] 3470 	mov	r1,a
      000F04 8A 05            [24] 3471 	mov	ar5,r2
      000F06 74 30            [12] 3472 	mov	a,#0x30
      000F08 2D               [12] 3473 	add	a,r5
      000F09 F7               [12] 3474 	mov	@r1,a
      000F0A 80 26            [24] 3475 	sjmp	00103$
      000F0C                       3476 00102$:
                                   3477 ;	ecen4330_lcd_v3.c:651: store[i] = (val%10) + 'A';
      000F0C EE               [12] 3478 	mov	a,r6
      000F0D 24r48            [12] 3479 	add	a,#_asciiToHex_store_65536_202
      000F0F F9               [12] 3480 	mov	r1,a
      000F10 7D 00            [12] 3481 	mov	r5,#0x00
      000F12 75*00 0A         [24] 3482 	mov	__modsint_PARM_2,#0x0a
                                   3483 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F15 8D*01            [24] 3484 	mov	(__modsint_PARM_2 + 1),r5
      000F17 8A 82            [24] 3485 	mov	dpl,r2
      000F19 8D 83            [24] 3486 	mov	dph,r5
      000F1B C0 07            [24] 3487 	push	ar7
      000F1D C0 06            [24] 3488 	push	ar6
      000F1F C0 01            [24] 3489 	push	ar1
      000F21 12r00r00         [24] 3490 	lcall	__modsint
      000F24 AC 82            [24] 3491 	mov	r4,dpl
      000F26 AD 83            [24] 3492 	mov	r5,dph
      000F28 D0 01            [24] 3493 	pop	ar1
      000F2A D0 06            [24] 3494 	pop	ar6
      000F2C D0 07            [24] 3495 	pop	ar7
      000F2E 74 41            [12] 3496 	mov	a,#0x41
      000F30 2C               [12] 3497 	add	a,r4
      000F31 F7               [12] 3498 	mov	@r1,a
      000F32                       3499 00103$:
                                   3500 ;	ecen4330_lcd_v3.c:653: i++;
      000F32 0E               [12] 3501 	inc	r6
      000F33 80 A1            [24] 3502 	sjmp	00104$
      000F35                       3503 00106$:
                                   3504 ;	ecen4330_lcd_v3.c:655: write(store[1]);
      000F35 85*49 82         [24] 3505 	mov	dpl,(_asciiToHex_store_65536_202 + 0x0001)
      000F38 12r0BrDD         [24] 3506 	lcall	_write
                                   3507 ;	ecen4330_lcd_v3.c:656: write(store[0]);
      000F3B 85*48 82         [24] 3508 	mov	dpl,_asciiToHex_store_65536_202
                                   3509 ;	ecen4330_lcd_v3.c:657: }
      000F3E 02r0BrDD         [24] 3510 	ljmp	_write
                                   3511 ;------------------------------------------------------------
                                   3512 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3513 ;------------------------------------------------------------
                                   3514 ;d                         Allocated to registers r7 
                                   3515 ;------------------------------------------------------------
                                   3516 ;	ecen4330_lcd_v3.c:665: uint8_t convertAsciiHex(uint8_t d) {
                                   3517 ;	-----------------------------------------
                                   3518 ;	 function convertAsciiHex
                                   3519 ;	-----------------------------------------
      000F41                       3520 _convertAsciiHex:
                                   3521 ;	ecen4330_lcd_v3.c:666: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F41 E5 82            [12] 3522 	mov	a,dpl
      000F43 FF               [12] 3523 	mov	r7,a
      000F44 24 C6            [12] 3524 	add	a,#0xff - 0x39
      000F46 92*01            [24] 3525 	mov	_convertAsciiHex_sloc0_1_0,c
      000F48 40 08            [24] 3526 	jc	00103$
      000F4A 8F 06            [24] 3527 	mov	ar6,r7
      000F4C EE               [12] 3528 	mov	a,r6
      000F4D 24 D0            [12] 3529 	add	a,#0xd0
      000F4F FE               [12] 3530 	mov	r6,a
      000F50 80 04            [24] 3531 	sjmp	00104$
      000F52                       3532 00103$:
      000F52 74 C9            [12] 3533 	mov	a,#0xc9
      000F54 2F               [12] 3534 	add	a,r7
      000F55 FE               [12] 3535 	mov	r6,a
      000F56                       3536 00104$:
      000F56 8E 82            [24] 3537 	mov	dpl,r6
                                   3538 ;	ecen4330_lcd_v3.c:667: }
      000F58 22               [24] 3539 	ret
                                   3540 ;------------------------------------------------------------
                                   3541 ;Allocation info for local variables in function 'writeSomeLines'
                                   3542 ;------------------------------------------------------------
                                   3543 ;	ecen4330_lcd_v3.c:673: void writeSomeLines () {
                                   3544 ;	-----------------------------------------
                                   3545 ;	 function writeSomeLines
                                   3546 ;	-----------------------------------------
      000F59                       3547 _writeSomeLines:
                                   3548 ;	ecen4330_lcd_v3.c:674: fillScreen(RED);
      000F59 90 F8 00         [24] 3549 	mov	dptr,#0xf800
      000F5C 12r08r44         [24] 3550 	lcall	_fillScreen
                                   3551 ;	ecen4330_lcd_v3.c:676: delay(20);
      000F5F 90 00 14         [24] 3552 	mov	dptr,#0x0014
      000F62 12r00r21         [24] 3553 	lcall	_delay
                                   3554 ;	ecen4330_lcd_v3.c:677: fillScreen(GREEN);
      000F65 90 07 E0         [24] 3555 	mov	dptr,#0x07e0
      000F68 12r08r44         [24] 3556 	lcall	_fillScreen
                                   3557 ;	ecen4330_lcd_v3.c:679: delay(20);
      000F6B 90 00 14         [24] 3558 	mov	dptr,#0x0014
      000F6E 12r00r21         [24] 3559 	lcall	_delay
                                   3560 ;	ecen4330_lcd_v3.c:681: setRotation(0);
      000F71 75 82 00         [24] 3561 	mov	dpl,#0x00
      000F74 12r00rE8         [24] 3562 	lcall	_setRotation
                                   3563 ;	ecen4330_lcd_v3.c:682: fillScreen(BLACK);
      000F77 90 00 00         [24] 3564 	mov	dptr,#0x0000
      000F7A 12r08r44         [24] 3565 	lcall	_fillScreen
                                   3566 ;	ecen4330_lcd_v3.c:683: testCircles(20, RED);
      000F7D 75*2C 00         [24] 3567 	mov	_testCircles_PARM_2,#0x00
      000F80 75*2D F8         [24] 3568 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F83 75 82 14         [24] 3569 	mov	dpl,#0x14
      000F86 12r06r9D         [24] 3570 	lcall	_testCircles
                                   3571 ;	ecen4330_lcd_v3.c:684: delay(100);
      000F89 90 00 64         [24] 3572 	mov	dptr,#0x0064
      000F8C 12r00r21         [24] 3573 	lcall	_delay
                                   3574 ;	ecen4330_lcd_v3.c:685: fillScreen(BLACK);
      000F8F 90 00 00         [24] 3575 	mov	dptr,#0x0000
      000F92 12r08r44         [24] 3576 	lcall	_fillScreen
                                   3577 ;	ecen4330_lcd_v3.c:686: setTextSize(5);
      000F95 75 82 05         [24] 3578 	mov	dpl,#0x05
      000F98 12r00rD0         [24] 3579 	lcall	_setTextSize
                                   3580 ;	ecen4330_lcd_v3.c:687: setTextColor(CYAN, BLACK);
      000F9B E4               [12] 3581 	clr	a
      000F9C F5*00            [12] 3582 	mov	_setTextColor_PARM_2,a
      000F9E F5*01            [12] 3583 	mov	(_setTextColor_PARM_2 + 1),a
      000FA0 90 07 FF         [24] 3584 	mov	dptr,#0x07ff
      000FA3 12r00rC3         [24] 3585 	lcall	_setTextColor
                                   3586 ;	ecen4330_lcd_v3.c:688: LCD_string_write("Welcome\n");
      000FA6 90r05r0B         [24] 3587 	mov	dptr,#___str_0
      000FA9 75 F0 80         [24] 3588 	mov	b,#0x80
      000FAC 12r0Cr4B         [24] 3589 	lcall	_LCD_string_write
                                   3590 ;	ecen4330_lcd_v3.c:689: setTextSize(3);
      000FAF 75 82 03         [24] 3591 	mov	dpl,#0x03
      000FB2 12r00rD0         [24] 3592 	lcall	_setTextSize
                                   3593 ;	ecen4330_lcd_v3.c:690: LCD_string_write("ECEN-4330\n");
      000FB5 90r05r14         [24] 3594 	mov	dptr,#___str_1
      000FB8 75 F0 80         [24] 3595 	mov	b,#0x80
      000FBB 12r0Cr4B         [24] 3596 	lcall	_LCD_string_write
                                   3597 ;	ecen4330_lcd_v3.c:691: LCD_string_write("Rotation 0");
      000FBE 90r05r1F         [24] 3598 	mov	dptr,#___str_2
      000FC1 75 F0 80         [24] 3599 	mov	b,#0x80
      000FC4 12r0Cr4B         [24] 3600 	lcall	_LCD_string_write
                                   3601 ;	ecen4330_lcd_v3.c:692: delay(200);
      000FC7 90 00 C8         [24] 3602 	mov	dptr,#0x00c8
      000FCA 12r00r21         [24] 3603 	lcall	_delay
                                   3604 ;	ecen4330_lcd_v3.c:693: fillScreen(BLACK);
      000FCD 90 00 00         [24] 3605 	mov	dptr,#0x0000
      000FD0 12r08r44         [24] 3606 	lcall	_fillScreen
                                   3607 ;	ecen4330_lcd_v3.c:694: setRotation(1);
      000FD3 75 82 01         [24] 3608 	mov	dpl,#0x01
      000FD6 12r00rE8         [24] 3609 	lcall	_setRotation
                                   3610 ;	ecen4330_lcd_v3.c:695: setCursor(0,0);
      000FD9 E4               [12] 3611 	clr	a
      000FDA F5*00            [12] 3612 	mov	_setCursor_PARM_2,a
      000FDC F5*01            [12] 3613 	mov	(_setCursor_PARM_2 + 1),a
      000FDE 90 00 00         [24] 3614 	mov	dptr,#0x0000
      000FE1 12r00rB6         [24] 3615 	lcall	_setCursor
                                   3616 ;	ecen4330_lcd_v3.c:696: LCD_string_write("Rotation 1");
      000FE4 90r05r2A         [24] 3617 	mov	dptr,#___str_3
      000FE7 75 F0 80         [24] 3618 	mov	b,#0x80
      000FEA 12r0Cr4B         [24] 3619 	lcall	_LCD_string_write
                                   3620 ;	ecen4330_lcd_v3.c:697: delay(500);
      000FED 90 01 F4         [24] 3621 	mov	dptr,#0x01f4
      000FF0 12r00r21         [24] 3622 	lcall	_delay
                                   3623 ;	ecen4330_lcd_v3.c:698: fillScreen(BLACK);
      000FF3 90 00 00         [24] 3624 	mov	dptr,#0x0000
      000FF6 12r08r44         [24] 3625 	lcall	_fillScreen
                                   3626 ;	ecen4330_lcd_v3.c:699: setRotation(2);
      000FF9 75 82 02         [24] 3627 	mov	dpl,#0x02
      000FFC 12r00rE8         [24] 3628 	lcall	_setRotation
                                   3629 ;	ecen4330_lcd_v3.c:700: setCursor(0,0);
      000FFF E4               [12] 3630 	clr	a
      001000 F5*00            [12] 3631 	mov	_setCursor_PARM_2,a
      001002 F5*01            [12] 3632 	mov	(_setCursor_PARM_2 + 1),a
      001004 90 00 00         [24] 3633 	mov	dptr,#0x0000
      001007 12r00rB6         [24] 3634 	lcall	_setCursor
                                   3635 ;	ecen4330_lcd_v3.c:701: LCD_string_write("Rotation 2");
      00100A 90r05r35         [24] 3636 	mov	dptr,#___str_4
      00100D 75 F0 80         [24] 3637 	mov	b,#0x80
      001010 12r0Cr4B         [24] 3638 	lcall	_LCD_string_write
                                   3639 ;	ecen4330_lcd_v3.c:702: delay(500);
      001013 90 01 F4         [24] 3640 	mov	dptr,#0x01f4
      001016 12r00r21         [24] 3641 	lcall	_delay
                                   3642 ;	ecen4330_lcd_v3.c:703: fillScreen(BLACK);
      001019 90 00 00         [24] 3643 	mov	dptr,#0x0000
      00101C 12r08r44         [24] 3644 	lcall	_fillScreen
                                   3645 ;	ecen4330_lcd_v3.c:704: setRotation(3);
      00101F 75 82 03         [24] 3646 	mov	dpl,#0x03
      001022 12r00rE8         [24] 3647 	lcall	_setRotation
                                   3648 ;	ecen4330_lcd_v3.c:705: setCursor(0,0);
      001025 E4               [12] 3649 	clr	a
      001026 F5*00            [12] 3650 	mov	_setCursor_PARM_2,a
      001028 F5*01            [12] 3651 	mov	(_setCursor_PARM_2 + 1),a
      00102A 90 00 00         [24] 3652 	mov	dptr,#0x0000
      00102D 12r00rB6         [24] 3653 	lcall	_setCursor
                                   3654 ;	ecen4330_lcd_v3.c:706: delay(200);
      001030 90 00 C8         [24] 3655 	mov	dptr,#0x00c8
      001033 12r00r21         [24] 3656 	lcall	_delay
                                   3657 ;	ecen4330_lcd_v3.c:707: LCD_string_write("Rotation 3");
      001036 90r05r40         [24] 3658 	mov	dptr,#___str_5
      001039 75 F0 80         [24] 3659 	mov	b,#0x80
      00103C 12r0Cr4B         [24] 3660 	lcall	_LCD_string_write
                                   3661 ;	ecen4330_lcd_v3.c:708: delay(200);
      00103F 90 00 C8         [24] 3662 	mov	dptr,#0x00c8
                                   3663 ;	ecen4330_lcd_v3.c:709: }
      001042 02r00r21         [24] 3664 	ljmp	_delay
                                   3665 ;------------------------------------------------------------
                                   3666 ;Allocation info for local variables in function 'getAddress'
                                   3667 ;------------------------------------------------------------
                                   3668 ;input                     Allocated with name '_getAddress_input_65536_228'
                                   3669 ;hex                       Allocated with name '_getAddress_hex_65536_228'
                                   3670 ;i                         Allocated with name '_getAddress_i_65536_228'
                                   3671 ;address                   Allocated with name '_getAddress_address_65536_228'
                                   3672 ;------------------------------------------------------------
                                   3673 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3674 ;	-----------------------------------------
                                   3675 ;	 function getAddress
                                   3676 ;	-----------------------------------------
      001045                       3677 _getAddress:
                                   3678 ;	getFunctions.c:16: address = 0;
      001045 90r00r15         [24] 3679 	mov	dptr,#_getAddress_address_65536_228
      001048 E4               [12] 3680 	clr	a
      001049 F0               [24] 3681 	movx	@dptr,a
      00104A A3               [24] 3682 	inc	dptr
      00104B F0               [24] 3683 	movx	@dptr,a
                                   3684 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00104C 7F 00            [12] 3685 	mov	r7,#0x00
      00104E                       3686 00104$:
                                   3687 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      00104E C0 07            [24] 3688 	push	ar7
      001050 12r0CrEA         [24] 3689 	lcall	_keyDetect
                                   3690 ;	getFunctions.c:21: write(input);						// display nibble to user
      001053 AE 82            [24] 3691 	mov  r6,dpl
      001055 C0 06            [24] 3692 	push	ar6
      001057 12r0BrDD         [24] 3693 	lcall	_write
      00105A D0 06            [24] 3694 	pop	ar6
                                   3695 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      00105C 8E 82            [24] 3696 	mov	dpl,r6
      00105E 12r0Fr41         [24] 3697 	lcall	_convertAsciiHex
      001061 AE 82            [24] 3698 	mov	r6,dpl
      001063 D0 07            [24] 3699 	pop	ar7
                                   3700 ;	getFunctions.c:25: address = address | hex;
      001065 90r00r15         [24] 3701 	mov	dptr,#_getAddress_address_65536_228
      001068 E0               [24] 3702 	movx	a,@dptr
      001069 FC               [12] 3703 	mov	r4,a
      00106A A3               [24] 3704 	inc	dptr
      00106B E0               [24] 3705 	movx	a,@dptr
      00106C FD               [12] 3706 	mov	r5,a
      00106D 7B 00            [12] 3707 	mov	r3,#0x00
      00106F 90r00r15         [24] 3708 	mov	dptr,#_getAddress_address_65536_228
      001072 EE               [12] 3709 	mov	a,r6
      001073 4C               [12] 3710 	orl	a,r4
      001074 F0               [24] 3711 	movx	@dptr,a
      001075 EB               [12] 3712 	mov	a,r3
      001076 4D               [12] 3713 	orl	a,r5
      001077 A3               [24] 3714 	inc	dptr
      001078 F0               [24] 3715 	movx	@dptr,a
                                   3716 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      001079 BF 03 02         [24] 3717 	cjne	r7,#0x03,00121$
      00107C 80 1C            [24] 3718 	sjmp	00105$
      00107E                       3719 00121$:
      00107E 90r00r15         [24] 3720 	mov	dptr,#_getAddress_address_65536_228
      001081 E0               [24] 3721 	movx	a,@dptr
      001082 FD               [12] 3722 	mov	r5,a
      001083 A3               [24] 3723 	inc	dptr
      001084 E0               [24] 3724 	movx	a,@dptr
      001085 C4               [12] 3725 	swap	a
      001086 54 F0            [12] 3726 	anl	a,#0xf0
      001088 CD               [12] 3727 	xch	a,r5
      001089 C4               [12] 3728 	swap	a
      00108A CD               [12] 3729 	xch	a,r5
      00108B 6D               [12] 3730 	xrl	a,r5
      00108C CD               [12] 3731 	xch	a,r5
      00108D 54 F0            [12] 3732 	anl	a,#0xf0
      00108F CD               [12] 3733 	xch	a,r5
      001090 6D               [12] 3734 	xrl	a,r5
      001091 FE               [12] 3735 	mov	r6,a
      001092 90r00r15         [24] 3736 	mov	dptr,#_getAddress_address_65536_228
      001095 ED               [12] 3737 	mov	a,r5
      001096 F0               [24] 3738 	movx	@dptr,a
      001097 EE               [12] 3739 	mov	a,r6
      001098 A3               [24] 3740 	inc	dptr
      001099 F0               [24] 3741 	movx	@dptr,a
      00109A                       3742 00105$:
                                   3743 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00109A 0F               [12] 3744 	inc	r7
      00109B BF 04 00         [24] 3745 	cjne	r7,#0x04,00122$
      00109E                       3746 00122$:
      00109E 40 AE            [24] 3747 	jc	00104$
                                   3748 ;	getFunctions.c:28: return address;
      0010A0 90r00r15         [24] 3749 	mov	dptr,#_getAddress_address_65536_228
      0010A3 E0               [24] 3750 	movx	a,@dptr
      0010A4 FE               [12] 3751 	mov	r6,a
      0010A5 A3               [24] 3752 	inc	dptr
      0010A6 E0               [24] 3753 	movx	a,@dptr
                                   3754 ;	getFunctions.c:29: }
      0010A7 8E 82            [24] 3755 	mov	dpl,r6
      0010A9 F5 83            [12] 3756 	mov	dph,a
      0010AB 22               [24] 3757 	ret
                                   3758 ;------------------------------------------------------------
                                   3759 ;Allocation info for local variables in function 'getByte'
                                   3760 ;------------------------------------------------------------
                                   3761 ;input                     Allocated with name '_getByte_input_65536_231'
                                   3762 ;hex                       Allocated with name '_getByte_hex_65536_231'
                                   3763 ;byte                      Allocated with name '_getByte_byte_65536_231'
                                   3764 ;i                         Allocated with name '_getByte_i_65536_231'
                                   3765 ;------------------------------------------------------------
                                   3766 ;	getFunctions.c:36: uint8_t getByte() {
                                   3767 ;	-----------------------------------------
                                   3768 ;	 function getByte
                                   3769 ;	-----------------------------------------
      0010AC                       3770 _getByte:
                                   3771 ;	getFunctions.c:40: byte = 0;
      0010AC 90r00r17         [24] 3772 	mov	dptr,#_getByte_byte_65536_231
      0010AF E4               [12] 3773 	clr	a
      0010B0 F0               [24] 3774 	movx	@dptr,a
                                   3775 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010B1 7F 00            [12] 3776 	mov	r7,#0x00
      0010B3                       3777 00104$:
                                   3778 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      0010B3 C0 07            [24] 3779 	push	ar7
      0010B5 12r0CrEA         [24] 3780 	lcall	_keyDetect
                                   3781 ;	getFunctions.c:45: write(input);						// display nibble to user
      0010B8 AE 82            [24] 3782 	mov  r6,dpl
      0010BA C0 06            [24] 3783 	push	ar6
      0010BC 12r0BrDD         [24] 3784 	lcall	_write
      0010BF D0 06            [24] 3785 	pop	ar6
                                   3786 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      0010C1 8E 82            [24] 3787 	mov	dpl,r6
      0010C3 12r0Fr41         [24] 3788 	lcall	_convertAsciiHex
      0010C6 AE 82            [24] 3789 	mov	r6,dpl
      0010C8 D0 07            [24] 3790 	pop	ar7
                                   3791 ;	getFunctions.c:49: byte = byte | hex;
      0010CA 90r00r17         [24] 3792 	mov	dptr,#_getByte_byte_65536_231
      0010CD E0               [24] 3793 	movx	a,@dptr
      0010CE 4E               [12] 3794 	orl	a,r6
      0010CF F0               [24] 3795 	movx	@dptr,a
                                   3796 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010D0 BF 01 02         [24] 3797 	cjne	r7,#0x01,00121$
      0010D3 80 09            [24] 3798 	sjmp	00105$
      0010D5                       3799 00121$:
      0010D5 90r00r17         [24] 3800 	mov	dptr,#_getByte_byte_65536_231
      0010D8 E0               [24] 3801 	movx	a,@dptr
      0010D9 C4               [12] 3802 	swap	a
      0010DA 54 F0            [12] 3803 	anl	a,#0xf0
      0010DC FE               [12] 3804 	mov	r6,a
      0010DD F0               [24] 3805 	movx	@dptr,a
      0010DE                       3806 00105$:
                                   3807 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010DE 0F               [12] 3808 	inc	r7
      0010DF BF 02 00         [24] 3809 	cjne	r7,#0x02,00122$
      0010E2                       3810 00122$:
      0010E2 40 CF            [24] 3811 	jc	00104$
                                   3812 ;	getFunctions.c:52: return byte;
      0010E4 90r00r17         [24] 3813 	mov	dptr,#_getByte_byte_65536_231
      0010E7 E0               [24] 3814 	movx	a,@dptr
                                   3815 ;	getFunctions.c:53: }
      0010E8 F5 82            [12] 3816 	mov	dpl,a
      0010EA 22               [24] 3817 	ret
                                   3818 ;------------------------------------------------------------
                                   3819 ;Allocation info for local variables in function 'check'
                                   3820 ;------------------------------------------------------------
                                   3821 ;ramAddress                Allocated to registers r4 r5 
                                   3822 ;checker                   Allocated with name '_check_checker_65537_235'
                                   3823 ;fetched                   Allocated with name '_check_fetched_65537_235'
                                   3824 ;i                         Allocated with name '_check_i_65537_235'
                                   3825 ;error                     Allocated with name '_check_error_65537_235'
                                   3826 ;------------------------------------------------------------
                                   3827 ;	check.c:6: void check() {
                                   3828 ;	-----------------------------------------
                                   3829 ;	 function check
                                   3830 ;	-----------------------------------------
      0010EB                       3831 _check:
                                   3832 ;	check.c:8: fillScreen(GRAY);
      0010EB 90 D6 BA         [24] 3833 	mov	dptr,#0xd6ba
      0010EE 12r08r44         [24] 3834 	lcall	_fillScreen
                                   3835 ;	check.c:9: setCursor(0, 0);
      0010F1 E4               [12] 3836 	clr	a
      0010F2 F5*00            [12] 3837 	mov	_setCursor_PARM_2,a
      0010F4 F5*01            [12] 3838 	mov	(_setCursor_PARM_2 + 1),a
      0010F6 90 00 00         [24] 3839 	mov	dptr,#0x0000
      0010F9 12r00rB6         [24] 3840 	lcall	_setCursor
                                   3841 ;	check.c:10: setTextSize(2);
      0010FC 75 82 02         [24] 3842 	mov	dpl,#0x02
      0010FF 12r00rD0         [24] 3843 	lcall	_setTextSize
                                   3844 ;	check.c:17: __xdata bool error = false;
      001102 90r00r19         [24] 3845 	mov	dptr,#_check_error_65537_235
      001105 E4               [12] 3846 	clr	a
      001106 F0               [24] 3847 	movx	@dptr,a
                                   3848 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      001107 90r05r4B         [24] 3849 	mov	dptr,#___str_6
      00110A 75 F0 80         [24] 3850 	mov	b,#0x80
      00110D 12r0Cr4B         [24] 3851 	lcall	_LCD_string_write
                                   3852 ;	check.c:22: checker = getByte();
      001110 12r10rAC         [24] 3853 	lcall	_getByte
      001113 E5 82            [12] 3854 	mov	a,dpl
      001115 90r00r18         [24] 3855 	mov	dptr,#_check_checker_65537_235
      001118 F0               [24] 3856 	movx	@dptr,a
                                   3857 ;	check.c:23: write('\n');
      001119 75 82 0A         [24] 3858 	mov	dpl,#0x0a
      00111C 12r0BrDD         [24] 3859 	lcall	_write
                                   3860 ;	check.c:24: LCD_string_write("In progress...\n");
      00111F 90r05r60         [24] 3861 	mov	dptr,#___str_7
      001122 75 F0 80         [24] 3862 	mov	b,#0x80
      001125 12r0Cr4B         [24] 3863 	lcall	_LCD_string_write
                                   3864 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001128 7E 00            [12] 3865 	mov	r6,#0x00
      00112A 7F 00            [12] 3866 	mov	r7,#0x00
      00112C                       3867 00112$:
                                   3868 ;	check.c:30: IOM = 0;
                                   3869 ;	assignBit
      00112C C2 B4            [12] 3870 	clr	_P3_4
                                   3871 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      00112E 8E 04            [24] 3872 	mov	ar4,r6
      001130 8F 05            [24] 3873 	mov	ar5,r7
                                   3874 ;	check.c:32: *ramAddress = checker;
      001132 90r00r18         [24] 3875 	mov	dptr,#_check_checker_65537_235
      001135 E0               [24] 3876 	movx	a,@dptr
      001136 FB               [12] 3877 	mov	r3,a
      001137 F9               [12] 3878 	mov	r1,a
      001138 7A 00            [12] 3879 	mov	r2,#0x00
      00113A 8C 82            [24] 3880 	mov	dpl,r4
      00113C 8D 83            [24] 3881 	mov	dph,r5
      00113E E9               [12] 3882 	mov	a,r1
      00113F F0               [24] 3883 	movx	@dptr,a
      001140 EA               [12] 3884 	mov	a,r2
      001141 A3               [24] 3885 	inc	dptr
      001142 F0               [24] 3886 	movx	@dptr,a
                                   3887 ;	check.c:33: fetched = *ramAddress;
                                   3888 ;	check.c:34: IOM = 1;
                                   3889 ;	assignBit
      001143 D2 B4            [12] 3890 	setb	_P3_4
                                   3891 ;	check.c:35: if (fetched != checker) {
      001145 E9               [12] 3892 	mov	a,r1
      001146 B5 03 02         [24] 3893 	cjne	a,ar3,00136$
      001149 80 43            [24] 3894 	sjmp	00104$
      00114B                       3895 00136$:
                                   3896 ;	check.c:36: asciiToHex(checker);
      00114B 8B 82            [24] 3897 	mov	dpl,r3
      00114D C0 05            [24] 3898 	push	ar5
      00114F C0 04            [24] 3899 	push	ar4
      001151 C0 01            [24] 3900 	push	ar1
      001153 12r0ErCC         [24] 3901 	lcall	_asciiToHex
                                   3902 ;	check.c:37: write(' ');
      001156 75 82 20         [24] 3903 	mov	dpl,#0x20
      001159 12r0BrDD         [24] 3904 	lcall	_write
      00115C D0 01            [24] 3905 	pop	ar1
                                   3906 ;	check.c:38: asciiToHex(fetched);
      00115E 89 82            [24] 3907 	mov	dpl,r1
      001160 12r0ErCC         [24] 3908 	lcall	_asciiToHex
                                   3909 ;	check.c:39: write(' ');
      001163 75 82 20         [24] 3910 	mov	dpl,#0x20
      001166 12r0BrDD         [24] 3911 	lcall	_write
      001169 D0 04            [24] 3912 	pop	ar4
      00116B D0 05            [24] 3913 	pop	ar5
                                   3914 ;	check.c:40: asciiToHex(*ramAddress);
      00116D 8C 82            [24] 3915 	mov	dpl,r4
      00116F 8D 83            [24] 3916 	mov	dph,r5
      001171 E0               [24] 3917 	movx	a,@dptr
      001172 F5 82            [12] 3918 	mov	dpl,a
      001174 12r0ErCC         [24] 3919 	lcall	_asciiToHex
                                   3920 ;	check.c:41: write('\n');
      001177 75 82 0A         [24] 3921 	mov	dpl,#0x0a
      00117A 12r0BrDD         [24] 3922 	lcall	_write
                                   3923 ;	check.c:42: LCD_string_write("Memory check failed\n");
      00117D 90r05r70         [24] 3924 	mov	dptr,#___str_8
      001180 75 F0 80         [24] 3925 	mov	b,#0x80
      001183 12r0Cr4B         [24] 3926 	lcall	_LCD_string_write
                                   3927 ;	check.c:43: error = true;
      001186 90r00r19         [24] 3928 	mov	dptr,#_check_error_65537_235
      001189 74 01            [12] 3929 	mov	a,#0x01
      00118B F0               [24] 3930 	movx	@dptr,a
                                   3931 ;	check.c:44: break;
      00118C 80 78            [24] 3932 	sjmp	00106$
      00118E                       3933 00104$:
                                   3934 ;	check.c:46: IOM = 0;
                                   3935 ;	assignBit
      00118E C2 B4            [12] 3936 	clr	_P3_4
                                   3937 ;	check.c:47: checker = ~checker;
      001190 90r00r18         [24] 3938 	mov	dptr,#_check_checker_65537_235
      001193 EB               [12] 3939 	mov	a,r3
      001194 F4               [12] 3940 	cpl	a
      001195 F0               [24] 3941 	movx	@dptr,a
                                   3942 ;	check.c:48: *ramAddress = checker;
      001196 E0               [24] 3943 	movx	a,@dptr
      001197 FB               [12] 3944 	mov	r3,a
      001198 F9               [12] 3945 	mov	r1,a
      001199 7A 00            [12] 3946 	mov	r2,#0x00
      00119B 8C 82            [24] 3947 	mov	dpl,r4
      00119D 8D 83            [24] 3948 	mov	dph,r5
      00119F E9               [12] 3949 	mov	a,r1
      0011A0 F0               [24] 3950 	movx	@dptr,a
      0011A1 EA               [12] 3951 	mov	a,r2
      0011A2 A3               [24] 3952 	inc	dptr
      0011A3 F0               [24] 3953 	movx	@dptr,a
                                   3954 ;	check.c:49: fetched = *ramAddress;
                                   3955 ;	check.c:50: IOM = 1;
                                   3956 ;	assignBit
      0011A4 D2 B4            [12] 3957 	setb	_P3_4
                                   3958 ;	check.c:51: if (fetched != checker) {
      0011A6 E9               [12] 3959 	mov	a,r1
      0011A7 B5 03 02         [24] 3960 	cjne	a,ar3,00137$
      0011AA 80 45            [24] 3961 	sjmp	00113$
      0011AC                       3962 00137$:
                                   3963 ;	check.c:52: asciiToHex(~checker);
      0011AC EB               [12] 3964 	mov	a,r3
      0011AD F4               [12] 3965 	cpl	a
      0011AE F5 82            [12] 3966 	mov	dpl,a
      0011B0 C0 05            [24] 3967 	push	ar5
      0011B2 C0 04            [24] 3968 	push	ar4
      0011B4 C0 01            [24] 3969 	push	ar1
      0011B6 12r0ErCC         [24] 3970 	lcall	_asciiToHex
                                   3971 ;	check.c:53: write(' ');
      0011B9 75 82 20         [24] 3972 	mov	dpl,#0x20
      0011BC 12r0BrDD         [24] 3973 	lcall	_write
      0011BF D0 01            [24] 3974 	pop	ar1
                                   3975 ;	check.c:54: asciiToHex(fetched);
      0011C1 89 82            [24] 3976 	mov	dpl,r1
      0011C3 12r0ErCC         [24] 3977 	lcall	_asciiToHex
                                   3978 ;	check.c:55: write(' ');
      0011C6 75 82 20         [24] 3979 	mov	dpl,#0x20
      0011C9 12r0BrDD         [24] 3980 	lcall	_write
      0011CC D0 04            [24] 3981 	pop	ar4
      0011CE D0 05            [24] 3982 	pop	ar5
                                   3983 ;	check.c:56: asciiToHex(*ramAddress);
      0011D0 8C 82            [24] 3984 	mov	dpl,r4
      0011D2 8D 83            [24] 3985 	mov	dph,r5
      0011D4 E0               [24] 3986 	movx	a,@dptr
      0011D5 F5 82            [12] 3987 	mov	dpl,a
      0011D7 12r0ErCC         [24] 3988 	lcall	_asciiToHex
                                   3989 ;	check.c:57: write('\n');
      0011DA 75 82 0A         [24] 3990 	mov	dpl,#0x0a
      0011DD 12r0BrDD         [24] 3991 	lcall	_write
                                   3992 ;	check.c:58: LCD_string_write("Memory check failed\n");
      0011E0 90r05r70         [24] 3993 	mov	dptr,#___str_8
      0011E3 75 F0 80         [24] 3994 	mov	b,#0x80
      0011E6 12r0Cr4B         [24] 3995 	lcall	_LCD_string_write
                                   3996 ;	check.c:59: error = true;
      0011E9 90r00r19         [24] 3997 	mov	dptr,#_check_error_65537_235
      0011EC 74 01            [12] 3998 	mov	a,#0x01
      0011EE F0               [24] 3999 	movx	@dptr,a
                                   4000 ;	check.c:60: break;
      0011EF 80 15            [24] 4001 	sjmp	00106$
      0011F1                       4002 00113$:
                                   4003 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0011F1 0E               [12] 4004 	inc	r6
      0011F2 BE 00 01         [24] 4005 	cjne	r6,#0x00,00138$
      0011F5 0F               [12] 4006 	inc	r7
      0011F6                       4007 00138$:
      0011F6 8E 04            [24] 4008 	mov	ar4,r6
      0011F8 8F 05            [24] 4009 	mov	ar5,r7
      0011FA C3               [12] 4010 	clr	c
      0011FB EC               [12] 4011 	mov	a,r4
      0011FC 94 FF            [12] 4012 	subb	a,#0xff
      0011FE ED               [12] 4013 	mov	a,r5
      0011FF 94 FF            [12] 4014 	subb	a,#0xff
      001201 50 03            [24] 4015 	jnc	00139$
      001203 02r11r2C         [24] 4016 	ljmp	00112$
      001206                       4017 00139$:
      001206                       4018 00106$:
                                   4019 ;	check.c:68: if (error != false) {
      001206 90r00r19         [24] 4020 	mov	dptr,#_check_error_65537_235
      001209 E0               [24] 4021 	movx	a,@dptr
      00120A 60 09            [24] 4022 	jz	00108$
                                   4023 ;	check.c:69: LCD_string_write("Success!\n");
      00120C 90r05r85         [24] 4024 	mov	dptr,#___str_9
      00120F 75 F0 80         [24] 4025 	mov	b,#0x80
      001212 12r0Cr4B         [24] 4026 	lcall	_LCD_string_write
      001215                       4027 00108$:
                                   4028 ;	check.c:73: LCD_string_write("Press 1 for menu\n");
      001215 90r05r8F         [24] 4029 	mov	dptr,#___str_10
      001218 75 F0 80         [24] 4030 	mov	b,#0x80
      00121B 12r0Cr4B         [24] 4031 	lcall	_LCD_string_write
                                   4032 ;	check.c:75: do {
      00121E                       4033 00109$:
                                   4034 ;	check.c:76: checker = keyDetect();
      00121E 12r0CrEA         [24] 4035 	lcall	_keyDetect
      001221 AF 82            [24] 4036 	mov	r7,dpl
                                   4037 ;	check.c:77: } while (checker != '1');
      001223 BF 31 F8         [24] 4038 	cjne	r7,#0x31,00109$
                                   4039 ;	check.c:78: }
      001226 22               [24] 4040 	ret
                                   4041 ;------------------------------------------------------------
                                   4042 ;Allocation info for local variables in function 'basic'
                                   4043 ;------------------------------------------------------------
                                   4044 ;ramAddress                Allocated to registers 
                                   4045 ;val                       Allocated with name '_basic_val_65537_244'
                                   4046 ;fetched                   Allocated with name '_basic_fetched_65537_244'
                                   4047 ;add                       Allocated with name '_basic_add_65537_244'
                                   4048 ;------------------------------------------------------------
                                   4049 ;	check.c:84: void basic() {
                                   4050 ;	-----------------------------------------
                                   4051 ;	 function basic
                                   4052 ;	-----------------------------------------
      001227                       4053 _basic:
                                   4054 ;	check.c:86: fillScreen(GRAY);
      001227 90 D6 BA         [24] 4055 	mov	dptr,#0xd6ba
      00122A 12r08r44         [24] 4056 	lcall	_fillScreen
                                   4057 ;	check.c:87: setCursor(0, 0);
      00122D E4               [12] 4058 	clr	a
      00122E F5*00            [12] 4059 	mov	_setCursor_PARM_2,a
      001230 F5*01            [12] 4060 	mov	(_setCursor_PARM_2 + 1),a
      001232 90 00 00         [24] 4061 	mov	dptr,#0x0000
      001235 12r00rB6         [24] 4062 	lcall	_setCursor
                                   4063 ;	check.c:88: setTextSize(2);
      001238 75 82 02         [24] 4064 	mov	dpl,#0x02
      00123B 12r00rD0         [24] 4065 	lcall	_setTextSize
                                   4066 ;	check.c:97: LCD_string_write("Enter byte\n");
      00123E 90r05rA1         [24] 4067 	mov	dptr,#___str_11
      001241 75 F0 80         [24] 4068 	mov	b,#0x80
      001244 12r0Cr4B         [24] 4069 	lcall	_LCD_string_write
                                   4070 ;	check.c:98: val = getByte();
      001247 12r10rAC         [24] 4071 	lcall	_getByte
      00124A AF 82            [24] 4072 	mov	r7,dpl
                                   4073 ;	check.c:99: write('\n');
      00124C 75 82 0A         [24] 4074 	mov	dpl,#0x0a
      00124F C0 07            [24] 4075 	push	ar7
      001251 12r0BrDD         [24] 4076 	lcall	_write
                                   4077 ;	check.c:102: LCD_string_write("Enter address\n");
      001254 90r05rAD         [24] 4078 	mov	dptr,#___str_12
      001257 75 F0 80         [24] 4079 	mov	b,#0x80
      00125A 12r0Cr4B         [24] 4080 	lcall	_LCD_string_write
                                   4081 ;	check.c:103: add = getAddress();
      00125D 12r10r45         [24] 4082 	lcall	_getAddress
      001260 AD 82            [24] 4083 	mov	r5,dpl
      001262 AE 83            [24] 4084 	mov	r6,dph
                                   4085 ;	check.c:104: write('\n');
      001264 75 82 0A         [24] 4086 	mov	dpl,#0x0a
      001267 C0 06            [24] 4087 	push	ar6
      001269 C0 05            [24] 4088 	push	ar5
      00126B 12r0BrDD         [24] 4089 	lcall	_write
                                   4090 ;	check.c:105: LCD_string_write("In progress\n");
      00126E 90r05rBC         [24] 4091 	mov	dptr,#___str_13
      001271 75 F0 80         [24] 4092 	mov	b,#0x80
      001274 12r0Cr4B         [24] 4093 	lcall	_LCD_string_write
      001277 D0 05            [24] 4094 	pop	ar5
      001279 D0 06            [24] 4095 	pop	ar6
      00127B D0 07            [24] 4096 	pop	ar7
                                   4097 ;	check.c:107: IOM = 0;
                                   4098 ;	assignBit
      00127D C2 B4            [12] 4099 	clr	_P3_4
                                   4100 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      00127F 8D 82            [24] 4101 	mov	dpl,r5
      001281 8E 83            [24] 4102 	mov	dph,r6
                                   4103 ;	check.c:111: *ramAddress = val;
      001283 8F 05            [24] 4104 	mov	ar5,r7
      001285 7E 00            [12] 4105 	mov	r6,#0x00
      001287 ED               [12] 4106 	mov	a,r5
      001288 F0               [24] 4107 	movx	@dptr,a
      001289 EE               [12] 4108 	mov	a,r6
      00128A A3               [24] 4109 	inc	dptr
      00128B F0               [24] 4110 	movx	@dptr,a
                                   4111 ;	check.c:114: fetched = *ramAddress;
                                   4112 ;	check.c:116: IOM = 1;
                                   4113 ;	assignBit
      00128C D2 B4            [12] 4114 	setb	_P3_4
                                   4115 ;	check.c:119: if (fetched == val) {
      00128E ED               [12] 4116 	mov	a,r5
      00128F B5 07 10         [24] 4117 	cjne	a,ar7,00102$
                                   4118 ;	check.c:120: asciiToHex(fetched);
      001292 8D 82            [24] 4119 	mov	dpl,r5
      001294 12r0ErCC         [24] 4120 	lcall	_asciiToHex
                                   4121 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      001297 90r05rC9         [24] 4122 	mov	dptr,#___str_14
      00129A 75 F0 80         [24] 4123 	mov	b,#0x80
      00129D 12r0Cr4B         [24] 4124 	lcall	_LCD_string_write
      0012A0 80 09            [24] 4125 	sjmp	00103$
      0012A2                       4126 00102$:
                                   4127 ;	check.c:123: LCD_string_write("Check failed\n");
      0012A2 90r05rDD         [24] 4128 	mov	dptr,#___str_15
      0012A5 75 F0 80         [24] 4129 	mov	b,#0x80
      0012A8 12r0Cr4B         [24] 4130 	lcall	_LCD_string_write
      0012AB                       4131 00103$:
                                   4132 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      0012AB 90r05r8F         [24] 4133 	mov	dptr,#___str_10
      0012AE 75 F0 80         [24] 4134 	mov	b,#0x80
      0012B1 12r0Cr4B         [24] 4135 	lcall	_LCD_string_write
                                   4136 ;	check.c:128: do {
      0012B4                       4137 00104$:
                                   4138 ;	check.c:129: fetched = keyDetect();
      0012B4 12r0CrEA         [24] 4139 	lcall	_keyDetect
      0012B7 AF 82            [24] 4140 	mov	r7,dpl
                                   4141 ;	check.c:130: } while (fetched != '1');
      0012B9 BF 31 F8         [24] 4142 	cjne	r7,#0x31,00104$
                                   4143 ;	check.c:131: }
      0012BC 22               [24] 4144 	ret
                                   4145 ;------------------------------------------------------------
                                   4146 ;Allocation info for local variables in function 'move'
                                   4147 ;------------------------------------------------------------
                                   4148 ;origin                    Allocated to registers 
                                   4149 ;target                    Allocated with name '_move_target_65537_249'
                                   4150 ;sloc0                     Allocated with name '_move_sloc0_1_0'
                                   4151 ;sloc1                     Allocated with name '_move_sloc1_1_0'
                                   4152 ;startAdd                  Allocated with name '_move_startAdd_65537_249'
                                   4153 ;targetAdd                 Allocated with name '_move_targetAdd_65537_249'
                                   4154 ;i                         Allocated with name '_move_i_65537_249'
                                   4155 ;size                      Allocated with name '_move_size_65537_249'
                                   4156 ;o                         Allocated with name '_move_o_65537_249'
                                   4157 ;------------------------------------------------------------
                                   4158 ;	move.c:5: void move() {
                                   4159 ;	-----------------------------------------
                                   4160 ;	 function move
                                   4161 ;	-----------------------------------------
      0012BD                       4162 _move:
                                   4163 ;	move.c:7: fillScreen(GRAY);
      0012BD 90 D6 BA         [24] 4164 	mov	dptr,#0xd6ba
      0012C0 12r08r44         [24] 4165 	lcall	_fillScreen
                                   4166 ;	move.c:8: setCursor(0, 0);
      0012C3 E4               [12] 4167 	clr	a
      0012C4 F5*00            [12] 4168 	mov	_setCursor_PARM_2,a
      0012C6 F5*01            [12] 4169 	mov	(_setCursor_PARM_2 + 1),a
      0012C8 90 00 00         [24] 4170 	mov	dptr,#0x0000
      0012CB 12r00rB6         [24] 4171 	lcall	_setCursor
                                   4172 ;	move.c:18: setTextSize(2);
      0012CE 75 82 02         [24] 4173 	mov	dpl,#0x02
      0012D1 12r00rD0         [24] 4174 	lcall	_setTextSize
                                   4175 ;	move.c:19: LCD_string_write("Enter start address:\n");
      0012D4 90r05rEB         [24] 4176 	mov	dptr,#___str_16
      0012D7 75 F0 80         [24] 4177 	mov	b,#0x80
      0012DA 12r0Cr4B         [24] 4178 	lcall	_LCD_string_write
                                   4179 ;	move.c:20: startAdd = getAddress();
      0012DD 12r10r45         [24] 4180 	lcall	_getAddress
      0012E0 AE 82            [24] 4181 	mov	r6,dpl
      0012E2 AF 83            [24] 4182 	mov	r7,dph
                                   4183 ;	move.c:21: write('\n');
      0012E4 75 82 0A         [24] 4184 	mov	dpl,#0x0a
      0012E7 C0 07            [24] 4185 	push	ar7
      0012E9 C0 06            [24] 4186 	push	ar6
      0012EB 12r0BrDD         [24] 4187 	lcall	_write
                                   4188 ;	move.c:24: LCD_string_write("Enter target address:\n");
      0012EE 90r06r01         [24] 4189 	mov	dptr,#___str_17
      0012F1 75 F0 80         [24] 4190 	mov	b,#0x80
      0012F4 12r0Cr4B         [24] 4191 	lcall	_LCD_string_write
                                   4192 ;	move.c:25: targetAdd = getAddress();
      0012F7 12r10r45         [24] 4193 	lcall	_getAddress
      0012FA AC 82            [24] 4194 	mov	r4,dpl
      0012FC AD 83            [24] 4195 	mov	r5,dph
                                   4196 ;	move.c:26: write('\n');
      0012FE 75 82 0A         [24] 4197 	mov	dpl,#0x0a
      001301 C0 05            [24] 4198 	push	ar5
      001303 C0 04            [24] 4199 	push	ar4
      001305 12r0BrDD         [24] 4200 	lcall	_write
                                   4201 ;	move.c:29: LCD_string_write("Enter size:\n");
      001308 90r06r18         [24] 4202 	mov	dptr,#___str_18
      00130B 75 F0 80         [24] 4203 	mov	b,#0x80
      00130E 12r0Cr4B         [24] 4204 	lcall	_LCD_string_write
                                   4205 ;	move.c:30: size = getByte();
      001311 12r10rAC         [24] 4206 	lcall	_getByte
      001314 AB 82            [24] 4207 	mov	r3,dpl
                                   4208 ;	move.c:31: write('\n');
      001316 75 82 0A         [24] 4209 	mov	dpl,#0x0a
      001319 C0 03            [24] 4210 	push	ar3
      00131B 12r0BrDD         [24] 4211 	lcall	_write
                                   4212 ;	move.c:34: LCD_string_write("Move in progress...\n");
      00131E 90r06r25         [24] 4213 	mov	dptr,#___str_19
      001321 75 F0 80         [24] 4214 	mov	b,#0x80
      001324 12r0Cr4B         [24] 4215 	lcall	_LCD_string_write
      001327 D0 03            [24] 4216 	pop	ar3
      001329 D0 04            [24] 4217 	pop	ar4
      00132B D0 05            [24] 4218 	pop	ar5
      00132D D0 06            [24] 4219 	pop	ar6
      00132F D0 07            [24] 4220 	pop	ar7
                                   4221 ;	move.c:37: for (i = 0; i < size; i++) {
      001331 7A 00            [12] 4222 	mov	r2,#0x00
      001333                       4223 00109$:
      001333 C3               [12] 4224 	clr	c
      001334 EA               [12] 4225 	mov	a,r2
      001335 9B               [12] 4226 	subb	a,r3
      001336 50 6D            [24] 4227 	jnc	00104$
                                   4228 ;	move.c:39: if ((i + startAdd == __END_RAM__) || (i + targetAdd == __END_RAM__)) break;
      001338 C0 03            [24] 4229 	push	ar3
      00133A 8A*4E            [24] 4230 	mov	_move_sloc1_1_0,r2
      00133C 75*4F 00         [24] 4231 	mov	(_move_sloc1_1_0 + 1),#0x00
      00133F 85*4E*4C         [24] 4232 	mov	_move_sloc0_1_0,_move_sloc1_1_0
      001342 85*4F*4D         [24] 4233 	mov	(_move_sloc0_1_0 + 1),(_move_sloc1_1_0 + 1)
      001345 EE               [12] 4234 	mov	a,r6
      001346 25*4C            [12] 4235 	add	a,_move_sloc0_1_0
      001348 F9               [12] 4236 	mov	r1,a
      001349 EF               [12] 4237 	mov	a,r7
      00134A 35*4D            [12] 4238 	addc	a,(_move_sloc0_1_0 + 1)
      00134C FB               [12] 4239 	mov	r3,a
      00134D B9 FF 07         [24] 4240 	cjne	r1,#0xff,00135$
      001350 BB FF 04         [24] 4241 	cjne	r3,#0xff,00135$
      001353 D0 03            [24] 4242 	pop	ar3
      001355 80 4E            [24] 4243 	sjmp	00104$
      001357                       4244 00135$:
      001357 D0 03            [24] 4245 	pop	ar3
      001359 EC               [12] 4246 	mov	a,r4
      00135A 25*4C            [12] 4247 	add	a,_move_sloc0_1_0
      00135C F8               [12] 4248 	mov	r0,a
      00135D ED               [12] 4249 	mov	a,r5
      00135E 35*4D            [12] 4250 	addc	a,(_move_sloc0_1_0 + 1)
      001360 F9               [12] 4251 	mov	r1,a
      001361 B8 FF 05         [24] 4252 	cjne	r0,#0xff,00136$
      001364 B9 FF 02         [24] 4253 	cjne	r1,#0xff,00136$
      001367 80 3C            [24] 4254 	sjmp	00104$
      001369                       4255 00136$:
                                   4256 ;	move.c:44: IOM = 0;
      001369 C0 03            [24] 4257 	push	ar3
                                   4258 ;	assignBit
      00136B C2 B4            [12] 4259 	clr	_P3_4
                                   4260 ;	move.c:45: origin = (uint16_t __xdata*)(startAdd + i);
      00136D 8E*4C            [24] 4261 	mov	_move_sloc0_1_0,r6
      00136F 8F*4D            [24] 4262 	mov	(_move_sloc0_1_0 + 1),r7
      001371 E5*4E            [12] 4263 	mov	a,_move_sloc1_1_0
      001373 25*4C            [12] 4264 	add	a,_move_sloc0_1_0
      001375 F8               [12] 4265 	mov	r0,a
      001376 E5*4F            [12] 4266 	mov	a,(_move_sloc1_1_0 + 1)
      001378 35*4D            [12] 4267 	addc	a,(_move_sloc0_1_0 + 1)
      00137A FB               [12] 4268 	mov	r3,a
      00137B 88 82            [24] 4269 	mov	dpl,r0
      00137D 8B 83            [24] 4270 	mov	dph,r3
                                   4271 ;	move.c:46: target = (uint16_t __xdata*)(targetAdd + i);
      00137F 8C 01            [24] 4272 	mov	ar1,r4
      001381 8D 03            [24] 4273 	mov	ar3,r5
      001383 E5*4E            [12] 4274 	mov	a,_move_sloc1_1_0
      001385 29               [12] 4275 	add	a,r1
      001386 F9               [12] 4276 	mov	r1,a
      001387 E5*4F            [12] 4277 	mov	a,(_move_sloc1_1_0 + 1)
      001389 3B               [12] 4278 	addc	a,r3
      00138A FB               [12] 4279 	mov	r3,a
      00138B 89*4A            [24] 4280 	mov	_move_target_65537_249,r1
      00138D 8B*4B            [24] 4281 	mov	(_move_target_65537_249 + 1),r3
                                   4282 ;	move.c:47: o = *origin;
      00138F E0               [24] 4283 	movx	a,@dptr
      001390 F8               [12] 4284 	mov	r0,a
                                   4285 ;	move.c:48: *target = o;
      001391 7B 00            [12] 4286 	mov	r3,#0x00
      001393 85*4A 82         [24] 4287 	mov	dpl,_move_target_65537_249
      001396 85*4B 83         [24] 4288 	mov	dph,(_move_target_65537_249 + 1)
      001399 E8               [12] 4289 	mov	a,r0
      00139A F0               [24] 4290 	movx	@dptr,a
      00139B EB               [12] 4291 	mov	a,r3
      00139C A3               [24] 4292 	inc	dptr
      00139D F0               [24] 4293 	movx	@dptr,a
                                   4294 ;	move.c:49: IOM = 1;
                                   4295 ;	assignBit
      00139E D2 B4            [12] 4296 	setb	_P3_4
                                   4297 ;	move.c:37: for (i = 0; i < size; i++) {
      0013A0 0A               [12] 4298 	inc	r2
      0013A1 D0 03            [24] 4299 	pop	ar3
      0013A3 80 8E            [24] 4300 	sjmp	00109$
      0013A5                       4301 00104$:
                                   4302 ;	move.c:56: LCD_string_write("Done!\n");
      0013A5 90r06r3A         [24] 4303 	mov	dptr,#___str_20
      0013A8 75 F0 80         [24] 4304 	mov	b,#0x80
      0013AB 12r0Cr4B         [24] 4305 	lcall	_LCD_string_write
                                   4306 ;	move.c:57: LCD_string_write("Press 1 for menu\n");
      0013AE 90r05r8F         [24] 4307 	mov	dptr,#___str_10
      0013B1 75 F0 80         [24] 4308 	mov	b,#0x80
      0013B4 12r0Cr4B         [24] 4309 	lcall	_LCD_string_write
                                   4310 ;	move.c:59: do {
      0013B7                       4311 00105$:
                                   4312 ;	move.c:60: size = keyDetect();
      0013B7 12r0CrEA         [24] 4313 	lcall	_keyDetect
      0013BA AF 82            [24] 4314 	mov	r7,dpl
                                   4315 ;	move.c:61: } while (size != '1');
      0013BC BF 31 F8         [24] 4316 	cjne	r7,#0x31,00105$
                                   4317 ;	move.c:62: }
      0013BF 22               [24] 4318 	ret
                                   4319 ;------------------------------------------------------------
                                   4320 ;Allocation info for local variables in function 'editByte'
                                   4321 ;------------------------------------------------------------
                                   4322 ;ramAddress                Allocated to registers r6 r7 
                                   4323 ;add                       Allocated with name '_editByte_add_65536_253'
                                   4324 ;val                       Allocated with name '_editByte_val_65536_254'
                                   4325 ;new                       Allocated with name '_editByte_new_65536_254'
                                   4326 ;high                      Allocated with name '_editByte_high_65536_254'
                                   4327 ;low                       Allocated with name '_editByte_low_65536_254'
                                   4328 ;------------------------------------------------------------
                                   4329 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   4330 ;	-----------------------------------------
                                   4331 ;	 function editByte
                                   4332 ;	-----------------------------------------
      0013C0                       4333 _editByte:
      0013C0 AF 83            [24] 4334 	mov	r7,dph
      0013C2 E5 82            [12] 4335 	mov	a,dpl
      0013C4 90r00r1A         [24] 4336 	mov	dptr,#_editByte_add_65536_253
      0013C7 F0               [24] 4337 	movx	@dptr,a
      0013C8 EF               [12] 4338 	mov	a,r7
      0013C9 A3               [24] 4339 	inc	dptr
      0013CA F0               [24] 4340 	movx	@dptr,a
                                   4341 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      0013CB 90r00r1A         [24] 4342 	mov	dptr,#_editByte_add_65536_253
      0013CE E0               [24] 4343 	movx	a,@dptr
      0013CF FE               [12] 4344 	mov	r6,a
      0013D0 A3               [24] 4345 	inc	dptr
      0013D1 E0               [24] 4346 	movx	a,@dptr
      0013D2 FF               [12] 4347 	mov	r7,a
      0013D3 FC               [12] 4348 	mov	r4,a
                                   4349 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      0013D4 8E 05            [24] 4350 	mov	ar5,r6
                                   4351 ;	edit.c:16: asciiToHex(high);
      0013D6 8C 82            [24] 4352 	mov	dpl,r4
      0013D8 C0 07            [24] 4353 	push	ar7
      0013DA C0 06            [24] 4354 	push	ar6
      0013DC C0 05            [24] 4355 	push	ar5
      0013DE C0 04            [24] 4356 	push	ar4
      0013E0 12r0ErCC         [24] 4357 	lcall	_asciiToHex
      0013E3 D0 04            [24] 4358 	pop	ar4
      0013E5 D0 05            [24] 4359 	pop	ar5
                                   4360 ;	edit.c:17: asciiToHex(low);
      0013E7 8D 82            [24] 4361 	mov	dpl,r5
      0013E9 C0 05            [24] 4362 	push	ar5
      0013EB C0 04            [24] 4363 	push	ar4
      0013ED 12r0ErCC         [24] 4364 	lcall	_asciiToHex
                                   4365 ;	edit.c:19: LCD_string_write(": ");
      0013F0 90r06r41         [24] 4366 	mov	dptr,#___str_21
      0013F3 75 F0 80         [24] 4367 	mov	b,#0x80
      0013F6 12r0Cr4B         [24] 4368 	lcall	_LCD_string_write
      0013F9 D0 04            [24] 4369 	pop	ar4
      0013FB D0 05            [24] 4370 	pop	ar5
      0013FD D0 06            [24] 4371 	pop	ar6
      0013FF D0 07            [24] 4372 	pop	ar7
                                   4373 ;	edit.c:22: IOM = 0;
                                   4374 ;	assignBit
      001401 C2 B4            [12] 4375 	clr	_P3_4
                                   4376 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   4377 ;	edit.c:24: val = *ramAddress;
      001403 8E 82            [24] 4378 	mov	dpl,r6
      001405 8F 83            [24] 4379 	mov	dph,r7
      001407 E0               [24] 4380 	movx	a,@dptr
      001408 FB               [12] 4381 	mov	r3,a
                                   4382 ;	edit.c:25: IOM = 1;
                                   4383 ;	assignBit
      001409 D2 B4            [12] 4384 	setb	_P3_4
                                   4385 ;	edit.c:28: asciiToHex(val);
      00140B 8B 82            [24] 4386 	mov	dpl,r3
      00140D C0 07            [24] 4387 	push	ar7
      00140F C0 06            [24] 4388 	push	ar6
      001411 C0 05            [24] 4389 	push	ar5
      001413 C0 04            [24] 4390 	push	ar4
      001415 12r0ErCC         [24] 4391 	lcall	_asciiToHex
                                   4392 ;	edit.c:31: write('\n');
      001418 75 82 0A         [24] 4393 	mov	dpl,#0x0a
      00141B 12r0BrDD         [24] 4394 	lcall	_write
                                   4395 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      00141E 90r06r44         [24] 4396 	mov	dptr,#___str_22
      001421 75 F0 80         [24] 4397 	mov	b,#0x80
      001424 12r0Cr4B         [24] 4398 	lcall	_LCD_string_write
                                   4399 ;	edit.c:33: new = getByte();
      001427 12r10rAC         [24] 4400 	lcall	_getByte
      00142A AB 82            [24] 4401 	mov	r3,dpl
                                   4402 ;	edit.c:34: write('\n');
      00142C 75 82 0A         [24] 4403 	mov	dpl,#0x0a
      00142F C0 03            [24] 4404 	push	ar3
      001431 12r0BrDD         [24] 4405 	lcall	_write
      001434 D0 03            [24] 4406 	pop	ar3
      001436 D0 04            [24] 4407 	pop	ar4
      001438 D0 05            [24] 4408 	pop	ar5
      00143A D0 06            [24] 4409 	pop	ar6
      00143C D0 07            [24] 4410 	pop	ar7
                                   4411 ;	edit.c:37: IOM = 0;
                                   4412 ;	assignBit
      00143E C2 B4            [12] 4413 	clr	_P3_4
                                   4414 ;	edit.c:38: *ramAddress = new;
      001440 7A 00            [12] 4415 	mov	r2,#0x00
      001442 8E 82            [24] 4416 	mov	dpl,r6
      001444 8F 83            [24] 4417 	mov	dph,r7
      001446 EB               [12] 4418 	mov	a,r3
      001447 F0               [24] 4419 	movx	@dptr,a
      001448 EA               [12] 4420 	mov	a,r2
      001449 A3               [24] 4421 	inc	dptr
      00144A F0               [24] 4422 	movx	@dptr,a
                                   4423 ;	edit.c:39: val = *ramAddress;
                                   4424 ;	edit.c:40: IOM = 1;
                                   4425 ;	assignBit
      00144B D2 B4            [12] 4426 	setb	_P3_4
                                   4427 ;	edit.c:43: asciiToHex(high);
      00144D 8C 82            [24] 4428 	mov	dpl,r4
      00144F C0 05            [24] 4429 	push	ar5
      001451 C0 03            [24] 4430 	push	ar3
      001453 12r0ErCC         [24] 4431 	lcall	_asciiToHex
      001456 D0 03            [24] 4432 	pop	ar3
      001458 D0 05            [24] 4433 	pop	ar5
                                   4434 ;	edit.c:44: asciiToHex(low);
      00145A 8D 82            [24] 4435 	mov	dpl,r5
      00145C C0 03            [24] 4436 	push	ar3
      00145E 12r0ErCC         [24] 4437 	lcall	_asciiToHex
                                   4438 ;	edit.c:45: LCD_string_write(": ");
      001461 90r06r41         [24] 4439 	mov	dptr,#___str_21
      001464 75 F0 80         [24] 4440 	mov	b,#0x80
      001467 12r0Cr4B         [24] 4441 	lcall	_LCD_string_write
      00146A D0 03            [24] 4442 	pop	ar3
                                   4443 ;	edit.c:46: asciiToHex(val);
      00146C 8B 82            [24] 4444 	mov	dpl,r3
      00146E 12r0ErCC         [24] 4445 	lcall	_asciiToHex
                                   4446 ;	edit.c:47: write('\n');
      001471 75 82 0A         [24] 4447 	mov	dpl,#0x0a
                                   4448 ;	edit.c:49: }
      001474 02r0BrDD         [24] 4449 	ljmp	_write
                                   4450 ;------------------------------------------------------------
                                   4451 ;Allocation info for local variables in function 'edit'
                                   4452 ;------------------------------------------------------------
                                   4453 ;input                     Allocated with name '_edit_input_65537_256'
                                   4454 ;add                       Allocated with name '_edit_add_65537_256'
                                   4455 ;------------------------------------------------------------
                                   4456 ;	edit.c:55: void edit() {
                                   4457 ;	-----------------------------------------
                                   4458 ;	 function edit
                                   4459 ;	-----------------------------------------
      001477                       4460 _edit:
                                   4461 ;	edit.c:57: fillScreen(GRAY);
      001477 90 D6 BA         [24] 4462 	mov	dptr,#0xd6ba
      00147A 12r08r44         [24] 4463 	lcall	_fillScreen
                                   4464 ;	edit.c:58: setCursor(0, 0);
      00147D E4               [12] 4465 	clr	a
      00147E F5*00            [12] 4466 	mov	_setCursor_PARM_2,a
      001480 F5*01            [12] 4467 	mov	(_setCursor_PARM_2 + 1),a
      001482 90 00 00         [24] 4468 	mov	dptr,#0x0000
      001485 12r00rB6         [24] 4469 	lcall	_setCursor
                                   4470 ;	edit.c:59: setTextSize(2);
      001488 75 82 02         [24] 4471 	mov	dpl,#0x02
      00148B 12r00rD0         [24] 4472 	lcall	_setTextSize
                                   4473 ;	edit.c:66: LCD_string_write("Enter address:\n");
      00148E 90r06r55         [24] 4474 	mov	dptr,#___str_23
      001491 75 F0 80         [24] 4475 	mov	b,#0x80
      001494 12r0Cr4B         [24] 4476 	lcall	_LCD_string_write
                                   4477 ;	edit.c:67: add = getAddress();
      001497 12r10r45         [24] 4478 	lcall	_getAddress
      00149A AE 82            [24] 4479 	mov	r6,dpl
      00149C AF 83            [24] 4480 	mov	r7,dph
                                   4481 ;	edit.c:68: write('\n');
      00149E 75 82 0A         [24] 4482 	mov	dpl,#0x0a
      0014A1 C0 07            [24] 4483 	push	ar7
      0014A3 C0 06            [24] 4484 	push	ar6
      0014A5 12r0BrDD         [24] 4485 	lcall	_write
      0014A8 D0 06            [24] 4486 	pop	ar6
      0014AA D0 07            [24] 4487 	pop	ar7
                                   4488 ;	edit.c:71: editByte(add);
      0014AC 8E 82            [24] 4489 	mov	dpl,r6
      0014AE 8F 83            [24] 4490 	mov	dph,r7
      0014B0 C0 07            [24] 4491 	push	ar7
      0014B2 C0 06            [24] 4492 	push	ar6
      0014B4 12r13rC0         [24] 4493 	lcall	_editByte
      0014B7 D0 06            [24] 4494 	pop	ar6
      0014B9 D0 07            [24] 4495 	pop	ar7
                                   4496 ;	edit.c:74: do {
      0014BB                       4497 00111$:
                                   4498 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      0014BB 90r05r8F         [24] 4499 	mov	dptr,#___str_10
      0014BE 75 F0 80         [24] 4500 	mov	b,#0x80
      0014C1 C0 07            [24] 4501 	push	ar7
      0014C3 C0 06            [24] 4502 	push	ar6
      0014C5 12r0Cr4B         [24] 4503 	lcall	_LCD_string_write
                                   4504 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      0014C8 90r06r65         [24] 4505 	mov	dptr,#___str_24
      0014CB 75 F0 80         [24] 4506 	mov	b,#0x80
      0014CE 12r0Cr4B         [24] 4507 	lcall	_LCD_string_write
                                   4508 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      0014D1 90r06r7C         [24] 4509 	mov	dptr,#___str_25
      0014D4 75 F0 80         [24] 4510 	mov	b,#0x80
      0014D7 12r0Cr4B         [24] 4511 	lcall	_LCD_string_write
                                   4512 ;	edit.c:78: input = keyDetect();
      0014DA 12r0CrEA         [24] 4513 	lcall	_keyDetect
      0014DD AD 82            [24] 4514 	mov	r5,dpl
      0014DF D0 06            [24] 4515 	pop	ar6
      0014E1 D0 07            [24] 4516 	pop	ar7
      0014E3 90r00r1C         [24] 4517 	mov	dptr,#_edit_input_65537_256
      0014E6 ED               [12] 4518 	mov	a,r5
      0014E7 F0               [24] 4519 	movx	@dptr,a
                                   4520 ;	edit.c:80: if (input == '1') {
      0014E8 BD 31 01         [24] 4521 	cjne	r5,#0x31,00141$
      0014EB 22               [24] 4522 	ret
      0014EC                       4523 00141$:
                                   4524 ;	edit.c:82: } else if (input =='2') {
      0014EC BD 32 2F         [24] 4525 	cjne	r5,#0x32,00104$
                                   4526 ;	edit.c:83: fillScreen(GRAY);
      0014EF 90 D6 BA         [24] 4527 	mov	dptr,#0xd6ba
      0014F2 C0 07            [24] 4528 	push	ar7
      0014F4 C0 06            [24] 4529 	push	ar6
      0014F6 12r08r44         [24] 4530 	lcall	_fillScreen
                                   4531 ;	edit.c:84: setCursor(0, 0);
      0014F9 E4               [12] 4532 	clr	a
      0014FA F5*00            [12] 4533 	mov	_setCursor_PARM_2,a
      0014FC F5*01            [12] 4534 	mov	(_setCursor_PARM_2 + 1),a
      0014FE 90 00 00         [24] 4535 	mov	dptr,#0x0000
      001501 12r00rB6         [24] 4536 	lcall	_setCursor
      001504 D0 06            [24] 4537 	pop	ar6
      001506 D0 07            [24] 4538 	pop	ar7
                                   4539 ;	edit.c:86: editByte(add);
      001508 8E 82            [24] 4540 	mov	dpl,r6
      00150A 8F 83            [24] 4541 	mov	dph,r7
      00150C C0 07            [24] 4542 	push	ar7
      00150E C0 06            [24] 4543 	push	ar6
      001510 12r13rC0         [24] 4544 	lcall	_editByte
      001513 D0 06            [24] 4545 	pop	ar6
      001515 D0 07            [24] 4546 	pop	ar7
                                   4547 ;	edit.c:88: input = 0;
      001517 90r00r1C         [24] 4548 	mov	dptr,#_edit_input_65537_256
      00151A E4               [12] 4549 	clr	a
      00151B F0               [24] 4550 	movx	@dptr,a
      00151C 80 35            [24] 4551 	sjmp	00112$
      00151E                       4552 00104$:
                                   4553 ;	edit.c:89: } else if (input == '3') {
      00151E BD 33 32         [24] 4554 	cjne	r5,#0x33,00112$
                                   4555 ;	edit.c:90: fillScreen(GRAY);
      001521 90 D6 BA         [24] 4556 	mov	dptr,#0xd6ba
      001524 C0 07            [24] 4557 	push	ar7
      001526 C0 06            [24] 4558 	push	ar6
      001528 12r08r44         [24] 4559 	lcall	_fillScreen
                                   4560 ;	edit.c:91: setCursor(0, 0);
      00152B E4               [12] 4561 	clr	a
      00152C F5*00            [12] 4562 	mov	_setCursor_PARM_2,a
      00152E F5*01            [12] 4563 	mov	(_setCursor_PARM_2 + 1),a
      001530 90 00 00         [24] 4564 	mov	dptr,#0x0000
      001533 12r00rB6         [24] 4565 	lcall	_setCursor
      001536 D0 06            [24] 4566 	pop	ar6
      001538 D0 07            [24] 4567 	pop	ar7
                                   4568 ;	edit.c:93: editByte(++add);
      00153A 0E               [12] 4569 	inc	r6
      00153B BE 00 01         [24] 4570 	cjne	r6,#0x00,00146$
      00153E 0F               [12] 4571 	inc	r7
      00153F                       4572 00146$:
      00153F 8E 82            [24] 4573 	mov	dpl,r6
      001541 8F 83            [24] 4574 	mov	dph,r7
      001543 C0 07            [24] 4575 	push	ar7
      001545 C0 06            [24] 4576 	push	ar6
      001547 12r13rC0         [24] 4577 	lcall	_editByte
      00154A D0 06            [24] 4578 	pop	ar6
      00154C D0 07            [24] 4579 	pop	ar7
                                   4580 ;	edit.c:95: input = 0;
      00154E 90r00r1C         [24] 4581 	mov	dptr,#_edit_input_65537_256
      001551 E4               [12] 4582 	clr	a
      001552 F0               [24] 4583 	movx	@dptr,a
      001553                       4584 00112$:
                                   4585 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      001553 90r00r1C         [24] 4586 	mov	dptr,#_edit_input_65537_256
      001556 E0               [24] 4587 	movx	a,@dptr
      001557 FD               [12] 4588 	mov	r5,a
      001558 BD 31 01         [24] 4589 	cjne	r5,#0x31,00147$
      00155B 22               [24] 4590 	ret
      00155C                       4591 00147$:
      00155C BD 32 01         [24] 4592 	cjne	r5,#0x32,00148$
      00155F 22               [24] 4593 	ret
      001560                       4594 00148$:
      001560 BD 33 01         [24] 4595 	cjne	r5,#0x33,00149$
      001563 22               [24] 4596 	ret
      001564                       4597 00149$:
      001564 02r14rBB         [24] 4598 	ljmp	00111$
                                   4599 ;	edit.c:99: }
      001567 22               [24] 4600 	ret
                                   4601 ;------------------------------------------------------------
                                   4602 ;Allocation info for local variables in function 'printCount'
                                   4603 ;------------------------------------------------------------
                                   4604 ;num                       Allocated with name '_printCount_PARM_2'
                                   4605 ;key                       Allocated with name '_printCount_PARM_3'
                                   4606 ;index                     Allocated with name '_printCount_PARM_4'
                                   4607 ;count                     Allocated with name '_printCount_PARM_5'
                                   4608 ;start                     Allocated to registers r6 r7 
                                   4609 ;i                         Allocated to registers r4 
                                   4610 ;found                     Allocated to registers r3 
                                   4611 ;high                      Allocated to registers r2 
                                   4612 ;low                       Allocated to registers r1 
                                   4613 ;ramAddress                Allocated to registers 
                                   4614 ;------------------------------------------------------------
                                   4615 ;	count3.c:1: void printCount(uint16_t start, uint8_t num, uint8_t key, uint8_t index, uint8_t count) {
                                   4616 ;	-----------------------------------------
                                   4617 ;	 function printCount
                                   4618 ;	-----------------------------------------
      001568                       4619 _printCount:
      001568 AE 82            [24] 4620 	mov	r6,dpl
      00156A AF 83            [24] 4621 	mov	r7,dph
                                   4622 ;	count3.c:3: fillScreen(GRAY);
      00156C 90 D6 BA         [24] 4623 	mov	dptr,#0xd6ba
      00156F C0 07            [24] 4624 	push	ar7
      001571 C0 06            [24] 4625 	push	ar6
      001573 12r08r44         [24] 4626 	lcall	_fillScreen
                                   4627 ;	count3.c:4: setCursor(0, 0);
      001576 E4               [12] 4628 	clr	a
      001577 F5*00            [12] 4629 	mov	_setCursor_PARM_2,a
      001579 F5*01            [12] 4630 	mov	(_setCursor_PARM_2 + 1),a
      00157B 90 00 00         [24] 4631 	mov	dptr,#0x0000
      00157E 12r00rB6         [24] 4632 	lcall	_setCursor
                                   4633 ;	count3.c:5: setTextSize(2);
      001581 75 82 02         [24] 4634 	mov	dpl,#0x02
      001584 12r00rD0         [24] 4635 	lcall	_setTextSize
      001587 D0 06            [24] 4636 	pop	ar6
      001589 D0 07            [24] 4637 	pop	ar7
                                   4638 ;	count3.c:14: if (count == 0) {
      00158B E5*53            [12] 4639 	mov	a,_printCount_PARM_5
      00158D 70 13            [24] 4640 	jnz	00102$
                                   4641 ;	count3.c:15: LCD_string_write("No matches found\n");
      00158F 90r06r9A         [24] 4642 	mov	dptr,#___str_26
      001592 75 F0 80         [24] 4643 	mov	b,#0x80
      001595 C0 07            [24] 4644 	push	ar7
      001597 C0 06            [24] 4645 	push	ar6
      001599 12r0Cr4B         [24] 4646 	lcall	_LCD_string_write
      00159C D0 06            [24] 4647 	pop	ar6
      00159E D0 07            [24] 4648 	pop	ar7
      0015A0 80 17            [24] 4649 	sjmp	00115$
      0015A2                       4650 00102$:
                                   4651 ;	count3.c:17: asciiToHex(count);
      0015A2 85*53 82         [24] 4652 	mov	dpl,_printCount_PARM_5
      0015A5 C0 07            [24] 4653 	push	ar7
      0015A7 C0 06            [24] 4654 	push	ar6
      0015A9 12r0ErCC         [24] 4655 	lcall	_asciiToHex
                                   4656 ;	count3.c:18: LCD_string_write(" matches found\n");
      0015AC 90r06rAC         [24] 4657 	mov	dptr,#___str_27
      0015AF 75 F0 80         [24] 4658 	mov	b,#0x80
      0015B2 12r0Cr4B         [24] 4659 	lcall	_LCD_string_write
      0015B5 D0 06            [24] 4660 	pop	ar6
      0015B7 D0 07            [24] 4661 	pop	ar7
                                   4662 ;	count3.c:22: for (i = 0; i < num; i++) {
      0015B9                       4663 00115$:
      0015B9 AD*52            [24] 4664 	mov	r5,_printCount_PARM_4
      0015BB 7C 00            [12] 4665 	mov	r4,#0x00
      0015BD                       4666 00108$:
      0015BD C3               [12] 4667 	clr	c
      0015BE EC               [12] 4668 	mov	a,r4
      0015BF 95*50            [12] 4669 	subb	a,_printCount_PARM_2
      0015C1 40 01            [24] 4670 	jc	00130$
      0015C3 22               [24] 4671 	ret
      0015C4                       4672 00130$:
                                   4673 ;	count3.c:25: IOM = 0;
                                   4674 ;	assignBit
      0015C4 C2 B4            [12] 4675 	clr	_P3_4
                                   4676 ;	count3.c:26: ramAddress = (uint16_t __xdata*)(start + i);
      0015C6 8C 02            [24] 4677 	mov	ar2,r4
      0015C8 7B 00            [12] 4678 	mov	r3,#0x00
      0015CA 8E 00            [24] 4679 	mov	ar0,r6
      0015CC 8F 01            [24] 4680 	mov	ar1,r7
      0015CE EA               [12] 4681 	mov	a,r2
      0015CF 28               [12] 4682 	add	a,r0
      0015D0 F8               [12] 4683 	mov	r0,a
      0015D1 EB               [12] 4684 	mov	a,r3
      0015D2 39               [12] 4685 	addc	a,r1
      0015D3 F9               [12] 4686 	mov	r1,a
      0015D4 88 82            [24] 4687 	mov	dpl,r0
      0015D6 89 83            [24] 4688 	mov	dph,r1
                                   4689 ;	count3.c:27: found = *ramAddress;
      0015D8 E0               [24] 4690 	movx	a,@dptr
      0015D9 FB               [12] 4691 	mov	r3,a
                                   4692 ;	count3.c:30: high = HIGHBYTE(start + i);
      0015DA 89 02            [24] 4693 	mov	ar2,r1
                                   4694 ;	count3.c:31: low = LOWBYTE(start + i);
      0015DC 8E 01            [24] 4695 	mov	ar1,r6
      0015DE EC               [12] 4696 	mov	a,r4
      0015DF 29               [12] 4697 	add	a,r1
      0015E0 F9               [12] 4698 	mov	r1,a
                                   4699 ;	count3.c:42: if (found == key) {
      0015E1 EB               [12] 4700 	mov	a,r3
      0015E2 B5*51 3B         [24] 4701 	cjne	a,_printCount_PARM_3,00109$
                                   4702 ;	count3.c:44: asciiToHex(index++);
      0015E5 8D 82            [24] 4703 	mov	dpl,r5
      0015E7 0D               [12] 4704 	inc	r5
      0015E8 C0 07            [24] 4705 	push	ar7
      0015EA C0 06            [24] 4706 	push	ar6
      0015EC C0 05            [24] 4707 	push	ar5
      0015EE C0 04            [24] 4708 	push	ar4
      0015F0 C0 02            [24] 4709 	push	ar2
      0015F2 C0 01            [24] 4710 	push	ar1
      0015F4 12r0ErCC         [24] 4711 	lcall	_asciiToHex
                                   4712 ;	count3.c:45: LCD_string_write(": ");
      0015F7 90r06r41         [24] 4713 	mov	dptr,#___str_21
      0015FA 75 F0 80         [24] 4714 	mov	b,#0x80
      0015FD 12r0Cr4B         [24] 4715 	lcall	_LCD_string_write
      001600 D0 01            [24] 4716 	pop	ar1
      001602 D0 02            [24] 4717 	pop	ar2
                                   4718 ;	count3.c:48: asciiToHex(high);
      001604 8A 82            [24] 4719 	mov	dpl,r2
      001606 C0 01            [24] 4720 	push	ar1
      001608 12r0ErCC         [24] 4721 	lcall	_asciiToHex
      00160B D0 01            [24] 4722 	pop	ar1
                                   4723 ;	count3.c:49: asciiToHex(low);
      00160D 89 82            [24] 4724 	mov	dpl,r1
      00160F 12r0ErCC         [24] 4725 	lcall	_asciiToHex
                                   4726 ;	count3.c:50: write('\n');
      001612 75 82 0A         [24] 4727 	mov	dpl,#0x0a
      001615 12r0BrDD         [24] 4728 	lcall	_write
      001618 D0 04            [24] 4729 	pop	ar4
      00161A D0 05            [24] 4730 	pop	ar5
      00161C D0 06            [24] 4731 	pop	ar6
      00161E D0 07            [24] 4732 	pop	ar7
      001620                       4733 00109$:
                                   4734 ;	count3.c:22: for (i = 0; i < num; i++) {
      001620 0C               [12] 4735 	inc	r4
                                   4736 ;	count3.c:53: }
      001621 02r15rBD         [24] 4737 	ljmp	00108$
                                   4738 ;------------------------------------------------------------
                                   4739 ;Allocation info for local variables in function 'count'
                                   4740 ;------------------------------------------------------------
                                   4741 ;key                       Allocated with name '_count_key_65537_270'
                                   4742 ;i                         Allocated to registers r2 
                                   4743 ;n                         Allocated with name '_count_n_65537_270'
                                   4744 ;found                     Allocated to registers r4 
                                   4745 ;size                      Allocated with name '_count_size_65537_270'
                                   4746 ;index                     Allocated with name '_count_index_65537_270'
                                   4747 ;pages                     Allocated with name '_count_pages_65537_270'
                                   4748 ;address                   Allocated to registers r5 r6 
                                   4749 ;ramAddress                Allocated to registers 
                                   4750 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                   4751 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                   4752 ;sloc2                     Allocated with name '_count_sloc2_1_0'
                                   4753 ;sloc3                     Allocated with name '_count_sloc3_1_0'
                                   4754 ;sloc4                     Allocated with name '_count_sloc4_1_0'
                                   4755 ;input                     Allocated with name '_count_input_65537_270'
                                   4756 ;page                      Allocated with name '_count_page_65537_270'
                                   4757 ;------------------------------------------------------------
                                   4758 ;	count3.c:55: void count() {
                                   4759 ;	-----------------------------------------
                                   4760 ;	 function count
                                   4761 ;	-----------------------------------------
      001624                       4762 _count:
                                   4763 ;	count3.c:57: fillScreen(GRAY);
      001624 90 D6 BA         [24] 4764 	mov	dptr,#0xd6ba
      001627 12r08r44         [24] 4765 	lcall	_fillScreen
                                   4766 ;	count3.c:58: setCursor(0, 0);
      00162A E4               [12] 4767 	clr	a
      00162B F5*00            [12] 4768 	mov	_setCursor_PARM_2,a
      00162D F5*01            [12] 4769 	mov	(_setCursor_PARM_2 + 1),a
      00162F 90 00 00         [24] 4770 	mov	dptr,#0x0000
      001632 12r00rB6         [24] 4771 	lcall	_setCursor
                                   4772 ;	count3.c:59: setTextSize(2);
      001635 75 82 02         [24] 4773 	mov	dpl,#0x02
      001638 12r00rD0         [24] 4774 	lcall	_setTextSize
                                   4775 ;	count3.c:68: __xdata uint8_t page = 1;
      00163B 90r00r1D         [24] 4776 	mov	dptr,#_count_page_65537_270
      00163E 74 01            [12] 4777 	mov	a,#0x01
      001640 F0               [24] 4778 	movx	@dptr,a
                                   4779 ;	count3.c:75: LCD_string_write("Enter byte to count:\n");
      001641 90r06rBC         [24] 4780 	mov	dptr,#___str_28
      001644 75 F0 80         [24] 4781 	mov	b,#0x80
      001647 12r0Cr4B         [24] 4782 	lcall	_LCD_string_write
                                   4783 ;	count3.c:76: key = getByte();
      00164A 12r10rAC         [24] 4784 	lcall	_getByte
      00164D 85 82*54         [24] 4785 	mov	_count_key_65537_270,dpl
                                   4786 ;	count3.c:77: write('\n');
      001650 75 82 0A         [24] 4787 	mov	dpl,#0x0a
      001653 12r0BrDD         [24] 4788 	lcall	_write
                                   4789 ;	count3.c:80: LCD_string_write("Enter start address:\n");
      001656 90r05rEB         [24] 4790 	mov	dptr,#___str_16
      001659 75 F0 80         [24] 4791 	mov	b,#0x80
      00165C 12r0Cr4B         [24] 4792 	lcall	_LCD_string_write
                                   4793 ;	count3.c:81: address = getAddress();
      00165F 12r10r45         [24] 4794 	lcall	_getAddress
      001662 AD 82            [24] 4795 	mov	r5,dpl
      001664 AE 83            [24] 4796 	mov	r6,dph
                                   4797 ;	count3.c:82: write('\n');
      001666 75 82 0A         [24] 4798 	mov	dpl,#0x0a
      001669 C0 06            [24] 4799 	push	ar6
      00166B C0 05            [24] 4800 	push	ar5
      00166D 12r0BrDD         [24] 4801 	lcall	_write
                                   4802 ;	count3.c:85: LCD_string_write("Enter block size:\n");
      001670 90r06rD2         [24] 4803 	mov	dptr,#___str_29
      001673 75 F0 80         [24] 4804 	mov	b,#0x80
      001676 12r0Cr4B         [24] 4805 	lcall	_LCD_string_write
                                   4806 ;	count3.c:86: size = getByte();
      001679 12r10rAC         [24] 4807 	lcall	_getByte
      00167C 85 82*56         [24] 4808 	mov	_count_size_65537_270,dpl
                                   4809 ;	count3.c:87: write('\n');
      00167F 75 82 0A         [24] 4810 	mov	dpl,#0x0a
      001682 12r0BrDD         [24] 4811 	lcall	_write
      001685 D0 05            [24] 4812 	pop	ar5
      001687 D0 06            [24] 4813 	pop	ar6
                                   4814 ;	count3.c:90: for (i = 0; i < size; i++) {
      001689 75*55 00         [24] 4815 	mov	_count_n_65537_270,#0x00
      00168C 7A 00            [12] 4816 	mov	r2,#0x00
      00168E                       4817 00132$:
      00168E C3               [12] 4818 	clr	c
      00168F EA               [12] 4819 	mov	a,r2
      001690 95*56            [12] 4820 	subb	a,_count_size_65537_270
      001692 50 21            [24] 4821 	jnc	00154$
                                   4822 ;	count3.c:91: IOM = 0;
                                   4823 ;	assignBit
      001694 C2 B4            [12] 4824 	clr	_P3_4
                                   4825 ;	count3.c:92: ramAddress = (uint16_t __xdata*)(address + i);
      001696 8A 00            [24] 4826 	mov	ar0,r2
      001698 79 00            [12] 4827 	mov	r1,#0x00
      00169A 8D 03            [24] 4828 	mov	ar3,r5
      00169C 8E 04            [24] 4829 	mov	ar4,r6
      00169E E8               [12] 4830 	mov	a,r0
      00169F 2B               [12] 4831 	add	a,r3
      0016A0 FB               [12] 4832 	mov	r3,a
      0016A1 E9               [12] 4833 	mov	a,r1
      0016A2 3C               [12] 4834 	addc	a,r4
      0016A3 FC               [12] 4835 	mov	r4,a
      0016A4 8B 82            [24] 4836 	mov	dpl,r3
      0016A6 8C 83            [24] 4837 	mov	dph,r4
                                   4838 ;	count3.c:93: found = *ramAddress;
      0016A8 E0               [24] 4839 	movx	a,@dptr
      0016A9 FC               [12] 4840 	mov	r4,a
                                   4841 ;	count3.c:94: IOM = 1;
                                   4842 ;	assignBit
      0016AA D2 B4            [12] 4843 	setb	_P3_4
                                   4844 ;	count3.c:96: if (found == key) n++;
      0016AC EC               [12] 4845 	mov	a,r4
      0016AD B5*54 02         [24] 4846 	cjne	a,_count_key_65537_270,00133$
      0016B0 05*55            [12] 4847 	inc	_count_n_65537_270
      0016B2                       4848 00133$:
                                   4849 ;	count3.c:90: for (i = 0; i < size; i++) {
      0016B2 0A               [12] 4850 	inc	r2
      0016B3 80 D9            [24] 4851 	sjmp	00132$
      0016B5                       4852 00154$:
      0016B5 AC*55            [24] 4853 	mov	r4,_count_n_65537_270
                                   4854 ;	count3.c:101: printCount(address, NUM, key, index, n);
      0016B7 75*50 0F         [24] 4855 	mov	_printCount_PARM_2,#0x0f
      0016BA 85*54*51         [24] 4856 	mov	_printCount_PARM_3,_count_key_65537_270
      0016BD 75*52 00         [24] 4857 	mov	_printCount_PARM_4,#0x00
      0016C0 85*55*53         [24] 4858 	mov	_printCount_PARM_5,_count_n_65537_270
      0016C3 8D 82            [24] 4859 	mov	dpl,r5
      0016C5 8E 83            [24] 4860 	mov	dph,r6
      0016C7 C0 06            [24] 4861 	push	ar6
      0016C9 C0 05            [24] 4862 	push	ar5
      0016CB C0 04            [24] 4863 	push	ar4
      0016CD 12r15r68         [24] 4864 	lcall	_printCount
                                   4865 ;	count3.c:102: index += NUM;
      0016D0 75*57 0F         [24] 4866 	mov	_count_index_65537_270,#0x0f
                                   4867 ;	count3.c:108: pages = size / NUM;
      0016D3 A9*56            [24] 4868 	mov	r1,_count_size_65537_270
      0016D5 7A 00            [12] 4869 	mov	r2,#0x00
      0016D7 75*00 0F         [24] 4870 	mov	__divsint_PARM_2,#0x0f
                                   4871 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0016DA 8A*01            [24] 4872 	mov	(__divsint_PARM_2 + 1),r2
      0016DC 89 82            [24] 4873 	mov	dpl,r1
      0016DE 8A 83            [24] 4874 	mov	dph,r2
      0016E0 12r00r00         [24] 4875 	lcall	__divsint
      0016E3 A9 82            [24] 4876 	mov	r1,dpl
      0016E5 D0 04            [24] 4877 	pop	ar4
      0016E7 D0 05            [24] 4878 	pop	ar5
      0016E9 D0 06            [24] 4879 	pop	ar6
      0016EB 89*58            [24] 4880 	mov	_count_pages_65537_270,r1
                                   4881 ;	count3.c:111: do {
      0016ED C3               [12] 4882 	clr	c
      0016EE 74 0F            [12] 4883 	mov	a,#0x0f
      0016F0 95*55            [12] 4884 	subb	a,_count_n_65537_270
      0016F2 E4               [12] 4885 	clr	a
      0016F3 33               [12] 4886 	rlc	a
      0016F4 FA               [12] 4887 	mov	r2,a
      0016F5 F8               [12] 4888 	mov	r0,a
      0016F6 8A*59            [24] 4889 	mov	_count_sloc0_1_0,r2
      0016F8 8A*5A            [24] 4890 	mov	_count_sloc1_1_0,r2
      0016FA 8A*5B            [24] 4891 	mov	_count_sloc2_1_0,r2
      0016FC                       4892 00128$:
                                   4893 ;	count3.c:113: if (page != 1 && page != pages && n > NUM) {
      0016FC 90r00r1D         [24] 4894 	mov	dptr,#_count_page_65537_270
      0016FF E0               [24] 4895 	movx	a,@dptr
      001700 F5*5C            [12] 4896 	mov	_count_sloc3_1_0,a
      001702 74 01            [12] 4897 	mov	a,#0x01
      001704 B5*5C 02         [24] 4898 	cjne	a,_count_sloc3_1_0,00212$
      001707 80 32            [24] 4899 	sjmp	00112$
      001709                       4900 00212$:
      001709 E5*58            [12] 4901 	mov	a,_count_pages_65537_270
      00170B B5*5C 02         [24] 4902 	cjne	a,_count_sloc3_1_0,00213$
      00170E 80 2B            [24] 4903 	sjmp	00112$
      001710                       4904 00213$:
      001710 EA               [12] 4905 	mov	a,r2
      001711 60 28            [24] 4906 	jz	00112$
                                   4907 ;	count3.c:114: LCD_string_write("Press A for previous\n");
      001713 90r06rE5         [24] 4908 	mov	dptr,#___str_30
      001716 75 F0 80         [24] 4909 	mov	b,#0x80
      001719 C0 06            [24] 4910 	push	ar6
      00171B C0 05            [24] 4911 	push	ar5
      00171D C0 04            [24] 4912 	push	ar4
      00171F C0 02            [24] 4913 	push	ar2
      001721 C0 00            [24] 4914 	push	ar0
      001723 12r0Cr4B         [24] 4915 	lcall	_LCD_string_write
                                   4916 ;	count3.c:115: LCD_string_write("Press B for next\n");
      001726 90r06rFB         [24] 4917 	mov	dptr,#___str_31
      001729 75 F0 80         [24] 4918 	mov	b,#0x80
      00172C 12r0Cr4B         [24] 4919 	lcall	_LCD_string_write
      00172F D0 00            [24] 4920 	pop	ar0
      001731 D0 02            [24] 4921 	pop	ar2
      001733 D0 04            [24] 4922 	pop	ar4
      001735 D0 05            [24] 4923 	pop	ar5
      001737 D0 06            [24] 4924 	pop	ar6
      001739 80 57            [24] 4925 	sjmp	00113$
      00173B                       4926 00112$:
                                   4927 ;	count3.c:116: } else if (page != pages && n > NUM) {
      00173B 90r00r1D         [24] 4928 	mov	dptr,#_count_page_65537_270
      00173E E0               [24] 4929 	movx	a,@dptr
      00173F F5*5C            [12] 4930 	mov	_count_sloc3_1_0,a
      001741 E5*58            [12] 4931 	mov	a,_count_pages_65537_270
      001743 B5*5C 02         [24] 4932 	cjne	a,_count_sloc3_1_0,00215$
      001746 80 22            [24] 4933 	sjmp	00108$
      001748                       4934 00215$:
      001748 E8               [12] 4935 	mov	a,r0
      001749 60 1F            [24] 4936 	jz	00108$
                                   4937 ;	count3.c:117: LCD_string_write("Press B for next\n");
      00174B 90r06rFB         [24] 4938 	mov	dptr,#___str_31
      00174E 75 F0 80         [24] 4939 	mov	b,#0x80
      001751 C0 06            [24] 4940 	push	ar6
      001753 C0 05            [24] 4941 	push	ar5
      001755 C0 04            [24] 4942 	push	ar4
      001757 C0 02            [24] 4943 	push	ar2
      001759 C0 00            [24] 4944 	push	ar0
      00175B 12r0Cr4B         [24] 4945 	lcall	_LCD_string_write
      00175E D0 00            [24] 4946 	pop	ar0
      001760 D0 02            [24] 4947 	pop	ar2
      001762 D0 04            [24] 4948 	pop	ar4
      001764 D0 05            [24] 4949 	pop	ar5
      001766 D0 06            [24] 4950 	pop	ar6
      001768 80 28            [24] 4951 	sjmp	00113$
      00176A                       4952 00108$:
                                   4953 ;	count3.c:118: } else if (page != 1 && n > NUM) {
      00176A 74 01            [12] 4954 	mov	a,#0x01
      00176C B5*5C 02         [24] 4955 	cjne	a,_count_sloc3_1_0,00217$
      00176F 80 21            [24] 4956 	sjmp	00113$
      001771                       4957 00217$:
      001771 E5*59            [12] 4958 	mov	a,_count_sloc0_1_0
      001773 60 1D            [24] 4959 	jz	00113$
                                   4960 ;	count3.c:119: LCD_string_write("Press A for previous\n");
      001775 90r06rE5         [24] 4961 	mov	dptr,#___str_30
      001778 75 F0 80         [24] 4962 	mov	b,#0x80
      00177B C0 06            [24] 4963 	push	ar6
      00177D C0 05            [24] 4964 	push	ar5
      00177F C0 04            [24] 4965 	push	ar4
      001781 C0 02            [24] 4966 	push	ar2
      001783 C0 00            [24] 4967 	push	ar0
      001785 12r0Cr4B         [24] 4968 	lcall	_LCD_string_write
      001788 D0 00            [24] 4969 	pop	ar0
      00178A D0 02            [24] 4970 	pop	ar2
      00178C D0 04            [24] 4971 	pop	ar4
      00178E D0 05            [24] 4972 	pop	ar5
      001790 D0 06            [24] 4973 	pop	ar6
      001792                       4974 00113$:
                                   4975 ;	count3.c:123: LCD_string_write("Press 1 for menu\n");
      001792 90r05r8F         [24] 4976 	mov	dptr,#___str_10
      001795 75 F0 80         [24] 4977 	mov	b,#0x80
      001798 C0 06            [24] 4978 	push	ar6
      00179A C0 05            [24] 4979 	push	ar5
      00179C C0 04            [24] 4980 	push	ar4
      00179E C0 02            [24] 4981 	push	ar2
      0017A0 C0 00            [24] 4982 	push	ar0
      0017A2 12r0Cr4B         [24] 4983 	lcall	_LCD_string_write
                                   4984 ;	count3.c:126: input = keyDetect();
      0017A5 12r0CrEA         [24] 4985 	lcall	_keyDetect
      0017A8 85 82*5C         [24] 4986 	mov	_count_sloc3_1_0,dpl
      0017AB D0 00            [24] 4987 	pop	ar0
      0017AD D0 02            [24] 4988 	pop	ar2
      0017AF D0 04            [24] 4989 	pop	ar4
      0017B1 D0 05            [24] 4990 	pop	ar5
      0017B3 D0 06            [24] 4991 	pop	ar6
                                   4992 ;	count3.c:129: if (input == '1') {
      0017B5 74 31            [12] 4993 	mov	a,#0x31
      0017B7 B5*5C 01         [24] 4994 	cjne	a,_count_sloc3_1_0,00219$
      0017BA 22               [24] 4995 	ret
      0017BB                       4996 00219$:
                                   4997 ;	count3.c:131: } else if (input == 'B' && page != pages && n > NUM) {
      0017BB 74 42            [12] 4998 	mov	a,#0x42
      0017BD B5*5C 57         [24] 4999 	cjne	a,_count_sloc3_1_0,00121$
      0017C0 90r00r1D         [24] 5000 	mov	dptr,#_count_page_65537_270
      0017C3 E0               [24] 5001 	movx	a,@dptr
      0017C4 F5*5D            [12] 5002 	mov	_count_sloc4_1_0,a
      0017C6 E5*58            [12] 5003 	mov	a,_count_pages_65537_270
      0017C8 B5*5D 02         [24] 5004 	cjne	a,_count_sloc4_1_0,00222$
      0017CB 80 4A            [24] 5005 	sjmp	00121$
      0017CD                       5006 00222$:
      0017CD E5*5A            [12] 5007 	mov	a,_count_sloc1_1_0
      0017CF 60 46            [24] 5008 	jz	00121$
                                   5009 ;	count3.c:132: index += NUM;
      0017D1 A9*57            [24] 5010 	mov	r1,_count_index_65537_270
      0017D3 74 0F            [12] 5011 	mov	a,#0x0f
      0017D5 29               [12] 5012 	add	a,r1
      0017D6 F5*57            [12] 5013 	mov	_count_index_65537_270,a
                                   5014 ;	count3.c:133: address += NUM;
      0017D8 8D 01            [24] 5015 	mov	ar1,r5
      0017DA 8E 07            [24] 5016 	mov	ar7,r6
      0017DC 74 0F            [12] 5017 	mov	a,#0x0f
      0017DE 29               [12] 5018 	add	a,r1
      0017DF F9               [12] 5019 	mov	r1,a
      0017E0 E4               [12] 5020 	clr	a
      0017E1 3F               [12] 5021 	addc	a,r7
      0017E2 FF               [12] 5022 	mov	r7,a
      0017E3 89 05            [24] 5023 	mov	ar5,r1
      0017E5 8F 06            [24] 5024 	mov	ar6,r7
                                   5025 ;	count3.c:134: printCount(address, NUM, key, index, n);
      0017E7 75*50 0F         [24] 5026 	mov	_printCount_PARM_2,#0x0f
      0017EA 85*54*51         [24] 5027 	mov	_printCount_PARM_3,_count_key_65537_270
      0017ED 85*57*52         [24] 5028 	mov	_printCount_PARM_4,_count_index_65537_270
      0017F0 8C*53            [24] 5029 	mov	_printCount_PARM_5,r4
      0017F2 8D 82            [24] 5030 	mov	dpl,r5
      0017F4 8E 83            [24] 5031 	mov	dph,r6
      0017F6 C0 06            [24] 5032 	push	ar6
      0017F8 C0 05            [24] 5033 	push	ar5
      0017FA C0 04            [24] 5034 	push	ar4
      0017FC C0 02            [24] 5035 	push	ar2
      0017FE C0 00            [24] 5036 	push	ar0
      001800 12r15r68         [24] 5037 	lcall	_printCount
      001803 D0 00            [24] 5038 	pop	ar0
      001805 D0 02            [24] 5039 	pop	ar2
      001807 D0 04            [24] 5040 	pop	ar4
      001809 D0 05            [24] 5041 	pop	ar5
      00180B D0 06            [24] 5042 	pop	ar6
                                   5043 ;	count3.c:135: page++;
      00180D 90r00r1D         [24] 5044 	mov	dptr,#_count_page_65537_270
      001810 E5*5D            [12] 5045 	mov	a,_count_sloc4_1_0
      001812 04               [12] 5046 	inc	a
      001813 F0               [24] 5047 	movx	@dptr,a
      001814 02r16rFC         [24] 5048 	ljmp	00128$
      001817                       5049 00121$:
                                   5050 ;	count3.c:136: } else if (input == 'A' && page != 1 && n > NUM) {
      001817 74 41            [12] 5051 	mov	a,#0x41
      001819 B5*5C 02         [24] 5052 	cjne	a,_count_sloc3_1_0,00224$
      00181C 80 03            [24] 5053 	sjmp	00225$
      00181E                       5054 00224$:
      00181E 02r16rFC         [24] 5055 	ljmp	00128$
      001821                       5056 00225$:
      001821 90r00r1D         [24] 5057 	mov	dptr,#_count_page_65537_270
      001824 E0               [24] 5058 	movx	a,@dptr
      001825 FF               [12] 5059 	mov	r7,a
      001826 BF 01 03         [24] 5060 	cjne	r7,#0x01,00226$
      001829 02r16rFC         [24] 5061 	ljmp	00128$
      00182C                       5062 00226$:
      00182C E5*5B            [12] 5063 	mov	a,_count_sloc2_1_0
      00182E 70 03            [24] 5064 	jnz	00227$
      001830 02r16rFC         [24] 5065 	ljmp	00128$
      001833                       5066 00227$:
                                   5067 ;	count3.c:137: index -= NUM;
      001833 E5*57            [12] 5068 	mov	a,_count_index_65537_270
      001835 24 F1            [12] 5069 	add	a,#0xf1
      001837 F5*57            [12] 5070 	mov	_count_index_65537_270,a
                                   5071 ;	count3.c:138: address -= NUM;
      001839 8D 01            [24] 5072 	mov	ar1,r5
      00183B 8E 03            [24] 5073 	mov	ar3,r6
      00183D E9               [12] 5074 	mov	a,r1
      00183E 24 F1            [12] 5075 	add	a,#0xf1
      001840 F9               [12] 5076 	mov	r1,a
      001841 EB               [12] 5077 	mov	a,r3
      001842 34 FF            [12] 5078 	addc	a,#0xff
      001844 FB               [12] 5079 	mov	r3,a
      001845 89 05            [24] 5080 	mov	ar5,r1
      001847 8B 06            [24] 5081 	mov	ar6,r3
                                   5082 ;	count3.c:139: printCount(address, NUM, key, index, n);
      001849 75*50 0F         [24] 5083 	mov	_printCount_PARM_2,#0x0f
      00184C 85*54*51         [24] 5084 	mov	_printCount_PARM_3,_count_key_65537_270
      00184F 85*57*52         [24] 5085 	mov	_printCount_PARM_4,_count_index_65537_270
      001852 8C*53            [24] 5086 	mov	_printCount_PARM_5,r4
      001854 8D 82            [24] 5087 	mov	dpl,r5
      001856 8E 83            [24] 5088 	mov	dph,r6
      001858 C0 07            [24] 5089 	push	ar7
      00185A C0 06            [24] 5090 	push	ar6
      00185C C0 05            [24] 5091 	push	ar5
      00185E C0 04            [24] 5092 	push	ar4
      001860 C0 02            [24] 5093 	push	ar2
      001862 C0 00            [24] 5094 	push	ar0
      001864 12r15r68         [24] 5095 	lcall	_printCount
      001867 D0 00            [24] 5096 	pop	ar0
      001869 D0 02            [24] 5097 	pop	ar2
      00186B D0 04            [24] 5098 	pop	ar4
      00186D D0 05            [24] 5099 	pop	ar5
      00186F D0 06            [24] 5100 	pop	ar6
      001871 D0 07            [24] 5101 	pop	ar7
                                   5102 ;	count3.c:140: page--;
      001873 EF               [12] 5103 	mov	a,r7
      001874 14               [12] 5104 	dec	a
      001875 90r00r1D         [24] 5105 	mov	dptr,#_count_page_65537_270
      001878 F0               [24] 5106 	movx	@dptr,a
                                   5107 ;	count3.c:142: } while (1);
                                   5108 ;	count3.c:143: }
      001879 02r16rFC         [24] 5109 	ljmp	00128$
                                   5110 ;------------------------------------------------------------
                                   5111 ;Allocation info for local variables in function 'readTemp'
                                   5112 ;------------------------------------------------------------
                                   5113 ;val                       Allocated with name '_readTemp_val_65536_280'
                                   5114 ;address                   Allocated to registers 
                                   5115 ;------------------------------------------------------------
                                   5116 ;	analog.c:6: uint8_t readTemp() {
                                   5117 ;	-----------------------------------------
                                   5118 ;	 function readTemp
                                   5119 ;	-----------------------------------------
      00187C                       5120 _readTemp:
                                   5121 ;	analog.c:9: IOM = 1;
                                   5122 ;	assignBit
      00187C D2 B4            [12] 5123 	setb	_P3_4
                                   5124 ;	analog.c:10: address = (uint16_t __xdata*)(temp_address);
      00187E 85*06 82         [24] 5125 	mov	dpl,_temp_address
      001881 85*07 83         [24] 5126 	mov	dph,(_temp_address + 1)
                                   5127 ;	analog.c:11: val = *address;
      001884 E0               [24] 5128 	movx	a,@dptr
                                   5129 ;	analog.c:13: return val;
                                   5130 ;	analog.c:14: }
      001885 F5 82            [12] 5131 	mov	dpl,a
      001887 22               [24] 5132 	ret
                                   5133 ;------------------------------------------------------------
                                   5134 ;Allocation info for local variables in function 'readLight'
                                   5135 ;------------------------------------------------------------
                                   5136 ;val                       Allocated with name '_readLight_val_65536_281'
                                   5137 ;address                   Allocated to registers 
                                   5138 ;------------------------------------------------------------
                                   5139 ;	analog.c:21: uint8_t readLight() {
                                   5140 ;	-----------------------------------------
                                   5141 ;	 function readLight
                                   5142 ;	-----------------------------------------
      001888                       5143 _readLight:
                                   5144 ;	analog.c:24: IOM = 1;
                                   5145 ;	assignBit
      001888 D2 B4            [12] 5146 	setb	_P3_4
                                   5147 ;	analog.c:25: address = (uint16_t __xdata*)(light_address);
      00188A 85*08 82         [24] 5148 	mov	dpl,_light_address
      00188D 85*09 83         [24] 5149 	mov	dph,(_light_address + 1)
                                   5150 ;	analog.c:26: val = *address;
      001890 E0               [24] 5151 	movx	a,@dptr
                                   5152 ;	analog.c:28: return val;
                                   5153 ;	analog.c:29: }
      001891 F5 82            [12] 5154 	mov	dpl,a
      001893 22               [24] 5155 	ret
                                   5156 ;------------------------------------------------------------
                                   5157 ;Allocation info for local variables in function 'displayTemp'
                                   5158 ;------------------------------------------------------------
                                   5159 ;t                         Allocated to registers r7 
                                   5160 ;------------------------------------------------------------
                                   5161 ;	analog.c:36: void displayTemp(uint8_t t) {
                                   5162 ;	-----------------------------------------
                                   5163 ;	 function displayTemp
                                   5164 ;	-----------------------------------------
      001894                       5165 _displayTemp:
      001894 AF 82            [24] 5166 	mov	r7,dpl
                                   5167 ;	analog.c:38: fillScreen(GRAY);
      001896 90 D6 BA         [24] 5168 	mov	dptr,#0xd6ba
      001899 C0 07            [24] 5169 	push	ar7
      00189B 12r08r44         [24] 5170 	lcall	_fillScreen
                                   5171 ;	analog.c:39: setCursor(0, 0);
      00189E E4               [12] 5172 	clr	a
      00189F F5*00            [12] 5173 	mov	_setCursor_PARM_2,a
      0018A1 F5*01            [12] 5174 	mov	(_setCursor_PARM_2 + 1),a
      0018A3 90 00 00         [24] 5175 	mov	dptr,#0x0000
      0018A6 12r00rB6         [24] 5176 	lcall	_setCursor
                                   5177 ;	analog.c:41: LCD_string_write("Temperature: ");
      0018A9 90r07r0D         [24] 5178 	mov	dptr,#___str_32
      0018AC 75 F0 80         [24] 5179 	mov	b,#0x80
      0018AF 12r0Cr4B         [24] 5180 	lcall	_LCD_string_write
      0018B2 D0 07            [24] 5181 	pop	ar7
                                   5182 ;	analog.c:43: asciiToHex(t);
      0018B4 8F 82            [24] 5183 	mov	dpl,r7
      0018B6 12r0ErCC         [24] 5184 	lcall	_asciiToHex
                                   5185 ;	analog.c:45: write('\n');
      0018B9 75 82 0A         [24] 5186 	mov	dpl,#0x0a
      0018BC 12r0BrDD         [24] 5187 	lcall	_write
                                   5188 ;	analog.c:46: LCD_string_write("Press 1 for menu\n");
      0018BF 90r05r8F         [24] 5189 	mov	dptr,#___str_10
      0018C2 75 F0 80         [24] 5190 	mov	b,#0x80
      0018C5 12r0Cr4B         [24] 5191 	lcall	_LCD_string_write
                                   5192 ;	analog.c:47: LCD_string_write("Press key to refresh\n");
      0018C8 90r07r1B         [24] 5193 	mov	dptr,#___str_33
      0018CB 75 F0 80         [24] 5194 	mov	b,#0x80
                                   5195 ;	analog.c:48: }
      0018CE 02r0Cr4B         [24] 5196 	ljmp	_LCD_string_write
                                   5197 ;------------------------------------------------------------
                                   5198 ;Allocation info for local variables in function 'displayLight'
                                   5199 ;------------------------------------------------------------
                                   5200 ;l                         Allocated to registers r7 
                                   5201 ;------------------------------------------------------------
                                   5202 ;	analog.c:55: void displayLight(uint8_t l) {
                                   5203 ;	-----------------------------------------
                                   5204 ;	 function displayLight
                                   5205 ;	-----------------------------------------
      0018D1                       5206 _displayLight:
      0018D1 AF 82            [24] 5207 	mov	r7,dpl
                                   5208 ;	analog.c:57: fillScreen(GRAY);
      0018D3 90 D6 BA         [24] 5209 	mov	dptr,#0xd6ba
      0018D6 C0 07            [24] 5210 	push	ar7
      0018D8 12r08r44         [24] 5211 	lcall	_fillScreen
                                   5212 ;	analog.c:58: setCursor(0, 0);
      0018DB E4               [12] 5213 	clr	a
      0018DC F5*00            [12] 5214 	mov	_setCursor_PARM_2,a
      0018DE F5*01            [12] 5215 	mov	(_setCursor_PARM_2 + 1),a
      0018E0 90 00 00         [24] 5216 	mov	dptr,#0x0000
      0018E3 12r00rB6         [24] 5217 	lcall	_setCursor
                                   5218 ;	analog.c:60: LCD_string_write("Light level: ");
      0018E6 90r07r31         [24] 5219 	mov	dptr,#___str_34
      0018E9 75 F0 80         [24] 5220 	mov	b,#0x80
      0018EC 12r0Cr4B         [24] 5221 	lcall	_LCD_string_write
      0018EF D0 07            [24] 5222 	pop	ar7
                                   5223 ;	analog.c:62: asciiToHex(l);
      0018F1 8F 82            [24] 5224 	mov	dpl,r7
      0018F3 12r0ErCC         [24] 5225 	lcall	_asciiToHex
                                   5226 ;	analog.c:64: write('\n');
      0018F6 75 82 0A         [24] 5227 	mov	dpl,#0x0a
      0018F9 12r0BrDD         [24] 5228 	lcall	_write
                                   5229 ;	analog.c:65: LCD_string_write("Press 1 for menu\n");
      0018FC 90r05r8F         [24] 5230 	mov	dptr,#___str_10
      0018FF 75 F0 80         [24] 5231 	mov	b,#0x80
      001902 12r0Cr4B         [24] 5232 	lcall	_LCD_string_write
                                   5233 ;	analog.c:66: LCD_string_write("Press key to refresh\n");
      001905 90r07r1B         [24] 5234 	mov	dptr,#___str_33
      001908 75 F0 80         [24] 5235 	mov	b,#0x80
                                   5236 ;	analog.c:67: }
      00190B 02r0Cr4B         [24] 5237 	ljmp	_LCD_string_write
                                   5238 ;------------------------------------------------------------
                                   5239 ;Allocation info for local variables in function 'temperature'
                                   5240 ;------------------------------------------------------------
                                   5241 ;temp                      Allocated to registers 
                                   5242 ;input                     Allocated with name '_temperature_input_65537_287'
                                   5243 ;------------------------------------------------------------
                                   5244 ;	analog.c:74: void temperature() {
                                   5245 ;	-----------------------------------------
                                   5246 ;	 function temperature
                                   5247 ;	-----------------------------------------
      00190E                       5248 _temperature:
                                   5249 ;	analog.c:76: fillScreen(GRAY);
      00190E 90 D6 BA         [24] 5250 	mov	dptr,#0xd6ba
      001911 12r08r44         [24] 5251 	lcall	_fillScreen
                                   5252 ;	analog.c:77: setCursor(0, 0);
      001914 E4               [12] 5253 	clr	a
      001915 F5*00            [12] 5254 	mov	_setCursor_PARM_2,a
      001917 F5*01            [12] 5255 	mov	(_setCursor_PARM_2 + 1),a
      001919 90 00 00         [24] 5256 	mov	dptr,#0x0000
      00191C 12r00rB6         [24] 5257 	lcall	_setCursor
                                   5258 ;	analog.c:78: setTextSize(2);
      00191F 75 82 02         [24] 5259 	mov	dpl,#0x02
      001922 12r00rD0         [24] 5260 	lcall	_setTextSize
                                   5261 ;	analog.c:86: temp = ioread8(temp_address);
      001925 85*06 82         [24] 5262 	mov	dpl,_temp_address
      001928 85*07 83         [24] 5263 	mov	dph,(_temp_address + 1)
      00192B 12r00r10         [24] 5264 	lcall	_ioread8
                                   5265 ;	analog.c:88: displayTemp(temp);
      00192E 12r18r94         [24] 5266 	lcall	_displayTemp
                                   5267 ;	analog.c:91: while (1) {
      001931                       5268 00104$:
                                   5269 ;	analog.c:92: input = keyDetect();
      001931 12r0CrEA         [24] 5270 	lcall	_keyDetect
      001934 AF 82            [24] 5271 	mov	r7,dpl
                                   5272 ;	analog.c:94: if (input == '1') break;
      001936 BF 31 01         [24] 5273 	cjne	r7,#0x31,00118$
      001939 22               [24] 5274 	ret
      00193A                       5275 00118$:
                                   5276 ;	analog.c:98: temp = ioread8(temp_address);
      00193A 85*06 82         [24] 5277 	mov	dpl,_temp_address
      00193D 85*07 83         [24] 5278 	mov	dph,(_temp_address + 1)
      001940 12r00r10         [24] 5279 	lcall	_ioread8
                                   5280 ;	analog.c:99: displayTemp(temp);
      001943 12r18r94         [24] 5281 	lcall	_displayTemp
                                   5282 ;	analog.c:101: }
      001946 80 E9            [24] 5283 	sjmp	00104$
                                   5284 ;------------------------------------------------------------
                                   5285 ;Allocation info for local variables in function 'light'
                                   5286 ;------------------------------------------------------------
                                   5287 ;light                     Allocated to registers 
                                   5288 ;input                     Allocated with name '_light_input_65537_290'
                                   5289 ;------------------------------------------------------------
                                   5290 ;	analog.c:108: void light() {
                                   5291 ;	-----------------------------------------
                                   5292 ;	 function light
                                   5293 ;	-----------------------------------------
      001948                       5294 _light:
                                   5295 ;	analog.c:110: fillScreen(GRAY);
      001948 90 D6 BA         [24] 5296 	mov	dptr,#0xd6ba
      00194B 12r08r44         [24] 5297 	lcall	_fillScreen
                                   5298 ;	analog.c:111: setCursor(0, 0);
      00194E E4               [12] 5299 	clr	a
      00194F F5*00            [12] 5300 	mov	_setCursor_PARM_2,a
      001951 F5*01            [12] 5301 	mov	(_setCursor_PARM_2 + 1),a
      001953 90 00 00         [24] 5302 	mov	dptr,#0x0000
      001956 12r00rB6         [24] 5303 	lcall	_setCursor
                                   5304 ;	analog.c:112: setTextSize(2);
      001959 75 82 02         [24] 5305 	mov	dpl,#0x02
      00195C 12r00rD0         [24] 5306 	lcall	_setTextSize
                                   5307 ;	analog.c:120: light = ioread8(light_address);
      00195F 85*08 82         [24] 5308 	mov	dpl,_light_address
      001962 85*09 83         [24] 5309 	mov	dph,(_light_address + 1)
      001965 12r00r10         [24] 5310 	lcall	_ioread8
                                   5311 ;	analog.c:122: displayLight(light);
      001968 12r18rD1         [24] 5312 	lcall	_displayLight
                                   5313 ;	analog.c:125: while (1) {
      00196B                       5314 00104$:
                                   5315 ;	analog.c:126: input = keyDetect();
      00196B 12r0CrEA         [24] 5316 	lcall	_keyDetect
      00196E AF 82            [24] 5317 	mov	r7,dpl
                                   5318 ;	analog.c:128: if (input == '1') break;
      001970 BF 31 01         [24] 5319 	cjne	r7,#0x31,00118$
      001973 22               [24] 5320 	ret
      001974                       5321 00118$:
                                   5322 ;	analog.c:132: light = ioread8(light_address);
      001974 85*08 82         [24] 5323 	mov	dpl,_light_address
      001977 85*09 83         [24] 5324 	mov	dph,(_light_address + 1)
      00197A 12r00r10         [24] 5325 	lcall	_ioread8
                                   5326 ;	analog.c:133: displayLight(light);
      00197D 12r18rD1         [24] 5327 	lcall	_displayLight
                                   5328 ;	analog.c:135: }
      001980 80 E9            [24] 5329 	sjmp	00104$
                                   5330 ;------------------------------------------------------------
                                   5331 ;Allocation info for local variables in function 'menu'
                                   5332 ;------------------------------------------------------------
                                   5333 ;	main.c:31: void menu(void) {
                                   5334 ;	-----------------------------------------
                                   5335 ;	 function menu
                                   5336 ;	-----------------------------------------
      001982                       5337 _menu:
                                   5338 ;	main.c:33: setRotation(2);
      001982 75 82 02         [24] 5339 	mov	dpl,#0x02
      001985 12r00rE8         [24] 5340 	lcall	_setRotation
                                   5341 ;	main.c:34: setTextSize(3);
      001988 75 82 03         [24] 5342 	mov	dpl,#0x03
      00198B 12r00rD0         [24] 5343 	lcall	_setTextSize
                                   5344 ;	main.c:35: fillScreen(GRAY);
      00198E 90 D6 BA         [24] 5345 	mov	dptr,#0xd6ba
      001991 12r08r44         [24] 5346 	lcall	_fillScreen
                                   5347 ;	main.c:36: setTextColor(BLACK, GRAY);
      001994 75*00 BA         [24] 5348 	mov	_setTextColor_PARM_2,#0xba
      001997 75*01 D6         [24] 5349 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      00199A 90 00 00         [24] 5350 	mov	dptr,#0x0000
      00199D 12r00rC3         [24] 5351 	lcall	_setTextColor
                                   5352 ;	main.c:37: setCursor(0, 0);
      0019A0 E4               [12] 5353 	clr	a
      0019A1 F5*00            [12] 5354 	mov	_setCursor_PARM_2,a
      0019A3 F5*01            [12] 5355 	mov	(_setCursor_PARM_2 + 1),a
      0019A5 90 00 00         [24] 5356 	mov	dptr,#0x0000
      0019A8 12r00rB6         [24] 5357 	lcall	_setCursor
                                   5358 ;	main.c:40: LCD_string_write("Brandon Cline\n");
      0019AB 90r07r3F         [24] 5359 	mov	dptr,#___str_35
      0019AE 75 F0 80         [24] 5360 	mov	b,#0x80
      0019B1 12r0Cr4B         [24] 5361 	lcall	_LCD_string_write
                                   5362 ;	main.c:41: LCD_string_write("ECEN 4330\n");
      0019B4 90r07r4E         [24] 5363 	mov	dptr,#___str_36
      0019B7 75 F0 80         [24] 5364 	mov	b,#0x80
      0019BA 12r0Cr4B         [24] 5365 	lcall	_LCD_string_write
                                   5366 ;	main.c:43: setTextSize(2);
      0019BD 75 82 02         [24] 5367 	mov	dpl,#0x02
      0019C0 12r00rD0         [24] 5368 	lcall	_setTextSize
                                   5369 ;	main.c:47: LCD_string_write("1: Basic check\n");
      0019C3 90r07r59         [24] 5370 	mov	dptr,#___str_37
      0019C6 75 F0 80         [24] 5371 	mov	b,#0x80
      0019C9 12r0Cr4B         [24] 5372 	lcall	_LCD_string_write
                                   5373 ;	main.c:49: LCD_string_write("2: Dump\n");
      0019CC 90r07r69         [24] 5374 	mov	dptr,#___str_38
      0019CF 75 F0 80         [24] 5375 	mov	b,#0x80
      0019D2 12r0Cr4B         [24] 5376 	lcall	_LCD_string_write
                                   5377 ;	main.c:51: LCD_string_write("3: Check\n");
      0019D5 90r07r72         [24] 5378 	mov	dptr,#___str_39
      0019D8 75 F0 80         [24] 5379 	mov	b,#0x80
      0019DB 12r0Cr4B         [24] 5380 	lcall	_LCD_string_write
                                   5381 ;	main.c:53: LCD_string_write("A: Move\n");
      0019DE 90r07r7C         [24] 5382 	mov	dptr,#___str_40
      0019E1 75 F0 80         [24] 5383 	mov	b,#0x80
      0019E4 12r0Cr4B         [24] 5384 	lcall	_LCD_string_write
                                   5385 ;	main.c:55: LCD_string_write("4: Edit\n");
      0019E7 90r07r85         [24] 5386 	mov	dptr,#___str_41
      0019EA 75 F0 80         [24] 5387 	mov	b,#0x80
      0019ED 12r0Cr4B         [24] 5388 	lcall	_LCD_string_write
                                   5389 ;	main.c:57: LCD_string_write("5: Find\n");
      0019F0 90r07r8E         [24] 5390 	mov	dptr,#___str_42
      0019F3 75 F0 80         [24] 5391 	mov	b,#0x80
      0019F6 12r0Cr4B         [24] 5392 	lcall	_LCD_string_write
                                   5393 ;	main.c:59: LCD_string_write("6: Count\n");
      0019F9 90r07r97         [24] 5394 	mov	dptr,#___str_43
      0019FC 75 F0 80         [24] 5395 	mov	b,#0x80
      0019FF 12r0Cr4B         [24] 5396 	lcall	_LCD_string_write
                                   5397 ;	main.c:62: LCD_string_write("B: Temperature\n");
      001A02 90r07rA1         [24] 5398 	mov	dptr,#___str_44
      001A05 75 F0 80         [24] 5399 	mov	b,#0x80
      001A08 12r0Cr4B         [24] 5400 	lcall	_LCD_string_write
                                   5401 ;	main.c:64: LCD_string_write("7: Light\n");
      001A0B 90r07rB1         [24] 5402 	mov	dptr,#___str_45
      001A0E 75 F0 80         [24] 5403 	mov	b,#0x80
                                   5404 ;	main.c:65: }
      001A11 02r0Cr4B         [24] 5405 	ljmp	_LCD_string_write
                                   5406 ;------------------------------------------------------------
                                   5407 ;Allocation info for local variables in function 'main'
                                   5408 ;------------------------------------------------------------
                                   5409 ;input                     Allocated with name '_main_input_65536_295'
                                   5410 ;------------------------------------------------------------
                                   5411 ;	main.c:67: void main(void) {
                                   5412 ;	-----------------------------------------
                                   5413 ;	 function main
                                   5414 ;	-----------------------------------------
      001A14                       5415 _main:
                                   5416 ;	main.c:72: iowrite8(seg7_address, 0x00);
      001A14 75*00 00         [24] 5417 	mov	_iowrite8_PARM_2,#0x00
      001A17 85*04 82         [24] 5418 	mov	dpl,_seg7_address
      001A1A 85*05 83         [24] 5419 	mov	dph,(_seg7_address + 1)
      001A1D 12r00r00         [24] 5420 	lcall	_iowrite8
                                   5421 ;	main.c:75: TFT_LCD_INIT();
      001A20 12r02r11         [24] 5422 	lcall	_TFT_LCD_INIT
                                   5423 ;	main.c:76: fillScreen(BLACK);
      001A23 90 00 00         [24] 5424 	mov	dptr,#0x0000
      001A26 12r08r44         [24] 5425 	lcall	_fillScreen
                                   5426 ;	main.c:77: setRotation(0);
      001A29 75 82 00         [24] 5427 	mov	dpl,#0x00
      001A2C 12r00rE8         [24] 5428 	lcall	_setRotation
                                   5429 ;	main.c:78: testCircles(20, BLUE);
      001A2F 75*2C 1F         [24] 5430 	mov	_testCircles_PARM_2,#0x1f
      001A32 75*2D 00         [24] 5431 	mov	(_testCircles_PARM_2 + 1),#0x00
      001A35 75 82 14         [24] 5432 	mov	dpl,#0x14
      001A38 12r06r9D         [24] 5433 	lcall	_testCircles
                                   5434 ;	main.c:80: while (1) {
      001A3B                       5435 00111$:
                                   5436 ;	main.c:82: menu();
      001A3B 12r19r82         [24] 5437 	lcall	_menu
                                   5438 ;	main.c:85: input = keyDetect();
      001A3E 12r0CrEA         [24] 5439 	lcall	_keyDetect
      001A41 AF 82            [24] 5440 	mov	r7,dpl
                                   5441 ;	main.c:89: switch(input) {
      001A43 BF 31 02         [24] 5442 	cjne	r7,#0x31,00147$
      001A46 80 1E            [24] 5443 	sjmp	00101$
      001A48                       5444 00147$:
      001A48 BF 33 02         [24] 5445 	cjne	r7,#0x33,00148$
      001A4B 80 1E            [24] 5446 	sjmp	00102$
      001A4D                       5447 00148$:
      001A4D BF 34 02         [24] 5448 	cjne	r7,#0x34,00149$
      001A50 80 23            [24] 5449 	sjmp	00104$
      001A52                       5450 00149$:
      001A52 BF 36 02         [24] 5451 	cjne	r7,#0x36,00150$
      001A55 80 23            [24] 5452 	sjmp	00105$
      001A57                       5453 00150$:
      001A57 BF 37 02         [24] 5454 	cjne	r7,#0x37,00151$
      001A5A 80 28            [24] 5455 	sjmp	00107$
      001A5C                       5456 00151$:
      001A5C BF 41 02         [24] 5457 	cjne	r7,#0x41,00152$
      001A5F 80 0F            [24] 5458 	sjmp	00103$
      001A61                       5459 00152$:
                                   5460 ;	main.c:90: case '1': basic(); break;
      001A61 BF 42 D7         [24] 5461 	cjne	r7,#0x42,00111$
      001A64 80 19            [24] 5462 	sjmp	00106$
      001A66                       5463 00101$:
      001A66 12r12r27         [24] 5464 	lcall	_basic
                                   5465 ;	main.c:92: case '3': check(); break;
      001A69 80 D0            [24] 5466 	sjmp	00111$
      001A6B                       5467 00102$:
      001A6B 12r10rEB         [24] 5468 	lcall	_check
                                   5469 ;	main.c:93: case 'A': move(); break;
      001A6E 80 CB            [24] 5470 	sjmp	00111$
      001A70                       5471 00103$:
      001A70 12r12rBD         [24] 5472 	lcall	_move
                                   5473 ;	main.c:94: case '4': edit(); break;
      001A73 80 C6            [24] 5474 	sjmp	00111$
      001A75                       5475 00104$:
      001A75 12r14r77         [24] 5476 	lcall	_edit
                                   5477 ;	main.c:96: case '6': count(); break;
      001A78 80 C1            [24] 5478 	sjmp	00111$
      001A7A                       5479 00105$:
      001A7A 12r16r24         [24] 5480 	lcall	_count
                                   5481 ;	main.c:97: case 'B': temperature(); break;
      001A7D 80 BC            [24] 5482 	sjmp	00111$
      001A7F                       5483 00106$:
      001A7F 12r19r0E         [24] 5484 	lcall	_temperature
                                   5485 ;	main.c:98: case '7': light(); break;
      001A82 80 B7            [24] 5486 	sjmp	00111$
      001A84                       5487 00107$:
      001A84 12r19r48         [24] 5488 	lcall	_light
                                   5489 ;	main.c:100: }
                                   5490 ;	main.c:102: }
      001A87 80 B2            [24] 5491 	sjmp	00111$
                                   5492 	.area CSEG    (CODE)
                                   5493 	.area CONST   (CODE)
      000000                       5494 _font:
      000000 00                    5495 	.db #0x00	; 0
      000001 00                    5496 	.db #0x00	; 0
      000002 00                    5497 	.db #0x00	; 0
      000003 00                    5498 	.db #0x00	; 0
      000004 00                    5499 	.db #0x00	; 0
      000005 3E                    5500 	.db #0x3e	; 62
      000006 5B                    5501 	.db #0x5b	; 91
      000007 4F                    5502 	.db #0x4f	; 79	'O'
      000008 5B                    5503 	.db #0x5b	; 91
      000009 3E                    5504 	.db #0x3e	; 62
      00000A 3E                    5505 	.db #0x3e	; 62
      00000B 6B                    5506 	.db #0x6b	; 107	'k'
      00000C 4F                    5507 	.db #0x4f	; 79	'O'
      00000D 6B                    5508 	.db #0x6b	; 107	'k'
      00000E 3E                    5509 	.db #0x3e	; 62
      00000F 1C                    5510 	.db #0x1c	; 28
      000010 3E                    5511 	.db #0x3e	; 62
      000011 7C                    5512 	.db #0x7c	; 124
      000012 3E                    5513 	.db #0x3e	; 62
      000013 1C                    5514 	.db #0x1c	; 28
      000014 18                    5515 	.db #0x18	; 24
      000015 3C                    5516 	.db #0x3c	; 60
      000016 7E                    5517 	.db #0x7e	; 126
      000017 3C                    5518 	.db #0x3c	; 60
      000018 18                    5519 	.db #0x18	; 24
      000019 1C                    5520 	.db #0x1c	; 28
      00001A 57                    5521 	.db #0x57	; 87	'W'
      00001B 7D                    5522 	.db #0x7d	; 125
      00001C 57                    5523 	.db #0x57	; 87	'W'
      00001D 1C                    5524 	.db #0x1c	; 28
      00001E 1C                    5525 	.db #0x1c	; 28
      00001F 5E                    5526 	.db #0x5e	; 94
      000020 7F                    5527 	.db #0x7f	; 127
      000021 5E                    5528 	.db #0x5e	; 94
      000022 1C                    5529 	.db #0x1c	; 28
      000023 00                    5530 	.db #0x00	; 0
      000024 18                    5531 	.db #0x18	; 24
      000025 3C                    5532 	.db #0x3c	; 60
      000026 18                    5533 	.db #0x18	; 24
      000027 00                    5534 	.db #0x00	; 0
      000028 FF                    5535 	.db #0xff	; 255
      000029 E7                    5536 	.db #0xe7	; 231
      00002A C3                    5537 	.db #0xc3	; 195
      00002B E7                    5538 	.db #0xe7	; 231
      00002C FF                    5539 	.db #0xff	; 255
      00002D 00                    5540 	.db #0x00	; 0
      00002E 18                    5541 	.db #0x18	; 24
      00002F 24                    5542 	.db #0x24	; 36
      000030 18                    5543 	.db #0x18	; 24
      000031 00                    5544 	.db #0x00	; 0
      000032 FF                    5545 	.db #0xff	; 255
      000033 E7                    5546 	.db #0xe7	; 231
      000034 DB                    5547 	.db #0xdb	; 219
      000035 E7                    5548 	.db #0xe7	; 231
      000036 FF                    5549 	.db #0xff	; 255
      000037 30                    5550 	.db #0x30	; 48	'0'
      000038 48                    5551 	.db #0x48	; 72	'H'
      000039 3A                    5552 	.db #0x3a	; 58
      00003A 06                    5553 	.db #0x06	; 6
      00003B 0E                    5554 	.db #0x0e	; 14
      00003C 26                    5555 	.db #0x26	; 38
      00003D 29                    5556 	.db #0x29	; 41
      00003E 79                    5557 	.db #0x79	; 121	'y'
      00003F 29                    5558 	.db #0x29	; 41
      000040 26                    5559 	.db #0x26	; 38
      000041 40                    5560 	.db #0x40	; 64
      000042 7F                    5561 	.db #0x7f	; 127
      000043 05                    5562 	.db #0x05	; 5
      000044 05                    5563 	.db #0x05	; 5
      000045 07                    5564 	.db #0x07	; 7
      000046 40                    5565 	.db #0x40	; 64
      000047 7F                    5566 	.db #0x7f	; 127
      000048 05                    5567 	.db #0x05	; 5
      000049 25                    5568 	.db #0x25	; 37
      00004A 3F                    5569 	.db #0x3f	; 63
      00004B 5A                    5570 	.db #0x5a	; 90	'Z'
      00004C 3C                    5571 	.db #0x3c	; 60
      00004D E7                    5572 	.db #0xe7	; 231
      00004E 3C                    5573 	.db #0x3c	; 60
      00004F 5A                    5574 	.db #0x5a	; 90	'Z'
      000050 7F                    5575 	.db #0x7f	; 127
      000051 3E                    5576 	.db #0x3e	; 62
      000052 1C                    5577 	.db #0x1c	; 28
      000053 1C                    5578 	.db #0x1c	; 28
      000054 08                    5579 	.db #0x08	; 8
      000055 08                    5580 	.db #0x08	; 8
      000056 1C                    5581 	.db #0x1c	; 28
      000057 1C                    5582 	.db #0x1c	; 28
      000058 3E                    5583 	.db #0x3e	; 62
      000059 7F                    5584 	.db #0x7f	; 127
      00005A 14                    5585 	.db #0x14	; 20
      00005B 22                    5586 	.db #0x22	; 34
      00005C 7F                    5587 	.db #0x7f	; 127
      00005D 22                    5588 	.db #0x22	; 34
      00005E 14                    5589 	.db #0x14	; 20
      00005F 5F                    5590 	.db #0x5f	; 95
      000060 5F                    5591 	.db #0x5f	; 95
      000061 00                    5592 	.db #0x00	; 0
      000062 5F                    5593 	.db #0x5f	; 95
      000063 5F                    5594 	.db #0x5f	; 95
      000064 06                    5595 	.db #0x06	; 6
      000065 09                    5596 	.db #0x09	; 9
      000066 7F                    5597 	.db #0x7f	; 127
      000067 01                    5598 	.db #0x01	; 1
      000068 7F                    5599 	.db #0x7f	; 127
      000069 00                    5600 	.db #0x00	; 0
      00006A 66                    5601 	.db #0x66	; 102	'f'
      00006B 89                    5602 	.db #0x89	; 137
      00006C 95                    5603 	.db #0x95	; 149
      00006D 6A                    5604 	.db #0x6a	; 106	'j'
      00006E 60                    5605 	.db #0x60	; 96
      00006F 60                    5606 	.db #0x60	; 96
      000070 60                    5607 	.db #0x60	; 96
      000071 60                    5608 	.db #0x60	; 96
      000072 60                    5609 	.db #0x60	; 96
      000073 94                    5610 	.db #0x94	; 148
      000074 A2                    5611 	.db #0xa2	; 162
      000075 FF                    5612 	.db #0xff	; 255
      000076 A2                    5613 	.db #0xa2	; 162
      000077 94                    5614 	.db #0x94	; 148
      000078 08                    5615 	.db #0x08	; 8
      000079 04                    5616 	.db #0x04	; 4
      00007A 7E                    5617 	.db #0x7e	; 126
      00007B 04                    5618 	.db #0x04	; 4
      00007C 08                    5619 	.db #0x08	; 8
      00007D 10                    5620 	.db #0x10	; 16
      00007E 20                    5621 	.db #0x20	; 32
      00007F 7E                    5622 	.db #0x7e	; 126
      000080 20                    5623 	.db #0x20	; 32
      000081 10                    5624 	.db #0x10	; 16
      000082 08                    5625 	.db #0x08	; 8
      000083 08                    5626 	.db #0x08	; 8
      000084 2A                    5627 	.db #0x2a	; 42
      000085 1C                    5628 	.db #0x1c	; 28
      000086 08                    5629 	.db #0x08	; 8
      000087 08                    5630 	.db #0x08	; 8
      000088 1C                    5631 	.db #0x1c	; 28
      000089 2A                    5632 	.db #0x2a	; 42
      00008A 08                    5633 	.db #0x08	; 8
      00008B 08                    5634 	.db #0x08	; 8
      00008C 1E                    5635 	.db #0x1e	; 30
      00008D 10                    5636 	.db #0x10	; 16
      00008E 10                    5637 	.db #0x10	; 16
      00008F 10                    5638 	.db #0x10	; 16
      000090 10                    5639 	.db #0x10	; 16
      000091 0C                    5640 	.db #0x0c	; 12
      000092 1E                    5641 	.db #0x1e	; 30
      000093 0C                    5642 	.db #0x0c	; 12
      000094 1E                    5643 	.db #0x1e	; 30
      000095 0C                    5644 	.db #0x0c	; 12
      000096 30                    5645 	.db #0x30	; 48	'0'
      000097 38                    5646 	.db #0x38	; 56	'8'
      000098 3E                    5647 	.db #0x3e	; 62
      000099 38                    5648 	.db #0x38	; 56	'8'
      00009A 30                    5649 	.db #0x30	; 48	'0'
      00009B 06                    5650 	.db #0x06	; 6
      00009C 0E                    5651 	.db #0x0e	; 14
      00009D 3E                    5652 	.db #0x3e	; 62
      00009E 0E                    5653 	.db #0x0e	; 14
      00009F 06                    5654 	.db #0x06	; 6
      0000A0 00                    5655 	.db #0x00	; 0
      0000A1 00                    5656 	.db #0x00	; 0
      0000A2 00                    5657 	.db #0x00	; 0
      0000A3 00                    5658 	.db #0x00	; 0
      0000A4 00                    5659 	.db #0x00	; 0
      0000A5 00                    5660 	.db #0x00	; 0
      0000A6 00                    5661 	.db #0x00	; 0
      0000A7 5F                    5662 	.db #0x5f	; 95
      0000A8 00                    5663 	.db #0x00	; 0
      0000A9 00                    5664 	.db #0x00	; 0
      0000AA 00                    5665 	.db #0x00	; 0
      0000AB 07                    5666 	.db #0x07	; 7
      0000AC 00                    5667 	.db #0x00	; 0
      0000AD 07                    5668 	.db #0x07	; 7
      0000AE 00                    5669 	.db #0x00	; 0
      0000AF 14                    5670 	.db #0x14	; 20
      0000B0 7F                    5671 	.db #0x7f	; 127
      0000B1 14                    5672 	.db #0x14	; 20
      0000B2 7F                    5673 	.db #0x7f	; 127
      0000B3 14                    5674 	.db #0x14	; 20
      0000B4 24                    5675 	.db #0x24	; 36
      0000B5 2A                    5676 	.db #0x2a	; 42
      0000B6 7F                    5677 	.db #0x7f	; 127
      0000B7 2A                    5678 	.db #0x2a	; 42
      0000B8 12                    5679 	.db #0x12	; 18
      0000B9 23                    5680 	.db #0x23	; 35
      0000BA 13                    5681 	.db #0x13	; 19
      0000BB 08                    5682 	.db #0x08	; 8
      0000BC 64                    5683 	.db #0x64	; 100	'd'
      0000BD 62                    5684 	.db #0x62	; 98	'b'
      0000BE 36                    5685 	.db #0x36	; 54	'6'
      0000BF 49                    5686 	.db #0x49	; 73	'I'
      0000C0 56                    5687 	.db #0x56	; 86	'V'
      0000C1 20                    5688 	.db #0x20	; 32
      0000C2 50                    5689 	.db #0x50	; 80	'P'
      0000C3 00                    5690 	.db #0x00	; 0
      0000C4 08                    5691 	.db #0x08	; 8
      0000C5 07                    5692 	.db #0x07	; 7
      0000C6 03                    5693 	.db #0x03	; 3
      0000C7 00                    5694 	.db #0x00	; 0
      0000C8 00                    5695 	.db #0x00	; 0
      0000C9 1C                    5696 	.db #0x1c	; 28
      0000CA 22                    5697 	.db #0x22	; 34
      0000CB 41                    5698 	.db #0x41	; 65	'A'
      0000CC 00                    5699 	.db #0x00	; 0
      0000CD 00                    5700 	.db #0x00	; 0
      0000CE 41                    5701 	.db #0x41	; 65	'A'
      0000CF 22                    5702 	.db #0x22	; 34
      0000D0 1C                    5703 	.db #0x1c	; 28
      0000D1 00                    5704 	.db #0x00	; 0
      0000D2 2A                    5705 	.db #0x2a	; 42
      0000D3 1C                    5706 	.db #0x1c	; 28
      0000D4 7F                    5707 	.db #0x7f	; 127
      0000D5 1C                    5708 	.db #0x1c	; 28
      0000D6 2A                    5709 	.db #0x2a	; 42
      0000D7 08                    5710 	.db #0x08	; 8
      0000D8 08                    5711 	.db #0x08	; 8
      0000D9 3E                    5712 	.db #0x3e	; 62
      0000DA 08                    5713 	.db #0x08	; 8
      0000DB 08                    5714 	.db #0x08	; 8
      0000DC 00                    5715 	.db #0x00	; 0
      0000DD 80                    5716 	.db #0x80	; 128
      0000DE 70                    5717 	.db #0x70	; 112	'p'
      0000DF 30                    5718 	.db #0x30	; 48	'0'
      0000E0 00                    5719 	.db #0x00	; 0
      0000E1 08                    5720 	.db #0x08	; 8
      0000E2 08                    5721 	.db #0x08	; 8
      0000E3 08                    5722 	.db #0x08	; 8
      0000E4 08                    5723 	.db #0x08	; 8
      0000E5 08                    5724 	.db #0x08	; 8
      0000E6 00                    5725 	.db #0x00	; 0
      0000E7 00                    5726 	.db #0x00	; 0
      0000E8 60                    5727 	.db #0x60	; 96
      0000E9 60                    5728 	.db #0x60	; 96
      0000EA 00                    5729 	.db #0x00	; 0
      0000EB 20                    5730 	.db #0x20	; 32
      0000EC 10                    5731 	.db #0x10	; 16
      0000ED 08                    5732 	.db #0x08	; 8
      0000EE 04                    5733 	.db #0x04	; 4
      0000EF 02                    5734 	.db #0x02	; 2
      0000F0 3E                    5735 	.db #0x3e	; 62
      0000F1 51                    5736 	.db #0x51	; 81	'Q'
      0000F2 49                    5737 	.db #0x49	; 73	'I'
      0000F3 45                    5738 	.db #0x45	; 69	'E'
      0000F4 3E                    5739 	.db #0x3e	; 62
      0000F5 00                    5740 	.db #0x00	; 0
      0000F6 42                    5741 	.db #0x42	; 66	'B'
      0000F7 7F                    5742 	.db #0x7f	; 127
      0000F8 40                    5743 	.db #0x40	; 64
      0000F9 00                    5744 	.db #0x00	; 0
      0000FA 72                    5745 	.db #0x72	; 114	'r'
      0000FB 49                    5746 	.db #0x49	; 73	'I'
      0000FC 49                    5747 	.db #0x49	; 73	'I'
      0000FD 49                    5748 	.db #0x49	; 73	'I'
      0000FE 46                    5749 	.db #0x46	; 70	'F'
      0000FF 21                    5750 	.db #0x21	; 33
      000100 41                    5751 	.db #0x41	; 65	'A'
      000101 49                    5752 	.db #0x49	; 73	'I'
      000102 4D                    5753 	.db #0x4d	; 77	'M'
      000103 33                    5754 	.db #0x33	; 51	'3'
      000104 18                    5755 	.db #0x18	; 24
      000105 14                    5756 	.db #0x14	; 20
      000106 12                    5757 	.db #0x12	; 18
      000107 7F                    5758 	.db #0x7f	; 127
      000108 10                    5759 	.db #0x10	; 16
      000109 27                    5760 	.db #0x27	; 39
      00010A 45                    5761 	.db #0x45	; 69	'E'
      00010B 45                    5762 	.db #0x45	; 69	'E'
      00010C 45                    5763 	.db #0x45	; 69	'E'
      00010D 39                    5764 	.db #0x39	; 57	'9'
      00010E 3C                    5765 	.db #0x3c	; 60
      00010F 4A                    5766 	.db #0x4a	; 74	'J'
      000110 49                    5767 	.db #0x49	; 73	'I'
      000111 49                    5768 	.db #0x49	; 73	'I'
      000112 31                    5769 	.db #0x31	; 49	'1'
      000113 41                    5770 	.db #0x41	; 65	'A'
      000114 21                    5771 	.db #0x21	; 33
      000115 11                    5772 	.db #0x11	; 17
      000116 09                    5773 	.db #0x09	; 9
      000117 07                    5774 	.db #0x07	; 7
      000118 36                    5775 	.db #0x36	; 54	'6'
      000119 49                    5776 	.db #0x49	; 73	'I'
      00011A 49                    5777 	.db #0x49	; 73	'I'
      00011B 49                    5778 	.db #0x49	; 73	'I'
      00011C 36                    5779 	.db #0x36	; 54	'6'
      00011D 46                    5780 	.db #0x46	; 70	'F'
      00011E 49                    5781 	.db #0x49	; 73	'I'
      00011F 49                    5782 	.db #0x49	; 73	'I'
      000120 29                    5783 	.db #0x29	; 41
      000121 1E                    5784 	.db #0x1e	; 30
      000122 00                    5785 	.db #0x00	; 0
      000123 00                    5786 	.db #0x00	; 0
      000124 14                    5787 	.db #0x14	; 20
      000125 00                    5788 	.db #0x00	; 0
      000126 00                    5789 	.db #0x00	; 0
      000127 00                    5790 	.db #0x00	; 0
      000128 40                    5791 	.db #0x40	; 64
      000129 34                    5792 	.db #0x34	; 52	'4'
      00012A 00                    5793 	.db #0x00	; 0
      00012B 00                    5794 	.db #0x00	; 0
      00012C 00                    5795 	.db #0x00	; 0
      00012D 08                    5796 	.db #0x08	; 8
      00012E 14                    5797 	.db #0x14	; 20
      00012F 22                    5798 	.db #0x22	; 34
      000130 41                    5799 	.db #0x41	; 65	'A'
      000131 14                    5800 	.db #0x14	; 20
      000132 14                    5801 	.db #0x14	; 20
      000133 14                    5802 	.db #0x14	; 20
      000134 14                    5803 	.db #0x14	; 20
      000135 14                    5804 	.db #0x14	; 20
      000136 00                    5805 	.db #0x00	; 0
      000137 41                    5806 	.db #0x41	; 65	'A'
      000138 22                    5807 	.db #0x22	; 34
      000139 14                    5808 	.db #0x14	; 20
      00013A 08                    5809 	.db #0x08	; 8
      00013B 02                    5810 	.db #0x02	; 2
      00013C 01                    5811 	.db #0x01	; 1
      00013D 59                    5812 	.db #0x59	; 89	'Y'
      00013E 09                    5813 	.db #0x09	; 9
      00013F 06                    5814 	.db #0x06	; 6
      000140 3E                    5815 	.db #0x3e	; 62
      000141 41                    5816 	.db #0x41	; 65	'A'
      000142 5D                    5817 	.db #0x5d	; 93
      000143 59                    5818 	.db #0x59	; 89	'Y'
      000144 4E                    5819 	.db #0x4e	; 78	'N'
      000145 7C                    5820 	.db #0x7c	; 124
      000146 12                    5821 	.db #0x12	; 18
      000147 11                    5822 	.db #0x11	; 17
      000148 12                    5823 	.db #0x12	; 18
      000149 7C                    5824 	.db #0x7c	; 124
      00014A 7F                    5825 	.db #0x7f	; 127
      00014B 49                    5826 	.db #0x49	; 73	'I'
      00014C 49                    5827 	.db #0x49	; 73	'I'
      00014D 49                    5828 	.db #0x49	; 73	'I'
      00014E 36                    5829 	.db #0x36	; 54	'6'
      00014F 3E                    5830 	.db #0x3e	; 62
      000150 41                    5831 	.db #0x41	; 65	'A'
      000151 41                    5832 	.db #0x41	; 65	'A'
      000152 41                    5833 	.db #0x41	; 65	'A'
      000153 22                    5834 	.db #0x22	; 34
      000154 7F                    5835 	.db #0x7f	; 127
      000155 41                    5836 	.db #0x41	; 65	'A'
      000156 41                    5837 	.db #0x41	; 65	'A'
      000157 41                    5838 	.db #0x41	; 65	'A'
      000158 3E                    5839 	.db #0x3e	; 62
      000159 7F                    5840 	.db #0x7f	; 127
      00015A 49                    5841 	.db #0x49	; 73	'I'
      00015B 49                    5842 	.db #0x49	; 73	'I'
      00015C 49                    5843 	.db #0x49	; 73	'I'
      00015D 41                    5844 	.db #0x41	; 65	'A'
      00015E 7F                    5845 	.db #0x7f	; 127
      00015F 09                    5846 	.db #0x09	; 9
      000160 09                    5847 	.db #0x09	; 9
      000161 09                    5848 	.db #0x09	; 9
      000162 01                    5849 	.db #0x01	; 1
      000163 3E                    5850 	.db #0x3e	; 62
      000164 41                    5851 	.db #0x41	; 65	'A'
      000165 41                    5852 	.db #0x41	; 65	'A'
      000166 51                    5853 	.db #0x51	; 81	'Q'
      000167 73                    5854 	.db #0x73	; 115	's'
      000168 7F                    5855 	.db #0x7f	; 127
      000169 08                    5856 	.db #0x08	; 8
      00016A 08                    5857 	.db #0x08	; 8
      00016B 08                    5858 	.db #0x08	; 8
      00016C 7F                    5859 	.db #0x7f	; 127
      00016D 00                    5860 	.db #0x00	; 0
      00016E 41                    5861 	.db #0x41	; 65	'A'
      00016F 7F                    5862 	.db #0x7f	; 127
      000170 41                    5863 	.db #0x41	; 65	'A'
      000171 00                    5864 	.db #0x00	; 0
      000172 20                    5865 	.db #0x20	; 32
      000173 40                    5866 	.db #0x40	; 64
      000174 41                    5867 	.db #0x41	; 65	'A'
      000175 3F                    5868 	.db #0x3f	; 63
      000176 01                    5869 	.db #0x01	; 1
      000177 7F                    5870 	.db #0x7f	; 127
      000178 08                    5871 	.db #0x08	; 8
      000179 14                    5872 	.db #0x14	; 20
      00017A 22                    5873 	.db #0x22	; 34
      00017B 41                    5874 	.db #0x41	; 65	'A'
      00017C 7F                    5875 	.db #0x7f	; 127
      00017D 40                    5876 	.db #0x40	; 64
      00017E 40                    5877 	.db #0x40	; 64
      00017F 40                    5878 	.db #0x40	; 64
      000180 40                    5879 	.db #0x40	; 64
      000181 7F                    5880 	.db #0x7f	; 127
      000182 02                    5881 	.db #0x02	; 2
      000183 1C                    5882 	.db #0x1c	; 28
      000184 02                    5883 	.db #0x02	; 2
      000185 7F                    5884 	.db #0x7f	; 127
      000186 7F                    5885 	.db #0x7f	; 127
      000187 04                    5886 	.db #0x04	; 4
      000188 08                    5887 	.db #0x08	; 8
      000189 10                    5888 	.db #0x10	; 16
      00018A 7F                    5889 	.db #0x7f	; 127
      00018B 3E                    5890 	.db #0x3e	; 62
      00018C 41                    5891 	.db #0x41	; 65	'A'
      00018D 41                    5892 	.db #0x41	; 65	'A'
      00018E 41                    5893 	.db #0x41	; 65	'A'
      00018F 3E                    5894 	.db #0x3e	; 62
      000190 7F                    5895 	.db #0x7f	; 127
      000191 09                    5896 	.db #0x09	; 9
      000192 09                    5897 	.db #0x09	; 9
      000193 09                    5898 	.db #0x09	; 9
      000194 06                    5899 	.db #0x06	; 6
      000195 3E                    5900 	.db #0x3e	; 62
      000196 41                    5901 	.db #0x41	; 65	'A'
      000197 51                    5902 	.db #0x51	; 81	'Q'
      000198 21                    5903 	.db #0x21	; 33
      000199 5E                    5904 	.db #0x5e	; 94
      00019A 7F                    5905 	.db #0x7f	; 127
      00019B 09                    5906 	.db #0x09	; 9
      00019C 19                    5907 	.db #0x19	; 25
      00019D 29                    5908 	.db #0x29	; 41
      00019E 46                    5909 	.db #0x46	; 70	'F'
      00019F 26                    5910 	.db #0x26	; 38
      0001A0 49                    5911 	.db #0x49	; 73	'I'
      0001A1 49                    5912 	.db #0x49	; 73	'I'
      0001A2 49                    5913 	.db #0x49	; 73	'I'
      0001A3 32                    5914 	.db #0x32	; 50	'2'
      0001A4 03                    5915 	.db #0x03	; 3
      0001A5 01                    5916 	.db #0x01	; 1
      0001A6 7F                    5917 	.db #0x7f	; 127
      0001A7 01                    5918 	.db #0x01	; 1
      0001A8 03                    5919 	.db #0x03	; 3
      0001A9 3F                    5920 	.db #0x3f	; 63
      0001AA 40                    5921 	.db #0x40	; 64
      0001AB 40                    5922 	.db #0x40	; 64
      0001AC 40                    5923 	.db #0x40	; 64
      0001AD 3F                    5924 	.db #0x3f	; 63
      0001AE 1F                    5925 	.db #0x1f	; 31
      0001AF 20                    5926 	.db #0x20	; 32
      0001B0 40                    5927 	.db #0x40	; 64
      0001B1 20                    5928 	.db #0x20	; 32
      0001B2 1F                    5929 	.db #0x1f	; 31
      0001B3 3F                    5930 	.db #0x3f	; 63
      0001B4 40                    5931 	.db #0x40	; 64
      0001B5 38                    5932 	.db #0x38	; 56	'8'
      0001B6 40                    5933 	.db #0x40	; 64
      0001B7 3F                    5934 	.db #0x3f	; 63
      0001B8 63                    5935 	.db #0x63	; 99	'c'
      0001B9 14                    5936 	.db #0x14	; 20
      0001BA 08                    5937 	.db #0x08	; 8
      0001BB 14                    5938 	.db #0x14	; 20
      0001BC 63                    5939 	.db #0x63	; 99	'c'
      0001BD 03                    5940 	.db #0x03	; 3
      0001BE 04                    5941 	.db #0x04	; 4
      0001BF 78                    5942 	.db #0x78	; 120	'x'
      0001C0 04                    5943 	.db #0x04	; 4
      0001C1 03                    5944 	.db #0x03	; 3
      0001C2 61                    5945 	.db #0x61	; 97	'a'
      0001C3 59                    5946 	.db #0x59	; 89	'Y'
      0001C4 49                    5947 	.db #0x49	; 73	'I'
      0001C5 4D                    5948 	.db #0x4d	; 77	'M'
      0001C6 43                    5949 	.db #0x43	; 67	'C'
      0001C7 00                    5950 	.db #0x00	; 0
      0001C8 7F                    5951 	.db #0x7f	; 127
      0001C9 41                    5952 	.db #0x41	; 65	'A'
      0001CA 41                    5953 	.db #0x41	; 65	'A'
      0001CB 41                    5954 	.db #0x41	; 65	'A'
      0001CC 02                    5955 	.db #0x02	; 2
      0001CD 04                    5956 	.db #0x04	; 4
      0001CE 08                    5957 	.db #0x08	; 8
      0001CF 10                    5958 	.db #0x10	; 16
      0001D0 20                    5959 	.db #0x20	; 32
      0001D1 00                    5960 	.db #0x00	; 0
      0001D2 41                    5961 	.db #0x41	; 65	'A'
      0001D3 41                    5962 	.db #0x41	; 65	'A'
      0001D4 41                    5963 	.db #0x41	; 65	'A'
      0001D5 7F                    5964 	.db #0x7f	; 127
      0001D6 04                    5965 	.db #0x04	; 4
      0001D7 02                    5966 	.db #0x02	; 2
      0001D8 01                    5967 	.db #0x01	; 1
      0001D9 02                    5968 	.db #0x02	; 2
      0001DA 04                    5969 	.db #0x04	; 4
      0001DB 40                    5970 	.db #0x40	; 64
      0001DC 40                    5971 	.db #0x40	; 64
      0001DD 40                    5972 	.db #0x40	; 64
      0001DE 40                    5973 	.db #0x40	; 64
      0001DF 40                    5974 	.db #0x40	; 64
      0001E0 00                    5975 	.db #0x00	; 0
      0001E1 03                    5976 	.db #0x03	; 3
      0001E2 07                    5977 	.db #0x07	; 7
      0001E3 08                    5978 	.db #0x08	; 8
      0001E4 00                    5979 	.db #0x00	; 0
      0001E5 20                    5980 	.db #0x20	; 32
      0001E6 54                    5981 	.db #0x54	; 84	'T'
      0001E7 54                    5982 	.db #0x54	; 84	'T'
      0001E8 78                    5983 	.db #0x78	; 120	'x'
      0001E9 40                    5984 	.db #0x40	; 64
      0001EA 7F                    5985 	.db #0x7f	; 127
      0001EB 28                    5986 	.db #0x28	; 40
      0001EC 44                    5987 	.db #0x44	; 68	'D'
      0001ED 44                    5988 	.db #0x44	; 68	'D'
      0001EE 38                    5989 	.db #0x38	; 56	'8'
      0001EF 38                    5990 	.db #0x38	; 56	'8'
      0001F0 44                    5991 	.db #0x44	; 68	'D'
      0001F1 44                    5992 	.db #0x44	; 68	'D'
      0001F2 44                    5993 	.db #0x44	; 68	'D'
      0001F3 28                    5994 	.db #0x28	; 40
      0001F4 38                    5995 	.db #0x38	; 56	'8'
      0001F5 44                    5996 	.db #0x44	; 68	'D'
      0001F6 44                    5997 	.db #0x44	; 68	'D'
      0001F7 28                    5998 	.db #0x28	; 40
      0001F8 7F                    5999 	.db #0x7f	; 127
      0001F9 38                    6000 	.db #0x38	; 56	'8'
      0001FA 54                    6001 	.db #0x54	; 84	'T'
      0001FB 54                    6002 	.db #0x54	; 84	'T'
      0001FC 54                    6003 	.db #0x54	; 84	'T'
      0001FD 18                    6004 	.db #0x18	; 24
      0001FE 00                    6005 	.db #0x00	; 0
      0001FF 08                    6006 	.db #0x08	; 8
      000200 7E                    6007 	.db #0x7e	; 126
      000201 09                    6008 	.db #0x09	; 9
      000202 02                    6009 	.db #0x02	; 2
      000203 18                    6010 	.db #0x18	; 24
      000204 A4                    6011 	.db #0xa4	; 164
      000205 A4                    6012 	.db #0xa4	; 164
      000206 9C                    6013 	.db #0x9c	; 156
      000207 78                    6014 	.db #0x78	; 120	'x'
      000208 7F                    6015 	.db #0x7f	; 127
      000209 08                    6016 	.db #0x08	; 8
      00020A 04                    6017 	.db #0x04	; 4
      00020B 04                    6018 	.db #0x04	; 4
      00020C 78                    6019 	.db #0x78	; 120	'x'
      00020D 00                    6020 	.db #0x00	; 0
      00020E 44                    6021 	.db #0x44	; 68	'D'
      00020F 7D                    6022 	.db #0x7d	; 125
      000210 40                    6023 	.db #0x40	; 64
      000211 00                    6024 	.db #0x00	; 0
      000212 20                    6025 	.db #0x20	; 32
      000213 40                    6026 	.db #0x40	; 64
      000214 40                    6027 	.db #0x40	; 64
      000215 3D                    6028 	.db #0x3d	; 61
      000216 00                    6029 	.db #0x00	; 0
      000217 7F                    6030 	.db #0x7f	; 127
      000218 10                    6031 	.db #0x10	; 16
      000219 28                    6032 	.db #0x28	; 40
      00021A 44                    6033 	.db #0x44	; 68	'D'
      00021B 00                    6034 	.db #0x00	; 0
      00021C 00                    6035 	.db #0x00	; 0
      00021D 41                    6036 	.db #0x41	; 65	'A'
      00021E 7F                    6037 	.db #0x7f	; 127
      00021F 40                    6038 	.db #0x40	; 64
      000220 00                    6039 	.db #0x00	; 0
      000221 7C                    6040 	.db #0x7c	; 124
      000222 04                    6041 	.db #0x04	; 4
      000223 78                    6042 	.db #0x78	; 120	'x'
      000224 04                    6043 	.db #0x04	; 4
      000225 78                    6044 	.db #0x78	; 120	'x'
      000226 7C                    6045 	.db #0x7c	; 124
      000227 08                    6046 	.db #0x08	; 8
      000228 04                    6047 	.db #0x04	; 4
      000229 04                    6048 	.db #0x04	; 4
      00022A 78                    6049 	.db #0x78	; 120	'x'
      00022B 38                    6050 	.db #0x38	; 56	'8'
      00022C 44                    6051 	.db #0x44	; 68	'D'
      00022D 44                    6052 	.db #0x44	; 68	'D'
      00022E 44                    6053 	.db #0x44	; 68	'D'
      00022F 38                    6054 	.db #0x38	; 56	'8'
      000230 FC                    6055 	.db #0xfc	; 252
      000231 18                    6056 	.db #0x18	; 24
      000232 24                    6057 	.db #0x24	; 36
      000233 24                    6058 	.db #0x24	; 36
      000234 18                    6059 	.db #0x18	; 24
      000235 18                    6060 	.db #0x18	; 24
      000236 24                    6061 	.db #0x24	; 36
      000237 24                    6062 	.db #0x24	; 36
      000238 18                    6063 	.db #0x18	; 24
      000239 FC                    6064 	.db #0xfc	; 252
      00023A 7C                    6065 	.db #0x7c	; 124
      00023B 08                    6066 	.db #0x08	; 8
      00023C 04                    6067 	.db #0x04	; 4
      00023D 04                    6068 	.db #0x04	; 4
      00023E 08                    6069 	.db #0x08	; 8
      00023F 48                    6070 	.db #0x48	; 72	'H'
      000240 54                    6071 	.db #0x54	; 84	'T'
      000241 54                    6072 	.db #0x54	; 84	'T'
      000242 54                    6073 	.db #0x54	; 84	'T'
      000243 24                    6074 	.db #0x24	; 36
      000244 04                    6075 	.db #0x04	; 4
      000245 04                    6076 	.db #0x04	; 4
      000246 3F                    6077 	.db #0x3f	; 63
      000247 44                    6078 	.db #0x44	; 68	'D'
      000248 24                    6079 	.db #0x24	; 36
      000249 3C                    6080 	.db #0x3c	; 60
      00024A 40                    6081 	.db #0x40	; 64
      00024B 40                    6082 	.db #0x40	; 64
      00024C 20                    6083 	.db #0x20	; 32
      00024D 7C                    6084 	.db #0x7c	; 124
      00024E 1C                    6085 	.db #0x1c	; 28
      00024F 20                    6086 	.db #0x20	; 32
      000250 40                    6087 	.db #0x40	; 64
      000251 20                    6088 	.db #0x20	; 32
      000252 1C                    6089 	.db #0x1c	; 28
      000253 3C                    6090 	.db #0x3c	; 60
      000254 40                    6091 	.db #0x40	; 64
      000255 30                    6092 	.db #0x30	; 48	'0'
      000256 40                    6093 	.db #0x40	; 64
      000257 3C                    6094 	.db #0x3c	; 60
      000258 44                    6095 	.db #0x44	; 68	'D'
      000259 28                    6096 	.db #0x28	; 40
      00025A 10                    6097 	.db #0x10	; 16
      00025B 28                    6098 	.db #0x28	; 40
      00025C 44                    6099 	.db #0x44	; 68	'D'
      00025D 4C                    6100 	.db #0x4c	; 76	'L'
      00025E 90                    6101 	.db #0x90	; 144
      00025F 90                    6102 	.db #0x90	; 144
      000260 90                    6103 	.db #0x90	; 144
      000261 7C                    6104 	.db #0x7c	; 124
      000262 44                    6105 	.db #0x44	; 68	'D'
      000263 64                    6106 	.db #0x64	; 100	'd'
      000264 54                    6107 	.db #0x54	; 84	'T'
      000265 4C                    6108 	.db #0x4c	; 76	'L'
      000266 44                    6109 	.db #0x44	; 68	'D'
      000267 00                    6110 	.db #0x00	; 0
      000268 08                    6111 	.db #0x08	; 8
      000269 36                    6112 	.db #0x36	; 54	'6'
      00026A 41                    6113 	.db #0x41	; 65	'A'
      00026B 00                    6114 	.db #0x00	; 0
      00026C 00                    6115 	.db #0x00	; 0
      00026D 00                    6116 	.db #0x00	; 0
      00026E 77                    6117 	.db #0x77	; 119	'w'
      00026F 00                    6118 	.db #0x00	; 0
      000270 00                    6119 	.db #0x00	; 0
      000271 00                    6120 	.db #0x00	; 0
      000272 41                    6121 	.db #0x41	; 65	'A'
      000273 36                    6122 	.db #0x36	; 54	'6'
      000274 08                    6123 	.db #0x08	; 8
      000275 00                    6124 	.db #0x00	; 0
      000276 02                    6125 	.db #0x02	; 2
      000277 01                    6126 	.db #0x01	; 1
      000278 02                    6127 	.db #0x02	; 2
      000279 04                    6128 	.db #0x04	; 4
      00027A 02                    6129 	.db #0x02	; 2
      00027B 3C                    6130 	.db #0x3c	; 60
      00027C 26                    6131 	.db #0x26	; 38
      00027D 23                    6132 	.db #0x23	; 35
      00027E 26                    6133 	.db #0x26	; 38
      00027F 3C                    6134 	.db #0x3c	; 60
      000280 1E                    6135 	.db #0x1e	; 30
      000281 A1                    6136 	.db #0xa1	; 161
      000282 A1                    6137 	.db #0xa1	; 161
      000283 61                    6138 	.db #0x61	; 97	'a'
      000284 12                    6139 	.db #0x12	; 18
      000285 3A                    6140 	.db #0x3a	; 58
      000286 40                    6141 	.db #0x40	; 64
      000287 40                    6142 	.db #0x40	; 64
      000288 20                    6143 	.db #0x20	; 32
      000289 7A                    6144 	.db #0x7a	; 122	'z'
      00028A 38                    6145 	.db #0x38	; 56	'8'
      00028B 54                    6146 	.db #0x54	; 84	'T'
      00028C 54                    6147 	.db #0x54	; 84	'T'
      00028D 55                    6148 	.db #0x55	; 85	'U'
      00028E 59                    6149 	.db #0x59	; 89	'Y'
      00028F 21                    6150 	.db #0x21	; 33
      000290 55                    6151 	.db #0x55	; 85	'U'
      000291 55                    6152 	.db #0x55	; 85	'U'
      000292 79                    6153 	.db #0x79	; 121	'y'
      000293 41                    6154 	.db #0x41	; 65	'A'
      000294 22                    6155 	.db #0x22	; 34
      000295 54                    6156 	.db #0x54	; 84	'T'
      000296 54                    6157 	.db #0x54	; 84	'T'
      000297 78                    6158 	.db #0x78	; 120	'x'
      000298 42                    6159 	.db #0x42	; 66	'B'
      000299 21                    6160 	.db #0x21	; 33
      00029A 55                    6161 	.db #0x55	; 85	'U'
      00029B 54                    6162 	.db #0x54	; 84	'T'
      00029C 78                    6163 	.db #0x78	; 120	'x'
      00029D 40                    6164 	.db #0x40	; 64
      00029E 20                    6165 	.db #0x20	; 32
      00029F 54                    6166 	.db #0x54	; 84	'T'
      0002A0 55                    6167 	.db #0x55	; 85	'U'
      0002A1 79                    6168 	.db #0x79	; 121	'y'
      0002A2 40                    6169 	.db #0x40	; 64
      0002A3 0C                    6170 	.db #0x0c	; 12
      0002A4 1E                    6171 	.db #0x1e	; 30
      0002A5 52                    6172 	.db #0x52	; 82	'R'
      0002A6 72                    6173 	.db #0x72	; 114	'r'
      0002A7 12                    6174 	.db #0x12	; 18
      0002A8 39                    6175 	.db #0x39	; 57	'9'
      0002A9 55                    6176 	.db #0x55	; 85	'U'
      0002AA 55                    6177 	.db #0x55	; 85	'U'
      0002AB 55                    6178 	.db #0x55	; 85	'U'
      0002AC 59                    6179 	.db #0x59	; 89	'Y'
      0002AD 39                    6180 	.db #0x39	; 57	'9'
      0002AE 54                    6181 	.db #0x54	; 84	'T'
      0002AF 54                    6182 	.db #0x54	; 84	'T'
      0002B0 54                    6183 	.db #0x54	; 84	'T'
      0002B1 59                    6184 	.db #0x59	; 89	'Y'
      0002B2 39                    6185 	.db #0x39	; 57	'9'
      0002B3 55                    6186 	.db #0x55	; 85	'U'
      0002B4 54                    6187 	.db #0x54	; 84	'T'
      0002B5 54                    6188 	.db #0x54	; 84	'T'
      0002B6 58                    6189 	.db #0x58	; 88	'X'
      0002B7 00                    6190 	.db #0x00	; 0
      0002B8 00                    6191 	.db #0x00	; 0
      0002B9 45                    6192 	.db #0x45	; 69	'E'
      0002BA 7C                    6193 	.db #0x7c	; 124
      0002BB 41                    6194 	.db #0x41	; 65	'A'
      0002BC 00                    6195 	.db #0x00	; 0
      0002BD 02                    6196 	.db #0x02	; 2
      0002BE 45                    6197 	.db #0x45	; 69	'E'
      0002BF 7D                    6198 	.db #0x7d	; 125
      0002C0 42                    6199 	.db #0x42	; 66	'B'
      0002C1 00                    6200 	.db #0x00	; 0
      0002C2 01                    6201 	.db #0x01	; 1
      0002C3 45                    6202 	.db #0x45	; 69	'E'
      0002C4 7C                    6203 	.db #0x7c	; 124
      0002C5 40                    6204 	.db #0x40	; 64
      0002C6 7D                    6205 	.db #0x7d	; 125
      0002C7 12                    6206 	.db #0x12	; 18
      0002C8 11                    6207 	.db #0x11	; 17
      0002C9 12                    6208 	.db #0x12	; 18
      0002CA 7D                    6209 	.db #0x7d	; 125
      0002CB F0                    6210 	.db #0xf0	; 240
      0002CC 28                    6211 	.db #0x28	; 40
      0002CD 25                    6212 	.db #0x25	; 37
      0002CE 28                    6213 	.db #0x28	; 40
      0002CF F0                    6214 	.db #0xf0	; 240
      0002D0 7C                    6215 	.db #0x7c	; 124
      0002D1 54                    6216 	.db #0x54	; 84	'T'
      0002D2 55                    6217 	.db #0x55	; 85	'U'
      0002D3 45                    6218 	.db #0x45	; 69	'E'
      0002D4 00                    6219 	.db #0x00	; 0
      0002D5 20                    6220 	.db #0x20	; 32
      0002D6 54                    6221 	.db #0x54	; 84	'T'
      0002D7 54                    6222 	.db #0x54	; 84	'T'
      0002D8 7C                    6223 	.db #0x7c	; 124
      0002D9 54                    6224 	.db #0x54	; 84	'T'
      0002DA 7C                    6225 	.db #0x7c	; 124
      0002DB 0A                    6226 	.db #0x0a	; 10
      0002DC 09                    6227 	.db #0x09	; 9
      0002DD 7F                    6228 	.db #0x7f	; 127
      0002DE 49                    6229 	.db #0x49	; 73	'I'
      0002DF 32                    6230 	.db #0x32	; 50	'2'
      0002E0 49                    6231 	.db #0x49	; 73	'I'
      0002E1 49                    6232 	.db #0x49	; 73	'I'
      0002E2 49                    6233 	.db #0x49	; 73	'I'
      0002E3 32                    6234 	.db #0x32	; 50	'2'
      0002E4 3A                    6235 	.db #0x3a	; 58
      0002E5 44                    6236 	.db #0x44	; 68	'D'
      0002E6 44                    6237 	.db #0x44	; 68	'D'
      0002E7 44                    6238 	.db #0x44	; 68	'D'
      0002E8 3A                    6239 	.db #0x3a	; 58
      0002E9 32                    6240 	.db #0x32	; 50	'2'
      0002EA 4A                    6241 	.db #0x4a	; 74	'J'
      0002EB 48                    6242 	.db #0x48	; 72	'H'
      0002EC 48                    6243 	.db #0x48	; 72	'H'
      0002ED 30                    6244 	.db #0x30	; 48	'0'
      0002EE 3A                    6245 	.db #0x3a	; 58
      0002EF 41                    6246 	.db #0x41	; 65	'A'
      0002F0 41                    6247 	.db #0x41	; 65	'A'
      0002F1 21                    6248 	.db #0x21	; 33
      0002F2 7A                    6249 	.db #0x7a	; 122	'z'
      0002F3 3A                    6250 	.db #0x3a	; 58
      0002F4 42                    6251 	.db #0x42	; 66	'B'
      0002F5 40                    6252 	.db #0x40	; 64
      0002F6 20                    6253 	.db #0x20	; 32
      0002F7 78                    6254 	.db #0x78	; 120	'x'
      0002F8 00                    6255 	.db #0x00	; 0
      0002F9 9D                    6256 	.db #0x9d	; 157
      0002FA A0                    6257 	.db #0xa0	; 160
      0002FB A0                    6258 	.db #0xa0	; 160
      0002FC 7D                    6259 	.db #0x7d	; 125
      0002FD 3D                    6260 	.db #0x3d	; 61
      0002FE 42                    6261 	.db #0x42	; 66	'B'
      0002FF 42                    6262 	.db #0x42	; 66	'B'
      000300 42                    6263 	.db #0x42	; 66	'B'
      000301 3D                    6264 	.db #0x3d	; 61
      000302 3D                    6265 	.db #0x3d	; 61
      000303 40                    6266 	.db #0x40	; 64
      000304 40                    6267 	.db #0x40	; 64
      000305 40                    6268 	.db #0x40	; 64
      000306 3D                    6269 	.db #0x3d	; 61
      000307 3C                    6270 	.db #0x3c	; 60
      000308 24                    6271 	.db #0x24	; 36
      000309 FF                    6272 	.db #0xff	; 255
      00030A 24                    6273 	.db #0x24	; 36
      00030B 24                    6274 	.db #0x24	; 36
      00030C 48                    6275 	.db #0x48	; 72	'H'
      00030D 7E                    6276 	.db #0x7e	; 126
      00030E 49                    6277 	.db #0x49	; 73	'I'
      00030F 43                    6278 	.db #0x43	; 67	'C'
      000310 66                    6279 	.db #0x66	; 102	'f'
      000311 2B                    6280 	.db #0x2b	; 43
      000312 2F                    6281 	.db #0x2f	; 47
      000313 FC                    6282 	.db #0xfc	; 252
      000314 2F                    6283 	.db #0x2f	; 47
      000315 2B                    6284 	.db #0x2b	; 43
      000316 FF                    6285 	.db #0xff	; 255
      000317 09                    6286 	.db #0x09	; 9
      000318 29                    6287 	.db #0x29	; 41
      000319 F6                    6288 	.db #0xf6	; 246
      00031A 20                    6289 	.db #0x20	; 32
      00031B C0                    6290 	.db #0xc0	; 192
      00031C 88                    6291 	.db #0x88	; 136
      00031D 7E                    6292 	.db #0x7e	; 126
      00031E 09                    6293 	.db #0x09	; 9
      00031F 03                    6294 	.db #0x03	; 3
      000320 20                    6295 	.db #0x20	; 32
      000321 54                    6296 	.db #0x54	; 84	'T'
      000322 54                    6297 	.db #0x54	; 84	'T'
      000323 79                    6298 	.db #0x79	; 121	'y'
      000324 41                    6299 	.db #0x41	; 65	'A'
      000325 00                    6300 	.db #0x00	; 0
      000326 00                    6301 	.db #0x00	; 0
      000327 44                    6302 	.db #0x44	; 68	'D'
      000328 7D                    6303 	.db #0x7d	; 125
      000329 41                    6304 	.db #0x41	; 65	'A'
      00032A 30                    6305 	.db #0x30	; 48	'0'
      00032B 48                    6306 	.db #0x48	; 72	'H'
      00032C 48                    6307 	.db #0x48	; 72	'H'
      00032D 4A                    6308 	.db #0x4a	; 74	'J'
      00032E 32                    6309 	.db #0x32	; 50	'2'
      00032F 38                    6310 	.db #0x38	; 56	'8'
      000330 40                    6311 	.db #0x40	; 64
      000331 40                    6312 	.db #0x40	; 64
      000332 22                    6313 	.db #0x22	; 34
      000333 7A                    6314 	.db #0x7a	; 122	'z'
      000334 00                    6315 	.db #0x00	; 0
      000335 7A                    6316 	.db #0x7a	; 122	'z'
      000336 0A                    6317 	.db #0x0a	; 10
      000337 0A                    6318 	.db #0x0a	; 10
      000338 72                    6319 	.db #0x72	; 114	'r'
      000339 7D                    6320 	.db #0x7d	; 125
      00033A 0D                    6321 	.db #0x0d	; 13
      00033B 19                    6322 	.db #0x19	; 25
      00033C 31                    6323 	.db #0x31	; 49	'1'
      00033D 7D                    6324 	.db #0x7d	; 125
      00033E 26                    6325 	.db #0x26	; 38
      00033F 29                    6326 	.db #0x29	; 41
      000340 29                    6327 	.db #0x29	; 41
      000341 2F                    6328 	.db #0x2f	; 47
      000342 28                    6329 	.db #0x28	; 40
      000343 26                    6330 	.db #0x26	; 38
      000344 29                    6331 	.db #0x29	; 41
      000345 29                    6332 	.db #0x29	; 41
      000346 29                    6333 	.db #0x29	; 41
      000347 26                    6334 	.db #0x26	; 38
      000348 30                    6335 	.db #0x30	; 48	'0'
      000349 48                    6336 	.db #0x48	; 72	'H'
      00034A 4D                    6337 	.db #0x4d	; 77	'M'
      00034B 40                    6338 	.db #0x40	; 64
      00034C 20                    6339 	.db #0x20	; 32
      00034D 38                    6340 	.db #0x38	; 56	'8'
      00034E 08                    6341 	.db #0x08	; 8
      00034F 08                    6342 	.db #0x08	; 8
      000350 08                    6343 	.db #0x08	; 8
      000351 08                    6344 	.db #0x08	; 8
      000352 08                    6345 	.db #0x08	; 8
      000353 08                    6346 	.db #0x08	; 8
      000354 08                    6347 	.db #0x08	; 8
      000355 08                    6348 	.db #0x08	; 8
      000356 38                    6349 	.db #0x38	; 56	'8'
      000357 2F                    6350 	.db #0x2f	; 47
      000358 10                    6351 	.db #0x10	; 16
      000359 C8                    6352 	.db #0xc8	; 200
      00035A AC                    6353 	.db #0xac	; 172
      00035B BA                    6354 	.db #0xba	; 186
      00035C 2F                    6355 	.db #0x2f	; 47
      00035D 10                    6356 	.db #0x10	; 16
      00035E 28                    6357 	.db #0x28	; 40
      00035F 34                    6358 	.db #0x34	; 52	'4'
      000360 FA                    6359 	.db #0xfa	; 250
      000361 00                    6360 	.db #0x00	; 0
      000362 00                    6361 	.db #0x00	; 0
      000363 7B                    6362 	.db #0x7b	; 123
      000364 00                    6363 	.db #0x00	; 0
      000365 00                    6364 	.db #0x00	; 0
      000366 08                    6365 	.db #0x08	; 8
      000367 14                    6366 	.db #0x14	; 20
      000368 2A                    6367 	.db #0x2a	; 42
      000369 14                    6368 	.db #0x14	; 20
      00036A 22                    6369 	.db #0x22	; 34
      00036B 22                    6370 	.db #0x22	; 34
      00036C 14                    6371 	.db #0x14	; 20
      00036D 2A                    6372 	.db #0x2a	; 42
      00036E 14                    6373 	.db #0x14	; 20
      00036F 08                    6374 	.db #0x08	; 8
      000370 AA                    6375 	.db #0xaa	; 170
      000371 00                    6376 	.db #0x00	; 0
      000372 55                    6377 	.db #0x55	; 85	'U'
      000373 00                    6378 	.db #0x00	; 0
      000374 AA                    6379 	.db #0xaa	; 170
      000375 AA                    6380 	.db #0xaa	; 170
      000376 55                    6381 	.db #0x55	; 85	'U'
      000377 AA                    6382 	.db #0xaa	; 170
      000378 55                    6383 	.db #0x55	; 85	'U'
      000379 AA                    6384 	.db #0xaa	; 170
      00037A 00                    6385 	.db #0x00	; 0
      00037B 00                    6386 	.db #0x00	; 0
      00037C 00                    6387 	.db #0x00	; 0
      00037D FF                    6388 	.db #0xff	; 255
      00037E 00                    6389 	.db #0x00	; 0
      00037F 10                    6390 	.db #0x10	; 16
      000380 10                    6391 	.db #0x10	; 16
      000381 10                    6392 	.db #0x10	; 16
      000382 FF                    6393 	.db #0xff	; 255
      000383 00                    6394 	.db #0x00	; 0
      000384 14                    6395 	.db #0x14	; 20
      000385 14                    6396 	.db #0x14	; 20
      000386 14                    6397 	.db #0x14	; 20
      000387 FF                    6398 	.db #0xff	; 255
      000388 00                    6399 	.db #0x00	; 0
      000389 10                    6400 	.db #0x10	; 16
      00038A 10                    6401 	.db #0x10	; 16
      00038B FF                    6402 	.db #0xff	; 255
      00038C 00                    6403 	.db #0x00	; 0
      00038D FF                    6404 	.db #0xff	; 255
      00038E 10                    6405 	.db #0x10	; 16
      00038F 10                    6406 	.db #0x10	; 16
      000390 F0                    6407 	.db #0xf0	; 240
      000391 10                    6408 	.db #0x10	; 16
      000392 F0                    6409 	.db #0xf0	; 240
      000393 14                    6410 	.db #0x14	; 20
      000394 14                    6411 	.db #0x14	; 20
      000395 14                    6412 	.db #0x14	; 20
      000396 FC                    6413 	.db #0xfc	; 252
      000397 00                    6414 	.db #0x00	; 0
      000398 14                    6415 	.db #0x14	; 20
      000399 14                    6416 	.db #0x14	; 20
      00039A F7                    6417 	.db #0xf7	; 247
      00039B 00                    6418 	.db #0x00	; 0
      00039C FF                    6419 	.db #0xff	; 255
      00039D 00                    6420 	.db #0x00	; 0
      00039E 00                    6421 	.db #0x00	; 0
      00039F FF                    6422 	.db #0xff	; 255
      0003A0 00                    6423 	.db #0x00	; 0
      0003A1 FF                    6424 	.db #0xff	; 255
      0003A2 14                    6425 	.db #0x14	; 20
      0003A3 14                    6426 	.db #0x14	; 20
      0003A4 F4                    6427 	.db #0xf4	; 244
      0003A5 04                    6428 	.db #0x04	; 4
      0003A6 FC                    6429 	.db #0xfc	; 252
      0003A7 14                    6430 	.db #0x14	; 20
      0003A8 14                    6431 	.db #0x14	; 20
      0003A9 17                    6432 	.db #0x17	; 23
      0003AA 10                    6433 	.db #0x10	; 16
      0003AB 1F                    6434 	.db #0x1f	; 31
      0003AC 10                    6435 	.db #0x10	; 16
      0003AD 10                    6436 	.db #0x10	; 16
      0003AE 1F                    6437 	.db #0x1f	; 31
      0003AF 10                    6438 	.db #0x10	; 16
      0003B0 1F                    6439 	.db #0x1f	; 31
      0003B1 14                    6440 	.db #0x14	; 20
      0003B2 14                    6441 	.db #0x14	; 20
      0003B3 14                    6442 	.db #0x14	; 20
      0003B4 1F                    6443 	.db #0x1f	; 31
      0003B5 00                    6444 	.db #0x00	; 0
      0003B6 10                    6445 	.db #0x10	; 16
      0003B7 10                    6446 	.db #0x10	; 16
      0003B8 10                    6447 	.db #0x10	; 16
      0003B9 F0                    6448 	.db #0xf0	; 240
      0003BA 00                    6449 	.db #0x00	; 0
      0003BB 00                    6450 	.db #0x00	; 0
      0003BC 00                    6451 	.db #0x00	; 0
      0003BD 00                    6452 	.db #0x00	; 0
      0003BE 1F                    6453 	.db #0x1f	; 31
      0003BF 10                    6454 	.db #0x10	; 16
      0003C0 10                    6455 	.db #0x10	; 16
      0003C1 10                    6456 	.db #0x10	; 16
      0003C2 10                    6457 	.db #0x10	; 16
      0003C3 1F                    6458 	.db #0x1f	; 31
      0003C4 10                    6459 	.db #0x10	; 16
      0003C5 10                    6460 	.db #0x10	; 16
      0003C6 10                    6461 	.db #0x10	; 16
      0003C7 10                    6462 	.db #0x10	; 16
      0003C8 F0                    6463 	.db #0xf0	; 240
      0003C9 10                    6464 	.db #0x10	; 16
      0003CA 00                    6465 	.db #0x00	; 0
      0003CB 00                    6466 	.db #0x00	; 0
      0003CC 00                    6467 	.db #0x00	; 0
      0003CD FF                    6468 	.db #0xff	; 255
      0003CE 10                    6469 	.db #0x10	; 16
      0003CF 10                    6470 	.db #0x10	; 16
      0003D0 10                    6471 	.db #0x10	; 16
      0003D1 10                    6472 	.db #0x10	; 16
      0003D2 10                    6473 	.db #0x10	; 16
      0003D3 10                    6474 	.db #0x10	; 16
      0003D4 10                    6475 	.db #0x10	; 16
      0003D5 10                    6476 	.db #0x10	; 16
      0003D6 10                    6477 	.db #0x10	; 16
      0003D7 FF                    6478 	.db #0xff	; 255
      0003D8 10                    6479 	.db #0x10	; 16
      0003D9 00                    6480 	.db #0x00	; 0
      0003DA 00                    6481 	.db #0x00	; 0
      0003DB 00                    6482 	.db #0x00	; 0
      0003DC FF                    6483 	.db #0xff	; 255
      0003DD 14                    6484 	.db #0x14	; 20
      0003DE 00                    6485 	.db #0x00	; 0
      0003DF 00                    6486 	.db #0x00	; 0
      0003E0 FF                    6487 	.db #0xff	; 255
      0003E1 00                    6488 	.db #0x00	; 0
      0003E2 FF                    6489 	.db #0xff	; 255
      0003E3 00                    6490 	.db #0x00	; 0
      0003E4 00                    6491 	.db #0x00	; 0
      0003E5 1F                    6492 	.db #0x1f	; 31
      0003E6 10                    6493 	.db #0x10	; 16
      0003E7 17                    6494 	.db #0x17	; 23
      0003E8 00                    6495 	.db #0x00	; 0
      0003E9 00                    6496 	.db #0x00	; 0
      0003EA FC                    6497 	.db #0xfc	; 252
      0003EB 04                    6498 	.db #0x04	; 4
      0003EC F4                    6499 	.db #0xf4	; 244
      0003ED 14                    6500 	.db #0x14	; 20
      0003EE 14                    6501 	.db #0x14	; 20
      0003EF 17                    6502 	.db #0x17	; 23
      0003F0 10                    6503 	.db #0x10	; 16
      0003F1 17                    6504 	.db #0x17	; 23
      0003F2 14                    6505 	.db #0x14	; 20
      0003F3 14                    6506 	.db #0x14	; 20
      0003F4 F4                    6507 	.db #0xf4	; 244
      0003F5 04                    6508 	.db #0x04	; 4
      0003F6 F4                    6509 	.db #0xf4	; 244
      0003F7 00                    6510 	.db #0x00	; 0
      0003F8 00                    6511 	.db #0x00	; 0
      0003F9 FF                    6512 	.db #0xff	; 255
      0003FA 00                    6513 	.db #0x00	; 0
      0003FB F7                    6514 	.db #0xf7	; 247
      0003FC 14                    6515 	.db #0x14	; 20
      0003FD 14                    6516 	.db #0x14	; 20
      0003FE 14                    6517 	.db #0x14	; 20
      0003FF 14                    6518 	.db #0x14	; 20
      000400 14                    6519 	.db #0x14	; 20
      000401 14                    6520 	.db #0x14	; 20
      000402 14                    6521 	.db #0x14	; 20
      000403 F7                    6522 	.db #0xf7	; 247
      000404 00                    6523 	.db #0x00	; 0
      000405 F7                    6524 	.db #0xf7	; 247
      000406 14                    6525 	.db #0x14	; 20
      000407 14                    6526 	.db #0x14	; 20
      000408 14                    6527 	.db #0x14	; 20
      000409 17                    6528 	.db #0x17	; 23
      00040A 14                    6529 	.db #0x14	; 20
      00040B 10                    6530 	.db #0x10	; 16
      00040C 10                    6531 	.db #0x10	; 16
      00040D 1F                    6532 	.db #0x1f	; 31
      00040E 10                    6533 	.db #0x10	; 16
      00040F 1F                    6534 	.db #0x1f	; 31
      000410 14                    6535 	.db #0x14	; 20
      000411 14                    6536 	.db #0x14	; 20
      000412 14                    6537 	.db #0x14	; 20
      000413 F4                    6538 	.db #0xf4	; 244
      000414 14                    6539 	.db #0x14	; 20
      000415 10                    6540 	.db #0x10	; 16
      000416 10                    6541 	.db #0x10	; 16
      000417 F0                    6542 	.db #0xf0	; 240
      000418 10                    6543 	.db #0x10	; 16
      000419 F0                    6544 	.db #0xf0	; 240
      00041A 00                    6545 	.db #0x00	; 0
      00041B 00                    6546 	.db #0x00	; 0
      00041C 1F                    6547 	.db #0x1f	; 31
      00041D 10                    6548 	.db #0x10	; 16
      00041E 1F                    6549 	.db #0x1f	; 31
      00041F 00                    6550 	.db #0x00	; 0
      000420 00                    6551 	.db #0x00	; 0
      000421 00                    6552 	.db #0x00	; 0
      000422 1F                    6553 	.db #0x1f	; 31
      000423 14                    6554 	.db #0x14	; 20
      000424 00                    6555 	.db #0x00	; 0
      000425 00                    6556 	.db #0x00	; 0
      000426 00                    6557 	.db #0x00	; 0
      000427 FC                    6558 	.db #0xfc	; 252
      000428 14                    6559 	.db #0x14	; 20
      000429 00                    6560 	.db #0x00	; 0
      00042A 00                    6561 	.db #0x00	; 0
      00042B F0                    6562 	.db #0xf0	; 240
      00042C 10                    6563 	.db #0x10	; 16
      00042D F0                    6564 	.db #0xf0	; 240
      00042E 10                    6565 	.db #0x10	; 16
      00042F 10                    6566 	.db #0x10	; 16
      000430 FF                    6567 	.db #0xff	; 255
      000431 10                    6568 	.db #0x10	; 16
      000432 FF                    6569 	.db #0xff	; 255
      000433 14                    6570 	.db #0x14	; 20
      000434 14                    6571 	.db #0x14	; 20
      000435 14                    6572 	.db #0x14	; 20
      000436 FF                    6573 	.db #0xff	; 255
      000437 14                    6574 	.db #0x14	; 20
      000438 10                    6575 	.db #0x10	; 16
      000439 10                    6576 	.db #0x10	; 16
      00043A 10                    6577 	.db #0x10	; 16
      00043B 1F                    6578 	.db #0x1f	; 31
      00043C 00                    6579 	.db #0x00	; 0
      00043D 00                    6580 	.db #0x00	; 0
      00043E 00                    6581 	.db #0x00	; 0
      00043F 00                    6582 	.db #0x00	; 0
      000440 F0                    6583 	.db #0xf0	; 240
      000441 10                    6584 	.db #0x10	; 16
      000442 FF                    6585 	.db #0xff	; 255
      000443 FF                    6586 	.db #0xff	; 255
      000444 FF                    6587 	.db #0xff	; 255
      000445 FF                    6588 	.db #0xff	; 255
      000446 FF                    6589 	.db #0xff	; 255
      000447 F0                    6590 	.db #0xf0	; 240
      000448 F0                    6591 	.db #0xf0	; 240
      000449 F0                    6592 	.db #0xf0	; 240
      00044A F0                    6593 	.db #0xf0	; 240
      00044B F0                    6594 	.db #0xf0	; 240
      00044C FF                    6595 	.db #0xff	; 255
      00044D FF                    6596 	.db #0xff	; 255
      00044E FF                    6597 	.db #0xff	; 255
      00044F 00                    6598 	.db #0x00	; 0
      000450 00                    6599 	.db #0x00	; 0
      000451 00                    6600 	.db #0x00	; 0
      000452 00                    6601 	.db #0x00	; 0
      000453 00                    6602 	.db #0x00	; 0
      000454 FF                    6603 	.db #0xff	; 255
      000455 FF                    6604 	.db #0xff	; 255
      000456 0F                    6605 	.db #0x0f	; 15
      000457 0F                    6606 	.db #0x0f	; 15
      000458 0F                    6607 	.db #0x0f	; 15
      000459 0F                    6608 	.db #0x0f	; 15
      00045A 0F                    6609 	.db #0x0f	; 15
      00045B 38                    6610 	.db #0x38	; 56	'8'
      00045C 44                    6611 	.db #0x44	; 68	'D'
      00045D 44                    6612 	.db #0x44	; 68	'D'
      00045E 38                    6613 	.db #0x38	; 56	'8'
      00045F 44                    6614 	.db #0x44	; 68	'D'
      000460 FC                    6615 	.db #0xfc	; 252
      000461 4A                    6616 	.db #0x4a	; 74	'J'
      000462 4A                    6617 	.db #0x4a	; 74	'J'
      000463 4A                    6618 	.db #0x4a	; 74	'J'
      000464 34                    6619 	.db #0x34	; 52	'4'
      000465 7E                    6620 	.db #0x7e	; 126
      000466 02                    6621 	.db #0x02	; 2
      000467 02                    6622 	.db #0x02	; 2
      000468 06                    6623 	.db #0x06	; 6
      000469 06                    6624 	.db #0x06	; 6
      00046A 02                    6625 	.db #0x02	; 2
      00046B 7E                    6626 	.db #0x7e	; 126
      00046C 02                    6627 	.db #0x02	; 2
      00046D 7E                    6628 	.db #0x7e	; 126
      00046E 02                    6629 	.db #0x02	; 2
      00046F 63                    6630 	.db #0x63	; 99	'c'
      000470 55                    6631 	.db #0x55	; 85	'U'
      000471 49                    6632 	.db #0x49	; 73	'I'
      000472 41                    6633 	.db #0x41	; 65	'A'
      000473 63                    6634 	.db #0x63	; 99	'c'
      000474 38                    6635 	.db #0x38	; 56	'8'
      000475 44                    6636 	.db #0x44	; 68	'D'
      000476 44                    6637 	.db #0x44	; 68	'D'
      000477 3C                    6638 	.db #0x3c	; 60
      000478 04                    6639 	.db #0x04	; 4
      000479 40                    6640 	.db #0x40	; 64
      00047A 7E                    6641 	.db #0x7e	; 126
      00047B 20                    6642 	.db #0x20	; 32
      00047C 1E                    6643 	.db #0x1e	; 30
      00047D 20                    6644 	.db #0x20	; 32
      00047E 06                    6645 	.db #0x06	; 6
      00047F 02                    6646 	.db #0x02	; 2
      000480 7E                    6647 	.db #0x7e	; 126
      000481 02                    6648 	.db #0x02	; 2
      000482 02                    6649 	.db #0x02	; 2
      000483 99                    6650 	.db #0x99	; 153
      000484 A5                    6651 	.db #0xa5	; 165
      000485 E7                    6652 	.db #0xe7	; 231
      000486 A5                    6653 	.db #0xa5	; 165
      000487 99                    6654 	.db #0x99	; 153
      000488 1C                    6655 	.db #0x1c	; 28
      000489 2A                    6656 	.db #0x2a	; 42
      00048A 49                    6657 	.db #0x49	; 73	'I'
      00048B 2A                    6658 	.db #0x2a	; 42
      00048C 1C                    6659 	.db #0x1c	; 28
      00048D 4C                    6660 	.db #0x4c	; 76	'L'
      00048E 72                    6661 	.db #0x72	; 114	'r'
      00048F 01                    6662 	.db #0x01	; 1
      000490 72                    6663 	.db #0x72	; 114	'r'
      000491 4C                    6664 	.db #0x4c	; 76	'L'
      000492 30                    6665 	.db #0x30	; 48	'0'
      000493 4A                    6666 	.db #0x4a	; 74	'J'
      000494 4D                    6667 	.db #0x4d	; 77	'M'
      000495 4D                    6668 	.db #0x4d	; 77	'M'
      000496 30                    6669 	.db #0x30	; 48	'0'
      000497 30                    6670 	.db #0x30	; 48	'0'
      000498 48                    6671 	.db #0x48	; 72	'H'
      000499 78                    6672 	.db #0x78	; 120	'x'
      00049A 48                    6673 	.db #0x48	; 72	'H'
      00049B 30                    6674 	.db #0x30	; 48	'0'
      00049C BC                    6675 	.db #0xbc	; 188
      00049D 62                    6676 	.db #0x62	; 98	'b'
      00049E 5A                    6677 	.db #0x5a	; 90	'Z'
      00049F 46                    6678 	.db #0x46	; 70	'F'
      0004A0 3D                    6679 	.db #0x3d	; 61
      0004A1 3E                    6680 	.db #0x3e	; 62
      0004A2 49                    6681 	.db #0x49	; 73	'I'
      0004A3 49                    6682 	.db #0x49	; 73	'I'
      0004A4 49                    6683 	.db #0x49	; 73	'I'
      0004A5 00                    6684 	.db #0x00	; 0
      0004A6 7E                    6685 	.db #0x7e	; 126
      0004A7 01                    6686 	.db #0x01	; 1
      0004A8 01                    6687 	.db #0x01	; 1
      0004A9 01                    6688 	.db #0x01	; 1
      0004AA 7E                    6689 	.db #0x7e	; 126
      0004AB 2A                    6690 	.db #0x2a	; 42
      0004AC 2A                    6691 	.db #0x2a	; 42
      0004AD 2A                    6692 	.db #0x2a	; 42
      0004AE 2A                    6693 	.db #0x2a	; 42
      0004AF 2A                    6694 	.db #0x2a	; 42
      0004B0 44                    6695 	.db #0x44	; 68	'D'
      0004B1 44                    6696 	.db #0x44	; 68	'D'
      0004B2 5F                    6697 	.db #0x5f	; 95
      0004B3 44                    6698 	.db #0x44	; 68	'D'
      0004B4 44                    6699 	.db #0x44	; 68	'D'
      0004B5 40                    6700 	.db #0x40	; 64
      0004B6 51                    6701 	.db #0x51	; 81	'Q'
      0004B7 4A                    6702 	.db #0x4a	; 74	'J'
      0004B8 44                    6703 	.db #0x44	; 68	'D'
      0004B9 40                    6704 	.db #0x40	; 64
      0004BA 40                    6705 	.db #0x40	; 64
      0004BB 44                    6706 	.db #0x44	; 68	'D'
      0004BC 4A                    6707 	.db #0x4a	; 74	'J'
      0004BD 51                    6708 	.db #0x51	; 81	'Q'
      0004BE 40                    6709 	.db #0x40	; 64
      0004BF 00                    6710 	.db #0x00	; 0
      0004C0 00                    6711 	.db #0x00	; 0
      0004C1 FF                    6712 	.db #0xff	; 255
      0004C2 01                    6713 	.db #0x01	; 1
      0004C3 03                    6714 	.db #0x03	; 3
      0004C4 E0                    6715 	.db #0xe0	; 224
      0004C5 80                    6716 	.db #0x80	; 128
      0004C6 FF                    6717 	.db #0xff	; 255
      0004C7 00                    6718 	.db #0x00	; 0
      0004C8 00                    6719 	.db #0x00	; 0
      0004C9 08                    6720 	.db #0x08	; 8
      0004CA 08                    6721 	.db #0x08	; 8
      0004CB 6B                    6722 	.db #0x6b	; 107	'k'
      0004CC 6B                    6723 	.db #0x6b	; 107	'k'
      0004CD 08                    6724 	.db #0x08	; 8
      0004CE 36                    6725 	.db #0x36	; 54	'6'
      0004CF 12                    6726 	.db #0x12	; 18
      0004D0 36                    6727 	.db #0x36	; 54	'6'
      0004D1 24                    6728 	.db #0x24	; 36
      0004D2 36                    6729 	.db #0x36	; 54	'6'
      0004D3 06                    6730 	.db #0x06	; 6
      0004D4 0F                    6731 	.db #0x0f	; 15
      0004D5 09                    6732 	.db #0x09	; 9
      0004D6 0F                    6733 	.db #0x0f	; 15
      0004D7 06                    6734 	.db #0x06	; 6
      0004D8 00                    6735 	.db #0x00	; 0
      0004D9 00                    6736 	.db #0x00	; 0
      0004DA 18                    6737 	.db #0x18	; 24
      0004DB 18                    6738 	.db #0x18	; 24
      0004DC 00                    6739 	.db #0x00	; 0
      0004DD 00                    6740 	.db #0x00	; 0
      0004DE 00                    6741 	.db #0x00	; 0
      0004DF 10                    6742 	.db #0x10	; 16
      0004E0 10                    6743 	.db #0x10	; 16
      0004E1 00                    6744 	.db #0x00	; 0
      0004E2 30                    6745 	.db #0x30	; 48	'0'
      0004E3 40                    6746 	.db #0x40	; 64
      0004E4 FF                    6747 	.db #0xff	; 255
      0004E5 01                    6748 	.db #0x01	; 1
      0004E6 01                    6749 	.db #0x01	; 1
      0004E7 00                    6750 	.db #0x00	; 0
      0004E8 1F                    6751 	.db #0x1f	; 31
      0004E9 01                    6752 	.db #0x01	; 1
      0004EA 01                    6753 	.db #0x01	; 1
      0004EB 1E                    6754 	.db #0x1e	; 30
      0004EC 00                    6755 	.db #0x00	; 0
      0004ED 19                    6756 	.db #0x19	; 25
      0004EE 1D                    6757 	.db #0x1d	; 29
      0004EF 17                    6758 	.db #0x17	; 23
      0004F0 12                    6759 	.db #0x12	; 18
      0004F1 00                    6760 	.db #0x00	; 0
      0004F2 3C                    6761 	.db #0x3c	; 60
      0004F3 3C                    6762 	.db #0x3c	; 60
      0004F4 3C                    6763 	.db #0x3c	; 60
      0004F5 3C                    6764 	.db #0x3c	; 60
      0004F6 00                    6765 	.db #0x00	; 0
      0004F7 00                    6766 	.db #0x00	; 0
      0004F8 00                    6767 	.db #0x00	; 0
      0004F9 00                    6768 	.db #0x00	; 0
      0004FA 00                    6769 	.db #0x00	; 0
      0004FB                       6770 _keypad:
      0004FB 31                    6771 	.db #0x31	; 49	'1'
      0004FC 34                    6772 	.db #0x34	; 52	'4'
      0004FD 37                    6773 	.db #0x37	; 55	'7'
      0004FE 46                    6774 	.db #0x46	; 70	'F'
      0004FF 32                    6775 	.db #0x32	; 50	'2'
      000500 35                    6776 	.db #0x35	; 53	'5'
      000501 38                    6777 	.db #0x38	; 56	'8'
      000502 30                    6778 	.db #0x30	; 48	'0'
      000503 33                    6779 	.db #0x33	; 51	'3'
      000504 36                    6780 	.db #0x36	; 54	'6'
      000505 39                    6781 	.db #0x39	; 57	'9'
      000506 45                    6782 	.db #0x45	; 69	'E'
      000507 41                    6783 	.db #0x41	; 65	'A'
      000508 42                    6784 	.db #0x42	; 66	'B'
      000509 43                    6785 	.db #0x43	; 67	'C'
      00050A 44                    6786 	.db #0x44	; 68	'D'
                                   6787 	.area CONST   (CODE)
      00050B                       6788 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  6789 	.ascii "Welcome"
      000512 0A                    6790 	.db 0x0a
      000513 00                    6791 	.db 0x00
                                   6792 	.area CSEG    (CODE)
                                   6793 	.area CONST   (CODE)
      000514                       6794 ___str_1:
      000514 45 43 45 4E 2D 34 33  6795 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    6796 	.db 0x0a
      00051E 00                    6797 	.db 0x00
                                   6798 	.area CSEG    (CODE)
                                   6799 	.area CONST   (CODE)
      00051F                       6800 ___str_2:
      00051F 52 6F 74 61 74 69 6F  6801 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    6802 	.db 0x00
                                   6803 	.area CSEG    (CODE)
                                   6804 	.area CONST   (CODE)
      00052A                       6805 ___str_3:
      00052A 52 6F 74 61 74 69 6F  6806 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    6807 	.db 0x00
                                   6808 	.area CSEG    (CODE)
                                   6809 	.area CONST   (CODE)
      000535                       6810 ___str_4:
      000535 52 6F 74 61 74 69 6F  6811 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    6812 	.db 0x00
                                   6813 	.area CSEG    (CODE)
                                   6814 	.area CONST   (CODE)
      000540                       6815 ___str_5:
      000540 52 6F 74 61 74 69 6F  6816 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    6817 	.db 0x00
                                   6818 	.area CSEG    (CODE)
                                   6819 	.area CONST   (CODE)
      00054B                       6820 ___str_6:
      00054B 45 6E 74 65 72 20 62  6821 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00055E 0A                    6822 	.db 0x0a
      00055F 00                    6823 	.db 0x00
                                   6824 	.area CSEG    (CODE)
                                   6825 	.area CONST   (CODE)
      000560                       6826 ___str_7:
      000560 49 6E 20 70 72 6F 67  6827 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00056E 0A                    6828 	.db 0x0a
      00056F 00                    6829 	.db 0x00
                                   6830 	.area CSEG    (CODE)
                                   6831 	.area CONST   (CODE)
      000570                       6832 ___str_8:
      000570 4D 65 6D 6F 72 79 20  6833 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000583 0A                    6834 	.db 0x0a
      000584 00                    6835 	.db 0x00
                                   6836 	.area CSEG    (CODE)
                                   6837 	.area CONST   (CODE)
      000585                       6838 ___str_9:
      000585 53 75 63 63 65 73 73  6839 	.ascii "Success!"
             21
      00058D 0A                    6840 	.db 0x0a
      00058E 00                    6841 	.db 0x00
                                   6842 	.area CSEG    (CODE)
                                   6843 	.area CONST   (CODE)
      00058F                       6844 ___str_10:
      00058F 50 72 65 73 73 20 31  6845 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00059F 0A                    6846 	.db 0x0a
      0005A0 00                    6847 	.db 0x00
                                   6848 	.area CSEG    (CODE)
                                   6849 	.area CONST   (CODE)
      0005A1                       6850 ___str_11:
      0005A1 45 6E 74 65 72 20 62  6851 	.ascii "Enter byte"
             79 74 65
      0005AB 0A                    6852 	.db 0x0a
      0005AC 00                    6853 	.db 0x00
                                   6854 	.area CSEG    (CODE)
                                   6855 	.area CONST   (CODE)
      0005AD                       6856 ___str_12:
      0005AD 45 6E 74 65 72 20 61  6857 	.ascii "Enter address"
             64 64 72 65 73 73
      0005BA 0A                    6858 	.db 0x0a
      0005BB 00                    6859 	.db 0x00
                                   6860 	.area CSEG    (CODE)
                                   6861 	.area CONST   (CODE)
      0005BC                       6862 ___str_13:
      0005BC 49 6E 20 70 72 6F 67  6863 	.ascii "In progress"
             72 65 73 73
      0005C7 0A                    6864 	.db 0x0a
      0005C8 00                    6865 	.db 0x00
                                   6866 	.area CSEG    (CODE)
                                   6867 	.area CONST   (CODE)
      0005C9                       6868 ___str_14:
      0005C9 20 66 65 74 63 68 65  6869 	.ascii " fetched!"
             64 21
      0005D2 0A                    6870 	.db 0x0a
      0005D3 53 75 63 63 65 73 73  6871 	.ascii "Success!"
             21
      0005DB 0A                    6872 	.db 0x0a
      0005DC 00                    6873 	.db 0x00
                                   6874 	.area CSEG    (CODE)
                                   6875 	.area CONST   (CODE)
      0005DD                       6876 ___str_15:
      0005DD 43 68 65 63 6B 20 66  6877 	.ascii "Check failed"
             61 69 6C 65 64
      0005E9 0A                    6878 	.db 0x0a
      0005EA 00                    6879 	.db 0x00
                                   6880 	.area CSEG    (CODE)
                                   6881 	.area CONST   (CODE)
      0005EB                       6882 ___str_16:
      0005EB 45 6E 74 65 72 20 73  6883 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      0005FF 0A                    6884 	.db 0x0a
      000600 00                    6885 	.db 0x00
                                   6886 	.area CSEG    (CODE)
                                   6887 	.area CONST   (CODE)
      000601                       6888 ___str_17:
      000601 45 6E 74 65 72 20 74  6889 	.ascii "Enter target address:"
             61 72 67 65 74 20 61
             64 64 72 65 73 73 3A
      000616 0A                    6890 	.db 0x0a
      000617 00                    6891 	.db 0x00
                                   6892 	.area CSEG    (CODE)
                                   6893 	.area CONST   (CODE)
      000618                       6894 ___str_18:
      000618 45 6E 74 65 72 20 73  6895 	.ascii "Enter size:"
             69 7A 65 3A
      000623 0A                    6896 	.db 0x0a
      000624 00                    6897 	.db 0x00
                                   6898 	.area CSEG    (CODE)
                                   6899 	.area CONST   (CODE)
      000625                       6900 ___str_19:
      000625 4D 6F 76 65 20 69 6E  6901 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      000638 0A                    6902 	.db 0x0a
      000639 00                    6903 	.db 0x00
                                   6904 	.area CSEG    (CODE)
                                   6905 	.area CONST   (CODE)
      00063A                       6906 ___str_20:
      00063A 44 6F 6E 65 21        6907 	.ascii "Done!"
      00063F 0A                    6908 	.db 0x0a
      000640 00                    6909 	.db 0x00
                                   6910 	.area CSEG    (CODE)
                                   6911 	.area CONST   (CODE)
      000641                       6912 ___str_21:
      000641 3A 20                 6913 	.ascii ": "
      000643 00                    6914 	.db 0x00
                                   6915 	.area CSEG    (CODE)
                                   6916 	.area CONST   (CODE)
      000644                       6917 ___str_22:
      000644 45 6E 74 65 72 20 6E  6918 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      000653 0A                    6919 	.db 0x0a
      000654 00                    6920 	.db 0x00
                                   6921 	.area CSEG    (CODE)
                                   6922 	.area CONST   (CODE)
      000655                       6923 ___str_23:
      000655 45 6E 74 65 72 20 61  6924 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      000663 0A                    6925 	.db 0x0a
      000664 00                    6926 	.db 0x00
                                   6927 	.area CSEG    (CODE)
                                   6928 	.area CONST   (CODE)
      000665                       6929 ___str_24:
      000665 50 72 65 73 73 20 32  6930 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      00067A 0A                    6931 	.db 0x0a
      00067B 00                    6932 	.db 0x00
                                   6933 	.area CSEG    (CODE)
                                   6934 	.area CONST   (CODE)
      00067C                       6935 ___str_25:
      00067C 50 72 65 73 73 20 33  6936 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      000698 0A                    6937 	.db 0x0a
      000699 00                    6938 	.db 0x00
                                   6939 	.area CSEG    (CODE)
                                   6940 	.area CONST   (CODE)
      00069A                       6941 ___str_26:
      00069A 4E 6F 20 6D 61 74 63  6942 	.ascii "No matches found"
             68 65 73 20 66 6F 75
             6E 64
      0006AA 0A                    6943 	.db 0x0a
      0006AB 00                    6944 	.db 0x00
                                   6945 	.area CSEG    (CODE)
                                   6946 	.area CONST   (CODE)
      0006AC                       6947 ___str_27:
      0006AC 20 6D 61 74 63 68 65  6948 	.ascii " matches found"
             73 20 66 6F 75 6E 64
      0006BA 0A                    6949 	.db 0x0a
      0006BB 00                    6950 	.db 0x00
                                   6951 	.area CSEG    (CODE)
                                   6952 	.area CONST   (CODE)
      0006BC                       6953 ___str_28:
      0006BC 45 6E 74 65 72 20 62  6954 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      0006D0 0A                    6955 	.db 0x0a
      0006D1 00                    6956 	.db 0x00
                                   6957 	.area CSEG    (CODE)
                                   6958 	.area CONST   (CODE)
      0006D2                       6959 ___str_29:
      0006D2 45 6E 74 65 72 20 62  6960 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0006E3 0A                    6961 	.db 0x0a
      0006E4 00                    6962 	.db 0x00
                                   6963 	.area CSEG    (CODE)
                                   6964 	.area CONST   (CODE)
      0006E5                       6965 ___str_30:
      0006E5 50 72 65 73 73 20 41  6966 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0006F9 0A                    6967 	.db 0x0a
      0006FA 00                    6968 	.db 0x00
                                   6969 	.area CSEG    (CODE)
                                   6970 	.area CONST   (CODE)
      0006FB                       6971 ___str_31:
      0006FB 50 72 65 73 73 20 42  6972 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      00070B 0A                    6973 	.db 0x0a
      00070C 00                    6974 	.db 0x00
                                   6975 	.area CSEG    (CODE)
                                   6976 	.area CONST   (CODE)
      00070D                       6977 ___str_32:
      00070D 54 65 6D 70 65 72 61  6978 	.ascii "Temperature: "
             74 75 72 65 3A 20
      00071A 00                    6979 	.db 0x00
                                   6980 	.area CSEG    (CODE)
                                   6981 	.area CONST   (CODE)
      00071B                       6982 ___str_33:
      00071B 50 72 65 73 73 20 6B  6983 	.ascii "Press key to refresh"
             65 79 20 74 6F 20 72
             65 66 72 65 73 68
      00072F 0A                    6984 	.db 0x0a
      000730 00                    6985 	.db 0x00
                                   6986 	.area CSEG    (CODE)
                                   6987 	.area CONST   (CODE)
      000731                       6988 ___str_34:
      000731 4C 69 67 68 74 20 6C  6989 	.ascii "Light level: "
             65 76 65 6C 3A 20
      00073E 00                    6990 	.db 0x00
                                   6991 	.area CSEG    (CODE)
                                   6992 	.area CONST   (CODE)
      00073F                       6993 ___str_35:
      00073F 42 72 61 6E 64 6F 6E  6994 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      00074C 0A                    6995 	.db 0x0a
      00074D 00                    6996 	.db 0x00
                                   6997 	.area CSEG    (CODE)
                                   6998 	.area CONST   (CODE)
      00074E                       6999 ___str_36:
      00074E 45 43 45 4E 20 34 33  7000 	.ascii "ECEN 4330"
             33 30
      000757 0A                    7001 	.db 0x0a
      000758 00                    7002 	.db 0x00
                                   7003 	.area CSEG    (CODE)
                                   7004 	.area CONST   (CODE)
      000759                       7005 ___str_37:
      000759 31 3A 20 42 61 73 69  7006 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      000767 0A                    7007 	.db 0x0a
      000768 00                    7008 	.db 0x00
                                   7009 	.area CSEG    (CODE)
                                   7010 	.area CONST   (CODE)
      000769                       7011 ___str_38:
      000769 32 3A 20 44 75 6D 70  7012 	.ascii "2: Dump"
      000770 0A                    7013 	.db 0x0a
      000771 00                    7014 	.db 0x00
                                   7015 	.area CSEG    (CODE)
                                   7016 	.area CONST   (CODE)
      000772                       7017 ___str_39:
      000772 33 3A 20 43 68 65 63  7018 	.ascii "3: Check"
             6B
      00077A 0A                    7019 	.db 0x0a
      00077B 00                    7020 	.db 0x00
                                   7021 	.area CSEG    (CODE)
                                   7022 	.area CONST   (CODE)
      00077C                       7023 ___str_40:
      00077C 41 3A 20 4D 6F 76 65  7024 	.ascii "A: Move"
      000783 0A                    7025 	.db 0x0a
      000784 00                    7026 	.db 0x00
                                   7027 	.area CSEG    (CODE)
                                   7028 	.area CONST   (CODE)
      000785                       7029 ___str_41:
      000785 34 3A 20 45 64 69 74  7030 	.ascii "4: Edit"
      00078C 0A                    7031 	.db 0x0a
      00078D 00                    7032 	.db 0x00
                                   7033 	.area CSEG    (CODE)
                                   7034 	.area CONST   (CODE)
      00078E                       7035 ___str_42:
      00078E 35 3A 20 46 69 6E 64  7036 	.ascii "5: Find"
      000795 0A                    7037 	.db 0x0a
      000796 00                    7038 	.db 0x00
                                   7039 	.area CSEG    (CODE)
                                   7040 	.area CONST   (CODE)
      000797                       7041 ___str_43:
      000797 36 3A 20 43 6F 75 6E  7042 	.ascii "6: Count"
             74
      00079F 0A                    7043 	.db 0x0a
      0007A0 00                    7044 	.db 0x00
                                   7045 	.area CSEG    (CODE)
                                   7046 	.area CONST   (CODE)
      0007A1                       7047 ___str_44:
      0007A1 42 3A 20 54 65 6D 70  7048 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      0007AF 0A                    7049 	.db 0x0a
      0007B0 00                    7050 	.db 0x00
                                   7051 	.area CSEG    (CODE)
                                   7052 	.area CONST   (CODE)
      0007B1                       7053 ___str_45:
      0007B1 37 3A 20 4C 69 67 68  7054 	.ascii "7: Light"
             74
      0007B9 0A                    7055 	.db 0x0a
      0007BA 00                    7056 	.db 0x00
                                   7057 	.area CSEG    (CODE)
                                   7058 	.area XINIT   (CODE)
                                   7059 	.area CABS    (ABS,CODE)
