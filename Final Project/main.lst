                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _basic
                                     23 	.globl _writeSomeLines
                                     24 	.globl _convertAsciiHex
                                     25 	.globl _write
                                     26 	.globl _drawChar
                                     27 	.globl _setRotation
                                     28 	.globl _ioread8
                                     29 	.globl _iowrite8
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _B
                                    106 	.globl _ACC
                                    107 	.globl _PSW
                                    108 	.globl _IP
                                    109 	.globl _P3
                                    110 	.globl _IE
                                    111 	.globl _P2
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _P1
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _P0
                                    126 	.globl _printCount_PARM_4
                                    127 	.globl _printCount_PARM_3
                                    128 	.globl _printCount_PARM_2
                                    129 	.globl _printFind_PARM_4
                                    130 	.globl _printFind_PARM_3
                                    131 	.globl _printFind_PARM_2
                                    132 	.globl _dumpPage_PARM_3
                                    133 	.globl _dumpPage_PARM_2
                                    134 	.globl __height
                                    135 	.globl __width
                                    136 	.globl _printCount_PARM_5
                                    137 	.globl _drawChar_PARM_6
                                    138 	.globl _drawChar_PARM_5
                                    139 	.globl _drawChar_PARM_4
                                    140 	.globl _drawChar_PARM_3
                                    141 	.globl _drawChar_PARM_2
                                    142 	.globl _fillRect_PARM_5
                                    143 	.globl _fillRect_PARM_4
                                    144 	.globl _fillRect_PARM_3
                                    145 	.globl _fillRect_PARM_2
                                    146 	.globl _testCircles_PARM_2
                                    147 	.globl _drawCircle_PARM_4
                                    148 	.globl _drawCircle_PARM_3
                                    149 	.globl _drawCircle_PARM_2
                                    150 	.globl _drawPixel_PARM_3
                                    151 	.globl _drawPixel_PARM_2
                                    152 	.globl _textbgcolor
                                    153 	.globl _textcolor
                                    154 	.globl _rotation
                                    155 	.globl _textsize
                                    156 	.globl _cursor_y
                                    157 	.globl _cursor_x
                                    158 	.globl _read_ram_address
                                    159 	.globl _light_address
                                    160 	.globl _temp_address
                                    161 	.globl _seg7_address
                                    162 	.globl _lcd_address
                                    163 	.globl _rowloc
                                    164 	.globl _colloc
                                    165 	.globl _delay
                                    166 	.globl _writeRegister8
                                    167 	.globl _writeRegister16
                                    168 	.globl _setCursor
                                    169 	.globl _setTextColor
                                    170 	.globl _setTextSize
                                    171 	.globl _setAddress
                                    172 	.globl _TFT_LCD_INIT
                                    173 	.globl _drawPixel
                                    174 	.globl _drawCircle
                                    175 	.globl _testCircles
                                    176 	.globl _fillRect
                                    177 	.globl _fillScreen
                                    178 	.globl _LCD_string_write
                                    179 	.globl _testRAM
                                    180 	.globl _freeType
                                    181 	.globl _keyDetect
                                    182 	.globl _reverse
                                    183 	.globl _asciiToDec
                                    184 	.globl _asciiToHex
                                    185 	.globl _getAddress
                                    186 	.globl _getByte
                                    187 	.globl _dumpPage
                                    188 	.globl _dump
                                    189 	.globl _check
                                    190 	.globl _move
                                    191 	.globl _editByte
                                    192 	.globl _edit
                                    193 	.globl _printFind
                                    194 	.globl _find
                                    195 	.globl _printCount
                                    196 	.globl _count
                                    197 	.globl _readTemp
                                    198 	.globl _readLight
                                    199 	.globl _displayTemp
                                    200 	.globl _displayLight
                                    201 	.globl _temperature
                                    202 	.globl _light
                                    203 ;--------------------------------------------------------
                                    204 ; special function registers
                                    205 ;--------------------------------------------------------
                                    206 	.area RSEG    (ABS,DATA)
      000000                        207 	.org 0x0000
                           000080   208 _P0	=	0x0080
                           000081   209 _SP	=	0x0081
                           000082   210 _DPL	=	0x0082
                           000083   211 _DPH	=	0x0083
                           000087   212 _PCON	=	0x0087
                           000088   213 _TCON	=	0x0088
                           000089   214 _TMOD	=	0x0089
                           00008A   215 _TL0	=	0x008a
                           00008B   216 _TL1	=	0x008b
                           00008C   217 _TH0	=	0x008c
                           00008D   218 _TH1	=	0x008d
                           000090   219 _P1	=	0x0090
                           000098   220 _SCON	=	0x0098
                           000099   221 _SBUF	=	0x0099
                           0000A0   222 _P2	=	0x00a0
                           0000A8   223 _IE	=	0x00a8
                           0000B0   224 _P3	=	0x00b0
                           0000B8   225 _IP	=	0x00b8
                           0000D0   226 _PSW	=	0x00d0
                           0000E0   227 _ACC	=	0x00e0
                           0000F0   228 _B	=	0x00f0
                                    229 ;--------------------------------------------------------
                                    230 ; special function bits
                                    231 ;--------------------------------------------------------
                                    232 	.area RSEG    (ABS,DATA)
      000000                        233 	.org 0x0000
                           000080   234 _P0_0	=	0x0080
                           000081   235 _P0_1	=	0x0081
                           000082   236 _P0_2	=	0x0082
                           000083   237 _P0_3	=	0x0083
                           000084   238 _P0_4	=	0x0084
                           000085   239 _P0_5	=	0x0085
                           000086   240 _P0_6	=	0x0086
                           000087   241 _P0_7	=	0x0087
                           000088   242 _IT0	=	0x0088
                           000089   243 _IE0	=	0x0089
                           00008A   244 _IT1	=	0x008a
                           00008B   245 _IE1	=	0x008b
                           00008C   246 _TR0	=	0x008c
                           00008D   247 _TF0	=	0x008d
                           00008E   248 _TR1	=	0x008e
                           00008F   249 _TF1	=	0x008f
                           000090   250 _P1_0	=	0x0090
                           000091   251 _P1_1	=	0x0091
                           000092   252 _P1_2	=	0x0092
                           000093   253 _P1_3	=	0x0093
                           000094   254 _P1_4	=	0x0094
                           000095   255 _P1_5	=	0x0095
                           000096   256 _P1_6	=	0x0096
                           000097   257 _P1_7	=	0x0097
                           000098   258 _RI	=	0x0098
                           000099   259 _TI	=	0x0099
                           00009A   260 _RB8	=	0x009a
                           00009B   261 _TB8	=	0x009b
                           00009C   262 _REN	=	0x009c
                           00009D   263 _SM2	=	0x009d
                           00009E   264 _SM1	=	0x009e
                           00009F   265 _SM0	=	0x009f
                           0000A0   266 _P2_0	=	0x00a0
                           0000A1   267 _P2_1	=	0x00a1
                           0000A2   268 _P2_2	=	0x00a2
                           0000A3   269 _P2_3	=	0x00a3
                           0000A4   270 _P2_4	=	0x00a4
                           0000A5   271 _P2_5	=	0x00a5
                           0000A6   272 _P2_6	=	0x00a6
                           0000A7   273 _P2_7	=	0x00a7
                           0000A8   274 _EX0	=	0x00a8
                           0000A9   275 _ET0	=	0x00a9
                           0000AA   276 _EX1	=	0x00aa
                           0000AB   277 _ET1	=	0x00ab
                           0000AC   278 _ES	=	0x00ac
                           0000AF   279 _EA	=	0x00af
                           0000B0   280 _P3_0	=	0x00b0
                           0000B1   281 _P3_1	=	0x00b1
                           0000B2   282 _P3_2	=	0x00b2
                           0000B3   283 _P3_3	=	0x00b3
                           0000B4   284 _P3_4	=	0x00b4
                           0000B5   285 _P3_5	=	0x00b5
                           0000B6   286 _P3_6	=	0x00b6
                           0000B7   287 _P3_7	=	0x00b7
                           0000B0   288 _RXD	=	0x00b0
                           0000B1   289 _TXD	=	0x00b1
                           0000B2   290 _INT0	=	0x00b2
                           0000B3   291 _INT1	=	0x00b3
                           0000B4   292 _T0	=	0x00b4
                           0000B5   293 _T1	=	0x00b5
                           0000B6   294 _WR	=	0x00b6
                           0000B7   295 _RD	=	0x00b7
                           0000B8   296 _PX0	=	0x00b8
                           0000B9   297 _PT0	=	0x00b9
                           0000BA   298 _PX1	=	0x00ba
                           0000BB   299 _PT1	=	0x00bb
                           0000BC   300 _PS	=	0x00bc
                           0000D0   301 _P	=	0x00d0
                           0000D1   302 _F1	=	0x00d1
                           0000D2   303 _OV	=	0x00d2
                           0000D3   304 _RS0	=	0x00d3
                           0000D4   305 _RS1	=	0x00d4
                           0000D5   306 _F0	=	0x00d5
                           0000D6   307 _AC	=	0x00d6
                           0000D7   308 _CY	=	0x00d7
                                    309 ;--------------------------------------------------------
                                    310 ; overlayable register banks
                                    311 ;--------------------------------------------------------
                                    312 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        313 	.ds 8
                                    314 ;--------------------------------------------------------
                                    315 ; internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area DSEG    (DATA)
      000000                        318 _colloc::
      000000                        319 	.ds 1
      000001                        320 _rowloc::
      000001                        321 	.ds 1
      000002                        322 _lcd_address::
      000002                        323 	.ds 2
      000004                        324 _seg7_address::
      000004                        325 	.ds 2
      000006                        326 _temp_address::
      000006                        327 	.ds 2
      000008                        328 _light_address::
      000008                        329 	.ds 2
      00000A                        330 _read_ram_address::
      00000A                        331 	.ds 2
      00000C                        332 _cursor_x::
      00000C                        333 	.ds 2
      00000E                        334 _cursor_y::
      00000E                        335 	.ds 2
      000010                        336 _textsize::
      000010                        337 	.ds 1
      000011                        338 _rotation::
      000011                        339 	.ds 1
      000012                        340 _textcolor::
      000012                        341 	.ds 2
      000014                        342 _textbgcolor::
      000014                        343 	.ds 2
      000016                        344 _drawPixel_PARM_2:
      000016                        345 	.ds 2
      000018                        346 _drawPixel_PARM_3:
      000018                        347 	.ds 2
      00001A                        348 _drawCircle_PARM_2:
      00001A                        349 	.ds 2
      00001C                        350 _drawCircle_PARM_3:
      00001C                        351 	.ds 2
      00001E                        352 _drawCircle_PARM_4:
      00001E                        353 	.ds 2
      000020                        354 _drawCircle_x0_65536_105:
      000020                        355 	.ds 2
      000022                        356 _drawCircle_sloc0_1_0:
      000022                        357 	.ds 2
      000024                        358 _drawCircle_sloc1_1_0:
      000024                        359 	.ds 2
      000026                        360 _drawCircle_sloc2_1_0:
      000026                        361 	.ds 2
      000028                        362 _drawCircle_sloc3_1_0:
      000028                        363 	.ds 2
      00002A                        364 _drawCircle_sloc4_1_0:
      00002A                        365 	.ds 2
      00002C                        366 _testCircles_PARM_2:
      00002C                        367 	.ds 2
      00002E                        368 _testCircles_radius_65536_109:
      00002E                        369 	.ds 1
      00002F                        370 _testCircles_sloc0_1_0:
      00002F                        371 	.ds 2
      000031                        372 _fillRect_PARM_2:
      000031                        373 	.ds 2
      000033                        374 _fillRect_PARM_3:
      000033                        375 	.ds 2
      000035                        376 _fillRect_PARM_4:
      000035                        377 	.ds 2
      000037                        378 _fillRect_PARM_5:
      000037                        379 	.ds 2
      000039                        380 _drawChar_PARM_2:
      000039                        381 	.ds 2
      00003B                        382 _drawChar_PARM_3:
      00003B                        383 	.ds 1
      00003C                        384 _drawChar_PARM_4:
      00003C                        385 	.ds 2
      00003E                        386 _drawChar_PARM_5:
      00003E                        387 	.ds 2
      000040                        388 _drawChar_PARM_6:
      000040                        389 	.ds 1
      000041                        390 _drawChar_sloc1_1_0:
      000041                        391 	.ds 2
      000043                        392 _drawChar_sloc2_1_0:
      000043                        393 	.ds 2
      000045                        394 _drawChar_sloc3_1_0:
      000045                        395 	.ds 1
      000046                        396 _drawChar_sloc4_1_0:
      000046                        397 	.ds 1
      000047                        398 _drawChar_sloc5_1_0:
      000047                        399 	.ds 1
      000048                        400 _asciiToHex_store_65536_202:
      000048                        401 	.ds 2
      00004A                        402 _dumpPage_ramAddress_65537_236:
      00004A                        403 	.ds 2
      00004C                        404 _dumpPage_sloc0_1_0:
      00004C                        405 	.ds 2
      00004E                        406 _dumpPage_sloc1_1_0:
      00004E                        407 	.ds 1
      00004F                        408 _dump_sloc0_1_0:
      00004F                        409 	.ds 1
      000050                        410 _dump_sloc1_1_0:
      000050                        411 	.ds 2
      000052                        412 _move_target_65537_272:
      000052                        413 	.ds 2
      000054                        414 _find_sloc0_1_0:
      000054                        415 	.ds 2
      000056                        416 _find_sloc1_1_0:
      000056                        417 	.ds 2
      000058                        418 _printCount_PARM_5:
      000058                        419 	.ds 1
      000059                        420 _printCount_sloc0_1_0:
      000059                        421 	.ds 1
      00005A                        422 _count_sloc0_1_0:
      00005A                        423 	.ds 1
      00005B                        424 _count_sloc1_1_0:
      00005B                        425 	.ds 1
      00005C                        426 _count_sloc2_1_0:
      00005C                        427 	.ds 1
                                    428 ;--------------------------------------------------------
                                    429 ; overlayable items in internal ram
                                    430 ;--------------------------------------------------------
                                    431 	.area	OSEG    (OVR,DATA)
      000000                        432 _iowrite8_PARM_2:
      000000                        433 	.ds 1
                                    434 	.area	OSEG    (OVR,DATA)
                                    435 	.area	OSEG    (OVR,DATA)
                                    436 	.area	OSEG    (OVR,DATA)
      000000                        437 _writeRegister8_PARM_2:
      000000                        438 	.ds 1
                                    439 	.area	OSEG    (OVR,DATA)
      000000                        440 _writeRegister16_PARM_2:
      000000                        441 	.ds 2
                                    442 	.area	OSEG    (OVR,DATA)
      000000                        443 _setCursor_PARM_2:
      000000                        444 	.ds 2
                                    445 	.area	OSEG    (OVR,DATA)
      000000                        446 _setTextColor_PARM_2:
      000000                        447 	.ds 2
                                    448 	.area	OSEG    (OVR,DATA)
                                    449 	.area	OSEG    (OVR,DATA)
      000000                        450 _setAddress_PARM_2:
      000000                        451 	.ds 2
      000002                        452 _setAddress_PARM_3:
      000002                        453 	.ds 2
      000004                        454 _setAddress_PARM_4:
      000004                        455 	.ds 2
                                    456 	.area	OSEG    (OVR,DATA)
                                    457 	.area	OSEG    (OVR,DATA)
                                    458 	.area	OSEG    (OVR,DATA)
                                    459 	.area	OSEG    (OVR,DATA)
                                    460 ;--------------------------------------------------------
                                    461 ; Stack segment in internal ram
                                    462 ;--------------------------------------------------------
                                    463 	.area	SSEG
      000000                        464 __start__stack:
      000000                        465 	.ds	1
                                    466 
                                    467 ;--------------------------------------------------------
                                    468 ; indirectly addressable internal ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area ISEG    (DATA)
                                    471 ;--------------------------------------------------------
                                    472 ; absolute internal ram data
                                    473 ;--------------------------------------------------------
                                    474 	.area IABS    (ABS,DATA)
                                    475 	.area IABS    (ABS,DATA)
                                    476 ;--------------------------------------------------------
                                    477 ; bit data
                                    478 ;--------------------------------------------------------
                                    479 	.area BSEG    (BIT)
      000000                        480 _drawChar_sloc0_1_0:
      000000                        481 	.ds 1
      000001                        482 _convertAsciiHex_sloc0_1_0:
      000001                        483 	.ds 1
                                    484 ;--------------------------------------------------------
                                    485 ; paged external ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area PSEG    (PAG,XDATA)
                                    488 ;--------------------------------------------------------
                                    489 ; external ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area XSEG    (XDATA)
      000000                        492 __width::
      000000                        493 	.ds 2
      000002                        494 __height::
      000002                        495 	.ds 2
      000004                        496 _drawCircle_f_65536_106:
      000004                        497 	.ds 2
      000006                        498 _testCircles_x_65536_110:
      000006                        499 	.ds 2
      000008                        500 _testCircles_y_65536_110:
      000008                        501 	.ds 2
      00000A                        502 _drawChar_line_196609_153:
      00000A                        503 	.ds 1
      00000B                        504 _freeType_count_65536_178:
      00000B                        505 	.ds 1
      00000C                        506 _reverse_rev_65536_196:
      00000C                        507 	.ds 2
      00000E                        508 _reverse_val_65536_196:
      00000E                        509 	.ds 2
      000010                        510 _asciiToDec_val_65536_199:
      000010                        511 	.ds 1
      000011                        512 _asciiToDec_id_65536_199:
      000011                        513 	.ds 2
      000013                        514 _getAddress_address_65536_228:
      000013                        515 	.ds 2
      000015                        516 _getByte_byte_65536_231:
      000015                        517 	.ds 1
      000016                        518 _dumpPage_PARM_2:
      000016                        519 	.ds 1
      000017                        520 _dumpPage_PARM_3:
      000017                        521 	.ds 1
      000018                        522 _dumpPage_start_65536_234:
      000018                        523 	.ds 2
      00001A                        524 _dumpPage_i_65537_236:
      00001A                        525 	.ds 2
      00001C                        526 _dump_type_65537_242:
      00001C                        527 	.ds 1
      00001D                        528 _dump_page_65537_242:
      00001D                        529 	.ds 1
      00001E                        530 _dump_address_65537_242:
      00001E                        531 	.ds 2
      000020                        532 _check_checker_65537_258:
      000020                        533 	.ds 1
      000021                        534 _check_error_65537_258:
      000021                        535 	.ds 1
      000022                        536 _editByte_add_65536_276:
      000022                        537 	.ds 2
      000024                        538 _edit_input_65537_279:
      000024                        539 	.ds 1
      000025                        540 _printFind_PARM_2:
      000025                        541 	.ds 1
      000026                        542 _printFind_PARM_3:
      000026                        543 	.ds 1
      000027                        544 _printFind_PARM_4:
      000027                        545 	.ds 1
      000028                        546 _printFind_start_65536_284:
      000028                        547 	.ds 2
      00002A                        548 _find_page_65537_291:
      00002A                        549 	.ds 1
      00002B                        550 _find_index_65537_291:
      00002B                        551 	.ds 1
      00002C                        552 _find_address_65537_291:
      00002C                        553 	.ds 2
      00002E                        554 _printCount_PARM_2:
      00002E                        555 	.ds 1
      00002F                        556 _printCount_PARM_3:
      00002F                        557 	.ds 1
      000030                        558 _printCount_PARM_4:
      000030                        559 	.ds 1
      000031                        560 _printCount_start_65536_305:
      000031                        561 	.ds 2
      000033                        562 _count_address_65537_314:
      000033                        563 	.ds 2
      000035                        564 _count_index_65537_314:
      000035                        565 	.ds 1
      000036                        566 _count_page_65537_314:
      000036                        567 	.ds 1
                                    568 ;--------------------------------------------------------
                                    569 ; absolute external ram data
                                    570 ;--------------------------------------------------------
                                    571 	.area XABS    (ABS,XDATA)
                                    572 ;--------------------------------------------------------
                                    573 ; external initialized ram data
                                    574 ;--------------------------------------------------------
                                    575 	.area XISEG   (XDATA)
                                    576 	.area HOME    (CODE)
                                    577 	.area GSINIT0 (CODE)
                                    578 	.area GSINIT1 (CODE)
                                    579 	.area GSINIT2 (CODE)
                                    580 	.area GSINIT3 (CODE)
                                    581 	.area GSINIT4 (CODE)
                                    582 	.area GSINIT5 (CODE)
                                    583 	.area GSINIT  (CODE)
                                    584 	.area GSFINAL (CODE)
                                    585 	.area CSEG    (CODE)
                                    586 ;--------------------------------------------------------
                                    587 ; interrupt vector
                                    588 ;--------------------------------------------------------
                                    589 	.area HOME    (CODE)
      000000                        590 __interrupt_vect:
      000000 02r00r00         [24]  591 	ljmp	__sdcc_gsinit_startup
                                    592 ;--------------------------------------------------------
                                    593 ; global & static initialisations
                                    594 ;--------------------------------------------------------
                                    595 	.area HOME    (CODE)
                                    596 	.area GSINIT  (CODE)
                                    597 	.area GSFINAL (CODE)
                                    598 	.area GSINIT  (CODE)
                                    599 	.globl __sdcc_gsinit_startup
                                    600 	.globl __sdcc_program_startup
                                    601 	.globl __start__stack
                                    602 	.globl __mcs51_genXINIT
                                    603 	.globl __mcs51_genXRAMCLEAR
                                    604 	.globl __mcs51_genRAMCLEAR
                                    605 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  606 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  607 	mov	(_lcd_address + 1),#0x40
                                    608 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  609 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  610 	mov	(_seg7_address + 1),#0x80
                                    611 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  612 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  613 	mov	(_temp_address + 1),#0xc0
                                    614 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  615 	clr	a
      000013 F5*08            [12]  616 	mov	_light_address,a
      000015 F5*09            [12]  617 	mov	(_light_address + 1),a
                                    618 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  619 	ljmp	__sdcc_program_startup
                                    620 ;--------------------------------------------------------
                                    621 ; Home
                                    622 ;--------------------------------------------------------
                                    623 	.area HOME    (CODE)
                                    624 	.area HOME    (CODE)
      000003                        625 __sdcc_program_startup:
      000003 02r22rD7         [24]  626 	ljmp	_main
                                    627 ;	return from main will return to caller
                                    628 ;--------------------------------------------------------
                                    629 ; code
                                    630 ;--------------------------------------------------------
                                    631 	.area CSEG    (CODE)
                                    632 ;------------------------------------------------------------
                                    633 ;Allocation info for local variables in function 'iowrite8'
                                    634 ;------------------------------------------------------------
                                    635 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    636 ;map_address               Allocated to registers r6 r7 
                                    637 ;------------------------------------------------------------
                                    638 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    639 ;	-----------------------------------------
                                    640 ;	 function iowrite8
                                    641 ;	-----------------------------------------
      000000                        642 _iowrite8:
                           000007   643 	ar7 = 0x07
                           000006   644 	ar6 = 0x06
                           000005   645 	ar5 = 0x05
                           000004   646 	ar4 = 0x04
                           000003   647 	ar3 = 0x03
                           000002   648 	ar2 = 0x02
                           000001   649 	ar1 = 0x01
                           000000   650 	ar0 = 0x00
      000000 AE 82            [24]  651 	mov	r6,dpl
      000002 AF 83            [24]  652 	mov	r7,dph
                                    653 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    654 ;	assignBit
      000004 D2 B4            [12]  655 	setb	_P3_4
                                    656 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  657 	mov	dpl,r6
      000008 8F 83            [24]  658 	mov	dph,r7
      00000A E5*00            [12]  659 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  660 	movx	@dptr,a
                                    661 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    662 ;	assignBit
      00000D C2 B4            [12]  663 	clr	_P3_4
                                    664 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  665 	ret
                                    666 ;------------------------------------------------------------
                                    667 ;Allocation info for local variables in function 'ioread8'
                                    668 ;------------------------------------------------------------
                                    669 ;val                       Allocated with name '_ioread8_val_65536_27'
                                    670 ;map_address               Allocated to registers r6 r7 
                                    671 ;------------------------------------------------------------
                                    672 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    673 ;	-----------------------------------------
                                    674 ;	 function ioread8
                                    675 ;	-----------------------------------------
      000010                        676 _ioread8:
      000010 AE 82            [24]  677 	mov	r6,dpl
      000012 AF 83            [24]  678 	mov	r7,dph
                                    679 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    680 ;	assignBit
      000014 D2 B4            [12]  681 	setb	_P3_4
                                    682 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      000016 8E 82            [24]  683 	mov	dpl,r6
      000018 8F 83            [24]  684 	mov	dph,r7
      00001A E0               [24]  685 	movx	a,@dptr
      00001B FE               [12]  686 	mov	r6,a
                                    687 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    688 ;	assignBit
      00001C C2 B4            [12]  689 	clr	_P3_4
                                    690 ;	ecen4330_lcd_v3.c:67: return val;
      00001E 8E 82            [24]  691 	mov	dpl,r6
                                    692 ;	ecen4330_lcd_v3.c:68: }
      000020 22               [24]  693 	ret
                                    694 ;------------------------------------------------------------
                                    695 ;Allocation info for local variables in function 'delay'
                                    696 ;------------------------------------------------------------
                                    697 ;i                         Allocated with name '_delay_i_65536_29'
                                    698 ;j                         Allocated with name '_delay_j_65536_29'
                                    699 ;d                         Allocated to registers r6 r7 
                                    700 ;------------------------------------------------------------
                                    701 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d)
                                    702 ;	-----------------------------------------
                                    703 ;	 function delay
                                    704 ;	-----------------------------------------
      000021                        705 _delay:
      000021 AE 82            [24]  706 	mov	r6,dpl
      000023 AF 83            [24]  707 	mov	r7,dph
                                    708 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000025 7C 00            [12]  709 	mov	r4,#0x00
      000027 7D 00            [12]  710 	mov	r5,#0x00
      000029                        711 00107$:
      000029 8C 02            [24]  712 	mov	ar2,r4
      00002B 8D 03            [24]  713 	mov	ar3,r5
      00002D C3               [12]  714 	clr	c
      00002E EA               [12]  715 	mov	a,r2
      00002F 9E               [12]  716 	subb	a,r6
      000030 EB               [12]  717 	mov	a,r3
      000031 64 80            [12]  718 	xrl	a,#0x80
      000033 8F F0            [24]  719 	mov	b,r7
      000035 63 F0 80         [24]  720 	xrl	b,#0x80
      000038 95 F0            [12]  721 	subb	a,b
      00003A 50 14            [24]  722 	jnc	00109$
                                    723 ;	ecen4330_lcd_v3.c:77: for (j=0;j<1000;j++);
      00003C 7A E8            [12]  724 	mov	r2,#0xe8
      00003E 7B 03            [12]  725 	mov	r3,#0x03
      000040                        726 00105$:
      000040 1A               [12]  727 	dec	r2
      000041 BA FF 01         [24]  728 	cjne	r2,#0xff,00130$
      000044 1B               [12]  729 	dec	r3
      000045                        730 00130$:
      000045 EA               [12]  731 	mov	a,r2
      000046 4B               [12]  732 	orl	a,r3
      000047 70 F7            [24]  733 	jnz	00105$
                                    734 ;	ecen4330_lcd_v3.c:75: for (i=0;i<d;i++)
      000049 0C               [12]  735 	inc	r4
      00004A BC 00 DC         [24]  736 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  737 	inc	r5
      00004E 80 D9            [24]  738 	sjmp	00107$
      000050                        739 00109$:
                                    740 ;	ecen4330_lcd_v3.c:79: }
      000050 22               [24]  741 	ret
                                    742 ;------------------------------------------------------------
                                    743 ;Allocation info for local variables in function 'writeRegister8'
                                    744 ;------------------------------------------------------------
                                    745 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    746 ;a                         Allocated to registers r7 
                                    747 ;------------------------------------------------------------
                                    748 ;	ecen4330_lcd_v3.c:89: void writeRegister8 (uint8_t a, uint8_t d) {
                                    749 ;	-----------------------------------------
                                    750 ;	 function writeRegister8
                                    751 ;	-----------------------------------------
      000051                        752 _writeRegister8:
      000051 AF 82            [24]  753 	mov	r7,dpl
                                    754 ;	ecen4330_lcd_v3.c:90: CD = __CMD__;
                                    755 ;	assignBit
      000053 C2 B5            [12]  756 	clr	_P3_5
                                    757 ;	ecen4330_lcd_v3.c:91: write8(a);
                                    758 ;	assignBit
      000055 D2 B4            [12]  759 	setb	_P3_4
      000057 85*02 82         [24]  760 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  761 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  762 	mov	a,r7
      00005E F0               [24]  763 	movx	@dptr,a
                                    764 ;	assignBit
      00005F C2 B4            [12]  765 	clr	_P3_4
                                    766 ;	ecen4330_lcd_v3.c:92: CD = __DATA__;
                                    767 ;	assignBit
      000061 D2 B5            [12]  768 	setb	_P3_5
                                    769 ;	ecen4330_lcd_v3.c:93: write8(d);
                                    770 ;	assignBit
      000063 D2 B4            [12]  771 	setb	_P3_4
      000065 85*02 82         [24]  772 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  773 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  774 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  775 	movx	@dptr,a
                                    776 ;	assignBit
      00006E C2 B4            [12]  777 	clr	_P3_4
                                    778 ;	ecen4330_lcd_v3.c:94: }
      000070 22               [24]  779 	ret
                                    780 ;------------------------------------------------------------
                                    781 ;Allocation info for local variables in function 'writeRegister16'
                                    782 ;------------------------------------------------------------
                                    783 ;hi                        Allocated with name '_writeRegister16_hi_65536_38'
                                    784 ;lo                        Allocated with name '_writeRegister16_lo_65536_38'
                                    785 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    786 ;a                         Allocated to registers r6 r7 
                                    787 ;------------------------------------------------------------
                                    788 ;	ecen4330_lcd_v3.c:98: void writeRegister16 (uint16_t a, uint16_t d) {
                                    789 ;	-----------------------------------------
                                    790 ;	 function writeRegister16
                                    791 ;	-----------------------------------------
      000071                        792 _writeRegister16:
      000071 AE 82            [24]  793 	mov	r6,dpl
      000073 AF 83            [24]  794 	mov	r7,dph
                                    795 ;	ecen4330_lcd_v3.c:100: hi = (a) >> 8;
      000075 8F 05            [24]  796 	mov	ar5,r7
                                    797 ;	ecen4330_lcd_v3.c:101: lo = (a);
                                    798 ;	ecen4330_lcd_v3.c:102: write8Reg(hi);
                                    799 ;	assignBit
      000077 C2 B5            [12]  800 	clr	_P3_5
                                    801 ;	assignBit
      000079 D2 B4            [12]  802 	setb	_P3_4
      00007B 85*02 82         [24]  803 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  804 	mov	dph,(_lcd_address + 1)
      000081 ED               [12]  805 	mov	a,r5
      000082 F0               [24]  806 	movx	@dptr,a
                                    807 ;	assignBit
      000083 C2 B4            [12]  808 	clr	_P3_4
                                    809 ;	ecen4330_lcd_v3.c:103: write8Reg(lo);
                                    810 ;	assignBit
      000085 C2 B5            [12]  811 	clr	_P3_5
                                    812 ;	assignBit
      000087 D2 B4            [12]  813 	setb	_P3_4
      000089 85*02 82         [24]  814 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  815 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  816 	mov	a,r6
      000090 F0               [24]  817 	movx	@dptr,a
                                    818 ;	assignBit
      000091 C2 B4            [12]  819 	clr	_P3_4
                                    820 ;	ecen4330_lcd_v3.c:104: hi = (d) >> 8;
      000093 AF*01            [24]  821 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    822 ;	ecen4330_lcd_v3.c:105: lo = (d);
      000095 AE*00            [24]  823 	mov	r6,_writeRegister16_PARM_2
                                    824 ;	ecen4330_lcd_v3.c:106: CD = 1 ;
                                    825 ;	assignBit
      000097 D2 B5            [12]  826 	setb	_P3_5
                                    827 ;	ecen4330_lcd_v3.c:107: write8Data(hi);
                                    828 ;	assignBit
      000099 D2 B5            [12]  829 	setb	_P3_5
                                    830 ;	assignBit
      00009B D2 B4            [12]  831 	setb	_P3_4
      00009D 85*02 82         [24]  832 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  833 	mov	dph,(_lcd_address + 1)
      0000A3 EF               [12]  834 	mov	a,r7
      0000A4 F0               [24]  835 	movx	@dptr,a
                                    836 ;	assignBit
      0000A5 C2 B4            [12]  837 	clr	_P3_4
                                    838 ;	ecen4330_lcd_v3.c:108: write8Data(lo);
                                    839 ;	assignBit
      0000A7 D2 B5            [12]  840 	setb	_P3_5
                                    841 ;	assignBit
      0000A9 D2 B4            [12]  842 	setb	_P3_4
      0000AB 85*02 82         [24]  843 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  844 	mov	dph,(_lcd_address + 1)
      0000B1 EE               [12]  845 	mov	a,r6
      0000B2 F0               [24]  846 	movx	@dptr,a
                                    847 ;	assignBit
      0000B3 C2 B4            [12]  848 	clr	_P3_4
                                    849 ;	ecen4330_lcd_v3.c:109: }
      0000B5 22               [24]  850 	ret
                                    851 ;------------------------------------------------------------
                                    852 ;Allocation info for local variables in function 'setCursor'
                                    853 ;------------------------------------------------------------
                                    854 ;y                         Allocated with name '_setCursor_PARM_2'
                                    855 ;x                         Allocated to registers 
                                    856 ;------------------------------------------------------------
                                    857 ;	ecen4330_lcd_v3.c:117: void setCursor (uint16_t x, uint16_t y) {
                                    858 ;	-----------------------------------------
                                    859 ;	 function setCursor
                                    860 ;	-----------------------------------------
      0000B6                        861 _setCursor:
      0000B6 85 82*0C         [24]  862 	mov	_cursor_x,dpl
      0000B9 85 83*0D         [24]  863 	mov	(_cursor_x + 1),dph
                                    864 ;	ecen4330_lcd_v3.c:119: cursor_y = y;
      0000BC 85*00*0E         [24]  865 	mov	_cursor_y,_setCursor_PARM_2
      0000BF 85*01*0F         [24]  866 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    867 ;	ecen4330_lcd_v3.c:120: }
      0000C2 22               [24]  868 	ret
                                    869 ;------------------------------------------------------------
                                    870 ;Allocation info for local variables in function 'setTextColor'
                                    871 ;------------------------------------------------------------
                                    872 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    873 ;x                         Allocated to registers 
                                    874 ;------------------------------------------------------------
                                    875 ;	ecen4330_lcd_v3.c:127: void setTextColor (uint16_t x, uint16_t y) {
                                    876 ;	-----------------------------------------
                                    877 ;	 function setTextColor
                                    878 ;	-----------------------------------------
      0000C3                        879 _setTextColor:
      0000C3 85 82*12         [24]  880 	mov	_textcolor,dpl
      0000C6 85 83*13         [24]  881 	mov	(_textcolor + 1),dph
                                    882 ;	ecen4330_lcd_v3.c:129: textbgcolor = y;
      0000C9 85*00*14         [24]  883 	mov	_textbgcolor,_setTextColor_PARM_2
      0000CC 85*01*15         [24]  884 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    885 ;	ecen4330_lcd_v3.c:130: }
      0000CF 22               [24]  886 	ret
                                    887 ;------------------------------------------------------------
                                    888 ;Allocation info for local variables in function 'setTextSize'
                                    889 ;------------------------------------------------------------
                                    890 ;s                         Allocated to registers r7 
                                    891 ;------------------------------------------------------------
                                    892 ;	ecen4330_lcd_v3.c:137: void setTextSize (uint8_t s) {
                                    893 ;	-----------------------------------------
                                    894 ;	 function setTextSize
                                    895 ;	-----------------------------------------
      0000D0                        896 _setTextSize:
                                    897 ;	ecen4330_lcd_v3.c:138: if (s > 8) return;
      0000D0 E5 82            [12]  898 	mov	a,dpl
      0000D2 FF               [12]  899 	mov	r7,a
      0000D3 24 F7            [12]  900 	add	a,#0xff - 0x08
      0000D5 50 01            [24]  901 	jnc	00102$
      0000D7 22               [24]  902 	ret
      0000D8                        903 00102$:
                                    904 ;	ecen4330_lcd_v3.c:139: textsize = (s>0) ? s : 1 ;
      0000D8 EF               [12]  905 	mov	a,r7
      0000D9 60 06            [24]  906 	jz	00105$
      0000DB 8F 06            [24]  907 	mov	ar6,r7
      0000DD 7F 00            [12]  908 	mov	r7,#0x00
      0000DF 80 04            [24]  909 	sjmp	00106$
      0000E1                        910 00105$:
      0000E1 7E 01            [12]  911 	mov	r6,#0x01
      0000E3 7F 00            [12]  912 	mov	r7,#0x00
      0000E5                        913 00106$:
      0000E5 8E*10            [24]  914 	mov	_textsize,r6
                                    915 ;	ecen4330_lcd_v3.c:140: }
      0000E7 22               [24]  916 	ret
                                    917 ;------------------------------------------------------------
                                    918 ;Allocation info for local variables in function 'setRotation'
                                    919 ;------------------------------------------------------------
                                    920 ;flag                      Allocated to registers r7 
                                    921 ;------------------------------------------------------------
                                    922 ;	ecen4330_lcd_v3.c:152: void setRotation (uint8_t flag) {
                                    923 ;	-----------------------------------------
                                    924 ;	 function setRotation
                                    925 ;	-----------------------------------------
      0000E8                        926 _setRotation:
                                    927 ;	ecen4330_lcd_v3.c:153: switch(flag) {
      0000E8 E5 82            [12]  928 	mov	a,dpl
      0000EA FF               [12]  929 	mov	r7,a
      0000EB 24 FC            [12]  930 	add	a,#0xff - 0x03
      0000ED 40 6A            [24]  931 	jc	00105$
      0000EF EF               [12]  932 	mov	a,r7
      0000F0 2F               [12]  933 	add	a,r7
                                    934 ;	ecen4330_lcd_v3.c:154: case 0:
      0000F1 90r00rF5         [24]  935 	mov	dptr,#00115$
      0000F4 73               [24]  936 	jmp	@a+dptr
      0000F5                        937 00115$:
      0000F5 80 06            [24]  938 	sjmp	00101$
      0000F7 80 1B            [24]  939 	sjmp	00102$
      0000F9 80 30            [24]  940 	sjmp	00103$
      0000FB 80 45            [24]  941 	sjmp	00104$
      0000FD                        942 00101$:
                                    943 ;	ecen4330_lcd_v3.c:155: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000FD 7F 48            [12]  944 	mov	r7,#0x48
                                    945 ;	ecen4330_lcd_v3.c:156: _width = TFTWIDTH;
      0000FF 90r00r00         [24]  946 	mov	dptr,#__width
      000102 74 F0            [12]  947 	mov	a,#0xf0
      000104 F0               [24]  948 	movx	@dptr,a
      000105 E4               [12]  949 	clr	a
      000106 A3               [24]  950 	inc	dptr
      000107 F0               [24]  951 	movx	@dptr,a
                                    952 ;	ecen4330_lcd_v3.c:157: _height = TFTHEIGHT;
      000108 90r00r02         [24]  953 	mov	dptr,#__height
      00010B 74 40            [12]  954 	mov	a,#0x40
      00010D F0               [24]  955 	movx	@dptr,a
      00010E 74 01            [12]  956 	mov	a,#0x01
      000110 A3               [24]  957 	inc	dptr
      000111 F0               [24]  958 	movx	@dptr,a
                                    959 ;	ecen4330_lcd_v3.c:158: break;
                                    960 ;	ecen4330_lcd_v3.c:159: case 1:
      000112 80 5A            [24]  961 	sjmp	00106$
      000114                        962 00102$:
                                    963 ;	ecen4330_lcd_v3.c:160: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000114 7F 28            [12]  964 	mov	r7,#0x28
                                    965 ;	ecen4330_lcd_v3.c:161: _width = TFTHEIGHT;
      000116 90r00r00         [24]  966 	mov	dptr,#__width
      000119 74 40            [12]  967 	mov	a,#0x40
      00011B F0               [24]  968 	movx	@dptr,a
      00011C 74 01            [12]  969 	mov	a,#0x01
      00011E A3               [24]  970 	inc	dptr
      00011F F0               [24]  971 	movx	@dptr,a
                                    972 ;	ecen4330_lcd_v3.c:162: _height = TFTWIDTH;
      000120 90r00r02         [24]  973 	mov	dptr,#__height
      000123 74 F0            [12]  974 	mov	a,#0xf0
      000125 F0               [24]  975 	movx	@dptr,a
      000126 E4               [12]  976 	clr	a
      000127 A3               [24]  977 	inc	dptr
      000128 F0               [24]  978 	movx	@dptr,a
                                    979 ;	ecen4330_lcd_v3.c:163: break;
                                    980 ;	ecen4330_lcd_v3.c:164: case 2:
      000129 80 43            [24]  981 	sjmp	00106$
      00012B                        982 00103$:
                                    983 ;	ecen4330_lcd_v3.c:165: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00012B 7F 88            [12]  984 	mov	r7,#0x88
                                    985 ;	ecen4330_lcd_v3.c:166: _width = TFTWIDTH;
      00012D 90r00r00         [24]  986 	mov	dptr,#__width
      000130 74 F0            [12]  987 	mov	a,#0xf0
      000132 F0               [24]  988 	movx	@dptr,a
      000133 E4               [12]  989 	clr	a
      000134 A3               [24]  990 	inc	dptr
      000135 F0               [24]  991 	movx	@dptr,a
                                    992 ;	ecen4330_lcd_v3.c:167: _height = TFTHEIGHT;
      000136 90r00r02         [24]  993 	mov	dptr,#__height
      000139 74 40            [12]  994 	mov	a,#0x40
      00013B F0               [24]  995 	movx	@dptr,a
      00013C 74 01            [12]  996 	mov	a,#0x01
      00013E A3               [24]  997 	inc	dptr
      00013F F0               [24]  998 	movx	@dptr,a
                                    999 ;	ecen4330_lcd_v3.c:168: break;
                                   1000 ;	ecen4330_lcd_v3.c:169: case 3:
      000140 80 2C            [24] 1001 	sjmp	00106$
      000142                       1002 00104$:
                                   1003 ;	ecen4330_lcd_v3.c:170: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000142 7F E8            [12] 1004 	mov	r7,#0xe8
                                   1005 ;	ecen4330_lcd_v3.c:171: _width = TFTHEIGHT;
      000144 90r00r00         [24] 1006 	mov	dptr,#__width
      000147 74 40            [12] 1007 	mov	a,#0x40
      000149 F0               [24] 1008 	movx	@dptr,a
      00014A 74 01            [12] 1009 	mov	a,#0x01
      00014C A3               [24] 1010 	inc	dptr
      00014D F0               [24] 1011 	movx	@dptr,a
                                   1012 ;	ecen4330_lcd_v3.c:172: _height = TFTWIDTH;
      00014E 90r00r02         [24] 1013 	mov	dptr,#__height
      000151 74 F0            [12] 1014 	mov	a,#0xf0
      000153 F0               [24] 1015 	movx	@dptr,a
      000154 E4               [12] 1016 	clr	a
      000155 A3               [24] 1017 	inc	dptr
      000156 F0               [24] 1018 	movx	@dptr,a
                                   1019 ;	ecen4330_lcd_v3.c:173: break;
                                   1020 ;	ecen4330_lcd_v3.c:174: default:
      000157 80 15            [24] 1021 	sjmp	00106$
      000159                       1022 00105$:
                                   1023 ;	ecen4330_lcd_v3.c:175: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000159 7F 48            [12] 1024 	mov	r7,#0x48
                                   1025 ;	ecen4330_lcd_v3.c:176: _width = TFTWIDTH;
      00015B 90r00r00         [24] 1026 	mov	dptr,#__width
      00015E 74 F0            [12] 1027 	mov	a,#0xf0
      000160 F0               [24] 1028 	movx	@dptr,a
      000161 E4               [12] 1029 	clr	a
      000162 A3               [24] 1030 	inc	dptr
      000163 F0               [24] 1031 	movx	@dptr,a
                                   1032 ;	ecen4330_lcd_v3.c:177: _height = TFTHEIGHT;
      000164 90r00r02         [24] 1033 	mov	dptr,#__height
      000167 74 40            [12] 1034 	mov	a,#0x40
      000169 F0               [24] 1035 	movx	@dptr,a
      00016A 74 01            [12] 1036 	mov	a,#0x01
      00016C A3               [24] 1037 	inc	dptr
      00016D F0               [24] 1038 	movx	@dptr,a
                                   1039 ;	ecen4330_lcd_v3.c:179: }
      00016E                       1040 00106$:
                                   1041 ;	ecen4330_lcd_v3.c:180: writeRegister8(ILI9341_MEMCONTROL, flag);
      00016E 8F*00            [24] 1042 	mov	_writeRegister8_PARM_2,r7
      000170 75 82 36         [24] 1043 	mov	dpl,#0x36
                                   1044 ;	ecen4330_lcd_v3.c:181: }
      000173 02r00r51         [24] 1045 	ljmp	_writeRegister8
                                   1046 ;------------------------------------------------------------
                                   1047 ;Allocation info for local variables in function 'setAddress'
                                   1048 ;------------------------------------------------------------
                                   1049 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1050 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1051 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1052 ;x1                        Allocated to registers r6 r7 
                                   1053 ;------------------------------------------------------------
                                   1054 ;	ecen4330_lcd_v3.c:183: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                   1055 ;	-----------------------------------------
                                   1056 ;	 function setAddress
                                   1057 ;	-----------------------------------------
      000176                       1058 _setAddress:
      000176 AE 82            [24] 1059 	mov	r6,dpl
      000178 AF 83            [24] 1060 	mov	r7,dph
                                   1061 ;	ecen4330_lcd_v3.c:184: write8Reg(0x2A);
                                   1062 ;	assignBit
      00017A C2 B5            [12] 1063 	clr	_P3_5
                                   1064 ;	assignBit
      00017C D2 B4            [12] 1065 	setb	_P3_4
      00017E 85*02 82         [24] 1066 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1067 	mov	dph,(_lcd_address + 1)
      000184 74 2A            [12] 1068 	mov	a,#0x2a
      000186 F0               [24] 1069 	movx	@dptr,a
                                   1070 ;	assignBit
      000187 C2 B4            [12] 1071 	clr	_P3_4
                                   1072 ;	ecen4330_lcd_v3.c:185: write8Data(x1 >> 8);
                                   1073 ;	assignBit
      000189 D2 B5            [12] 1074 	setb	_P3_5
                                   1075 ;	assignBit
      00018B D2 B4            [12] 1076 	setb	_P3_4
      00018D 85*02 82         [24] 1077 	mov	dpl,_lcd_address
      000190 85*03 83         [24] 1078 	mov	dph,(_lcd_address + 1)
      000193 8F 05            [24] 1079 	mov	ar5,r7
      000195 ED               [12] 1080 	mov	a,r5
      000196 F0               [24] 1081 	movx	@dptr,a
                                   1082 ;	assignBit
      000197 C2 B4            [12] 1083 	clr	_P3_4
                                   1084 ;	ecen4330_lcd_v3.c:186: write8Data(x1);
                                   1085 ;	assignBit
      000199 D2 B5            [12] 1086 	setb	_P3_5
                                   1087 ;	assignBit
      00019B D2 B4            [12] 1088 	setb	_P3_4
      00019D 85*02 82         [24] 1089 	mov	dpl,_lcd_address
      0001A0 85*03 83         [24] 1090 	mov	dph,(_lcd_address + 1)
      0001A3 EE               [12] 1091 	mov	a,r6
      0001A4 F0               [24] 1092 	movx	@dptr,a
                                   1093 ;	assignBit
      0001A5 C2 B4            [12] 1094 	clr	_P3_4
                                   1095 ;	ecen4330_lcd_v3.c:187: write8Data(x2 >> 8);
                                   1096 ;	assignBit
      0001A7 D2 B5            [12] 1097 	setb	_P3_5
                                   1098 ;	assignBit
      0001A9 D2 B4            [12] 1099 	setb	_P3_4
      0001AB 85*02 82         [24] 1100 	mov	dpl,_lcd_address
      0001AE 85*03 83         [24] 1101 	mov	dph,(_lcd_address + 1)
      0001B1 E5*03            [12] 1102 	mov	a,(_setAddress_PARM_3 + 1)
      0001B3 F0               [24] 1103 	movx	@dptr,a
                                   1104 ;	assignBit
      0001B4 C2 B4            [12] 1105 	clr	_P3_4
                                   1106 ;	ecen4330_lcd_v3.c:188: write8Data(x2);
                                   1107 ;	assignBit
      0001B6 D2 B5            [12] 1108 	setb	_P3_5
                                   1109 ;	assignBit
      0001B8 D2 B4            [12] 1110 	setb	_P3_4
      0001BA 85*02 82         [24] 1111 	mov	dpl,_lcd_address
      0001BD 85*03 83         [24] 1112 	mov	dph,(_lcd_address + 1)
      0001C0 E5*02            [12] 1113 	mov	a,_setAddress_PARM_3
      0001C2 F0               [24] 1114 	movx	@dptr,a
                                   1115 ;	assignBit
      0001C3 C2 B4            [12] 1116 	clr	_P3_4
                                   1117 ;	ecen4330_lcd_v3.c:190: write8Reg(0x2B);
                                   1118 ;	assignBit
      0001C5 C2 B5            [12] 1119 	clr	_P3_5
                                   1120 ;	assignBit
      0001C7 D2 B4            [12] 1121 	setb	_P3_4
      0001C9 85*02 82         [24] 1122 	mov	dpl,_lcd_address
      0001CC 85*03 83         [24] 1123 	mov	dph,(_lcd_address + 1)
      0001CF 74 2B            [12] 1124 	mov	a,#0x2b
      0001D1 F0               [24] 1125 	movx	@dptr,a
                                   1126 ;	assignBit
      0001D2 C2 B4            [12] 1127 	clr	_P3_4
                                   1128 ;	ecen4330_lcd_v3.c:191: write8Data(y1 >> 8);
                                   1129 ;	assignBit
      0001D4 D2 B5            [12] 1130 	setb	_P3_5
                                   1131 ;	assignBit
      0001D6 D2 B4            [12] 1132 	setb	_P3_4
      0001D8 85*02 82         [24] 1133 	mov	dpl,_lcd_address
      0001DB 85*03 83         [24] 1134 	mov	dph,(_lcd_address + 1)
      0001DE E5*01            [12] 1135 	mov	a,(_setAddress_PARM_2 + 1)
      0001E0 F0               [24] 1136 	movx	@dptr,a
                                   1137 ;	assignBit
      0001E1 C2 B4            [12] 1138 	clr	_P3_4
                                   1139 ;	ecen4330_lcd_v3.c:192: write8Data(y1);
                                   1140 ;	assignBit
      0001E3 D2 B5            [12] 1141 	setb	_P3_5
                                   1142 ;	assignBit
      0001E5 D2 B4            [12] 1143 	setb	_P3_4
      0001E7 85*02 82         [24] 1144 	mov	dpl,_lcd_address
      0001EA 85*03 83         [24] 1145 	mov	dph,(_lcd_address + 1)
      0001ED E5*00            [12] 1146 	mov	a,_setAddress_PARM_2
      0001EF F0               [24] 1147 	movx	@dptr,a
                                   1148 ;	assignBit
      0001F0 C2 B4            [12] 1149 	clr	_P3_4
                                   1150 ;	ecen4330_lcd_v3.c:193: write8Data(y2 >> 8);
                                   1151 ;	assignBit
      0001F2 D2 B5            [12] 1152 	setb	_P3_5
                                   1153 ;	assignBit
      0001F4 D2 B4            [12] 1154 	setb	_P3_4
      0001F6 85*02 82         [24] 1155 	mov	dpl,_lcd_address
      0001F9 85*03 83         [24] 1156 	mov	dph,(_lcd_address + 1)
      0001FC E5*05            [12] 1157 	mov	a,(_setAddress_PARM_4 + 1)
      0001FE F0               [24] 1158 	movx	@dptr,a
                                   1159 ;	assignBit
      0001FF C2 B4            [12] 1160 	clr	_P3_4
                                   1161 ;	ecen4330_lcd_v3.c:194: write8Data(y2);
                                   1162 ;	assignBit
      000201 D2 B5            [12] 1163 	setb	_P3_5
                                   1164 ;	assignBit
      000203 D2 B4            [12] 1165 	setb	_P3_4
      000205 85*02 82         [24] 1166 	mov	dpl,_lcd_address
      000208 85*03 83         [24] 1167 	mov	dph,(_lcd_address + 1)
      00020B E5*04            [12] 1168 	mov	a,_setAddress_PARM_4
      00020D F0               [24] 1169 	movx	@dptr,a
                                   1170 ;	assignBit
      00020E C2 B4            [12] 1171 	clr	_P3_4
                                   1172 ;	ecen4330_lcd_v3.c:195: }
      000210 22               [24] 1173 	ret
                                   1174 ;------------------------------------------------------------
                                   1175 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1176 ;------------------------------------------------------------
                                   1177 ;	ecen4330_lcd_v3.c:201: void TFT_LCD_INIT (void) {
                                   1178 ;	-----------------------------------------
                                   1179 ;	 function TFT_LCD_INIT
                                   1180 ;	-----------------------------------------
      000211                       1181 _TFT_LCD_INIT:
                                   1182 ;	ecen4330_lcd_v3.c:202: _width = TFTWIDTH;
      000211 90r00r00         [24] 1183 	mov	dptr,#__width
      000214 74 F0            [12] 1184 	mov	a,#0xf0
      000216 F0               [24] 1185 	movx	@dptr,a
      000217 E4               [12] 1186 	clr	a
      000218 A3               [24] 1187 	inc	dptr
      000219 F0               [24] 1188 	movx	@dptr,a
                                   1189 ;	ecen4330_lcd_v3.c:203: _height = TFTHEIGHT;
      00021A 90r00r02         [24] 1190 	mov	dptr,#__height
      00021D 74 40            [12] 1191 	mov	a,#0x40
      00021F F0               [24] 1192 	movx	@dptr,a
      000220 74 01            [12] 1193 	mov	a,#0x01
      000222 A3               [24] 1194 	inc	dptr
      000223 F0               [24] 1195 	movx	@dptr,a
                                   1196 ;	ecen4330_lcd_v3.c:205: IOM = 0;
                                   1197 ;	assignBit
      000224 C2 B4            [12] 1198 	clr	_P3_4
                                   1199 ;	ecen4330_lcd_v3.c:206: CD = 1;
                                   1200 ;	assignBit
      000226 D2 B5            [12] 1201 	setb	_P3_5
                                   1202 ;	ecen4330_lcd_v3.c:208: write8Reg(0x00);
                                   1203 ;	assignBit
      000228 C2 B5            [12] 1204 	clr	_P3_5
                                   1205 ;	assignBit
      00022A D2 B4            [12] 1206 	setb	_P3_4
      00022C 85*02 82         [24] 1207 	mov	dpl,_lcd_address
      00022F 85*03 83         [24] 1208 	mov	dph,(_lcd_address + 1)
      000232 E4               [12] 1209 	clr	a
      000233 F0               [24] 1210 	movx	@dptr,a
                                   1211 ;	assignBit
      000234 C2 B4            [12] 1212 	clr	_P3_4
                                   1213 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1214 ;	assignBit
      000236 D2 B5            [12] 1215 	setb	_P3_5
                                   1216 ;	assignBit
      000238 D2 B4            [12] 1217 	setb	_P3_4
      00023A 85*02 82         [24] 1218 	mov	dpl,_lcd_address
      00023D 85*03 83         [24] 1219 	mov	dph,(_lcd_address + 1)
      000240 E4               [12] 1220 	clr	a
      000241 F0               [24] 1221 	movx	@dptr,a
                                   1222 ;	assignBit
      000242 C2 B4            [12] 1223 	clr	_P3_4
                                   1224 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1225 ;	assignBit
      000244 D2 B5            [12] 1226 	setb	_P3_5
                                   1227 ;	assignBit
      000246 D2 B4            [12] 1228 	setb	_P3_4
      000248 85*02 82         [24] 1229 	mov	dpl,_lcd_address
      00024B 85*03 83         [24] 1230 	mov	dph,(_lcd_address + 1)
      00024E E4               [12] 1231 	clr	a
      00024F F0               [24] 1232 	movx	@dptr,a
                                   1233 ;	assignBit
      000250 C2 B4            [12] 1234 	clr	_P3_4
                                   1235 ;	ecen4330_lcd_v3.c:211: write8Data(0x00);
                                   1236 ;	assignBit
      000252 D2 B5            [12] 1237 	setb	_P3_5
                                   1238 ;	assignBit
      000254 D2 B4            [12] 1239 	setb	_P3_4
      000256 85*02 82         [24] 1240 	mov	dpl,_lcd_address
      000259 85*03 83         [24] 1241 	mov	dph,(_lcd_address + 1)
      00025C E4               [12] 1242 	clr	a
      00025D F0               [24] 1243 	movx	@dptr,a
                                   1244 ;	assignBit
      00025E C2 B4            [12] 1245 	clr	_P3_4
                                   1246 ;	ecen4330_lcd_v3.c:212: delay(200);
      000260 90 00 C8         [24] 1247 	mov	dptr,#0x00c8
      000263 12r00r21         [24] 1248 	lcall	_delay
                                   1249 ;	ecen4330_lcd_v3.c:214: writeRegister8(ILI9341_SOFTRESET, 0);
      000266 75*00 00         [24] 1250 	mov	_writeRegister8_PARM_2,#0x00
      000269 75 82 01         [24] 1251 	mov	dpl,#0x01
      00026C 12r00r51         [24] 1252 	lcall	_writeRegister8
                                   1253 ;	ecen4330_lcd_v3.c:215: delay(50);
      00026F 90 00 32         [24] 1254 	mov	dptr,#0x0032
      000272 12r00r21         [24] 1255 	lcall	_delay
                                   1256 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000275 75*00 00         [24] 1257 	mov	_writeRegister8_PARM_2,#0x00
      000278 75 82 28         [24] 1258 	mov	dpl,#0x28
      00027B 12r00r51         [24] 1259 	lcall	_writeRegister8
                                   1260 ;	ecen4330_lcd_v3.c:217: delay(10);
      00027E 90 00 0A         [24] 1261 	mov	dptr,#0x000a
      000281 12r00r21         [24] 1262 	lcall	_delay
                                   1263 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000284 75*00 23         [24] 1264 	mov	_writeRegister8_PARM_2,#0x23
      000287 75 82 C0         [24] 1265 	mov	dpl,#0xc0
      00028A 12r00r51         [24] 1266 	lcall	_writeRegister8
                                   1267 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00028D 75*00 11         [24] 1268 	mov	_writeRegister8_PARM_2,#0x11
      000290 75 82 C1         [24] 1269 	mov	dpl,#0xc1
      000293 12r00r51         [24] 1270 	lcall	_writeRegister8
                                   1271 ;	ecen4330_lcd_v3.c:221: write8Reg(ILI9341_VCOMCONTROL1);
                                   1272 ;	assignBit
      000296 C2 B5            [12] 1273 	clr	_P3_5
                                   1274 ;	assignBit
      000298 D2 B4            [12] 1275 	setb	_P3_4
      00029A 85*02 82         [24] 1276 	mov	dpl,_lcd_address
      00029D 85*03 83         [24] 1277 	mov	dph,(_lcd_address + 1)
      0002A0 74 C5            [12] 1278 	mov	a,#0xc5
      0002A2 F0               [24] 1279 	movx	@dptr,a
                                   1280 ;	assignBit
      0002A3 C2 B4            [12] 1281 	clr	_P3_4
                                   1282 ;	ecen4330_lcd_v3.c:222: write8Data(0x3d);
                                   1283 ;	assignBit
      0002A5 D2 B5            [12] 1284 	setb	_P3_5
                                   1285 ;	assignBit
      0002A7 D2 B4            [12] 1286 	setb	_P3_4
      0002A9 85*02 82         [24] 1287 	mov	dpl,_lcd_address
      0002AC 85*03 83         [24] 1288 	mov	dph,(_lcd_address + 1)
      0002AF 74 3D            [12] 1289 	mov	a,#0x3d
      0002B1 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	assignBit
      0002B2 C2 B4            [12] 1292 	clr	_P3_4
                                   1293 ;	ecen4330_lcd_v3.c:223: write8Data(0x30);
                                   1294 ;	assignBit
      0002B4 D2 B5            [12] 1295 	setb	_P3_5
                                   1296 ;	assignBit
      0002B6 D2 B4            [12] 1297 	setb	_P3_4
      0002B8 85*02 82         [24] 1298 	mov	dpl,_lcd_address
      0002BB 85*03 83         [24] 1299 	mov	dph,(_lcd_address + 1)
      0002BE 74 30            [12] 1300 	mov	a,#0x30
      0002C0 F0               [24] 1301 	movx	@dptr,a
                                   1302 ;	assignBit
      0002C1 C2 B4            [12] 1303 	clr	_P3_4
                                   1304 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002C3 75*00 AA         [24] 1305 	mov	_writeRegister8_PARM_2,#0xaa
      0002C6 75 82 C7         [24] 1306 	mov	dpl,#0xc7
      0002C9 12r00r51         [24] 1307 	lcall	_writeRegister8
                                   1308 ;	ecen4330_lcd_v3.c:225: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002CC 75*00 88         [24] 1309 	mov	_writeRegister8_PARM_2,#0x88
      0002CF 75 82 36         [24] 1310 	mov	dpl,#0x36
      0002D2 12r00r51         [24] 1311 	lcall	_writeRegister8
                                   1312 ;	ecen4330_lcd_v3.c:226: write8Reg(ILI9341_PIXELFORMAT);
                                   1313 ;	assignBit
      0002D5 C2 B5            [12] 1314 	clr	_P3_5
                                   1315 ;	assignBit
      0002D7 D2 B4            [12] 1316 	setb	_P3_4
      0002D9 85*02 82         [24] 1317 	mov	dpl,_lcd_address
      0002DC 85*03 83         [24] 1318 	mov	dph,(_lcd_address + 1)
      0002DF 74 3A            [12] 1319 	mov	a,#0x3a
      0002E1 F0               [24] 1320 	movx	@dptr,a
                                   1321 ;	assignBit
      0002E2 C2 B4            [12] 1322 	clr	_P3_4
                                   1323 ;	ecen4330_lcd_v3.c:227: write8Data(0x55);write8Data(0x00);
                                   1324 ;	assignBit
      0002E4 D2 B5            [12] 1325 	setb	_P3_5
                                   1326 ;	assignBit
      0002E6 D2 B4            [12] 1327 	setb	_P3_4
      0002E8 85*02 82         [24] 1328 	mov	dpl,_lcd_address
      0002EB 85*03 83         [24] 1329 	mov	dph,(_lcd_address + 1)
      0002EE 74 55            [12] 1330 	mov	a,#0x55
      0002F0 F0               [24] 1331 	movx	@dptr,a
                                   1332 ;	assignBit
      0002F1 C2 B4            [12] 1333 	clr	_P3_4
                                   1334 ;	assignBit
      0002F3 D2 B5            [12] 1335 	setb	_P3_5
                                   1336 ;	assignBit
      0002F5 D2 B4            [12] 1337 	setb	_P3_4
      0002F7 85*02 82         [24] 1338 	mov	dpl,_lcd_address
      0002FA 85*03 83         [24] 1339 	mov	dph,(_lcd_address + 1)
      0002FD E4               [12] 1340 	clr	a
      0002FE F0               [24] 1341 	movx	@dptr,a
                                   1342 ;	assignBit
      0002FF C2 B4            [12] 1343 	clr	_P3_4
                                   1344 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000301 75*00 1B         [24] 1345 	mov	_writeRegister16_PARM_2,#0x1b
      000304 75*01 00         [24] 1346 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000307 90 00 B1         [24] 1347 	mov	dptr,#0x00b1
      00030A 12r00r71         [24] 1348 	lcall	_writeRegister16
                                   1349 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00030D 75*00 07         [24] 1350 	mov	_writeRegister8_PARM_2,#0x07
      000310 75 82 B7         [24] 1351 	mov	dpl,#0xb7
      000313 12r00r51         [24] 1352 	lcall	_writeRegister8
                                   1353 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      000316 75*00 00         [24] 1354 	mov	_writeRegister8_PARM_2,#0x00
      000319 75 82 11         [24] 1355 	mov	dpl,#0x11
      00031C 12r00r51         [24] 1356 	lcall	_writeRegister8
                                   1357 ;	ecen4330_lcd_v3.c:233: delay(150);
      00031F 90 00 96         [24] 1358 	mov	dptr,#0x0096
      000322 12r00r21         [24] 1359 	lcall	_delay
                                   1360 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      000325 75*00 00         [24] 1361 	mov	_writeRegister8_PARM_2,#0x00
      000328 75 82 29         [24] 1362 	mov	dpl,#0x29
      00032B 12r00r51         [24] 1363 	lcall	_writeRegister8
                                   1364 ;	ecen4330_lcd_v3.c:235: delay(500);
      00032E 90 01 F4         [24] 1365 	mov	dptr,#0x01f4
      000331 12r00r21         [24] 1366 	lcall	_delay
                                   1367 ;	ecen4330_lcd_v3.c:236: setAddress(0,0,_width-1,_height-1);
      000334 90r00r00         [24] 1368 	mov	dptr,#__width
      000337 E0               [24] 1369 	movx	a,@dptr
      000338 FE               [12] 1370 	mov	r6,a
      000339 A3               [24] 1371 	inc	dptr
      00033A E0               [24] 1372 	movx	a,@dptr
      00033B FF               [12] 1373 	mov	r7,a
      00033C 1E               [12] 1374 	dec	r6
      00033D BE FF 01         [24] 1375 	cjne	r6,#0xff,00103$
      000340 1F               [12] 1376 	dec	r7
      000341                       1377 00103$:
      000341 8E*02            [24] 1378 	mov	_setAddress_PARM_3,r6
      000343 8F*03            [24] 1379 	mov	(_setAddress_PARM_3 + 1),r7
      000345 90r00r02         [24] 1380 	mov	dptr,#__height
      000348 E0               [24] 1381 	movx	a,@dptr
      000349 FE               [12] 1382 	mov	r6,a
      00034A A3               [24] 1383 	inc	dptr
      00034B E0               [24] 1384 	movx	a,@dptr
      00034C FF               [12] 1385 	mov	r7,a
      00034D 1E               [12] 1386 	dec	r6
      00034E BE FF 01         [24] 1387 	cjne	r6,#0xff,00104$
      000351 1F               [12] 1388 	dec	r7
      000352                       1389 00104$:
      000352 8E*04            [24] 1390 	mov	_setAddress_PARM_4,r6
      000354 8F*05            [24] 1391 	mov	(_setAddress_PARM_4 + 1),r7
      000356 E4               [12] 1392 	clr	a
      000357 F5*00            [12] 1393 	mov	_setAddress_PARM_2,a
      000359 F5*01            [12] 1394 	mov	(_setAddress_PARM_2 + 1),a
      00035B 90 00 00         [24] 1395 	mov	dptr,#0x0000
                                   1396 ;	ecen4330_lcd_v3.c:237: }
      00035E 02r01r76         [24] 1397 	ljmp	_setAddress
                                   1398 ;------------------------------------------------------------
                                   1399 ;Allocation info for local variables in function 'drawPixel'
                                   1400 ;------------------------------------------------------------
                                   1401 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1402 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1403 ;x3                        Allocated to registers r6 r7 
                                   1404 ;------------------------------------------------------------
                                   1405 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1406 ;	-----------------------------------------
                                   1407 ;	 function drawPixel
                                   1408 ;	-----------------------------------------
      000361                       1409 _drawPixel:
      000361 AE 82            [24] 1410 	mov	r6,dpl
      000363 AF 83            [24] 1411 	mov	r7,dph
                                   1412 ;	ecen4330_lcd_v3.c:248: setAddress(x3,y3,x3+1,y3+1);
      000365 8E 04            [24] 1413 	mov	ar4,r6
      000367 8F 05            [24] 1414 	mov	ar5,r7
      000369 0C               [12] 1415 	inc	r4
      00036A BC 00 01         [24] 1416 	cjne	r4,#0x00,00103$
      00036D 0D               [12] 1417 	inc	r5
      00036E                       1418 00103$:
      00036E 8C*02            [24] 1419 	mov	_setAddress_PARM_3,r4
      000370 8D*03            [24] 1420 	mov	(_setAddress_PARM_3 + 1),r5
      000372 AC*16            [24] 1421 	mov	r4,_drawPixel_PARM_2
      000374 AD*17            [24] 1422 	mov	r5,(_drawPixel_PARM_2 + 1)
      000376 0C               [12] 1423 	inc	r4
      000377 BC 00 01         [24] 1424 	cjne	r4,#0x00,00104$
      00037A 0D               [12] 1425 	inc	r5
      00037B                       1426 00104$:
      00037B 8C*04            [24] 1427 	mov	_setAddress_PARM_4,r4
      00037D 8D*05            [24] 1428 	mov	(_setAddress_PARM_4 + 1),r5
      00037F 85*16*00         [24] 1429 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000382 85*17*01         [24] 1430 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000385 8E 82            [24] 1431 	mov	dpl,r6
      000387 8F 83            [24] 1432 	mov	dph,r7
      000389 12r01r76         [24] 1433 	lcall	_setAddress
                                   1434 ;	ecen4330_lcd_v3.c:250: CD=0; write8(0x2C);
                                   1435 ;	assignBit
      00038C C2 B5            [12] 1436 	clr	_P3_5
                                   1437 ;	assignBit
      00038E D2 B4            [12] 1438 	setb	_P3_4
      000390 85*02 82         [24] 1439 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1440 	mov	dph,(_lcd_address + 1)
      000396 74 2C            [12] 1441 	mov	a,#0x2c
      000398 F0               [24] 1442 	movx	@dptr,a
                                   1443 ;	assignBit
      000399 C2 B4            [12] 1444 	clr	_P3_4
                                   1445 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1446 ;	assignBit
      00039B D2 B5            [12] 1447 	setb	_P3_5
                                   1448 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1449 ;	assignBit
      00039D D2 B4            [12] 1450 	setb	_P3_4
      00039F 85*02 82         [24] 1451 	mov	dpl,_lcd_address
      0003A2 85*03 83         [24] 1452 	mov	dph,(_lcd_address + 1)
      0003A5 E5*19            [12] 1453 	mov	a,(_drawPixel_PARM_3 + 1)
      0003A7 F0               [24] 1454 	movx	@dptr,a
                                   1455 ;	assignBit
      0003A8 C2 B4            [12] 1456 	clr	_P3_4
                                   1457 ;	assignBit
      0003AA D2 B4            [12] 1458 	setb	_P3_4
      0003AC 85*02 82         [24] 1459 	mov	dpl,_lcd_address
      0003AF 85*03 83         [24] 1460 	mov	dph,(_lcd_address + 1)
      0003B2 E5*18            [12] 1461 	mov	a,_drawPixel_PARM_3
      0003B4 F0               [24] 1462 	movx	@dptr,a
                                   1463 ;	assignBit
      0003B5 C2 B4            [12] 1464 	clr	_P3_4
                                   1465 ;	ecen4330_lcd_v3.c:254: }
      0003B7 22               [24] 1466 	ret
                                   1467 ;------------------------------------------------------------
                                   1468 ;Allocation info for local variables in function 'drawCircle'
                                   1469 ;------------------------------------------------------------
                                   1470 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1471 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1472 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1473 ;x0                        Allocated with name '_drawCircle_x0_65536_105'
                                   1474 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1475 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1476 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1477 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1478 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1479 ;f                         Allocated with name '_drawCircle_f_65536_106'
                                   1480 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_106'
                                   1481 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_106'
                                   1482 ;x                         Allocated with name '_drawCircle_x_65536_106'
                                   1483 ;y                         Allocated with name '_drawCircle_y_65536_106'
                                   1484 ;------------------------------------------------------------
                                   1485 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1486 ;	-----------------------------------------
                                   1487 ;	 function drawCircle
                                   1488 ;	-----------------------------------------
      0003B8                       1489 _drawCircle:
      0003B8 85 82*20         [24] 1490 	mov	_drawCircle_x0_65536_105,dpl
      0003BB 85 83*21         [24] 1491 	mov	(_drawCircle_x0_65536_105 + 1),dph
                                   1492 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003BE 74 01            [12] 1493 	mov	a,#0x01
      0003C0 C3               [12] 1494 	clr	c
      0003C1 95*1C            [12] 1495 	subb	a,_drawCircle_PARM_3
      0003C3 FC               [12] 1496 	mov	r4,a
      0003C4 E4               [12] 1497 	clr	a
      0003C5 95*1D            [12] 1498 	subb	a,(_drawCircle_PARM_3 + 1)
      0003C7 FD               [12] 1499 	mov	r5,a
      0003C8 90r00r04         [24] 1500 	mov	dptr,#_drawCircle_f_65536_106
      0003CB EC               [12] 1501 	mov	a,r4
      0003CC F0               [24] 1502 	movx	@dptr,a
      0003CD ED               [12] 1503 	mov	a,r5
      0003CE A3               [24] 1504 	inc	dptr
      0003CF F0               [24] 1505 	movx	@dptr,a
                                   1506 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003D0 85*1C*00         [24] 1507 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003D3 85*1D*01         [24] 1508 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003D6 90 FF FE         [24] 1509 	mov	dptr,#0xfffe
      0003D9 12r00r00         [24] 1510 	lcall	__mulint
      0003DC AC 82            [24] 1511 	mov	r4,dpl
      0003DE AD 83            [24] 1512 	mov	r5,dph
                                   1513 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      0003E0 AA*1C            [24] 1514 	mov	r2,_drawCircle_PARM_3
      0003E2 AB*1D            [24] 1515 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1516 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      0003E4 E5*1C            [12] 1517 	mov	a,_drawCircle_PARM_3
      0003E6 25*1A            [12] 1518 	add	a,_drawCircle_PARM_2
      0003E8 F5*16            [12] 1519 	mov	_drawPixel_PARM_2,a
      0003EA E5*1D            [12] 1520 	mov	a,(_drawCircle_PARM_3 + 1)
      0003EC 35*1B            [12] 1521 	addc	a,(_drawCircle_PARM_2 + 1)
      0003EE F5*17            [12] 1522 	mov	(_drawPixel_PARM_2 + 1),a
      0003F0 85*1E*18         [24] 1523 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F3 85*1F*19         [24] 1524 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F6 85*20 82         [24] 1525 	mov	dpl,_drawCircle_x0_65536_105
      0003F9 85*21 83         [24] 1526 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      0003FC C0 05            [24] 1527 	push	ar5
      0003FE C0 04            [24] 1528 	push	ar4
      000400 C0 03            [24] 1529 	push	ar3
      000402 C0 02            [24] 1530 	push	ar2
      000404 12r03r61         [24] 1531 	lcall	_drawPixel
                                   1532 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      000407 E5*1A            [12] 1533 	mov	a,_drawCircle_PARM_2
      000409 C3               [12] 1534 	clr	c
      00040A 95*1C            [12] 1535 	subb	a,_drawCircle_PARM_3
      00040C F5*16            [12] 1536 	mov	_drawPixel_PARM_2,a
      00040E E5*1B            [12] 1537 	mov	a,(_drawCircle_PARM_2 + 1)
      000410 95*1D            [12] 1538 	subb	a,(_drawCircle_PARM_3 + 1)
      000412 F5*17            [12] 1539 	mov	(_drawPixel_PARM_2 + 1),a
      000414 85*1E*18         [24] 1540 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000417 85*1F*19         [24] 1541 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041A 85*20 82         [24] 1542 	mov	dpl,_drawCircle_x0_65536_105
      00041D 85*21 83         [24] 1543 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      000420 12r03r61         [24] 1544 	lcall	_drawPixel
                                   1545 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000423 E5*1C            [12] 1546 	mov	a,_drawCircle_PARM_3
      000425 25*20            [12] 1547 	add	a,_drawCircle_x0_65536_105
      000427 F5 82            [12] 1548 	mov	dpl,a
      000429 E5*1D            [12] 1549 	mov	a,(_drawCircle_PARM_3 + 1)
      00042B 35*21            [12] 1550 	addc	a,(_drawCircle_x0_65536_105 + 1)
      00042D F5 83            [12] 1551 	mov	dph,a
      00042F 85*1A*16         [24] 1552 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000432 85*1B*17         [24] 1553 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000435 85*1E*18         [24] 1554 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000438 85*1F*19         [24] 1555 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043B 12r03r61         [24] 1556 	lcall	_drawPixel
                                   1557 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      00043E E5*20            [12] 1558 	mov	a,_drawCircle_x0_65536_105
      000440 C3               [12] 1559 	clr	c
      000441 95*1C            [12] 1560 	subb	a,_drawCircle_PARM_3
      000443 F5 82            [12] 1561 	mov	dpl,a
      000445 E5*21            [12] 1562 	mov	a,(_drawCircle_x0_65536_105 + 1)
      000447 95*1D            [12] 1563 	subb	a,(_drawCircle_PARM_3 + 1)
      000449 F5 83            [12] 1564 	mov	dph,a
      00044B 85*1A*16         [24] 1565 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00044E 85*1B*17         [24] 1566 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000451 85*1E*18         [24] 1567 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000454 85*1F*19         [24] 1568 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000457 12r03r61         [24] 1569 	lcall	_drawPixel
      00045A D0 02            [24] 1570 	pop	ar2
      00045C D0 03            [24] 1571 	pop	ar3
      00045E D0 04            [24] 1572 	pop	ar4
      000460 D0 05            [24] 1573 	pop	ar5
                                   1574 ;	ecen4330_lcd_v3.c:276: while (x<y) {
      000462 78 00            [12] 1575 	mov	r0,#0x00
      000464 79 00            [12] 1576 	mov	r1,#0x00
      000466 75*22 01         [24] 1577 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1578 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000469 89*23            [24] 1579 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      00046B                       1580 00103$:
      00046B C3               [12] 1581 	clr	c
      00046C E8               [12] 1582 	mov	a,r0
      00046D 9A               [12] 1583 	subb	a,r2
      00046E E9               [12] 1584 	mov	a,r1
      00046F 64 80            [12] 1585 	xrl	a,#0x80
      000471 8B F0            [24] 1586 	mov	b,r3
      000473 63 F0 80         [24] 1587 	xrl	b,#0x80
      000476 95 F0            [12] 1588 	subb	a,b
      000478 40 01            [24] 1589 	jc	00121$
      00047A 22               [24] 1590 	ret
      00047B                       1591 00121$:
                                   1592 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      00047B 90r00r04         [24] 1593 	mov	dptr,#_drawCircle_f_65536_106
      00047E E0               [24] 1594 	movx	a,@dptr
      00047F F5*24            [12] 1595 	mov	_drawCircle_sloc1_1_0,a
      000481 A3               [24] 1596 	inc	dptr
      000482 E0               [24] 1597 	movx	a,@dptr
      000483 F5*25            [12] 1598 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000485 20 E7 18         [24] 1599 	jb	acc.7,00102$
                                   1600 ;	ecen4330_lcd_v3.c:278: y--;
      000488 1A               [12] 1601 	dec	r2
      000489 BA FF 01         [24] 1602 	cjne	r2,#0xff,00123$
      00048C 1B               [12] 1603 	dec	r3
      00048D                       1604 00123$:
                                   1605 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      00048D 74 02            [12] 1606 	mov	a,#0x02
      00048F 2C               [12] 1607 	add	a,r4
      000490 FC               [12] 1608 	mov	r4,a
      000491 E4               [12] 1609 	clr	a
      000492 3D               [12] 1610 	addc	a,r5
      000493 FD               [12] 1611 	mov	r5,a
                                   1612 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      000494 90r00r04         [24] 1613 	mov	dptr,#_drawCircle_f_65536_106
      000497 EC               [12] 1614 	mov	a,r4
      000498 25*24            [12] 1615 	add	a,_drawCircle_sloc1_1_0
      00049A F0               [24] 1616 	movx	@dptr,a
      00049B ED               [12] 1617 	mov	a,r5
      00049C 35*25            [12] 1618 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00049E A3               [24] 1619 	inc	dptr
      00049F F0               [24] 1620 	movx	@dptr,a
      0004A0                       1621 00102$:
                                   1622 ;	ecen4330_lcd_v3.c:282: x++;
      0004A0 C0 04            [24] 1623 	push	ar4
      0004A2 C0 05            [24] 1624 	push	ar5
      0004A4 08               [12] 1625 	inc	r0
      0004A5 B8 00 01         [24] 1626 	cjne	r0,#0x00,00124$
      0004A8 09               [12] 1627 	inc	r1
      0004A9                       1628 00124$:
                                   1629 ;	ecen4330_lcd_v3.c:283: ddF_x += 2;
      0004A9 74 02            [12] 1630 	mov	a,#0x02
      0004AB 25*22            [12] 1631 	add	a,_drawCircle_sloc0_1_0
      0004AD F5*22            [12] 1632 	mov	_drawCircle_sloc0_1_0,a
      0004AF E4               [12] 1633 	clr	a
      0004B0 35*23            [12] 1634 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004B2 F5*23            [12] 1635 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1636 ;	ecen4330_lcd_v3.c:284: f += ddF_x;
      0004B4 90r00r04         [24] 1637 	mov	dptr,#_drawCircle_f_65536_106
      0004B7 E0               [24] 1638 	movx	a,@dptr
      0004B8 FE               [12] 1639 	mov	r6,a
      0004B9 A3               [24] 1640 	inc	dptr
      0004BA E0               [24] 1641 	movx	a,@dptr
      0004BB FF               [12] 1642 	mov	r7,a
      0004BC 90r00r04         [24] 1643 	mov	dptr,#_drawCircle_f_65536_106
      0004BF E5*22            [12] 1644 	mov	a,_drawCircle_sloc0_1_0
      0004C1 2E               [12] 1645 	add	a,r6
      0004C2 F0               [24] 1646 	movx	@dptr,a
      0004C3 E5*23            [12] 1647 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004C5 3F               [12] 1648 	addc	a,r7
      0004C6 A3               [24] 1649 	inc	dptr
      0004C7 F0               [24] 1650 	movx	@dptr,a
                                   1651 ;	ecen4330_lcd_v3.c:286: drawPixel(x0 + x, y0 + y, color);
      0004C8 AE*20            [24] 1652 	mov	r6,_drawCircle_x0_65536_105
      0004CA AF*21            [24] 1653 	mov	r7,(_drawCircle_x0_65536_105 + 1)
      0004CC E8               [12] 1654 	mov	a,r0
      0004CD 2E               [12] 1655 	add	a,r6
      0004CE FC               [12] 1656 	mov	r4,a
      0004CF E9               [12] 1657 	mov	a,r1
      0004D0 3F               [12] 1658 	addc	a,r7
      0004D1 FD               [12] 1659 	mov	r5,a
      0004D2 8C*24            [24] 1660 	mov	_drawCircle_sloc1_1_0,r4
      0004D4 8D*25            [24] 1661 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004D6 85*1A*26         [24] 1662 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004D9 85*1B*27         [24] 1663 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      0004DC EA               [12] 1664 	mov	a,r2
      0004DD 25*26            [12] 1665 	add	a,_drawCircle_sloc2_1_0
      0004DF FC               [12] 1666 	mov	r4,a
      0004E0 EB               [12] 1667 	mov	a,r3
      0004E1 35*27            [12] 1668 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004E3 FD               [12] 1669 	mov	r5,a
      0004E4 8C*28            [24] 1670 	mov	_drawCircle_sloc3_1_0,r4
      0004E6 8D*29            [24] 1671 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004E8 85*28*16         [24] 1672 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004EB 85*29*17         [24] 1673 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EE 85*1E*18         [24] 1674 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004F1 85*1F*19         [24] 1675 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F4 85*24 82         [24] 1676 	mov	dpl,_drawCircle_sloc1_1_0
      0004F7 85*25 83         [24] 1677 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004FA C0 07            [24] 1678 	push	ar7
      0004FC C0 06            [24] 1679 	push	ar6
      0004FE C0 05            [24] 1680 	push	ar5
      000500 C0 04            [24] 1681 	push	ar4
      000502 C0 03            [24] 1682 	push	ar3
      000504 C0 02            [24] 1683 	push	ar2
      000506 C0 01            [24] 1684 	push	ar1
      000508 C0 00            [24] 1685 	push	ar0
      00050A 12r03r61         [24] 1686 	lcall	_drawPixel
      00050D D0 00            [24] 1687 	pop	ar0
      00050F D0 01            [24] 1688 	pop	ar1
      000511 D0 02            [24] 1689 	pop	ar2
      000513 D0 03            [24] 1690 	pop	ar3
      000515 D0 04            [24] 1691 	pop	ar4
      000517 D0 05            [24] 1692 	pop	ar5
      000519 D0 06            [24] 1693 	pop	ar6
      00051B D0 07            [24] 1694 	pop	ar7
                                   1695 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 - x, y0 + y, color);
      00051D EE               [12] 1696 	mov	a,r6
      00051E C3               [12] 1697 	clr	c
      00051F 98               [12] 1698 	subb	a,r0
      000520 FC               [12] 1699 	mov	r4,a
      000521 EF               [12] 1700 	mov	a,r7
      000522 99               [12] 1701 	subb	a,r1
      000523 FD               [12] 1702 	mov	r5,a
      000524 8C*2A            [24] 1703 	mov	_drawCircle_sloc4_1_0,r4
      000526 8D*2B            [24] 1704 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000528 85*28*16         [24] 1705 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      00052B 85*29*17         [24] 1706 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      00052E 85*1E*18         [24] 1707 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000531 85*1F*19         [24] 1708 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000534 85*2A 82         [24] 1709 	mov	dpl,_drawCircle_sloc4_1_0
      000537 85*2B 83         [24] 1710 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00053A C0 07            [24] 1711 	push	ar7
      00053C C0 06            [24] 1712 	push	ar6
      00053E C0 05            [24] 1713 	push	ar5
      000540 C0 04            [24] 1714 	push	ar4
      000542 C0 03            [24] 1715 	push	ar3
      000544 C0 02            [24] 1716 	push	ar2
      000546 C0 01            [24] 1717 	push	ar1
      000548 C0 00            [24] 1718 	push	ar0
      00054A 12r03r61         [24] 1719 	lcall	_drawPixel
      00054D D0 00            [24] 1720 	pop	ar0
      00054F D0 01            [24] 1721 	pop	ar1
      000551 D0 02            [24] 1722 	pop	ar2
      000553 D0 03            [24] 1723 	pop	ar3
      000555 D0 04            [24] 1724 	pop	ar4
      000557 D0 05            [24] 1725 	pop	ar5
                                   1726 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 + x, y0 - y, color);
      000559 E5*26            [12] 1727 	mov	a,_drawCircle_sloc2_1_0
      00055B C3               [12] 1728 	clr	c
      00055C 9A               [12] 1729 	subb	a,r2
      00055D FC               [12] 1730 	mov	r4,a
      00055E E5*27            [12] 1731 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000560 9B               [12] 1732 	subb	a,r3
      000561 FD               [12] 1733 	mov	r5,a
      000562 8C*16            [24] 1734 	mov	_drawPixel_PARM_2,r4
      000564 8D*17            [24] 1735 	mov	(_drawPixel_PARM_2 + 1),r5
      000566 85*1E*18         [24] 1736 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000569 85*1F*19         [24] 1737 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00056C 85*24 82         [24] 1738 	mov	dpl,_drawCircle_sloc1_1_0
      00056F 85*25 83         [24] 1739 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000572 C0 05            [24] 1740 	push	ar5
      000574 C0 04            [24] 1741 	push	ar4
      000576 C0 03            [24] 1742 	push	ar3
      000578 C0 02            [24] 1743 	push	ar2
      00057A C0 01            [24] 1744 	push	ar1
      00057C C0 00            [24] 1745 	push	ar0
      00057E 12r03r61         [24] 1746 	lcall	_drawPixel
      000581 D0 00            [24] 1747 	pop	ar0
      000583 D0 01            [24] 1748 	pop	ar1
      000585 D0 02            [24] 1749 	pop	ar2
      000587 D0 03            [24] 1750 	pop	ar3
      000589 D0 04            [24] 1751 	pop	ar4
      00058B D0 05            [24] 1752 	pop	ar5
                                   1753 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 - x, y0 - y, color);
      00058D 8C*16            [24] 1754 	mov	_drawPixel_PARM_2,r4
      00058F 8D*17            [24] 1755 	mov	(_drawPixel_PARM_2 + 1),r5
      000591 85*1E*18         [24] 1756 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000594 85*1F*19         [24] 1757 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000597 85*2A 82         [24] 1758 	mov	dpl,_drawCircle_sloc4_1_0
      00059A 85*2B 83         [24] 1759 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059D C0 05            [24] 1760 	push	ar5
      00059F C0 04            [24] 1761 	push	ar4
      0005A1 C0 03            [24] 1762 	push	ar3
      0005A3 C0 02            [24] 1763 	push	ar2
      0005A5 C0 01            [24] 1764 	push	ar1
      0005A7 C0 00            [24] 1765 	push	ar0
      0005A9 12r03r61         [24] 1766 	lcall	_drawPixel
      0005AC D0 00            [24] 1767 	pop	ar0
      0005AE D0 01            [24] 1768 	pop	ar1
      0005B0 D0 02            [24] 1769 	pop	ar2
      0005B2 D0 03            [24] 1770 	pop	ar3
      0005B4 D0 04            [24] 1771 	pop	ar4
      0005B6 D0 05            [24] 1772 	pop	ar5
      0005B8 D0 06            [24] 1773 	pop	ar6
      0005BA D0 07            [24] 1774 	pop	ar7
                                   1775 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 + y, y0 + x, color);
      0005BC EA               [12] 1776 	mov	a,r2
      0005BD 2E               [12] 1777 	add	a,r6
      0005BE FC               [12] 1778 	mov	r4,a
      0005BF EB               [12] 1779 	mov	a,r3
      0005C0 3F               [12] 1780 	addc	a,r7
      0005C1 FD               [12] 1781 	mov	r5,a
      0005C2 8C*2A            [24] 1782 	mov	_drawCircle_sloc4_1_0,r4
      0005C4 8D*2B            [24] 1783 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005C6 E8               [12] 1784 	mov	a,r0
      0005C7 25*26            [12] 1785 	add	a,_drawCircle_sloc2_1_0
      0005C9 FC               [12] 1786 	mov	r4,a
      0005CA E9               [12] 1787 	mov	a,r1
      0005CB 35*27            [12] 1788 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005CD FD               [12] 1789 	mov	r5,a
      0005CE 8C*16            [24] 1790 	mov	_drawPixel_PARM_2,r4
      0005D0 8D*17            [24] 1791 	mov	(_drawPixel_PARM_2 + 1),r5
      0005D2 85*1E*18         [24] 1792 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005D5 85*1F*19         [24] 1793 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005D8 85*2A 82         [24] 1794 	mov	dpl,_drawCircle_sloc4_1_0
      0005DB 85*2B 83         [24] 1795 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005DE C0 07            [24] 1796 	push	ar7
      0005E0 C0 06            [24] 1797 	push	ar6
      0005E2 C0 05            [24] 1798 	push	ar5
      0005E4 C0 04            [24] 1799 	push	ar4
      0005E6 C0 03            [24] 1800 	push	ar3
      0005E8 C0 02            [24] 1801 	push	ar2
      0005EA C0 01            [24] 1802 	push	ar1
      0005EC C0 00            [24] 1803 	push	ar0
      0005EE 12r03r61         [24] 1804 	lcall	_drawPixel
      0005F1 D0 00            [24] 1805 	pop	ar0
      0005F3 D0 01            [24] 1806 	pop	ar1
      0005F5 D0 02            [24] 1807 	pop	ar2
      0005F7 D0 03            [24] 1808 	pop	ar3
      0005F9 D0 04            [24] 1809 	pop	ar4
      0005FB D0 05            [24] 1810 	pop	ar5
      0005FD D0 06            [24] 1811 	pop	ar6
      0005FF D0 07            [24] 1812 	pop	ar7
                                   1813 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 - y, y0 + x, color);
      000601 EE               [12] 1814 	mov	a,r6
      000602 C3               [12] 1815 	clr	c
      000603 9A               [12] 1816 	subb	a,r2
      000604 FE               [12] 1817 	mov	r6,a
      000605 EF               [12] 1818 	mov	a,r7
      000606 9B               [12] 1819 	subb	a,r3
      000607 FF               [12] 1820 	mov	r7,a
      000608 8C*16            [24] 1821 	mov	_drawPixel_PARM_2,r4
      00060A 8D*17            [24] 1822 	mov	(_drawPixel_PARM_2 + 1),r5
      00060C 85*1E*18         [24] 1823 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00060F 85*1F*19         [24] 1824 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000612 8E 82            [24] 1825 	mov	dpl,r6
      000614 8F 83            [24] 1826 	mov	dph,r7
      000616 C0 07            [24] 1827 	push	ar7
      000618 C0 06            [24] 1828 	push	ar6
      00061A C0 05            [24] 1829 	push	ar5
      00061C C0 04            [24] 1830 	push	ar4
      00061E C0 03            [24] 1831 	push	ar3
      000620 C0 02            [24] 1832 	push	ar2
      000622 C0 01            [24] 1833 	push	ar1
      000624 C0 00            [24] 1834 	push	ar0
      000626 12r03r61         [24] 1835 	lcall	_drawPixel
      000629 D0 00            [24] 1836 	pop	ar0
      00062B D0 01            [24] 1837 	pop	ar1
      00062D D0 02            [24] 1838 	pop	ar2
      00062F D0 03            [24] 1839 	pop	ar3
      000631 D0 04            [24] 1840 	pop	ar4
      000633 D0 05            [24] 1841 	pop	ar5
                                   1842 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 + y, y0 - x, color);
      000635 E5*26            [12] 1843 	mov	a,_drawCircle_sloc2_1_0
      000637 C3               [12] 1844 	clr	c
      000638 98               [12] 1845 	subb	a,r0
      000639 FC               [12] 1846 	mov	r4,a
      00063A E5*27            [12] 1847 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00063C 99               [12] 1848 	subb	a,r1
      00063D FD               [12] 1849 	mov	r5,a
      00063E 8C*16            [24] 1850 	mov	_drawPixel_PARM_2,r4
      000640 8D*17            [24] 1851 	mov	(_drawPixel_PARM_2 + 1),r5
      000642 85*1E*18         [24] 1852 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000645 85*1F*19         [24] 1853 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000648 85*2A 82         [24] 1854 	mov	dpl,_drawCircle_sloc4_1_0
      00064B 85*2B 83         [24] 1855 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00064E C0 05            [24] 1856 	push	ar5
      000650 C0 04            [24] 1857 	push	ar4
      000652 C0 03            [24] 1858 	push	ar3
      000654 C0 02            [24] 1859 	push	ar2
      000656 C0 01            [24] 1860 	push	ar1
      000658 C0 00            [24] 1861 	push	ar0
      00065A 12r03r61         [24] 1862 	lcall	_drawPixel
      00065D D0 00            [24] 1863 	pop	ar0
      00065F D0 01            [24] 1864 	pop	ar1
      000661 D0 02            [24] 1865 	pop	ar2
      000663 D0 03            [24] 1866 	pop	ar3
      000665 D0 04            [24] 1867 	pop	ar4
      000667 D0 05            [24] 1868 	pop	ar5
      000669 D0 06            [24] 1869 	pop	ar6
      00066B D0 07            [24] 1870 	pop	ar7
                                   1871 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 - y, y0 - x, color);
      00066D 8C*16            [24] 1872 	mov	_drawPixel_PARM_2,r4
      00066F 8D*17            [24] 1873 	mov	(_drawPixel_PARM_2 + 1),r5
      000671 85*1E*18         [24] 1874 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000674 85*1F*19         [24] 1875 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000677 8E 82            [24] 1876 	mov	dpl,r6
      000679 8F 83            [24] 1877 	mov	dph,r7
      00067B C0 05            [24] 1878 	push	ar5
      00067D C0 04            [24] 1879 	push	ar4
      00067F C0 03            [24] 1880 	push	ar3
      000681 C0 02            [24] 1881 	push	ar2
      000683 C0 01            [24] 1882 	push	ar1
      000685 C0 00            [24] 1883 	push	ar0
      000687 12r03r61         [24] 1884 	lcall	_drawPixel
      00068A D0 00            [24] 1885 	pop	ar0
      00068C D0 01            [24] 1886 	pop	ar1
      00068E D0 02            [24] 1887 	pop	ar2
      000690 D0 03            [24] 1888 	pop	ar3
      000692 D0 04            [24] 1889 	pop	ar4
      000694 D0 05            [24] 1890 	pop	ar5
      000696 D0 05            [24] 1891 	pop	ar5
      000698 D0 04            [24] 1892 	pop	ar4
                                   1893 ;	ecen4330_lcd_v3.c:295: }
      00069A 02r04r6B         [24] 1894 	ljmp	00103$
                                   1895 ;------------------------------------------------------------
                                   1896 ;Allocation info for local variables in function 'testCircles'
                                   1897 ;------------------------------------------------------------
                                   1898 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1899 ;radius                    Allocated with name '_testCircles_radius_65536_109'
                                   1900 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1901 ;x                         Allocated with name '_testCircles_x_65536_110'
                                   1902 ;y                         Allocated with name '_testCircles_y_65536_110'
                                   1903 ;r2                        Allocated with name '_testCircles_r2_65536_110'
                                   1904 ;w                         Allocated with name '_testCircles_w_65536_110'
                                   1905 ;h                         Allocated with name '_testCircles_h_65536_110'
                                   1906 ;------------------------------------------------------------
                                   1907 ;	ecen4330_lcd_v3.c:303: void testCircles (uint8_t radius, uint16_t color) {
                                   1908 ;	-----------------------------------------
                                   1909 ;	 function testCircles
                                   1910 ;	-----------------------------------------
      00069D                       1911 _testCircles:
      00069D 85 82*2E         [24] 1912 	mov	_testCircles_radius_65536_109,dpl
                                   1913 ;	ecen4330_lcd_v3.c:304: __xdata int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006A0 AD*2E            [24] 1914 	mov	r5,_testCircles_radius_65536_109
      0006A2 7E 00            [12] 1915 	mov	r6,#0x00
      0006A4 ED               [12] 1916 	mov	a,r5
      0006A5 2D               [12] 1917 	add	a,r5
      0006A6 FB               [12] 1918 	mov	r3,a
      0006A7 EE               [12] 1919 	mov	a,r6
      0006A8 33               [12] 1920 	rlc	a
      0006A9 FC               [12] 1921 	mov	r4,a
      0006AA 90r00r00         [24] 1922 	mov	dptr,#__width
      0006AD E0               [24] 1923 	movx	a,@dptr
      0006AE F9               [12] 1924 	mov	r1,a
      0006AF A3               [24] 1925 	inc	dptr
      0006B0 E0               [24] 1926 	movx	a,@dptr
      0006B1 FA               [12] 1927 	mov	r2,a
      0006B2 ED               [12] 1928 	mov	a,r5
      0006B3 29               [12] 1929 	add	a,r1
      0006B4 F9               [12] 1930 	mov	r1,a
      0006B5 EE               [12] 1931 	mov	a,r6
      0006B6 3A               [12] 1932 	addc	a,r2
      0006B7 FA               [12] 1933 	mov	r2,a
      0006B8 90r00r02         [24] 1934 	mov	dptr,#__height
      0006BB E0               [24] 1935 	movx	a,@dptr
      0006BC FF               [12] 1936 	mov	r7,a
      0006BD A3               [24] 1937 	inc	dptr
      0006BE E0               [24] 1938 	movx	a,@dptr
      0006BF F8               [12] 1939 	mov	r0,a
      0006C0 ED               [12] 1940 	mov	a,r5
      0006C1 2F               [12] 1941 	add	a,r7
      0006C2 FF               [12] 1942 	mov	r7,a
      0006C3 EE               [12] 1943 	mov	a,r6
      0006C4 38               [12] 1944 	addc	a,r0
      0006C5 FE               [12] 1945 	mov	r6,a
                                   1946 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      0006C6 90r00r06         [24] 1947 	mov	dptr,#_testCircles_x_65536_110
      0006C9 E4               [12] 1948 	clr	a
      0006CA F0               [24] 1949 	movx	@dptr,a
      0006CB A3               [24] 1950 	inc	dptr
      0006CC F0               [24] 1951 	movx	@dptr,a
      0006CD                       1952 00107$:
      0006CD 90r00r06         [24] 1953 	mov	dptr,#_testCircles_x_65536_110
      0006D0 E0               [24] 1954 	movx	a,@dptr
      0006D1 F8               [12] 1955 	mov	r0,a
      0006D2 A3               [24] 1956 	inc	dptr
      0006D3 E0               [24] 1957 	movx	a,@dptr
      0006D4 FD               [12] 1958 	mov	r5,a
      0006D5 C3               [12] 1959 	clr	c
      0006D6 E8               [12] 1960 	mov	a,r0
      0006D7 99               [12] 1961 	subb	a,r1
      0006D8 ED               [12] 1962 	mov	a,r5
      0006D9 64 80            [12] 1963 	xrl	a,#0x80
      0006DB 8A F0            [24] 1964 	mov	b,r2
      0006DD 63 F0 80         [24] 1965 	xrl	b,#0x80
      0006E0 95 F0            [12] 1966 	subb	a,b
      0006E2 40 01            [24] 1967 	jc	00127$
      0006E4 22               [24] 1968 	ret
      0006E5                       1969 00127$:
                                   1970 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      0006E5 90r00r08         [24] 1971 	mov	dptr,#_testCircles_y_65536_110
      0006E8 E4               [12] 1972 	clr	a
      0006E9 F0               [24] 1973 	movx	@dptr,a
      0006EA A3               [24] 1974 	inc	dptr
      0006EB F0               [24] 1975 	movx	@dptr,a
      0006EC                       1976 00104$:
      0006EC 90r00r08         [24] 1977 	mov	dptr,#_testCircles_y_65536_110
      0006EF E0               [24] 1978 	movx	a,@dptr
      0006F0 F5*2F            [12] 1979 	mov	_testCircles_sloc0_1_0,a
      0006F2 A3               [24] 1980 	inc	dptr
      0006F3 E0               [24] 1981 	movx	a,@dptr
      0006F4 F5*30            [12] 1982 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006F6 C3               [12] 1983 	clr	c
      0006F7 E5*2F            [12] 1984 	mov	a,_testCircles_sloc0_1_0
      0006F9 9F               [12] 1985 	subb	a,r7
      0006FA E5*30            [12] 1986 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006FC 64 80            [12] 1987 	xrl	a,#0x80
      0006FE 8E F0            [24] 1988 	mov	b,r6
      000700 63 F0 80         [24] 1989 	xrl	b,#0x80
      000703 95 F0            [12] 1990 	subb	a,b
      000705 50 47            [24] 1991 	jnc	00108$
                                   1992 ;	ecen4330_lcd_v3.c:308: drawCircle(x, y, radius, color);
      000707 88 82            [24] 1993 	mov	dpl,r0
      000709 8D 83            [24] 1994 	mov	dph,r5
      00070B 85*2F*1A         [24] 1995 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      00070E 85*30*1B         [24] 1996 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000711 85*2E*1C         [24] 1997 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_109
      000714 75*1D 00         [24] 1998 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000717 85*2C*1E         [24] 1999 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00071A 85*2D*1F         [24] 2000 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      00071D C0 07            [24] 2001 	push	ar7
      00071F C0 06            [24] 2002 	push	ar6
      000721 C0 05            [24] 2003 	push	ar5
      000723 C0 04            [24] 2004 	push	ar4
      000725 C0 03            [24] 2005 	push	ar3
      000727 C0 02            [24] 2006 	push	ar2
      000729 C0 01            [24] 2007 	push	ar1
      00072B C0 00            [24] 2008 	push	ar0
      00072D 12r03rB8         [24] 2009 	lcall	_drawCircle
      000730 D0 00            [24] 2010 	pop	ar0
      000732 D0 01            [24] 2011 	pop	ar1
      000734 D0 02            [24] 2012 	pop	ar2
      000736 D0 03            [24] 2013 	pop	ar3
      000738 D0 04            [24] 2014 	pop	ar4
      00073A D0 05            [24] 2015 	pop	ar5
      00073C D0 06            [24] 2016 	pop	ar6
      00073E D0 07            [24] 2017 	pop	ar7
                                   2018 ;	ecen4330_lcd_v3.c:307: for(y=0; y<h; y+=r2) {
      000740 90r00r08         [24] 2019 	mov	dptr,#_testCircles_y_65536_110
      000743 EB               [12] 2020 	mov	a,r3
      000744 25*2F            [12] 2021 	add	a,_testCircles_sloc0_1_0
      000746 F0               [24] 2022 	movx	@dptr,a
      000747 EC               [12] 2023 	mov	a,r4
      000748 35*30            [12] 2024 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00074A A3               [24] 2025 	inc	dptr
      00074B F0               [24] 2026 	movx	@dptr,a
      00074C 80 9E            [24] 2027 	sjmp	00104$
      00074E                       2028 00108$:
                                   2029 ;	ecen4330_lcd_v3.c:306: for(x=0; x<w; x+=r2) {
      00074E 90r00r06         [24] 2030 	mov	dptr,#_testCircles_x_65536_110
      000751 E0               [24] 2031 	movx	a,@dptr
      000752 F8               [12] 2032 	mov	r0,a
      000753 A3               [24] 2033 	inc	dptr
      000754 E0               [24] 2034 	movx	a,@dptr
      000755 FD               [12] 2035 	mov	r5,a
      000756 90r00r06         [24] 2036 	mov	dptr,#_testCircles_x_65536_110
      000759 EB               [12] 2037 	mov	a,r3
      00075A 28               [12] 2038 	add	a,r0
      00075B F0               [24] 2039 	movx	@dptr,a
      00075C EC               [12] 2040 	mov	a,r4
      00075D 3D               [12] 2041 	addc	a,r5
      00075E A3               [24] 2042 	inc	dptr
      00075F F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	ecen4330_lcd_v3.c:311: }
      000760 02r06rCD         [24] 2045 	ljmp	00107$
                                   2046 ;------------------------------------------------------------
                                   2047 ;Allocation info for local variables in function 'fillRect'
                                   2048 ;------------------------------------------------------------
                                   2049 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2050 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2051 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2052 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2053 ;x                         Allocated to registers 
                                   2054 ;------------------------------------------------------------
                                   2055 ;	ecen4330_lcd_v3.c:313: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function fillRect
                                   2058 ;	-----------------------------------------
      000763                       2059 _fillRect:
      000763 AE 82            [24] 2060 	mov	r6,dpl
      000765 AF 83            [24] 2061 	mov	r7,dph
                                   2062 ;	ecen4330_lcd_v3.c:314: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000767 8E 04            [24] 2063 	mov	ar4,r6
      000769 8F 05            [24] 2064 	mov	ar5,r7
      00076B C3               [12] 2065 	clr	c
      00076C EC               [12] 2066 	mov	a,r4
      00076D 94 F0            [12] 2067 	subb	a,#0xf0
      00076F ED               [12] 2068 	mov	a,r5
      000770 94 00            [12] 2069 	subb	a,#0x00
      000772 50 0D            [24] 2070 	jnc	00101$
      000774 AC*31            [24] 2071 	mov	r4,_fillRect_PARM_2
      000776 AD*32            [24] 2072 	mov	r5,(_fillRect_PARM_2 + 1)
      000778 C3               [12] 2073 	clr	c
      000779 EC               [12] 2074 	mov	a,r4
      00077A 94 40            [12] 2075 	subb	a,#0x40
      00077C ED               [12] 2076 	mov	a,r5
      00077D 94 01            [12] 2077 	subb	a,#0x01
      00077F 40 01            [24] 2078 	jc	00102$
      000781                       2079 00101$:
                                   2080 ;	ecen4330_lcd_v3.c:316: return;
      000781 22               [24] 2081 	ret
      000782                       2082 00102$:
                                   2083 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH)
      000782 E5*33            [12] 2084 	mov	a,_fillRect_PARM_3
      000784 2E               [12] 2085 	add	a,r6
      000785 FC               [12] 2086 	mov	r4,a
      000786 E5*34            [12] 2087 	mov	a,(_fillRect_PARM_3 + 1)
      000788 3F               [12] 2088 	addc	a,r7
      000789 FD               [12] 2089 	mov	r5,a
      00078A 1C               [12] 2090 	dec	r4
      00078B BC FF 01         [24] 2091 	cjne	r4,#0xff,00161$
      00078E 1D               [12] 2092 	dec	r5
      00078F                       2093 00161$:
      00078F C3               [12] 2094 	clr	c
      000790 EC               [12] 2095 	mov	a,r4
      000791 94 F0            [12] 2096 	subb	a,#0xf0
      000793 ED               [12] 2097 	mov	a,r5
      000794 94 00            [12] 2098 	subb	a,#0x00
      000796 40 0A            [24] 2099 	jc	00105$
                                   2100 ;	ecen4330_lcd_v3.c:321: w = TFTWIDTH-x;
      000798 74 F0            [12] 2101 	mov	a,#0xf0
      00079A C3               [12] 2102 	clr	c
      00079B 9E               [12] 2103 	subb	a,r6
      00079C F5*33            [12] 2104 	mov	_fillRect_PARM_3,a
      00079E E4               [12] 2105 	clr	a
      00079F 9F               [12] 2106 	subb	a,r7
      0007A0 F5*34            [12] 2107 	mov	(_fillRect_PARM_3 + 1),a
      0007A2                       2108 00105$:
                                   2109 ;	ecen4330_lcd_v3.c:324: if ((y+h-1) >= TFTHEIGHT)
      0007A2 E5*35            [12] 2110 	mov	a,_fillRect_PARM_4
      0007A4 25*31            [12] 2111 	add	a,_fillRect_PARM_2
      0007A6 FC               [12] 2112 	mov	r4,a
      0007A7 E5*36            [12] 2113 	mov	a,(_fillRect_PARM_4 + 1)
      0007A9 35*32            [12] 2114 	addc	a,(_fillRect_PARM_2 + 1)
      0007AB FD               [12] 2115 	mov	r5,a
      0007AC 1C               [12] 2116 	dec	r4
      0007AD BC FF 01         [24] 2117 	cjne	r4,#0xff,00163$
      0007B0 1D               [12] 2118 	dec	r5
      0007B1                       2119 00163$:
      0007B1 C3               [12] 2120 	clr	c
      0007B2 EC               [12] 2121 	mov	a,r4
      0007B3 94 40            [12] 2122 	subb	a,#0x40
      0007B5 ED               [12] 2123 	mov	a,r5
      0007B6 94 01            [12] 2124 	subb	a,#0x01
      0007B8 40 0D            [24] 2125 	jc	00107$
                                   2126 ;	ecen4330_lcd_v3.c:326: h = TFTHEIGHT-y;
      0007BA 74 40            [12] 2127 	mov	a,#0x40
      0007BC C3               [12] 2128 	clr	c
      0007BD 95*31            [12] 2129 	subb	a,_fillRect_PARM_2
      0007BF F5*35            [12] 2130 	mov	_fillRect_PARM_4,a
      0007C1 74 01            [12] 2131 	mov	a,#0x01
      0007C3 95*32            [12] 2132 	subb	a,(_fillRect_PARM_2 + 1)
      0007C5 F5*36            [12] 2133 	mov	(_fillRect_PARM_4 + 1),a
      0007C7                       2134 00107$:
                                   2135 ;	ecen4330_lcd_v3.c:329: setAddress(x, y, x+w-1, y+h-1);
      0007C7 E5*33            [12] 2136 	mov	a,_fillRect_PARM_3
      0007C9 2E               [12] 2137 	add	a,r6
      0007CA FC               [12] 2138 	mov	r4,a
      0007CB E5*34            [12] 2139 	mov	a,(_fillRect_PARM_3 + 1)
      0007CD 3F               [12] 2140 	addc	a,r7
      0007CE FD               [12] 2141 	mov	r5,a
      0007CF 1C               [12] 2142 	dec	r4
      0007D0 BC FF 01         [24] 2143 	cjne	r4,#0xff,00165$
      0007D3 1D               [12] 2144 	dec	r5
      0007D4                       2145 00165$:
      0007D4 8C*02            [24] 2146 	mov	_setAddress_PARM_3,r4
      0007D6 8D*03            [24] 2147 	mov	(_setAddress_PARM_3 + 1),r5
      0007D8 E5*35            [12] 2148 	mov	a,_fillRect_PARM_4
      0007DA 25*31            [12] 2149 	add	a,_fillRect_PARM_2
      0007DC FC               [12] 2150 	mov	r4,a
      0007DD E5*36            [12] 2151 	mov	a,(_fillRect_PARM_4 + 1)
      0007DF 35*32            [12] 2152 	addc	a,(_fillRect_PARM_2 + 1)
      0007E1 FD               [12] 2153 	mov	r5,a
      0007E2 1C               [12] 2154 	dec	r4
      0007E3 BC FF 01         [24] 2155 	cjne	r4,#0xff,00166$
      0007E6 1D               [12] 2156 	dec	r5
      0007E7                       2157 00166$:
      0007E7 8C*04            [24] 2158 	mov	_setAddress_PARM_4,r4
      0007E9 8D*05            [24] 2159 	mov	(_setAddress_PARM_4 + 1),r5
      0007EB 85*31*00         [24] 2160 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007EE 85*32*01         [24] 2161 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007F1 8E 82            [24] 2162 	mov	dpl,r6
      0007F3 8F 83            [24] 2163 	mov	dph,r7
      0007F5 12r01r76         [24] 2164 	lcall	_setAddress
                                   2165 ;	ecen4330_lcd_v3.c:332: write8Reg(0x2C);
                                   2166 ;	assignBit
      0007F8 C2 B5            [12] 2167 	clr	_P3_5
                                   2168 ;	assignBit
      0007FA D2 B4            [12] 2169 	setb	_P3_4
      0007FC 85*02 82         [24] 2170 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2171 	mov	dph,(_lcd_address + 1)
      000802 74 2C            [12] 2172 	mov	a,#0x2c
      000804 F0               [24] 2173 	movx	@dptr,a
                                   2174 ;	assignBit
      000805 C2 B4            [12] 2175 	clr	_P3_4
                                   2176 ;	ecen4330_lcd_v3.c:333: CD = 1;
                                   2177 ;	assignBit
      000807 D2 B5            [12] 2178 	setb	_P3_5
                                   2179 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      000809 AF*38            [24] 2180 	mov	r7,(_fillRect_PARM_5 + 1)
      00080B AD*35            [24] 2181 	mov	r5,_fillRect_PARM_4
      00080D AE*36            [24] 2182 	mov	r6,(_fillRect_PARM_4 + 1)
      00080F                       2183 00114$:
      00080F ED               [12] 2184 	mov	a,r5
      000810 4E               [12] 2185 	orl	a,r6
      000811 60 30            [24] 2186 	jz	00116$
                                   2187 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000813 AB*33            [24] 2188 	mov	r3,_fillRect_PARM_3
      000815 AC*34            [24] 2189 	mov	r4,(_fillRect_PARM_3 + 1)
      000817                       2190 00111$:
      000817 EB               [12] 2191 	mov	a,r3
      000818 4C               [12] 2192 	orl	a,r4
      000819 60 21            [24] 2193 	jz	00115$
                                   2194 ;	ecen4330_lcd_v3.c:339: write8(color>>8); write8(color);
                                   2195 ;	assignBit
      00081B D2 B4            [12] 2196 	setb	_P3_4
      00081D 85*02 82         [24] 2197 	mov	dpl,_lcd_address
      000820 85*03 83         [24] 2198 	mov	dph,(_lcd_address + 1)
      000823 EF               [12] 2199 	mov	a,r7
      000824 F0               [24] 2200 	movx	@dptr,a
                                   2201 ;	assignBit
      000825 C2 B4            [12] 2202 	clr	_P3_4
                                   2203 ;	assignBit
      000827 D2 B4            [12] 2204 	setb	_P3_4
      000829 85*02 82         [24] 2205 	mov	dpl,_lcd_address
      00082C 85*03 83         [24] 2206 	mov	dph,(_lcd_address + 1)
      00082F E5*37            [12] 2207 	mov	a,_fillRect_PARM_5
      000831 FA               [12] 2208 	mov	r2,a
      000832 F0               [24] 2209 	movx	@dptr,a
                                   2210 ;	assignBit
      000833 C2 B4            [12] 2211 	clr	_P3_4
                                   2212 ;	ecen4330_lcd_v3.c:336: for(x=w; x>0; x--)
      000835 1B               [12] 2213 	dec	r3
      000836 BB FF 01         [24] 2214 	cjne	r3,#0xff,00169$
      000839 1C               [12] 2215 	dec	r4
      00083A                       2216 00169$:
      00083A 80 DB            [24] 2217 	sjmp	00111$
      00083C                       2218 00115$:
                                   2219 ;	ecen4330_lcd_v3.c:334: for(y=h; y>0; y--)
      00083C 1D               [12] 2220 	dec	r5
      00083D BD FF 01         [24] 2221 	cjne	r5,#0xff,00170$
      000840 1E               [12] 2222 	dec	r6
      000841                       2223 00170$:
      000841 80 CC            [24] 2224 	sjmp	00114$
      000843                       2225 00116$:
                                   2226 ;	ecen4330_lcd_v3.c:343: }
      000843 22               [24] 2227 	ret
                                   2228 ;------------------------------------------------------------
                                   2229 ;Allocation info for local variables in function 'fillScreen'
                                   2230 ;------------------------------------------------------------
                                   2231 ;Color                     Allocated to registers r6 r7 
                                   2232 ;len                       Allocated with name '_fillScreen_len_65536_129'
                                   2233 ;blocks                    Allocated with name '_fillScreen_blocks_65536_129'
                                   2234 ;i                         Allocated with name '_fillScreen_i_65536_129'
                                   2235 ;hi                        Allocated with name '_fillScreen_hi_65536_129'
                                   2236 ;lo                        Allocated with name '_fillScreen_lo_65536_129'
                                   2237 ;------------------------------------------------------------
                                   2238 ;	ecen4330_lcd_v3.c:350: void fillScreen (uint16_t Color) {
                                   2239 ;	-----------------------------------------
                                   2240 ;	 function fillScreen
                                   2241 ;	-----------------------------------------
      000844                       2242 _fillScreen:
      000844 AE 82            [24] 2243 	mov	r6,dpl
      000846 AF 83            [24] 2244 	mov	r7,dph
                                   2245 ;	ecen4330_lcd_v3.c:355: __xdata uint8_t  i, hi = Color >> 8,
      000848 8F 05            [24] 2246 	mov	ar5,r7
                                   2247 ;	ecen4330_lcd_v3.c:356: lo = Color;
                                   2248 ;	ecen4330_lcd_v3.c:359: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      00084A E4               [12] 2249 	clr	a
      00084B F5*00            [12] 2250 	mov	_setAddress_PARM_2,a
      00084D F5*01            [12] 2251 	mov	(_setAddress_PARM_2 + 1),a
      00084F 75*02 EF         [24] 2252 	mov	_setAddress_PARM_3,#0xef
                                   2253 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000852 F5*03            [12] 2254 	mov	(_setAddress_PARM_3 + 1),a
      000854 75*04 3F         [24] 2255 	mov	_setAddress_PARM_4,#0x3f
      000857 75*05 01         [24] 2256 	mov	(_setAddress_PARM_4 + 1),#0x01
      00085A 90 00 00         [24] 2257 	mov	dptr,#0x0000
      00085D C0 06            [24] 2258 	push	ar6
      00085F C0 05            [24] 2259 	push	ar5
      000861 12r01r76         [24] 2260 	lcall	_setAddress
      000864 D0 05            [24] 2261 	pop	ar5
      000866 D0 06            [24] 2262 	pop	ar6
                                   2263 ;	ecen4330_lcd_v3.c:361: write8Reg(0x2C);
                                   2264 ;	assignBit
      000868 C2 B5            [12] 2265 	clr	_P3_5
                                   2266 ;	assignBit
      00086A D2 B4            [12] 2267 	setb	_P3_4
      00086C 85*02 82         [24] 2268 	mov	dpl,_lcd_address
      00086F 85*03 83         [24] 2269 	mov	dph,(_lcd_address + 1)
      000872 74 2C            [12] 2270 	mov	a,#0x2c
      000874 F0               [24] 2271 	movx	@dptr,a
                                   2272 ;	assignBit
      000875 C2 B4            [12] 2273 	clr	_P3_4
                                   2274 ;	ecen4330_lcd_v3.c:362: CD = 1;
                                   2275 ;	assignBit
      000877 D2 B5            [12] 2276 	setb	_P3_5
                                   2277 ;	ecen4330_lcd_v3.c:363: write8(hi); write8(lo);
                                   2278 ;	assignBit
      000879 D2 B4            [12] 2279 	setb	_P3_4
      00087B 85*02 82         [24] 2280 	mov	dpl,_lcd_address
      00087E 85*03 83         [24] 2281 	mov	dph,(_lcd_address + 1)
      000881 ED               [12] 2282 	mov	a,r5
      000882 F0               [24] 2283 	movx	@dptr,a
                                   2284 ;	assignBit
      000883 C2 B4            [12] 2285 	clr	_P3_4
                                   2286 ;	assignBit
      000885 D2 B4            [12] 2287 	setb	_P3_4
      000887 85*02 82         [24] 2288 	mov	dpl,_lcd_address
      00088A 85*03 83         [24] 2289 	mov	dph,(_lcd_address + 1)
      00088D EE               [12] 2290 	mov	a,r6
      00088E F0               [24] 2291 	movx	@dptr,a
                                   2292 ;	assignBit
      00088F C2 B4            [12] 2293 	clr	_P3_4
                                   2294 ;	ecen4330_lcd_v3.c:366: while (blocks--) {
      000891 7C B0            [12] 2295 	mov	r4,#0xb0
      000893 7F 04            [12] 2296 	mov	r7,#0x04
      000895                       2297 00104$:
      000895 8C 02            [24] 2298 	mov	ar2,r4
      000897 8F 03            [24] 2299 	mov	ar3,r7
      000899 1C               [12] 2300 	dec	r4
      00089A BC FF 01         [24] 2301 	cjne	r4,#0xff,00140$
      00089D 1F               [12] 2302 	dec	r7
      00089E                       2303 00140$:
      00089E EA               [12] 2304 	mov	a,r2
      00089F 4B               [12] 2305 	orl	a,r3
      0008A0 60 66            [24] 2306 	jz	00106$
                                   2307 ;	ecen4330_lcd_v3.c:368: do {
      0008A2 7B 10            [12] 2308 	mov	r3,#0x10
      0008A4                       2309 00101$:
                                   2310 ;	ecen4330_lcd_v3.c:370: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2311 ;	assignBit
      0008A4 D2 B4            [12] 2312 	setb	_P3_4
      0008A6 85*02 82         [24] 2313 	mov	dpl,_lcd_address
      0008A9 85*03 83         [24] 2314 	mov	dph,(_lcd_address + 1)
      0008AC ED               [12] 2315 	mov	a,r5
      0008AD F0               [24] 2316 	movx	@dptr,a
                                   2317 ;	assignBit
      0008AE C2 B4            [12] 2318 	clr	_P3_4
                                   2319 ;	assignBit
      0008B0 D2 B4            [12] 2320 	setb	_P3_4
      0008B2 85*02 82         [24] 2321 	mov	dpl,_lcd_address
      0008B5 85*03 83         [24] 2322 	mov	dph,(_lcd_address + 1)
      0008B8 EE               [12] 2323 	mov	a,r6
      0008B9 F0               [24] 2324 	movx	@dptr,a
                                   2325 ;	assignBit
      0008BA C2 B4            [12] 2326 	clr	_P3_4
                                   2327 ;	assignBit
      0008BC D2 B4            [12] 2328 	setb	_P3_4
      0008BE 85*02 82         [24] 2329 	mov	dpl,_lcd_address
      0008C1 85*03 83         [24] 2330 	mov	dph,(_lcd_address + 1)
      0008C4 ED               [12] 2331 	mov	a,r5
      0008C5 F0               [24] 2332 	movx	@dptr,a
                                   2333 ;	assignBit
      0008C6 C2 B4            [12] 2334 	clr	_P3_4
                                   2335 ;	assignBit
      0008C8 D2 B4            [12] 2336 	setb	_P3_4
      0008CA 85*02 82         [24] 2337 	mov	dpl,_lcd_address
      0008CD 85*03 83         [24] 2338 	mov	dph,(_lcd_address + 1)
      0008D0 EE               [12] 2339 	mov	a,r6
      0008D1 F0               [24] 2340 	movx	@dptr,a
                                   2341 ;	assignBit
      0008D2 C2 B4            [12] 2342 	clr	_P3_4
                                   2343 ;	ecen4330_lcd_v3.c:371: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2344 ;	assignBit
      0008D4 D2 B4            [12] 2345 	setb	_P3_4
      0008D6 85*02 82         [24] 2346 	mov	dpl,_lcd_address
      0008D9 85*03 83         [24] 2347 	mov	dph,(_lcd_address + 1)
      0008DC ED               [12] 2348 	mov	a,r5
      0008DD F0               [24] 2349 	movx	@dptr,a
                                   2350 ;	assignBit
      0008DE C2 B4            [12] 2351 	clr	_P3_4
                                   2352 ;	assignBit
      0008E0 D2 B4            [12] 2353 	setb	_P3_4
      0008E2 85*02 82         [24] 2354 	mov	dpl,_lcd_address
      0008E5 85*03 83         [24] 2355 	mov	dph,(_lcd_address + 1)
      0008E8 EE               [12] 2356 	mov	a,r6
      0008E9 F0               [24] 2357 	movx	@dptr,a
                                   2358 ;	assignBit
      0008EA C2 B4            [12] 2359 	clr	_P3_4
                                   2360 ;	assignBit
      0008EC D2 B4            [12] 2361 	setb	_P3_4
      0008EE 85*02 82         [24] 2362 	mov	dpl,_lcd_address
      0008F1 85*03 83         [24] 2363 	mov	dph,(_lcd_address + 1)
      0008F4 ED               [12] 2364 	mov	a,r5
      0008F5 F0               [24] 2365 	movx	@dptr,a
                                   2366 ;	assignBit
      0008F6 C2 B4            [12] 2367 	clr	_P3_4
                                   2368 ;	assignBit
      0008F8 D2 B4            [12] 2369 	setb	_P3_4
      0008FA 85*02 82         [24] 2370 	mov	dpl,_lcd_address
      0008FD 85*03 83         [24] 2371 	mov	dph,(_lcd_address + 1)
      000900 EE               [12] 2372 	mov	a,r6
      000901 F0               [24] 2373 	movx	@dptr,a
                                   2374 ;	assignBit
      000902 C2 B4            [12] 2375 	clr	_P3_4
                                   2376 ;	ecen4330_lcd_v3.c:372: } while(--i);
      000904 DB 9E            [24] 2377 	djnz	r3,00101$
      000906 80 8D            [24] 2378 	sjmp	00104$
      000908                       2379 00106$:
                                   2380 ;	ecen4330_lcd_v3.c:374: for (i = (char)len & 63; i--; ) {
      000908 7F 3F            [12] 2381 	mov	r7,#0x3f
      00090A                       2382 00109$:
      00090A 8F 04            [24] 2383 	mov	ar4,r7
      00090C 1F               [12] 2384 	dec	r7
      00090D EC               [12] 2385 	mov	a,r4
      00090E 60 1A            [24] 2386 	jz	00111$
                                   2387 ;	ecen4330_lcd_v3.c:376: write8(hi); write8(lo);
                                   2388 ;	assignBit
      000910 D2 B4            [12] 2389 	setb	_P3_4
      000912 85*02 82         [24] 2390 	mov	dpl,_lcd_address
      000915 85*03 83         [24] 2391 	mov	dph,(_lcd_address + 1)
      000918 ED               [12] 2392 	mov	a,r5
      000919 F0               [24] 2393 	movx	@dptr,a
                                   2394 ;	assignBit
      00091A C2 B4            [12] 2395 	clr	_P3_4
                                   2396 ;	assignBit
      00091C D2 B4            [12] 2397 	setb	_P3_4
      00091E 85*02 82         [24] 2398 	mov	dpl,_lcd_address
      000921 85*03 83         [24] 2399 	mov	dph,(_lcd_address + 1)
      000924 EE               [12] 2400 	mov	a,r6
      000925 F0               [24] 2401 	movx	@dptr,a
                                   2402 ;	assignBit
      000926 C2 B4            [12] 2403 	clr	_P3_4
      000928 80 E0            [24] 2404 	sjmp	00109$
      00092A                       2405 00111$:
                                   2406 ;	ecen4330_lcd_v3.c:379: }
      00092A 22               [24] 2407 	ret
                                   2408 ;------------------------------------------------------------
                                   2409 ;Allocation info for local variables in function 'drawChar'
                                   2410 ;------------------------------------------------------------
                                   2411 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2412 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2413 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2414 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2415 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2416 ;x                         Allocated to registers r6 r7 
                                   2417 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2418 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2419 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2420 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2421 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2422 ;i                         Allocated with name '_drawChar_i_65537_151'
                                   2423 ;line                      Allocated with name '_drawChar_line_196609_153'
                                   2424 ;j                         Allocated with name '_drawChar_j_196610_156'
                                   2425 ;------------------------------------------------------------
                                   2426 ;	ecen4330_lcd_v3.c:390: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2427 ;	-----------------------------------------
                                   2428 ;	 function drawChar
                                   2429 ;	-----------------------------------------
      00092B                       2430 _drawChar:
      00092B AE 82            [24] 2431 	mov	r6,dpl
      00092D AF 83            [24] 2432 	mov	r7,dph
                                   2433 ;	ecen4330_lcd_v3.c:391: if ((x >=TFTWIDTH) ||
      00092F C3               [12] 2434 	clr	c
      000930 EE               [12] 2435 	mov	a,r6
      000931 94 F0            [12] 2436 	subb	a,#0xf0
      000933 EF               [12] 2437 	mov	a,r7
      000934 64 80            [12] 2438 	xrl	a,#0x80
      000936 94 80            [12] 2439 	subb	a,#0x80
      000938 50 67            [24] 2440 	jnc	00101$
                                   2441 ;	ecen4330_lcd_v3.c:392: (y >=TFTHEIGHT)           ||
      00093A AC*39            [24] 2442 	mov	r4,_drawChar_PARM_2
      00093C AD*3A            [24] 2443 	mov	r5,(_drawChar_PARM_2 + 1)
      00093E C3               [12] 2444 	clr	c
      00093F EC               [12] 2445 	mov	a,r4
      000940 94 40            [12] 2446 	subb	a,#0x40
      000942 ED               [12] 2447 	mov	a,r5
      000943 64 80            [12] 2448 	xrl	a,#0x80
      000945 94 81            [12] 2449 	subb	a,#0x81
      000947 50 58            [24] 2450 	jnc	00101$
                                   2451 ;	ecen4330_lcd_v3.c:393: ((x + 6 * size - 1) < 0) ||
      000949 AA*40            [24] 2452 	mov	r2,_drawChar_PARM_6
      00094B 7B 00            [12] 2453 	mov	r3,#0x00
      00094D 8A*00            [24] 2454 	mov	__mulint_PARM_2,r2
      00094F 8B*01            [24] 2455 	mov	(__mulint_PARM_2 + 1),r3
      000951 90 00 06         [24] 2456 	mov	dptr,#0x0006
      000954 C0 07            [24] 2457 	push	ar7
      000956 C0 06            [24] 2458 	push	ar6
      000958 C0 05            [24] 2459 	push	ar5
      00095A C0 04            [24] 2460 	push	ar4
      00095C C0 03            [24] 2461 	push	ar3
      00095E C0 02            [24] 2462 	push	ar2
      000960 12r00r00         [24] 2463 	lcall	__mulint
      000963 A8 82            [24] 2464 	mov	r0,dpl
      000965 A9 83            [24] 2465 	mov	r1,dph
      000967 D0 02            [24] 2466 	pop	ar2
      000969 D0 03            [24] 2467 	pop	ar3
      00096B D0 04            [24] 2468 	pop	ar4
      00096D D0 05            [24] 2469 	pop	ar5
      00096F D0 06            [24] 2470 	pop	ar6
      000971 D0 07            [24] 2471 	pop	ar7
      000973 E8               [12] 2472 	mov	a,r0
      000974 2E               [12] 2473 	add	a,r6
      000975 F8               [12] 2474 	mov	r0,a
      000976 E9               [12] 2475 	mov	a,r1
      000977 3F               [12] 2476 	addc	a,r7
      000978 F9               [12] 2477 	mov	r1,a
      000979 18               [12] 2478 	dec	r0
      00097A B8 FF 01         [24] 2479 	cjne	r0,#0xff,00176$
      00097D 19               [12] 2480 	dec	r1
      00097E                       2481 00176$:
      00097E E9               [12] 2482 	mov	a,r1
      00097F 20 E7 1F         [24] 2483 	jb	acc.7,00101$
                                   2484 ;	ecen4330_lcd_v3.c:394: ((y + 8 * size - 1) < 0))
      000982 EB               [12] 2485 	mov	a,r3
      000983 C4               [12] 2486 	swap	a
      000984 03               [12] 2487 	rr	a
      000985 54 F8            [12] 2488 	anl	a,#0xf8
      000987 CA               [12] 2489 	xch	a,r2
      000988 C4               [12] 2490 	swap	a
      000989 03               [12] 2491 	rr	a
      00098A CA               [12] 2492 	xch	a,r2
      00098B 6A               [12] 2493 	xrl	a,r2
      00098C CA               [12] 2494 	xch	a,r2
      00098D 54 F8            [12] 2495 	anl	a,#0xf8
      00098F CA               [12] 2496 	xch	a,r2
      000990 6A               [12] 2497 	xrl	a,r2
      000991 FB               [12] 2498 	mov	r3,a
      000992 EA               [12] 2499 	mov	a,r2
      000993 2C               [12] 2500 	add	a,r4
      000994 FA               [12] 2501 	mov	r2,a
      000995 EB               [12] 2502 	mov	a,r3
      000996 3D               [12] 2503 	addc	a,r5
      000997 FB               [12] 2504 	mov	r3,a
      000998 1A               [12] 2505 	dec	r2
      000999 BA FF 01         [24] 2506 	cjne	r2,#0xff,00178$
      00099C 1B               [12] 2507 	dec	r3
      00099D                       2508 00178$:
      00099D EB               [12] 2509 	mov	a,r3
      00099E 30 E7 01         [24] 2510 	jnb	acc.7,00138$
      0009A1                       2511 00101$:
                                   2512 ;	ecen4330_lcd_v3.c:396: return;
      0009A1 22               [24] 2513 	ret
                                   2514 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      0009A2                       2515 00138$:
      0009A2 74 01            [12] 2516 	mov	a,#0x01
      0009A4 B5*40 04         [24] 2517 	cjne	a,_drawChar_PARM_6,00180$
      0009A7 74 01            [12] 2518 	mov	a,#0x01
      0009A9 80 01            [24] 2519 	sjmp	00181$
      0009AB                       2520 00180$:
      0009AB E4               [12] 2521 	clr	a
      0009AC                       2522 00181$:
      0009AC FB               [12] 2523 	mov	r3,a
      0009AD 8B*47            [24] 2524 	mov	_drawChar_sloc5_1_0,r3
      0009AF E5*3C            [12] 2525 	mov	a,_drawChar_PARM_4
      0009B1 B5*3E 08         [24] 2526 	cjne	a,_drawChar_PARM_5,00182$
      0009B4 E5*3D            [12] 2527 	mov	a,(_drawChar_PARM_4 + 1)
      0009B6 B5*3F 03         [24] 2528 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009B9 D3               [12] 2529 	setb	c
      0009BA 80 01            [24] 2530 	sjmp	00183$
      0009BC                       2531 00182$:
      0009BC C3               [12] 2532 	clr	c
      0009BD                       2533 00183$:
      0009BD 92*00            [24] 2534 	mov	_drawChar_sloc0_1_0,c
      0009BF 79 00            [12] 2535 	mov	r1,#0x00
      0009C1                       2536 00124$:
                                   2537 ;	ecen4330_lcd_v3.c:405: if (i == 5)
      0009C1 B9 05 07         [24] 2538 	cjne	r1,#0x05,00107$
                                   2539 ;	ecen4330_lcd_v3.c:407: line = 0x0;
      0009C4 90r00r0A         [24] 2540 	mov	dptr,#_drawChar_line_196609_153
      0009C7 E4               [12] 2541 	clr	a
      0009C8 F0               [24] 2542 	movx	@dptr,a
      0009C9 80 49            [24] 2543 	sjmp	00136$
      0009CB                       2544 00107$:
                                   2545 ;	ecen4330_lcd_v3.c:411: line = pgm_read_byte(font+(c*5)+i);
      0009CB 85*3B*00         [24] 2546 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009CE 75*01 00         [24] 2547 	mov	(__mulint_PARM_2 + 1),#0x00
      0009D1 90 00 05         [24] 2548 	mov	dptr,#0x0005
      0009D4 C0 07            [24] 2549 	push	ar7
      0009D6 C0 06            [24] 2550 	push	ar6
      0009D8 C0 05            [24] 2551 	push	ar5
      0009DA C0 04            [24] 2552 	push	ar4
      0009DC C0 03            [24] 2553 	push	ar3
      0009DE C0 01            [24] 2554 	push	ar1
      0009E0 12r00r00         [24] 2555 	lcall	__mulint
      0009E3 A8 82            [24] 2556 	mov	r0,dpl
      0009E5 AA 83            [24] 2557 	mov	r2,dph
      0009E7 D0 01            [24] 2558 	pop	ar1
      0009E9 D0 03            [24] 2559 	pop	ar3
      0009EB D0 04            [24] 2560 	pop	ar4
      0009ED D0 05            [24] 2561 	pop	ar5
      0009EF D0 06            [24] 2562 	pop	ar6
      0009F1 D0 07            [24] 2563 	pop	ar7
      0009F3 E8               [12] 2564 	mov	a,r0
      0009F4 24r00            [12] 2565 	add	a,#_font
      0009F6 F5*41            [12] 2566 	mov	_drawChar_sloc1_1_0,a
      0009F8 EA               [12] 2567 	mov	a,r2
      0009F9 34s00            [12] 2568 	addc	a,#(_font >> 8)
      0009FB F5*42            [12] 2569 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009FD E9               [12] 2570 	mov	a,r1
      0009FE F8               [12] 2571 	mov	r0,a
      0009FF 33               [12] 2572 	rlc	a
      000A00 95 E0            [12] 2573 	subb	a,acc
      000A02 FA               [12] 2574 	mov	r2,a
      000A03 E8               [12] 2575 	mov	a,r0
      000A04 25*41            [12] 2576 	add	a,_drawChar_sloc1_1_0
      000A06 F5 82            [12] 2577 	mov	dpl,a
      000A08 EA               [12] 2578 	mov	a,r2
      000A09 35*42            [12] 2579 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A0B F5 83            [12] 2580 	mov	dph,a
      000A0D E4               [12] 2581 	clr	a
      000A0E 93               [24] 2582 	movc	a,@a+dptr
      000A0F FA               [12] 2583 	mov	r2,a
      000A10 90r00r0A         [24] 2584 	mov	dptr,#_drawChar_line_196609_153
      000A13 F0               [24] 2585 	movx	@dptr,a
                                   2586 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
                                   2587 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000A14                       2588 00136$:
      000A14 C2 D5            [12] 2589 	clr	F0
      000A16 85*40 F0         [24] 2590 	mov	b,_drawChar_PARM_6
      000A19 E9               [12] 2591 	mov	a,r1
      000A1A 30 E7 04         [24] 2592 	jnb	acc.7,00186$
      000A1D B2 D5            [12] 2593 	cpl	F0
      000A1F F4               [12] 2594 	cpl	a
      000A20 04               [12] 2595 	inc	a
      000A21                       2596 00186$:
      000A21 A4               [48] 2597 	mul	ab
      000A22 30 D5 0A         [24] 2598 	jnb	F0,00187$
      000A25 F4               [12] 2599 	cpl	a
      000A26 24 01            [12] 2600 	add	a,#0x01
      000A28 C5 F0            [12] 2601 	xch	a,b
      000A2A F4               [12] 2602 	cpl	a
      000A2B 34 00            [12] 2603 	addc	a,#0x00
      000A2D C5 F0            [12] 2604 	xch	a,b
      000A2F                       2605 00187$:
      000A2F 2E               [12] 2606 	add	a,r6
      000A30 F5*41            [12] 2607 	mov	_drawChar_sloc1_1_0,a
      000A32 EF               [12] 2608 	mov	a,r7
      000A33 35 F0            [12] 2609 	addc	a,b
      000A35 F5*42            [12] 2610 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A37 89 00            [24] 2611 	mov	ar0,r1
      000A39 85*41*43         [24] 2612 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A3C 85*42*44         [24] 2613 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A3F 89*45            [24] 2614 	mov	_drawChar_sloc3_1_0,r1
      000A41 75*46 00         [24] 2615 	mov	_drawChar_sloc4_1_0,#0x00
      000A44                       2616 00122$:
                                   2617 ;	ecen4330_lcd_v3.c:418: if (line & 0x1)
      000A44 90r00r0A         [24] 2618 	mov	dptr,#_drawChar_line_196609_153
      000A47 E0               [24] 2619 	movx	a,@dptr
      000A48 20 E0 03         [24] 2620 	jb	acc.0,00188$
      000A4B 02r0Br03         [24] 2621 	ljmp	00118$
      000A4E                       2622 00188$:
                                   2623 ;	ecen4330_lcd_v3.c:420: if (size == 1)
      000A4E EB               [12] 2624 	mov	a,r3
      000A4F 60 4E            [24] 2625 	jz	00110$
                                   2626 ;	ecen4330_lcd_v3.c:422: drawPixel(x+i, y+j, color);
      000A51 C0 00            [24] 2627 	push	ar0
      000A53 E5*45            [12] 2628 	mov	a,_drawChar_sloc3_1_0
      000A55 F8               [12] 2629 	mov	r0,a
      000A56 33               [12] 2630 	rlc	a
      000A57 95 E0            [12] 2631 	subb	a,acc
      000A59 FA               [12] 2632 	mov	r2,a
      000A5A E8               [12] 2633 	mov	a,r0
      000A5B 2E               [12] 2634 	add	a,r6
      000A5C F8               [12] 2635 	mov	r0,a
      000A5D EA               [12] 2636 	mov	a,r2
      000A5E 3F               [12] 2637 	addc	a,r7
      000A5F FA               [12] 2638 	mov	r2,a
      000A60 88 82            [24] 2639 	mov	dpl,r0
      000A62 8A 83            [24] 2640 	mov	dph,r2
      000A64 E5*46            [12] 2641 	mov	a,_drawChar_sloc4_1_0
      000A66 F8               [12] 2642 	mov	r0,a
      000A67 33               [12] 2643 	rlc	a
      000A68 95 E0            [12] 2644 	subb	a,acc
      000A6A FA               [12] 2645 	mov	r2,a
      000A6B E8               [12] 2646 	mov	a,r0
      000A6C 2C               [12] 2647 	add	a,r4
      000A6D F8               [12] 2648 	mov	r0,a
      000A6E EA               [12] 2649 	mov	a,r2
      000A6F 3D               [12] 2650 	addc	a,r5
      000A70 FA               [12] 2651 	mov	r2,a
      000A71 88*16            [24] 2652 	mov	_drawPixel_PARM_2,r0
      000A73 8A*17            [24] 2653 	mov	(_drawPixel_PARM_2 + 1),r2
      000A75 85*3C*18         [24] 2654 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A78 85*3D*19         [24] 2655 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A7B C0 07            [24] 2656 	push	ar7
      000A7D C0 06            [24] 2657 	push	ar6
      000A7F C0 05            [24] 2658 	push	ar5
      000A81 C0 04            [24] 2659 	push	ar4
      000A83 C0 03            [24] 2660 	push	ar3
      000A85 C0 01            [24] 2661 	push	ar1
      000A87 C0 00            [24] 2662 	push	ar0
      000A89 12r03r61         [24] 2663 	lcall	_drawPixel
      000A8C D0 00            [24] 2664 	pop	ar0
      000A8E D0 01            [24] 2665 	pop	ar1
      000A90 D0 03            [24] 2666 	pop	ar3
      000A92 D0 04            [24] 2667 	pop	ar4
      000A94 D0 05            [24] 2668 	pop	ar5
      000A96 D0 06            [24] 2669 	pop	ar6
      000A98 D0 07            [24] 2670 	pop	ar7
      000A9A D0 00            [24] 2671 	pop	ar0
      000A9C 02r0BrBA         [24] 2672 	ljmp	00119$
      000A9F                       2673 00110$:
                                   2674 ;	ecen4330_lcd_v3.c:425: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A9F C0 00            [24] 2675 	push	ar0
      000AA1 85*43 82         [24] 2676 	mov	dpl,_drawChar_sloc2_1_0
      000AA4 85*44 83         [24] 2677 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000AA7 C2 D5            [12] 2678 	clr	F0
      000AA9 85*40 F0         [24] 2679 	mov	b,_drawChar_PARM_6
      000AAC E5*46            [12] 2680 	mov	a,_drawChar_sloc4_1_0
      000AAE 30 E7 04         [24] 2681 	jnb	acc.7,00190$
      000AB1 B2 D5            [12] 2682 	cpl	F0
      000AB3 F4               [12] 2683 	cpl	a
      000AB4 04               [12] 2684 	inc	a
      000AB5                       2685 00190$:
      000AB5 A4               [48] 2686 	mul	ab
      000AB6 30 D5 0A         [24] 2687 	jnb	F0,00191$
      000AB9 F4               [12] 2688 	cpl	a
      000ABA 24 01            [12] 2689 	add	a,#0x01
      000ABC C5 F0            [12] 2690 	xch	a,b
      000ABE F4               [12] 2691 	cpl	a
      000ABF 34 00            [12] 2692 	addc	a,#0x00
      000AC1 C5 F0            [12] 2693 	xch	a,b
      000AC3                       2694 00191$:
      000AC3 2C               [12] 2695 	add	a,r4
      000AC4 F8               [12] 2696 	mov	r0,a
      000AC5 ED               [12] 2697 	mov	a,r5
      000AC6 35 F0            [12] 2698 	addc	a,b
      000AC8 FA               [12] 2699 	mov	r2,a
      000AC9 88*31            [24] 2700 	mov	_fillRect_PARM_2,r0
      000ACB 8A*32            [24] 2701 	mov	(_fillRect_PARM_2 + 1),r2
      000ACD A8*40            [24] 2702 	mov	r0,_drawChar_PARM_6
      000ACF 7A 00            [12] 2703 	mov	r2,#0x00
      000AD1 88*33            [24] 2704 	mov	_fillRect_PARM_3,r0
      000AD3 8A*34            [24] 2705 	mov	(_fillRect_PARM_3 + 1),r2
      000AD5 88*35            [24] 2706 	mov	_fillRect_PARM_4,r0
      000AD7 8A*36            [24] 2707 	mov	(_fillRect_PARM_4 + 1),r2
      000AD9 85*3C*37         [24] 2708 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000ADC 85*3D*38         [24] 2709 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000ADF C0 07            [24] 2710 	push	ar7
      000AE1 C0 06            [24] 2711 	push	ar6
      000AE3 C0 05            [24] 2712 	push	ar5
      000AE5 C0 04            [24] 2713 	push	ar4
      000AE7 C0 03            [24] 2714 	push	ar3
      000AE9 C0 01            [24] 2715 	push	ar1
      000AEB C0 00            [24] 2716 	push	ar0
      000AED 12r07r63         [24] 2717 	lcall	_fillRect
      000AF0 D0 00            [24] 2718 	pop	ar0
      000AF2 D0 01            [24] 2719 	pop	ar1
      000AF4 D0 03            [24] 2720 	pop	ar3
      000AF6 D0 04            [24] 2721 	pop	ar4
      000AF8 D0 05            [24] 2722 	pop	ar5
      000AFA D0 06            [24] 2723 	pop	ar6
      000AFC D0 07            [24] 2724 	pop	ar7
      000AFE D0 00            [24] 2725 	pop	ar0
      000B00 02r0BrBA         [24] 2726 	ljmp	00119$
      000B03                       2727 00118$:
                                   2728 ;	ecen4330_lcd_v3.c:427: } else if (bg != color)
      000B03 30*00 03         [24] 2729 	jnb	_drawChar_sloc0_1_0,00192$
      000B06 02r0BrBA         [24] 2730 	ljmp	00119$
      000B09                       2731 00192$:
                                   2732 ;	ecen4330_lcd_v3.c:429: if (size == 1)
      000B09 E5*47            [12] 2733 	mov	a,_drawChar_sloc5_1_0
      000B0B 60 4C            [24] 2734 	jz	00113$
                                   2735 ;	ecen4330_lcd_v3.c:431: drawPixel(x+i, y+j, bg);
      000B0D C0 03            [24] 2736 	push	ar3
      000B0F E8               [12] 2737 	mov	a,r0
      000B10 FA               [12] 2738 	mov	r2,a
      000B11 33               [12] 2739 	rlc	a
      000B12 95 E0            [12] 2740 	subb	a,acc
      000B14 FB               [12] 2741 	mov	r3,a
      000B15 EA               [12] 2742 	mov	a,r2
      000B16 2E               [12] 2743 	add	a,r6
      000B17 FA               [12] 2744 	mov	r2,a
      000B18 EB               [12] 2745 	mov	a,r3
      000B19 3F               [12] 2746 	addc	a,r7
      000B1A FB               [12] 2747 	mov	r3,a
      000B1B 8A 82            [24] 2748 	mov	dpl,r2
      000B1D 8B 83            [24] 2749 	mov	dph,r3
      000B1F E5*46            [12] 2750 	mov	a,_drawChar_sloc4_1_0
      000B21 FA               [12] 2751 	mov	r2,a
      000B22 33               [12] 2752 	rlc	a
      000B23 95 E0            [12] 2753 	subb	a,acc
      000B25 FB               [12] 2754 	mov	r3,a
      000B26 EA               [12] 2755 	mov	a,r2
      000B27 2C               [12] 2756 	add	a,r4
      000B28 FA               [12] 2757 	mov	r2,a
      000B29 EB               [12] 2758 	mov	a,r3
      000B2A 3D               [12] 2759 	addc	a,r5
      000B2B FB               [12] 2760 	mov	r3,a
      000B2C 8A*16            [24] 2761 	mov	_drawPixel_PARM_2,r2
      000B2E 8B*17            [24] 2762 	mov	(_drawPixel_PARM_2 + 1),r3
      000B30 85*3E*18         [24] 2763 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B33 85*3F*19         [24] 2764 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B36 C0 07            [24] 2765 	push	ar7
      000B38 C0 06            [24] 2766 	push	ar6
      000B3A C0 05            [24] 2767 	push	ar5
      000B3C C0 04            [24] 2768 	push	ar4
      000B3E C0 03            [24] 2769 	push	ar3
      000B40 C0 01            [24] 2770 	push	ar1
      000B42 C0 00            [24] 2771 	push	ar0
      000B44 12r03r61         [24] 2772 	lcall	_drawPixel
      000B47 D0 00            [24] 2773 	pop	ar0
      000B49 D0 01            [24] 2774 	pop	ar1
      000B4B D0 03            [24] 2775 	pop	ar3
      000B4D D0 04            [24] 2776 	pop	ar4
      000B4F D0 05            [24] 2777 	pop	ar5
      000B51 D0 06            [24] 2778 	pop	ar6
      000B53 D0 07            [24] 2779 	pop	ar7
      000B55 D0 03            [24] 2780 	pop	ar3
      000B57 80 61            [24] 2781 	sjmp	00119$
      000B59                       2782 00113$:
                                   2783 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000B59 C0 00            [24] 2784 	push	ar0
      000B5B 85*41 82         [24] 2785 	mov	dpl,_drawChar_sloc1_1_0
      000B5E 85*42 83         [24] 2786 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B61 C2 D5            [12] 2787 	clr	F0
      000B63 85*40 F0         [24] 2788 	mov	b,_drawChar_PARM_6
      000B66 E5*46            [12] 2789 	mov	a,_drawChar_sloc4_1_0
      000B68 30 E7 04         [24] 2790 	jnb	acc.7,00194$
      000B6B B2 D5            [12] 2791 	cpl	F0
      000B6D F4               [12] 2792 	cpl	a
      000B6E 04               [12] 2793 	inc	a
      000B6F                       2794 00194$:
      000B6F A4               [48] 2795 	mul	ab
      000B70 30 D5 0A         [24] 2796 	jnb	F0,00195$
      000B73 F4               [12] 2797 	cpl	a
      000B74 24 01            [12] 2798 	add	a,#0x01
      000B76 C5 F0            [12] 2799 	xch	a,b
      000B78 F4               [12] 2800 	cpl	a
      000B79 34 00            [12] 2801 	addc	a,#0x00
      000B7B C5 F0            [12] 2802 	xch	a,b
      000B7D                       2803 00195$:
      000B7D 2C               [12] 2804 	add	a,r4
      000B7E F8               [12] 2805 	mov	r0,a
      000B7F ED               [12] 2806 	mov	a,r5
      000B80 35 F0            [12] 2807 	addc	a,b
      000B82 FA               [12] 2808 	mov	r2,a
      000B83 88*31            [24] 2809 	mov	_fillRect_PARM_2,r0
      000B85 8A*32            [24] 2810 	mov	(_fillRect_PARM_2 + 1),r2
      000B87 A8*40            [24] 2811 	mov	r0,_drawChar_PARM_6
      000B89 7A 00            [12] 2812 	mov	r2,#0x00
      000B8B 88*33            [24] 2813 	mov	_fillRect_PARM_3,r0
      000B8D 8A*34            [24] 2814 	mov	(_fillRect_PARM_3 + 1),r2
      000B8F 88*35            [24] 2815 	mov	_fillRect_PARM_4,r0
      000B91 8A*36            [24] 2816 	mov	(_fillRect_PARM_4 + 1),r2
      000B93 85*3E*37         [24] 2817 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B96 85*3F*38         [24] 2818 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B99 C0 07            [24] 2819 	push	ar7
      000B9B C0 06            [24] 2820 	push	ar6
      000B9D C0 05            [24] 2821 	push	ar5
      000B9F C0 04            [24] 2822 	push	ar4
      000BA1 C0 03            [24] 2823 	push	ar3
      000BA3 C0 01            [24] 2824 	push	ar1
      000BA5 C0 00            [24] 2825 	push	ar0
      000BA7 12r07r63         [24] 2826 	lcall	_fillRect
      000BAA D0 00            [24] 2827 	pop	ar0
      000BAC D0 01            [24] 2828 	pop	ar1
      000BAE D0 03            [24] 2829 	pop	ar3
      000BB0 D0 04            [24] 2830 	pop	ar4
      000BB2 D0 05            [24] 2831 	pop	ar5
      000BB4 D0 06            [24] 2832 	pop	ar6
      000BB6 D0 07            [24] 2833 	pop	ar7
                                   2834 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BB8 D0 00            [24] 2835 	pop	ar0
                                   2836 ;	ecen4330_lcd_v3.c:435: fillRect(x+i*size, y+j*size, size, size, bg);
      000BBA                       2837 00119$:
                                   2838 ;	ecen4330_lcd_v3.c:439: line >>= 1;
      000BBA 90r00r0A         [24] 2839 	mov	dptr,#_drawChar_line_196609_153
      000BBD E0               [24] 2840 	movx	a,@dptr
      000BBE C3               [12] 2841 	clr	c
      000BBF 13               [12] 2842 	rrc	a
      000BC0 FA               [12] 2843 	mov	r2,a
      000BC1 F0               [24] 2844 	movx	@dptr,a
                                   2845 ;	ecen4330_lcd_v3.c:416: for (j = 0; j<8; j++)
      000BC2 05*46            [12] 2846 	inc	_drawChar_sloc4_1_0
      000BC4 C3               [12] 2847 	clr	c
      000BC5 E5*46            [12] 2848 	mov	a,_drawChar_sloc4_1_0
      000BC7 64 80            [12] 2849 	xrl	a,#0x80
      000BC9 94 88            [12] 2850 	subb	a,#0x88
      000BCB 50 03            [24] 2851 	jnc	00196$
      000BCD 02r0Ar44         [24] 2852 	ljmp	00122$
      000BD0                       2853 00196$:
                                   2854 ;	ecen4330_lcd_v3.c:401: for (i=0; i<6; i++ )
      000BD0 09               [12] 2855 	inc	r1
      000BD1 C3               [12] 2856 	clr	c
      000BD2 E9               [12] 2857 	mov	a,r1
      000BD3 64 80            [12] 2858 	xrl	a,#0x80
      000BD5 94 86            [12] 2859 	subb	a,#0x86
      000BD7 50 03            [24] 2860 	jnc	00197$
      000BD9 02r09rC1         [24] 2861 	ljmp	00124$
      000BDC                       2862 00197$:
                                   2863 ;	ecen4330_lcd_v3.c:443: }
      000BDC 22               [24] 2864 	ret
                                   2865 ;------------------------------------------------------------
                                   2866 ;Allocation info for local variables in function 'write'
                                   2867 ;------------------------------------------------------------
                                   2868 ;c                         Allocated to registers r7 
                                   2869 ;------------------------------------------------------------
                                   2870 ;	ecen4330_lcd_v3.c:450: void write (uint8_t c)
                                   2871 ;	-----------------------------------------
                                   2872 ;	 function write
                                   2873 ;	-----------------------------------------
      000BDD                       2874 _write:
      000BDD AF 82            [24] 2875 	mov	r7,dpl
                                   2876 ;	ecen4330_lcd_v3.c:452: if (c == '\n')
      000BDF BF 0A 26         [24] 2877 	cjne	r7,#0x0a,00105$
                                   2878 ;	ecen4330_lcd_v3.c:454: cursor_y += textsize*8;
      000BE2 AD*10            [24] 2879 	mov	r5,_textsize
      000BE4 E4               [12] 2880 	clr	a
      000BE5 C4               [12] 2881 	swap	a
      000BE6 03               [12] 2882 	rr	a
      000BE7 54 F8            [12] 2883 	anl	a,#0xf8
      000BE9 CD               [12] 2884 	xch	a,r5
      000BEA C4               [12] 2885 	swap	a
      000BEB 03               [12] 2886 	rr	a
      000BEC CD               [12] 2887 	xch	a,r5
      000BED 6D               [12] 2888 	xrl	a,r5
      000BEE CD               [12] 2889 	xch	a,r5
      000BEF 54 F8            [12] 2890 	anl	a,#0xf8
      000BF1 CD               [12] 2891 	xch	a,r5
      000BF2 6D               [12] 2892 	xrl	a,r5
      000BF3 FE               [12] 2893 	mov	r6,a
      000BF4 AB*0E            [24] 2894 	mov	r3,_cursor_y
      000BF6 AC*0F            [24] 2895 	mov	r4,(_cursor_y + 1)
      000BF8 ED               [12] 2896 	mov	a,r5
      000BF9 2B               [12] 2897 	add	a,r3
      000BFA FB               [12] 2898 	mov	r3,a
      000BFB EE               [12] 2899 	mov	a,r6
      000BFC 3C               [12] 2900 	addc	a,r4
      000BFD FC               [12] 2901 	mov	r4,a
      000BFE 8B*0E            [24] 2902 	mov	_cursor_y,r3
      000C00 8C*0F            [24] 2903 	mov	(_cursor_y + 1),r4
                                   2904 ;	ecen4330_lcd_v3.c:455: cursor_x  = 0;
      000C02 E4               [12] 2905 	clr	a
      000C03 F5*0C            [12] 2906 	mov	_cursor_x,a
      000C05 F5*0D            [12] 2907 	mov	(_cursor_x + 1),a
      000C07 22               [24] 2908 	ret
      000C08                       2909 00105$:
                                   2910 ;	ecen4330_lcd_v3.c:457: else if (c == '\r')
      000C08 BF 0D 01         [24] 2911 	cjne	r7,#0x0d,00119$
      000C0B 22               [24] 2912 	ret
      000C0C                       2913 00119$:
                                   2914 ;	ecen4330_lcd_v3.c:462: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C0C 85*0E*39         [24] 2915 	mov	_drawChar_PARM_2,_cursor_y
      000C0F 85*0F*3A         [24] 2916 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C12 8F*3B            [24] 2917 	mov	_drawChar_PARM_3,r7
      000C14 85*12*3C         [24] 2918 	mov	_drawChar_PARM_4,_textcolor
      000C17 85*13*3D         [24] 2919 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C1A 85*14*3E         [24] 2920 	mov	_drawChar_PARM_5,_textbgcolor
      000C1D 85*15*3F         [24] 2921 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C20 85*10*40         [24] 2922 	mov	_drawChar_PARM_6,_textsize
      000C23 85*0C 82         [24] 2923 	mov	dpl,_cursor_x
      000C26 85*0D 83         [24] 2924 	mov	dph,(_cursor_x + 1)
      000C29 12r09r2B         [24] 2925 	lcall	_drawChar
                                   2926 ;	ecen4330_lcd_v3.c:463: cursor_x += textsize*6;
      000C2C 85*10*00         [24] 2927 	mov	__mulint_PARM_2,_textsize
      000C2F 75*01 00         [24] 2928 	mov	(__mulint_PARM_2 + 1),#0x00
      000C32 90 00 06         [24] 2929 	mov	dptr,#0x0006
      000C35 12r00r00         [24] 2930 	lcall	__mulint
      000C38 AE 82            [24] 2931 	mov	r6,dpl
      000C3A AF 83            [24] 2932 	mov	r7,dph
      000C3C AC*0C            [24] 2933 	mov	r4,_cursor_x
      000C3E AD*0D            [24] 2934 	mov	r5,(_cursor_x + 1)
      000C40 EE               [12] 2935 	mov	a,r6
      000C41 2C               [12] 2936 	add	a,r4
      000C42 FC               [12] 2937 	mov	r4,a
      000C43 EF               [12] 2938 	mov	a,r7
      000C44 3D               [12] 2939 	addc	a,r5
      000C45 FD               [12] 2940 	mov	r5,a
      000C46 8C*0C            [24] 2941 	mov	_cursor_x,r4
      000C48 8D*0D            [24] 2942 	mov	(_cursor_x + 1),r5
                                   2943 ;	ecen4330_lcd_v3.c:465: }
      000C4A 22               [24] 2944 	ret
                                   2945 ;------------------------------------------------------------
                                   2946 ;Allocation info for local variables in function 'LCD_string_write'
                                   2947 ;------------------------------------------------------------
                                   2948 ;str                       Allocated to registers r5 r6 r7 
                                   2949 ;i                         Allocated with name '_LCD_string_write_i_65536_171'
                                   2950 ;------------------------------------------------------------
                                   2951 ;	ecen4330_lcd_v3.c:472: void LCD_string_write (int8_t *str)
                                   2952 ;	-----------------------------------------
                                   2953 ;	 function LCD_string_write
                                   2954 ;	-----------------------------------------
      000C4B                       2955 _LCD_string_write:
      000C4B AD 82            [24] 2956 	mov	r5,dpl
      000C4D AE 83            [24] 2957 	mov	r6,dph
      000C4F AF F0            [24] 2958 	mov	r7,b
                                   2959 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C51 7B 00            [12] 2960 	mov	r3,#0x00
      000C53 7C 00            [12] 2961 	mov	r4,#0x00
      000C55                       2962 00103$:
      000C55 EB               [12] 2963 	mov	a,r3
      000C56 2D               [12] 2964 	add	a,r5
      000C57 F8               [12] 2965 	mov	r0,a
      000C58 EC               [12] 2966 	mov	a,r4
      000C59 3E               [12] 2967 	addc	a,r6
      000C5A F9               [12] 2968 	mov	r1,a
      000C5B 8F 02            [24] 2969 	mov	ar2,r7
      000C5D 88 82            [24] 2970 	mov	dpl,r0
      000C5F 89 83            [24] 2971 	mov	dph,r1
      000C61 8A F0            [24] 2972 	mov	b,r2
      000C63 12r00r00         [24] 2973 	lcall	__gptrget
      000C66 FA               [12] 2974 	mov	r2,a
      000C67 60 20            [24] 2975 	jz	00105$
                                   2976 ;	ecen4330_lcd_v3.c:477: write(str[i]);
      000C69 8A 82            [24] 2977 	mov	dpl,r2
      000C6B C0 07            [24] 2978 	push	ar7
      000C6D C0 06            [24] 2979 	push	ar6
      000C6F C0 05            [24] 2980 	push	ar5
      000C71 C0 04            [24] 2981 	push	ar4
      000C73 C0 03            [24] 2982 	push	ar3
      000C75 12r0BrDD         [24] 2983 	lcall	_write
      000C78 D0 03            [24] 2984 	pop	ar3
      000C7A D0 04            [24] 2985 	pop	ar4
      000C7C D0 05            [24] 2986 	pop	ar5
      000C7E D0 06            [24] 2987 	pop	ar6
      000C80 D0 07            [24] 2988 	pop	ar7
                                   2989 ;	ecen4330_lcd_v3.c:475: for (i=0;str[i]!=0;i++)
      000C82 0B               [12] 2990 	inc	r3
      000C83 BB 00 CF         [24] 2991 	cjne	r3,#0x00,00103$
      000C86 0C               [12] 2992 	inc	r4
      000C87 80 CC            [24] 2993 	sjmp	00103$
      000C89                       2994 00105$:
                                   2995 ;	ecen4330_lcd_v3.c:479: }
      000C89 22               [24] 2996 	ret
                                   2997 ;------------------------------------------------------------
                                   2998 ;Allocation info for local variables in function 'testRAM'
                                   2999 ;------------------------------------------------------------
                                   3000 ;i                         Allocated with name '_testRAM_i_65536_175'
                                   3001 ;d                         Allocated to registers r7 
                                   3002 ;ram_address               Allocated to registers 
                                   3003 ;------------------------------------------------------------
                                   3004 ;	ecen4330_lcd_v3.c:486: void testRAM (uint8_t d) {
                                   3005 ;	-----------------------------------------
                                   3006 ;	 function testRAM
                                   3007 ;	-----------------------------------------
      000C8A                       3008 _testRAM:
      000C8A AF 82            [24] 3009 	mov	r7,dpl
                                   3010 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C8C 7B 00            [12] 3011 	mov	r3,#0x00
      000C8E 7C 00            [12] 3012 	mov	r4,#0x00
      000C90 7D 00            [12] 3013 	mov	r5,#0x00
      000C92 7E 00            [12] 3014 	mov	r6,#0x00
      000C94                       3015 00102$:
                                   3016 ;	ecen4330_lcd_v3.c:491: IOM = 0;
                                   3017 ;	assignBit
      000C94 C2 B4            [12] 3018 	clr	_P3_4
                                   3019 ;	ecen4330_lcd_v3.c:492: ram_address = (uint8_t __xdata*)(i);
      000C96 8B 82            [24] 3020 	mov	dpl,r3
      000C98 8C 83            [24] 3021 	mov	dph,r4
                                   3022 ;	ecen4330_lcd_v3.c:493: *ram_address = d;
      000C9A EF               [12] 3023 	mov	a,r7
      000C9B F0               [24] 3024 	movx	@dptr,a
                                   3025 ;	ecen4330_lcd_v3.c:494: IOM = 1;
                                   3026 ;	assignBit
      000C9C D2 B4            [12] 3027 	setb	_P3_4
                                   3028 ;	ecen4330_lcd_v3.c:490: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C9E 0B               [12] 3029 	inc	r3
      000C9F BB 00 09         [24] 3030 	cjne	r3,#0x00,00111$
      000CA2 0C               [12] 3031 	inc	r4
      000CA3 BC 00 05         [24] 3032 	cjne	r4,#0x00,00111$
      000CA6 0D               [12] 3033 	inc	r5
      000CA7 BD 00 01         [24] 3034 	cjne	r5,#0x00,00111$
      000CAA 0E               [12] 3035 	inc	r6
      000CAB                       3036 00111$:
      000CAB C3               [12] 3037 	clr	c
      000CAC EB               [12] 3038 	mov	a,r3
      000CAD 94 FF            [12] 3039 	subb	a,#0xff
      000CAF EC               [12] 3040 	mov	a,r4
      000CB0 94 FF            [12] 3041 	subb	a,#0xff
      000CB2 ED               [12] 3042 	mov	a,r5
      000CB3 94 00            [12] 3043 	subb	a,#0x00
      000CB5 EE               [12] 3044 	mov	a,r6
      000CB6 94 00            [12] 3045 	subb	a,#0x00
      000CB8 40 DA            [24] 3046 	jc	00102$
                                   3047 ;	ecen4330_lcd_v3.c:496: }
      000CBA 22               [24] 3048 	ret
                                   3049 ;------------------------------------------------------------
                                   3050 ;Allocation info for local variables in function 'freeType'
                                   3051 ;------------------------------------------------------------
                                   3052 ;count                     Allocated with name '_freeType_count_65536_178'
                                   3053 ;d                         Allocated with name '_freeType_d_65536_178'
                                   3054 ;------------------------------------------------------------
                                   3055 ;	ecen4330_lcd_v3.c:502: void freeType () {
                                   3056 ;	-----------------------------------------
                                   3057 ;	 function freeType
                                   3058 ;	-----------------------------------------
      000CBB                       3059 _freeType:
                                   3060 ;	ecen4330_lcd_v3.c:503: __xdata uint8_t count = 0;
      000CBB 90r00r0B         [24] 3061 	mov	dptr,#_freeType_count_65536_178
      000CBE E4               [12] 3062 	clr	a
      000CBF F0               [24] 3063 	movx	@dptr,a
                                   3064 ;	ecen4330_lcd_v3.c:505: while (1) {
      000CC0                       3065 00105$:
                                   3066 ;	ecen4330_lcd_v3.c:508: if (count == 8) {
      000CC0 90r00r0B         [24] 3067 	mov	dptr,#_freeType_count_65536_178
      000CC3 E0               [24] 3068 	movx	a,@dptr
      000CC4 FF               [12] 3069 	mov	r7,a
      000CC5 BF 08 0D         [24] 3070 	cjne	r7,#0x08,00102$
                                   3071 ;	ecen4330_lcd_v3.c:510: count = 0;
      000CC8 90r00r0B         [24] 3072 	mov	dptr,#_freeType_count_65536_178
      000CCB E4               [12] 3073 	clr	a
      000CCC F0               [24] 3074 	movx	@dptr,a
                                   3075 ;	ecen4330_lcd_v3.c:511: write(d);
      000CCD 75 82 0A         [24] 3076 	mov	dpl,#0x0a
      000CD0 12r0BrDD         [24] 3077 	lcall	_write
      000CD3 80 06            [24] 3078 	sjmp	00103$
      000CD5                       3079 00102$:
                                   3080 ;	ecen4330_lcd_v3.c:514: d = keyDetect();
      000CD5 12r0CrE4         [24] 3081 	lcall	_keyDetect
                                   3082 ;	ecen4330_lcd_v3.c:515: write(d);
      000CD8 12r0BrDD         [24] 3083 	lcall	_write
      000CDB                       3084 00103$:
                                   3085 ;	ecen4330_lcd_v3.c:518: count++;
      000CDB 90r00r0B         [24] 3086 	mov	dptr,#_freeType_count_65536_178
      000CDE E0               [24] 3087 	movx	a,@dptr
      000CDF 24 01            [12] 3088 	add	a,#0x01
      000CE1 F0               [24] 3089 	movx	@dptr,a
                                   3090 ;	ecen4330_lcd_v3.c:520: }
      000CE2 80 DC            [24] 3091 	sjmp	00105$
                                   3092 ;------------------------------------------------------------
                                   3093 ;Allocation info for local variables in function 'keyDetect'
                                   3094 ;------------------------------------------------------------
                                   3095 ;	ecen4330_lcd_v3.c:527: uint8_t keyDetect () {
                                   3096 ;	-----------------------------------------
                                   3097 ;	 function keyDetect
                                   3098 ;	-----------------------------------------
      000CE4                       3099 _keyDetect:
                                   3100 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xF0;
      000CE4 75 90 F0         [24] 3101 	mov	_P1,#0xf0
                                   3102 ;	ecen4330_lcd_v3.c:529: do
      000CE7                       3103 00101$:
                                   3104 ;	ecen4330_lcd_v3.c:531: __KEYPAD_PORT__ = 0xF0;
      000CE7 75 90 F0         [24] 3105 	mov	_P1,#0xf0
                                   3106 ;	ecen4330_lcd_v3.c:532: colloc = __KEYPAD_PORT__;
      000CEA 85 90*00         [24] 3107 	mov	_colloc,_P1
                                   3108 ;	ecen4330_lcd_v3.c:533: colloc&= 0xF0;
      000CED 53*00 F0         [24] 3109 	anl	_colloc,#0xf0
                                   3110 ;	ecen4330_lcd_v3.c:534: } while (colloc != 0xF0);
      000CF0 74 F0            [12] 3111 	mov	a,#0xf0
      000CF2 B5*00 F2         [24] 3112 	cjne	a,_colloc,00101$
                                   3113 ;	ecen4330_lcd_v3.c:538: do
      000CF5                       3114 00104$:
                                   3115 ;	ecen4330_lcd_v3.c:540: delay(20);
      000CF5 90 00 14         [24] 3116 	mov	dptr,#0x0014
      000CF8 12r00r21         [24] 3117 	lcall	_delay
                                   3118 ;	ecen4330_lcd_v3.c:541: colloc = (__KEYPAD_PORT__ & 0xF0);
      000CFB E5 90            [12] 3119 	mov	a,_P1
      000CFD 54 F0            [12] 3120 	anl	a,#0xf0
      000CFF F5*00            [12] 3121 	mov	_colloc,a
                                   3122 ;	ecen4330_lcd_v3.c:542: } while (colloc == 0xF0);
      000D01 74 F0            [12] 3123 	mov	a,#0xf0
      000D03 B5*00 02         [24] 3124 	cjne	a,_colloc,00178$
      000D06 80 ED            [24] 3125 	sjmp	00104$
      000D08                       3126 00178$:
                                   3127 ;	ecen4330_lcd_v3.c:544: delay(1);
      000D08 90 00 01         [24] 3128 	mov	dptr,#0x0001
      000D0B 12r00r21         [24] 3129 	lcall	_delay
                                   3130 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D0E E5 90            [12] 3131 	mov	a,_P1
      000D10 54 F0            [12] 3132 	anl	a,#0xf0
      000D12 F5*00            [12] 3133 	mov	_colloc,a
                                   3134 ;	ecen4330_lcd_v3.c:546: } while (colloc == 0xF0);
      000D14 74 F0            [12] 3135 	mov	a,#0xf0
      000D16 B5*00 02         [24] 3136 	cjne	a,_colloc,00179$
      000D19 80 DA            [24] 3137 	sjmp	00104$
      000D1B                       3138 00179$:
                                   3139 ;	ecen4330_lcd_v3.c:548: while (1)
      000D1B                       3140 00119$:
                                   3141 ;	ecen4330_lcd_v3.c:550: __KEYPAD_PORT__= 0xFE;
      000D1B 75 90 FE         [24] 3142 	mov	_P1,#0xfe
                                   3143 ;	ecen4330_lcd_v3.c:551: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D1E E5 90            [12] 3144 	mov	a,_P1
      000D20 54 F0            [12] 3145 	anl	a,#0xf0
      000D22 F5*00            [12] 3146 	mov	_colloc,a
                                   3147 ;	ecen4330_lcd_v3.c:552: if (colloc != 0xF0)
      000D24 74 F0            [12] 3148 	mov	a,#0xf0
      000D26 B5*00 02         [24] 3149 	cjne	a,_colloc,00180$
      000D29 80 05            [24] 3150 	sjmp	00111$
      000D2B                       3151 00180$:
                                   3152 ;	ecen4330_lcd_v3.c:554: rowloc = 0;
      000D2B 75*01 00         [24] 3153 	mov	_rowloc,#0x00
                                   3154 ;	ecen4330_lcd_v3.c:555: break;
      000D2E 80 3D            [24] 3155 	sjmp	00120$
      000D30                       3156 00111$:
                                   3157 ;	ecen4330_lcd_v3.c:558: __KEYPAD_PORT__ = 0xFD;
      000D30 75 90 FD         [24] 3158 	mov	_P1,#0xfd
                                   3159 ;	ecen4330_lcd_v3.c:559: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D33 E5 90            [12] 3160 	mov	a,_P1
      000D35 54 F0            [12] 3161 	anl	a,#0xf0
      000D37 F5*00            [12] 3162 	mov	_colloc,a
                                   3163 ;	ecen4330_lcd_v3.c:560: if (colloc != 0xF0)
      000D39 74 F0            [12] 3164 	mov	a,#0xf0
      000D3B B5*00 02         [24] 3165 	cjne	a,_colloc,00181$
      000D3E 80 05            [24] 3166 	sjmp	00113$
      000D40                       3167 00181$:
                                   3168 ;	ecen4330_lcd_v3.c:562: rowloc = 1;
      000D40 75*01 01         [24] 3169 	mov	_rowloc,#0x01
                                   3170 ;	ecen4330_lcd_v3.c:563: break;
      000D43 80 28            [24] 3171 	sjmp	00120$
      000D45                       3172 00113$:
                                   3173 ;	ecen4330_lcd_v3.c:566: __KEYPAD_PORT__ = 0xFB;
      000D45 75 90 FB         [24] 3174 	mov	_P1,#0xfb
                                   3175 ;	ecen4330_lcd_v3.c:567: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D48 E5 90            [12] 3176 	mov	a,_P1
      000D4A 54 F0            [12] 3177 	anl	a,#0xf0
      000D4C F5*00            [12] 3178 	mov	_colloc,a
                                   3179 ;	ecen4330_lcd_v3.c:568: if (colloc != 0xF0)
      000D4E 74 F0            [12] 3180 	mov	a,#0xf0
      000D50 B5*00 02         [24] 3181 	cjne	a,_colloc,00182$
      000D53 80 05            [24] 3182 	sjmp	00115$
      000D55                       3183 00182$:
                                   3184 ;	ecen4330_lcd_v3.c:570: rowloc = 2;
      000D55 75*01 02         [24] 3185 	mov	_rowloc,#0x02
                                   3186 ;	ecen4330_lcd_v3.c:571: break;
      000D58 80 13            [24] 3187 	sjmp	00120$
      000D5A                       3188 00115$:
                                   3189 ;	ecen4330_lcd_v3.c:574: __KEYPAD_PORT__ = 0xF7;
      000D5A 75 90 F7         [24] 3190 	mov	_P1,#0xf7
                                   3191 ;	ecen4330_lcd_v3.c:575: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D5D E5 90            [12] 3192 	mov	a,_P1
      000D5F 54 F0            [12] 3193 	anl	a,#0xf0
      000D61 F5*00            [12] 3194 	mov	_colloc,a
                                   3195 ;	ecen4330_lcd_v3.c:576: if (colloc != 0xF0)
      000D63 74 F0            [12] 3196 	mov	a,#0xf0
      000D65 B5*00 02         [24] 3197 	cjne	a,_colloc,00183$
      000D68 80 B1            [24] 3198 	sjmp	00119$
      000D6A                       3199 00183$:
                                   3200 ;	ecen4330_lcd_v3.c:578: rowloc = 3;
      000D6A 75*01 03         [24] 3201 	mov	_rowloc,#0x03
                                   3202 ;	ecen4330_lcd_v3.c:579: break;
      000D6D                       3203 00120$:
                                   3204 ;	ecen4330_lcd_v3.c:583: if (colloc == 0xE0)
      000D6D 74 E0            [12] 3205 	mov	a,#0xe0
      000D6F B5*00 15         [24] 3206 	cjne	a,_colloc,00128$
                                   3207 ;	ecen4330_lcd_v3.c:585: return (keypad[rowloc][0]);
      000D72 E5*01            [12] 3208 	mov	a,_rowloc
      000D74 75 F0 04         [24] 3209 	mov	b,#0x04
      000D77 A4               [48] 3210 	mul	ab
      000D78 24rFB            [12] 3211 	add	a,#_keypad
      000D7A F5 82            [12] 3212 	mov	dpl,a
      000D7C 74s04            [12] 3213 	mov	a,#(_keypad >> 8)
      000D7E 35 F0            [12] 3214 	addc	a,b
      000D80 F5 83            [12] 3215 	mov	dph,a
      000D82 E4               [12] 3216 	clr	a
      000D83 93               [24] 3217 	movc	a,@a+dptr
      000D84 F5 82            [12] 3218 	mov	dpl,a
      000D86 22               [24] 3219 	ret
      000D87                       3220 00128$:
                                   3221 ;	ecen4330_lcd_v3.c:587: else if (colloc == 0xD0)
      000D87 74 D0            [12] 3222 	mov	a,#0xd0
      000D89 B5*00 18         [24] 3223 	cjne	a,_colloc,00125$
                                   3224 ;	ecen4330_lcd_v3.c:589: return (keypad[rowloc][1]);
      000D8C E5*01            [12] 3225 	mov	a,_rowloc
      000D8E 75 F0 04         [24] 3226 	mov	b,#0x04
      000D91 A4               [48] 3227 	mul	ab
      000D92 24rFB            [12] 3228 	add	a,#_keypad
      000D94 FE               [12] 3229 	mov	r6,a
      000D95 74s04            [12] 3230 	mov	a,#(_keypad >> 8)
      000D97 35 F0            [12] 3231 	addc	a,b
      000D99 FF               [12] 3232 	mov	r7,a
      000D9A 8E 82            [24] 3233 	mov	dpl,r6
      000D9C 8F 83            [24] 3234 	mov	dph,r7
      000D9E A3               [24] 3235 	inc	dptr
      000D9F E4               [12] 3236 	clr	a
      000DA0 93               [24] 3237 	movc	a,@a+dptr
      000DA1 F5 82            [12] 3238 	mov	dpl,a
      000DA3 22               [24] 3239 	ret
      000DA4                       3240 00125$:
                                   3241 ;	ecen4330_lcd_v3.c:591: else if (colloc == 0xB0)
      000DA4 74 B0            [12] 3242 	mov	a,#0xb0
      000DA6 B5*00 19         [24] 3243 	cjne	a,_colloc,00122$
                                   3244 ;	ecen4330_lcd_v3.c:593: return (keypad[rowloc][2]);
      000DA9 E5*01            [12] 3245 	mov	a,_rowloc
      000DAB 75 F0 04         [24] 3246 	mov	b,#0x04
      000DAE A4               [48] 3247 	mul	ab
      000DAF 24rFB            [12] 3248 	add	a,#_keypad
      000DB1 FE               [12] 3249 	mov	r6,a
      000DB2 74s04            [12] 3250 	mov	a,#(_keypad >> 8)
      000DB4 35 F0            [12] 3251 	addc	a,b
      000DB6 FF               [12] 3252 	mov	r7,a
      000DB7 8E 82            [24] 3253 	mov	dpl,r6
      000DB9 8F 83            [24] 3254 	mov	dph,r7
      000DBB A3               [24] 3255 	inc	dptr
      000DBC A3               [24] 3256 	inc	dptr
      000DBD E4               [12] 3257 	clr	a
      000DBE 93               [24] 3258 	movc	a,@a+dptr
      000DBF F5 82            [12] 3259 	mov	dpl,a
      000DC1 22               [24] 3260 	ret
      000DC2                       3261 00122$:
                                   3262 ;	ecen4330_lcd_v3.c:597: return (keypad[rowloc][3]);
      000DC2 E5*01            [12] 3263 	mov	a,_rowloc
      000DC4 75 F0 04         [24] 3264 	mov	b,#0x04
      000DC7 A4               [48] 3265 	mul	ab
      000DC8 24rFB            [12] 3266 	add	a,#_keypad
      000DCA FE               [12] 3267 	mov	r6,a
      000DCB 74s04            [12] 3268 	mov	a,#(_keypad >> 8)
      000DCD 35 F0            [12] 3269 	addc	a,b
      000DCF FF               [12] 3270 	mov	r7,a
      000DD0 8E 82            [24] 3271 	mov	dpl,r6
      000DD2 8F 83            [24] 3272 	mov	dph,r7
      000DD4 A3               [24] 3273 	inc	dptr
      000DD5 A3               [24] 3274 	inc	dptr
      000DD6 A3               [24] 3275 	inc	dptr
      000DD7 E4               [12] 3276 	clr	a
      000DD8 93               [24] 3277 	movc	a,@a+dptr
                                   3278 ;	ecen4330_lcd_v3.c:599: }
      000DD9 F5 82            [12] 3279 	mov	dpl,a
      000DDB 22               [24] 3280 	ret
                                   3281 ;------------------------------------------------------------
                                   3282 ;Allocation info for local variables in function 'reverse'
                                   3283 ;------------------------------------------------------------
                                   3284 ;d                         Allocated to registers r7 
                                   3285 ;rev                       Allocated with name '_reverse_rev_65536_196'
                                   3286 ;val                       Allocated with name '_reverse_val_65536_196'
                                   3287 ;------------------------------------------------------------
                                   3288 ;	ecen4330_lcd_v3.c:601: uint16_t reverse (uint8_t d) {
                                   3289 ;	-----------------------------------------
                                   3290 ;	 function reverse
                                   3291 ;	-----------------------------------------
      000DDC                       3292 _reverse:
      000DDC AF 82            [24] 3293 	mov	r7,dpl
                                   3294 ;	ecen4330_lcd_v3.c:602: __xdata uint16_t rev = 0;
      000DDE 90r00r0C         [24] 3295 	mov	dptr,#_reverse_rev_65536_196
      000DE1 E4               [12] 3296 	clr	a
      000DE2 F0               [24] 3297 	movx	@dptr,a
      000DE3 A3               [24] 3298 	inc	dptr
      000DE4 F0               [24] 3299 	movx	@dptr,a
                                   3300 ;	ecen4330_lcd_v3.c:604: while (d >= 1) {
      000DE5                       3301 00101$:
      000DE5 BF 01 00         [24] 3302 	cjne	r7,#0x01,00114$
      000DE8                       3303 00114$:
      000DE8 40 63            [24] 3304 	jc	00103$
                                   3305 ;	ecen4330_lcd_v3.c:606: val = d%10;
      000DEA 8F 05            [24] 3306 	mov	ar5,r7
      000DEC 7E 00            [12] 3307 	mov	r6,#0x00
      000DEE 75*00 0A         [24] 3308 	mov	__modsint_PARM_2,#0x0a
                                   3309 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DF1 8E*01            [24] 3310 	mov	(__modsint_PARM_2 + 1),r6
      000DF3 8D 82            [24] 3311 	mov	dpl,r5
      000DF5 8E 83            [24] 3312 	mov	dph,r6
      000DF7 C0 06            [24] 3313 	push	ar6
      000DF9 C0 05            [24] 3314 	push	ar5
      000DFB 12r00r00         [24] 3315 	lcall	__modsint
      000DFE AB 82            [24] 3316 	mov	r3,dpl
      000E00 AC 83            [24] 3317 	mov	r4,dph
      000E02 D0 05            [24] 3318 	pop	ar5
      000E04 D0 06            [24] 3319 	pop	ar6
      000E06 90r00r0E         [24] 3320 	mov	dptr,#_reverse_val_65536_196
      000E09 EB               [12] 3321 	mov	a,r3
      000E0A F0               [24] 3322 	movx	@dptr,a
      000E0B EC               [12] 3323 	mov	a,r4
      000E0C A3               [24] 3324 	inc	dptr
      000E0D F0               [24] 3325 	movx	@dptr,a
                                   3326 ;	ecen4330_lcd_v3.c:607: d = d/10;
      000E0E 75*00 0A         [24] 3327 	mov	__divsint_PARM_2,#0x0a
      000E11 75*01 00         [24] 3328 	mov	(__divsint_PARM_2 + 1),#0x00
      000E14 8D 82            [24] 3329 	mov	dpl,r5
      000E16 8E 83            [24] 3330 	mov	dph,r6
      000E18 12r00r00         [24] 3331 	lcall	__divsint
      000E1B AD 82            [24] 3332 	mov	r5,dpl
      000E1D 8D 07            [24] 3333 	mov	ar7,r5
                                   3334 ;	ecen4330_lcd_v3.c:608: rev = rev * 10 + val;
      000E1F 90r00r0C         [24] 3335 	mov	dptr,#_reverse_rev_65536_196
      000E22 E0               [24] 3336 	movx	a,@dptr
      000E23 FD               [12] 3337 	mov	r5,a
      000E24 A3               [24] 3338 	inc	dptr
      000E25 E0               [24] 3339 	movx	a,@dptr
      000E26 FE               [12] 3340 	mov	r6,a
      000E27 8D*00            [24] 3341 	mov	__mulint_PARM_2,r5
      000E29 8E*01            [24] 3342 	mov	(__mulint_PARM_2 + 1),r6
      000E2B 90 00 0A         [24] 3343 	mov	dptr,#0x000a
      000E2E C0 07            [24] 3344 	push	ar7
      000E30 12r00r00         [24] 3345 	lcall	__mulint
      000E33 AD 82            [24] 3346 	mov	r5,dpl
      000E35 AE 83            [24] 3347 	mov	r6,dph
      000E37 D0 07            [24] 3348 	pop	ar7
      000E39 90r00r0E         [24] 3349 	mov	dptr,#_reverse_val_65536_196
      000E3C E0               [24] 3350 	movx	a,@dptr
      000E3D FB               [12] 3351 	mov	r3,a
      000E3E A3               [24] 3352 	inc	dptr
      000E3F E0               [24] 3353 	movx	a,@dptr
      000E40 FC               [12] 3354 	mov	r4,a
      000E41 90r00r0C         [24] 3355 	mov	dptr,#_reverse_rev_65536_196
      000E44 EB               [12] 3356 	mov	a,r3
      000E45 2D               [12] 3357 	add	a,r5
      000E46 F0               [24] 3358 	movx	@dptr,a
      000E47 EC               [12] 3359 	mov	a,r4
      000E48 3E               [12] 3360 	addc	a,r6
      000E49 A3               [24] 3361 	inc	dptr
      000E4A F0               [24] 3362 	movx	@dptr,a
      000E4B 80 98            [24] 3363 	sjmp	00101$
      000E4D                       3364 00103$:
                                   3365 ;	ecen4330_lcd_v3.c:610: return rev;
      000E4D 90r00r0C         [24] 3366 	mov	dptr,#_reverse_rev_65536_196
      000E50 E0               [24] 3367 	movx	a,@dptr
      000E51 FE               [12] 3368 	mov	r6,a
      000E52 A3               [24] 3369 	inc	dptr
      000E53 E0               [24] 3370 	movx	a,@dptr
                                   3371 ;	ecen4330_lcd_v3.c:611: }
      000E54 8E 82            [24] 3372 	mov	dpl,r6
      000E56 F5 83            [12] 3373 	mov	dph,a
      000E58 22               [24] 3374 	ret
                                   3375 ;------------------------------------------------------------
                                   3376 ;Allocation info for local variables in function 'asciiToDec'
                                   3377 ;------------------------------------------------------------
                                   3378 ;d                         Allocated to registers 
                                   3379 ;val                       Allocated with name '_asciiToDec_val_65536_199'
                                   3380 ;id                        Allocated with name '_asciiToDec_id_65536_199'
                                   3381 ;------------------------------------------------------------
                                   3382 ;	ecen4330_lcd_v3.c:618: void asciiToDec (uint8_t d) {
                                   3383 ;	-----------------------------------------
                                   3384 ;	 function asciiToDec
                                   3385 ;	-----------------------------------------
      000E59                       3386 _asciiToDec:
                                   3387 ;	ecen4330_lcd_v3.c:621: id = reverse(d);
      000E59 12r0DrDC         [24] 3388 	lcall	_reverse
      000E5C E5 82            [12] 3389 	mov	a,dpl
      000E5E 85 83 F0         [24] 3390 	mov	b,dph
      000E61 90r00r11         [24] 3391 	mov	dptr,#_asciiToDec_id_65536_199
      000E64 F0               [24] 3392 	movx	@dptr,a
      000E65 E5 F0            [12] 3393 	mov	a,b
      000E67 A3               [24] 3394 	inc	dptr
      000E68 F0               [24] 3395 	movx	@dptr,a
                                   3396 ;	ecen4330_lcd_v3.c:622: while (id >= 1){
      000E69                       3397 00101$:
      000E69 90r00r11         [24] 3398 	mov	dptr,#_asciiToDec_id_65536_199
      000E6C E0               [24] 3399 	movx	a,@dptr
      000E6D FE               [12] 3400 	mov	r6,a
      000E6E A3               [24] 3401 	inc	dptr
      000E6F E0               [24] 3402 	movx	a,@dptr
      000E70 FF               [12] 3403 	mov	r7,a
      000E71 C3               [12] 3404 	clr	c
      000E72 EE               [12] 3405 	mov	a,r6
      000E73 94 01            [12] 3406 	subb	a,#0x01
      000E75 EF               [12] 3407 	mov	a,r7
      000E76 94 00            [12] 3408 	subb	a,#0x00
      000E78 40 42            [24] 3409 	jc	00104$
                                   3410 ;	ecen4330_lcd_v3.c:624: val = id % 10;
      000E7A 75*00 0A         [24] 3411 	mov	__moduint_PARM_2,#0x0a
      000E7D 75*01 00         [24] 3412 	mov	(__moduint_PARM_2 + 1),#0x00
      000E80 8E 82            [24] 3413 	mov	dpl,r6
      000E82 8F 83            [24] 3414 	mov	dph,r7
      000E84 C0 07            [24] 3415 	push	ar7
      000E86 C0 06            [24] 3416 	push	ar6
      000E88 12r00r00         [24] 3417 	lcall	__moduint
      000E8B AC 82            [24] 3418 	mov	r4,dpl
      000E8D D0 06            [24] 3419 	pop	ar6
      000E8F D0 07            [24] 3420 	pop	ar7
      000E91 90r00r10         [24] 3421 	mov	dptr,#_asciiToDec_val_65536_199
      000E94 EC               [12] 3422 	mov	a,r4
      000E95 F0               [24] 3423 	movx	@dptr,a
                                   3424 ;	ecen4330_lcd_v3.c:625: id = id/10;
      000E96 75*00 0A         [24] 3425 	mov	__divuint_PARM_2,#0x0a
      000E99 75*01 00         [24] 3426 	mov	(__divuint_PARM_2 + 1),#0x00
      000E9C 8E 82            [24] 3427 	mov	dpl,r6
      000E9E 8F 83            [24] 3428 	mov	dph,r7
      000EA0 12r00r00         [24] 3429 	lcall	__divuint
      000EA3 AE 82            [24] 3430 	mov	r6,dpl
      000EA5 AF 83            [24] 3431 	mov	r7,dph
      000EA7 90r00r11         [24] 3432 	mov	dptr,#_asciiToDec_id_65536_199
      000EAA EE               [12] 3433 	mov	a,r6
      000EAB F0               [24] 3434 	movx	@dptr,a
      000EAC EF               [12] 3435 	mov	a,r7
      000EAD A3               [24] 3436 	inc	dptr
      000EAE F0               [24] 3437 	movx	@dptr,a
                                   3438 ;	ecen4330_lcd_v3.c:626: write(val + '0');
      000EAF 90r00r10         [24] 3439 	mov	dptr,#_asciiToDec_val_65536_199
      000EB2 E0               [24] 3440 	movx	a,@dptr
      000EB3 24 30            [12] 3441 	add	a,#0x30
      000EB5 F5 82            [12] 3442 	mov	dpl,a
      000EB7 12r0BrDD         [24] 3443 	lcall	_write
      000EBA 80 AD            [24] 3444 	sjmp	00101$
      000EBC                       3445 00104$:
                                   3446 ;	ecen4330_lcd_v3.c:629: }
      000EBC 22               [24] 3447 	ret
                                   3448 ;------------------------------------------------------------
                                   3449 ;Allocation info for local variables in function 'asciiToHex'
                                   3450 ;------------------------------------------------------------
                                   3451 ;d                         Allocated to registers r7 
                                   3452 ;val                       Allocated to registers r2 
                                   3453 ;store                     Allocated with name '_asciiToHex_store_65536_202'
                                   3454 ;i                         Allocated to registers r6 
                                   3455 ;------------------------------------------------------------
                                   3456 ;	ecen4330_lcd_v3.c:636: void asciiToHex (uint8_t d) {
                                   3457 ;	-----------------------------------------
                                   3458 ;	 function asciiToHex
                                   3459 ;	-----------------------------------------
      000EBD                       3460 _asciiToHex:
      000EBD AF 82            [24] 3461 	mov	r7,dpl
                                   3462 ;	ecen4330_lcd_v3.c:640: store[0] = 0;
      000EBF 75*48 00         [24] 3463 	mov	_asciiToHex_store_65536_202,#0x00
                                   3464 ;	ecen4330_lcd_v3.c:641: store[1] = 0;
      000EC2 75*49 00         [24] 3465 	mov	(_asciiToHex_store_65536_202 + 0x0001),#0x00
                                   3466 ;	ecen4330_lcd_v3.c:642: while (d >= 1) {
      000EC5 7E 00            [12] 3467 	mov	r6,#0x00
      000EC7                       3468 00104$:
      000EC7 BF 01 00         [24] 3469 	cjne	r7,#0x01,00122$
      000ECA                       3470 00122$:
      000ECA 40 5A            [24] 3471 	jc	00106$
                                   3472 ;	ecen4330_lcd_v3.c:644: val = d % 16;
      000ECC 8F 04            [24] 3473 	mov	ar4,r7
      000ECE 7D 00            [12] 3474 	mov	r5,#0x00
      000ED0 74 0F            [12] 3475 	mov	a,#0x0f
      000ED2 5C               [12] 3476 	anl	a,r4
      000ED3 FA               [12] 3477 	mov	r2,a
                                   3478 ;	ecen4330_lcd_v3.c:645: d = d/16;
      000ED4 75*00 10         [24] 3479 	mov	__divsint_PARM_2,#0x10
                                   3480 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000ED7 8D*01            [24] 3481 	mov	(__divsint_PARM_2 + 1),r5
      000ED9 8C 82            [24] 3482 	mov	dpl,r4
      000EDB 8D 83            [24] 3483 	mov	dph,r5
      000EDD C0 06            [24] 3484 	push	ar6
      000EDF C0 02            [24] 3485 	push	ar2
      000EE1 12r00r00         [24] 3486 	lcall	__divsint
      000EE4 AC 82            [24] 3487 	mov	r4,dpl
      000EE6 D0 02            [24] 3488 	pop	ar2
      000EE8 D0 06            [24] 3489 	pop	ar6
      000EEA 8C 07            [24] 3490 	mov	ar7,r4
                                   3491 ;	ecen4330_lcd_v3.c:646: if (val <= 9) {
      000EEC EA               [12] 3492 	mov	a,r2
      000EED 24 F6            [12] 3493 	add	a,#0xff - 0x09
      000EEF 40 0C            [24] 3494 	jc	00102$
                                   3495 ;	ecen4330_lcd_v3.c:648: store[i] = val + '0';
      000EF1 EE               [12] 3496 	mov	a,r6
      000EF2 24r48            [12] 3497 	add	a,#_asciiToHex_store_65536_202
      000EF4 F9               [12] 3498 	mov	r1,a
      000EF5 8A 05            [24] 3499 	mov	ar5,r2
      000EF7 74 30            [12] 3500 	mov	a,#0x30
      000EF9 2D               [12] 3501 	add	a,r5
      000EFA F7               [12] 3502 	mov	@r1,a
      000EFB 80 26            [24] 3503 	sjmp	00103$
      000EFD                       3504 00102$:
                                   3505 ;	ecen4330_lcd_v3.c:651: store[i] = (val%10) + 'A';
      000EFD EE               [12] 3506 	mov	a,r6
      000EFE 24r48            [12] 3507 	add	a,#_asciiToHex_store_65536_202
      000F00 F9               [12] 3508 	mov	r1,a
      000F01 7D 00            [12] 3509 	mov	r5,#0x00
      000F03 75*00 0A         [24] 3510 	mov	__modsint_PARM_2,#0x0a
                                   3511 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F06 8D*01            [24] 3512 	mov	(__modsint_PARM_2 + 1),r5
      000F08 8A 82            [24] 3513 	mov	dpl,r2
      000F0A 8D 83            [24] 3514 	mov	dph,r5
      000F0C C0 07            [24] 3515 	push	ar7
      000F0E C0 06            [24] 3516 	push	ar6
      000F10 C0 01            [24] 3517 	push	ar1
      000F12 12r00r00         [24] 3518 	lcall	__modsint
      000F15 AC 82            [24] 3519 	mov	r4,dpl
      000F17 AD 83            [24] 3520 	mov	r5,dph
      000F19 D0 01            [24] 3521 	pop	ar1
      000F1B D0 06            [24] 3522 	pop	ar6
      000F1D D0 07            [24] 3523 	pop	ar7
      000F1F 74 41            [12] 3524 	mov	a,#0x41
      000F21 2C               [12] 3525 	add	a,r4
      000F22 F7               [12] 3526 	mov	@r1,a
      000F23                       3527 00103$:
                                   3528 ;	ecen4330_lcd_v3.c:653: i++;
      000F23 0E               [12] 3529 	inc	r6
      000F24 80 A1            [24] 3530 	sjmp	00104$
      000F26                       3531 00106$:
                                   3532 ;	ecen4330_lcd_v3.c:655: write(store[1]);
      000F26 85*49 82         [24] 3533 	mov	dpl,(_asciiToHex_store_65536_202 + 0x0001)
      000F29 12r0BrDD         [24] 3534 	lcall	_write
                                   3535 ;	ecen4330_lcd_v3.c:656: write(store[0]);
      000F2C 85*48 82         [24] 3536 	mov	dpl,_asciiToHex_store_65536_202
                                   3537 ;	ecen4330_lcd_v3.c:657: }
      000F2F 02r0BrDD         [24] 3538 	ljmp	_write
                                   3539 ;------------------------------------------------------------
                                   3540 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3541 ;------------------------------------------------------------
                                   3542 ;d                         Allocated to registers r7 
                                   3543 ;------------------------------------------------------------
                                   3544 ;	ecen4330_lcd_v3.c:665: uint8_t convertAsciiHex(uint8_t d) {
                                   3545 ;	-----------------------------------------
                                   3546 ;	 function convertAsciiHex
                                   3547 ;	-----------------------------------------
      000F32                       3548 _convertAsciiHex:
                                   3549 ;	ecen4330_lcd_v3.c:666: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F32 E5 82            [12] 3550 	mov	a,dpl
      000F34 FF               [12] 3551 	mov	r7,a
      000F35 24 C6            [12] 3552 	add	a,#0xff - 0x39
      000F37 92*01            [24] 3553 	mov	_convertAsciiHex_sloc0_1_0,c
      000F39 40 08            [24] 3554 	jc	00103$
      000F3B 8F 06            [24] 3555 	mov	ar6,r7
      000F3D EE               [12] 3556 	mov	a,r6
      000F3E 24 D0            [12] 3557 	add	a,#0xd0
      000F40 FE               [12] 3558 	mov	r6,a
      000F41 80 04            [24] 3559 	sjmp	00104$
      000F43                       3560 00103$:
      000F43 74 C9            [12] 3561 	mov	a,#0xc9
      000F45 2F               [12] 3562 	add	a,r7
      000F46 FE               [12] 3563 	mov	r6,a
      000F47                       3564 00104$:
      000F47 8E 82            [24] 3565 	mov	dpl,r6
                                   3566 ;	ecen4330_lcd_v3.c:667: }
      000F49 22               [24] 3567 	ret
                                   3568 ;------------------------------------------------------------
                                   3569 ;Allocation info for local variables in function 'writeSomeLines'
                                   3570 ;------------------------------------------------------------
                                   3571 ;	ecen4330_lcd_v3.c:673: void writeSomeLines () {
                                   3572 ;	-----------------------------------------
                                   3573 ;	 function writeSomeLines
                                   3574 ;	-----------------------------------------
      000F4A                       3575 _writeSomeLines:
                                   3576 ;	ecen4330_lcd_v3.c:674: fillScreen(RED);
      000F4A 90 F8 00         [24] 3577 	mov	dptr,#0xf800
      000F4D 12r08r44         [24] 3578 	lcall	_fillScreen
                                   3579 ;	ecen4330_lcd_v3.c:676: delay(20);
      000F50 90 00 14         [24] 3580 	mov	dptr,#0x0014
      000F53 12r00r21         [24] 3581 	lcall	_delay
                                   3582 ;	ecen4330_lcd_v3.c:677: fillScreen(GREEN);
      000F56 90 07 E0         [24] 3583 	mov	dptr,#0x07e0
      000F59 12r08r44         [24] 3584 	lcall	_fillScreen
                                   3585 ;	ecen4330_lcd_v3.c:679: delay(20);
      000F5C 90 00 14         [24] 3586 	mov	dptr,#0x0014
      000F5F 12r00r21         [24] 3587 	lcall	_delay
                                   3588 ;	ecen4330_lcd_v3.c:681: setRotation(0);
      000F62 75 82 00         [24] 3589 	mov	dpl,#0x00
      000F65 12r00rE8         [24] 3590 	lcall	_setRotation
                                   3591 ;	ecen4330_lcd_v3.c:682: fillScreen(BLACK);
      000F68 90 00 00         [24] 3592 	mov	dptr,#0x0000
      000F6B 12r08r44         [24] 3593 	lcall	_fillScreen
                                   3594 ;	ecen4330_lcd_v3.c:683: testCircles(20, RED);
      000F6E 75*2C 00         [24] 3595 	mov	_testCircles_PARM_2,#0x00
      000F71 75*2D F8         [24] 3596 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F74 75 82 14         [24] 3597 	mov	dpl,#0x14
      000F77 12r06r9D         [24] 3598 	lcall	_testCircles
                                   3599 ;	ecen4330_lcd_v3.c:684: delay(100);
      000F7A 90 00 64         [24] 3600 	mov	dptr,#0x0064
      000F7D 12r00r21         [24] 3601 	lcall	_delay
                                   3602 ;	ecen4330_lcd_v3.c:685: fillScreen(BLACK);
      000F80 90 00 00         [24] 3603 	mov	dptr,#0x0000
      000F83 12r08r44         [24] 3604 	lcall	_fillScreen
                                   3605 ;	ecen4330_lcd_v3.c:686: setTextSize(5);
      000F86 75 82 05         [24] 3606 	mov	dpl,#0x05
      000F89 12r00rD0         [24] 3607 	lcall	_setTextSize
                                   3608 ;	ecen4330_lcd_v3.c:687: setTextColor(CYAN, BLACK);
      000F8C E4               [12] 3609 	clr	a
      000F8D F5*00            [12] 3610 	mov	_setTextColor_PARM_2,a
      000F8F F5*01            [12] 3611 	mov	(_setTextColor_PARM_2 + 1),a
      000F91 90 07 FF         [24] 3612 	mov	dptr,#0x07ff
      000F94 12r00rC3         [24] 3613 	lcall	_setTextColor
                                   3614 ;	ecen4330_lcd_v3.c:688: LCD_string_write("Welcome\n");
      000F97 90r05r0B         [24] 3615 	mov	dptr,#___str_0
      000F9A 75 F0 80         [24] 3616 	mov	b,#0x80
      000F9D 12r0Cr4B         [24] 3617 	lcall	_LCD_string_write
                                   3618 ;	ecen4330_lcd_v3.c:689: setTextSize(3);
      000FA0 75 82 03         [24] 3619 	mov	dpl,#0x03
      000FA3 12r00rD0         [24] 3620 	lcall	_setTextSize
                                   3621 ;	ecen4330_lcd_v3.c:690: LCD_string_write("ECEN-4330\n");
      000FA6 90r05r14         [24] 3622 	mov	dptr,#___str_1
      000FA9 75 F0 80         [24] 3623 	mov	b,#0x80
      000FAC 12r0Cr4B         [24] 3624 	lcall	_LCD_string_write
                                   3625 ;	ecen4330_lcd_v3.c:691: LCD_string_write("Rotation 0");
      000FAF 90r05r1F         [24] 3626 	mov	dptr,#___str_2
      000FB2 75 F0 80         [24] 3627 	mov	b,#0x80
      000FB5 12r0Cr4B         [24] 3628 	lcall	_LCD_string_write
                                   3629 ;	ecen4330_lcd_v3.c:692: delay(200);
      000FB8 90 00 C8         [24] 3630 	mov	dptr,#0x00c8
      000FBB 12r00r21         [24] 3631 	lcall	_delay
                                   3632 ;	ecen4330_lcd_v3.c:693: fillScreen(BLACK);
      000FBE 90 00 00         [24] 3633 	mov	dptr,#0x0000
      000FC1 12r08r44         [24] 3634 	lcall	_fillScreen
                                   3635 ;	ecen4330_lcd_v3.c:694: setRotation(1);
      000FC4 75 82 01         [24] 3636 	mov	dpl,#0x01
      000FC7 12r00rE8         [24] 3637 	lcall	_setRotation
                                   3638 ;	ecen4330_lcd_v3.c:695: setCursor(0,0);
      000FCA E4               [12] 3639 	clr	a
      000FCB F5*00            [12] 3640 	mov	_setCursor_PARM_2,a
      000FCD F5*01            [12] 3641 	mov	(_setCursor_PARM_2 + 1),a
      000FCF 90 00 00         [24] 3642 	mov	dptr,#0x0000
      000FD2 12r00rB6         [24] 3643 	lcall	_setCursor
                                   3644 ;	ecen4330_lcd_v3.c:696: LCD_string_write("Rotation 1");
      000FD5 90r05r2A         [24] 3645 	mov	dptr,#___str_3
      000FD8 75 F0 80         [24] 3646 	mov	b,#0x80
      000FDB 12r0Cr4B         [24] 3647 	lcall	_LCD_string_write
                                   3648 ;	ecen4330_lcd_v3.c:697: delay(500);
      000FDE 90 01 F4         [24] 3649 	mov	dptr,#0x01f4
      000FE1 12r00r21         [24] 3650 	lcall	_delay
                                   3651 ;	ecen4330_lcd_v3.c:698: fillScreen(BLACK);
      000FE4 90 00 00         [24] 3652 	mov	dptr,#0x0000
      000FE7 12r08r44         [24] 3653 	lcall	_fillScreen
                                   3654 ;	ecen4330_lcd_v3.c:699: setRotation(2);
      000FEA 75 82 02         [24] 3655 	mov	dpl,#0x02
      000FED 12r00rE8         [24] 3656 	lcall	_setRotation
                                   3657 ;	ecen4330_lcd_v3.c:700: setCursor(0,0);
      000FF0 E4               [12] 3658 	clr	a
      000FF1 F5*00            [12] 3659 	mov	_setCursor_PARM_2,a
      000FF3 F5*01            [12] 3660 	mov	(_setCursor_PARM_2 + 1),a
      000FF5 90 00 00         [24] 3661 	mov	dptr,#0x0000
      000FF8 12r00rB6         [24] 3662 	lcall	_setCursor
                                   3663 ;	ecen4330_lcd_v3.c:701: LCD_string_write("Rotation 2");
      000FFB 90r05r35         [24] 3664 	mov	dptr,#___str_4
      000FFE 75 F0 80         [24] 3665 	mov	b,#0x80
      001001 12r0Cr4B         [24] 3666 	lcall	_LCD_string_write
                                   3667 ;	ecen4330_lcd_v3.c:702: delay(500);
      001004 90 01 F4         [24] 3668 	mov	dptr,#0x01f4
      001007 12r00r21         [24] 3669 	lcall	_delay
                                   3670 ;	ecen4330_lcd_v3.c:703: fillScreen(BLACK);
      00100A 90 00 00         [24] 3671 	mov	dptr,#0x0000
      00100D 12r08r44         [24] 3672 	lcall	_fillScreen
                                   3673 ;	ecen4330_lcd_v3.c:704: setRotation(3);
      001010 75 82 03         [24] 3674 	mov	dpl,#0x03
      001013 12r00rE8         [24] 3675 	lcall	_setRotation
                                   3676 ;	ecen4330_lcd_v3.c:705: setCursor(0,0);
      001016 E4               [12] 3677 	clr	a
      001017 F5*00            [12] 3678 	mov	_setCursor_PARM_2,a
      001019 F5*01            [12] 3679 	mov	(_setCursor_PARM_2 + 1),a
      00101B 90 00 00         [24] 3680 	mov	dptr,#0x0000
      00101E 12r00rB6         [24] 3681 	lcall	_setCursor
                                   3682 ;	ecen4330_lcd_v3.c:706: delay(200);
      001021 90 00 C8         [24] 3683 	mov	dptr,#0x00c8
      001024 12r00r21         [24] 3684 	lcall	_delay
                                   3685 ;	ecen4330_lcd_v3.c:707: LCD_string_write("Rotation 3");
      001027 90r05r40         [24] 3686 	mov	dptr,#___str_5
      00102A 75 F0 80         [24] 3687 	mov	b,#0x80
      00102D 12r0Cr4B         [24] 3688 	lcall	_LCD_string_write
                                   3689 ;	ecen4330_lcd_v3.c:708: delay(200);
      001030 90 00 C8         [24] 3690 	mov	dptr,#0x00c8
                                   3691 ;	ecen4330_lcd_v3.c:709: }
      001033 02r00r21         [24] 3692 	ljmp	_delay
                                   3693 ;------------------------------------------------------------
                                   3694 ;Allocation info for local variables in function 'getAddress'
                                   3695 ;------------------------------------------------------------
                                   3696 ;input                     Allocated with name '_getAddress_input_65536_228'
                                   3697 ;hex                       Allocated with name '_getAddress_hex_65536_228'
                                   3698 ;i                         Allocated with name '_getAddress_i_65536_228'
                                   3699 ;address                   Allocated with name '_getAddress_address_65536_228'
                                   3700 ;------------------------------------------------------------
                                   3701 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3702 ;	-----------------------------------------
                                   3703 ;	 function getAddress
                                   3704 ;	-----------------------------------------
      001036                       3705 _getAddress:
                                   3706 ;	getFunctions.c:16: address = 0;
      001036 90r00r13         [24] 3707 	mov	dptr,#_getAddress_address_65536_228
      001039 E4               [12] 3708 	clr	a
      00103A F0               [24] 3709 	movx	@dptr,a
      00103B A3               [24] 3710 	inc	dptr
      00103C F0               [24] 3711 	movx	@dptr,a
                                   3712 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00103D 7F 00            [12] 3713 	mov	r7,#0x00
      00103F                       3714 00104$:
                                   3715 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      00103F C0 07            [24] 3716 	push	ar7
      001041 12r0CrE4         [24] 3717 	lcall	_keyDetect
                                   3718 ;	getFunctions.c:21: write(input);						// display nibble to user
      001044 AE 82            [24] 3719 	mov  r6,dpl
      001046 C0 06            [24] 3720 	push	ar6
      001048 12r0BrDD         [24] 3721 	lcall	_write
      00104B D0 06            [24] 3722 	pop	ar6
                                   3723 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      00104D 8E 82            [24] 3724 	mov	dpl,r6
      00104F 12r0Fr32         [24] 3725 	lcall	_convertAsciiHex
      001052 AE 82            [24] 3726 	mov	r6,dpl
      001054 D0 07            [24] 3727 	pop	ar7
                                   3728 ;	getFunctions.c:25: address = address | hex;
      001056 90r00r13         [24] 3729 	mov	dptr,#_getAddress_address_65536_228
      001059 E0               [24] 3730 	movx	a,@dptr
      00105A FC               [12] 3731 	mov	r4,a
      00105B A3               [24] 3732 	inc	dptr
      00105C E0               [24] 3733 	movx	a,@dptr
      00105D FD               [12] 3734 	mov	r5,a
      00105E 7B 00            [12] 3735 	mov	r3,#0x00
      001060 90r00r13         [24] 3736 	mov	dptr,#_getAddress_address_65536_228
      001063 EE               [12] 3737 	mov	a,r6
      001064 4C               [12] 3738 	orl	a,r4
      001065 F0               [24] 3739 	movx	@dptr,a
      001066 EB               [12] 3740 	mov	a,r3
      001067 4D               [12] 3741 	orl	a,r5
      001068 A3               [24] 3742 	inc	dptr
      001069 F0               [24] 3743 	movx	@dptr,a
                                   3744 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      00106A BF 03 02         [24] 3745 	cjne	r7,#0x03,00121$
      00106D 80 1C            [24] 3746 	sjmp	00105$
      00106F                       3747 00121$:
      00106F 90r00r13         [24] 3748 	mov	dptr,#_getAddress_address_65536_228
      001072 E0               [24] 3749 	movx	a,@dptr
      001073 FD               [12] 3750 	mov	r5,a
      001074 A3               [24] 3751 	inc	dptr
      001075 E0               [24] 3752 	movx	a,@dptr
      001076 C4               [12] 3753 	swap	a
      001077 54 F0            [12] 3754 	anl	a,#0xf0
      001079 CD               [12] 3755 	xch	a,r5
      00107A C4               [12] 3756 	swap	a
      00107B CD               [12] 3757 	xch	a,r5
      00107C 6D               [12] 3758 	xrl	a,r5
      00107D CD               [12] 3759 	xch	a,r5
      00107E 54 F0            [12] 3760 	anl	a,#0xf0
      001080 CD               [12] 3761 	xch	a,r5
      001081 6D               [12] 3762 	xrl	a,r5
      001082 FE               [12] 3763 	mov	r6,a
      001083 90r00r13         [24] 3764 	mov	dptr,#_getAddress_address_65536_228
      001086 ED               [12] 3765 	mov	a,r5
      001087 F0               [24] 3766 	movx	@dptr,a
      001088 EE               [12] 3767 	mov	a,r6
      001089 A3               [24] 3768 	inc	dptr
      00108A F0               [24] 3769 	movx	@dptr,a
      00108B                       3770 00105$:
                                   3771 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00108B 0F               [12] 3772 	inc	r7
      00108C BF 04 00         [24] 3773 	cjne	r7,#0x04,00122$
      00108F                       3774 00122$:
      00108F 40 AE            [24] 3775 	jc	00104$
                                   3776 ;	getFunctions.c:28: return address;
      001091 90r00r13         [24] 3777 	mov	dptr,#_getAddress_address_65536_228
      001094 E0               [24] 3778 	movx	a,@dptr
      001095 FE               [12] 3779 	mov	r6,a
      001096 A3               [24] 3780 	inc	dptr
      001097 E0               [24] 3781 	movx	a,@dptr
                                   3782 ;	getFunctions.c:29: }
      001098 8E 82            [24] 3783 	mov	dpl,r6
      00109A F5 83            [12] 3784 	mov	dph,a
      00109C 22               [24] 3785 	ret
                                   3786 ;------------------------------------------------------------
                                   3787 ;Allocation info for local variables in function 'getByte'
                                   3788 ;------------------------------------------------------------
                                   3789 ;input                     Allocated with name '_getByte_input_65536_231'
                                   3790 ;hex                       Allocated with name '_getByte_hex_65536_231'
                                   3791 ;byte                      Allocated with name '_getByte_byte_65536_231'
                                   3792 ;i                         Allocated with name '_getByte_i_65536_231'
                                   3793 ;------------------------------------------------------------
                                   3794 ;	getFunctions.c:36: uint8_t getByte() {
                                   3795 ;	-----------------------------------------
                                   3796 ;	 function getByte
                                   3797 ;	-----------------------------------------
      00109D                       3798 _getByte:
                                   3799 ;	getFunctions.c:40: byte = 0;
      00109D 90r00r15         [24] 3800 	mov	dptr,#_getByte_byte_65536_231
      0010A0 E4               [12] 3801 	clr	a
      0010A1 F0               [24] 3802 	movx	@dptr,a
                                   3803 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010A2 7F 00            [12] 3804 	mov	r7,#0x00
      0010A4                       3805 00104$:
                                   3806 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      0010A4 C0 07            [24] 3807 	push	ar7
      0010A6 12r0CrE4         [24] 3808 	lcall	_keyDetect
                                   3809 ;	getFunctions.c:45: write(input);						// display nibble to user
      0010A9 AE 82            [24] 3810 	mov  r6,dpl
      0010AB C0 06            [24] 3811 	push	ar6
      0010AD 12r0BrDD         [24] 3812 	lcall	_write
      0010B0 D0 06            [24] 3813 	pop	ar6
                                   3814 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      0010B2 8E 82            [24] 3815 	mov	dpl,r6
      0010B4 12r0Fr32         [24] 3816 	lcall	_convertAsciiHex
      0010B7 AE 82            [24] 3817 	mov	r6,dpl
      0010B9 D0 07            [24] 3818 	pop	ar7
                                   3819 ;	getFunctions.c:49: byte = byte | hex;
      0010BB 90r00r15         [24] 3820 	mov	dptr,#_getByte_byte_65536_231
      0010BE E0               [24] 3821 	movx	a,@dptr
      0010BF 4E               [12] 3822 	orl	a,r6
      0010C0 F0               [24] 3823 	movx	@dptr,a
                                   3824 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010C1 BF 01 02         [24] 3825 	cjne	r7,#0x01,00121$
      0010C4 80 09            [24] 3826 	sjmp	00105$
      0010C6                       3827 00121$:
      0010C6 90r00r15         [24] 3828 	mov	dptr,#_getByte_byte_65536_231
      0010C9 E0               [24] 3829 	movx	a,@dptr
      0010CA C4               [12] 3830 	swap	a
      0010CB 54 F0            [12] 3831 	anl	a,#0xf0
      0010CD FE               [12] 3832 	mov	r6,a
      0010CE F0               [24] 3833 	movx	@dptr,a
      0010CF                       3834 00105$:
                                   3835 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010CF 0F               [12] 3836 	inc	r7
      0010D0 BF 02 00         [24] 3837 	cjne	r7,#0x02,00122$
      0010D3                       3838 00122$:
      0010D3 40 CF            [24] 3839 	jc	00104$
                                   3840 ;	getFunctions.c:52: return byte;
      0010D5 90r00r15         [24] 3841 	mov	dptr,#_getByte_byte_65536_231
      0010D8 E0               [24] 3842 	movx	a,@dptr
                                   3843 ;	getFunctions.c:53: }
      0010D9 F5 82            [12] 3844 	mov	dpl,a
      0010DB 22               [24] 3845 	ret
                                   3846 ;------------------------------------------------------------
                                   3847 ;Allocation info for local variables in function 'dumpPage'
                                   3848 ;------------------------------------------------------------
                                   3849 ;data                      Allocated to registers r4 
                                   3850 ;ramAddress                Allocated with name '_dumpPage_ramAddress_65537_236'
                                   3851 ;sloc0                     Allocated with name '_dumpPage_sloc0_1_0'
                                   3852 ;sloc1                     Allocated with name '_dumpPage_sloc1_1_0'
                                   3853 ;n                         Allocated with name '_dumpPage_PARM_2'
                                   3854 ;type                      Allocated with name '_dumpPage_PARM_3'
                                   3855 ;start                     Allocated with name '_dumpPage_start_65536_234'
                                   3856 ;i                         Allocated with name '_dumpPage_i_65537_236'
                                   3857 ;j                         Allocated with name '_dumpPage_j_65537_236'
                                   3858 ;high                      Allocated with name '_dumpPage_high_65537_236'
                                   3859 ;low                       Allocated with name '_dumpPage_low_65537_236'
                                   3860 ;------------------------------------------------------------
                                   3861 ;	dump2.c:8: void dumpPage(__xdata uint16_t start, __xdata uint8_t n, __xdata uint8_t type/*, uint8_t page, bool direction*/) {
                                   3862 ;	-----------------------------------------
                                   3863 ;	 function dumpPage
                                   3864 ;	-----------------------------------------
      0010DC                       3865 _dumpPage:
      0010DC AF 83            [24] 3866 	mov	r7,dph
      0010DE E5 82            [12] 3867 	mov	a,dpl
      0010E0 90r00r18         [24] 3868 	mov	dptr,#_dumpPage_start_65536_234
      0010E3 F0               [24] 3869 	movx	@dptr,a
      0010E4 EF               [12] 3870 	mov	a,r7
      0010E5 A3               [24] 3871 	inc	dptr
      0010E6 F0               [24] 3872 	movx	@dptr,a
                                   3873 ;	dump2.c:10: fillScreen(GRAY);
      0010E7 90 D6 BA         [24] 3874 	mov	dptr,#0xd6ba
      0010EA 12r08r44         [24] 3875 	lcall	_fillScreen
                                   3876 ;	dump2.c:11: setCursor(0, 0);
      0010ED E4               [12] 3877 	clr	a
      0010EE F5*00            [12] 3878 	mov	_setCursor_PARM_2,a
      0010F0 F5*01            [12] 3879 	mov	(_setCursor_PARM_2 + 1),a
      0010F2 90 00 00         [24] 3880 	mov	dptr,#0x0000
      0010F5 12r00rB6         [24] 3881 	lcall	_setCursor
                                   3882 ;	dump2.c:12: setTextSize(2);
      0010F8 75 82 02         [24] 3883 	mov	dpl,#0x02
      0010FB 12r00rD0         [24] 3884 	lcall	_setTextSize
                                   3885 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      0010FE 90r00r1A         [24] 3886 	mov	dptr,#_dumpPage_i_65537_236
      001101 E4               [12] 3887 	clr	a
      001102 F0               [24] 3888 	movx	@dptr,a
      001103 A3               [24] 3889 	inc	dptr
      001104 F0               [24] 3890 	movx	@dptr,a
      001105 90r00r17         [24] 3891 	mov	dptr,#_dumpPage_PARM_3
      001108 E0               [24] 3892 	movx	a,@dptr
      001109 FF               [12] 3893 	mov	r7,a
      00110A 90r00r16         [24] 3894 	mov	dptr,#_dumpPage_PARM_2
      00110D E0               [24] 3895 	movx	a,@dptr
      00110E F5 F0            [12] 3896 	mov	b,a
      001110 EF               [12] 3897 	mov	a,r7
      001111 A4               [48] 3898 	mul	ab
      001112 FD               [12] 3899 	mov	r5,a
      001113 AE F0            [24] 3900 	mov	r6,b
      001115                       3901 00109$:
      001115 C0 07            [24] 3902 	push	ar7
      001117 90r00r1A         [24] 3903 	mov	dptr,#_dumpPage_i_65537_236
      00111A E0               [24] 3904 	movx	a,@dptr
      00111B FB               [12] 3905 	mov	r3,a
      00111C A3               [24] 3906 	inc	dptr
      00111D E0               [24] 3907 	movx	a,@dptr
      00111E FC               [12] 3908 	mov	r4,a
      00111F 8B 01            [24] 3909 	mov	ar1,r3
      001121 8C 02            [24] 3910 	mov	ar2,r4
      001123 8D 00            [24] 3911 	mov	ar0,r5
      001125 8E 07            [24] 3912 	mov	ar7,r6
      001127 C3               [12] 3913 	clr	c
      001128 E9               [12] 3914 	mov	a,r1
      001129 98               [12] 3915 	subb	a,r0
      00112A EA               [12] 3916 	mov	a,r2
      00112B 9F               [12] 3917 	subb	a,r7
      00112C D0 07            [24] 3918 	pop	ar7
      00112E 40 01            [24] 3919 	jc	00134$
      001130 22               [24] 3920 	ret
      001131                       3921 00134$:
                                   3922 ;	dump2.c:25: if (i + start == __END_RAM__) break;
      001131 C0 05            [24] 3923 	push	ar5
      001133 C0 06            [24] 3924 	push	ar6
      001135 90r00r18         [24] 3925 	mov	dptr,#_dumpPage_start_65536_234
      001138 E0               [24] 3926 	movx	a,@dptr
      001139 F9               [12] 3927 	mov	r1,a
      00113A A3               [24] 3928 	inc	dptr
      00113B E0               [24] 3929 	movx	a,@dptr
      00113C FA               [12] 3930 	mov	r2,a
      00113D E9               [12] 3931 	mov	a,r1
      00113E 2B               [12] 3932 	add	a,r3
      00113F F8               [12] 3933 	mov	r0,a
      001140 EA               [12] 3934 	mov	a,r2
      001141 3C               [12] 3935 	addc	a,r4
      001142 FE               [12] 3936 	mov	r6,a
      001143 B8 FF 08         [24] 3937 	cjne	r0,#0xff,00135$
      001146 BE FF 05         [24] 3938 	cjne	r6,#0xff,00135$
      001149 D0 06            [24] 3939 	pop	ar6
      00114B D0 05            [24] 3940 	pop	ar5
      00114D 22               [24] 3941 	ret
      00114E                       3942 00135$:
      00114E D0 06            [24] 3943 	pop	ar6
      001150 D0 05            [24] 3944 	pop	ar5
                                   3945 ;	dump2.c:28: IOM = 0;
      001152 C0 05            [24] 3946 	push	ar5
      001154 C0 06            [24] 3947 	push	ar6
                                   3948 ;	assignBit
      001156 C2 B4            [12] 3949 	clr	_P3_4
                                   3950 ;	dump2.c:29: ramAddress = (uint16_t __xdata*)((i * type) + start);
      001158 8F*00            [24] 3951 	mov	__mulint_PARM_2,r7
      00115A 75*01 00         [24] 3952 	mov	(__mulint_PARM_2 + 1),#0x00
      00115D 8B 82            [24] 3953 	mov	dpl,r3
      00115F 8C 83            [24] 3954 	mov	dph,r4
      001161 C0 07            [24] 3955 	push	ar7
      001163 C0 06            [24] 3956 	push	ar6
      001165 C0 05            [24] 3957 	push	ar5
      001167 C0 04            [24] 3958 	push	ar4
      001169 C0 03            [24] 3959 	push	ar3
      00116B C0 02            [24] 3960 	push	ar2
      00116D C0 01            [24] 3961 	push	ar1
      00116F 12r00r00         [24] 3962 	lcall	__mulint
      001172 E5 82            [12] 3963 	mov	a,dpl
      001174 85 83 F0         [24] 3964 	mov	b,dph
      001177 D0 01            [24] 3965 	pop	ar1
      001179 D0 02            [24] 3966 	pop	ar2
      00117B D0 03            [24] 3967 	pop	ar3
      00117D D0 04            [24] 3968 	pop	ar4
      00117F D0 05            [24] 3969 	pop	ar5
      001181 D0 06            [24] 3970 	pop	ar6
      001183 D0 07            [24] 3971 	pop	ar7
      001185 29               [12] 3972 	add	a,r1
      001186 F8               [12] 3973 	mov	r0,a
      001187 EA               [12] 3974 	mov	a,r2
      001188 35 F0            [12] 3975 	addc	a,b
      00118A FE               [12] 3976 	mov	r6,a
      00118B 88*4A            [24] 3977 	mov	_dumpPage_ramAddress_65537_236,r0
      00118D 8E*4B            [24] 3978 	mov	(_dumpPage_ramAddress_65537_236 + 1),r6
                                   3979 ;	dump2.c:30: IOM = 1;
                                   3980 ;	assignBit
      00118F D2 B4            [12] 3981 	setb	_P3_4
                                   3982 ;	dump2.c:32: high = HIGHBYTE(start + (i * type));
      001191 8E 82            [24] 3983 	mov	dpl,r6
                                   3984 ;	dump2.c:33: low = LOWBYTE(start + (i * type));
      001193 8B F0            [24] 3985 	mov	b,r3
      001195 EF               [12] 3986 	mov	a,r7
      001196 A4               [48] 3987 	mul	ab
      001197 29               [12] 3988 	add	a,r1
      001198 F9               [12] 3989 	mov	r1,a
                                   3990 ;	dump2.c:36: asciiToHex(high);
      001199 C0 07            [24] 3991 	push	ar7
      00119B C0 06            [24] 3992 	push	ar6
      00119D C0 05            [24] 3993 	push	ar5
      00119F C0 01            [24] 3994 	push	ar1
      0011A1 12r0ErBD         [24] 3995 	lcall	_asciiToHex
      0011A4 D0 01            [24] 3996 	pop	ar1
                                   3997 ;	dump2.c:37: asciiToHex(low);
      0011A6 89 82            [24] 3998 	mov	dpl,r1
      0011A8 12r0ErBD         [24] 3999 	lcall	_asciiToHex
                                   4000 ;	dump2.c:39: LCD_string_write(": ");
      0011AB 90r05r4B         [24] 4001 	mov	dptr,#___str_6
      0011AE 75 F0 80         [24] 4002 	mov	b,#0x80
      0011B1 12r0Cr4B         [24] 4003 	lcall	_LCD_string_write
      0011B4 D0 05            [24] 4004 	pop	ar5
      0011B6 D0 06            [24] 4005 	pop	ar6
      0011B8 D0 07            [24] 4006 	pop	ar7
                                   4007 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011BA 85*4A*4C         [24] 4008 	mov	_dumpPage_sloc0_1_0,_dumpPage_ramAddress_65537_236
      0011BD 85*4B*4D         [24] 4009 	mov	(_dumpPage_sloc0_1_0 + 1),(_dumpPage_ramAddress_65537_236 + 1)
      0011C0 75*4E 00         [24] 4010 	mov	_dumpPage_sloc1_1_0,#0x00
                                   4011 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      0011C3 D0 06            [24] 4012 	pop	ar6
      0011C5 D0 05            [24] 4013 	pop	ar5
                                   4014 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011C7                       4015 00106$:
      0011C7 C3               [12] 4016 	clr	c
      0011C8 E5*4E            [12] 4017 	mov	a,_dumpPage_sloc1_1_0
      0011CA 9F               [12] 4018 	subb	a,r7
      0011CB 50 2C            [24] 4019 	jnc	00103$
                                   4020 ;	dump2.c:44: IOM = 0;
                                   4021 ;	assignBit
      0011CD C2 B4            [12] 4022 	clr	_P3_4
                                   4023 ;	dump2.c:45: data = *ramAddress;
      0011CF 85*4C 82         [24] 4024 	mov	dpl,_dumpPage_sloc0_1_0
      0011D2 85*4D 83         [24] 4025 	mov	dph,(_dumpPage_sloc0_1_0 + 1)
      0011D5 E0               [24] 4026 	movx	a,@dptr
      0011D6 FC               [12] 4027 	mov	r4,a
                                   4028 ;	dump2.c:46: &ramAddress++; // does this even work?
      0011D7 74 02            [12] 4029 	mov	a,#0x02
      0011D9 25*4C            [12] 4030 	add	a,_dumpPage_sloc0_1_0
      0011DB F5*4C            [12] 4031 	mov	_dumpPage_sloc0_1_0,a
      0011DD E4               [12] 4032 	clr	a
      0011DE 35*4D            [12] 4033 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      0011E0 F5*4D            [12] 4034 	mov	(_dumpPage_sloc0_1_0 + 1),a
                                   4035 ;	dump2.c:47: IOM = 1;
                                   4036 ;	assignBit
      0011E2 D2 B4            [12] 4037 	setb	_P3_4
                                   4038 ;	dump2.c:49: asciiToHex(data);
      0011E4 8C 82            [24] 4039 	mov	dpl,r4
      0011E6 C0 07            [24] 4040 	push	ar7
      0011E8 C0 06            [24] 4041 	push	ar6
      0011EA C0 05            [24] 4042 	push	ar5
      0011EC 12r0ErBD         [24] 4043 	lcall	_asciiToHex
      0011EF D0 05            [24] 4044 	pop	ar5
      0011F1 D0 06            [24] 4045 	pop	ar6
      0011F3 D0 07            [24] 4046 	pop	ar7
                                   4047 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011F5 05*4E            [12] 4048 	inc	_dumpPage_sloc1_1_0
      0011F7 80 CE            [24] 4049 	sjmp	00106$
      0011F9                       4050 00103$:
                                   4051 ;	dump2.c:52: write('\n');
      0011F9 75 82 0A         [24] 4052 	mov	dpl,#0x0a
      0011FC C0 07            [24] 4053 	push	ar7
      0011FE C0 06            [24] 4054 	push	ar6
      001200 C0 05            [24] 4055 	push	ar5
      001202 12r0BrDD         [24] 4056 	lcall	_write
      001205 D0 05            [24] 4057 	pop	ar5
      001207 D0 06            [24] 4058 	pop	ar6
      001209 D0 07            [24] 4059 	pop	ar7
                                   4060 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      00120B 8F 03            [24] 4061 	mov	ar3,r7
      00120D 7C 00            [12] 4062 	mov	r4,#0x00
      00120F 90r00r1A         [24] 4063 	mov	dptr,#_dumpPage_i_65537_236
      001212 E0               [24] 4064 	movx	a,@dptr
      001213 F9               [12] 4065 	mov	r1,a
      001214 A3               [24] 4066 	inc	dptr
      001215 E0               [24] 4067 	movx	a,@dptr
      001216 FA               [12] 4068 	mov	r2,a
      001217 EB               [12] 4069 	mov	a,r3
      001218 29               [12] 4070 	add	a,r1
      001219 F9               [12] 4071 	mov	r1,a
      00121A EC               [12] 4072 	mov	a,r4
      00121B 3A               [12] 4073 	addc	a,r2
      00121C FA               [12] 4074 	mov	r2,a
      00121D 90r00r1A         [24] 4075 	mov	dptr,#_dumpPage_i_65537_236
      001220 E9               [12] 4076 	mov	a,r1
      001221 F0               [24] 4077 	movx	@dptr,a
      001222 EA               [12] 4078 	mov	a,r2
      001223 A3               [24] 4079 	inc	dptr
      001224 F0               [24] 4080 	movx	@dptr,a
                                   4081 ;	dump2.c:60: }
      001225 02r11r15         [24] 4082 	ljmp	00109$
                                   4083 ;------------------------------------------------------------
                                   4084 ;Allocation info for local variables in function 'dump'
                                   4085 ;------------------------------------------------------------
                                   4086 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   4087 ;sloc1                     Allocated with name '_dump_sloc1_1_0'
                                   4088 ;type                      Allocated with name '_dump_type_65537_242'
                                   4089 ;size                      Allocated with name '_dump_size_65537_242'
                                   4090 ;page                      Allocated with name '_dump_page_65537_242'
                                   4091 ;input                     Allocated with name '_dump_input_65537_242'
                                   4092 ;address                   Allocated with name '_dump_address_65537_242'
                                   4093 ;------------------------------------------------------------
                                   4094 ;	dump2.c:66: void dump() {
                                   4095 ;	-----------------------------------------
                                   4096 ;	 function dump
                                   4097 ;	-----------------------------------------
      001228                       4098 _dump:
                                   4099 ;	dump2.c:68: fillScreen(GRAY);
      001228 90 D6 BA         [24] 4100 	mov	dptr,#0xd6ba
      00122B 12r08r44         [24] 4101 	lcall	_fillScreen
                                   4102 ;	dump2.c:69: setCursor(0, 0);
      00122E E4               [12] 4103 	clr	a
      00122F F5*00            [12] 4104 	mov	_setCursor_PARM_2,a
      001231 F5*01            [12] 4105 	mov	(_setCursor_PARM_2 + 1),a
      001233 90 00 00         [24] 4106 	mov	dptr,#0x0000
      001236 12r00rB6         [24] 4107 	lcall	_setCursor
                                   4108 ;	dump2.c:70: setTextSize(2);
      001239 75 82 02         [24] 4109 	mov	dpl,#0x02
      00123C 12r00rD0         [24] 4110 	lcall	_setTextSize
                                   4111 ;	dump2.c:79: page = 1;
      00123F 90r00r1D         [24] 4112 	mov	dptr,#_dump_page_65537_242
      001242 74 01            [12] 4113 	mov	a,#0x01
      001244 F0               [24] 4114 	movx	@dptr,a
                                   4115 ;	dump2.c:82: LCD_string_write("Enter start address:\n");
      001245 90r05r4E         [24] 4116 	mov	dptr,#___str_7
      001248 75 F0 80         [24] 4117 	mov	b,#0x80
      00124B 12r0Cr4B         [24] 4118 	lcall	_LCD_string_write
                                   4119 ;	dump2.c:83: address = getAddress();
      00124E 12r10r36         [24] 4120 	lcall	_getAddress
      001251 AE 82            [24] 4121 	mov	r6,dpl
      001253 AF 83            [24] 4122 	mov	r7,dph
      001255 90r00r1E         [24] 4123 	mov	dptr,#_dump_address_65537_242
      001258 EE               [12] 4124 	mov	a,r6
      001259 F0               [24] 4125 	movx	@dptr,a
      00125A EF               [12] 4126 	mov	a,r7
      00125B A3               [24] 4127 	inc	dptr
      00125C F0               [24] 4128 	movx	@dptr,a
                                   4129 ;	dump2.c:84: write('\n');
      00125D 75 82 0A         [24] 4130 	mov	dpl,#0x0a
      001260 C0 07            [24] 4131 	push	ar7
      001262 C0 06            [24] 4132 	push	ar6
      001264 12r0BrDD         [24] 4133 	lcall	_write
                                   4134 ;	dump2.c:87: LCD_string_write("Enter data type\n");
      001267 90r05r64         [24] 4135 	mov	dptr,#___str_8
      00126A 75 F0 80         [24] 4136 	mov	b,#0x80
      00126D 12r0Cr4B         [24] 4137 	lcall	_LCD_string_write
                                   4138 ;	dump2.c:88: LCD_string_write("B-Byte, A-Word,\n");
      001270 90r05r75         [24] 4139 	mov	dptr,#___str_9
      001273 75 F0 80         [24] 4140 	mov	b,#0x80
      001276 12r0Cr4B         [24] 4141 	lcall	_LCD_string_write
                                   4142 ;	dump2.c:89: LCD_string_write("D-Double word\n");
      001279 90r05r86         [24] 4143 	mov	dptr,#___str_10
      00127C 75 F0 80         [24] 4144 	mov	b,#0x80
      00127F 12r0Cr4B         [24] 4145 	lcall	_LCD_string_write
      001282 D0 06            [24] 4146 	pop	ar6
      001284 D0 07            [24] 4147 	pop	ar7
                                   4148 ;	dump2.c:92: do {
      001286                       4149 00108$:
                                   4150 ;	dump2.c:93: type = keyDetect();
      001286 C0 07            [24] 4151 	push	ar7
      001288 C0 06            [24] 4152 	push	ar6
      00128A 12r0CrE4         [24] 4153 	lcall	_keyDetect
      00128D AD 82            [24] 4154 	mov	r5,dpl
      00128F D0 06            [24] 4155 	pop	ar6
      001291 D0 07            [24] 4156 	pop	ar7
      001293 90r00r1C         [24] 4157 	mov	dptr,#_dump_type_65537_242
      001296 ED               [12] 4158 	mov	a,r5
      001297 F0               [24] 4159 	movx	@dptr,a
                                   4160 ;	dump2.c:94: switch(type) {
      001298 BD 41 02         [24] 4161 	cjne	r5,#0x41,00201$
      00129B 80 23            [24] 4162 	sjmp	00102$
      00129D                       4163 00201$:
      00129D BD 42 02         [24] 4164 	cjne	r5,#0x42,00202$
      0012A0 80 05            [24] 4165 	sjmp	00101$
      0012A2                       4166 00202$:
                                   4167 ;	dump2.c:95: case 'B': {
      0012A2 BD 44 4B         [24] 4168 	cjne	r5,#0x44,00109$
      0012A5 80 32            [24] 4169 	sjmp	00103$
      0012A7                       4170 00101$:
                                   4171 ;	dump2.c:96: type = 1;
      0012A7 90r00r1C         [24] 4172 	mov	dptr,#_dump_type_65537_242
      0012AA 74 01            [12] 4173 	mov	a,#0x01
      0012AC F0               [24] 4174 	movx	@dptr,a
                                   4175 ;	dump2.c:97: LCD_string_write("Byte\n");
      0012AD 90r05r95         [24] 4176 	mov	dptr,#___str_11
      0012B0 75 F0 80         [24] 4177 	mov	b,#0x80
      0012B3 C0 07            [24] 4178 	push	ar7
      0012B5 C0 06            [24] 4179 	push	ar6
      0012B7 12r0Cr4B         [24] 4180 	lcall	_LCD_string_write
      0012BA D0 06            [24] 4181 	pop	ar6
      0012BC D0 07            [24] 4182 	pop	ar7
                                   4183 ;	dump2.c:98: break;
                                   4184 ;	dump2.c:100: case 'A': {
      0012BE 80 30            [24] 4185 	sjmp	00109$
      0012C0                       4186 00102$:
                                   4187 ;	dump2.c:101: type = 2; 
      0012C0 90r00r1C         [24] 4188 	mov	dptr,#_dump_type_65537_242
      0012C3 74 02            [12] 4189 	mov	a,#0x02
      0012C5 F0               [24] 4190 	movx	@dptr,a
                                   4191 ;	dump2.c:102: LCD_string_write("Word\n");
      0012C6 90r05r9B         [24] 4192 	mov	dptr,#___str_12
      0012C9 75 F0 80         [24] 4193 	mov	b,#0x80
      0012CC C0 07            [24] 4194 	push	ar7
      0012CE C0 06            [24] 4195 	push	ar6
      0012D0 12r0Cr4B         [24] 4196 	lcall	_LCD_string_write
      0012D3 D0 06            [24] 4197 	pop	ar6
      0012D5 D0 07            [24] 4198 	pop	ar7
                                   4199 ;	dump2.c:103: break;
                                   4200 ;	dump2.c:105: case 'D': {
      0012D7 80 17            [24] 4201 	sjmp	00109$
      0012D9                       4202 00103$:
                                   4203 ;	dump2.c:106: type = 4;
      0012D9 90r00r1C         [24] 4204 	mov	dptr,#_dump_type_65537_242
      0012DC 74 04            [12] 4205 	mov	a,#0x04
      0012DE F0               [24] 4206 	movx	@dptr,a
                                   4207 ;	dump2.c:107: LCD_string_write("Double word\n");
      0012DF 90r05rA1         [24] 4208 	mov	dptr,#___str_13
      0012E2 75 F0 80         [24] 4209 	mov	b,#0x80
      0012E5 C0 07            [24] 4210 	push	ar7
      0012E7 C0 06            [24] 4211 	push	ar6
      0012E9 12r0Cr4B         [24] 4212 	lcall	_LCD_string_write
      0012EC D0 06            [24] 4213 	pop	ar6
      0012EE D0 07            [24] 4214 	pop	ar7
                                   4215 ;	dump2.c:111: }
      0012F0                       4216 00109$:
                                   4217 ;	dump2.c:112: } while(type != 1 && type != 2 && type != 4);
      0012F0 90r00r1C         [24] 4218 	mov	dptr,#_dump_type_65537_242
      0012F3 E0               [24] 4219 	movx	a,@dptr
      0012F4 FD               [12] 4220 	mov	r5,a
      0012F5 BD 01 02         [24] 4221 	cjne	r5,#0x01,00204$
      0012F8 80 0D            [24] 4222 	sjmp	00110$
      0012FA                       4223 00204$:
      0012FA BD 02 02         [24] 4224 	cjne	r5,#0x02,00205$
      0012FD 80 08            [24] 4225 	sjmp	00110$
      0012FF                       4226 00205$:
      0012FF BD 04 02         [24] 4227 	cjne	r5,#0x04,00206$
      001302 80 03            [24] 4228 	sjmp	00207$
      001304                       4229 00206$:
      001304 02r12r86         [24] 4230 	ljmp	00108$
      001307                       4231 00207$:
      001307                       4232 00110$:
                                   4233 ;	dump2.c:115: LCD_string_write("Enter block size:\n");
      001307 90r05rAE         [24] 4234 	mov	dptr,#___str_14
      00130A 75 F0 80         [24] 4235 	mov	b,#0x80
      00130D C0 07            [24] 4236 	push	ar7
      00130F C0 06            [24] 4237 	push	ar6
      001311 12r0Cr4B         [24] 4238 	lcall	_LCD_string_write
                                   4239 ;	dump2.c:116: size = getByte();
      001314 12r10r9D         [24] 4240 	lcall	_getByte
      001317 AD 82            [24] 4241 	mov	r5,dpl
                                   4242 ;	dump2.c:117: write('\n');
      001319 75 82 0A         [24] 4243 	mov	dpl,#0x0a
      00131C C0 05            [24] 4244 	push	ar5
      00131E 12r0BrDD         [24] 4245 	lcall	_write
      001321 D0 05            [24] 4246 	pop	ar5
      001323 D0 06            [24] 4247 	pop	ar6
      001325 D0 07            [24] 4248 	pop	ar7
                                   4249 ;	dump2.c:122: if (size < NUM) {
      001327 BD 0F 00         [24] 4250 	cjne	r5,#0x0f,00208$
      00132A                       4251 00208$:
      00132A 50 1C            [24] 4252 	jnc	00112$
                                   4253 ;	dump2.c:123: dumpPage(address, size, type);
      00132C 90r00r1C         [24] 4254 	mov	dptr,#_dump_type_65537_242
      00132F E0               [24] 4255 	movx	a,@dptr
      001330 FC               [12] 4256 	mov	r4,a
      001331 90r00r16         [24] 4257 	mov	dptr,#_dumpPage_PARM_2
      001334 ED               [12] 4258 	mov	a,r5
      001335 F0               [24] 4259 	movx	@dptr,a
      001336 90r00r17         [24] 4260 	mov	dptr,#_dumpPage_PARM_3
      001339 EC               [12] 4261 	mov	a,r4
      00133A F0               [24] 4262 	movx	@dptr,a
      00133B 8E 82            [24] 4263 	mov	dpl,r6
      00133D 8F 83            [24] 4264 	mov	dph,r7
      00133F C0 05            [24] 4265 	push	ar5
      001341 12r10rDC         [24] 4266 	lcall	_dumpPage
      001344 D0 05            [24] 4267 	pop	ar5
      001346 80 1B            [24] 4268 	sjmp	00150$
      001348                       4269 00112$:
                                   4270 ;	dump2.c:125: dumpPage(address, NUM, type);
      001348 90r00r1C         [24] 4271 	mov	dptr,#_dump_type_65537_242
      00134B E0               [24] 4272 	movx	a,@dptr
      00134C FC               [12] 4273 	mov	r4,a
      00134D 90r00r16         [24] 4274 	mov	dptr,#_dumpPage_PARM_2
      001350 74 0F            [12] 4275 	mov	a,#0x0f
      001352 F0               [24] 4276 	movx	@dptr,a
      001353 90r00r17         [24] 4277 	mov	dptr,#_dumpPage_PARM_3
      001356 EC               [12] 4278 	mov	a,r4
      001357 F0               [24] 4279 	movx	@dptr,a
      001358 8E 82            [24] 4280 	mov	dpl,r6
      00135A 8F 83            [24] 4281 	mov	dph,r7
      00135C C0 05            [24] 4282 	push	ar5
      00135E 12r10rDC         [24] 4283 	lcall	_dumpPage
      001361 D0 05            [24] 4284 	pop	ar5
                                   4285 ;	dump2.c:128: do {
      001363                       4286 00150$:
      001363 C3               [12] 4287 	clr	c
      001364 74 0F            [12] 4288 	mov	a,#0x0f
      001366 9D               [12] 4289 	subb	a,r5
      001367 E4               [12] 4290 	clr	a
      001368 33               [12] 4291 	rlc	a
      001369 FF               [12] 4292 	mov	r7,a
      00136A 8F*4F            [24] 4293 	mov	_dump_sloc0_1_0,r7
      00136C 90r00r1C         [24] 4294 	mov	dptr,#_dump_type_65537_242
      00136F E0               [24] 4295 	movx	a,@dptr
      001370 FC               [12] 4296 	mov	r4,a
      001371 FB               [12] 4297 	mov	r3,a
      001372                       4298 00132$:
                                   4299 ;	dump2.c:130: if (page != ((size / NUM) + 1) && size > NUM) {
      001372 C0 03            [24] 4300 	push	ar3
      001374 8D 01            [24] 4301 	mov	ar1,r5
      001376 7A 00            [12] 4302 	mov	r2,#0x00
      001378 75*00 0F         [24] 4303 	mov	__divsint_PARM_2,#0x0f
                                   4304 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00137B 8A*01            [24] 4305 	mov	(__divsint_PARM_2 + 1),r2
      00137D 89 82            [24] 4306 	mov	dpl,r1
      00137F 8A 83            [24] 4307 	mov	dph,r2
      001381 C0 07            [24] 4308 	push	ar7
      001383 C0 05            [24] 4309 	push	ar5
      001385 C0 04            [24] 4310 	push	ar4
      001387 C0 03            [24] 4311 	push	ar3
      001389 12r00r00         [24] 4312 	lcall	__divsint
      00138C A9 82            [24] 4313 	mov	r1,dpl
      00138E AA 83            [24] 4314 	mov	r2,dph
      001390 D0 03            [24] 4315 	pop	ar3
      001392 D0 04            [24] 4316 	pop	ar4
      001394 D0 05            [24] 4317 	pop	ar5
      001396 D0 07            [24] 4318 	pop	ar7
      001398 74 01            [12] 4319 	mov	a,#0x01
      00139A 29               [12] 4320 	add	a,r1
      00139B F5*50            [12] 4321 	mov	_dump_sloc1_1_0,a
      00139D E4               [12] 4322 	clr	a
      00139E 3A               [12] 4323 	addc	a,r2
      00139F F5*51            [12] 4324 	mov	(_dump_sloc1_1_0 + 1),a
      0013A1 90r00r1D         [24] 4325 	mov	dptr,#_dump_page_65537_242
      0013A4 E0               [24] 4326 	movx	a,@dptr
      0013A5 7E 00            [12] 4327 	mov	r6,#0x00
      0013A7 B5*50 08         [24] 4328 	cjne	a,_dump_sloc1_1_0,00210$
      0013AA EE               [12] 4329 	mov	a,r6
      0013AB B5*51 04         [24] 4330 	cjne	a,(_dump_sloc1_1_0 + 1),00210$
      0013AE D0 03            [24] 4331 	pop	ar3
      0013B0 80 28            [24] 4332 	sjmp	00119$
      0013B2                       4333 00210$:
      0013B2 D0 03            [24] 4334 	pop	ar3
      0013B4 EF               [12] 4335 	mov	a,r7
      0013B5 60 23            [24] 4336 	jz	00119$
                                   4337 ;	dump2.c:131: LCD_string_write("Press B for next\n");
      0013B7 90r05rC1         [24] 4338 	mov	dptr,#___str_15
      0013BA 75 F0 80         [24] 4339 	mov	b,#0x80
      0013BD C0 07            [24] 4340 	push	ar7
      0013BF C0 05            [24] 4341 	push	ar5
      0013C1 C0 04            [24] 4342 	push	ar4
      0013C3 C0 03            [24] 4343 	push	ar3
      0013C5 C0 02            [24] 4344 	push	ar2
      0013C7 C0 01            [24] 4345 	push	ar1
      0013C9 12r0Cr4B         [24] 4346 	lcall	_LCD_string_write
      0013CC D0 01            [24] 4347 	pop	ar1
      0013CE D0 02            [24] 4348 	pop	ar2
      0013D0 D0 03            [24] 4349 	pop	ar3
      0013D2 D0 04            [24] 4350 	pop	ar4
      0013D4 D0 05            [24] 4351 	pop	ar5
      0013D6 D0 07            [24] 4352 	pop	ar7
      0013D8 80 52            [24] 4353 	sjmp	00120$
      0013DA                       4354 00119$:
                                   4355 ;	dump2.c:132: } else if (page != 1 && size > NUM) {
      0013DA 90r00r1D         [24] 4356 	mov	dptr,#_dump_page_65537_242
      0013DD E0               [24] 4357 	movx	a,@dptr
      0013DE FE               [12] 4358 	mov	r6,a
      0013DF BE 01 02         [24] 4359 	cjne	r6,#0x01,00212$
      0013E2 80 27            [24] 4360 	sjmp	00115$
      0013E4                       4361 00212$:
      0013E4 E5*4F            [12] 4362 	mov	a,_dump_sloc0_1_0
      0013E6 60 23            [24] 4363 	jz	00115$
                                   4364 ;	dump2.c:133: LCD_string_write("Press A for previous\n");
      0013E8 90r05rD3         [24] 4365 	mov	dptr,#___str_16
      0013EB 75 F0 80         [24] 4366 	mov	b,#0x80
      0013EE C0 07            [24] 4367 	push	ar7
      0013F0 C0 05            [24] 4368 	push	ar5
      0013F2 C0 04            [24] 4369 	push	ar4
      0013F4 C0 03            [24] 4370 	push	ar3
      0013F6 C0 02            [24] 4371 	push	ar2
      0013F8 C0 01            [24] 4372 	push	ar1
      0013FA 12r0Cr4B         [24] 4373 	lcall	_LCD_string_write
      0013FD D0 01            [24] 4374 	pop	ar1
      0013FF D0 02            [24] 4375 	pop	ar2
      001401 D0 03            [24] 4376 	pop	ar3
      001403 D0 04            [24] 4377 	pop	ar4
      001405 D0 05            [24] 4378 	pop	ar5
      001407 D0 07            [24] 4379 	pop	ar7
      001409 80 21            [24] 4380 	sjmp	00120$
      00140B                       4381 00115$:
                                   4382 ;	dump2.c:135: LCD_string_write("Press A for previous, B for next\n");
      00140B 90r05rE9         [24] 4383 	mov	dptr,#___str_17
      00140E 75 F0 80         [24] 4384 	mov	b,#0x80
      001411 C0 07            [24] 4385 	push	ar7
      001413 C0 05            [24] 4386 	push	ar5
      001415 C0 04            [24] 4387 	push	ar4
      001417 C0 03            [24] 4388 	push	ar3
      001419 C0 02            [24] 4389 	push	ar2
      00141B C0 01            [24] 4390 	push	ar1
      00141D 12r0Cr4B         [24] 4391 	lcall	_LCD_string_write
      001420 D0 01            [24] 4392 	pop	ar1
      001422 D0 02            [24] 4393 	pop	ar2
      001424 D0 03            [24] 4394 	pop	ar3
      001426 D0 04            [24] 4395 	pop	ar4
      001428 D0 05            [24] 4396 	pop	ar5
      00142A D0 07            [24] 4397 	pop	ar7
      00142C                       4398 00120$:
                                   4399 ;	dump2.c:138: LCD_string_write("Press 1 for menu\n");
      00142C 90r06r0B         [24] 4400 	mov	dptr,#___str_18
      00142F 75 F0 80         [24] 4401 	mov	b,#0x80
      001432 C0 07            [24] 4402 	push	ar7
      001434 C0 05            [24] 4403 	push	ar5
      001436 C0 04            [24] 4404 	push	ar4
      001438 C0 03            [24] 4405 	push	ar3
      00143A C0 02            [24] 4406 	push	ar2
      00143C C0 01            [24] 4407 	push	ar1
      00143E 12r0Cr4B         [24] 4408 	lcall	_LCD_string_write
                                   4409 ;	dump2.c:140: input = keyDetect();
      001441 12r0CrE4         [24] 4410 	lcall	_keyDetect
      001444 AE 82            [24] 4411 	mov	r6,dpl
      001446 D0 01            [24] 4412 	pop	ar1
      001448 D0 02            [24] 4413 	pop	ar2
      00144A D0 03            [24] 4414 	pop	ar3
      00144C D0 04            [24] 4415 	pop	ar4
      00144E D0 05            [24] 4416 	pop	ar5
      001450 D0 07            [24] 4417 	pop	ar7
                                   4418 ;	dump2.c:145: if (input == 'B' && page != ((size / NUM) + 1)) {	// next
      001452 BE 42 6E         [24] 4419 	cjne	r6,#0x42,00129$
      001455 C0 03            [24] 4420 	push	ar3
      001457 74 01            [12] 4421 	mov	a,#0x01
      001459 29               [12] 4422 	add	a,r1
      00145A F5*50            [12] 4423 	mov	_dump_sloc1_1_0,a
      00145C E4               [12] 4424 	clr	a
      00145D 3A               [12] 4425 	addc	a,r2
      00145E F5*51            [12] 4426 	mov	(_dump_sloc1_1_0 + 1),a
      001460 90r00r1D         [24] 4427 	mov	dptr,#_dump_page_65537_242
      001463 E0               [24] 4428 	movx	a,@dptr
      001464 F8               [12] 4429 	mov	r0,a
      001465 FA               [12] 4430 	mov	r2,a
      001466 7B 00            [12] 4431 	mov	r3,#0x00
      001468 B5*50 08         [24] 4432 	cjne	a,_dump_sloc1_1_0,00216$
      00146B EB               [12] 4433 	mov	a,r3
      00146C B5*51 04         [24] 4434 	cjne	a,(_dump_sloc1_1_0 + 1),00216$
      00146F D0 03            [24] 4435 	pop	ar3
      001471 80 50            [24] 4436 	sjmp	00129$
      001473                       4437 00216$:
      001473 D0 03            [24] 4438 	pop	ar3
                                   4439 ;	dump2.c:146: address += NUM;
      001475 90r00r1E         [24] 4440 	mov	dptr,#_dump_address_65537_242
      001478 E0               [24] 4441 	movx	a,@dptr
      001479 F9               [12] 4442 	mov	r1,a
      00147A A3               [24] 4443 	inc	dptr
      00147B E0               [24] 4444 	movx	a,@dptr
      00147C FA               [12] 4445 	mov	r2,a
      00147D 74 0F            [12] 4446 	mov	a,#0x0f
      00147F 29               [12] 4447 	add	a,r1
      001480 F9               [12] 4448 	mov	r1,a
      001481 E4               [12] 4449 	clr	a
      001482 3A               [12] 4450 	addc	a,r2
      001483 FA               [12] 4451 	mov	r2,a
      001484 90r00r1E         [24] 4452 	mov	dptr,#_dump_address_65537_242
      001487 E9               [12] 4453 	mov	a,r1
      001488 F0               [24] 4454 	movx	@dptr,a
      001489 EA               [12] 4455 	mov	a,r2
      00148A A3               [24] 4456 	inc	dptr
      00148B F0               [24] 4457 	movx	@dptr,a
                                   4458 ;	dump2.c:147: dumpPage(address, NUM, type);
      00148C 90r00r1E         [24] 4459 	mov	dptr,#_dump_address_65537_242
      00148F E0               [24] 4460 	movx	a,@dptr
      001490 F9               [12] 4461 	mov	r1,a
      001491 A3               [24] 4462 	inc	dptr
      001492 E0               [24] 4463 	movx	a,@dptr
      001493 FA               [12] 4464 	mov	r2,a
      001494 90r00r16         [24] 4465 	mov	dptr,#_dumpPage_PARM_2
      001497 74 0F            [12] 4466 	mov	a,#0x0f
      001499 F0               [24] 4467 	movx	@dptr,a
      00149A 90r00r17         [24] 4468 	mov	dptr,#_dumpPage_PARM_3
      00149D EC               [12] 4469 	mov	a,r4
      00149E F0               [24] 4470 	movx	@dptr,a
      00149F 89 82            [24] 4471 	mov	dpl,r1
      0014A1 8A 83            [24] 4472 	mov	dph,r2
      0014A3 C0 07            [24] 4473 	push	ar7
      0014A5 C0 05            [24] 4474 	push	ar5
      0014A7 C0 04            [24] 4475 	push	ar4
      0014A9 C0 03            [24] 4476 	push	ar3
      0014AB C0 00            [24] 4477 	push	ar0
      0014AD 12r10rDC         [24] 4478 	lcall	_dumpPage
      0014B0 D0 00            [24] 4479 	pop	ar0
      0014B2 D0 03            [24] 4480 	pop	ar3
      0014B4 D0 04            [24] 4481 	pop	ar4
      0014B6 D0 05            [24] 4482 	pop	ar5
      0014B8 D0 07            [24] 4483 	pop	ar7
                                   4484 ;	dump2.c:148: page++;
      0014BA 90r00r1D         [24] 4485 	mov	dptr,#_dump_page_65537_242
      0014BD E8               [12] 4486 	mov	a,r0
      0014BE 04               [12] 4487 	inc	a
      0014BF F0               [24] 4488 	movx	@dptr,a
      0014C0 02r13r72         [24] 4489 	ljmp	00132$
      0014C3                       4490 00129$:
                                   4491 ;	dump2.c:149: } else if (input == 'A' && page != 1) {				// previous
      0014C3 BE 41 59         [24] 4492 	cjne	r6,#0x41,00125$
      0014C6 90r00r1D         [24] 4493 	mov	dptr,#_dump_page_65537_242
      0014C9 E0               [24] 4494 	movx	a,@dptr
      0014CA FA               [12] 4495 	mov	r2,a
      0014CB BA 01 02         [24] 4496 	cjne	r2,#0x01,00219$
      0014CE 80 4F            [24] 4497 	sjmp	00125$
      0014D0                       4498 00219$:
                                   4499 ;	dump2.c:150: address -= NUM;
      0014D0 90r00r1E         [24] 4500 	mov	dptr,#_dump_address_65537_242
      0014D3 E0               [24] 4501 	movx	a,@dptr
      0014D4 F8               [12] 4502 	mov	r0,a
      0014D5 A3               [24] 4503 	inc	dptr
      0014D6 E0               [24] 4504 	movx	a,@dptr
      0014D7 F9               [12] 4505 	mov	r1,a
      0014D8 E8               [12] 4506 	mov	a,r0
      0014D9 24 F1            [12] 4507 	add	a,#0xf1
      0014DB F8               [12] 4508 	mov	r0,a
      0014DC E9               [12] 4509 	mov	a,r1
      0014DD 34 FF            [12] 4510 	addc	a,#0xff
      0014DF F9               [12] 4511 	mov	r1,a
      0014E0 90r00r1E         [24] 4512 	mov	dptr,#_dump_address_65537_242
      0014E3 E8               [12] 4513 	mov	a,r0
      0014E4 F0               [24] 4514 	movx	@dptr,a
      0014E5 E9               [12] 4515 	mov	a,r1
      0014E6 A3               [24] 4516 	inc	dptr
      0014E7 F0               [24] 4517 	movx	@dptr,a
                                   4518 ;	dump2.c:151: dumpPage(address, NUM, type);
      0014E8 90r00r1E         [24] 4519 	mov	dptr,#_dump_address_65537_242
      0014EB E0               [24] 4520 	movx	a,@dptr
      0014EC F8               [12] 4521 	mov	r0,a
      0014ED A3               [24] 4522 	inc	dptr
      0014EE E0               [24] 4523 	movx	a,@dptr
      0014EF F9               [12] 4524 	mov	r1,a
      0014F0 90r00r16         [24] 4525 	mov	dptr,#_dumpPage_PARM_2
      0014F3 74 0F            [12] 4526 	mov	a,#0x0f
      0014F5 F0               [24] 4527 	movx	@dptr,a
      0014F6 90r00r17         [24] 4528 	mov	dptr,#_dumpPage_PARM_3
      0014F9 EB               [12] 4529 	mov	a,r3
      0014FA F0               [24] 4530 	movx	@dptr,a
      0014FB 88 82            [24] 4531 	mov	dpl,r0
      0014FD 89 83            [24] 4532 	mov	dph,r1
      0014FF C0 07            [24] 4533 	push	ar7
      001501 C0 05            [24] 4534 	push	ar5
      001503 C0 04            [24] 4535 	push	ar4
      001505 C0 03            [24] 4536 	push	ar3
      001507 C0 02            [24] 4537 	push	ar2
      001509 12r10rDC         [24] 4538 	lcall	_dumpPage
      00150C D0 02            [24] 4539 	pop	ar2
      00150E D0 03            [24] 4540 	pop	ar3
      001510 D0 04            [24] 4541 	pop	ar4
      001512 D0 05            [24] 4542 	pop	ar5
      001514 D0 07            [24] 4543 	pop	ar7
                                   4544 ;	dump2.c:152: page--;
      001516 EA               [12] 4545 	mov	a,r2
      001517 14               [12] 4546 	dec	a
      001518 90r00r1D         [24] 4547 	mov	dptr,#_dump_page_65537_242
      00151B F0               [24] 4548 	movx	@dptr,a
      00151C 02r13r72         [24] 4549 	ljmp	00132$
      00151F                       4550 00125$:
                                   4551 ;	dump2.c:153: } else if (input == '1') {							// main menu
      00151F BE 31 01         [24] 4552 	cjne	r6,#0x31,00220$
      001522 22               [24] 4553 	ret
      001523                       4554 00220$:
      001523 02r13r72         [24] 4555 	ljmp	00132$
                                   4556 ;	dump2.c:157: } while (1);
                                   4557 ;	dump2.c:159: }
      001526 22               [24] 4558 	ret
                                   4559 ;------------------------------------------------------------
                                   4560 ;Allocation info for local variables in function 'check'
                                   4561 ;------------------------------------------------------------
                                   4562 ;ramAddress                Allocated to registers r4 r5 
                                   4563 ;checker                   Allocated with name '_check_checker_65537_258'
                                   4564 ;input                     Allocated with name '_check_input_65537_258'
                                   4565 ;fetched                   Allocated with name '_check_fetched_65537_258'
                                   4566 ;i                         Allocated with name '_check_i_65537_258'
                                   4567 ;error                     Allocated with name '_check_error_65537_258'
                                   4568 ;------------------------------------------------------------
                                   4569 ;	check.c:6: void check() {
                                   4570 ;	-----------------------------------------
                                   4571 ;	 function check
                                   4572 ;	-----------------------------------------
      001527                       4573 _check:
                                   4574 ;	check.c:8: fillScreen(GRAY);
      001527 90 D6 BA         [24] 4575 	mov	dptr,#0xd6ba
      00152A 12r08r44         [24] 4576 	lcall	_fillScreen
                                   4577 ;	check.c:9: setCursor(0, 0);
      00152D E4               [12] 4578 	clr	a
      00152E F5*00            [12] 4579 	mov	_setCursor_PARM_2,a
      001530 F5*01            [12] 4580 	mov	(_setCursor_PARM_2 + 1),a
      001532 90 00 00         [24] 4581 	mov	dptr,#0x0000
      001535 12r00rB6         [24] 4582 	lcall	_setCursor
                                   4583 ;	check.c:10: setTextSize(2);
      001538 75 82 02         [24] 4584 	mov	dpl,#0x02
      00153B 12r00rD0         [24] 4585 	lcall	_setTextSize
                                   4586 ;	check.c:17: __xdata bool error = false;
      00153E 90r00r21         [24] 4587 	mov	dptr,#_check_error_65537_258
      001541 E4               [12] 4588 	clr	a
      001542 F0               [24] 4589 	movx	@dptr,a
                                   4590 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      001543 90r06r1D         [24] 4591 	mov	dptr,#___str_19
      001546 75 F0 80         [24] 4592 	mov	b,#0x80
      001549 12r0Cr4B         [24] 4593 	lcall	_LCD_string_write
                                   4594 ;	check.c:22: checker = getByte();
      00154C 12r10r9D         [24] 4595 	lcall	_getByte
      00154F E5 82            [12] 4596 	mov	a,dpl
      001551 90r00r20         [24] 4597 	mov	dptr,#_check_checker_65537_258
      001554 F0               [24] 4598 	movx	@dptr,a
                                   4599 ;	check.c:23: write('\n');
      001555 75 82 0A         [24] 4600 	mov	dpl,#0x0a
      001558 12r0BrDD         [24] 4601 	lcall	_write
                                   4602 ;	check.c:24: LCD_string_write("In progress...\n");
      00155B 90r06r32         [24] 4603 	mov	dptr,#___str_20
      00155E 75 F0 80         [24] 4604 	mov	b,#0x80
      001561 12r0Cr4B         [24] 4605 	lcall	_LCD_string_write
                                   4606 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001564 7E 00            [12] 4607 	mov	r6,#0x00
      001566 7F 00            [12] 4608 	mov	r7,#0x00
      001568                       4609 00112$:
                                   4610 ;	check.c:30: IOM = 0;
                                   4611 ;	assignBit
      001568 C2 B4            [12] 4612 	clr	_P3_4
                                   4613 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      00156A 8E 04            [24] 4614 	mov	ar4,r6
      00156C 8F 05            [24] 4615 	mov	ar5,r7
                                   4616 ;	check.c:32: *ramAddress = checker;
      00156E 90r00r20         [24] 4617 	mov	dptr,#_check_checker_65537_258
      001571 E0               [24] 4618 	movx	a,@dptr
      001572 FB               [12] 4619 	mov	r3,a
      001573 F9               [12] 4620 	mov	r1,a
      001574 7A 00            [12] 4621 	mov	r2,#0x00
      001576 8C 82            [24] 4622 	mov	dpl,r4
      001578 8D 83            [24] 4623 	mov	dph,r5
      00157A E9               [12] 4624 	mov	a,r1
      00157B F0               [24] 4625 	movx	@dptr,a
      00157C EA               [12] 4626 	mov	a,r2
      00157D A3               [24] 4627 	inc	dptr
      00157E F0               [24] 4628 	movx	@dptr,a
                                   4629 ;	check.c:33: fetched = *ramAddress;
                                   4630 ;	check.c:34: IOM = 1;
                                   4631 ;	assignBit
      00157F D2 B4            [12] 4632 	setb	_P3_4
                                   4633 ;	check.c:35: if (fetched != checker) {
      001581 E9               [12] 4634 	mov	a,r1
      001582 B5 03 02         [24] 4635 	cjne	a,ar3,00136$
      001585 80 43            [24] 4636 	sjmp	00104$
      001587                       4637 00136$:
                                   4638 ;	check.c:36: asciiToHex(checker);
      001587 8B 82            [24] 4639 	mov	dpl,r3
      001589 C0 05            [24] 4640 	push	ar5
      00158B C0 04            [24] 4641 	push	ar4
      00158D C0 01            [24] 4642 	push	ar1
      00158F 12r0ErBD         [24] 4643 	lcall	_asciiToHex
                                   4644 ;	check.c:37: write(' ');
      001592 75 82 20         [24] 4645 	mov	dpl,#0x20
      001595 12r0BrDD         [24] 4646 	lcall	_write
      001598 D0 01            [24] 4647 	pop	ar1
                                   4648 ;	check.c:38: asciiToHex(fetched);
      00159A 89 82            [24] 4649 	mov	dpl,r1
      00159C 12r0ErBD         [24] 4650 	lcall	_asciiToHex
                                   4651 ;	check.c:39: write(' ');
      00159F 75 82 20         [24] 4652 	mov	dpl,#0x20
      0015A2 12r0BrDD         [24] 4653 	lcall	_write
      0015A5 D0 04            [24] 4654 	pop	ar4
      0015A7 D0 05            [24] 4655 	pop	ar5
                                   4656 ;	check.c:40: asciiToHex(*ramAddress);
      0015A9 8C 82            [24] 4657 	mov	dpl,r4
      0015AB 8D 83            [24] 4658 	mov	dph,r5
      0015AD E0               [24] 4659 	movx	a,@dptr
      0015AE F5 82            [12] 4660 	mov	dpl,a
      0015B0 12r0ErBD         [24] 4661 	lcall	_asciiToHex
                                   4662 ;	check.c:41: write('\n');
      0015B3 75 82 0A         [24] 4663 	mov	dpl,#0x0a
      0015B6 12r0BrDD         [24] 4664 	lcall	_write
                                   4665 ;	check.c:42: LCD_string_write("Memory check failed\n");
      0015B9 90r06r42         [24] 4666 	mov	dptr,#___str_21
      0015BC 75 F0 80         [24] 4667 	mov	b,#0x80
      0015BF 12r0Cr4B         [24] 4668 	lcall	_LCD_string_write
                                   4669 ;	check.c:43: error = true;
      0015C2 90r00r21         [24] 4670 	mov	dptr,#_check_error_65537_258
      0015C5 74 01            [12] 4671 	mov	a,#0x01
      0015C7 F0               [24] 4672 	movx	@dptr,a
                                   4673 ;	check.c:44: break;
      0015C8 80 78            [24] 4674 	sjmp	00106$
      0015CA                       4675 00104$:
                                   4676 ;	check.c:46: IOM = 0;
                                   4677 ;	assignBit
      0015CA C2 B4            [12] 4678 	clr	_P3_4
                                   4679 ;	check.c:47: checker = ~checker;
      0015CC 90r00r20         [24] 4680 	mov	dptr,#_check_checker_65537_258
      0015CF EB               [12] 4681 	mov	a,r3
      0015D0 F4               [12] 4682 	cpl	a
      0015D1 F0               [24] 4683 	movx	@dptr,a
                                   4684 ;	check.c:48: *ramAddress = checker;
      0015D2 E0               [24] 4685 	movx	a,@dptr
      0015D3 FB               [12] 4686 	mov	r3,a
      0015D4 F9               [12] 4687 	mov	r1,a
      0015D5 7A 00            [12] 4688 	mov	r2,#0x00
      0015D7 8C 82            [24] 4689 	mov	dpl,r4
      0015D9 8D 83            [24] 4690 	mov	dph,r5
      0015DB E9               [12] 4691 	mov	a,r1
      0015DC F0               [24] 4692 	movx	@dptr,a
      0015DD EA               [12] 4693 	mov	a,r2
      0015DE A3               [24] 4694 	inc	dptr
      0015DF F0               [24] 4695 	movx	@dptr,a
                                   4696 ;	check.c:49: fetched = *ramAddress;
                                   4697 ;	check.c:50: IOM = 1;
                                   4698 ;	assignBit
      0015E0 D2 B4            [12] 4699 	setb	_P3_4
                                   4700 ;	check.c:51: if (fetched != checker) {
      0015E2 E9               [12] 4701 	mov	a,r1
      0015E3 B5 03 02         [24] 4702 	cjne	a,ar3,00137$
      0015E6 80 45            [24] 4703 	sjmp	00113$
      0015E8                       4704 00137$:
                                   4705 ;	check.c:52: asciiToHex(~checker);
      0015E8 EB               [12] 4706 	mov	a,r3
      0015E9 F4               [12] 4707 	cpl	a
      0015EA F5 82            [12] 4708 	mov	dpl,a
      0015EC C0 05            [24] 4709 	push	ar5
      0015EE C0 04            [24] 4710 	push	ar4
      0015F0 C0 01            [24] 4711 	push	ar1
      0015F2 12r0ErBD         [24] 4712 	lcall	_asciiToHex
                                   4713 ;	check.c:53: write(' ');
      0015F5 75 82 20         [24] 4714 	mov	dpl,#0x20
      0015F8 12r0BrDD         [24] 4715 	lcall	_write
      0015FB D0 01            [24] 4716 	pop	ar1
                                   4717 ;	check.c:54: asciiToHex(fetched);
      0015FD 89 82            [24] 4718 	mov	dpl,r1
      0015FF 12r0ErBD         [24] 4719 	lcall	_asciiToHex
                                   4720 ;	check.c:55: write(' ');
      001602 75 82 20         [24] 4721 	mov	dpl,#0x20
      001605 12r0BrDD         [24] 4722 	lcall	_write
      001608 D0 04            [24] 4723 	pop	ar4
      00160A D0 05            [24] 4724 	pop	ar5
                                   4725 ;	check.c:56: asciiToHex(*ramAddress);
      00160C 8C 82            [24] 4726 	mov	dpl,r4
      00160E 8D 83            [24] 4727 	mov	dph,r5
      001610 E0               [24] 4728 	movx	a,@dptr
      001611 F5 82            [12] 4729 	mov	dpl,a
      001613 12r0ErBD         [24] 4730 	lcall	_asciiToHex
                                   4731 ;	check.c:57: write('\n');
      001616 75 82 0A         [24] 4732 	mov	dpl,#0x0a
      001619 12r0BrDD         [24] 4733 	lcall	_write
                                   4734 ;	check.c:58: LCD_string_write("Memory check failed\n");
      00161C 90r06r42         [24] 4735 	mov	dptr,#___str_21
      00161F 75 F0 80         [24] 4736 	mov	b,#0x80
      001622 12r0Cr4B         [24] 4737 	lcall	_LCD_string_write
                                   4738 ;	check.c:59: error = true;
      001625 90r00r21         [24] 4739 	mov	dptr,#_check_error_65537_258
      001628 74 01            [12] 4740 	mov	a,#0x01
      00162A F0               [24] 4741 	movx	@dptr,a
                                   4742 ;	check.c:60: break;
      00162B 80 15            [24] 4743 	sjmp	00106$
      00162D                       4744 00113$:
                                   4745 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      00162D 0E               [12] 4746 	inc	r6
      00162E BE 00 01         [24] 4747 	cjne	r6,#0x00,00138$
      001631 0F               [12] 4748 	inc	r7
      001632                       4749 00138$:
      001632 8E 04            [24] 4750 	mov	ar4,r6
      001634 8F 05            [24] 4751 	mov	ar5,r7
      001636 C3               [12] 4752 	clr	c
      001637 EC               [12] 4753 	mov	a,r4
      001638 94 FF            [12] 4754 	subb	a,#0xff
      00163A ED               [12] 4755 	mov	a,r5
      00163B 94 FF            [12] 4756 	subb	a,#0xff
      00163D 50 03            [24] 4757 	jnc	00139$
      00163F 02r15r68         [24] 4758 	ljmp	00112$
      001642                       4759 00139$:
      001642                       4760 00106$:
                                   4761 ;	check.c:68: if (error != false) {
      001642 90r00r21         [24] 4762 	mov	dptr,#_check_error_65537_258
      001645 E0               [24] 4763 	movx	a,@dptr
      001646 60 09            [24] 4764 	jz	00108$
                                   4765 ;	check.c:69: LCD_string_write("Success!\n");
      001648 90r06r57         [24] 4766 	mov	dptr,#___str_22
      00164B 75 F0 80         [24] 4767 	mov	b,#0x80
      00164E 12r0Cr4B         [24] 4768 	lcall	_LCD_string_write
      001651                       4769 00108$:
                                   4770 ;	check.c:73: LCD_string_write("Press 1 for menu");
      001651 90r06r61         [24] 4771 	mov	dptr,#___str_23
      001654 75 F0 80         [24] 4772 	mov	b,#0x80
      001657 12r0Cr4B         [24] 4773 	lcall	_LCD_string_write
                                   4774 ;	check.c:75: do {
      00165A                       4775 00109$:
                                   4776 ;	check.c:76: input = keyDetect();
      00165A 12r0CrE4         [24] 4777 	lcall	_keyDetect
      00165D AF 82            [24] 4778 	mov	r7,dpl
                                   4779 ;	check.c:77: } while (input != '1');
      00165F BF 31 F8         [24] 4780 	cjne	r7,#0x31,00109$
                                   4781 ;	check.c:78: }
      001662 22               [24] 4782 	ret
                                   4783 ;------------------------------------------------------------
                                   4784 ;Allocation info for local variables in function 'basic'
                                   4785 ;------------------------------------------------------------
                                   4786 ;val                       Allocated to registers r7 
                                   4787 ;fetched                   Allocated to registers r7 
                                   4788 ;add                       Allocated to registers r5 r6 
                                   4789 ;ramAddress                Allocated to registers 
                                   4790 ;------------------------------------------------------------
                                   4791 ;	check.c:84: void basic() {
                                   4792 ;	-----------------------------------------
                                   4793 ;	 function basic
                                   4794 ;	-----------------------------------------
      001663                       4795 _basic:
                                   4796 ;	check.c:86: fillScreen(GRAY);
      001663 90 D6 BA         [24] 4797 	mov	dptr,#0xd6ba
      001666 12r08r44         [24] 4798 	lcall	_fillScreen
                                   4799 ;	check.c:87: setCursor(0, 0);
      001669 E4               [12] 4800 	clr	a
      00166A F5*00            [12] 4801 	mov	_setCursor_PARM_2,a
      00166C F5*01            [12] 4802 	mov	(_setCursor_PARM_2 + 1),a
      00166E 90 00 00         [24] 4803 	mov	dptr,#0x0000
      001671 12r00rB6         [24] 4804 	lcall	_setCursor
                                   4805 ;	check.c:88: setTextSize(2);
      001674 75 82 02         [24] 4806 	mov	dpl,#0x02
      001677 12r00rD0         [24] 4807 	lcall	_setTextSize
                                   4808 ;	check.c:97: LCD_string_write("Enter byte\n");
      00167A 90r06r72         [24] 4809 	mov	dptr,#___str_24
      00167D 75 F0 80         [24] 4810 	mov	b,#0x80
      001680 12r0Cr4B         [24] 4811 	lcall	_LCD_string_write
                                   4812 ;	check.c:98: val = getByte();
      001683 12r10r9D         [24] 4813 	lcall	_getByte
      001686 AF 82            [24] 4814 	mov	r7,dpl
                                   4815 ;	check.c:99: write('\n');
      001688 75 82 0A         [24] 4816 	mov	dpl,#0x0a
      00168B C0 07            [24] 4817 	push	ar7
      00168D 12r0BrDD         [24] 4818 	lcall	_write
                                   4819 ;	check.c:102: LCD_string_write("Enter address\n");
      001690 90r06r7E         [24] 4820 	mov	dptr,#___str_25
      001693 75 F0 80         [24] 4821 	mov	b,#0x80
      001696 12r0Cr4B         [24] 4822 	lcall	_LCD_string_write
                                   4823 ;	check.c:103: add = getAddress();
      001699 12r10r36         [24] 4824 	lcall	_getAddress
      00169C AD 82            [24] 4825 	mov	r5,dpl
      00169E AE 83            [24] 4826 	mov	r6,dph
                                   4827 ;	check.c:104: write('\n');
      0016A0 75 82 0A         [24] 4828 	mov	dpl,#0x0a
      0016A3 C0 06            [24] 4829 	push	ar6
      0016A5 C0 05            [24] 4830 	push	ar5
      0016A7 12r0BrDD         [24] 4831 	lcall	_write
                                   4832 ;	check.c:105: LCD_string_write("In progress\n");
      0016AA 90r06r8D         [24] 4833 	mov	dptr,#___str_26
      0016AD 75 F0 80         [24] 4834 	mov	b,#0x80
      0016B0 12r0Cr4B         [24] 4835 	lcall	_LCD_string_write
      0016B3 D0 05            [24] 4836 	pop	ar5
      0016B5 D0 06            [24] 4837 	pop	ar6
      0016B7 D0 07            [24] 4838 	pop	ar7
                                   4839 ;	check.c:107: IOM = 0;
                                   4840 ;	assignBit
      0016B9 C2 B4            [12] 4841 	clr	_P3_4
                                   4842 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      0016BB 8D 82            [24] 4843 	mov	dpl,r5
      0016BD 8E 83            [24] 4844 	mov	dph,r6
                                   4845 ;	check.c:111: *ramAddress = val;
      0016BF 8F 05            [24] 4846 	mov	ar5,r7
      0016C1 7E 00            [12] 4847 	mov	r6,#0x00
      0016C3 ED               [12] 4848 	mov	a,r5
      0016C4 F0               [24] 4849 	movx	@dptr,a
      0016C5 EE               [12] 4850 	mov	a,r6
      0016C6 A3               [24] 4851 	inc	dptr
      0016C7 F0               [24] 4852 	movx	@dptr,a
                                   4853 ;	check.c:114: fetched = *ramAddress;
                                   4854 ;	check.c:116: IOM = 1;
                                   4855 ;	assignBit
      0016C8 D2 B4            [12] 4856 	setb	_P3_4
                                   4857 ;	check.c:119: if (fetched == val) {
      0016CA ED               [12] 4858 	mov	a,r5
      0016CB B5 07 10         [24] 4859 	cjne	a,ar7,00102$
                                   4860 ;	check.c:120: asciiToHex(fetched);
      0016CE 8D 82            [24] 4861 	mov	dpl,r5
      0016D0 12r0ErBD         [24] 4862 	lcall	_asciiToHex
                                   4863 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      0016D3 90r06r9A         [24] 4864 	mov	dptr,#___str_27
      0016D6 75 F0 80         [24] 4865 	mov	b,#0x80
      0016D9 12r0Cr4B         [24] 4866 	lcall	_LCD_string_write
      0016DC 80 09            [24] 4867 	sjmp	00103$
      0016DE                       4868 00102$:
                                   4869 ;	check.c:123: LCD_string_write("Check failed\n");
      0016DE 90r06rAE         [24] 4870 	mov	dptr,#___str_28
      0016E1 75 F0 80         [24] 4871 	mov	b,#0x80
      0016E4 12r0Cr4B         [24] 4872 	lcall	_LCD_string_write
      0016E7                       4873 00103$:
                                   4874 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      0016E7 90r06r0B         [24] 4875 	mov	dptr,#___str_18
      0016EA 75 F0 80         [24] 4876 	mov	b,#0x80
      0016ED 12r0Cr4B         [24] 4877 	lcall	_LCD_string_write
                                   4878 ;	check.c:128: do {
      0016F0                       4879 00104$:
                                   4880 ;	check.c:129: fetched = keyDetect();
      0016F0 12r0CrE4         [24] 4881 	lcall	_keyDetect
      0016F3 AF 82            [24] 4882 	mov	r7,dpl
                                   4883 ;	check.c:130: } while (fetched != '1');
      0016F5 BF 31 F8         [24] 4884 	cjne	r7,#0x31,00104$
                                   4885 ;	check.c:131: }
      0016F8 22               [24] 4886 	ret
                                   4887 ;------------------------------------------------------------
                                   4888 ;Allocation info for local variables in function 'move'
                                   4889 ;------------------------------------------------------------
                                   4890 ;origin                    Allocated to registers 
                                   4891 ;target                    Allocated with name '_move_target_65537_272'
                                   4892 ;startAdd                  Allocated with name '_move_startAdd_65537_272'
                                   4893 ;targetAdd                 Allocated with name '_move_targetAdd_65537_272'
                                   4894 ;i                         Allocated with name '_move_i_65537_272'
                                   4895 ;size                      Allocated with name '_move_size_65537_272'
                                   4896 ;o                         Allocated with name '_move_o_65537_272'
                                   4897 ;------------------------------------------------------------
                                   4898 ;	move.c:5: void move() {
                                   4899 ;	-----------------------------------------
                                   4900 ;	 function move
                                   4901 ;	-----------------------------------------
      0016F9                       4902 _move:
                                   4903 ;	move.c:7: fillScreen(GRAY);
      0016F9 90 D6 BA         [24] 4904 	mov	dptr,#0xd6ba
      0016FC 12r08r44         [24] 4905 	lcall	_fillScreen
                                   4906 ;	move.c:8: setCursor(0, 0);
      0016FF E4               [12] 4907 	clr	a
      001700 F5*00            [12] 4908 	mov	_setCursor_PARM_2,a
      001702 F5*01            [12] 4909 	mov	(_setCursor_PARM_2 + 1),a
      001704 90 00 00         [24] 4910 	mov	dptr,#0x0000
      001707 12r00rB6         [24] 4911 	lcall	_setCursor
                                   4912 ;	move.c:19: setTextSize(2);
      00170A 75 82 02         [24] 4913 	mov	dpl,#0x02
      00170D 12r00rD0         [24] 4914 	lcall	_setTextSize
                                   4915 ;	move.c:20: LCD_string_write("Enter start address:\n");
      001710 90r05r4E         [24] 4916 	mov	dptr,#___str_7
      001713 75 F0 80         [24] 4917 	mov	b,#0x80
      001716 12r0Cr4B         [24] 4918 	lcall	_LCD_string_write
                                   4919 ;	move.c:21: startAdd = getAddress();
      001719 12r10r36         [24] 4920 	lcall	_getAddress
      00171C AE 82            [24] 4921 	mov	r6,dpl
      00171E AF 83            [24] 4922 	mov	r7,dph
                                   4923 ;	move.c:22: write('\n');
      001720 75 82 0A         [24] 4924 	mov	dpl,#0x0a
      001723 C0 07            [24] 4925 	push	ar7
      001725 C0 06            [24] 4926 	push	ar6
      001727 12r0BrDD         [24] 4927 	lcall	_write
                                   4928 ;	move.c:25: LCD_string_write("Enter target address:\n");
      00172A 90r06rBC         [24] 4929 	mov	dptr,#___str_29
      00172D 75 F0 80         [24] 4930 	mov	b,#0x80
      001730 12r0Cr4B         [24] 4931 	lcall	_LCD_string_write
                                   4932 ;	move.c:26: targetAdd = getAddress();
      001733 12r10r36         [24] 4933 	lcall	_getAddress
      001736 AC 82            [24] 4934 	mov	r4,dpl
      001738 AD 83            [24] 4935 	mov	r5,dph
                                   4936 ;	move.c:27: write('\n');
      00173A 75 82 0A         [24] 4937 	mov	dpl,#0x0a
      00173D C0 05            [24] 4938 	push	ar5
      00173F C0 04            [24] 4939 	push	ar4
      001741 12r0BrDD         [24] 4940 	lcall	_write
                                   4941 ;	move.c:30: LCD_string_write("Enter size:\n");
      001744 90r06rD3         [24] 4942 	mov	dptr,#___str_30
      001747 75 F0 80         [24] 4943 	mov	b,#0x80
      00174A 12r0Cr4B         [24] 4944 	lcall	_LCD_string_write
                                   4945 ;	move.c:31: size = getByte();
      00174D 12r10r9D         [24] 4946 	lcall	_getByte
      001750 AB 82            [24] 4947 	mov	r3,dpl
                                   4948 ;	move.c:32: write('\n');
      001752 75 82 0A         [24] 4949 	mov	dpl,#0x0a
      001755 C0 03            [24] 4950 	push	ar3
      001757 12r0BrDD         [24] 4951 	lcall	_write
                                   4952 ;	move.c:35: LCD_string_write("Move in progress...\n");
      00175A 90r06rE0         [24] 4953 	mov	dptr,#___str_31
      00175D 75 F0 80         [24] 4954 	mov	b,#0x80
      001760 12r0Cr4B         [24] 4955 	lcall	_LCD_string_write
      001763 D0 03            [24] 4956 	pop	ar3
      001765 D0 04            [24] 4957 	pop	ar4
      001767 D0 05            [24] 4958 	pop	ar5
      001769 D0 06            [24] 4959 	pop	ar6
      00176B D0 07            [24] 4960 	pop	ar7
                                   4961 ;	move.c:38: for (i = 0; i < size; i++) {
      00176D 79 00            [12] 4962 	mov	r1,#0x00
      00176F 7A 00            [12] 4963 	mov	r2,#0x00
      001771                       4964 00109$:
      001771 C0 04            [24] 4965 	push	ar4
      001773 C0 05            [24] 4966 	push	ar5
      001775 8B 00            [24] 4967 	mov	ar0,r3
      001777 7D 00            [12] 4968 	mov	r5,#0x00
      001779 C3               [12] 4969 	clr	c
      00177A E9               [12] 4970 	mov	a,r1
      00177B 98               [12] 4971 	subb	a,r0
      00177C EA               [12] 4972 	mov	a,r2
      00177D 9D               [12] 4973 	subb	a,r5
      00177E D0 05            [24] 4974 	pop	ar5
      001780 D0 04            [24] 4975 	pop	ar4
      001782 50 52            [24] 4976 	jnc	00104$
                                   4977 ;	move.c:40: if ((i + startAdd == __END_RAM__) || (i + targetAdd == __END_RAM__)) break;
      001784 C0 03            [24] 4978 	push	ar3
      001786 EE               [12] 4979 	mov	a,r6
      001787 29               [12] 4980 	add	a,r1
      001788 F8               [12] 4981 	mov	r0,a
      001789 EF               [12] 4982 	mov	a,r7
      00178A 3A               [12] 4983 	addc	a,r2
      00178B FB               [12] 4984 	mov	r3,a
      00178C B8 FF 07         [24] 4985 	cjne	r0,#0xff,00135$
      00178F BB FF 04         [24] 4986 	cjne	r3,#0xff,00135$
      001792 D0 03            [24] 4987 	pop	ar3
      001794 80 40            [24] 4988 	sjmp	00104$
      001796                       4989 00135$:
      001796 EC               [12] 4990 	mov	a,r4
      001797 29               [12] 4991 	add	a,r1
      001798 F8               [12] 4992 	mov	r0,a
      001799 ED               [12] 4993 	mov	a,r5
      00179A 3A               [12] 4994 	addc	a,r2
      00179B FB               [12] 4995 	mov	r3,a
      00179C B8 FF 07         [24] 4996 	cjne	r0,#0xff,00136$
      00179F BB FF 04         [24] 4997 	cjne	r3,#0xff,00136$
      0017A2 D0 03            [24] 4998 	pop	ar3
      0017A4 80 30            [24] 4999 	sjmp	00104$
      0017A6                       5000 00136$:
                                   5001 ;	move.c:45: IOM = 0;
                                   5002 ;	assignBit
      0017A6 C2 B4            [12] 5003 	clr	_P3_4
                                   5004 ;	move.c:46: origin = (uint16_t __xdata*)(startAdd + i);
      0017A8 E9               [12] 5005 	mov	a,r1
      0017A9 2E               [12] 5006 	add	a,r6
      0017AA F8               [12] 5007 	mov	r0,a
      0017AB EA               [12] 5008 	mov	a,r2
      0017AC 3F               [12] 5009 	addc	a,r7
      0017AD FB               [12] 5010 	mov	r3,a
      0017AE 88 82            [24] 5011 	mov	dpl,r0
      0017B0 8B 83            [24] 5012 	mov	dph,r3
                                   5013 ;	move.c:47: target = (uint16_t __xdata*)(targetAdd + i);
      0017B2 E9               [12] 5014 	mov	a,r1
      0017B3 2C               [12] 5015 	add	a,r4
      0017B4 F8               [12] 5016 	mov	r0,a
      0017B5 EA               [12] 5017 	mov	a,r2
      0017B6 3D               [12] 5018 	addc	a,r5
      0017B7 FB               [12] 5019 	mov	r3,a
      0017B8 88*52            [24] 5020 	mov	_move_target_65537_272,r0
      0017BA 8B*53            [24] 5021 	mov	(_move_target_65537_272 + 1),r3
                                   5022 ;	move.c:48: o = *origin;
      0017BC E0               [24] 5023 	movx	a,@dptr
                                   5024 ;	move.c:49: *target = o;
      0017BD F8               [12] 5025 	mov	r0,a
      0017BE 7B 00            [12] 5026 	mov	r3,#0x00
      0017C0 85*52 82         [24] 5027 	mov	dpl,_move_target_65537_272
      0017C3 85*53 83         [24] 5028 	mov	dph,(_move_target_65537_272 + 1)
      0017C6 E8               [12] 5029 	mov	a,r0
      0017C7 F0               [24] 5030 	movx	@dptr,a
      0017C8 EB               [12] 5031 	mov	a,r3
      0017C9 A3               [24] 5032 	inc	dptr
      0017CA F0               [24] 5033 	movx	@dptr,a
                                   5034 ;	move.c:50: IOM = 1;
                                   5035 ;	assignBit
      0017CB D2 B4            [12] 5036 	setb	_P3_4
                                   5037 ;	move.c:38: for (i = 0; i < size; i++) {
      0017CD 09               [12] 5038 	inc	r1
      0017CE B9 00 01         [24] 5039 	cjne	r1,#0x00,00137$
      0017D1 0A               [12] 5040 	inc	r2
      0017D2                       5041 00137$:
      0017D2 D0 03            [24] 5042 	pop	ar3
      0017D4 80 9B            [24] 5043 	sjmp	00109$
      0017D6                       5044 00104$:
                                   5045 ;	move.c:57: LCD_string_write("Done!\n");
      0017D6 90r06rF5         [24] 5046 	mov	dptr,#___str_32
      0017D9 75 F0 80         [24] 5047 	mov	b,#0x80
      0017DC 12r0Cr4B         [24] 5048 	lcall	_LCD_string_write
                                   5049 ;	move.c:58: LCD_string_write("Press 1 for menu\n");
      0017DF 90r06r0B         [24] 5050 	mov	dptr,#___str_18
      0017E2 75 F0 80         [24] 5051 	mov	b,#0x80
      0017E5 12r0Cr4B         [24] 5052 	lcall	_LCD_string_write
                                   5053 ;	move.c:60: do {
      0017E8                       5054 00105$:
                                   5055 ;	move.c:61: size = keyDetect();
      0017E8 12r0CrE4         [24] 5056 	lcall	_keyDetect
      0017EB AF 82            [24] 5057 	mov	r7,dpl
                                   5058 ;	move.c:62: } while (size != '1');
      0017ED BF 31 F8         [24] 5059 	cjne	r7,#0x31,00105$
                                   5060 ;	move.c:63: }
      0017F0 22               [24] 5061 	ret
                                   5062 ;------------------------------------------------------------
                                   5063 ;Allocation info for local variables in function 'editByte'
                                   5064 ;------------------------------------------------------------
                                   5065 ;ramAddress                Allocated to registers r6 r7 
                                   5066 ;add                       Allocated with name '_editByte_add_65536_276'
                                   5067 ;val                       Allocated with name '_editByte_val_65536_277'
                                   5068 ;new                       Allocated with name '_editByte_new_65536_277'
                                   5069 ;high                      Allocated with name '_editByte_high_65536_277'
                                   5070 ;low                       Allocated with name '_editByte_low_65536_277'
                                   5071 ;------------------------------------------------------------
                                   5072 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   5073 ;	-----------------------------------------
                                   5074 ;	 function editByte
                                   5075 ;	-----------------------------------------
      0017F1                       5076 _editByte:
      0017F1 AF 83            [24] 5077 	mov	r7,dph
      0017F3 E5 82            [12] 5078 	mov	a,dpl
      0017F5 90r00r22         [24] 5079 	mov	dptr,#_editByte_add_65536_276
      0017F8 F0               [24] 5080 	movx	@dptr,a
      0017F9 EF               [12] 5081 	mov	a,r7
      0017FA A3               [24] 5082 	inc	dptr
      0017FB F0               [24] 5083 	movx	@dptr,a
                                   5084 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      0017FC 90r00r22         [24] 5085 	mov	dptr,#_editByte_add_65536_276
      0017FF E0               [24] 5086 	movx	a,@dptr
      001800 FE               [12] 5087 	mov	r6,a
      001801 A3               [24] 5088 	inc	dptr
      001802 E0               [24] 5089 	movx	a,@dptr
      001803 FF               [12] 5090 	mov	r7,a
      001804 FC               [12] 5091 	mov	r4,a
                                   5092 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      001805 8E 05            [24] 5093 	mov	ar5,r6
                                   5094 ;	edit.c:16: asciiToHex(high);
      001807 8C 82            [24] 5095 	mov	dpl,r4
      001809 C0 07            [24] 5096 	push	ar7
      00180B C0 06            [24] 5097 	push	ar6
      00180D C0 05            [24] 5098 	push	ar5
      00180F C0 04            [24] 5099 	push	ar4
      001811 12r0ErBD         [24] 5100 	lcall	_asciiToHex
      001814 D0 04            [24] 5101 	pop	ar4
      001816 D0 05            [24] 5102 	pop	ar5
                                   5103 ;	edit.c:17: asciiToHex(low);
      001818 8D 82            [24] 5104 	mov	dpl,r5
      00181A C0 05            [24] 5105 	push	ar5
      00181C C0 04            [24] 5106 	push	ar4
      00181E 12r0ErBD         [24] 5107 	lcall	_asciiToHex
                                   5108 ;	edit.c:19: LCD_string_write(": ");
      001821 90r05r4B         [24] 5109 	mov	dptr,#___str_6
      001824 75 F0 80         [24] 5110 	mov	b,#0x80
      001827 12r0Cr4B         [24] 5111 	lcall	_LCD_string_write
      00182A D0 04            [24] 5112 	pop	ar4
      00182C D0 05            [24] 5113 	pop	ar5
      00182E D0 06            [24] 5114 	pop	ar6
      001830 D0 07            [24] 5115 	pop	ar7
                                   5116 ;	edit.c:22: IOM = 0;
                                   5117 ;	assignBit
      001832 C2 B4            [12] 5118 	clr	_P3_4
                                   5119 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   5120 ;	edit.c:24: val = *ramAddress;
      001834 8E 82            [24] 5121 	mov	dpl,r6
      001836 8F 83            [24] 5122 	mov	dph,r7
      001838 E0               [24] 5123 	movx	a,@dptr
      001839 FB               [12] 5124 	mov	r3,a
                                   5125 ;	edit.c:25: IOM = 1;
                                   5126 ;	assignBit
      00183A D2 B4            [12] 5127 	setb	_P3_4
                                   5128 ;	edit.c:28: asciiToHex(val);
      00183C 8B 82            [24] 5129 	mov	dpl,r3
      00183E C0 07            [24] 5130 	push	ar7
      001840 C0 06            [24] 5131 	push	ar6
      001842 C0 05            [24] 5132 	push	ar5
      001844 C0 04            [24] 5133 	push	ar4
      001846 12r0ErBD         [24] 5134 	lcall	_asciiToHex
                                   5135 ;	edit.c:31: write('\n');
      001849 75 82 0A         [24] 5136 	mov	dpl,#0x0a
      00184C 12r0BrDD         [24] 5137 	lcall	_write
                                   5138 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      00184F 90r06rFC         [24] 5139 	mov	dptr,#___str_33
      001852 75 F0 80         [24] 5140 	mov	b,#0x80
      001855 12r0Cr4B         [24] 5141 	lcall	_LCD_string_write
                                   5142 ;	edit.c:33: new = getByte();
      001858 12r10r9D         [24] 5143 	lcall	_getByte
      00185B AB 82            [24] 5144 	mov	r3,dpl
                                   5145 ;	edit.c:34: write('\n');
      00185D 75 82 0A         [24] 5146 	mov	dpl,#0x0a
      001860 C0 03            [24] 5147 	push	ar3
      001862 12r0BrDD         [24] 5148 	lcall	_write
      001865 D0 03            [24] 5149 	pop	ar3
      001867 D0 04            [24] 5150 	pop	ar4
      001869 D0 05            [24] 5151 	pop	ar5
      00186B D0 06            [24] 5152 	pop	ar6
      00186D D0 07            [24] 5153 	pop	ar7
                                   5154 ;	edit.c:37: IOM = 0;
                                   5155 ;	assignBit
      00186F C2 B4            [12] 5156 	clr	_P3_4
                                   5157 ;	edit.c:38: *ramAddress = new;
      001871 7A 00            [12] 5158 	mov	r2,#0x00
      001873 8E 82            [24] 5159 	mov	dpl,r6
      001875 8F 83            [24] 5160 	mov	dph,r7
      001877 EB               [12] 5161 	mov	a,r3
      001878 F0               [24] 5162 	movx	@dptr,a
      001879 EA               [12] 5163 	mov	a,r2
      00187A A3               [24] 5164 	inc	dptr
      00187B F0               [24] 5165 	movx	@dptr,a
                                   5166 ;	edit.c:39: val = *ramAddress;
                                   5167 ;	edit.c:40: IOM = 1;
                                   5168 ;	assignBit
      00187C D2 B4            [12] 5169 	setb	_P3_4
                                   5170 ;	edit.c:43: asciiToHex(high);
      00187E 8C 82            [24] 5171 	mov	dpl,r4
      001880 C0 05            [24] 5172 	push	ar5
      001882 C0 03            [24] 5173 	push	ar3
      001884 12r0ErBD         [24] 5174 	lcall	_asciiToHex
      001887 D0 03            [24] 5175 	pop	ar3
      001889 D0 05            [24] 5176 	pop	ar5
                                   5177 ;	edit.c:44: asciiToHex(low);
      00188B 8D 82            [24] 5178 	mov	dpl,r5
      00188D C0 03            [24] 5179 	push	ar3
      00188F 12r0ErBD         [24] 5180 	lcall	_asciiToHex
                                   5181 ;	edit.c:45: LCD_string_write(": ");
      001892 90r05r4B         [24] 5182 	mov	dptr,#___str_6
      001895 75 F0 80         [24] 5183 	mov	b,#0x80
      001898 12r0Cr4B         [24] 5184 	lcall	_LCD_string_write
      00189B D0 03            [24] 5185 	pop	ar3
                                   5186 ;	edit.c:46: asciiToHex(val);
      00189D 8B 82            [24] 5187 	mov	dpl,r3
      00189F 12r0ErBD         [24] 5188 	lcall	_asciiToHex
                                   5189 ;	edit.c:47: write('\n');
      0018A2 75 82 0A         [24] 5190 	mov	dpl,#0x0a
                                   5191 ;	edit.c:49: }
      0018A5 02r0BrDD         [24] 5192 	ljmp	_write
                                   5193 ;------------------------------------------------------------
                                   5194 ;Allocation info for local variables in function 'edit'
                                   5195 ;------------------------------------------------------------
                                   5196 ;input                     Allocated with name '_edit_input_65537_279'
                                   5197 ;add                       Allocated with name '_edit_add_65537_279'
                                   5198 ;------------------------------------------------------------
                                   5199 ;	edit.c:55: void edit() {
                                   5200 ;	-----------------------------------------
                                   5201 ;	 function edit
                                   5202 ;	-----------------------------------------
      0018A8                       5203 _edit:
                                   5204 ;	edit.c:57: fillScreen(GRAY);
      0018A8 90 D6 BA         [24] 5205 	mov	dptr,#0xd6ba
      0018AB 12r08r44         [24] 5206 	lcall	_fillScreen
                                   5207 ;	edit.c:58: setCursor(0, 0);
      0018AE E4               [12] 5208 	clr	a
      0018AF F5*00            [12] 5209 	mov	_setCursor_PARM_2,a
      0018B1 F5*01            [12] 5210 	mov	(_setCursor_PARM_2 + 1),a
      0018B3 90 00 00         [24] 5211 	mov	dptr,#0x0000
      0018B6 12r00rB6         [24] 5212 	lcall	_setCursor
                                   5213 ;	edit.c:59: setTextSize(2);
      0018B9 75 82 02         [24] 5214 	mov	dpl,#0x02
      0018BC 12r00rD0         [24] 5215 	lcall	_setTextSize
                                   5216 ;	edit.c:66: LCD_string_write("Enter address:\n");
      0018BF 90r07r0D         [24] 5217 	mov	dptr,#___str_34
      0018C2 75 F0 80         [24] 5218 	mov	b,#0x80
      0018C5 12r0Cr4B         [24] 5219 	lcall	_LCD_string_write
                                   5220 ;	edit.c:67: add = getAddress();
      0018C8 12r10r36         [24] 5221 	lcall	_getAddress
      0018CB AE 82            [24] 5222 	mov	r6,dpl
      0018CD AF 83            [24] 5223 	mov	r7,dph
                                   5224 ;	edit.c:68: write('\n');
      0018CF 75 82 0A         [24] 5225 	mov	dpl,#0x0a
      0018D2 C0 07            [24] 5226 	push	ar7
      0018D4 C0 06            [24] 5227 	push	ar6
      0018D6 12r0BrDD         [24] 5228 	lcall	_write
      0018D9 D0 06            [24] 5229 	pop	ar6
      0018DB D0 07            [24] 5230 	pop	ar7
                                   5231 ;	edit.c:71: editByte(add);
      0018DD 8E 82            [24] 5232 	mov	dpl,r6
      0018DF 8F 83            [24] 5233 	mov	dph,r7
      0018E1 C0 07            [24] 5234 	push	ar7
      0018E3 C0 06            [24] 5235 	push	ar6
      0018E5 12r17rF1         [24] 5236 	lcall	_editByte
      0018E8 D0 06            [24] 5237 	pop	ar6
      0018EA D0 07            [24] 5238 	pop	ar7
                                   5239 ;	edit.c:74: do {
      0018EC                       5240 00111$:
                                   5241 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      0018EC 90r06r0B         [24] 5242 	mov	dptr,#___str_18
      0018EF 75 F0 80         [24] 5243 	mov	b,#0x80
      0018F2 C0 07            [24] 5244 	push	ar7
      0018F4 C0 06            [24] 5245 	push	ar6
      0018F6 12r0Cr4B         [24] 5246 	lcall	_LCD_string_write
                                   5247 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      0018F9 90r07r1D         [24] 5248 	mov	dptr,#___str_35
      0018FC 75 F0 80         [24] 5249 	mov	b,#0x80
      0018FF 12r0Cr4B         [24] 5250 	lcall	_LCD_string_write
                                   5251 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      001902 90r07r34         [24] 5252 	mov	dptr,#___str_36
      001905 75 F0 80         [24] 5253 	mov	b,#0x80
      001908 12r0Cr4B         [24] 5254 	lcall	_LCD_string_write
                                   5255 ;	edit.c:78: input = keyDetect();
      00190B 12r0CrE4         [24] 5256 	lcall	_keyDetect
      00190E AD 82            [24] 5257 	mov	r5,dpl
      001910 D0 06            [24] 5258 	pop	ar6
      001912 D0 07            [24] 5259 	pop	ar7
      001914 90r00r24         [24] 5260 	mov	dptr,#_edit_input_65537_279
      001917 ED               [12] 5261 	mov	a,r5
      001918 F0               [24] 5262 	movx	@dptr,a
                                   5263 ;	edit.c:80: if (input == '1') {
      001919 BD 31 01         [24] 5264 	cjne	r5,#0x31,00141$
      00191C 22               [24] 5265 	ret
      00191D                       5266 00141$:
                                   5267 ;	edit.c:82: } else if (input =='2') {
      00191D BD 32 2F         [24] 5268 	cjne	r5,#0x32,00104$
                                   5269 ;	edit.c:83: fillScreen(GRAY);
      001920 90 D6 BA         [24] 5270 	mov	dptr,#0xd6ba
      001923 C0 07            [24] 5271 	push	ar7
      001925 C0 06            [24] 5272 	push	ar6
      001927 12r08r44         [24] 5273 	lcall	_fillScreen
                                   5274 ;	edit.c:84: setCursor(0, 0);
      00192A E4               [12] 5275 	clr	a
      00192B F5*00            [12] 5276 	mov	_setCursor_PARM_2,a
      00192D F5*01            [12] 5277 	mov	(_setCursor_PARM_2 + 1),a
      00192F 90 00 00         [24] 5278 	mov	dptr,#0x0000
      001932 12r00rB6         [24] 5279 	lcall	_setCursor
      001935 D0 06            [24] 5280 	pop	ar6
      001937 D0 07            [24] 5281 	pop	ar7
                                   5282 ;	edit.c:86: editByte(add);
      001939 8E 82            [24] 5283 	mov	dpl,r6
      00193B 8F 83            [24] 5284 	mov	dph,r7
      00193D C0 07            [24] 5285 	push	ar7
      00193F C0 06            [24] 5286 	push	ar6
      001941 12r17rF1         [24] 5287 	lcall	_editByte
      001944 D0 06            [24] 5288 	pop	ar6
      001946 D0 07            [24] 5289 	pop	ar7
                                   5290 ;	edit.c:88: input = 0;
      001948 90r00r24         [24] 5291 	mov	dptr,#_edit_input_65537_279
      00194B E4               [12] 5292 	clr	a
      00194C F0               [24] 5293 	movx	@dptr,a
      00194D 80 35            [24] 5294 	sjmp	00112$
      00194F                       5295 00104$:
                                   5296 ;	edit.c:89: } else if (input == '3') {
      00194F BD 33 32         [24] 5297 	cjne	r5,#0x33,00112$
                                   5298 ;	edit.c:90: fillScreen(GRAY);
      001952 90 D6 BA         [24] 5299 	mov	dptr,#0xd6ba
      001955 C0 07            [24] 5300 	push	ar7
      001957 C0 06            [24] 5301 	push	ar6
      001959 12r08r44         [24] 5302 	lcall	_fillScreen
                                   5303 ;	edit.c:91: setCursor(0, 0);
      00195C E4               [12] 5304 	clr	a
      00195D F5*00            [12] 5305 	mov	_setCursor_PARM_2,a
      00195F F5*01            [12] 5306 	mov	(_setCursor_PARM_2 + 1),a
      001961 90 00 00         [24] 5307 	mov	dptr,#0x0000
      001964 12r00rB6         [24] 5308 	lcall	_setCursor
      001967 D0 06            [24] 5309 	pop	ar6
      001969 D0 07            [24] 5310 	pop	ar7
                                   5311 ;	edit.c:93: editByte(++add);
      00196B 0E               [12] 5312 	inc	r6
      00196C BE 00 01         [24] 5313 	cjne	r6,#0x00,00146$
      00196F 0F               [12] 5314 	inc	r7
      001970                       5315 00146$:
      001970 8E 82            [24] 5316 	mov	dpl,r6
      001972 8F 83            [24] 5317 	mov	dph,r7
      001974 C0 07            [24] 5318 	push	ar7
      001976 C0 06            [24] 5319 	push	ar6
      001978 12r17rF1         [24] 5320 	lcall	_editByte
      00197B D0 06            [24] 5321 	pop	ar6
      00197D D0 07            [24] 5322 	pop	ar7
                                   5323 ;	edit.c:95: input = 0;
      00197F 90r00r24         [24] 5324 	mov	dptr,#_edit_input_65537_279
      001982 E4               [12] 5325 	clr	a
      001983 F0               [24] 5326 	movx	@dptr,a
      001984                       5327 00112$:
                                   5328 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      001984 90r00r24         [24] 5329 	mov	dptr,#_edit_input_65537_279
      001987 E0               [24] 5330 	movx	a,@dptr
      001988 FD               [12] 5331 	mov	r5,a
      001989 BD 31 01         [24] 5332 	cjne	r5,#0x31,00147$
      00198C 22               [24] 5333 	ret
      00198D                       5334 00147$:
      00198D BD 32 01         [24] 5335 	cjne	r5,#0x32,00148$
      001990 22               [24] 5336 	ret
      001991                       5337 00148$:
      001991 BD 33 01         [24] 5338 	cjne	r5,#0x33,00149$
      001994 22               [24] 5339 	ret
      001995                       5340 00149$:
      001995 02r18rEC         [24] 5341 	ljmp	00111$
                                   5342 ;	edit.c:99: }
      001998 22               [24] 5343 	ret
                                   5344 ;------------------------------------------------------------
                                   5345 ;Allocation info for local variables in function 'printFind'
                                   5346 ;------------------------------------------------------------
                                   5347 ;ramAddress                Allocated to registers 
                                   5348 ;n                         Allocated with name '_printFind_PARM_2'
                                   5349 ;key                       Allocated with name '_printFind_PARM_3'
                                   5350 ;index                     Allocated with name '_printFind_PARM_4'
                                   5351 ;start                     Allocated with name '_printFind_start_65536_284'
                                   5352 ;i                         Allocated with name '_printFind_i_65537_286'
                                   5353 ;found                     Allocated with name '_printFind_found_65537_286'
                                   5354 ;high                      Allocated with name '_printFind_high_65537_286'
                                   5355 ;low                       Allocated with name '_printFind_low_65537_286'
                                   5356 ;------------------------------------------------------------
                                   5357 ;	find2.c:9: void printFind(__xdata uint16_t start, __xdata uint8_t n, __xdata uint8_t key, __xdata uint8_t index) {
                                   5358 ;	-----------------------------------------
                                   5359 ;	 function printFind
                                   5360 ;	-----------------------------------------
      001999                       5361 _printFind:
      001999 AF 83            [24] 5362 	mov	r7,dph
      00199B E5 82            [12] 5363 	mov	a,dpl
      00199D 90r00r28         [24] 5364 	mov	dptr,#_printFind_start_65536_284
      0019A0 F0               [24] 5365 	movx	@dptr,a
      0019A1 EF               [12] 5366 	mov	a,r7
      0019A2 A3               [24] 5367 	inc	dptr
      0019A3 F0               [24] 5368 	movx	@dptr,a
                                   5369 ;	find2.c:11: fillScreen(GRAY);
      0019A4 90 D6 BA         [24] 5370 	mov	dptr,#0xd6ba
      0019A7 12r08r44         [24] 5371 	lcall	_fillScreen
                                   5372 ;	find2.c:12: setCursor(0, 0);
      0019AA E4               [12] 5373 	clr	a
      0019AB F5*00            [12] 5374 	mov	_setCursor_PARM_2,a
      0019AD F5*01            [12] 5375 	mov	(_setCursor_PARM_2 + 1),a
      0019AF 90 00 00         [24] 5376 	mov	dptr,#0x0000
      0019B2 12r00rB6         [24] 5377 	lcall	_setCursor
                                   5378 ;	find2.c:13: setTextSize(2);
      0019B5 75 82 02         [24] 5379 	mov	dpl,#0x02
      0019B8 12r00rD0         [24] 5380 	lcall	_setTextSize
                                   5381 ;	find2.c:24: for (i = 0; i < n; i++) {
      0019BB 90r00r28         [24] 5382 	mov	dptr,#_printFind_start_65536_284
      0019BE E0               [24] 5383 	movx	a,@dptr
      0019BF FE               [12] 5384 	mov	r6,a
      0019C0 A3               [24] 5385 	inc	dptr
      0019C1 E0               [24] 5386 	movx	a,@dptr
      0019C2 FF               [12] 5387 	mov	r7,a
      0019C3 90r00r26         [24] 5388 	mov	dptr,#_printFind_PARM_3
      0019C6 E0               [24] 5389 	movx	a,@dptr
      0019C7 FD               [12] 5390 	mov	r5,a
      0019C8 90r00r25         [24] 5391 	mov	dptr,#_printFind_PARM_2
      0019CB E0               [24] 5392 	movx	a,@dptr
      0019CC FC               [12] 5393 	mov	r4,a
      0019CD 90r00r27         [24] 5394 	mov	dptr,#_printFind_PARM_4
      0019D0 E0               [24] 5395 	movx	a,@dptr
      0019D1 FB               [12] 5396 	mov	r3,a
      0019D2 79 00            [12] 5397 	mov	r1,#0x00
      0019D4 7A 00            [12] 5398 	mov	r2,#0x00
      0019D6                       5399 00105$:
      0019D6 C0 05            [24] 5400 	push	ar5
      0019D8 8C 00            [24] 5401 	mov	ar0,r4
      0019DA 7D 00            [12] 5402 	mov	r5,#0x00
      0019DC C3               [12] 5403 	clr	c
      0019DD E9               [12] 5404 	mov	a,r1
      0019DE 98               [12] 5405 	subb	a,r0
      0019DF EA               [12] 5406 	mov	a,r2
      0019E0 9D               [12] 5407 	subb	a,r5
      0019E1 D0 05            [24] 5408 	pop	ar5
      0019E3 40 01            [24] 5409 	jc	00122$
      0019E5 22               [24] 5410 	ret
      0019E6                       5411 00122$:
                                   5412 ;	find2.c:26: IOM = 0;
      0019E6 C0 04            [24] 5413 	push	ar4
                                   5414 ;	assignBit
      0019E8 C2 B4            [12] 5415 	clr	_P3_4
                                   5416 ;	find2.c:27: ramAddress = (uint16_t __xdata*)(start + i);
      0019EA E9               [12] 5417 	mov	a,r1
      0019EB 2E               [12] 5418 	add	a,r6
      0019EC F8               [12] 5419 	mov	r0,a
      0019ED EA               [12] 5420 	mov	a,r2
      0019EE 3F               [12] 5421 	addc	a,r7
      0019EF FC               [12] 5422 	mov	r4,a
      0019F0 88 82            [24] 5423 	mov	dpl,r0
      0019F2 8C 83            [24] 5424 	mov	dph,r4
                                   5425 ;	find2.c:28: found = *ramAddress;
      0019F4 E0               [24] 5426 	movx	a,@dptr
      0019F5 FC               [12] 5427 	mov	r4,a
                                   5428 ;	find2.c:29: IOM = 1;
                                   5429 ;	assignBit
      0019F6 D2 B4            [12] 5430 	setb	_P3_4
                                   5431 ;	find2.c:32: if (found == key) {
      0019F8 EC               [12] 5432 	mov	a,r4
      0019F9 B5 05 02         [24] 5433 	cjne	a,ar5,00123$
      0019FC 80 04            [24] 5434 	sjmp	00124$
      0019FE                       5435 00123$:
      0019FE D0 04            [24] 5436 	pop	ar4
      001A00 80 7C            [24] 5437 	sjmp	00106$
      001A02                       5438 00124$:
      001A02 D0 04            [24] 5439 	pop	ar4
                                   5440 ;	find2.c:34: asciiToHex(index++);
      001A04 C0 05            [24] 5441 	push	ar5
      001A06 8B 82            [24] 5442 	mov	dpl,r3
      001A08 0B               [12] 5443 	inc	r3
      001A09 C0 07            [24] 5444 	push	ar7
      001A0B C0 06            [24] 5445 	push	ar6
      001A0D C0 05            [24] 5446 	push	ar5
      001A0F C0 04            [24] 5447 	push	ar4
      001A11 C0 03            [24] 5448 	push	ar3
      001A13 C0 02            [24] 5449 	push	ar2
      001A15 C0 01            [24] 5450 	push	ar1
      001A17 12r0ErBD         [24] 5451 	lcall	_asciiToHex
                                   5452 ;	find2.c:35: LCD_string_write(": ");
      001A1A 90r05r4B         [24] 5453 	mov	dptr,#___str_6
      001A1D 75 F0 80         [24] 5454 	mov	b,#0x80
      001A20 12r0Cr4B         [24] 5455 	lcall	_LCD_string_write
      001A23 D0 01            [24] 5456 	pop	ar1
      001A25 D0 02            [24] 5457 	pop	ar2
      001A27 D0 03            [24] 5458 	pop	ar3
      001A29 D0 04            [24] 5459 	pop	ar4
      001A2B D0 05            [24] 5460 	pop	ar5
      001A2D D0 06            [24] 5461 	pop	ar6
      001A2F D0 07            [24] 5462 	pop	ar7
                                   5463 ;	find2.c:37: high = HIGHBYTE(start + i);
      001A31 E9               [12] 5464 	mov	a,r1
      001A32 2E               [12] 5465 	add	a,r6
      001A33 EA               [12] 5466 	mov	a,r2
      001A34 3F               [12] 5467 	addc	a,r7
      001A35 F5 82            [12] 5468 	mov	dpl,a
                                   5469 ;	find2.c:38: low = LOWBYTE(start + i);
      001A37 8E 05            [24] 5470 	mov	ar5,r6
      001A39 89 00            [24] 5471 	mov	ar0,r1
      001A3B E8               [12] 5472 	mov	a,r0
      001A3C 2D               [12] 5473 	add	a,r5
      001A3D FD               [12] 5474 	mov	r5,a
                                   5475 ;	find2.c:41: asciiToHex(high);
      001A3E C0 07            [24] 5476 	push	ar7
      001A40 C0 06            [24] 5477 	push	ar6
      001A42 C0 05            [24] 5478 	push	ar5
      001A44 C0 04            [24] 5479 	push	ar4
      001A46 C0 03            [24] 5480 	push	ar3
      001A48 C0 02            [24] 5481 	push	ar2
      001A4A C0 01            [24] 5482 	push	ar1
      001A4C 12r0ErBD         [24] 5483 	lcall	_asciiToHex
      001A4F D0 01            [24] 5484 	pop	ar1
      001A51 D0 02            [24] 5485 	pop	ar2
      001A53 D0 03            [24] 5486 	pop	ar3
      001A55 D0 04            [24] 5487 	pop	ar4
      001A57 D0 05            [24] 5488 	pop	ar5
                                   5489 ;	find2.c:42: asciiToHex(low);
      001A59 8D 82            [24] 5490 	mov	dpl,r5
      001A5B C0 05            [24] 5491 	push	ar5
      001A5D C0 04            [24] 5492 	push	ar4
      001A5F C0 03            [24] 5493 	push	ar3
      001A61 C0 02            [24] 5494 	push	ar2
      001A63 C0 01            [24] 5495 	push	ar1
      001A65 12r0ErBD         [24] 5496 	lcall	_asciiToHex
                                   5497 ;	find2.c:43: write('\n');
      001A68 75 82 0A         [24] 5498 	mov	dpl,#0x0a
      001A6B 12r0BrDD         [24] 5499 	lcall	_write
      001A6E D0 01            [24] 5500 	pop	ar1
      001A70 D0 02            [24] 5501 	pop	ar2
      001A72 D0 03            [24] 5502 	pop	ar3
      001A74 D0 04            [24] 5503 	pop	ar4
      001A76 D0 05            [24] 5504 	pop	ar5
      001A78 D0 06            [24] 5505 	pop	ar6
      001A7A D0 07            [24] 5506 	pop	ar7
                                   5507 ;	find2.c:24: for (i = 0; i < n; i++) {
      001A7C D0 05            [24] 5508 	pop	ar5
                                   5509 ;	find2.c:43: write('\n');
      001A7E                       5510 00106$:
                                   5511 ;	find2.c:24: for (i = 0; i < n; i++) {
      001A7E 09               [12] 5512 	inc	r1
      001A7F B9 00 01         [24] 5513 	cjne	r1,#0x00,00125$
      001A82 0A               [12] 5514 	inc	r2
      001A83                       5515 00125$:
                                   5516 ;	find2.c:47: }
      001A83 02r19rD6         [24] 5517 	ljmp	00105$
                                   5518 ;------------------------------------------------------------
                                   5519 ;Allocation info for local variables in function 'find'
                                   5520 ;------------------------------------------------------------
                                   5521 ;ramAddress                Allocated to registers 
                                   5522 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   5523 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   5524 ;key                       Allocated with name '_find_key_65537_291'
                                   5525 ;size                      Allocated with name '_find_size_65537_291'
                                   5526 ;input                     Allocated with name '_find_input_65537_291'
                                   5527 ;page                      Allocated with name '_find_page_65537_291'
                                   5528 ;index                     Allocated with name '_find_index_65537_291'
                                   5529 ;i                         Allocated with name '_find_i_65537_291'
                                   5530 ;n                         Allocated with name '_find_n_65537_291'
                                   5531 ;found                     Allocated with name '_find_found_65537_291'
                                   5532 ;address                   Allocated with name '_find_address_65537_291'
                                   5533 ;------------------------------------------------------------
                                   5534 ;	find2.c:53: void find() {
                                   5535 ;	-----------------------------------------
                                   5536 ;	 function find
                                   5537 ;	-----------------------------------------
      001A86                       5538 _find:
                                   5539 ;	find2.c:55: fillScreen(GRAY);
      001A86 90 D6 BA         [24] 5540 	mov	dptr,#0xd6ba
      001A89 12r08r44         [24] 5541 	lcall	_fillScreen
                                   5542 ;	find2.c:56: setCursor(0, 0);
      001A8C E4               [12] 5543 	clr	a
      001A8D F5*00            [12] 5544 	mov	_setCursor_PARM_2,a
      001A8F F5*01            [12] 5545 	mov	(_setCursor_PARM_2 + 1),a
      001A91 90 00 00         [24] 5546 	mov	dptr,#0x0000
      001A94 12r00rB6         [24] 5547 	lcall	_setCursor
                                   5548 ;	find2.c:57: setTextSize(2);
      001A97 75 82 02         [24] 5549 	mov	dpl,#0x02
      001A9A 12r00rD0         [24] 5550 	lcall	_setTextSize
                                   5551 ;	find2.c:72: page = 1;
      001A9D 90r00r2A         [24] 5552 	mov	dptr,#_find_page_65537_291
      001AA0 74 01            [12] 5553 	mov	a,#0x01
      001AA2 F0               [24] 5554 	movx	@dptr,a
                                   5555 ;	find2.c:73: index = 0;
      001AA3 90r00r2B         [24] 5556 	mov	dptr,#_find_index_65537_291
      001AA6 E4               [12] 5557 	clr	a
      001AA7 F0               [24] 5558 	movx	@dptr,a
                                   5559 ;	find2.c:77: LCD_string_write("Enter byte to search:\n");
      001AA8 90r07r52         [24] 5560 	mov	dptr,#___str_37
      001AAB 75 F0 80         [24] 5561 	mov	b,#0x80
      001AAE 12r0Cr4B         [24] 5562 	lcall	_LCD_string_write
                                   5563 ;	find2.c:78: key = getByte();
      001AB1 12r10r9D         [24] 5564 	lcall	_getByte
      001AB4 AF 82            [24] 5565 	mov	r7,dpl
                                   5566 ;	find2.c:79: write('\n');								// newline for next read
      001AB6 75 82 0A         [24] 5567 	mov	dpl,#0x0a
      001AB9 C0 07            [24] 5568 	push	ar7
      001ABB 12r0BrDD         [24] 5569 	lcall	_write
                                   5570 ;	find2.c:82: LCD_string_write("Enter start address:\n");
      001ABE 90r05r4E         [24] 5571 	mov	dptr,#___str_7
      001AC1 75 F0 80         [24] 5572 	mov	b,#0x80
      001AC4 12r0Cr4B         [24] 5573 	lcall	_LCD_string_write
                                   5574 ;	find2.c:83: address = getAddress();
      001AC7 12r10r36         [24] 5575 	lcall	_getAddress
      001ACA AD 82            [24] 5576 	mov	r5,dpl
      001ACC AE 83            [24] 5577 	mov	r6,dph
      001ACE 90r00r2C         [24] 5578 	mov	dptr,#_find_address_65537_291
      001AD1 ED               [12] 5579 	mov	a,r5
      001AD2 F0               [24] 5580 	movx	@dptr,a
      001AD3 EE               [12] 5581 	mov	a,r6
      001AD4 A3               [24] 5582 	inc	dptr
      001AD5 F0               [24] 5583 	movx	@dptr,a
                                   5584 ;	find2.c:84: write('\n');								// newline for next read
      001AD6 75 82 0A         [24] 5585 	mov	dpl,#0x0a
      001AD9 C0 06            [24] 5586 	push	ar6
      001ADB C0 05            [24] 5587 	push	ar5
      001ADD 12r0BrDD         [24] 5588 	lcall	_write
                                   5589 ;	find2.c:87: LCD_string_write("Enter block size:\n");
      001AE0 90r05rAE         [24] 5590 	mov	dptr,#___str_14
      001AE3 75 F0 80         [24] 5591 	mov	b,#0x80
      001AE6 12r0Cr4B         [24] 5592 	lcall	_LCD_string_write
                                   5593 ;	find2.c:88: size = getByte();
      001AE9 12r10r9D         [24] 5594 	lcall	_getByte
      001AEC AC 82            [24] 5595 	mov	r4,dpl
                                   5596 ;	find2.c:89: write('\n');
      001AEE 75 82 0A         [24] 5597 	mov	dpl,#0x0a
      001AF1 C0 04            [24] 5598 	push	ar4
      001AF3 12r0BrDD         [24] 5599 	lcall	_write
      001AF6 D0 04            [24] 5600 	pop	ar4
      001AF8 D0 05            [24] 5601 	pop	ar5
      001AFA D0 06            [24] 5602 	pop	ar6
      001AFC D0 07            [24] 5603 	pop	ar7
                                   5604 ;	find2.c:92: for (i = 0; i < size; i++) {
      001AFE 7B 00            [12] 5605 	mov	r3,#0x00
      001B00 7A 00            [12] 5606 	mov	r2,#0x00
      001B02                       5607 00132$:
      001B02 C3               [12] 5608 	clr	c
      001B03 EA               [12] 5609 	mov	a,r2
      001B04 9C               [12] 5610 	subb	a,r4
      001B05 50 31            [24] 5611 	jnc	00103$
                                   5612 ;	find2.c:93: IOM = 0;
      001B07 C0 04            [24] 5613 	push	ar4
                                   5614 ;	assignBit
      001B09 C2 B4            [12] 5615 	clr	_P3_4
                                   5616 ;	find2.c:94: ramAddress = (uint16_t __xdata*)(address + i);
      001B0B 8A*54            [24] 5617 	mov	_find_sloc0_1_0,r2
      001B0D 75*55 00         [24] 5618 	mov	(_find_sloc0_1_0 + 1),#0x00
      001B10 8D*56            [24] 5619 	mov	_find_sloc1_1_0,r5
      001B12 8E*57            [24] 5620 	mov	(_find_sloc1_1_0 + 1),r6
      001B14 A8*54            [24] 5621 	mov	r0,_find_sloc0_1_0
      001B16 AC*55            [24] 5622 	mov	r4,(_find_sloc0_1_0 + 1)
      001B18 E8               [12] 5623 	mov	a,r0
      001B19 25*56            [12] 5624 	add	a,_find_sloc1_1_0
      001B1B F8               [12] 5625 	mov	r0,a
      001B1C EC               [12] 5626 	mov	a,r4
      001B1D 35*57            [12] 5627 	addc	a,(_find_sloc1_1_0 + 1)
      001B1F FC               [12] 5628 	mov	r4,a
      001B20 88 82            [24] 5629 	mov	dpl,r0
      001B22 8C 83            [24] 5630 	mov	dph,r4
                                   5631 ;	find2.c:95: found = *ramAddress;
      001B24 E0               [24] 5632 	movx	a,@dptr
      001B25 FC               [12] 5633 	mov	r4,a
                                   5634 ;	find2.c:96: IOM = 1;
                                   5635 ;	assignBit
      001B26 D2 B4            [12] 5636 	setb	_P3_4
                                   5637 ;	find2.c:98: if (found == key) {
      001B28 EC               [12] 5638 	mov	a,r4
      001B29 B5 07 02         [24] 5639 	cjne	a,ar7,00194$
      001B2C 80 04            [24] 5640 	sjmp	00195$
      001B2E                       5641 00194$:
      001B2E D0 04            [24] 5642 	pop	ar4
      001B30 80 03            [24] 5643 	sjmp	00133$
      001B32                       5644 00195$:
      001B32 D0 04            [24] 5645 	pop	ar4
                                   5646 ;	find2.c:99: n++;
      001B34 0B               [12] 5647 	inc	r3
      001B35                       5648 00133$:
                                   5649 ;	find2.c:92: for (i = 0; i < size; i++) {
      001B35 0A               [12] 5650 	inc	r2
      001B36 80 CA            [24] 5651 	sjmp	00132$
      001B38                       5652 00103$:
                                   5653 ;	find2.c:104: if (n < NUM) {
      001B38 BB 0F 00         [24] 5654 	cjne	r3,#0x0f,00196$
      001B3B                       5655 00196$:
      001B3B 50 24            [24] 5656 	jnc	00105$
                                   5657 ;	find2.c:105: printFind(address, n, key, index);
      001B3D 90r00r25         [24] 5658 	mov	dptr,#_printFind_PARM_2
      001B40 EB               [12] 5659 	mov	a,r3
      001B41 F0               [24] 5660 	movx	@dptr,a
      001B42 90r00r26         [24] 5661 	mov	dptr,#_printFind_PARM_3
      001B45 EF               [12] 5662 	mov	a,r7
      001B46 F0               [24] 5663 	movx	@dptr,a
      001B47 90r00r27         [24] 5664 	mov	dptr,#_printFind_PARM_4
      001B4A E4               [12] 5665 	clr	a
      001B4B F0               [24] 5666 	movx	@dptr,a
      001B4C 8D 82            [24] 5667 	mov	dpl,r5
      001B4E 8E 83            [24] 5668 	mov	dph,r6
      001B50 C0 07            [24] 5669 	push	ar7
      001B52 C0 04            [24] 5670 	push	ar4
      001B54 C0 03            [24] 5671 	push	ar3
      001B56 12r19r99         [24] 5672 	lcall	_printFind
      001B59 D0 03            [24] 5673 	pop	ar3
      001B5B D0 04            [24] 5674 	pop	ar4
      001B5D D0 07            [24] 5675 	pop	ar7
      001B5F 80 29            [24] 5676 	sjmp	00147$
      001B61                       5677 00105$:
                                   5678 ;	find2.c:107: printFind(address, NUM, key, index);
      001B61 90r00r25         [24] 5679 	mov	dptr,#_printFind_PARM_2
      001B64 74 0F            [12] 5680 	mov	a,#0x0f
      001B66 F0               [24] 5681 	movx	@dptr,a
      001B67 90r00r26         [24] 5682 	mov	dptr,#_printFind_PARM_3
      001B6A EF               [12] 5683 	mov	a,r7
      001B6B F0               [24] 5684 	movx	@dptr,a
      001B6C 90r00r27         [24] 5685 	mov	dptr,#_printFind_PARM_4
      001B6F E4               [12] 5686 	clr	a
      001B70 F0               [24] 5687 	movx	@dptr,a
      001B71 8D 82            [24] 5688 	mov	dpl,r5
      001B73 8E 83            [24] 5689 	mov	dph,r6
      001B75 C0 07            [24] 5690 	push	ar7
      001B77 C0 04            [24] 5691 	push	ar4
      001B79 C0 03            [24] 5692 	push	ar3
      001B7B 12r19r99         [24] 5693 	lcall	_printFind
      001B7E D0 03            [24] 5694 	pop	ar3
      001B80 D0 04            [24] 5695 	pop	ar4
      001B82 D0 07            [24] 5696 	pop	ar7
                                   5697 ;	find2.c:108: index += NUM;
      001B84 90r00r2B         [24] 5698 	mov	dptr,#_find_index_65537_291
      001B87 74 0F            [12] 5699 	mov	a,#0x0f
      001B89 F0               [24] 5700 	movx	@dptr,a
                                   5701 ;	find2.c:111: do {
      001B8A                       5702 00147$:
      001B8A C3               [12] 5703 	clr	c
      001B8B 74 0F            [12] 5704 	mov	a,#0x0f
      001B8D 9B               [12] 5705 	subb	a,r3
      001B8E E4               [12] 5706 	clr	a
      001B8F 33               [12] 5707 	rlc	a
      001B90 FE               [12] 5708 	mov	r6,a
      001B91 8B F0            [24] 5709 	mov	b,r3
      001B93 EC               [12] 5710 	mov	a,r4
      001B94 84               [48] 5711 	div	ab
      001B95 F5*56            [12] 5712 	mov	_find_sloc1_1_0,a
      001B97 8B 04            [24] 5713 	mov	ar4,r3
      001B99                       5714 00128$:
                                   5715 ;	find2.c:113: if (n == 0) {
      001B99 EC               [12] 5716 	mov	a,r4
      001B9A 70 18            [24] 5717 	jnz	00116$
                                   5718 ;	find2.c:114: LCD_string_write("None found!\n");
      001B9C 90r07r69         [24] 5719 	mov	dptr,#___str_38
      001B9F 75 F0 80         [24] 5720 	mov	b,#0x80
      001BA2 C0 07            [24] 5721 	push	ar7
      001BA4 C0 06            [24] 5722 	push	ar6
      001BA6 C0 04            [24] 5723 	push	ar4
      001BA8 12r0Cr4B         [24] 5724 	lcall	_LCD_string_write
      001BAB D0 04            [24] 5725 	pop	ar4
      001BAD D0 06            [24] 5726 	pop	ar6
      001BAF D0 07            [24] 5727 	pop	ar7
      001BB1 02r1Cr40         [24] 5728 	ljmp	00117$
      001BB4                       5729 00116$:
                                   5730 ;	find2.c:115: } else if (page != ((n / NUM) + 1) && n > NUM) {
      001BB4 8C 02            [24] 5731 	mov	ar2,r4
      001BB6 7B 00            [12] 5732 	mov	r3,#0x00
      001BB8 75*00 0F         [24] 5733 	mov	__divsint_PARM_2,#0x0f
                                   5734 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001BBB 8B*01            [24] 5735 	mov	(__divsint_PARM_2 + 1),r3
      001BBD 8A 82            [24] 5736 	mov	dpl,r2
      001BBF 8B 83            [24] 5737 	mov	dph,r3
      001BC1 C0 07            [24] 5738 	push	ar7
      001BC3 C0 06            [24] 5739 	push	ar6
      001BC5 C0 04            [24] 5740 	push	ar4
      001BC7 12r00r00         [24] 5741 	lcall	__divsint
      001BCA E5 82            [12] 5742 	mov	a,dpl
      001BCC 85 83 F0         [24] 5743 	mov	b,dph
      001BCF D0 04            [24] 5744 	pop	ar4
      001BD1 D0 06            [24] 5745 	pop	ar6
      001BD3 D0 07            [24] 5746 	pop	ar7
      001BD5 24 01            [12] 5747 	add	a,#0x01
      001BD7 FA               [12] 5748 	mov	r2,a
      001BD8 E4               [12] 5749 	clr	a
      001BD9 35 F0            [12] 5750 	addc	a,b
      001BDB FB               [12] 5751 	mov	r3,a
      001BDC 90r00r2A         [24] 5752 	mov	dptr,#_find_page_65537_291
      001BDF E0               [24] 5753 	movx	a,@dptr
      001BE0 79 00            [12] 5754 	mov	r1,#0x00
      001BE2 B5 02 06         [24] 5755 	cjne	a,ar2,00199$
      001BE5 E9               [12] 5756 	mov	a,r1
      001BE6 B5 03 02         [24] 5757 	cjne	a,ar3,00199$
      001BE9 80 1C            [24] 5758 	sjmp	00112$
      001BEB                       5759 00199$:
      001BEB EC               [12] 5760 	mov	a,r4
      001BEC 24 F0            [12] 5761 	add	a,#0xff - 0x0f
      001BEE 50 17            [24] 5762 	jnc	00112$
                                   5763 ;	find2.c:116: LCD_string_write("Press B for next\n");
      001BF0 90r05rC1         [24] 5764 	mov	dptr,#___str_15
      001BF3 75 F0 80         [24] 5765 	mov	b,#0x80
      001BF6 C0 07            [24] 5766 	push	ar7
      001BF8 C0 06            [24] 5767 	push	ar6
      001BFA C0 04            [24] 5768 	push	ar4
      001BFC 12r0Cr4B         [24] 5769 	lcall	_LCD_string_write
      001BFF D0 04            [24] 5770 	pop	ar4
      001C01 D0 06            [24] 5771 	pop	ar6
      001C03 D0 07            [24] 5772 	pop	ar7
      001C05 80 39            [24] 5773 	sjmp	00117$
      001C07                       5774 00112$:
                                   5775 ;	find2.c:117: } else if (page != 1 && n > NUM) {
      001C07 90r00r2A         [24] 5776 	mov	dptr,#_find_page_65537_291
      001C0A E0               [24] 5777 	movx	a,@dptr
      001C0B FB               [12] 5778 	mov	r3,a
      001C0C BB 01 02         [24] 5779 	cjne	r3,#0x01,00201$
      001C0F 80 1A            [24] 5780 	sjmp	00108$
      001C11                       5781 00201$:
      001C11 EE               [12] 5782 	mov	a,r6
      001C12 60 17            [24] 5783 	jz	00108$
                                   5784 ;	find2.c:118: LCD_string_write("Press A for previous\n");
      001C14 90r05rD3         [24] 5785 	mov	dptr,#___str_16
      001C17 75 F0 80         [24] 5786 	mov	b,#0x80
      001C1A C0 07            [24] 5787 	push	ar7
      001C1C C0 06            [24] 5788 	push	ar6
      001C1E C0 04            [24] 5789 	push	ar4
      001C20 12r0Cr4B         [24] 5790 	lcall	_LCD_string_write
      001C23 D0 04            [24] 5791 	pop	ar4
      001C25 D0 06            [24] 5792 	pop	ar6
      001C27 D0 07            [24] 5793 	pop	ar7
      001C29 80 15            [24] 5794 	sjmp	00117$
      001C2B                       5795 00108$:
                                   5796 ;	find2.c:120: LCD_string_write("Press A for previous, B for next\n");
      001C2B 90r05rE9         [24] 5797 	mov	dptr,#___str_17
      001C2E 75 F0 80         [24] 5798 	mov	b,#0x80
      001C31 C0 07            [24] 5799 	push	ar7
      001C33 C0 06            [24] 5800 	push	ar6
      001C35 C0 04            [24] 5801 	push	ar4
      001C37 12r0Cr4B         [24] 5802 	lcall	_LCD_string_write
      001C3A D0 04            [24] 5803 	pop	ar4
      001C3C D0 06            [24] 5804 	pop	ar6
      001C3E D0 07            [24] 5805 	pop	ar7
      001C40                       5806 00117$:
                                   5807 ;	find2.c:123: LCD_string_write("Press 1 for menu\n");
      001C40 90r06r0B         [24] 5808 	mov	dptr,#___str_18
      001C43 75 F0 80         [24] 5809 	mov	b,#0x80
      001C46 C0 07            [24] 5810 	push	ar7
      001C48 C0 06            [24] 5811 	push	ar6
      001C4A C0 04            [24] 5812 	push	ar4
      001C4C 12r0Cr4B         [24] 5813 	lcall	_LCD_string_write
                                   5814 ;	find2.c:125: input = keyDetect();
      001C4F 12r0CrE4         [24] 5815 	lcall	_keyDetect
      001C52 AB 82            [24] 5816 	mov	r3,dpl
      001C54 D0 04            [24] 5817 	pop	ar4
      001C56 D0 06            [24] 5818 	pop	ar6
      001C58 D0 07            [24] 5819 	pop	ar7
                                   5820 ;	find2.c:128: if (input == 'B' && page != ((size / n) + 1)) {		// next
      001C5A BB 42 02         [24] 5821 	cjne	r3,#0x42,00203$
      001C5D 80 02            [24] 5822 	sjmp	00204$
      001C5F                       5823 00203$:
      001C5F 80 7B            [24] 5824 	sjmp	00125$
      001C61                       5825 00204$:
      001C61 C0 06            [24] 5826 	push	ar6
      001C63 A9*56            [24] 5827 	mov	r1,_find_sloc1_1_0
      001C65 7A 00            [12] 5828 	mov	r2,#0x00
      001C67 09               [12] 5829 	inc	r1
      001C68 B9 00 01         [24] 5830 	cjne	r1,#0x00,00205$
      001C6B 0A               [12] 5831 	inc	r2
      001C6C                       5832 00205$:
      001C6C 90r00r2A         [24] 5833 	mov	dptr,#_find_page_65537_291
      001C6F E0               [24] 5834 	movx	a,@dptr
      001C70 F8               [12] 5835 	mov	r0,a
      001C71 FD               [12] 5836 	mov	r5,a
      001C72 7E 00            [12] 5837 	mov	r6,#0x00
      001C74 B5 01 08         [24] 5838 	cjne	a,ar1,00206$
      001C77 EE               [12] 5839 	mov	a,r6
      001C78 B5 02 04         [24] 5840 	cjne	a,ar2,00206$
      001C7B D0 06            [24] 5841 	pop	ar6
      001C7D 80 5D            [24] 5842 	sjmp	00125$
      001C7F                       5843 00206$:
      001C7F D0 06            [24] 5844 	pop	ar6
                                   5845 ;	find2.c:129: index += NUM;
      001C81 90r00r2B         [24] 5846 	mov	dptr,#_find_index_65537_291
      001C84 E0               [24] 5847 	movx	a,@dptr
      001C85 24 0F            [12] 5848 	add	a,#0x0f
      001C87 F0               [24] 5849 	movx	@dptr,a
                                   5850 ;	find2.c:130: address += NUM;
      001C88 90r00r2C         [24] 5851 	mov	dptr,#_find_address_65537_291
      001C8B E0               [24] 5852 	movx	a,@dptr
      001C8C FA               [12] 5853 	mov	r2,a
      001C8D A3               [24] 5854 	inc	dptr
      001C8E E0               [24] 5855 	movx	a,@dptr
      001C8F FD               [12] 5856 	mov	r5,a
      001C90 74 0F            [12] 5857 	mov	a,#0x0f
      001C92 2A               [12] 5858 	add	a,r2
      001C93 FA               [12] 5859 	mov	r2,a
      001C94 E4               [12] 5860 	clr	a
      001C95 3D               [12] 5861 	addc	a,r5
      001C96 FD               [12] 5862 	mov	r5,a
      001C97 90r00r2C         [24] 5863 	mov	dptr,#_find_address_65537_291
      001C9A EA               [12] 5864 	mov	a,r2
      001C9B F0               [24] 5865 	movx	@dptr,a
      001C9C ED               [12] 5866 	mov	a,r5
      001C9D A3               [24] 5867 	inc	dptr
      001C9E F0               [24] 5868 	movx	@dptr,a
                                   5869 ;	find2.c:131: printFind(address, NUM, key, index);
      001C9F 90r00r2C         [24] 5870 	mov	dptr,#_find_address_65537_291
      001CA2 E0               [24] 5871 	movx	a,@dptr
      001CA3 FA               [12] 5872 	mov	r2,a
      001CA4 A3               [24] 5873 	inc	dptr
      001CA5 E0               [24] 5874 	movx	a,@dptr
      001CA6 FD               [12] 5875 	mov	r5,a
      001CA7 90r00r2B         [24] 5876 	mov	dptr,#_find_index_65537_291
      001CAA E0               [24] 5877 	movx	a,@dptr
      001CAB F9               [12] 5878 	mov	r1,a
      001CAC 90r00r25         [24] 5879 	mov	dptr,#_printFind_PARM_2
      001CAF 74 0F            [12] 5880 	mov	a,#0x0f
      001CB1 F0               [24] 5881 	movx	@dptr,a
      001CB2 90r00r26         [24] 5882 	mov	dptr,#_printFind_PARM_3
      001CB5 EF               [12] 5883 	mov	a,r7
      001CB6 F0               [24] 5884 	movx	@dptr,a
      001CB7 90r00r27         [24] 5885 	mov	dptr,#_printFind_PARM_4
      001CBA E9               [12] 5886 	mov	a,r1
      001CBB F0               [24] 5887 	movx	@dptr,a
      001CBC 8A 82            [24] 5888 	mov	dpl,r2
      001CBE 8D 83            [24] 5889 	mov	dph,r5
      001CC0 C0 07            [24] 5890 	push	ar7
      001CC2 C0 06            [24] 5891 	push	ar6
      001CC4 C0 04            [24] 5892 	push	ar4
      001CC6 C0 00            [24] 5893 	push	ar0
      001CC8 12r19r99         [24] 5894 	lcall	_printFind
      001CCB D0 00            [24] 5895 	pop	ar0
      001CCD D0 04            [24] 5896 	pop	ar4
      001CCF D0 06            [24] 5897 	pop	ar6
      001CD1 D0 07            [24] 5898 	pop	ar7
                                   5899 ;	find2.c:132: page++;
      001CD3 90r00r2A         [24] 5900 	mov	dptr,#_find_page_65537_291
      001CD6 E8               [12] 5901 	mov	a,r0
      001CD7 04               [12] 5902 	inc	a
      001CD8 F0               [24] 5903 	movx	@dptr,a
      001CD9 02r1Br99         [24] 5904 	ljmp	00128$
      001CDC                       5905 00125$:
                                   5906 ;	find2.c:133: } else if (input == 'A' && page != 1) {				// previous
      001CDC BB 41 66         [24] 5907 	cjne	r3,#0x41,00121$
      001CDF 90r00r2A         [24] 5908 	mov	dptr,#_find_page_65537_291
      001CE2 E0               [24] 5909 	movx	a,@dptr
      001CE3 FD               [12] 5910 	mov	r5,a
      001CE4 BD 01 02         [24] 5911 	cjne	r5,#0x01,00209$
      001CE7 80 5C            [24] 5912 	sjmp	00121$
      001CE9                       5913 00209$:
                                   5914 ;	find2.c:134: index -= NUM;
      001CE9 90r00r2B         [24] 5915 	mov	dptr,#_find_index_65537_291
      001CEC E0               [24] 5916 	movx	a,@dptr
      001CED 24 F1            [12] 5917 	add	a,#0xf1
      001CEF F0               [24] 5918 	movx	@dptr,a
                                   5919 ;	find2.c:135: address -= NUM;
      001CF0 90r00r2C         [24] 5920 	mov	dptr,#_find_address_65537_291
      001CF3 E0               [24] 5921 	movx	a,@dptr
      001CF4 F9               [12] 5922 	mov	r1,a
      001CF5 A3               [24] 5923 	inc	dptr
      001CF6 E0               [24] 5924 	movx	a,@dptr
      001CF7 FA               [12] 5925 	mov	r2,a
      001CF8 E9               [12] 5926 	mov	a,r1
      001CF9 24 F1            [12] 5927 	add	a,#0xf1
      001CFB F9               [12] 5928 	mov	r1,a
      001CFC EA               [12] 5929 	mov	a,r2
      001CFD 34 FF            [12] 5930 	addc	a,#0xff
      001CFF FA               [12] 5931 	mov	r2,a
      001D00 90r00r2C         [24] 5932 	mov	dptr,#_find_address_65537_291
      001D03 E9               [12] 5933 	mov	a,r1
      001D04 F0               [24] 5934 	movx	@dptr,a
      001D05 EA               [12] 5935 	mov	a,r2
      001D06 A3               [24] 5936 	inc	dptr
      001D07 F0               [24] 5937 	movx	@dptr,a
                                   5938 ;	find2.c:136: printFind(address, NUM, key, index);
      001D08 90r00r2C         [24] 5939 	mov	dptr,#_find_address_65537_291
      001D0B E0               [24] 5940 	movx	a,@dptr
      001D0C F9               [12] 5941 	mov	r1,a
      001D0D A3               [24] 5942 	inc	dptr
      001D0E E0               [24] 5943 	movx	a,@dptr
      001D0F FA               [12] 5944 	mov	r2,a
      001D10 90r00r2B         [24] 5945 	mov	dptr,#_find_index_65537_291
      001D13 E0               [24] 5946 	movx	a,@dptr
      001D14 F8               [12] 5947 	mov	r0,a
      001D15 90r00r25         [24] 5948 	mov	dptr,#_printFind_PARM_2
      001D18 74 0F            [12] 5949 	mov	a,#0x0f
      001D1A F0               [24] 5950 	movx	@dptr,a
      001D1B 90r00r26         [24] 5951 	mov	dptr,#_printFind_PARM_3
      001D1E EF               [12] 5952 	mov	a,r7
      001D1F F0               [24] 5953 	movx	@dptr,a
      001D20 90r00r27         [24] 5954 	mov	dptr,#_printFind_PARM_4
      001D23 E8               [12] 5955 	mov	a,r0
      001D24 F0               [24] 5956 	movx	@dptr,a
      001D25 89 82            [24] 5957 	mov	dpl,r1
      001D27 8A 83            [24] 5958 	mov	dph,r2
      001D29 C0 07            [24] 5959 	push	ar7
      001D2B C0 06            [24] 5960 	push	ar6
      001D2D C0 05            [24] 5961 	push	ar5
      001D2F C0 04            [24] 5962 	push	ar4
      001D31 12r19r99         [24] 5963 	lcall	_printFind
      001D34 D0 04            [24] 5964 	pop	ar4
      001D36 D0 05            [24] 5965 	pop	ar5
      001D38 D0 06            [24] 5966 	pop	ar6
      001D3A D0 07            [24] 5967 	pop	ar7
                                   5968 ;	find2.c:137: page--;
      001D3C ED               [12] 5969 	mov	a,r5
      001D3D 14               [12] 5970 	dec	a
      001D3E 90r00r2A         [24] 5971 	mov	dptr,#_find_page_65537_291
      001D41 F0               [24] 5972 	movx	@dptr,a
      001D42 02r1Br99         [24] 5973 	ljmp	00128$
      001D45                       5974 00121$:
                                   5975 ;	find2.c:138: } else if (input == '1') {							// main menu
      001D45 BB 31 01         [24] 5976 	cjne	r3,#0x31,00210$
      001D48 22               [24] 5977 	ret
      001D49                       5978 00210$:
      001D49 02r1Br99         [24] 5979 	ljmp	00128$
                                   5980 ;	find2.c:141: } while(1);
                                   5981 ;	find2.c:142: }
      001D4C 22               [24] 5982 	ret
                                   5983 ;------------------------------------------------------------
                                   5984 ;Allocation info for local variables in function 'printCount'
                                   5985 ;------------------------------------------------------------
                                   5986 ;count                     Allocated with name '_printCount_PARM_5'
                                   5987 ;ramAddress                Allocated to registers 
                                   5988 ;sloc0                     Allocated with name '_printCount_sloc0_1_0'
                                   5989 ;n                         Allocated with name '_printCount_PARM_2'
                                   5990 ;key                       Allocated with name '_printCount_PARM_3'
                                   5991 ;index                     Allocated with name '_printCount_PARM_4'
                                   5992 ;start                     Allocated with name '_printCount_start_65536_305'
                                   5993 ;i                         Allocated with name '_printCount_i_65537_307'
                                   5994 ;found                     Allocated with name '_printCount_found_65537_307'
                                   5995 ;high                      Allocated with name '_printCount_high_65537_307'
                                   5996 ;low                       Allocated with name '_printCount_low_65537_307'
                                   5997 ;------------------------------------------------------------
                                   5998 ;	count.c:10: void printCount(__xdata uint16_t start, __xdata uint8_t n, __xdata uint8_t key, __xdata uint8_t index, uint8_t count) {
                                   5999 ;	-----------------------------------------
                                   6000 ;	 function printCount
                                   6001 ;	-----------------------------------------
      001D4D                       6002 _printCount:
      001D4D AF 83            [24] 6003 	mov	r7,dph
      001D4F E5 82            [12] 6004 	mov	a,dpl
      001D51 90r00r31         [24] 6005 	mov	dptr,#_printCount_start_65536_305
      001D54 F0               [24] 6006 	movx	@dptr,a
      001D55 EF               [12] 6007 	mov	a,r7
      001D56 A3               [24] 6008 	inc	dptr
      001D57 F0               [24] 6009 	movx	@dptr,a
                                   6010 ;	count.c:12: fillScreen(GRAY);
      001D58 90 D6 BA         [24] 6011 	mov	dptr,#0xd6ba
      001D5B 12r08r44         [24] 6012 	lcall	_fillScreen
                                   6013 ;	count.c:13: setCursor(0, 0);
      001D5E E4               [12] 6014 	clr	a
      001D5F F5*00            [12] 6015 	mov	_setCursor_PARM_2,a
      001D61 F5*01            [12] 6016 	mov	(_setCursor_PARM_2 + 1),a
      001D63 90 00 00         [24] 6017 	mov	dptr,#0x0000
      001D66 12r00rB6         [24] 6018 	lcall	_setCursor
                                   6019 ;	count.c:14: setTextSize(2);
      001D69 75 82 02         [24] 6020 	mov	dpl,#0x02
      001D6C 12r00rD0         [24] 6021 	lcall	_setTextSize
                                   6022 ;	count.c:25: if (count == 0) {
      001D6F E5*58            [12] 6023 	mov	a,_printCount_PARM_5
      001D71 70 0B            [24] 6024 	jnz	00102$
                                   6025 ;	count.c:26: LCD_string_write("No matches found\n");
      001D73 90r07r76         [24] 6026 	mov	dptr,#___str_39
      001D76 75 F0 80         [24] 6027 	mov	b,#0x80
      001D79 12r0Cr4B         [24] 6028 	lcall	_LCD_string_write
      001D7C 80 0F            [24] 6029 	sjmp	00115$
      001D7E                       6030 00102$:
                                   6031 ;	count.c:28: asciiToHex(count); // this doesn't seem to print out the correct decimal value, rework this later
      001D7E 85*58 82         [24] 6032 	mov	dpl,_printCount_PARM_5
      001D81 12r0ErBD         [24] 6033 	lcall	_asciiToHex
                                   6034 ;	count.c:29: LCD_string_write(" matches found\n");
      001D84 90r07r88         [24] 6035 	mov	dptr,#___str_40
      001D87 75 F0 80         [24] 6036 	mov	b,#0x80
      001D8A 12r0Cr4B         [24] 6037 	lcall	_LCD_string_write
                                   6038 ;	count.c:33: for (i = 0; i < n; i++) {
      001D8D                       6039 00115$:
      001D8D 90r00r31         [24] 6040 	mov	dptr,#_printCount_start_65536_305
      001D90 E0               [24] 6041 	movx	a,@dptr
      001D91 FE               [12] 6042 	mov	r6,a
      001D92 A3               [24] 6043 	inc	dptr
      001D93 E0               [24] 6044 	movx	a,@dptr
      001D94 FF               [12] 6045 	mov	r7,a
      001D95 90r00r2F         [24] 6046 	mov	dptr,#_printCount_PARM_3
      001D98 E0               [24] 6047 	movx	a,@dptr
      001D99 FD               [12] 6048 	mov	r5,a
      001D9A 90r00r2E         [24] 6049 	mov	dptr,#_printCount_PARM_2
      001D9D E0               [24] 6050 	movx	a,@dptr
      001D9E F5*59            [12] 6051 	mov	_printCount_sloc0_1_0,a
      001DA0 90r00r30         [24] 6052 	mov	dptr,#_printCount_PARM_4
      001DA3 E0               [24] 6053 	movx	a,@dptr
      001DA4 FB               [12] 6054 	mov	r3,a
      001DA5 79 00            [12] 6055 	mov	r1,#0x00
      001DA7 7A 00            [12] 6056 	mov	r2,#0x00
      001DA9                       6057 00108$:
      001DA9 C0 05            [24] 6058 	push	ar5
      001DAB A8*59            [24] 6059 	mov	r0,_printCount_sloc0_1_0
      001DAD 7D 00            [12] 6060 	mov	r5,#0x00
      001DAF C3               [12] 6061 	clr	c
      001DB0 E9               [12] 6062 	mov	a,r1
      001DB1 98               [12] 6063 	subb	a,r0
      001DB2 EA               [12] 6064 	mov	a,r2
      001DB3 9D               [12] 6065 	subb	a,r5
      001DB4 D0 05            [24] 6066 	pop	ar5
      001DB6 40 01            [24] 6067 	jc	00130$
      001DB8 22               [24] 6068 	ret
      001DB9                       6069 00130$:
                                   6070 ;	count.c:35: IOM = 0;
                                   6071 ;	assignBit
      001DB9 C2 B4            [12] 6072 	clr	_P3_4
                                   6073 ;	count.c:36: ramAddress = (uint16_t __xdata*)(start + i);
      001DBB E9               [12] 6074 	mov	a,r1
      001DBC 2E               [12] 6075 	add	a,r6
      001DBD F8               [12] 6076 	mov	r0,a
      001DBE EA               [12] 6077 	mov	a,r2
      001DBF 3F               [12] 6078 	addc	a,r7
      001DC0 FC               [12] 6079 	mov	r4,a
      001DC1 88 82            [24] 6080 	mov	dpl,r0
      001DC3 8C 83            [24] 6081 	mov	dph,r4
                                   6082 ;	count.c:37: found = *ramAddress;
      001DC5 E0               [24] 6083 	movx	a,@dptr
      001DC6 FC               [12] 6084 	mov	r4,a
                                   6085 ;	count.c:38: IOM = 1;
                                   6086 ;	assignBit
      001DC7 D2 B4            [12] 6087 	setb	_P3_4
                                   6088 ;	count.c:41: if (found == key) {
      001DC9 EC               [12] 6089 	mov	a,r4
      001DCA B5 05 5C         [24] 6090 	cjne	a,ar5,00109$
                                   6091 ;	count.c:43: asciiToHex(index++);
      001DCD C0 05            [24] 6092 	push	ar5
      001DCF 8B 82            [24] 6093 	mov	dpl,r3
      001DD1 0B               [12] 6094 	inc	r3
      001DD2 C0 07            [24] 6095 	push	ar7
      001DD4 C0 06            [24] 6096 	push	ar6
      001DD6 C0 05            [24] 6097 	push	ar5
      001DD8 C0 03            [24] 6098 	push	ar3
      001DDA C0 02            [24] 6099 	push	ar2
      001DDC C0 01            [24] 6100 	push	ar1
      001DDE 12r0ErBD         [24] 6101 	lcall	_asciiToHex
                                   6102 ;	count.c:44: LCD_string_write(": ");
      001DE1 90r05r4B         [24] 6103 	mov	dptr,#___str_6
      001DE4 75 F0 80         [24] 6104 	mov	b,#0x80
      001DE7 12r0Cr4B         [24] 6105 	lcall	_LCD_string_write
      001DEA D0 01            [24] 6106 	pop	ar1
      001DEC D0 02            [24] 6107 	pop	ar2
      001DEE D0 03            [24] 6108 	pop	ar3
      001DF0 D0 05            [24] 6109 	pop	ar5
      001DF2 D0 06            [24] 6110 	pop	ar6
                                   6111 ;	count.c:46: high = start + i;
      001DF4 8E 00            [24] 6112 	mov	ar0,r6
      001DF6 89 05            [24] 6113 	mov	ar5,r1
      001DF8 ED               [12] 6114 	mov	a,r5
      001DF9 28               [12] 6115 	add	a,r0
                                   6116 ;	count.c:49: high = HIGHBYTE(high);
      001DFA F8               [12] 6117 	mov	r0,a
      001DFB 7D 00            [12] 6118 	mov	r5,#0x00
      001DFD 8D 82            [24] 6119 	mov	dpl,r5
                                   6120 ;	count.c:53: asciiToHex(high);
      001DFF C0 06            [24] 6121 	push	ar6
      001E01 C0 05            [24] 6122 	push	ar5
      001E03 C0 03            [24] 6123 	push	ar3
      001E05 C0 02            [24] 6124 	push	ar2
      001E07 C0 01            [24] 6125 	push	ar1
      001E09 C0 00            [24] 6126 	push	ar0
      001E0B 12r0ErBD         [24] 6127 	lcall	_asciiToHex
      001E0E D0 00            [24] 6128 	pop	ar0
                                   6129 ;	count.c:54: asciiToHex(low);
      001E10 88 82            [24] 6130 	mov	dpl,r0
      001E12 12r0ErBD         [24] 6131 	lcall	_asciiToHex
                                   6132 ;	count.c:55: write('\n');
      001E15 75 82 0A         [24] 6133 	mov	dpl,#0x0a
      001E18 12r0BrDD         [24] 6134 	lcall	_write
      001E1B D0 01            [24] 6135 	pop	ar1
      001E1D D0 02            [24] 6136 	pop	ar2
      001E1F D0 03            [24] 6137 	pop	ar3
      001E21 D0 05            [24] 6138 	pop	ar5
      001E23 D0 06            [24] 6139 	pop	ar6
      001E25 D0 07            [24] 6140 	pop	ar7
                                   6141 ;	count.c:33: for (i = 0; i < n; i++) {
      001E27 D0 05            [24] 6142 	pop	ar5
                                   6143 ;	count.c:55: write('\n');
      001E29                       6144 00109$:
                                   6145 ;	count.c:33: for (i = 0; i < n; i++) {
      001E29 09               [12] 6146 	inc	r1
      001E2A B9 00 01         [24] 6147 	cjne	r1,#0x00,00133$
      001E2D 0A               [12] 6148 	inc	r2
      001E2E                       6149 00133$:
                                   6150 ;	count.c:59: }
      001E2E 02r1DrA9         [24] 6151 	ljmp	00108$
                                   6152 ;------------------------------------------------------------
                                   6153 ;Allocation info for local variables in function 'count'
                                   6154 ;------------------------------------------------------------
                                   6155 ;ramAddress                Allocated to registers 
                                   6156 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                   6157 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                   6158 ;sloc2                     Allocated with name '_count_sloc2_1_0'
                                   6159 ;address                   Allocated with name '_count_address_65537_314'
                                   6160 ;i                         Allocated with name '_count_i_65537_314'
                                   6161 ;size                      Allocated with name '_count_size_65537_314'
                                   6162 ;key                       Allocated with name '_count_key_65537_314'
                                   6163 ;found                     Allocated with name '_count_found_65537_314'
                                   6164 ;n                         Allocated with name '_count_n_65537_314'
                                   6165 ;index                     Allocated with name '_count_index_65537_314'
                                   6166 ;input                     Allocated with name '_count_input_65537_314'
                                   6167 ;page                      Allocated with name '_count_page_65537_314'
                                   6168 ;------------------------------------------------------------
                                   6169 ;	count.c:65: void count() {
                                   6170 ;	-----------------------------------------
                                   6171 ;	 function count
                                   6172 ;	-----------------------------------------
      001E31                       6173 _count:
                                   6174 ;	count.c:67: fillScreen(GRAY);
      001E31 90 D6 BA         [24] 6175 	mov	dptr,#0xd6ba
      001E34 12r08r44         [24] 6176 	lcall	_fillScreen
                                   6177 ;	count.c:68: setCursor(0, 0);
      001E37 E4               [12] 6178 	clr	a
      001E38 F5*00            [12] 6179 	mov	_setCursor_PARM_2,a
      001E3A F5*01            [12] 6180 	mov	(_setCursor_PARM_2 + 1),a
      001E3C 90 00 00         [24] 6181 	mov	dptr,#0x0000
      001E3F 12r00rB6         [24] 6182 	lcall	_setCursor
                                   6183 ;	count.c:69: setTextSize(2);
      001E42 75 82 02         [24] 6184 	mov	dpl,#0x02
      001E45 12r00rD0         [24] 6185 	lcall	_setTextSize
                                   6186 ;	count.c:83: page = 1;
      001E48 90r00r36         [24] 6187 	mov	dptr,#_count_page_65537_314
      001E4B 74 01            [12] 6188 	mov	a,#0x01
      001E4D F0               [24] 6189 	movx	@dptr,a
                                   6190 ;	count.c:84: index = 0;
      001E4E 90r00r35         [24] 6191 	mov	dptr,#_count_index_65537_314
      001E51 E4               [12] 6192 	clr	a
      001E52 F0               [24] 6193 	movx	@dptr,a
                                   6194 ;	count.c:88: LCD_string_write("Enter byte to count:\n");
      001E53 90r07r98         [24] 6195 	mov	dptr,#___str_41
      001E56 75 F0 80         [24] 6196 	mov	b,#0x80
      001E59 12r0Cr4B         [24] 6197 	lcall	_LCD_string_write
                                   6198 ;	count.c:89: key = getByte();
      001E5C 12r10r9D         [24] 6199 	lcall	_getByte
      001E5F AF 82            [24] 6200 	mov	r7,dpl
                                   6201 ;	count.c:90: write('\n');
      001E61 75 82 0A         [24] 6202 	mov	dpl,#0x0a
      001E64 C0 07            [24] 6203 	push	ar7
      001E66 12r0BrDD         [24] 6204 	lcall	_write
                                   6205 ;	count.c:93: LCD_string_write("Enter start address:\n");
      001E69 90r05r4E         [24] 6206 	mov	dptr,#___str_7
      001E6C 75 F0 80         [24] 6207 	mov	b,#0x80
      001E6F 12r0Cr4B         [24] 6208 	lcall	_LCD_string_write
                                   6209 ;	count.c:94: address = getAddress();
      001E72 12r10r36         [24] 6210 	lcall	_getAddress
      001E75 AD 82            [24] 6211 	mov	r5,dpl
      001E77 AE 83            [24] 6212 	mov	r6,dph
      001E79 90r00r33         [24] 6213 	mov	dptr,#_count_address_65537_314
      001E7C ED               [12] 6214 	mov	a,r5
      001E7D F0               [24] 6215 	movx	@dptr,a
      001E7E EE               [12] 6216 	mov	a,r6
      001E7F A3               [24] 6217 	inc	dptr
      001E80 F0               [24] 6218 	movx	@dptr,a
                                   6219 ;	count.c:95: write('\n');
      001E81 75 82 0A         [24] 6220 	mov	dpl,#0x0a
      001E84 C0 06            [24] 6221 	push	ar6
      001E86 C0 05            [24] 6222 	push	ar5
      001E88 12r0BrDD         [24] 6223 	lcall	_write
                                   6224 ;	count.c:98: LCD_string_write("Enter block size:\n");
      001E8B 90r05rAE         [24] 6225 	mov	dptr,#___str_14
      001E8E 75 F0 80         [24] 6226 	mov	b,#0x80
      001E91 12r0Cr4B         [24] 6227 	lcall	_LCD_string_write
                                   6228 ;	count.c:99: size = getByte();
      001E94 12r10r9D         [24] 6229 	lcall	_getByte
      001E97 AC 82            [24] 6230 	mov	r4,dpl
                                   6231 ;	count.c:100: write('\n');
      001E99 75 82 0A         [24] 6232 	mov	dpl,#0x0a
      001E9C C0 04            [24] 6233 	push	ar4
      001E9E 12r0BrDD         [24] 6234 	lcall	_write
      001EA1 D0 04            [24] 6235 	pop	ar4
      001EA3 D0 05            [24] 6236 	pop	ar5
      001EA5 D0 06            [24] 6237 	pop	ar6
      001EA7 D0 07            [24] 6238 	pop	ar7
                                   6239 ;	count.c:103: for (i = 0; i < size; i++) {
      001EA9 7B 00            [12] 6240 	mov	r3,#0x00
      001EAB 79 00            [12] 6241 	mov	r1,#0x00
      001EAD 7A 00            [12] 6242 	mov	r2,#0x00
      001EAF                       6243 00132$:
      001EAF C0 05            [24] 6244 	push	ar5
      001EB1 C0 06            [24] 6245 	push	ar6
      001EB3 8C 00            [24] 6246 	mov	ar0,r4
      001EB5 7E 00            [12] 6247 	mov	r6,#0x00
      001EB7 C3               [12] 6248 	clr	c
      001EB8 E9               [12] 6249 	mov	a,r1
      001EB9 98               [12] 6250 	subb	a,r0
      001EBA EA               [12] 6251 	mov	a,r2
      001EBB 9E               [12] 6252 	subb	a,r6
      001EBC D0 06            [24] 6253 	pop	ar6
      001EBE D0 05            [24] 6254 	pop	ar5
      001EC0 50 26            [24] 6255 	jnc	00103$
                                   6256 ;	count.c:104: IOM = 0;
      001EC2 C0 04            [24] 6257 	push	ar4
                                   6258 ;	assignBit
      001EC4 C2 B4            [12] 6259 	clr	_P3_4
                                   6260 ;	count.c:105: ramAddress = (uint16_t __xdata*)(address + i);
      001EC6 E9               [12] 6261 	mov	a,r1
      001EC7 2D               [12] 6262 	add	a,r5
      001EC8 F8               [12] 6263 	mov	r0,a
      001EC9 EA               [12] 6264 	mov	a,r2
      001ECA 3E               [12] 6265 	addc	a,r6
      001ECB FC               [12] 6266 	mov	r4,a
      001ECC 88 82            [24] 6267 	mov	dpl,r0
      001ECE 8C 83            [24] 6268 	mov	dph,r4
                                   6269 ;	count.c:106: found = *ramAddress;
      001ED0 E0               [24] 6270 	movx	a,@dptr
      001ED1 FC               [12] 6271 	mov	r4,a
                                   6272 ;	count.c:107: IOM = 1;
                                   6273 ;	assignBit
      001ED2 D2 B4            [12] 6274 	setb	_P3_4
                                   6275 ;	count.c:109: if (found == key) {
      001ED4 EC               [12] 6276 	mov	a,r4
      001ED5 B5 07 02         [24] 6277 	cjne	a,ar7,00194$
      001ED8 80 04            [24] 6278 	sjmp	00195$
      001EDA                       6279 00194$:
      001EDA D0 04            [24] 6280 	pop	ar4
      001EDC 80 03            [24] 6281 	sjmp	00133$
      001EDE                       6282 00195$:
      001EDE D0 04            [24] 6283 	pop	ar4
                                   6284 ;	count.c:110: n++;
      001EE0 0B               [12] 6285 	inc	r3
      001EE1                       6286 00133$:
                                   6287 ;	count.c:103: for (i = 0; i < size; i++) {
      001EE1 09               [12] 6288 	inc	r1
      001EE2 B9 00 CA         [24] 6289 	cjne	r1,#0x00,00132$
      001EE5 0A               [12] 6290 	inc	r2
      001EE6 80 C7            [24] 6291 	sjmp	00132$
      001EE8                       6292 00103$:
                                   6293 ;	count.c:114: asciiToHex(n);
      001EE8 8B 82            [24] 6294 	mov	dpl,r3
      001EEA C0 07            [24] 6295 	push	ar7
      001EEC C0 06            [24] 6296 	push	ar6
      001EEE C0 05            [24] 6297 	push	ar5
      001EF0 C0 04            [24] 6298 	push	ar4
      001EF2 C0 03            [24] 6299 	push	ar3
      001EF4 12r0ErBD         [24] 6300 	lcall	_asciiToHex
      001EF7 D0 03            [24] 6301 	pop	ar3
      001EF9 D0 04            [24] 6302 	pop	ar4
      001EFB D0 05            [24] 6303 	pop	ar5
      001EFD D0 06            [24] 6304 	pop	ar6
      001EFF D0 07            [24] 6305 	pop	ar7
                                   6306 ;	count.c:117: if (n < NUM) {
      001F01 BB 0F 00         [24] 6307 	cjne	r3,#0x0f,00197$
      001F04                       6308 00197$:
      001F04 50 26            [24] 6309 	jnc	00105$
                                   6310 ;	count.c:118: printCount(address, n, key, index, n);
      001F06 90r00r2E         [24] 6311 	mov	dptr,#_printCount_PARM_2
      001F09 EB               [12] 6312 	mov	a,r3
      001F0A F0               [24] 6313 	movx	@dptr,a
      001F0B 90r00r2F         [24] 6314 	mov	dptr,#_printCount_PARM_3
      001F0E EF               [12] 6315 	mov	a,r7
      001F0F F0               [24] 6316 	movx	@dptr,a
      001F10 90r00r30         [24] 6317 	mov	dptr,#_printCount_PARM_4
      001F13 E4               [12] 6318 	clr	a
      001F14 F0               [24] 6319 	movx	@dptr,a
      001F15 8B*58            [24] 6320 	mov	_printCount_PARM_5,r3
      001F17 8D 82            [24] 6321 	mov	dpl,r5
      001F19 8E 83            [24] 6322 	mov	dph,r6
      001F1B C0 07            [24] 6323 	push	ar7
      001F1D C0 04            [24] 6324 	push	ar4
      001F1F C0 03            [24] 6325 	push	ar3
      001F21 12r1Dr4D         [24] 6326 	lcall	_printCount
      001F24 D0 03            [24] 6327 	pop	ar3
      001F26 D0 04            [24] 6328 	pop	ar4
      001F28 D0 07            [24] 6329 	pop	ar7
      001F2A 80 2B            [24] 6330 	sjmp	00147$
      001F2C                       6331 00105$:
                                   6332 ;	count.c:120: printCount(address, NUM, key, index, n);
      001F2C 90r00r2E         [24] 6333 	mov	dptr,#_printCount_PARM_2
      001F2F 74 0F            [12] 6334 	mov	a,#0x0f
      001F31 F0               [24] 6335 	movx	@dptr,a
      001F32 90r00r2F         [24] 6336 	mov	dptr,#_printCount_PARM_3
      001F35 EF               [12] 6337 	mov	a,r7
      001F36 F0               [24] 6338 	movx	@dptr,a
      001F37 90r00r30         [24] 6339 	mov	dptr,#_printCount_PARM_4
      001F3A E4               [12] 6340 	clr	a
      001F3B F0               [24] 6341 	movx	@dptr,a
      001F3C 8B*58            [24] 6342 	mov	_printCount_PARM_5,r3
      001F3E 8D 82            [24] 6343 	mov	dpl,r5
      001F40 8E 83            [24] 6344 	mov	dph,r6
      001F42 C0 07            [24] 6345 	push	ar7
      001F44 C0 04            [24] 6346 	push	ar4
      001F46 C0 03            [24] 6347 	push	ar3
      001F48 12r1Dr4D         [24] 6348 	lcall	_printCount
      001F4B D0 03            [24] 6349 	pop	ar3
      001F4D D0 04            [24] 6350 	pop	ar4
      001F4F D0 07            [24] 6351 	pop	ar7
                                   6352 ;	count.c:121: page++;
      001F51 90r00r36         [24] 6353 	mov	dptr,#_count_page_65537_314
      001F54 74 02            [12] 6354 	mov	a,#0x02
      001F56 F0               [24] 6355 	movx	@dptr,a
                                   6356 ;	count.c:124: do {
      001F57                       6357 00147$:
      001F57 C3               [12] 6358 	clr	c
      001F58 74 0F            [12] 6359 	mov	a,#0x0f
      001F5A 9B               [12] 6360 	subb	a,r3
      001F5B E4               [12] 6361 	clr	a
      001F5C 33               [12] 6362 	rlc	a
      001F5D FE               [12] 6363 	mov	r6,a
      001F5E 8B*5C            [24] 6364 	mov	_count_sloc2_1_0,r3
      001F60 8B F0            [24] 6365 	mov	b,r3
      001F62 EC               [12] 6366 	mov	a,r4
      001F63 84               [48] 6367 	div	ab
      001F64 F5*5A            [12] 6368 	mov	_count_sloc0_1_0,a
      001F66 8B 02            [24] 6369 	mov	ar2,r3
      001F68                       6370 00128$:
                                   6371 ;	count.c:125: if (n == 0) {
      001F68 EA               [12] 6372 	mov	a,r2
      001F69 70 03            [24] 6373 	jnz	00199$
      001F6B 02r20r10         [24] 6374 	ljmp	00117$
      001F6E                       6375 00199$:
                                   6376 ;	count.c:127: } else if (page != ((n / NUM) + 1) && n > NUM) {
      001F6E C0 03            [24] 6377 	push	ar3
      001F70 8A 00            [24] 6378 	mov	ar0,r2
      001F72 79 00            [12] 6379 	mov	r1,#0x00
      001F74 75*00 0F         [24] 6380 	mov	__divsint_PARM_2,#0x0f
                                   6381 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001F77 89*01            [24] 6382 	mov	(__divsint_PARM_2 + 1),r1
      001F79 88 82            [24] 6383 	mov	dpl,r0
      001F7B 89 83            [24] 6384 	mov	dph,r1
      001F7D C0 07            [24] 6385 	push	ar7
      001F7F C0 06            [24] 6386 	push	ar6
      001F81 C0 03            [24] 6387 	push	ar3
      001F83 C0 02            [24] 6388 	push	ar2
      001F85 12r00r00         [24] 6389 	lcall	__divsint
      001F88 E5 82            [12] 6390 	mov	a,dpl
      001F8A 85 83 F0         [24] 6391 	mov	b,dph
      001F8D D0 02            [24] 6392 	pop	ar2
      001F8F D0 03            [24] 6393 	pop	ar3
      001F91 D0 06            [24] 6394 	pop	ar6
      001F93 D0 07            [24] 6395 	pop	ar7
      001F95 24 01            [12] 6396 	add	a,#0x01
      001F97 F8               [12] 6397 	mov	r0,a
      001F98 E4               [12] 6398 	clr	a
      001F99 35 F0            [12] 6399 	addc	a,b
      001F9B F9               [12] 6400 	mov	r1,a
      001F9C 90r00r36         [24] 6401 	mov	dptr,#_count_page_65537_314
      001F9F E0               [24] 6402 	movx	a,@dptr
      001FA0 7C 00            [12] 6403 	mov	r4,#0x00
      001FA2 B5 00 08         [24] 6404 	cjne	a,ar0,00200$
      001FA5 EC               [12] 6405 	mov	a,r4
      001FA6 B5 01 04         [24] 6406 	cjne	a,ar1,00200$
      001FA9 D0 03            [24] 6407 	pop	ar3
      001FAB 80 22            [24] 6408 	sjmp	00112$
      001FAD                       6409 00200$:
      001FAD D0 03            [24] 6410 	pop	ar3
      001FAF EA               [12] 6411 	mov	a,r2
      001FB0 24 F0            [12] 6412 	add	a,#0xff - 0x0f
      001FB2 50 1B            [24] 6413 	jnc	00112$
                                   6414 ;	count.c:128: LCD_string_write("Press B for next\n");
      001FB4 90r05rC1         [24] 6415 	mov	dptr,#___str_15
      001FB7 75 F0 80         [24] 6416 	mov	b,#0x80
      001FBA C0 07            [24] 6417 	push	ar7
      001FBC C0 06            [24] 6418 	push	ar6
      001FBE C0 03            [24] 6419 	push	ar3
      001FC0 C0 02            [24] 6420 	push	ar2
      001FC2 12r0Cr4B         [24] 6421 	lcall	_LCD_string_write
      001FC5 D0 02            [24] 6422 	pop	ar2
      001FC7 D0 03            [24] 6423 	pop	ar3
      001FC9 D0 06            [24] 6424 	pop	ar6
      001FCB D0 07            [24] 6425 	pop	ar7
      001FCD 80 41            [24] 6426 	sjmp	00117$
      001FCF                       6427 00112$:
                                   6428 ;	count.c:129: } else if (page != 1 && n > NUM) {
      001FCF 90r00r36         [24] 6429 	mov	dptr,#_count_page_65537_314
      001FD2 E0               [24] 6430 	movx	a,@dptr
      001FD3 FC               [12] 6431 	mov	r4,a
      001FD4 BC 01 02         [24] 6432 	cjne	r4,#0x01,00202$
      001FD7 80 1E            [24] 6433 	sjmp	00108$
      001FD9                       6434 00202$:
      001FD9 EE               [12] 6435 	mov	a,r6
      001FDA 60 1B            [24] 6436 	jz	00108$
                                   6437 ;	count.c:130: LCD_string_write("Press A for previous\n");
      001FDC 90r05rD3         [24] 6438 	mov	dptr,#___str_16
      001FDF 75 F0 80         [24] 6439 	mov	b,#0x80
      001FE2 C0 07            [24] 6440 	push	ar7
      001FE4 C0 06            [24] 6441 	push	ar6
      001FE6 C0 03            [24] 6442 	push	ar3
      001FE8 C0 02            [24] 6443 	push	ar2
      001FEA 12r0Cr4B         [24] 6444 	lcall	_LCD_string_write
      001FED D0 02            [24] 6445 	pop	ar2
      001FEF D0 03            [24] 6446 	pop	ar3
      001FF1 D0 06            [24] 6447 	pop	ar6
      001FF3 D0 07            [24] 6448 	pop	ar7
      001FF5 80 19            [24] 6449 	sjmp	00117$
      001FF7                       6450 00108$:
                                   6451 ;	count.c:132: LCD_string_write("Press A for previous, B for next\n");
      001FF7 90r05rE9         [24] 6452 	mov	dptr,#___str_17
      001FFA 75 F0 80         [24] 6453 	mov	b,#0x80
      001FFD C0 07            [24] 6454 	push	ar7
      001FFF C0 06            [24] 6455 	push	ar6
      002001 C0 03            [24] 6456 	push	ar3
      002003 C0 02            [24] 6457 	push	ar2
      002005 12r0Cr4B         [24] 6458 	lcall	_LCD_string_write
      002008 D0 02            [24] 6459 	pop	ar2
      00200A D0 03            [24] 6460 	pop	ar3
      00200C D0 06            [24] 6461 	pop	ar6
      00200E D0 07            [24] 6462 	pop	ar7
      002010                       6463 00117$:
                                   6464 ;	count.c:135: LCD_string_write("Press 1 for menu\n");
      002010 90r06r0B         [24] 6465 	mov	dptr,#___str_18
      002013 75 F0 80         [24] 6466 	mov	b,#0x80
      002016 C0 07            [24] 6467 	push	ar7
      002018 C0 06            [24] 6468 	push	ar6
      00201A C0 03            [24] 6469 	push	ar3
      00201C C0 02            [24] 6470 	push	ar2
      00201E 12r0Cr4B         [24] 6471 	lcall	_LCD_string_write
                                   6472 ;	count.c:137: input = keyDetect();
      002021 12r0CrE4         [24] 6473 	lcall	_keyDetect
      002024 AC 82            [24] 6474 	mov	r4,dpl
      002026 D0 02            [24] 6475 	pop	ar2
      002028 D0 03            [24] 6476 	pop	ar3
      00202A D0 06            [24] 6477 	pop	ar6
      00202C D0 07            [24] 6478 	pop	ar7
                                   6479 ;	count.c:140: if (input == 'B' && page != ((size / n) + 1)) {		// next
      00202E BC 42 02         [24] 6480 	cjne	r4,#0x42,00204$
      002031 80 03            [24] 6481 	sjmp	00205$
      002033                       6482 00204$:
      002033 02r20rB8         [24] 6483 	ljmp	00125$
      002036                       6484 00205$:
      002036 C0 03            [24] 6485 	push	ar3
      002038 A8*5A            [24] 6486 	mov	r0,_count_sloc0_1_0
      00203A 79 00            [12] 6487 	mov	r1,#0x00
      00203C 08               [12] 6488 	inc	r0
      00203D B8 00 01         [24] 6489 	cjne	r0,#0x00,00206$
      002040 09               [12] 6490 	inc	r1
      002041                       6491 00206$:
      002041 90r00r36         [24] 6492 	mov	dptr,#_count_page_65537_314
      002044 E0               [24] 6493 	movx	a,@dptr
      002045 F5*5B            [12] 6494 	mov	_count_sloc1_1_0,a
      002047 AB*5B            [24] 6495 	mov	r3,_count_sloc1_1_0
      002049 7D 00            [12] 6496 	mov	r5,#0x00
      00204B EB               [12] 6497 	mov	a,r3
      00204C B5 00 08         [24] 6498 	cjne	a,ar0,00207$
      00204F ED               [12] 6499 	mov	a,r5
      002050 B5 01 04         [24] 6500 	cjne	a,ar1,00207$
      002053 D0 03            [24] 6501 	pop	ar3
      002055 80 61            [24] 6502 	sjmp	00125$
      002057                       6503 00207$:
      002057 D0 03            [24] 6504 	pop	ar3
                                   6505 ;	count.c:141: address += NUM;
      002059 90r00r33         [24] 6506 	mov	dptr,#_count_address_65537_314
      00205C E0               [24] 6507 	movx	a,@dptr
      00205D F9               [12] 6508 	mov	r1,a
      00205E A3               [24] 6509 	inc	dptr
      00205F E0               [24] 6510 	movx	a,@dptr
      002060 FD               [12] 6511 	mov	r5,a
      002061 74 0F            [12] 6512 	mov	a,#0x0f
      002063 29               [12] 6513 	add	a,r1
      002064 F9               [12] 6514 	mov	r1,a
      002065 E4               [12] 6515 	clr	a
      002066 3D               [12] 6516 	addc	a,r5
      002067 FD               [12] 6517 	mov	r5,a
      002068 90r00r33         [24] 6518 	mov	dptr,#_count_address_65537_314
      00206B E9               [12] 6519 	mov	a,r1
      00206C F0               [24] 6520 	movx	@dptr,a
      00206D ED               [12] 6521 	mov	a,r5
      00206E A3               [24] 6522 	inc	dptr
      00206F F0               [24] 6523 	movx	@dptr,a
                                   6524 ;	count.c:142: index += NUM;
      002070 90r00r35         [24] 6525 	mov	dptr,#_count_index_65537_314
      002073 E0               [24] 6526 	movx	a,@dptr
      002074 24 0F            [12] 6527 	add	a,#0x0f
      002076 F0               [24] 6528 	movx	@dptr,a
                                   6529 ;	count.c:143: printCount(address, NUM, key, index, n);
      002077 90r00r33         [24] 6530 	mov	dptr,#_count_address_65537_314
      00207A E0               [24] 6531 	movx	a,@dptr
      00207B F9               [12] 6532 	mov	r1,a
      00207C A3               [24] 6533 	inc	dptr
      00207D E0               [24] 6534 	movx	a,@dptr
      00207E FD               [12] 6535 	mov	r5,a
      00207F 90r00r35         [24] 6536 	mov	dptr,#_count_index_65537_314
      002082 E0               [24] 6537 	movx	a,@dptr
      002083 F8               [12] 6538 	mov	r0,a
      002084 90r00r2E         [24] 6539 	mov	dptr,#_printCount_PARM_2
      002087 74 0F            [12] 6540 	mov	a,#0x0f
      002089 F0               [24] 6541 	movx	@dptr,a
      00208A 90r00r2F         [24] 6542 	mov	dptr,#_printCount_PARM_3
      00208D EF               [12] 6543 	mov	a,r7
      00208E F0               [24] 6544 	movx	@dptr,a
      00208F 90r00r30         [24] 6545 	mov	dptr,#_printCount_PARM_4
      002092 E8               [12] 6546 	mov	a,r0
      002093 F0               [24] 6547 	movx	@dptr,a
      002094 85*5C*58         [24] 6548 	mov	_printCount_PARM_5,_count_sloc2_1_0
      002097 89 82            [24] 6549 	mov	dpl,r1
      002099 8D 83            [24] 6550 	mov	dph,r5
      00209B C0 07            [24] 6551 	push	ar7
      00209D C0 06            [24] 6552 	push	ar6
      00209F C0 03            [24] 6553 	push	ar3
      0020A1 C0 02            [24] 6554 	push	ar2
      0020A3 12r1Dr4D         [24] 6555 	lcall	_printCount
      0020A6 D0 02            [24] 6556 	pop	ar2
      0020A8 D0 03            [24] 6557 	pop	ar3
      0020AA D0 06            [24] 6558 	pop	ar6
      0020AC D0 07            [24] 6559 	pop	ar7
                                   6560 ;	count.c:144: page++;
      0020AE 90r00r36         [24] 6561 	mov	dptr,#_count_page_65537_314
      0020B1 E5*5B            [12] 6562 	mov	a,_count_sloc1_1_0
      0020B3 04               [12] 6563 	inc	a
      0020B4 F0               [24] 6564 	movx	@dptr,a
      0020B5 02r1Fr68         [24] 6565 	ljmp	00128$
      0020B8                       6566 00125$:
                                   6567 ;	count.c:145: } else if (input == 'A' && page != 1) {				// previous
      0020B8 BC 41 70         [24] 6568 	cjne	r4,#0x41,00121$
      0020BB 90r00r36         [24] 6569 	mov	dptr,#_count_page_65537_314
      0020BE E0               [24] 6570 	movx	a,@dptr
      0020BF FD               [12] 6571 	mov	r5,a
      0020C0 BD 01 02         [24] 6572 	cjne	r5,#0x01,00210$
      0020C3 80 66            [24] 6573 	sjmp	00121$
      0020C5                       6574 00210$:
                                   6575 ;	count.c:146: address -= NUM;
      0020C5 C0 06            [24] 6576 	push	ar6
      0020C7 90r00r33         [24] 6577 	mov	dptr,#_count_address_65537_314
      0020CA E0               [24] 6578 	movx	a,@dptr
      0020CB F8               [12] 6579 	mov	r0,a
      0020CC A3               [24] 6580 	inc	dptr
      0020CD E0               [24] 6581 	movx	a,@dptr
      0020CE F9               [12] 6582 	mov	r1,a
      0020CF E8               [12] 6583 	mov	a,r0
      0020D0 24 F1            [12] 6584 	add	a,#0xf1
      0020D2 F8               [12] 6585 	mov	r0,a
      0020D3 E9               [12] 6586 	mov	a,r1
      0020D4 34 FF            [12] 6587 	addc	a,#0xff
      0020D6 F9               [12] 6588 	mov	r1,a
      0020D7 90r00r33         [24] 6589 	mov	dptr,#_count_address_65537_314
      0020DA E8               [12] 6590 	mov	a,r0
      0020DB F0               [24] 6591 	movx	@dptr,a
      0020DC E9               [12] 6592 	mov	a,r1
      0020DD A3               [24] 6593 	inc	dptr
      0020DE F0               [24] 6594 	movx	@dptr,a
                                   6595 ;	count.c:147: index -= NUM;
      0020DF 90r00r35         [24] 6596 	mov	dptr,#_count_index_65537_314
      0020E2 E0               [24] 6597 	movx	a,@dptr
      0020E3 24 F1            [12] 6598 	add	a,#0xf1
      0020E5 F0               [24] 6599 	movx	@dptr,a
                                   6600 ;	count.c:148: printCount(address, NUM, key, index, n);
      0020E6 90r00r33         [24] 6601 	mov	dptr,#_count_address_65537_314
      0020E9 E0               [24] 6602 	movx	a,@dptr
      0020EA F8               [12] 6603 	mov	r0,a
      0020EB A3               [24] 6604 	inc	dptr
      0020EC E0               [24] 6605 	movx	a,@dptr
      0020ED F9               [12] 6606 	mov	r1,a
      0020EE 90r00r35         [24] 6607 	mov	dptr,#_count_index_65537_314
      0020F1 E0               [24] 6608 	movx	a,@dptr
      0020F2 FE               [12] 6609 	mov	r6,a
      0020F3 90r00r2E         [24] 6610 	mov	dptr,#_printCount_PARM_2
      0020F6 74 0F            [12] 6611 	mov	a,#0x0f
      0020F8 F0               [24] 6612 	movx	@dptr,a
      0020F9 90r00r2F         [24] 6613 	mov	dptr,#_printCount_PARM_3
      0020FC EF               [12] 6614 	mov	a,r7
      0020FD F0               [24] 6615 	movx	@dptr,a
      0020FE 90r00r30         [24] 6616 	mov	dptr,#_printCount_PARM_4
      002101 EE               [12] 6617 	mov	a,r6
      002102 F0               [24] 6618 	movx	@dptr,a
      002103 8B*58            [24] 6619 	mov	_printCount_PARM_5,r3
      002105 88 82            [24] 6620 	mov	dpl,r0
      002107 89 83            [24] 6621 	mov	dph,r1
      002109 C0 07            [24] 6622 	push	ar7
      00210B C0 06            [24] 6623 	push	ar6
      00210D C0 05            [24] 6624 	push	ar5
      00210F C0 03            [24] 6625 	push	ar3
      002111 C0 02            [24] 6626 	push	ar2
      002113 12r1Dr4D         [24] 6627 	lcall	_printCount
      002116 D0 02            [24] 6628 	pop	ar2
      002118 D0 03            [24] 6629 	pop	ar3
      00211A D0 05            [24] 6630 	pop	ar5
      00211C D0 06            [24] 6631 	pop	ar6
      00211E D0 07            [24] 6632 	pop	ar7
                                   6633 ;	count.c:149: page--;
      002120 ED               [12] 6634 	mov	a,r5
      002121 14               [12] 6635 	dec	a
      002122 90r00r36         [24] 6636 	mov	dptr,#_count_page_65537_314
      002125 F0               [24] 6637 	movx	@dptr,a
      002126 D0 06            [24] 6638 	pop	ar6
      002128 02r1Fr68         [24] 6639 	ljmp	00128$
      00212B                       6640 00121$:
                                   6641 ;	count.c:150: } else if (input == '1') {							// main menu
      00212B BC 31 01         [24] 6642 	cjne	r4,#0x31,00211$
      00212E 22               [24] 6643 	ret
      00212F                       6644 00211$:
      00212F 02r1Fr68         [24] 6645 	ljmp	00128$
                                   6646 ;	count.c:153: } while(1);
                                   6647 ;	count.c:154: }
      002132 22               [24] 6648 	ret
                                   6649 ;------------------------------------------------------------
                                   6650 ;Allocation info for local variables in function 'readTemp'
                                   6651 ;------------------------------------------------------------
                                   6652 ;val                       Allocated with name '_readTemp_val_65536_328'
                                   6653 ;address                   Allocated to registers 
                                   6654 ;------------------------------------------------------------
                                   6655 ;	analog.c:6: uint8_t readTemp() {
                                   6656 ;	-----------------------------------------
                                   6657 ;	 function readTemp
                                   6658 ;	-----------------------------------------
      002133                       6659 _readTemp:
                                   6660 ;	analog.c:9: IOM = 1;
                                   6661 ;	assignBit
      002133 D2 B4            [12] 6662 	setb	_P3_4
                                   6663 ;	analog.c:10: address = (uint16_t __xdata*)(temp_address);
      002135 85*06 82         [24] 6664 	mov	dpl,_temp_address
      002138 85*07 83         [24] 6665 	mov	dph,(_temp_address + 1)
                                   6666 ;	analog.c:11: val = *address;
      00213B E0               [24] 6667 	movx	a,@dptr
                                   6668 ;	analog.c:13: return val;
                                   6669 ;	analog.c:14: }
      00213C F5 82            [12] 6670 	mov	dpl,a
      00213E 22               [24] 6671 	ret
                                   6672 ;------------------------------------------------------------
                                   6673 ;Allocation info for local variables in function 'readLight'
                                   6674 ;------------------------------------------------------------
                                   6675 ;val                       Allocated with name '_readLight_val_65536_329'
                                   6676 ;address                   Allocated to registers 
                                   6677 ;------------------------------------------------------------
                                   6678 ;	analog.c:21: uint8_t readLight() {
                                   6679 ;	-----------------------------------------
                                   6680 ;	 function readLight
                                   6681 ;	-----------------------------------------
      00213F                       6682 _readLight:
                                   6683 ;	analog.c:24: IOM = 1;
                                   6684 ;	assignBit
      00213F D2 B4            [12] 6685 	setb	_P3_4
                                   6686 ;	analog.c:25: address = (uint16_t __xdata*)(light_address);
      002141 85*08 82         [24] 6687 	mov	dpl,_light_address
      002144 85*09 83         [24] 6688 	mov	dph,(_light_address + 1)
                                   6689 ;	analog.c:26: val = *address;
      002147 E0               [24] 6690 	movx	a,@dptr
                                   6691 ;	analog.c:28: return val;
                                   6692 ;	analog.c:29: }
      002148 F5 82            [12] 6693 	mov	dpl,a
      00214A 22               [24] 6694 	ret
                                   6695 ;------------------------------------------------------------
                                   6696 ;Allocation info for local variables in function 'displayTemp'
                                   6697 ;------------------------------------------------------------
                                   6698 ;t                         Allocated to registers r7 
                                   6699 ;------------------------------------------------------------
                                   6700 ;	analog.c:36: void displayTemp(uint8_t t) {
                                   6701 ;	-----------------------------------------
                                   6702 ;	 function displayTemp
                                   6703 ;	-----------------------------------------
      00214B                       6704 _displayTemp:
      00214B AF 82            [24] 6705 	mov	r7,dpl
                                   6706 ;	analog.c:38: fillScreen(GRAY);
      00214D 90 D6 BA         [24] 6707 	mov	dptr,#0xd6ba
      002150 C0 07            [24] 6708 	push	ar7
      002152 12r08r44         [24] 6709 	lcall	_fillScreen
                                   6710 ;	analog.c:39: setCursor(0, 0);
      002155 E4               [12] 6711 	clr	a
      002156 F5*00            [12] 6712 	mov	_setCursor_PARM_2,a
      002158 F5*01            [12] 6713 	mov	(_setCursor_PARM_2 + 1),a
      00215A 90 00 00         [24] 6714 	mov	dptr,#0x0000
      00215D 12r00rB6         [24] 6715 	lcall	_setCursor
                                   6716 ;	analog.c:40: setTextSize(2);
      002160 75 82 02         [24] 6717 	mov	dpl,#0x02
      002163 12r00rD0         [24] 6718 	lcall	_setTextSize
                                   6719 ;	analog.c:42: LCD_string_write("Temperature: ");
      002166 90r07rAE         [24] 6720 	mov	dptr,#___str_42
      002169 75 F0 80         [24] 6721 	mov	b,#0x80
      00216C 12r0Cr4B         [24] 6722 	lcall	_LCD_string_write
      00216F D0 07            [24] 6723 	pop	ar7
                                   6724 ;	analog.c:44: asciiToHex(t);
      002171 8F 82            [24] 6725 	mov	dpl,r7
      002173 12r0ErBD         [24] 6726 	lcall	_asciiToHex
                                   6727 ;	analog.c:46: write('\n');
      002176 75 82 0A         [24] 6728 	mov	dpl,#0x0a
      002179 12r0BrDD         [24] 6729 	lcall	_write
                                   6730 ;	analog.c:47: LCD_string_write("Press 1 for menu\n");
      00217C 90r06r0B         [24] 6731 	mov	dptr,#___str_18
      00217F 75 F0 80         [24] 6732 	mov	b,#0x80
      002182 12r0Cr4B         [24] 6733 	lcall	_LCD_string_write
                                   6734 ;	analog.c:48: LCD_string_write("Press key to refresh\n");
      002185 90r07rBC         [24] 6735 	mov	dptr,#___str_43
      002188 75 F0 80         [24] 6736 	mov	b,#0x80
                                   6737 ;	analog.c:49: }
      00218B 02r0Cr4B         [24] 6738 	ljmp	_LCD_string_write
                                   6739 ;------------------------------------------------------------
                                   6740 ;Allocation info for local variables in function 'displayLight'
                                   6741 ;------------------------------------------------------------
                                   6742 ;l                         Allocated to registers r7 
                                   6743 ;------------------------------------------------------------
                                   6744 ;	analog.c:56: void displayLight(uint8_t l) {
                                   6745 ;	-----------------------------------------
                                   6746 ;	 function displayLight
                                   6747 ;	-----------------------------------------
      00218E                       6748 _displayLight:
      00218E AF 82            [24] 6749 	mov	r7,dpl
                                   6750 ;	analog.c:58: fillScreen(GRAY);
      002190 90 D6 BA         [24] 6751 	mov	dptr,#0xd6ba
      002193 C0 07            [24] 6752 	push	ar7
      002195 12r08r44         [24] 6753 	lcall	_fillScreen
                                   6754 ;	analog.c:59: setCursor(0, 0);
      002198 E4               [12] 6755 	clr	a
      002199 F5*00            [12] 6756 	mov	_setCursor_PARM_2,a
      00219B F5*01            [12] 6757 	mov	(_setCursor_PARM_2 + 1),a
      00219D 90 00 00         [24] 6758 	mov	dptr,#0x0000
      0021A0 12r00rB6         [24] 6759 	lcall	_setCursor
                                   6760 ;	analog.c:60: setTextSize(2);
      0021A3 75 82 02         [24] 6761 	mov	dpl,#0x02
      0021A6 12r00rD0         [24] 6762 	lcall	_setTextSize
                                   6763 ;	analog.c:62: LCD_string_write("Light level: ");
      0021A9 90r07rD2         [24] 6764 	mov	dptr,#___str_44
      0021AC 75 F0 80         [24] 6765 	mov	b,#0x80
      0021AF 12r0Cr4B         [24] 6766 	lcall	_LCD_string_write
      0021B2 D0 07            [24] 6767 	pop	ar7
                                   6768 ;	analog.c:64: asciiToHex(l);
      0021B4 8F 82            [24] 6769 	mov	dpl,r7
      0021B6 12r0ErBD         [24] 6770 	lcall	_asciiToHex
                                   6771 ;	analog.c:66: write('\n');
      0021B9 75 82 0A         [24] 6772 	mov	dpl,#0x0a
      0021BC 12r0BrDD         [24] 6773 	lcall	_write
                                   6774 ;	analog.c:67: LCD_string_write("Press 1 for menu\n");
      0021BF 90r06r0B         [24] 6775 	mov	dptr,#___str_18
      0021C2 75 F0 80         [24] 6776 	mov	b,#0x80
      0021C5 12r0Cr4B         [24] 6777 	lcall	_LCD_string_write
                                   6778 ;	analog.c:68: LCD_string_write("Press key to refresh\n");
      0021C8 90r07rBC         [24] 6779 	mov	dptr,#___str_43
      0021CB 75 F0 80         [24] 6780 	mov	b,#0x80
                                   6781 ;	analog.c:69: }
      0021CE 02r0Cr4B         [24] 6782 	ljmp	_LCD_string_write
                                   6783 ;------------------------------------------------------------
                                   6784 ;Allocation info for local variables in function 'temperature'
                                   6785 ;------------------------------------------------------------
                                   6786 ;temp                      Allocated with name '_temperature_temp_65537_335'
                                   6787 ;input                     Allocated with name '_temperature_input_65537_335'
                                   6788 ;------------------------------------------------------------
                                   6789 ;	analog.c:76: void temperature() {
                                   6790 ;	-----------------------------------------
                                   6791 ;	 function temperature
                                   6792 ;	-----------------------------------------
      0021D1                       6793 _temperature:
                                   6794 ;	analog.c:78: fillScreen(GRAY);
      0021D1 90 D6 BA         [24] 6795 	mov	dptr,#0xd6ba
      0021D4 12r08r44         [24] 6796 	lcall	_fillScreen
                                   6797 ;	analog.c:79: setCursor(0, 0);
      0021D7 E4               [12] 6798 	clr	a
      0021D8 F5*00            [12] 6799 	mov	_setCursor_PARM_2,a
      0021DA F5*01            [12] 6800 	mov	(_setCursor_PARM_2 + 1),a
      0021DC 90 00 00         [24] 6801 	mov	dptr,#0x0000
      0021DF 12r00rB6         [24] 6802 	lcall	_setCursor
                                   6803 ;	analog.c:80: setTextSize(2);
      0021E2 75 82 02         [24] 6804 	mov	dpl,#0x02
      0021E5 12r00rD0         [24] 6805 	lcall	_setTextSize
                                   6806 ;	analog.c:86: temp = readTemp();
      0021E8 12r21r33         [24] 6807 	lcall	_readTemp
                                   6808 ;	analog.c:89: displayTemp(temp);
      0021EB 12r21r4B         [24] 6809 	lcall	_displayTemp
                                   6810 ;	analog.c:92: while (1) {
      0021EE                       6811 00104$:
                                   6812 ;	analog.c:93: input = keyDetect();
      0021EE 12r0CrE4         [24] 6813 	lcall	_keyDetect
      0021F1 AF 82            [24] 6814 	mov	r7,dpl
                                   6815 ;	analog.c:95: if (input == '1') break;
      0021F3 BF 31 01         [24] 6816 	cjne	r7,#0x31,00116$
      0021F6 22               [24] 6817 	ret
      0021F7                       6818 00116$:
                                   6819 ;	analog.c:97: delay(500);
      0021F7 90 01 F4         [24] 6820 	mov	dptr,#0x01f4
      0021FA 12r00r21         [24] 6821 	lcall	_delay
                                   6822 ;	analog.c:99: temp = ioread8(temp_address);
      0021FD 85*06 82         [24] 6823 	mov	dpl,_temp_address
      002200 85*07 83         [24] 6824 	mov	dph,(_temp_address + 1)
      002203 12r00r10         [24] 6825 	lcall	_ioread8
                                   6826 ;	analog.c:100: displayTemp(temp);
      002206 12r21r4B         [24] 6827 	lcall	_displayTemp
                                   6828 ;	analog.c:102: }
      002209 80 E3            [24] 6829 	sjmp	00104$
                                   6830 ;------------------------------------------------------------
                                   6831 ;Allocation info for local variables in function 'light'
                                   6832 ;------------------------------------------------------------
                                   6833 ;light                     Allocated with name '_light_light_65537_338'
                                   6834 ;input                     Allocated with name '_light_input_65537_338'
                                   6835 ;------------------------------------------------------------
                                   6836 ;	analog.c:109: void light() {
                                   6837 ;	-----------------------------------------
                                   6838 ;	 function light
                                   6839 ;	-----------------------------------------
      00220B                       6840 _light:
                                   6841 ;	analog.c:111: fillScreen(GRAY);
      00220B 90 D6 BA         [24] 6842 	mov	dptr,#0xd6ba
      00220E 12r08r44         [24] 6843 	lcall	_fillScreen
                                   6844 ;	analog.c:112: setCursor(0, 0);
      002211 E4               [12] 6845 	clr	a
      002212 F5*00            [12] 6846 	mov	_setCursor_PARM_2,a
      002214 F5*01            [12] 6847 	mov	(_setCursor_PARM_2 + 1),a
      002216 90 00 00         [24] 6848 	mov	dptr,#0x0000
      002219 12r00rB6         [24] 6849 	lcall	_setCursor
                                   6850 ;	analog.c:113: setTextSize(2);
      00221C 75 82 02         [24] 6851 	mov	dpl,#0x02
      00221F 12r00rD0         [24] 6852 	lcall	_setTextSize
                                   6853 ;	analog.c:119: light = readLight();
      002222 12r21r3F         [24] 6854 	lcall	_readLight
                                   6855 ;	analog.c:122: displayLight(light);
      002225 12r21r8E         [24] 6856 	lcall	_displayLight
                                   6857 ;	analog.c:125: while (1) {
      002228                       6858 00104$:
                                   6859 ;	analog.c:126: input = keyDetect();
      002228 12r0CrE4         [24] 6860 	lcall	_keyDetect
      00222B AF 82            [24] 6861 	mov	r7,dpl
                                   6862 ;	analog.c:128: if (input == '1') break;
      00222D BF 31 01         [24] 6863 	cjne	r7,#0x31,00116$
      002230 22               [24] 6864 	ret
      002231                       6865 00116$:
                                   6866 ;	analog.c:130: delay(500);
      002231 90 01 F4         [24] 6867 	mov	dptr,#0x01f4
      002234 12r00r21         [24] 6868 	lcall	_delay
                                   6869 ;	analog.c:132: light = ioread8(light_address);
      002237 85*08 82         [24] 6870 	mov	dpl,_light_address
      00223A 85*09 83         [24] 6871 	mov	dph,(_light_address + 1)
      00223D 12r00r10         [24] 6872 	lcall	_ioread8
                                   6873 ;	analog.c:133: displayLight(light);
      002240 12r21r8E         [24] 6874 	lcall	_displayLight
                                   6875 ;	analog.c:135: }
      002243 80 E3            [24] 6876 	sjmp	00104$
                                   6877 ;------------------------------------------------------------
                                   6878 ;Allocation info for local variables in function 'menu'
                                   6879 ;------------------------------------------------------------
                                   6880 ;	main.c:30: void menu(void) {
                                   6881 ;	-----------------------------------------
                                   6882 ;	 function menu
                                   6883 ;	-----------------------------------------
      002245                       6884 _menu:
                                   6885 ;	main.c:32: setRotation(2);
      002245 75 82 02         [24] 6886 	mov	dpl,#0x02
      002248 12r00rE8         [24] 6887 	lcall	_setRotation
                                   6888 ;	main.c:33: setTextSize(3);
      00224B 75 82 03         [24] 6889 	mov	dpl,#0x03
      00224E 12r00rD0         [24] 6890 	lcall	_setTextSize
                                   6891 ;	main.c:34: fillScreen(GRAY);
      002251 90 D6 BA         [24] 6892 	mov	dptr,#0xd6ba
      002254 12r08r44         [24] 6893 	lcall	_fillScreen
                                   6894 ;	main.c:35: setTextColor(BLACK, GRAY);
      002257 75*00 BA         [24] 6895 	mov	_setTextColor_PARM_2,#0xba
      00225A 75*01 D6         [24] 6896 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      00225D 90 00 00         [24] 6897 	mov	dptr,#0x0000
      002260 12r00rC3         [24] 6898 	lcall	_setTextColor
                                   6899 ;	main.c:36: setCursor(0, 0);
      002263 E4               [12] 6900 	clr	a
      002264 F5*00            [12] 6901 	mov	_setCursor_PARM_2,a
      002266 F5*01            [12] 6902 	mov	(_setCursor_PARM_2 + 1),a
      002268 90 00 00         [24] 6903 	mov	dptr,#0x0000
      00226B 12r00rB6         [24] 6904 	lcall	_setCursor
                                   6905 ;	main.c:39: LCD_string_write("Brandon Cline\n");
      00226E 90r07rE0         [24] 6906 	mov	dptr,#___str_45
      002271 75 F0 80         [24] 6907 	mov	b,#0x80
      002274 12r0Cr4B         [24] 6908 	lcall	_LCD_string_write
                                   6909 ;	main.c:40: LCD_string_write("ECEN 4330\n");
      002277 90r07rEF         [24] 6910 	mov	dptr,#___str_46
      00227A 75 F0 80         [24] 6911 	mov	b,#0x80
      00227D 12r0Cr4B         [24] 6912 	lcall	_LCD_string_write
                                   6913 ;	main.c:42: setTextSize(2);
      002280 75 82 02         [24] 6914 	mov	dpl,#0x02
      002283 12r00rD0         [24] 6915 	lcall	_setTextSize
                                   6916 ;	main.c:46: LCD_string_write("1: Basic check\n");
      002286 90r07rFA         [24] 6917 	mov	dptr,#___str_47
      002289 75 F0 80         [24] 6918 	mov	b,#0x80
      00228C 12r0Cr4B         [24] 6919 	lcall	_LCD_string_write
                                   6920 ;	main.c:48: LCD_string_write("2: Dump\n");
      00228F 90r08r0A         [24] 6921 	mov	dptr,#___str_48
      002292 75 F0 80         [24] 6922 	mov	b,#0x80
      002295 12r0Cr4B         [24] 6923 	lcall	_LCD_string_write
                                   6924 ;	main.c:50: LCD_string_write("3: Check\n");
      002298 90r08r13         [24] 6925 	mov	dptr,#___str_49
      00229B 75 F0 80         [24] 6926 	mov	b,#0x80
      00229E 12r0Cr4B         [24] 6927 	lcall	_LCD_string_write
                                   6928 ;	main.c:52: LCD_string_write("A: Move\n");
      0022A1 90r08r1D         [24] 6929 	mov	dptr,#___str_50
      0022A4 75 F0 80         [24] 6930 	mov	b,#0x80
      0022A7 12r0Cr4B         [24] 6931 	lcall	_LCD_string_write
                                   6932 ;	main.c:54: LCD_string_write("4: Edit\n");
      0022AA 90r08r26         [24] 6933 	mov	dptr,#___str_51
      0022AD 75 F0 80         [24] 6934 	mov	b,#0x80
      0022B0 12r0Cr4B         [24] 6935 	lcall	_LCD_string_write
                                   6936 ;	main.c:56: LCD_string_write("5: Find\n");
      0022B3 90r08r2F         [24] 6937 	mov	dptr,#___str_52
      0022B6 75 F0 80         [24] 6938 	mov	b,#0x80
      0022B9 12r0Cr4B         [24] 6939 	lcall	_LCD_string_write
                                   6940 ;	main.c:58: LCD_string_write("6: Count\n");
      0022BC 90r08r38         [24] 6941 	mov	dptr,#___str_53
      0022BF 75 F0 80         [24] 6942 	mov	b,#0x80
      0022C2 12r0Cr4B         [24] 6943 	lcall	_LCD_string_write
                                   6944 ;	main.c:61: LCD_string_write("B: Temperature\n");
      0022C5 90r08r42         [24] 6945 	mov	dptr,#___str_54
      0022C8 75 F0 80         [24] 6946 	mov	b,#0x80
      0022CB 12r0Cr4B         [24] 6947 	lcall	_LCD_string_write
                                   6948 ;	main.c:63: LCD_string_write("7: Light\n");
      0022CE 90r08r52         [24] 6949 	mov	dptr,#___str_55
      0022D1 75 F0 80         [24] 6950 	mov	b,#0x80
                                   6951 ;	main.c:64: }
      0022D4 02r0Cr4B         [24] 6952 	ljmp	_LCD_string_write
                                   6953 ;------------------------------------------------------------
                                   6954 ;Allocation info for local variables in function 'main'
                                   6955 ;------------------------------------------------------------
                                   6956 ;input                     Allocated with name '_main_input_65536_343'
                                   6957 ;------------------------------------------------------------
                                   6958 ;	main.c:66: void main(void) {
                                   6959 ;	-----------------------------------------
                                   6960 ;	 function main
                                   6961 ;	-----------------------------------------
      0022D7                       6962 _main:
                                   6963 ;	main.c:71: iowrite8(seg7_address, 0x00);
      0022D7 75*00 00         [24] 6964 	mov	_iowrite8_PARM_2,#0x00
      0022DA 85*04 82         [24] 6965 	mov	dpl,_seg7_address
      0022DD 85*05 83         [24] 6966 	mov	dph,(_seg7_address + 1)
      0022E0 12r00r00         [24] 6967 	lcall	_iowrite8
                                   6968 ;	main.c:74: TFT_LCD_INIT();
      0022E3 12r02r11         [24] 6969 	lcall	_TFT_LCD_INIT
                                   6970 ;	main.c:76: fillScreen(BLACK);
      0022E6 90 00 00         [24] 6971 	mov	dptr,#0x0000
      0022E9 12r08r44         [24] 6972 	lcall	_fillScreen
                                   6973 ;	main.c:77: setRotation(0);
      0022EC 75 82 00         [24] 6974 	mov	dpl,#0x00
      0022EF 12r00rE8         [24] 6975 	lcall	_setRotation
                                   6976 ;	main.c:78: testCircles(20, BLUE);
      0022F2 75*2C 1F         [24] 6977 	mov	_testCircles_PARM_2,#0x1f
      0022F5 75*2D 00         [24] 6978 	mov	(_testCircles_PARM_2 + 1),#0x00
      0022F8 75 82 14         [24] 6979 	mov	dpl,#0x14
      0022FB 12r06r9D         [24] 6980 	lcall	_testCircles
                                   6981 ;	main.c:82: while (1) {
      0022FE                       6982 00113$:
                                   6983 ;	main.c:84: menu();
      0022FE 12r22r45         [24] 6984 	lcall	_menu
                                   6985 ;	main.c:87: input = keyDetect();
      002301 12r0CrE4         [24] 6986 	lcall	_keyDetect
      002304 AF 82            [24] 6987 	mov	r7,dpl
                                   6988 ;	main.c:91: switch(input) {
      002306 BF 31 02         [24] 6989 	cjne	r7,#0x31,00157$
      002309 80 28            [24] 6990 	sjmp	00101$
      00230B                       6991 00157$:
      00230B BF 32 02         [24] 6992 	cjne	r7,#0x32,00158$
      00230E 80 28            [24] 6993 	sjmp	00102$
      002310                       6994 00158$:
      002310 BF 33 02         [24] 6995 	cjne	r7,#0x33,00159$
      002313 80 28            [24] 6996 	sjmp	00103$
      002315                       6997 00159$:
      002315 BF 34 02         [24] 6998 	cjne	r7,#0x34,00160$
      002318 80 2D            [24] 6999 	sjmp	00105$
      00231A                       7000 00160$:
      00231A BF 35 02         [24] 7001 	cjne	r7,#0x35,00161$
      00231D 80 2D            [24] 7002 	sjmp	00106$
      00231F                       7003 00161$:
      00231F BF 36 02         [24] 7004 	cjne	r7,#0x36,00162$
      002322 80 2D            [24] 7005 	sjmp	00107$
      002324                       7006 00162$:
      002324 BF 37 02         [24] 7007 	cjne	r7,#0x37,00163$
      002327 80 32            [24] 7008 	sjmp	00109$
      002329                       7009 00163$:
      002329 BF 41 02         [24] 7010 	cjne	r7,#0x41,00164$
      00232C 80 14            [24] 7011 	sjmp	00104$
      00232E                       7012 00164$:
                                   7013 ;	main.c:92: case '1': basic(); break;
      00232E BF 42 CD         [24] 7014 	cjne	r7,#0x42,00113$
      002331 80 23            [24] 7015 	sjmp	00108$
      002333                       7016 00101$:
      002333 12r16r63         [24] 7017 	lcall	_basic
                                   7018 ;	main.c:93: case '2': dump(); break;
      002336 80 C6            [24] 7019 	sjmp	00113$
      002338                       7020 00102$:
      002338 12r12r28         [24] 7021 	lcall	_dump
                                   7022 ;	main.c:94: case '3': check(); break;
      00233B 80 C1            [24] 7023 	sjmp	00113$
      00233D                       7024 00103$:
      00233D 12r15r27         [24] 7025 	lcall	_check
                                   7026 ;	main.c:95: case 'A': move(); break;
      002340 80 BC            [24] 7027 	sjmp	00113$
      002342                       7028 00104$:
      002342 12r16rF9         [24] 7029 	lcall	_move
                                   7030 ;	main.c:96: case '4': edit(); break;
      002345 80 B7            [24] 7031 	sjmp	00113$
      002347                       7032 00105$:
      002347 12r18rA8         [24] 7033 	lcall	_edit
                                   7034 ;	main.c:97: case '5': find(); break;
      00234A 80 B2            [24] 7035 	sjmp	00113$
      00234C                       7036 00106$:
      00234C 12r1Ar86         [24] 7037 	lcall	_find
                                   7038 ;	main.c:98: case '6': count(); break;
      00234F 80 AD            [24] 7039 	sjmp	00113$
      002351                       7040 00107$:
      002351 12r1Er31         [24] 7041 	lcall	_count
                                   7042 ;	main.c:99: case 'B': temperature(); break;
      002354 80 A8            [24] 7043 	sjmp	00113$
      002356                       7044 00108$:
      002356 12r21rD1         [24] 7045 	lcall	_temperature
                                   7046 ;	main.c:100: case '7': light(); break;
      002359 80 A3            [24] 7047 	sjmp	00113$
      00235B                       7048 00109$:
      00235B 12r22r0B         [24] 7049 	lcall	_light
                                   7050 ;	main.c:102: }
                                   7051 ;	main.c:104: }
      00235E 80 9E            [24] 7052 	sjmp	00113$
                                   7053 	.area CSEG    (CODE)
                                   7054 	.area CONST   (CODE)
      000000                       7055 _font:
      000000 00                    7056 	.db #0x00	; 0
      000001 00                    7057 	.db #0x00	; 0
      000002 00                    7058 	.db #0x00	; 0
      000003 00                    7059 	.db #0x00	; 0
      000004 00                    7060 	.db #0x00	; 0
      000005 3E                    7061 	.db #0x3e	; 62
      000006 5B                    7062 	.db #0x5b	; 91
      000007 4F                    7063 	.db #0x4f	; 79	'O'
      000008 5B                    7064 	.db #0x5b	; 91
      000009 3E                    7065 	.db #0x3e	; 62
      00000A 3E                    7066 	.db #0x3e	; 62
      00000B 6B                    7067 	.db #0x6b	; 107	'k'
      00000C 4F                    7068 	.db #0x4f	; 79	'O'
      00000D 6B                    7069 	.db #0x6b	; 107	'k'
      00000E 3E                    7070 	.db #0x3e	; 62
      00000F 1C                    7071 	.db #0x1c	; 28
      000010 3E                    7072 	.db #0x3e	; 62
      000011 7C                    7073 	.db #0x7c	; 124
      000012 3E                    7074 	.db #0x3e	; 62
      000013 1C                    7075 	.db #0x1c	; 28
      000014 18                    7076 	.db #0x18	; 24
      000015 3C                    7077 	.db #0x3c	; 60
      000016 7E                    7078 	.db #0x7e	; 126
      000017 3C                    7079 	.db #0x3c	; 60
      000018 18                    7080 	.db #0x18	; 24
      000019 1C                    7081 	.db #0x1c	; 28
      00001A 57                    7082 	.db #0x57	; 87	'W'
      00001B 7D                    7083 	.db #0x7d	; 125
      00001C 57                    7084 	.db #0x57	; 87	'W'
      00001D 1C                    7085 	.db #0x1c	; 28
      00001E 1C                    7086 	.db #0x1c	; 28
      00001F 5E                    7087 	.db #0x5e	; 94
      000020 7F                    7088 	.db #0x7f	; 127
      000021 5E                    7089 	.db #0x5e	; 94
      000022 1C                    7090 	.db #0x1c	; 28
      000023 00                    7091 	.db #0x00	; 0
      000024 18                    7092 	.db #0x18	; 24
      000025 3C                    7093 	.db #0x3c	; 60
      000026 18                    7094 	.db #0x18	; 24
      000027 00                    7095 	.db #0x00	; 0
      000028 FF                    7096 	.db #0xff	; 255
      000029 E7                    7097 	.db #0xe7	; 231
      00002A C3                    7098 	.db #0xc3	; 195
      00002B E7                    7099 	.db #0xe7	; 231
      00002C FF                    7100 	.db #0xff	; 255
      00002D 00                    7101 	.db #0x00	; 0
      00002E 18                    7102 	.db #0x18	; 24
      00002F 24                    7103 	.db #0x24	; 36
      000030 18                    7104 	.db #0x18	; 24
      000031 00                    7105 	.db #0x00	; 0
      000032 FF                    7106 	.db #0xff	; 255
      000033 E7                    7107 	.db #0xe7	; 231
      000034 DB                    7108 	.db #0xdb	; 219
      000035 E7                    7109 	.db #0xe7	; 231
      000036 FF                    7110 	.db #0xff	; 255
      000037 30                    7111 	.db #0x30	; 48	'0'
      000038 48                    7112 	.db #0x48	; 72	'H'
      000039 3A                    7113 	.db #0x3a	; 58
      00003A 06                    7114 	.db #0x06	; 6
      00003B 0E                    7115 	.db #0x0e	; 14
      00003C 26                    7116 	.db #0x26	; 38
      00003D 29                    7117 	.db #0x29	; 41
      00003E 79                    7118 	.db #0x79	; 121	'y'
      00003F 29                    7119 	.db #0x29	; 41
      000040 26                    7120 	.db #0x26	; 38
      000041 40                    7121 	.db #0x40	; 64
      000042 7F                    7122 	.db #0x7f	; 127
      000043 05                    7123 	.db #0x05	; 5
      000044 05                    7124 	.db #0x05	; 5
      000045 07                    7125 	.db #0x07	; 7
      000046 40                    7126 	.db #0x40	; 64
      000047 7F                    7127 	.db #0x7f	; 127
      000048 05                    7128 	.db #0x05	; 5
      000049 25                    7129 	.db #0x25	; 37
      00004A 3F                    7130 	.db #0x3f	; 63
      00004B 5A                    7131 	.db #0x5a	; 90	'Z'
      00004C 3C                    7132 	.db #0x3c	; 60
      00004D E7                    7133 	.db #0xe7	; 231
      00004E 3C                    7134 	.db #0x3c	; 60
      00004F 5A                    7135 	.db #0x5a	; 90	'Z'
      000050 7F                    7136 	.db #0x7f	; 127
      000051 3E                    7137 	.db #0x3e	; 62
      000052 1C                    7138 	.db #0x1c	; 28
      000053 1C                    7139 	.db #0x1c	; 28
      000054 08                    7140 	.db #0x08	; 8
      000055 08                    7141 	.db #0x08	; 8
      000056 1C                    7142 	.db #0x1c	; 28
      000057 1C                    7143 	.db #0x1c	; 28
      000058 3E                    7144 	.db #0x3e	; 62
      000059 7F                    7145 	.db #0x7f	; 127
      00005A 14                    7146 	.db #0x14	; 20
      00005B 22                    7147 	.db #0x22	; 34
      00005C 7F                    7148 	.db #0x7f	; 127
      00005D 22                    7149 	.db #0x22	; 34
      00005E 14                    7150 	.db #0x14	; 20
      00005F 5F                    7151 	.db #0x5f	; 95
      000060 5F                    7152 	.db #0x5f	; 95
      000061 00                    7153 	.db #0x00	; 0
      000062 5F                    7154 	.db #0x5f	; 95
      000063 5F                    7155 	.db #0x5f	; 95
      000064 06                    7156 	.db #0x06	; 6
      000065 09                    7157 	.db #0x09	; 9
      000066 7F                    7158 	.db #0x7f	; 127
      000067 01                    7159 	.db #0x01	; 1
      000068 7F                    7160 	.db #0x7f	; 127
      000069 00                    7161 	.db #0x00	; 0
      00006A 66                    7162 	.db #0x66	; 102	'f'
      00006B 89                    7163 	.db #0x89	; 137
      00006C 95                    7164 	.db #0x95	; 149
      00006D 6A                    7165 	.db #0x6a	; 106	'j'
      00006E 60                    7166 	.db #0x60	; 96
      00006F 60                    7167 	.db #0x60	; 96
      000070 60                    7168 	.db #0x60	; 96
      000071 60                    7169 	.db #0x60	; 96
      000072 60                    7170 	.db #0x60	; 96
      000073 94                    7171 	.db #0x94	; 148
      000074 A2                    7172 	.db #0xa2	; 162
      000075 FF                    7173 	.db #0xff	; 255
      000076 A2                    7174 	.db #0xa2	; 162
      000077 94                    7175 	.db #0x94	; 148
      000078 08                    7176 	.db #0x08	; 8
      000079 04                    7177 	.db #0x04	; 4
      00007A 7E                    7178 	.db #0x7e	; 126
      00007B 04                    7179 	.db #0x04	; 4
      00007C 08                    7180 	.db #0x08	; 8
      00007D 10                    7181 	.db #0x10	; 16
      00007E 20                    7182 	.db #0x20	; 32
      00007F 7E                    7183 	.db #0x7e	; 126
      000080 20                    7184 	.db #0x20	; 32
      000081 10                    7185 	.db #0x10	; 16
      000082 08                    7186 	.db #0x08	; 8
      000083 08                    7187 	.db #0x08	; 8
      000084 2A                    7188 	.db #0x2a	; 42
      000085 1C                    7189 	.db #0x1c	; 28
      000086 08                    7190 	.db #0x08	; 8
      000087 08                    7191 	.db #0x08	; 8
      000088 1C                    7192 	.db #0x1c	; 28
      000089 2A                    7193 	.db #0x2a	; 42
      00008A 08                    7194 	.db #0x08	; 8
      00008B 08                    7195 	.db #0x08	; 8
      00008C 1E                    7196 	.db #0x1e	; 30
      00008D 10                    7197 	.db #0x10	; 16
      00008E 10                    7198 	.db #0x10	; 16
      00008F 10                    7199 	.db #0x10	; 16
      000090 10                    7200 	.db #0x10	; 16
      000091 0C                    7201 	.db #0x0c	; 12
      000092 1E                    7202 	.db #0x1e	; 30
      000093 0C                    7203 	.db #0x0c	; 12
      000094 1E                    7204 	.db #0x1e	; 30
      000095 0C                    7205 	.db #0x0c	; 12
      000096 30                    7206 	.db #0x30	; 48	'0'
      000097 38                    7207 	.db #0x38	; 56	'8'
      000098 3E                    7208 	.db #0x3e	; 62
      000099 38                    7209 	.db #0x38	; 56	'8'
      00009A 30                    7210 	.db #0x30	; 48	'0'
      00009B 06                    7211 	.db #0x06	; 6
      00009C 0E                    7212 	.db #0x0e	; 14
      00009D 3E                    7213 	.db #0x3e	; 62
      00009E 0E                    7214 	.db #0x0e	; 14
      00009F 06                    7215 	.db #0x06	; 6
      0000A0 00                    7216 	.db #0x00	; 0
      0000A1 00                    7217 	.db #0x00	; 0
      0000A2 00                    7218 	.db #0x00	; 0
      0000A3 00                    7219 	.db #0x00	; 0
      0000A4 00                    7220 	.db #0x00	; 0
      0000A5 00                    7221 	.db #0x00	; 0
      0000A6 00                    7222 	.db #0x00	; 0
      0000A7 5F                    7223 	.db #0x5f	; 95
      0000A8 00                    7224 	.db #0x00	; 0
      0000A9 00                    7225 	.db #0x00	; 0
      0000AA 00                    7226 	.db #0x00	; 0
      0000AB 07                    7227 	.db #0x07	; 7
      0000AC 00                    7228 	.db #0x00	; 0
      0000AD 07                    7229 	.db #0x07	; 7
      0000AE 00                    7230 	.db #0x00	; 0
      0000AF 14                    7231 	.db #0x14	; 20
      0000B0 7F                    7232 	.db #0x7f	; 127
      0000B1 14                    7233 	.db #0x14	; 20
      0000B2 7F                    7234 	.db #0x7f	; 127
      0000B3 14                    7235 	.db #0x14	; 20
      0000B4 24                    7236 	.db #0x24	; 36
      0000B5 2A                    7237 	.db #0x2a	; 42
      0000B6 7F                    7238 	.db #0x7f	; 127
      0000B7 2A                    7239 	.db #0x2a	; 42
      0000B8 12                    7240 	.db #0x12	; 18
      0000B9 23                    7241 	.db #0x23	; 35
      0000BA 13                    7242 	.db #0x13	; 19
      0000BB 08                    7243 	.db #0x08	; 8
      0000BC 64                    7244 	.db #0x64	; 100	'd'
      0000BD 62                    7245 	.db #0x62	; 98	'b'
      0000BE 36                    7246 	.db #0x36	; 54	'6'
      0000BF 49                    7247 	.db #0x49	; 73	'I'
      0000C0 56                    7248 	.db #0x56	; 86	'V'
      0000C1 20                    7249 	.db #0x20	; 32
      0000C2 50                    7250 	.db #0x50	; 80	'P'
      0000C3 00                    7251 	.db #0x00	; 0
      0000C4 08                    7252 	.db #0x08	; 8
      0000C5 07                    7253 	.db #0x07	; 7
      0000C6 03                    7254 	.db #0x03	; 3
      0000C7 00                    7255 	.db #0x00	; 0
      0000C8 00                    7256 	.db #0x00	; 0
      0000C9 1C                    7257 	.db #0x1c	; 28
      0000CA 22                    7258 	.db #0x22	; 34
      0000CB 41                    7259 	.db #0x41	; 65	'A'
      0000CC 00                    7260 	.db #0x00	; 0
      0000CD 00                    7261 	.db #0x00	; 0
      0000CE 41                    7262 	.db #0x41	; 65	'A'
      0000CF 22                    7263 	.db #0x22	; 34
      0000D0 1C                    7264 	.db #0x1c	; 28
      0000D1 00                    7265 	.db #0x00	; 0
      0000D2 2A                    7266 	.db #0x2a	; 42
      0000D3 1C                    7267 	.db #0x1c	; 28
      0000D4 7F                    7268 	.db #0x7f	; 127
      0000D5 1C                    7269 	.db #0x1c	; 28
      0000D6 2A                    7270 	.db #0x2a	; 42
      0000D7 08                    7271 	.db #0x08	; 8
      0000D8 08                    7272 	.db #0x08	; 8
      0000D9 3E                    7273 	.db #0x3e	; 62
      0000DA 08                    7274 	.db #0x08	; 8
      0000DB 08                    7275 	.db #0x08	; 8
      0000DC 00                    7276 	.db #0x00	; 0
      0000DD 80                    7277 	.db #0x80	; 128
      0000DE 70                    7278 	.db #0x70	; 112	'p'
      0000DF 30                    7279 	.db #0x30	; 48	'0'
      0000E0 00                    7280 	.db #0x00	; 0
      0000E1 08                    7281 	.db #0x08	; 8
      0000E2 08                    7282 	.db #0x08	; 8
      0000E3 08                    7283 	.db #0x08	; 8
      0000E4 08                    7284 	.db #0x08	; 8
      0000E5 08                    7285 	.db #0x08	; 8
      0000E6 00                    7286 	.db #0x00	; 0
      0000E7 00                    7287 	.db #0x00	; 0
      0000E8 60                    7288 	.db #0x60	; 96
      0000E9 60                    7289 	.db #0x60	; 96
      0000EA 00                    7290 	.db #0x00	; 0
      0000EB 20                    7291 	.db #0x20	; 32
      0000EC 10                    7292 	.db #0x10	; 16
      0000ED 08                    7293 	.db #0x08	; 8
      0000EE 04                    7294 	.db #0x04	; 4
      0000EF 02                    7295 	.db #0x02	; 2
      0000F0 3E                    7296 	.db #0x3e	; 62
      0000F1 51                    7297 	.db #0x51	; 81	'Q'
      0000F2 49                    7298 	.db #0x49	; 73	'I'
      0000F3 45                    7299 	.db #0x45	; 69	'E'
      0000F4 3E                    7300 	.db #0x3e	; 62
      0000F5 00                    7301 	.db #0x00	; 0
      0000F6 42                    7302 	.db #0x42	; 66	'B'
      0000F7 7F                    7303 	.db #0x7f	; 127
      0000F8 40                    7304 	.db #0x40	; 64
      0000F9 00                    7305 	.db #0x00	; 0
      0000FA 72                    7306 	.db #0x72	; 114	'r'
      0000FB 49                    7307 	.db #0x49	; 73	'I'
      0000FC 49                    7308 	.db #0x49	; 73	'I'
      0000FD 49                    7309 	.db #0x49	; 73	'I'
      0000FE 46                    7310 	.db #0x46	; 70	'F'
      0000FF 21                    7311 	.db #0x21	; 33
      000100 41                    7312 	.db #0x41	; 65	'A'
      000101 49                    7313 	.db #0x49	; 73	'I'
      000102 4D                    7314 	.db #0x4d	; 77	'M'
      000103 33                    7315 	.db #0x33	; 51	'3'
      000104 18                    7316 	.db #0x18	; 24
      000105 14                    7317 	.db #0x14	; 20
      000106 12                    7318 	.db #0x12	; 18
      000107 7F                    7319 	.db #0x7f	; 127
      000108 10                    7320 	.db #0x10	; 16
      000109 27                    7321 	.db #0x27	; 39
      00010A 45                    7322 	.db #0x45	; 69	'E'
      00010B 45                    7323 	.db #0x45	; 69	'E'
      00010C 45                    7324 	.db #0x45	; 69	'E'
      00010D 39                    7325 	.db #0x39	; 57	'9'
      00010E 3C                    7326 	.db #0x3c	; 60
      00010F 4A                    7327 	.db #0x4a	; 74	'J'
      000110 49                    7328 	.db #0x49	; 73	'I'
      000111 49                    7329 	.db #0x49	; 73	'I'
      000112 31                    7330 	.db #0x31	; 49	'1'
      000113 41                    7331 	.db #0x41	; 65	'A'
      000114 21                    7332 	.db #0x21	; 33
      000115 11                    7333 	.db #0x11	; 17
      000116 09                    7334 	.db #0x09	; 9
      000117 07                    7335 	.db #0x07	; 7
      000118 36                    7336 	.db #0x36	; 54	'6'
      000119 49                    7337 	.db #0x49	; 73	'I'
      00011A 49                    7338 	.db #0x49	; 73	'I'
      00011B 49                    7339 	.db #0x49	; 73	'I'
      00011C 36                    7340 	.db #0x36	; 54	'6'
      00011D 46                    7341 	.db #0x46	; 70	'F'
      00011E 49                    7342 	.db #0x49	; 73	'I'
      00011F 49                    7343 	.db #0x49	; 73	'I'
      000120 29                    7344 	.db #0x29	; 41
      000121 1E                    7345 	.db #0x1e	; 30
      000122 00                    7346 	.db #0x00	; 0
      000123 00                    7347 	.db #0x00	; 0
      000124 14                    7348 	.db #0x14	; 20
      000125 00                    7349 	.db #0x00	; 0
      000126 00                    7350 	.db #0x00	; 0
      000127 00                    7351 	.db #0x00	; 0
      000128 40                    7352 	.db #0x40	; 64
      000129 34                    7353 	.db #0x34	; 52	'4'
      00012A 00                    7354 	.db #0x00	; 0
      00012B 00                    7355 	.db #0x00	; 0
      00012C 00                    7356 	.db #0x00	; 0
      00012D 08                    7357 	.db #0x08	; 8
      00012E 14                    7358 	.db #0x14	; 20
      00012F 22                    7359 	.db #0x22	; 34
      000130 41                    7360 	.db #0x41	; 65	'A'
      000131 14                    7361 	.db #0x14	; 20
      000132 14                    7362 	.db #0x14	; 20
      000133 14                    7363 	.db #0x14	; 20
      000134 14                    7364 	.db #0x14	; 20
      000135 14                    7365 	.db #0x14	; 20
      000136 00                    7366 	.db #0x00	; 0
      000137 41                    7367 	.db #0x41	; 65	'A'
      000138 22                    7368 	.db #0x22	; 34
      000139 14                    7369 	.db #0x14	; 20
      00013A 08                    7370 	.db #0x08	; 8
      00013B 02                    7371 	.db #0x02	; 2
      00013C 01                    7372 	.db #0x01	; 1
      00013D 59                    7373 	.db #0x59	; 89	'Y'
      00013E 09                    7374 	.db #0x09	; 9
      00013F 06                    7375 	.db #0x06	; 6
      000140 3E                    7376 	.db #0x3e	; 62
      000141 41                    7377 	.db #0x41	; 65	'A'
      000142 5D                    7378 	.db #0x5d	; 93
      000143 59                    7379 	.db #0x59	; 89	'Y'
      000144 4E                    7380 	.db #0x4e	; 78	'N'
      000145 7C                    7381 	.db #0x7c	; 124
      000146 12                    7382 	.db #0x12	; 18
      000147 11                    7383 	.db #0x11	; 17
      000148 12                    7384 	.db #0x12	; 18
      000149 7C                    7385 	.db #0x7c	; 124
      00014A 7F                    7386 	.db #0x7f	; 127
      00014B 49                    7387 	.db #0x49	; 73	'I'
      00014C 49                    7388 	.db #0x49	; 73	'I'
      00014D 49                    7389 	.db #0x49	; 73	'I'
      00014E 36                    7390 	.db #0x36	; 54	'6'
      00014F 3E                    7391 	.db #0x3e	; 62
      000150 41                    7392 	.db #0x41	; 65	'A'
      000151 41                    7393 	.db #0x41	; 65	'A'
      000152 41                    7394 	.db #0x41	; 65	'A'
      000153 22                    7395 	.db #0x22	; 34
      000154 7F                    7396 	.db #0x7f	; 127
      000155 41                    7397 	.db #0x41	; 65	'A'
      000156 41                    7398 	.db #0x41	; 65	'A'
      000157 41                    7399 	.db #0x41	; 65	'A'
      000158 3E                    7400 	.db #0x3e	; 62
      000159 7F                    7401 	.db #0x7f	; 127
      00015A 49                    7402 	.db #0x49	; 73	'I'
      00015B 49                    7403 	.db #0x49	; 73	'I'
      00015C 49                    7404 	.db #0x49	; 73	'I'
      00015D 41                    7405 	.db #0x41	; 65	'A'
      00015E 7F                    7406 	.db #0x7f	; 127
      00015F 09                    7407 	.db #0x09	; 9
      000160 09                    7408 	.db #0x09	; 9
      000161 09                    7409 	.db #0x09	; 9
      000162 01                    7410 	.db #0x01	; 1
      000163 3E                    7411 	.db #0x3e	; 62
      000164 41                    7412 	.db #0x41	; 65	'A'
      000165 41                    7413 	.db #0x41	; 65	'A'
      000166 51                    7414 	.db #0x51	; 81	'Q'
      000167 73                    7415 	.db #0x73	; 115	's'
      000168 7F                    7416 	.db #0x7f	; 127
      000169 08                    7417 	.db #0x08	; 8
      00016A 08                    7418 	.db #0x08	; 8
      00016B 08                    7419 	.db #0x08	; 8
      00016C 7F                    7420 	.db #0x7f	; 127
      00016D 00                    7421 	.db #0x00	; 0
      00016E 41                    7422 	.db #0x41	; 65	'A'
      00016F 7F                    7423 	.db #0x7f	; 127
      000170 41                    7424 	.db #0x41	; 65	'A'
      000171 00                    7425 	.db #0x00	; 0
      000172 20                    7426 	.db #0x20	; 32
      000173 40                    7427 	.db #0x40	; 64
      000174 41                    7428 	.db #0x41	; 65	'A'
      000175 3F                    7429 	.db #0x3f	; 63
      000176 01                    7430 	.db #0x01	; 1
      000177 7F                    7431 	.db #0x7f	; 127
      000178 08                    7432 	.db #0x08	; 8
      000179 14                    7433 	.db #0x14	; 20
      00017A 22                    7434 	.db #0x22	; 34
      00017B 41                    7435 	.db #0x41	; 65	'A'
      00017C 7F                    7436 	.db #0x7f	; 127
      00017D 40                    7437 	.db #0x40	; 64
      00017E 40                    7438 	.db #0x40	; 64
      00017F 40                    7439 	.db #0x40	; 64
      000180 40                    7440 	.db #0x40	; 64
      000181 7F                    7441 	.db #0x7f	; 127
      000182 02                    7442 	.db #0x02	; 2
      000183 1C                    7443 	.db #0x1c	; 28
      000184 02                    7444 	.db #0x02	; 2
      000185 7F                    7445 	.db #0x7f	; 127
      000186 7F                    7446 	.db #0x7f	; 127
      000187 04                    7447 	.db #0x04	; 4
      000188 08                    7448 	.db #0x08	; 8
      000189 10                    7449 	.db #0x10	; 16
      00018A 7F                    7450 	.db #0x7f	; 127
      00018B 3E                    7451 	.db #0x3e	; 62
      00018C 41                    7452 	.db #0x41	; 65	'A'
      00018D 41                    7453 	.db #0x41	; 65	'A'
      00018E 41                    7454 	.db #0x41	; 65	'A'
      00018F 3E                    7455 	.db #0x3e	; 62
      000190 7F                    7456 	.db #0x7f	; 127
      000191 09                    7457 	.db #0x09	; 9
      000192 09                    7458 	.db #0x09	; 9
      000193 09                    7459 	.db #0x09	; 9
      000194 06                    7460 	.db #0x06	; 6
      000195 3E                    7461 	.db #0x3e	; 62
      000196 41                    7462 	.db #0x41	; 65	'A'
      000197 51                    7463 	.db #0x51	; 81	'Q'
      000198 21                    7464 	.db #0x21	; 33
      000199 5E                    7465 	.db #0x5e	; 94
      00019A 7F                    7466 	.db #0x7f	; 127
      00019B 09                    7467 	.db #0x09	; 9
      00019C 19                    7468 	.db #0x19	; 25
      00019D 29                    7469 	.db #0x29	; 41
      00019E 46                    7470 	.db #0x46	; 70	'F'
      00019F 26                    7471 	.db #0x26	; 38
      0001A0 49                    7472 	.db #0x49	; 73	'I'
      0001A1 49                    7473 	.db #0x49	; 73	'I'
      0001A2 49                    7474 	.db #0x49	; 73	'I'
      0001A3 32                    7475 	.db #0x32	; 50	'2'
      0001A4 03                    7476 	.db #0x03	; 3
      0001A5 01                    7477 	.db #0x01	; 1
      0001A6 7F                    7478 	.db #0x7f	; 127
      0001A7 01                    7479 	.db #0x01	; 1
      0001A8 03                    7480 	.db #0x03	; 3
      0001A9 3F                    7481 	.db #0x3f	; 63
      0001AA 40                    7482 	.db #0x40	; 64
      0001AB 40                    7483 	.db #0x40	; 64
      0001AC 40                    7484 	.db #0x40	; 64
      0001AD 3F                    7485 	.db #0x3f	; 63
      0001AE 1F                    7486 	.db #0x1f	; 31
      0001AF 20                    7487 	.db #0x20	; 32
      0001B0 40                    7488 	.db #0x40	; 64
      0001B1 20                    7489 	.db #0x20	; 32
      0001B2 1F                    7490 	.db #0x1f	; 31
      0001B3 3F                    7491 	.db #0x3f	; 63
      0001B4 40                    7492 	.db #0x40	; 64
      0001B5 38                    7493 	.db #0x38	; 56	'8'
      0001B6 40                    7494 	.db #0x40	; 64
      0001B7 3F                    7495 	.db #0x3f	; 63
      0001B8 63                    7496 	.db #0x63	; 99	'c'
      0001B9 14                    7497 	.db #0x14	; 20
      0001BA 08                    7498 	.db #0x08	; 8
      0001BB 14                    7499 	.db #0x14	; 20
      0001BC 63                    7500 	.db #0x63	; 99	'c'
      0001BD 03                    7501 	.db #0x03	; 3
      0001BE 04                    7502 	.db #0x04	; 4
      0001BF 78                    7503 	.db #0x78	; 120	'x'
      0001C0 04                    7504 	.db #0x04	; 4
      0001C1 03                    7505 	.db #0x03	; 3
      0001C2 61                    7506 	.db #0x61	; 97	'a'
      0001C3 59                    7507 	.db #0x59	; 89	'Y'
      0001C4 49                    7508 	.db #0x49	; 73	'I'
      0001C5 4D                    7509 	.db #0x4d	; 77	'M'
      0001C6 43                    7510 	.db #0x43	; 67	'C'
      0001C7 00                    7511 	.db #0x00	; 0
      0001C8 7F                    7512 	.db #0x7f	; 127
      0001C9 41                    7513 	.db #0x41	; 65	'A'
      0001CA 41                    7514 	.db #0x41	; 65	'A'
      0001CB 41                    7515 	.db #0x41	; 65	'A'
      0001CC 02                    7516 	.db #0x02	; 2
      0001CD 04                    7517 	.db #0x04	; 4
      0001CE 08                    7518 	.db #0x08	; 8
      0001CF 10                    7519 	.db #0x10	; 16
      0001D0 20                    7520 	.db #0x20	; 32
      0001D1 00                    7521 	.db #0x00	; 0
      0001D2 41                    7522 	.db #0x41	; 65	'A'
      0001D3 41                    7523 	.db #0x41	; 65	'A'
      0001D4 41                    7524 	.db #0x41	; 65	'A'
      0001D5 7F                    7525 	.db #0x7f	; 127
      0001D6 04                    7526 	.db #0x04	; 4
      0001D7 02                    7527 	.db #0x02	; 2
      0001D8 01                    7528 	.db #0x01	; 1
      0001D9 02                    7529 	.db #0x02	; 2
      0001DA 04                    7530 	.db #0x04	; 4
      0001DB 40                    7531 	.db #0x40	; 64
      0001DC 40                    7532 	.db #0x40	; 64
      0001DD 40                    7533 	.db #0x40	; 64
      0001DE 40                    7534 	.db #0x40	; 64
      0001DF 40                    7535 	.db #0x40	; 64
      0001E0 00                    7536 	.db #0x00	; 0
      0001E1 03                    7537 	.db #0x03	; 3
      0001E2 07                    7538 	.db #0x07	; 7
      0001E3 08                    7539 	.db #0x08	; 8
      0001E4 00                    7540 	.db #0x00	; 0
      0001E5 20                    7541 	.db #0x20	; 32
      0001E6 54                    7542 	.db #0x54	; 84	'T'
      0001E7 54                    7543 	.db #0x54	; 84	'T'
      0001E8 78                    7544 	.db #0x78	; 120	'x'
      0001E9 40                    7545 	.db #0x40	; 64
      0001EA 7F                    7546 	.db #0x7f	; 127
      0001EB 28                    7547 	.db #0x28	; 40
      0001EC 44                    7548 	.db #0x44	; 68	'D'
      0001ED 44                    7549 	.db #0x44	; 68	'D'
      0001EE 38                    7550 	.db #0x38	; 56	'8'
      0001EF 38                    7551 	.db #0x38	; 56	'8'
      0001F0 44                    7552 	.db #0x44	; 68	'D'
      0001F1 44                    7553 	.db #0x44	; 68	'D'
      0001F2 44                    7554 	.db #0x44	; 68	'D'
      0001F3 28                    7555 	.db #0x28	; 40
      0001F4 38                    7556 	.db #0x38	; 56	'8'
      0001F5 44                    7557 	.db #0x44	; 68	'D'
      0001F6 44                    7558 	.db #0x44	; 68	'D'
      0001F7 28                    7559 	.db #0x28	; 40
      0001F8 7F                    7560 	.db #0x7f	; 127
      0001F9 38                    7561 	.db #0x38	; 56	'8'
      0001FA 54                    7562 	.db #0x54	; 84	'T'
      0001FB 54                    7563 	.db #0x54	; 84	'T'
      0001FC 54                    7564 	.db #0x54	; 84	'T'
      0001FD 18                    7565 	.db #0x18	; 24
      0001FE 00                    7566 	.db #0x00	; 0
      0001FF 08                    7567 	.db #0x08	; 8
      000200 7E                    7568 	.db #0x7e	; 126
      000201 09                    7569 	.db #0x09	; 9
      000202 02                    7570 	.db #0x02	; 2
      000203 18                    7571 	.db #0x18	; 24
      000204 A4                    7572 	.db #0xa4	; 164
      000205 A4                    7573 	.db #0xa4	; 164
      000206 9C                    7574 	.db #0x9c	; 156
      000207 78                    7575 	.db #0x78	; 120	'x'
      000208 7F                    7576 	.db #0x7f	; 127
      000209 08                    7577 	.db #0x08	; 8
      00020A 04                    7578 	.db #0x04	; 4
      00020B 04                    7579 	.db #0x04	; 4
      00020C 78                    7580 	.db #0x78	; 120	'x'
      00020D 00                    7581 	.db #0x00	; 0
      00020E 44                    7582 	.db #0x44	; 68	'D'
      00020F 7D                    7583 	.db #0x7d	; 125
      000210 40                    7584 	.db #0x40	; 64
      000211 00                    7585 	.db #0x00	; 0
      000212 20                    7586 	.db #0x20	; 32
      000213 40                    7587 	.db #0x40	; 64
      000214 40                    7588 	.db #0x40	; 64
      000215 3D                    7589 	.db #0x3d	; 61
      000216 00                    7590 	.db #0x00	; 0
      000217 7F                    7591 	.db #0x7f	; 127
      000218 10                    7592 	.db #0x10	; 16
      000219 28                    7593 	.db #0x28	; 40
      00021A 44                    7594 	.db #0x44	; 68	'D'
      00021B 00                    7595 	.db #0x00	; 0
      00021C 00                    7596 	.db #0x00	; 0
      00021D 41                    7597 	.db #0x41	; 65	'A'
      00021E 7F                    7598 	.db #0x7f	; 127
      00021F 40                    7599 	.db #0x40	; 64
      000220 00                    7600 	.db #0x00	; 0
      000221 7C                    7601 	.db #0x7c	; 124
      000222 04                    7602 	.db #0x04	; 4
      000223 78                    7603 	.db #0x78	; 120	'x'
      000224 04                    7604 	.db #0x04	; 4
      000225 78                    7605 	.db #0x78	; 120	'x'
      000226 7C                    7606 	.db #0x7c	; 124
      000227 08                    7607 	.db #0x08	; 8
      000228 04                    7608 	.db #0x04	; 4
      000229 04                    7609 	.db #0x04	; 4
      00022A 78                    7610 	.db #0x78	; 120	'x'
      00022B 38                    7611 	.db #0x38	; 56	'8'
      00022C 44                    7612 	.db #0x44	; 68	'D'
      00022D 44                    7613 	.db #0x44	; 68	'D'
      00022E 44                    7614 	.db #0x44	; 68	'D'
      00022F 38                    7615 	.db #0x38	; 56	'8'
      000230 FC                    7616 	.db #0xfc	; 252
      000231 18                    7617 	.db #0x18	; 24
      000232 24                    7618 	.db #0x24	; 36
      000233 24                    7619 	.db #0x24	; 36
      000234 18                    7620 	.db #0x18	; 24
      000235 18                    7621 	.db #0x18	; 24
      000236 24                    7622 	.db #0x24	; 36
      000237 24                    7623 	.db #0x24	; 36
      000238 18                    7624 	.db #0x18	; 24
      000239 FC                    7625 	.db #0xfc	; 252
      00023A 7C                    7626 	.db #0x7c	; 124
      00023B 08                    7627 	.db #0x08	; 8
      00023C 04                    7628 	.db #0x04	; 4
      00023D 04                    7629 	.db #0x04	; 4
      00023E 08                    7630 	.db #0x08	; 8
      00023F 48                    7631 	.db #0x48	; 72	'H'
      000240 54                    7632 	.db #0x54	; 84	'T'
      000241 54                    7633 	.db #0x54	; 84	'T'
      000242 54                    7634 	.db #0x54	; 84	'T'
      000243 24                    7635 	.db #0x24	; 36
      000244 04                    7636 	.db #0x04	; 4
      000245 04                    7637 	.db #0x04	; 4
      000246 3F                    7638 	.db #0x3f	; 63
      000247 44                    7639 	.db #0x44	; 68	'D'
      000248 24                    7640 	.db #0x24	; 36
      000249 3C                    7641 	.db #0x3c	; 60
      00024A 40                    7642 	.db #0x40	; 64
      00024B 40                    7643 	.db #0x40	; 64
      00024C 20                    7644 	.db #0x20	; 32
      00024D 7C                    7645 	.db #0x7c	; 124
      00024E 1C                    7646 	.db #0x1c	; 28
      00024F 20                    7647 	.db #0x20	; 32
      000250 40                    7648 	.db #0x40	; 64
      000251 20                    7649 	.db #0x20	; 32
      000252 1C                    7650 	.db #0x1c	; 28
      000253 3C                    7651 	.db #0x3c	; 60
      000254 40                    7652 	.db #0x40	; 64
      000255 30                    7653 	.db #0x30	; 48	'0'
      000256 40                    7654 	.db #0x40	; 64
      000257 3C                    7655 	.db #0x3c	; 60
      000258 44                    7656 	.db #0x44	; 68	'D'
      000259 28                    7657 	.db #0x28	; 40
      00025A 10                    7658 	.db #0x10	; 16
      00025B 28                    7659 	.db #0x28	; 40
      00025C 44                    7660 	.db #0x44	; 68	'D'
      00025D 4C                    7661 	.db #0x4c	; 76	'L'
      00025E 90                    7662 	.db #0x90	; 144
      00025F 90                    7663 	.db #0x90	; 144
      000260 90                    7664 	.db #0x90	; 144
      000261 7C                    7665 	.db #0x7c	; 124
      000262 44                    7666 	.db #0x44	; 68	'D'
      000263 64                    7667 	.db #0x64	; 100	'd'
      000264 54                    7668 	.db #0x54	; 84	'T'
      000265 4C                    7669 	.db #0x4c	; 76	'L'
      000266 44                    7670 	.db #0x44	; 68	'D'
      000267 00                    7671 	.db #0x00	; 0
      000268 08                    7672 	.db #0x08	; 8
      000269 36                    7673 	.db #0x36	; 54	'6'
      00026A 41                    7674 	.db #0x41	; 65	'A'
      00026B 00                    7675 	.db #0x00	; 0
      00026C 00                    7676 	.db #0x00	; 0
      00026D 00                    7677 	.db #0x00	; 0
      00026E 77                    7678 	.db #0x77	; 119	'w'
      00026F 00                    7679 	.db #0x00	; 0
      000270 00                    7680 	.db #0x00	; 0
      000271 00                    7681 	.db #0x00	; 0
      000272 41                    7682 	.db #0x41	; 65	'A'
      000273 36                    7683 	.db #0x36	; 54	'6'
      000274 08                    7684 	.db #0x08	; 8
      000275 00                    7685 	.db #0x00	; 0
      000276 02                    7686 	.db #0x02	; 2
      000277 01                    7687 	.db #0x01	; 1
      000278 02                    7688 	.db #0x02	; 2
      000279 04                    7689 	.db #0x04	; 4
      00027A 02                    7690 	.db #0x02	; 2
      00027B 3C                    7691 	.db #0x3c	; 60
      00027C 26                    7692 	.db #0x26	; 38
      00027D 23                    7693 	.db #0x23	; 35
      00027E 26                    7694 	.db #0x26	; 38
      00027F 3C                    7695 	.db #0x3c	; 60
      000280 1E                    7696 	.db #0x1e	; 30
      000281 A1                    7697 	.db #0xa1	; 161
      000282 A1                    7698 	.db #0xa1	; 161
      000283 61                    7699 	.db #0x61	; 97	'a'
      000284 12                    7700 	.db #0x12	; 18
      000285 3A                    7701 	.db #0x3a	; 58
      000286 40                    7702 	.db #0x40	; 64
      000287 40                    7703 	.db #0x40	; 64
      000288 20                    7704 	.db #0x20	; 32
      000289 7A                    7705 	.db #0x7a	; 122	'z'
      00028A 38                    7706 	.db #0x38	; 56	'8'
      00028B 54                    7707 	.db #0x54	; 84	'T'
      00028C 54                    7708 	.db #0x54	; 84	'T'
      00028D 55                    7709 	.db #0x55	; 85	'U'
      00028E 59                    7710 	.db #0x59	; 89	'Y'
      00028F 21                    7711 	.db #0x21	; 33
      000290 55                    7712 	.db #0x55	; 85	'U'
      000291 55                    7713 	.db #0x55	; 85	'U'
      000292 79                    7714 	.db #0x79	; 121	'y'
      000293 41                    7715 	.db #0x41	; 65	'A'
      000294 22                    7716 	.db #0x22	; 34
      000295 54                    7717 	.db #0x54	; 84	'T'
      000296 54                    7718 	.db #0x54	; 84	'T'
      000297 78                    7719 	.db #0x78	; 120	'x'
      000298 42                    7720 	.db #0x42	; 66	'B'
      000299 21                    7721 	.db #0x21	; 33
      00029A 55                    7722 	.db #0x55	; 85	'U'
      00029B 54                    7723 	.db #0x54	; 84	'T'
      00029C 78                    7724 	.db #0x78	; 120	'x'
      00029D 40                    7725 	.db #0x40	; 64
      00029E 20                    7726 	.db #0x20	; 32
      00029F 54                    7727 	.db #0x54	; 84	'T'
      0002A0 55                    7728 	.db #0x55	; 85	'U'
      0002A1 79                    7729 	.db #0x79	; 121	'y'
      0002A2 40                    7730 	.db #0x40	; 64
      0002A3 0C                    7731 	.db #0x0c	; 12
      0002A4 1E                    7732 	.db #0x1e	; 30
      0002A5 52                    7733 	.db #0x52	; 82	'R'
      0002A6 72                    7734 	.db #0x72	; 114	'r'
      0002A7 12                    7735 	.db #0x12	; 18
      0002A8 39                    7736 	.db #0x39	; 57	'9'
      0002A9 55                    7737 	.db #0x55	; 85	'U'
      0002AA 55                    7738 	.db #0x55	; 85	'U'
      0002AB 55                    7739 	.db #0x55	; 85	'U'
      0002AC 59                    7740 	.db #0x59	; 89	'Y'
      0002AD 39                    7741 	.db #0x39	; 57	'9'
      0002AE 54                    7742 	.db #0x54	; 84	'T'
      0002AF 54                    7743 	.db #0x54	; 84	'T'
      0002B0 54                    7744 	.db #0x54	; 84	'T'
      0002B1 59                    7745 	.db #0x59	; 89	'Y'
      0002B2 39                    7746 	.db #0x39	; 57	'9'
      0002B3 55                    7747 	.db #0x55	; 85	'U'
      0002B4 54                    7748 	.db #0x54	; 84	'T'
      0002B5 54                    7749 	.db #0x54	; 84	'T'
      0002B6 58                    7750 	.db #0x58	; 88	'X'
      0002B7 00                    7751 	.db #0x00	; 0
      0002B8 00                    7752 	.db #0x00	; 0
      0002B9 45                    7753 	.db #0x45	; 69	'E'
      0002BA 7C                    7754 	.db #0x7c	; 124
      0002BB 41                    7755 	.db #0x41	; 65	'A'
      0002BC 00                    7756 	.db #0x00	; 0
      0002BD 02                    7757 	.db #0x02	; 2
      0002BE 45                    7758 	.db #0x45	; 69	'E'
      0002BF 7D                    7759 	.db #0x7d	; 125
      0002C0 42                    7760 	.db #0x42	; 66	'B'
      0002C1 00                    7761 	.db #0x00	; 0
      0002C2 01                    7762 	.db #0x01	; 1
      0002C3 45                    7763 	.db #0x45	; 69	'E'
      0002C4 7C                    7764 	.db #0x7c	; 124
      0002C5 40                    7765 	.db #0x40	; 64
      0002C6 7D                    7766 	.db #0x7d	; 125
      0002C7 12                    7767 	.db #0x12	; 18
      0002C8 11                    7768 	.db #0x11	; 17
      0002C9 12                    7769 	.db #0x12	; 18
      0002CA 7D                    7770 	.db #0x7d	; 125
      0002CB F0                    7771 	.db #0xf0	; 240
      0002CC 28                    7772 	.db #0x28	; 40
      0002CD 25                    7773 	.db #0x25	; 37
      0002CE 28                    7774 	.db #0x28	; 40
      0002CF F0                    7775 	.db #0xf0	; 240
      0002D0 7C                    7776 	.db #0x7c	; 124
      0002D1 54                    7777 	.db #0x54	; 84	'T'
      0002D2 55                    7778 	.db #0x55	; 85	'U'
      0002D3 45                    7779 	.db #0x45	; 69	'E'
      0002D4 00                    7780 	.db #0x00	; 0
      0002D5 20                    7781 	.db #0x20	; 32
      0002D6 54                    7782 	.db #0x54	; 84	'T'
      0002D7 54                    7783 	.db #0x54	; 84	'T'
      0002D8 7C                    7784 	.db #0x7c	; 124
      0002D9 54                    7785 	.db #0x54	; 84	'T'
      0002DA 7C                    7786 	.db #0x7c	; 124
      0002DB 0A                    7787 	.db #0x0a	; 10
      0002DC 09                    7788 	.db #0x09	; 9
      0002DD 7F                    7789 	.db #0x7f	; 127
      0002DE 49                    7790 	.db #0x49	; 73	'I'
      0002DF 32                    7791 	.db #0x32	; 50	'2'
      0002E0 49                    7792 	.db #0x49	; 73	'I'
      0002E1 49                    7793 	.db #0x49	; 73	'I'
      0002E2 49                    7794 	.db #0x49	; 73	'I'
      0002E3 32                    7795 	.db #0x32	; 50	'2'
      0002E4 3A                    7796 	.db #0x3a	; 58
      0002E5 44                    7797 	.db #0x44	; 68	'D'
      0002E6 44                    7798 	.db #0x44	; 68	'D'
      0002E7 44                    7799 	.db #0x44	; 68	'D'
      0002E8 3A                    7800 	.db #0x3a	; 58
      0002E9 32                    7801 	.db #0x32	; 50	'2'
      0002EA 4A                    7802 	.db #0x4a	; 74	'J'
      0002EB 48                    7803 	.db #0x48	; 72	'H'
      0002EC 48                    7804 	.db #0x48	; 72	'H'
      0002ED 30                    7805 	.db #0x30	; 48	'0'
      0002EE 3A                    7806 	.db #0x3a	; 58
      0002EF 41                    7807 	.db #0x41	; 65	'A'
      0002F0 41                    7808 	.db #0x41	; 65	'A'
      0002F1 21                    7809 	.db #0x21	; 33
      0002F2 7A                    7810 	.db #0x7a	; 122	'z'
      0002F3 3A                    7811 	.db #0x3a	; 58
      0002F4 42                    7812 	.db #0x42	; 66	'B'
      0002F5 40                    7813 	.db #0x40	; 64
      0002F6 20                    7814 	.db #0x20	; 32
      0002F7 78                    7815 	.db #0x78	; 120	'x'
      0002F8 00                    7816 	.db #0x00	; 0
      0002F9 9D                    7817 	.db #0x9d	; 157
      0002FA A0                    7818 	.db #0xa0	; 160
      0002FB A0                    7819 	.db #0xa0	; 160
      0002FC 7D                    7820 	.db #0x7d	; 125
      0002FD 3D                    7821 	.db #0x3d	; 61
      0002FE 42                    7822 	.db #0x42	; 66	'B'
      0002FF 42                    7823 	.db #0x42	; 66	'B'
      000300 42                    7824 	.db #0x42	; 66	'B'
      000301 3D                    7825 	.db #0x3d	; 61
      000302 3D                    7826 	.db #0x3d	; 61
      000303 40                    7827 	.db #0x40	; 64
      000304 40                    7828 	.db #0x40	; 64
      000305 40                    7829 	.db #0x40	; 64
      000306 3D                    7830 	.db #0x3d	; 61
      000307 3C                    7831 	.db #0x3c	; 60
      000308 24                    7832 	.db #0x24	; 36
      000309 FF                    7833 	.db #0xff	; 255
      00030A 24                    7834 	.db #0x24	; 36
      00030B 24                    7835 	.db #0x24	; 36
      00030C 48                    7836 	.db #0x48	; 72	'H'
      00030D 7E                    7837 	.db #0x7e	; 126
      00030E 49                    7838 	.db #0x49	; 73	'I'
      00030F 43                    7839 	.db #0x43	; 67	'C'
      000310 66                    7840 	.db #0x66	; 102	'f'
      000311 2B                    7841 	.db #0x2b	; 43
      000312 2F                    7842 	.db #0x2f	; 47
      000313 FC                    7843 	.db #0xfc	; 252
      000314 2F                    7844 	.db #0x2f	; 47
      000315 2B                    7845 	.db #0x2b	; 43
      000316 FF                    7846 	.db #0xff	; 255
      000317 09                    7847 	.db #0x09	; 9
      000318 29                    7848 	.db #0x29	; 41
      000319 F6                    7849 	.db #0xf6	; 246
      00031A 20                    7850 	.db #0x20	; 32
      00031B C0                    7851 	.db #0xc0	; 192
      00031C 88                    7852 	.db #0x88	; 136
      00031D 7E                    7853 	.db #0x7e	; 126
      00031E 09                    7854 	.db #0x09	; 9
      00031F 03                    7855 	.db #0x03	; 3
      000320 20                    7856 	.db #0x20	; 32
      000321 54                    7857 	.db #0x54	; 84	'T'
      000322 54                    7858 	.db #0x54	; 84	'T'
      000323 79                    7859 	.db #0x79	; 121	'y'
      000324 41                    7860 	.db #0x41	; 65	'A'
      000325 00                    7861 	.db #0x00	; 0
      000326 00                    7862 	.db #0x00	; 0
      000327 44                    7863 	.db #0x44	; 68	'D'
      000328 7D                    7864 	.db #0x7d	; 125
      000329 41                    7865 	.db #0x41	; 65	'A'
      00032A 30                    7866 	.db #0x30	; 48	'0'
      00032B 48                    7867 	.db #0x48	; 72	'H'
      00032C 48                    7868 	.db #0x48	; 72	'H'
      00032D 4A                    7869 	.db #0x4a	; 74	'J'
      00032E 32                    7870 	.db #0x32	; 50	'2'
      00032F 38                    7871 	.db #0x38	; 56	'8'
      000330 40                    7872 	.db #0x40	; 64
      000331 40                    7873 	.db #0x40	; 64
      000332 22                    7874 	.db #0x22	; 34
      000333 7A                    7875 	.db #0x7a	; 122	'z'
      000334 00                    7876 	.db #0x00	; 0
      000335 7A                    7877 	.db #0x7a	; 122	'z'
      000336 0A                    7878 	.db #0x0a	; 10
      000337 0A                    7879 	.db #0x0a	; 10
      000338 72                    7880 	.db #0x72	; 114	'r'
      000339 7D                    7881 	.db #0x7d	; 125
      00033A 0D                    7882 	.db #0x0d	; 13
      00033B 19                    7883 	.db #0x19	; 25
      00033C 31                    7884 	.db #0x31	; 49	'1'
      00033D 7D                    7885 	.db #0x7d	; 125
      00033E 26                    7886 	.db #0x26	; 38
      00033F 29                    7887 	.db #0x29	; 41
      000340 29                    7888 	.db #0x29	; 41
      000341 2F                    7889 	.db #0x2f	; 47
      000342 28                    7890 	.db #0x28	; 40
      000343 26                    7891 	.db #0x26	; 38
      000344 29                    7892 	.db #0x29	; 41
      000345 29                    7893 	.db #0x29	; 41
      000346 29                    7894 	.db #0x29	; 41
      000347 26                    7895 	.db #0x26	; 38
      000348 30                    7896 	.db #0x30	; 48	'0'
      000349 48                    7897 	.db #0x48	; 72	'H'
      00034A 4D                    7898 	.db #0x4d	; 77	'M'
      00034B 40                    7899 	.db #0x40	; 64
      00034C 20                    7900 	.db #0x20	; 32
      00034D 38                    7901 	.db #0x38	; 56	'8'
      00034E 08                    7902 	.db #0x08	; 8
      00034F 08                    7903 	.db #0x08	; 8
      000350 08                    7904 	.db #0x08	; 8
      000351 08                    7905 	.db #0x08	; 8
      000352 08                    7906 	.db #0x08	; 8
      000353 08                    7907 	.db #0x08	; 8
      000354 08                    7908 	.db #0x08	; 8
      000355 08                    7909 	.db #0x08	; 8
      000356 38                    7910 	.db #0x38	; 56	'8'
      000357 2F                    7911 	.db #0x2f	; 47
      000358 10                    7912 	.db #0x10	; 16
      000359 C8                    7913 	.db #0xc8	; 200
      00035A AC                    7914 	.db #0xac	; 172
      00035B BA                    7915 	.db #0xba	; 186
      00035C 2F                    7916 	.db #0x2f	; 47
      00035D 10                    7917 	.db #0x10	; 16
      00035E 28                    7918 	.db #0x28	; 40
      00035F 34                    7919 	.db #0x34	; 52	'4'
      000360 FA                    7920 	.db #0xfa	; 250
      000361 00                    7921 	.db #0x00	; 0
      000362 00                    7922 	.db #0x00	; 0
      000363 7B                    7923 	.db #0x7b	; 123
      000364 00                    7924 	.db #0x00	; 0
      000365 00                    7925 	.db #0x00	; 0
      000366 08                    7926 	.db #0x08	; 8
      000367 14                    7927 	.db #0x14	; 20
      000368 2A                    7928 	.db #0x2a	; 42
      000369 14                    7929 	.db #0x14	; 20
      00036A 22                    7930 	.db #0x22	; 34
      00036B 22                    7931 	.db #0x22	; 34
      00036C 14                    7932 	.db #0x14	; 20
      00036D 2A                    7933 	.db #0x2a	; 42
      00036E 14                    7934 	.db #0x14	; 20
      00036F 08                    7935 	.db #0x08	; 8
      000370 AA                    7936 	.db #0xaa	; 170
      000371 00                    7937 	.db #0x00	; 0
      000372 55                    7938 	.db #0x55	; 85	'U'
      000373 00                    7939 	.db #0x00	; 0
      000374 AA                    7940 	.db #0xaa	; 170
      000375 AA                    7941 	.db #0xaa	; 170
      000376 55                    7942 	.db #0x55	; 85	'U'
      000377 AA                    7943 	.db #0xaa	; 170
      000378 55                    7944 	.db #0x55	; 85	'U'
      000379 AA                    7945 	.db #0xaa	; 170
      00037A 00                    7946 	.db #0x00	; 0
      00037B 00                    7947 	.db #0x00	; 0
      00037C 00                    7948 	.db #0x00	; 0
      00037D FF                    7949 	.db #0xff	; 255
      00037E 00                    7950 	.db #0x00	; 0
      00037F 10                    7951 	.db #0x10	; 16
      000380 10                    7952 	.db #0x10	; 16
      000381 10                    7953 	.db #0x10	; 16
      000382 FF                    7954 	.db #0xff	; 255
      000383 00                    7955 	.db #0x00	; 0
      000384 14                    7956 	.db #0x14	; 20
      000385 14                    7957 	.db #0x14	; 20
      000386 14                    7958 	.db #0x14	; 20
      000387 FF                    7959 	.db #0xff	; 255
      000388 00                    7960 	.db #0x00	; 0
      000389 10                    7961 	.db #0x10	; 16
      00038A 10                    7962 	.db #0x10	; 16
      00038B FF                    7963 	.db #0xff	; 255
      00038C 00                    7964 	.db #0x00	; 0
      00038D FF                    7965 	.db #0xff	; 255
      00038E 10                    7966 	.db #0x10	; 16
      00038F 10                    7967 	.db #0x10	; 16
      000390 F0                    7968 	.db #0xf0	; 240
      000391 10                    7969 	.db #0x10	; 16
      000392 F0                    7970 	.db #0xf0	; 240
      000393 14                    7971 	.db #0x14	; 20
      000394 14                    7972 	.db #0x14	; 20
      000395 14                    7973 	.db #0x14	; 20
      000396 FC                    7974 	.db #0xfc	; 252
      000397 00                    7975 	.db #0x00	; 0
      000398 14                    7976 	.db #0x14	; 20
      000399 14                    7977 	.db #0x14	; 20
      00039A F7                    7978 	.db #0xf7	; 247
      00039B 00                    7979 	.db #0x00	; 0
      00039C FF                    7980 	.db #0xff	; 255
      00039D 00                    7981 	.db #0x00	; 0
      00039E 00                    7982 	.db #0x00	; 0
      00039F FF                    7983 	.db #0xff	; 255
      0003A0 00                    7984 	.db #0x00	; 0
      0003A1 FF                    7985 	.db #0xff	; 255
      0003A2 14                    7986 	.db #0x14	; 20
      0003A3 14                    7987 	.db #0x14	; 20
      0003A4 F4                    7988 	.db #0xf4	; 244
      0003A5 04                    7989 	.db #0x04	; 4
      0003A6 FC                    7990 	.db #0xfc	; 252
      0003A7 14                    7991 	.db #0x14	; 20
      0003A8 14                    7992 	.db #0x14	; 20
      0003A9 17                    7993 	.db #0x17	; 23
      0003AA 10                    7994 	.db #0x10	; 16
      0003AB 1F                    7995 	.db #0x1f	; 31
      0003AC 10                    7996 	.db #0x10	; 16
      0003AD 10                    7997 	.db #0x10	; 16
      0003AE 1F                    7998 	.db #0x1f	; 31
      0003AF 10                    7999 	.db #0x10	; 16
      0003B0 1F                    8000 	.db #0x1f	; 31
      0003B1 14                    8001 	.db #0x14	; 20
      0003B2 14                    8002 	.db #0x14	; 20
      0003B3 14                    8003 	.db #0x14	; 20
      0003B4 1F                    8004 	.db #0x1f	; 31
      0003B5 00                    8005 	.db #0x00	; 0
      0003B6 10                    8006 	.db #0x10	; 16
      0003B7 10                    8007 	.db #0x10	; 16
      0003B8 10                    8008 	.db #0x10	; 16
      0003B9 F0                    8009 	.db #0xf0	; 240
      0003BA 00                    8010 	.db #0x00	; 0
      0003BB 00                    8011 	.db #0x00	; 0
      0003BC 00                    8012 	.db #0x00	; 0
      0003BD 00                    8013 	.db #0x00	; 0
      0003BE 1F                    8014 	.db #0x1f	; 31
      0003BF 10                    8015 	.db #0x10	; 16
      0003C0 10                    8016 	.db #0x10	; 16
      0003C1 10                    8017 	.db #0x10	; 16
      0003C2 10                    8018 	.db #0x10	; 16
      0003C3 1F                    8019 	.db #0x1f	; 31
      0003C4 10                    8020 	.db #0x10	; 16
      0003C5 10                    8021 	.db #0x10	; 16
      0003C6 10                    8022 	.db #0x10	; 16
      0003C7 10                    8023 	.db #0x10	; 16
      0003C8 F0                    8024 	.db #0xf0	; 240
      0003C9 10                    8025 	.db #0x10	; 16
      0003CA 00                    8026 	.db #0x00	; 0
      0003CB 00                    8027 	.db #0x00	; 0
      0003CC 00                    8028 	.db #0x00	; 0
      0003CD FF                    8029 	.db #0xff	; 255
      0003CE 10                    8030 	.db #0x10	; 16
      0003CF 10                    8031 	.db #0x10	; 16
      0003D0 10                    8032 	.db #0x10	; 16
      0003D1 10                    8033 	.db #0x10	; 16
      0003D2 10                    8034 	.db #0x10	; 16
      0003D3 10                    8035 	.db #0x10	; 16
      0003D4 10                    8036 	.db #0x10	; 16
      0003D5 10                    8037 	.db #0x10	; 16
      0003D6 10                    8038 	.db #0x10	; 16
      0003D7 FF                    8039 	.db #0xff	; 255
      0003D8 10                    8040 	.db #0x10	; 16
      0003D9 00                    8041 	.db #0x00	; 0
      0003DA 00                    8042 	.db #0x00	; 0
      0003DB 00                    8043 	.db #0x00	; 0
      0003DC FF                    8044 	.db #0xff	; 255
      0003DD 14                    8045 	.db #0x14	; 20
      0003DE 00                    8046 	.db #0x00	; 0
      0003DF 00                    8047 	.db #0x00	; 0
      0003E0 FF                    8048 	.db #0xff	; 255
      0003E1 00                    8049 	.db #0x00	; 0
      0003E2 FF                    8050 	.db #0xff	; 255
      0003E3 00                    8051 	.db #0x00	; 0
      0003E4 00                    8052 	.db #0x00	; 0
      0003E5 1F                    8053 	.db #0x1f	; 31
      0003E6 10                    8054 	.db #0x10	; 16
      0003E7 17                    8055 	.db #0x17	; 23
      0003E8 00                    8056 	.db #0x00	; 0
      0003E9 00                    8057 	.db #0x00	; 0
      0003EA FC                    8058 	.db #0xfc	; 252
      0003EB 04                    8059 	.db #0x04	; 4
      0003EC F4                    8060 	.db #0xf4	; 244
      0003ED 14                    8061 	.db #0x14	; 20
      0003EE 14                    8062 	.db #0x14	; 20
      0003EF 17                    8063 	.db #0x17	; 23
      0003F0 10                    8064 	.db #0x10	; 16
      0003F1 17                    8065 	.db #0x17	; 23
      0003F2 14                    8066 	.db #0x14	; 20
      0003F3 14                    8067 	.db #0x14	; 20
      0003F4 F4                    8068 	.db #0xf4	; 244
      0003F5 04                    8069 	.db #0x04	; 4
      0003F6 F4                    8070 	.db #0xf4	; 244
      0003F7 00                    8071 	.db #0x00	; 0
      0003F8 00                    8072 	.db #0x00	; 0
      0003F9 FF                    8073 	.db #0xff	; 255
      0003FA 00                    8074 	.db #0x00	; 0
      0003FB F7                    8075 	.db #0xf7	; 247
      0003FC 14                    8076 	.db #0x14	; 20
      0003FD 14                    8077 	.db #0x14	; 20
      0003FE 14                    8078 	.db #0x14	; 20
      0003FF 14                    8079 	.db #0x14	; 20
      000400 14                    8080 	.db #0x14	; 20
      000401 14                    8081 	.db #0x14	; 20
      000402 14                    8082 	.db #0x14	; 20
      000403 F7                    8083 	.db #0xf7	; 247
      000404 00                    8084 	.db #0x00	; 0
      000405 F7                    8085 	.db #0xf7	; 247
      000406 14                    8086 	.db #0x14	; 20
      000407 14                    8087 	.db #0x14	; 20
      000408 14                    8088 	.db #0x14	; 20
      000409 17                    8089 	.db #0x17	; 23
      00040A 14                    8090 	.db #0x14	; 20
      00040B 10                    8091 	.db #0x10	; 16
      00040C 10                    8092 	.db #0x10	; 16
      00040D 1F                    8093 	.db #0x1f	; 31
      00040E 10                    8094 	.db #0x10	; 16
      00040F 1F                    8095 	.db #0x1f	; 31
      000410 14                    8096 	.db #0x14	; 20
      000411 14                    8097 	.db #0x14	; 20
      000412 14                    8098 	.db #0x14	; 20
      000413 F4                    8099 	.db #0xf4	; 244
      000414 14                    8100 	.db #0x14	; 20
      000415 10                    8101 	.db #0x10	; 16
      000416 10                    8102 	.db #0x10	; 16
      000417 F0                    8103 	.db #0xf0	; 240
      000418 10                    8104 	.db #0x10	; 16
      000419 F0                    8105 	.db #0xf0	; 240
      00041A 00                    8106 	.db #0x00	; 0
      00041B 00                    8107 	.db #0x00	; 0
      00041C 1F                    8108 	.db #0x1f	; 31
      00041D 10                    8109 	.db #0x10	; 16
      00041E 1F                    8110 	.db #0x1f	; 31
      00041F 00                    8111 	.db #0x00	; 0
      000420 00                    8112 	.db #0x00	; 0
      000421 00                    8113 	.db #0x00	; 0
      000422 1F                    8114 	.db #0x1f	; 31
      000423 14                    8115 	.db #0x14	; 20
      000424 00                    8116 	.db #0x00	; 0
      000425 00                    8117 	.db #0x00	; 0
      000426 00                    8118 	.db #0x00	; 0
      000427 FC                    8119 	.db #0xfc	; 252
      000428 14                    8120 	.db #0x14	; 20
      000429 00                    8121 	.db #0x00	; 0
      00042A 00                    8122 	.db #0x00	; 0
      00042B F0                    8123 	.db #0xf0	; 240
      00042C 10                    8124 	.db #0x10	; 16
      00042D F0                    8125 	.db #0xf0	; 240
      00042E 10                    8126 	.db #0x10	; 16
      00042F 10                    8127 	.db #0x10	; 16
      000430 FF                    8128 	.db #0xff	; 255
      000431 10                    8129 	.db #0x10	; 16
      000432 FF                    8130 	.db #0xff	; 255
      000433 14                    8131 	.db #0x14	; 20
      000434 14                    8132 	.db #0x14	; 20
      000435 14                    8133 	.db #0x14	; 20
      000436 FF                    8134 	.db #0xff	; 255
      000437 14                    8135 	.db #0x14	; 20
      000438 10                    8136 	.db #0x10	; 16
      000439 10                    8137 	.db #0x10	; 16
      00043A 10                    8138 	.db #0x10	; 16
      00043B 1F                    8139 	.db #0x1f	; 31
      00043C 00                    8140 	.db #0x00	; 0
      00043D 00                    8141 	.db #0x00	; 0
      00043E 00                    8142 	.db #0x00	; 0
      00043F 00                    8143 	.db #0x00	; 0
      000440 F0                    8144 	.db #0xf0	; 240
      000441 10                    8145 	.db #0x10	; 16
      000442 FF                    8146 	.db #0xff	; 255
      000443 FF                    8147 	.db #0xff	; 255
      000444 FF                    8148 	.db #0xff	; 255
      000445 FF                    8149 	.db #0xff	; 255
      000446 FF                    8150 	.db #0xff	; 255
      000447 F0                    8151 	.db #0xf0	; 240
      000448 F0                    8152 	.db #0xf0	; 240
      000449 F0                    8153 	.db #0xf0	; 240
      00044A F0                    8154 	.db #0xf0	; 240
      00044B F0                    8155 	.db #0xf0	; 240
      00044C FF                    8156 	.db #0xff	; 255
      00044D FF                    8157 	.db #0xff	; 255
      00044E FF                    8158 	.db #0xff	; 255
      00044F 00                    8159 	.db #0x00	; 0
      000450 00                    8160 	.db #0x00	; 0
      000451 00                    8161 	.db #0x00	; 0
      000452 00                    8162 	.db #0x00	; 0
      000453 00                    8163 	.db #0x00	; 0
      000454 FF                    8164 	.db #0xff	; 255
      000455 FF                    8165 	.db #0xff	; 255
      000456 0F                    8166 	.db #0x0f	; 15
      000457 0F                    8167 	.db #0x0f	; 15
      000458 0F                    8168 	.db #0x0f	; 15
      000459 0F                    8169 	.db #0x0f	; 15
      00045A 0F                    8170 	.db #0x0f	; 15
      00045B 38                    8171 	.db #0x38	; 56	'8'
      00045C 44                    8172 	.db #0x44	; 68	'D'
      00045D 44                    8173 	.db #0x44	; 68	'D'
      00045E 38                    8174 	.db #0x38	; 56	'8'
      00045F 44                    8175 	.db #0x44	; 68	'D'
      000460 FC                    8176 	.db #0xfc	; 252
      000461 4A                    8177 	.db #0x4a	; 74	'J'
      000462 4A                    8178 	.db #0x4a	; 74	'J'
      000463 4A                    8179 	.db #0x4a	; 74	'J'
      000464 34                    8180 	.db #0x34	; 52	'4'
      000465 7E                    8181 	.db #0x7e	; 126
      000466 02                    8182 	.db #0x02	; 2
      000467 02                    8183 	.db #0x02	; 2
      000468 06                    8184 	.db #0x06	; 6
      000469 06                    8185 	.db #0x06	; 6
      00046A 02                    8186 	.db #0x02	; 2
      00046B 7E                    8187 	.db #0x7e	; 126
      00046C 02                    8188 	.db #0x02	; 2
      00046D 7E                    8189 	.db #0x7e	; 126
      00046E 02                    8190 	.db #0x02	; 2
      00046F 63                    8191 	.db #0x63	; 99	'c'
      000470 55                    8192 	.db #0x55	; 85	'U'
      000471 49                    8193 	.db #0x49	; 73	'I'
      000472 41                    8194 	.db #0x41	; 65	'A'
      000473 63                    8195 	.db #0x63	; 99	'c'
      000474 38                    8196 	.db #0x38	; 56	'8'
      000475 44                    8197 	.db #0x44	; 68	'D'
      000476 44                    8198 	.db #0x44	; 68	'D'
      000477 3C                    8199 	.db #0x3c	; 60
      000478 04                    8200 	.db #0x04	; 4
      000479 40                    8201 	.db #0x40	; 64
      00047A 7E                    8202 	.db #0x7e	; 126
      00047B 20                    8203 	.db #0x20	; 32
      00047C 1E                    8204 	.db #0x1e	; 30
      00047D 20                    8205 	.db #0x20	; 32
      00047E 06                    8206 	.db #0x06	; 6
      00047F 02                    8207 	.db #0x02	; 2
      000480 7E                    8208 	.db #0x7e	; 126
      000481 02                    8209 	.db #0x02	; 2
      000482 02                    8210 	.db #0x02	; 2
      000483 99                    8211 	.db #0x99	; 153
      000484 A5                    8212 	.db #0xa5	; 165
      000485 E7                    8213 	.db #0xe7	; 231
      000486 A5                    8214 	.db #0xa5	; 165
      000487 99                    8215 	.db #0x99	; 153
      000488 1C                    8216 	.db #0x1c	; 28
      000489 2A                    8217 	.db #0x2a	; 42
      00048A 49                    8218 	.db #0x49	; 73	'I'
      00048B 2A                    8219 	.db #0x2a	; 42
      00048C 1C                    8220 	.db #0x1c	; 28
      00048D 4C                    8221 	.db #0x4c	; 76	'L'
      00048E 72                    8222 	.db #0x72	; 114	'r'
      00048F 01                    8223 	.db #0x01	; 1
      000490 72                    8224 	.db #0x72	; 114	'r'
      000491 4C                    8225 	.db #0x4c	; 76	'L'
      000492 30                    8226 	.db #0x30	; 48	'0'
      000493 4A                    8227 	.db #0x4a	; 74	'J'
      000494 4D                    8228 	.db #0x4d	; 77	'M'
      000495 4D                    8229 	.db #0x4d	; 77	'M'
      000496 30                    8230 	.db #0x30	; 48	'0'
      000497 30                    8231 	.db #0x30	; 48	'0'
      000498 48                    8232 	.db #0x48	; 72	'H'
      000499 78                    8233 	.db #0x78	; 120	'x'
      00049A 48                    8234 	.db #0x48	; 72	'H'
      00049B 30                    8235 	.db #0x30	; 48	'0'
      00049C BC                    8236 	.db #0xbc	; 188
      00049D 62                    8237 	.db #0x62	; 98	'b'
      00049E 5A                    8238 	.db #0x5a	; 90	'Z'
      00049F 46                    8239 	.db #0x46	; 70	'F'
      0004A0 3D                    8240 	.db #0x3d	; 61
      0004A1 3E                    8241 	.db #0x3e	; 62
      0004A2 49                    8242 	.db #0x49	; 73	'I'
      0004A3 49                    8243 	.db #0x49	; 73	'I'
      0004A4 49                    8244 	.db #0x49	; 73	'I'
      0004A5 00                    8245 	.db #0x00	; 0
      0004A6 7E                    8246 	.db #0x7e	; 126
      0004A7 01                    8247 	.db #0x01	; 1
      0004A8 01                    8248 	.db #0x01	; 1
      0004A9 01                    8249 	.db #0x01	; 1
      0004AA 7E                    8250 	.db #0x7e	; 126
      0004AB 2A                    8251 	.db #0x2a	; 42
      0004AC 2A                    8252 	.db #0x2a	; 42
      0004AD 2A                    8253 	.db #0x2a	; 42
      0004AE 2A                    8254 	.db #0x2a	; 42
      0004AF 2A                    8255 	.db #0x2a	; 42
      0004B0 44                    8256 	.db #0x44	; 68	'D'
      0004B1 44                    8257 	.db #0x44	; 68	'D'
      0004B2 5F                    8258 	.db #0x5f	; 95
      0004B3 44                    8259 	.db #0x44	; 68	'D'
      0004B4 44                    8260 	.db #0x44	; 68	'D'
      0004B5 40                    8261 	.db #0x40	; 64
      0004B6 51                    8262 	.db #0x51	; 81	'Q'
      0004B7 4A                    8263 	.db #0x4a	; 74	'J'
      0004B8 44                    8264 	.db #0x44	; 68	'D'
      0004B9 40                    8265 	.db #0x40	; 64
      0004BA 40                    8266 	.db #0x40	; 64
      0004BB 44                    8267 	.db #0x44	; 68	'D'
      0004BC 4A                    8268 	.db #0x4a	; 74	'J'
      0004BD 51                    8269 	.db #0x51	; 81	'Q'
      0004BE 40                    8270 	.db #0x40	; 64
      0004BF 00                    8271 	.db #0x00	; 0
      0004C0 00                    8272 	.db #0x00	; 0
      0004C1 FF                    8273 	.db #0xff	; 255
      0004C2 01                    8274 	.db #0x01	; 1
      0004C3 03                    8275 	.db #0x03	; 3
      0004C4 E0                    8276 	.db #0xe0	; 224
      0004C5 80                    8277 	.db #0x80	; 128
      0004C6 FF                    8278 	.db #0xff	; 255
      0004C7 00                    8279 	.db #0x00	; 0
      0004C8 00                    8280 	.db #0x00	; 0
      0004C9 08                    8281 	.db #0x08	; 8
      0004CA 08                    8282 	.db #0x08	; 8
      0004CB 6B                    8283 	.db #0x6b	; 107	'k'
      0004CC 6B                    8284 	.db #0x6b	; 107	'k'
      0004CD 08                    8285 	.db #0x08	; 8
      0004CE 36                    8286 	.db #0x36	; 54	'6'
      0004CF 12                    8287 	.db #0x12	; 18
      0004D0 36                    8288 	.db #0x36	; 54	'6'
      0004D1 24                    8289 	.db #0x24	; 36
      0004D2 36                    8290 	.db #0x36	; 54	'6'
      0004D3 06                    8291 	.db #0x06	; 6
      0004D4 0F                    8292 	.db #0x0f	; 15
      0004D5 09                    8293 	.db #0x09	; 9
      0004D6 0F                    8294 	.db #0x0f	; 15
      0004D7 06                    8295 	.db #0x06	; 6
      0004D8 00                    8296 	.db #0x00	; 0
      0004D9 00                    8297 	.db #0x00	; 0
      0004DA 18                    8298 	.db #0x18	; 24
      0004DB 18                    8299 	.db #0x18	; 24
      0004DC 00                    8300 	.db #0x00	; 0
      0004DD 00                    8301 	.db #0x00	; 0
      0004DE 00                    8302 	.db #0x00	; 0
      0004DF 10                    8303 	.db #0x10	; 16
      0004E0 10                    8304 	.db #0x10	; 16
      0004E1 00                    8305 	.db #0x00	; 0
      0004E2 30                    8306 	.db #0x30	; 48	'0'
      0004E3 40                    8307 	.db #0x40	; 64
      0004E4 FF                    8308 	.db #0xff	; 255
      0004E5 01                    8309 	.db #0x01	; 1
      0004E6 01                    8310 	.db #0x01	; 1
      0004E7 00                    8311 	.db #0x00	; 0
      0004E8 1F                    8312 	.db #0x1f	; 31
      0004E9 01                    8313 	.db #0x01	; 1
      0004EA 01                    8314 	.db #0x01	; 1
      0004EB 1E                    8315 	.db #0x1e	; 30
      0004EC 00                    8316 	.db #0x00	; 0
      0004ED 19                    8317 	.db #0x19	; 25
      0004EE 1D                    8318 	.db #0x1d	; 29
      0004EF 17                    8319 	.db #0x17	; 23
      0004F0 12                    8320 	.db #0x12	; 18
      0004F1 00                    8321 	.db #0x00	; 0
      0004F2 3C                    8322 	.db #0x3c	; 60
      0004F3 3C                    8323 	.db #0x3c	; 60
      0004F4 3C                    8324 	.db #0x3c	; 60
      0004F5 3C                    8325 	.db #0x3c	; 60
      0004F6 00                    8326 	.db #0x00	; 0
      0004F7 00                    8327 	.db #0x00	; 0
      0004F8 00                    8328 	.db #0x00	; 0
      0004F9 00                    8329 	.db #0x00	; 0
      0004FA 00                    8330 	.db #0x00	; 0
      0004FB                       8331 _keypad:
      0004FB 31                    8332 	.db #0x31	; 49	'1'
      0004FC 34                    8333 	.db #0x34	; 52	'4'
      0004FD 37                    8334 	.db #0x37	; 55	'7'
      0004FE 45                    8335 	.db #0x45	; 69	'E'
      0004FF 32                    8336 	.db #0x32	; 50	'2'
      000500 35                    8337 	.db #0x35	; 53	'5'
      000501 38                    8338 	.db #0x38	; 56	'8'
      000502 30                    8339 	.db #0x30	; 48	'0'
      000503 33                    8340 	.db #0x33	; 51	'3'
      000504 36                    8341 	.db #0x36	; 54	'6'
      000505 39                    8342 	.db #0x39	; 57	'9'
      000506 46                    8343 	.db #0x46	; 70	'F'
      000507 41                    8344 	.db #0x41	; 65	'A'
      000508 42                    8345 	.db #0x42	; 66	'B'
      000509 43                    8346 	.db #0x43	; 67	'C'
      00050A 44                    8347 	.db #0x44	; 68	'D'
                                   8348 	.area CONST   (CODE)
      00050B                       8349 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  8350 	.ascii "Welcome"
      000512 0A                    8351 	.db 0x0a
      000513 00                    8352 	.db 0x00
                                   8353 	.area CSEG    (CODE)
                                   8354 	.area CONST   (CODE)
      000514                       8355 ___str_1:
      000514 45 43 45 4E 2D 34 33  8356 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    8357 	.db 0x0a
      00051E 00                    8358 	.db 0x00
                                   8359 	.area CSEG    (CODE)
                                   8360 	.area CONST   (CODE)
      00051F                       8361 ___str_2:
      00051F 52 6F 74 61 74 69 6F  8362 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    8363 	.db 0x00
                                   8364 	.area CSEG    (CODE)
                                   8365 	.area CONST   (CODE)
      00052A                       8366 ___str_3:
      00052A 52 6F 74 61 74 69 6F  8367 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    8368 	.db 0x00
                                   8369 	.area CSEG    (CODE)
                                   8370 	.area CONST   (CODE)
      000535                       8371 ___str_4:
      000535 52 6F 74 61 74 69 6F  8372 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    8373 	.db 0x00
                                   8374 	.area CSEG    (CODE)
                                   8375 	.area CONST   (CODE)
      000540                       8376 ___str_5:
      000540 52 6F 74 61 74 69 6F  8377 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    8378 	.db 0x00
                                   8379 	.area CSEG    (CODE)
                                   8380 	.area CONST   (CODE)
      00054B                       8381 ___str_6:
      00054B 3A 20                 8382 	.ascii ": "
      00054D 00                    8383 	.db 0x00
                                   8384 	.area CSEG    (CODE)
                                   8385 	.area CONST   (CODE)
      00054E                       8386 ___str_7:
      00054E 45 6E 74 65 72 20 73  8387 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      000562 0A                    8388 	.db 0x0a
      000563 00                    8389 	.db 0x00
                                   8390 	.area CSEG    (CODE)
                                   8391 	.area CONST   (CODE)
      000564                       8392 ___str_8:
      000564 45 6E 74 65 72 20 64  8393 	.ascii "Enter data type"
             61 74 61 20 74 79 70
             65
      000573 0A                    8394 	.db 0x0a
      000574 00                    8395 	.db 0x00
                                   8396 	.area CSEG    (CODE)
                                   8397 	.area CONST   (CODE)
      000575                       8398 ___str_9:
      000575 42 2D 42 79 74 65 2C  8399 	.ascii "B-Byte, A-Word,"
             20 41 2D 57 6F 72 64
             2C
      000584 0A                    8400 	.db 0x0a
      000585 00                    8401 	.db 0x00
                                   8402 	.area CSEG    (CODE)
                                   8403 	.area CONST   (CODE)
      000586                       8404 ___str_10:
      000586 44 2D 44 6F 75 62 6C  8405 	.ascii "D-Double word"
             65 20 77 6F 72 64
      000593 0A                    8406 	.db 0x0a
      000594 00                    8407 	.db 0x00
                                   8408 	.area CSEG    (CODE)
                                   8409 	.area CONST   (CODE)
      000595                       8410 ___str_11:
      000595 42 79 74 65           8411 	.ascii "Byte"
      000599 0A                    8412 	.db 0x0a
      00059A 00                    8413 	.db 0x00
                                   8414 	.area CSEG    (CODE)
                                   8415 	.area CONST   (CODE)
      00059B                       8416 ___str_12:
      00059B 57 6F 72 64           8417 	.ascii "Word"
      00059F 0A                    8418 	.db 0x0a
      0005A0 00                    8419 	.db 0x00
                                   8420 	.area CSEG    (CODE)
                                   8421 	.area CONST   (CODE)
      0005A1                       8422 ___str_13:
      0005A1 44 6F 75 62 6C 65 20  8423 	.ascii "Double word"
             77 6F 72 64
      0005AC 0A                    8424 	.db 0x0a
      0005AD 00                    8425 	.db 0x00
                                   8426 	.area CSEG    (CODE)
                                   8427 	.area CONST   (CODE)
      0005AE                       8428 ___str_14:
      0005AE 45 6E 74 65 72 20 62  8429 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0005BF 0A                    8430 	.db 0x0a
      0005C0 00                    8431 	.db 0x00
                                   8432 	.area CSEG    (CODE)
                                   8433 	.area CONST   (CODE)
      0005C1                       8434 ___str_15:
      0005C1 50 72 65 73 73 20 42  8435 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0005D1 0A                    8436 	.db 0x0a
      0005D2 00                    8437 	.db 0x00
                                   8438 	.area CSEG    (CODE)
                                   8439 	.area CONST   (CODE)
      0005D3                       8440 ___str_16:
      0005D3 50 72 65 73 73 20 41  8441 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0005E7 0A                    8442 	.db 0x0a
      0005E8 00                    8443 	.db 0x00
                                   8444 	.area CSEG    (CODE)
                                   8445 	.area CONST   (CODE)
      0005E9                       8446 ___str_17:
      0005E9 50 72 65 73 73 20 41  8447 	.ascii "Press A for previous, B for next"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73 2C
             20 42 20 66 6F 72 20
             6E 65 78 74
      000609 0A                    8448 	.db 0x0a
      00060A 00                    8449 	.db 0x00
                                   8450 	.area CSEG    (CODE)
                                   8451 	.area CONST   (CODE)
      00060B                       8452 ___str_18:
      00060B 50 72 65 73 73 20 31  8453 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00061B 0A                    8454 	.db 0x0a
      00061C 00                    8455 	.db 0x00
                                   8456 	.area CSEG    (CODE)
                                   8457 	.area CONST   (CODE)
      00061D                       8458 ___str_19:
      00061D 45 6E 74 65 72 20 62  8459 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      000630 0A                    8460 	.db 0x0a
      000631 00                    8461 	.db 0x00
                                   8462 	.area CSEG    (CODE)
                                   8463 	.area CONST   (CODE)
      000632                       8464 ___str_20:
      000632 49 6E 20 70 72 6F 67  8465 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      000640 0A                    8466 	.db 0x0a
      000641 00                    8467 	.db 0x00
                                   8468 	.area CSEG    (CODE)
                                   8469 	.area CONST   (CODE)
      000642                       8470 ___str_21:
      000642 4D 65 6D 6F 72 79 20  8471 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000655 0A                    8472 	.db 0x0a
      000656 00                    8473 	.db 0x00
                                   8474 	.area CSEG    (CODE)
                                   8475 	.area CONST   (CODE)
      000657                       8476 ___str_22:
      000657 53 75 63 63 65 73 73  8477 	.ascii "Success!"
             21
      00065F 0A                    8478 	.db 0x0a
      000660 00                    8479 	.db 0x00
                                   8480 	.area CSEG    (CODE)
                                   8481 	.area CONST   (CODE)
      000661                       8482 ___str_23:
      000661 50 72 65 73 73 20 31  8483 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      000671 00                    8484 	.db 0x00
                                   8485 	.area CSEG    (CODE)
                                   8486 	.area CONST   (CODE)
      000672                       8487 ___str_24:
      000672 45 6E 74 65 72 20 62  8488 	.ascii "Enter byte"
             79 74 65
      00067C 0A                    8489 	.db 0x0a
      00067D 00                    8490 	.db 0x00
                                   8491 	.area CSEG    (CODE)
                                   8492 	.area CONST   (CODE)
      00067E                       8493 ___str_25:
      00067E 45 6E 74 65 72 20 61  8494 	.ascii "Enter address"
             64 64 72 65 73 73
      00068B 0A                    8495 	.db 0x0a
      00068C 00                    8496 	.db 0x00
                                   8497 	.area CSEG    (CODE)
                                   8498 	.area CONST   (CODE)
      00068D                       8499 ___str_26:
      00068D 49 6E 20 70 72 6F 67  8500 	.ascii "In progress"
             72 65 73 73
      000698 0A                    8501 	.db 0x0a
      000699 00                    8502 	.db 0x00
                                   8503 	.area CSEG    (CODE)
                                   8504 	.area CONST   (CODE)
      00069A                       8505 ___str_27:
      00069A 20 66 65 74 63 68 65  8506 	.ascii " fetched!"
             64 21
      0006A3 0A                    8507 	.db 0x0a
      0006A4 53 75 63 63 65 73 73  8508 	.ascii "Success!"
             21
      0006AC 0A                    8509 	.db 0x0a
      0006AD 00                    8510 	.db 0x00
                                   8511 	.area CSEG    (CODE)
                                   8512 	.area CONST   (CODE)
      0006AE                       8513 ___str_28:
      0006AE 43 68 65 63 6B 20 66  8514 	.ascii "Check failed"
             61 69 6C 65 64
      0006BA 0A                    8515 	.db 0x0a
      0006BB 00                    8516 	.db 0x00
                                   8517 	.area CSEG    (CODE)
                                   8518 	.area CONST   (CODE)
      0006BC                       8519 ___str_29:
      0006BC 45 6E 74 65 72 20 74  8520 	.ascii "Enter target address:"
             61 72 67 65 74 20 61
             64 64 72 65 73 73 3A
      0006D1 0A                    8521 	.db 0x0a
      0006D2 00                    8522 	.db 0x00
                                   8523 	.area CSEG    (CODE)
                                   8524 	.area CONST   (CODE)
      0006D3                       8525 ___str_30:
      0006D3 45 6E 74 65 72 20 73  8526 	.ascii "Enter size:"
             69 7A 65 3A
      0006DE 0A                    8527 	.db 0x0a
      0006DF 00                    8528 	.db 0x00
                                   8529 	.area CSEG    (CODE)
                                   8530 	.area CONST   (CODE)
      0006E0                       8531 ___str_31:
      0006E0 4D 6F 76 65 20 69 6E  8532 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      0006F3 0A                    8533 	.db 0x0a
      0006F4 00                    8534 	.db 0x00
                                   8535 	.area CSEG    (CODE)
                                   8536 	.area CONST   (CODE)
      0006F5                       8537 ___str_32:
      0006F5 44 6F 6E 65 21        8538 	.ascii "Done!"
      0006FA 0A                    8539 	.db 0x0a
      0006FB 00                    8540 	.db 0x00
                                   8541 	.area CSEG    (CODE)
                                   8542 	.area CONST   (CODE)
      0006FC                       8543 ___str_33:
      0006FC 45 6E 74 65 72 20 6E  8544 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      00070B 0A                    8545 	.db 0x0a
      00070C 00                    8546 	.db 0x00
                                   8547 	.area CSEG    (CODE)
                                   8548 	.area CONST   (CODE)
      00070D                       8549 ___str_34:
      00070D 45 6E 74 65 72 20 61  8550 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      00071B 0A                    8551 	.db 0x0a
      00071C 00                    8552 	.db 0x00
                                   8553 	.area CSEG    (CODE)
                                   8554 	.area CONST   (CODE)
      00071D                       8555 ___str_35:
      00071D 50 72 65 73 73 20 32  8556 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      000732 0A                    8557 	.db 0x0a
      000733 00                    8558 	.db 0x00
                                   8559 	.area CSEG    (CODE)
                                   8560 	.area CONST   (CODE)
      000734                       8561 ___str_36:
      000734 50 72 65 73 73 20 33  8562 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      000750 0A                    8563 	.db 0x0a
      000751 00                    8564 	.db 0x00
                                   8565 	.area CSEG    (CODE)
                                   8566 	.area CONST   (CODE)
      000752                       8567 ___str_37:
      000752 45 6E 74 65 72 20 62  8568 	.ascii "Enter byte to search:"
             79 74 65 20 74 6F 20
             73 65 61 72 63 68 3A
      000767 0A                    8569 	.db 0x0a
      000768 00                    8570 	.db 0x00
                                   8571 	.area CSEG    (CODE)
                                   8572 	.area CONST   (CODE)
      000769                       8573 ___str_38:
      000769 4E 6F 6E 65 20 66 6F  8574 	.ascii "None found!"
             75 6E 64 21
      000774 0A                    8575 	.db 0x0a
      000775 00                    8576 	.db 0x00
                                   8577 	.area CSEG    (CODE)
                                   8578 	.area CONST   (CODE)
      000776                       8579 ___str_39:
      000776 4E 6F 20 6D 61 74 63  8580 	.ascii "No matches found"
             68 65 73 20 66 6F 75
             6E 64
      000786 0A                    8581 	.db 0x0a
      000787 00                    8582 	.db 0x00
                                   8583 	.area CSEG    (CODE)
                                   8584 	.area CONST   (CODE)
      000788                       8585 ___str_40:
      000788 20 6D 61 74 63 68 65  8586 	.ascii " matches found"
             73 20 66 6F 75 6E 64
      000796 0A                    8587 	.db 0x0a
      000797 00                    8588 	.db 0x00
                                   8589 	.area CSEG    (CODE)
                                   8590 	.area CONST   (CODE)
      000798                       8591 ___str_41:
      000798 45 6E 74 65 72 20 62  8592 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      0007AC 0A                    8593 	.db 0x0a
      0007AD 00                    8594 	.db 0x00
                                   8595 	.area CSEG    (CODE)
                                   8596 	.area CONST   (CODE)
      0007AE                       8597 ___str_42:
      0007AE 54 65 6D 70 65 72 61  8598 	.ascii "Temperature: "
             74 75 72 65 3A 20
      0007BB 00                    8599 	.db 0x00
                                   8600 	.area CSEG    (CODE)
                                   8601 	.area CONST   (CODE)
      0007BC                       8602 ___str_43:
      0007BC 50 72 65 73 73 20 6B  8603 	.ascii "Press key to refresh"
             65 79 20 74 6F 20 72
             65 66 72 65 73 68
      0007D0 0A                    8604 	.db 0x0a
      0007D1 00                    8605 	.db 0x00
                                   8606 	.area CSEG    (CODE)
                                   8607 	.area CONST   (CODE)
      0007D2                       8608 ___str_44:
      0007D2 4C 69 67 68 74 20 6C  8609 	.ascii "Light level: "
             65 76 65 6C 3A 20
      0007DF 00                    8610 	.db 0x00
                                   8611 	.area CSEG    (CODE)
                                   8612 	.area CONST   (CODE)
      0007E0                       8613 ___str_45:
      0007E0 42 72 61 6E 64 6F 6E  8614 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      0007ED 0A                    8615 	.db 0x0a
      0007EE 00                    8616 	.db 0x00
                                   8617 	.area CSEG    (CODE)
                                   8618 	.area CONST   (CODE)
      0007EF                       8619 ___str_46:
      0007EF 45 43 45 4E 20 34 33  8620 	.ascii "ECEN 4330"
             33 30
      0007F8 0A                    8621 	.db 0x0a
      0007F9 00                    8622 	.db 0x00
                                   8623 	.area CSEG    (CODE)
                                   8624 	.area CONST   (CODE)
      0007FA                       8625 ___str_47:
      0007FA 31 3A 20 42 61 73 69  8626 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      000808 0A                    8627 	.db 0x0a
      000809 00                    8628 	.db 0x00
                                   8629 	.area CSEG    (CODE)
                                   8630 	.area CONST   (CODE)
      00080A                       8631 ___str_48:
      00080A 32 3A 20 44 75 6D 70  8632 	.ascii "2: Dump"
      000811 0A                    8633 	.db 0x0a
      000812 00                    8634 	.db 0x00
                                   8635 	.area CSEG    (CODE)
                                   8636 	.area CONST   (CODE)
      000813                       8637 ___str_49:
      000813 33 3A 20 43 68 65 63  8638 	.ascii "3: Check"
             6B
      00081B 0A                    8639 	.db 0x0a
      00081C 00                    8640 	.db 0x00
                                   8641 	.area CSEG    (CODE)
                                   8642 	.area CONST   (CODE)
      00081D                       8643 ___str_50:
      00081D 41 3A 20 4D 6F 76 65  8644 	.ascii "A: Move"
      000824 0A                    8645 	.db 0x0a
      000825 00                    8646 	.db 0x00
                                   8647 	.area CSEG    (CODE)
                                   8648 	.area CONST   (CODE)
      000826                       8649 ___str_51:
      000826 34 3A 20 45 64 69 74  8650 	.ascii "4: Edit"
      00082D 0A                    8651 	.db 0x0a
      00082E 00                    8652 	.db 0x00
                                   8653 	.area CSEG    (CODE)
                                   8654 	.area CONST   (CODE)
      00082F                       8655 ___str_52:
      00082F 35 3A 20 46 69 6E 64  8656 	.ascii "5: Find"
      000836 0A                    8657 	.db 0x0a
      000837 00                    8658 	.db 0x00
                                   8659 	.area CSEG    (CODE)
                                   8660 	.area CONST   (CODE)
      000838                       8661 ___str_53:
      000838 36 3A 20 43 6F 75 6E  8662 	.ascii "6: Count"
             74
      000840 0A                    8663 	.db 0x0a
      000841 00                    8664 	.db 0x00
                                   8665 	.area CSEG    (CODE)
                                   8666 	.area CONST   (CODE)
      000842                       8667 ___str_54:
      000842 42 3A 20 54 65 6D 70  8668 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      000850 0A                    8669 	.db 0x0a
      000851 00                    8670 	.db 0x00
                                   8671 	.area CSEG    (CODE)
                                   8672 	.area CONST   (CODE)
      000852                       8673 ___str_55:
      000852 37 3A 20 4C 69 67 68  8674 	.ascii "7: Light"
             74
      00085A 0A                    8675 	.db 0x0a
      00085B 00                    8676 	.db 0x00
                                   8677 	.area CSEG    (CODE)
                                   8678 	.area XINIT   (CODE)
                                   8679 	.area CABS    (ABS,CODE)
