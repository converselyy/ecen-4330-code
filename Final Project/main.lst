                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _basic
                                     23 	.globl _writeSomeLines
                                     24 	.globl _convertAsciiHex
                                     25 	.globl _write
                                     26 	.globl _drawChar
                                     27 	.globl _setRotation
                                     28 	.globl _ioread8
                                     29 	.globl _iowrite8
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _B
                                    106 	.globl _ACC
                                    107 	.globl _PSW
                                    108 	.globl _IP
                                    109 	.globl _P3
                                    110 	.globl _IE
                                    111 	.globl _P2
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _P1
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _P0
                                    126 	.globl _printCount_PARM_4
                                    127 	.globl _dumpPage_PARM_3
                                    128 	.globl _dumpPage_PARM_2
                                    129 	.globl __height
                                    130 	.globl __width
                                    131 	.globl _printCount_PARM_5
                                    132 	.globl _printCount_PARM_3
                                    133 	.globl _printCount_PARM_2
                                    134 	.globl _drawChar_PARM_6
                                    135 	.globl _drawChar_PARM_5
                                    136 	.globl _drawChar_PARM_4
                                    137 	.globl _drawChar_PARM_3
                                    138 	.globl _drawChar_PARM_2
                                    139 	.globl _fillRect_PARM_5
                                    140 	.globl _fillRect_PARM_4
                                    141 	.globl _fillRect_PARM_3
                                    142 	.globl _fillRect_PARM_2
                                    143 	.globl _testCircles_PARM_2
                                    144 	.globl _drawCircle_PARM_4
                                    145 	.globl _drawCircle_PARM_3
                                    146 	.globl _drawCircle_PARM_2
                                    147 	.globl _drawPixel_PARM_3
                                    148 	.globl _drawPixel_PARM_2
                                    149 	.globl _textbgcolor
                                    150 	.globl _textcolor
                                    151 	.globl _rotation
                                    152 	.globl _textsize
                                    153 	.globl _cursor_y
                                    154 	.globl _cursor_x
                                    155 	.globl _read_ram_address
                                    156 	.globl _light_address
                                    157 	.globl _temp_address
                                    158 	.globl _seg7_address
                                    159 	.globl _lcd_address
                                    160 	.globl _rowloc
                                    161 	.globl _colloc
                                    162 	.globl _delay
                                    163 	.globl _writeRegister8
                                    164 	.globl _writeRegister16
                                    165 	.globl _setCursor
                                    166 	.globl _setTextColor
                                    167 	.globl _setTextSize
                                    168 	.globl _setAddress
                                    169 	.globl _TFT_LCD_INIT
                                    170 	.globl _drawPixel
                                    171 	.globl _drawCircle
                                    172 	.globl _testCircles
                                    173 	.globl _fillRect
                                    174 	.globl _fillScreen
                                    175 	.globl _LCD_string_write
                                    176 	.globl _testRAM
                                    177 	.globl _freeType
                                    178 	.globl _keyDetect
                                    179 	.globl _reverse
                                    180 	.globl _asciiToDec
                                    181 	.globl _asciiToHex
                                    182 	.globl _getAddress
                                    183 	.globl _getByte
                                    184 	.globl _dumpPage
                                    185 	.globl _dump
                                    186 	.globl _check
                                    187 	.globl _move
                                    188 	.globl _editByte
                                    189 	.globl _edit
                                    190 	.globl _printCount
                                    191 	.globl _count
                                    192 	.globl _displayTemp
                                    193 	.globl _displayLight
                                    194 	.globl _temperature
                                    195 	.globl _light
                                    196 ;--------------------------------------------------------
                                    197 ; special function registers
                                    198 ;--------------------------------------------------------
                                    199 	.area RSEG    (ABS,DATA)
      000000                        200 	.org 0x0000
                           000080   201 _P0	=	0x0080
                           000081   202 _SP	=	0x0081
                           000082   203 _DPL	=	0x0082
                           000083   204 _DPH	=	0x0083
                           000087   205 _PCON	=	0x0087
                           000088   206 _TCON	=	0x0088
                           000089   207 _TMOD	=	0x0089
                           00008A   208 _TL0	=	0x008a
                           00008B   209 _TL1	=	0x008b
                           00008C   210 _TH0	=	0x008c
                           00008D   211 _TH1	=	0x008d
                           000090   212 _P1	=	0x0090
                           000098   213 _SCON	=	0x0098
                           000099   214 _SBUF	=	0x0099
                           0000A0   215 _P2	=	0x00a0
                           0000A8   216 _IE	=	0x00a8
                           0000B0   217 _P3	=	0x00b0
                           0000B8   218 _IP	=	0x00b8
                           0000D0   219 _PSW	=	0x00d0
                           0000E0   220 _ACC	=	0x00e0
                           0000F0   221 _B	=	0x00f0
                                    222 ;--------------------------------------------------------
                                    223 ; special function bits
                                    224 ;--------------------------------------------------------
                                    225 	.area RSEG    (ABS,DATA)
      000000                        226 	.org 0x0000
                           000080   227 _P0_0	=	0x0080
                           000081   228 _P0_1	=	0x0081
                           000082   229 _P0_2	=	0x0082
                           000083   230 _P0_3	=	0x0083
                           000084   231 _P0_4	=	0x0084
                           000085   232 _P0_5	=	0x0085
                           000086   233 _P0_6	=	0x0086
                           000087   234 _P0_7	=	0x0087
                           000088   235 _IT0	=	0x0088
                           000089   236 _IE0	=	0x0089
                           00008A   237 _IT1	=	0x008a
                           00008B   238 _IE1	=	0x008b
                           00008C   239 _TR0	=	0x008c
                           00008D   240 _TF0	=	0x008d
                           00008E   241 _TR1	=	0x008e
                           00008F   242 _TF1	=	0x008f
                           000090   243 _P1_0	=	0x0090
                           000091   244 _P1_1	=	0x0091
                           000092   245 _P1_2	=	0x0092
                           000093   246 _P1_3	=	0x0093
                           000094   247 _P1_4	=	0x0094
                           000095   248 _P1_5	=	0x0095
                           000096   249 _P1_6	=	0x0096
                           000097   250 _P1_7	=	0x0097
                           000098   251 _RI	=	0x0098
                           000099   252 _TI	=	0x0099
                           00009A   253 _RB8	=	0x009a
                           00009B   254 _TB8	=	0x009b
                           00009C   255 _REN	=	0x009c
                           00009D   256 _SM2	=	0x009d
                           00009E   257 _SM1	=	0x009e
                           00009F   258 _SM0	=	0x009f
                           0000A0   259 _P2_0	=	0x00a0
                           0000A1   260 _P2_1	=	0x00a1
                           0000A2   261 _P2_2	=	0x00a2
                           0000A3   262 _P2_3	=	0x00a3
                           0000A4   263 _P2_4	=	0x00a4
                           0000A5   264 _P2_5	=	0x00a5
                           0000A6   265 _P2_6	=	0x00a6
                           0000A7   266 _P2_7	=	0x00a7
                           0000A8   267 _EX0	=	0x00a8
                           0000A9   268 _ET0	=	0x00a9
                           0000AA   269 _EX1	=	0x00aa
                           0000AB   270 _ET1	=	0x00ab
                           0000AC   271 _ES	=	0x00ac
                           0000AF   272 _EA	=	0x00af
                           0000B0   273 _P3_0	=	0x00b0
                           0000B1   274 _P3_1	=	0x00b1
                           0000B2   275 _P3_2	=	0x00b2
                           0000B3   276 _P3_3	=	0x00b3
                           0000B4   277 _P3_4	=	0x00b4
                           0000B5   278 _P3_5	=	0x00b5
                           0000B6   279 _P3_6	=	0x00b6
                           0000B7   280 _P3_7	=	0x00b7
                           0000B0   281 _RXD	=	0x00b0
                           0000B1   282 _TXD	=	0x00b1
                           0000B2   283 _INT0	=	0x00b2
                           0000B3   284 _INT1	=	0x00b3
                           0000B4   285 _T0	=	0x00b4
                           0000B5   286 _T1	=	0x00b5
                           0000B6   287 _WR	=	0x00b6
                           0000B7   288 _RD	=	0x00b7
                           0000B8   289 _PX0	=	0x00b8
                           0000B9   290 _PT0	=	0x00b9
                           0000BA   291 _PX1	=	0x00ba
                           0000BB   292 _PT1	=	0x00bb
                           0000BC   293 _PS	=	0x00bc
                           0000D0   294 _P	=	0x00d0
                           0000D1   295 _F1	=	0x00d1
                           0000D2   296 _OV	=	0x00d2
                           0000D3   297 _RS0	=	0x00d3
                           0000D4   298 _RS1	=	0x00d4
                           0000D5   299 _F0	=	0x00d5
                           0000D6   300 _AC	=	0x00d6
                           0000D7   301 _CY	=	0x00d7
                                    302 ;--------------------------------------------------------
                                    303 ; overlayable register banks
                                    304 ;--------------------------------------------------------
                                    305 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        306 	.ds 8
                                    307 ;--------------------------------------------------------
                                    308 ; internal ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area DSEG    (DATA)
      000000                        311 _colloc::
      000000                        312 	.ds 1
      000001                        313 _rowloc::
      000001                        314 	.ds 1
      000002                        315 _lcd_address::
      000002                        316 	.ds 2
      000004                        317 _seg7_address::
      000004                        318 	.ds 2
      000006                        319 _temp_address::
      000006                        320 	.ds 2
      000008                        321 _light_address::
      000008                        322 	.ds 2
      00000A                        323 _read_ram_address::
      00000A                        324 	.ds 2
      00000C                        325 _cursor_x::
      00000C                        326 	.ds 2
      00000E                        327 _cursor_y::
      00000E                        328 	.ds 2
      000010                        329 _textsize::
      000010                        330 	.ds 1
      000011                        331 _rotation::
      000011                        332 	.ds 1
      000012                        333 _textcolor::
      000012                        334 	.ds 2
      000014                        335 _textbgcolor::
      000014                        336 	.ds 2
      000016                        337 _drawPixel_PARM_2:
      000016                        338 	.ds 2
      000018                        339 _drawPixel_PARM_3:
      000018                        340 	.ds 2
      00001A                        341 _drawCircle_PARM_2:
      00001A                        342 	.ds 2
      00001C                        343 _drawCircle_PARM_3:
      00001C                        344 	.ds 2
      00001E                        345 _drawCircle_PARM_4:
      00001E                        346 	.ds 2
      000020                        347 _drawCircle_x0_65536_105:
      000020                        348 	.ds 2
      000022                        349 _drawCircle_sloc0_1_0:
      000022                        350 	.ds 2
      000024                        351 _drawCircle_sloc1_1_0:
      000024                        352 	.ds 2
      000026                        353 _drawCircle_sloc2_1_0:
      000026                        354 	.ds 2
      000028                        355 _drawCircle_sloc3_1_0:
      000028                        356 	.ds 2
      00002A                        357 _drawCircle_sloc4_1_0:
      00002A                        358 	.ds 2
      00002C                        359 _testCircles_PARM_2:
      00002C                        360 	.ds 2
      00002E                        361 _testCircles_radius_65536_109:
      00002E                        362 	.ds 1
      00002F                        363 _testCircles_sloc0_1_0:
      00002F                        364 	.ds 2
      000031                        365 _fillRect_PARM_2:
      000031                        366 	.ds 2
      000033                        367 _fillRect_PARM_3:
      000033                        368 	.ds 2
      000035                        369 _fillRect_PARM_4:
      000035                        370 	.ds 2
      000037                        371 _fillRect_PARM_5:
      000037                        372 	.ds 2
      000039                        373 _drawChar_PARM_2:
      000039                        374 	.ds 2
      00003B                        375 _drawChar_PARM_3:
      00003B                        376 	.ds 1
      00003C                        377 _drawChar_PARM_4:
      00003C                        378 	.ds 2
      00003E                        379 _drawChar_PARM_5:
      00003E                        380 	.ds 2
      000040                        381 _drawChar_PARM_6:
      000040                        382 	.ds 1
      000041                        383 _drawChar_sloc1_1_0:
      000041                        384 	.ds 2
      000043                        385 _drawChar_sloc2_1_0:
      000043                        386 	.ds 2
      000045                        387 _drawChar_sloc3_1_0:
      000045                        388 	.ds 1
      000046                        389 _drawChar_sloc4_1_0:
      000046                        390 	.ds 1
      000047                        391 _drawChar_sloc5_1_0:
      000047                        392 	.ds 1
      000048                        393 _asciiToHex_store_65536_202:
      000048                        394 	.ds 2
      00004A                        395 _dumpPage_start_65536_233:
      00004A                        396 	.ds 2
      00004C                        397 _dumpPage_ramAddress_65537_235:
      00004C                        398 	.ds 2
      00004E                        399 _dumpPage_sloc0_1_0:
      00004E                        400 	.ds 2
      000050                        401 _move_target_65537_275:
      000050                        402 	.ds 2
      000052                        403 _move_sloc0_1_0:
      000052                        404 	.ds 2
      000054                        405 _move_sloc1_1_0:
      000054                        406 	.ds 2
      000056                        407 _printCount_PARM_2:
      000056                        408 	.ds 1
      000057                        409 _printCount_PARM_3:
      000057                        410 	.ds 1
      000058                        411 _printCount_PARM_5:
      000058                        412 	.ds 1
      000059                        413 _printCount_start_65536_288:
      000059                        414 	.ds 2
      00005B                        415 _count_key_65537_298:
      00005B                        416 	.ds 1
      00005C                        417 _count_n_65537_298:
      00005C                        418 	.ds 1
      00005D                        419 _count_size_65537_298:
      00005D                        420 	.ds 1
      00005E                        421 _count_sloc0_1_0:
      00005E                        422 	.ds 1
      00005F                        423 _count_sloc1_1_0:
      00005F                        424 	.ds 1
      000060                        425 _count_sloc2_1_0:
      000060                        426 	.ds 1
                                    427 ;--------------------------------------------------------
                                    428 ; overlayable items in internal ram
                                    429 ;--------------------------------------------------------
                                    430 	.area	OSEG    (OVR,DATA)
      000000                        431 _iowrite8_PARM_2:
      000000                        432 	.ds 1
                                    433 	.area	OSEG    (OVR,DATA)
                                    434 	.area	OSEG    (OVR,DATA)
                                    435 	.area	OSEG    (OVR,DATA)
      000000                        436 _writeRegister8_PARM_2:
      000000                        437 	.ds 1
                                    438 	.area	OSEG    (OVR,DATA)
      000000                        439 _writeRegister16_PARM_2:
      000000                        440 	.ds 2
                                    441 	.area	OSEG    (OVR,DATA)
      000000                        442 _setCursor_PARM_2:
      000000                        443 	.ds 2
                                    444 	.area	OSEG    (OVR,DATA)
      000000                        445 _setTextColor_PARM_2:
      000000                        446 	.ds 2
                                    447 	.area	OSEG    (OVR,DATA)
                                    448 	.area	OSEG    (OVR,DATA)
      000000                        449 _setAddress_PARM_2:
      000000                        450 	.ds 2
      000002                        451 _setAddress_PARM_3:
      000002                        452 	.ds 2
      000004                        453 _setAddress_PARM_4:
      000004                        454 	.ds 2
                                    455 	.area	OSEG    (OVR,DATA)
                                    456 	.area	OSEG    (OVR,DATA)
                                    457 ;--------------------------------------------------------
                                    458 ; Stack segment in internal ram
                                    459 ;--------------------------------------------------------
                                    460 	.area	SSEG
      000000                        461 __start__stack:
      000000                        462 	.ds	1
                                    463 
                                    464 ;--------------------------------------------------------
                                    465 ; indirectly addressable internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area ISEG    (DATA)
                                    468 ;--------------------------------------------------------
                                    469 ; absolute internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area IABS    (ABS,DATA)
                                    472 	.area IABS    (ABS,DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; bit data
                                    475 ;--------------------------------------------------------
                                    476 	.area BSEG    (BIT)
      000000                        477 _drawChar_sloc0_1_0:
      000000                        478 	.ds 1
      000001                        479 _convertAsciiHex_sloc0_1_0:
      000001                        480 	.ds 1
                                    481 ;--------------------------------------------------------
                                    482 ; paged external ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area PSEG    (PAG,XDATA)
                                    485 ;--------------------------------------------------------
                                    486 ; external ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area XSEG    (XDATA)
      000000                        489 __width::
      000000                        490 	.ds 2
      000002                        491 __height::
      000002                        492 	.ds 2
      000004                        493 _drawCircle_f_65536_106:
      000004                        494 	.ds 2
      000006                        495 _testCircles_x_65536_110:
      000006                        496 	.ds 2
      000008                        497 _testCircles_y_65536_110:
      000008                        498 	.ds 2
      00000A                        499 _drawChar_line_196609_153:
      00000A                        500 	.ds 1
      00000B                        501 _testRAM_d_65536_174:
      00000B                        502 	.ds 1
      00000C                        503 _freeType_count_65536_178:
      00000C                        504 	.ds 1
      00000D                        505 _reverse_rev_65536_196:
      00000D                        506 	.ds 2
      00000F                        507 _reverse_val_65536_196:
      00000F                        508 	.ds 2
      000011                        509 _asciiToDec_d_65536_198:
      000011                        510 	.ds 1
      000012                        511 _asciiToDec_val_65536_199:
      000012                        512 	.ds 1
      000013                        513 _asciiToDec_id_65536_199:
      000013                        514 	.ds 2
      000015                        515 _getAddress_address_65536_227:
      000015                        516 	.ds 2
      000017                        517 _getByte_byte_65536_230:
      000017                        518 	.ds 1
      000018                        519 _dumpPage_PARM_2:
      000018                        520 	.ds 1
      000019                        521 _dumpPage_PARM_3:
      000019                        522 	.ds 1
      00001A                        523 _dumpPage_i_65537_235:
      00001A                        524 	.ds 1
      00001B                        525 _dump_type_65537_242:
      00001B                        526 	.ds 1
      00001C                        527 _dump_page_65537_242:
      00001C                        528 	.ds 1
      00001D                        529 _dump_address_65537_242:
      00001D                        530 	.ds 2
      00001F                        531 _check_checker_65537_259:
      00001F                        532 	.ds 1
      000020                        533 _check_error_65537_259:
      000020                        534 	.ds 1
      000021                        535 _editByte_add_65536_279:
      000021                        536 	.ds 2
      000023                        537 _edit_input_65537_283:
      000023                        538 	.ds 1
      000024                        539 _printCount_PARM_4:
      000024                        540 	.ds 1
      000025                        541 _count_page_65537_298:
      000025                        542 	.ds 1
      000026                        543 _count_index_65537_298:
      000026                        544 	.ds 1
      000027                        545 _count_address_65537_298:
      000027                        546 	.ds 2
                                    547 ;--------------------------------------------------------
                                    548 ; absolute external ram data
                                    549 ;--------------------------------------------------------
                                    550 	.area XABS    (ABS,XDATA)
                                    551 ;--------------------------------------------------------
                                    552 ; external initialized ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area XISEG   (XDATA)
                                    555 	.area HOME    (CODE)
                                    556 	.area GSINIT0 (CODE)
                                    557 	.area GSINIT1 (CODE)
                                    558 	.area GSINIT2 (CODE)
                                    559 	.area GSINIT3 (CODE)
                                    560 	.area GSINIT4 (CODE)
                                    561 	.area GSINIT5 (CODE)
                                    562 	.area GSINIT  (CODE)
                                    563 	.area GSFINAL (CODE)
                                    564 	.area CSEG    (CODE)
                                    565 ;--------------------------------------------------------
                                    566 ; interrupt vector
                                    567 ;--------------------------------------------------------
                                    568 	.area HOME    (CODE)
      000000                        569 __interrupt_vect:
      000000 02r00r00         [24]  570 	ljmp	__sdcc_gsinit_startup
                                    571 ;--------------------------------------------------------
                                    572 ; global & static initialisations
                                    573 ;--------------------------------------------------------
                                    574 	.area HOME    (CODE)
                                    575 	.area GSINIT  (CODE)
                                    576 	.area GSFINAL (CODE)
                                    577 	.area GSINIT  (CODE)
                                    578 	.globl __sdcc_gsinit_startup
                                    579 	.globl __sdcc_program_startup
                                    580 	.globl __start__stack
                                    581 	.globl __mcs51_genXINIT
                                    582 	.globl __mcs51_genXRAMCLEAR
                                    583 	.globl __mcs51_genRAMCLEAR
                                    584 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  585 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  586 	mov	(_lcd_address + 1),#0x40
                                    587 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  588 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  589 	mov	(_seg7_address + 1),#0x80
                                    590 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  591 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  592 	mov	(_temp_address + 1),#0xc0
                                    593 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  594 	clr	a
      000013 F5*08            [12]  595 	mov	_light_address,a
      000015 F5*09            [12]  596 	mov	(_light_address + 1),a
                                    597 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  598 	ljmp	__sdcc_program_startup
                                    599 ;--------------------------------------------------------
                                    600 ; Home
                                    601 ;--------------------------------------------------------
                                    602 	.area HOME    (CODE)
                                    603 	.area HOME    (CODE)
      000003                        604 __sdcc_program_startup:
      000003 02r1DrD0         [24]  605 	ljmp	_main
                                    606 ;	return from main will return to caller
                                    607 ;--------------------------------------------------------
                                    608 ; code
                                    609 ;--------------------------------------------------------
                                    610 	.area CSEG    (CODE)
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'iowrite8'
                                    613 ;------------------------------------------------------------
                                    614 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    615 ;map_address               Allocated to registers r6 r7 
                                    616 ;------------------------------------------------------------
                                    617 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    618 ;	-----------------------------------------
                                    619 ;	 function iowrite8
                                    620 ;	-----------------------------------------
      000000                        621 _iowrite8:
                           000007   622 	ar7 = 0x07
                           000006   623 	ar6 = 0x06
                           000005   624 	ar5 = 0x05
                           000004   625 	ar4 = 0x04
                           000003   626 	ar3 = 0x03
                           000002   627 	ar2 = 0x02
                           000001   628 	ar1 = 0x01
                           000000   629 	ar0 = 0x00
      000000 AE 82            [24]  630 	mov	r6,dpl
      000002 AF 83            [24]  631 	mov	r7,dph
                                    632 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    633 ;	assignBit
      000004 D2 B4            [12]  634 	setb	_P3_4
                                    635 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  636 	mov	dpl,r6
      000008 8F 83            [24]  637 	mov	dph,r7
      00000A E5*00            [12]  638 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  639 	movx	@dptr,a
                                    640 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    641 ;	assignBit
      00000D C2 B4            [12]  642 	clr	_P3_4
                                    643 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  644 	ret
                                    645 ;------------------------------------------------------------
                                    646 ;Allocation info for local variables in function 'ioread8'
                                    647 ;------------------------------------------------------------
                                    648 ;map_address               Allocated to registers r6 r7 
                                    649 ;val                       Allocated to registers r6 
                                    650 ;------------------------------------------------------------
                                    651 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    652 ;	-----------------------------------------
                                    653 ;	 function ioread8
                                    654 ;	-----------------------------------------
      000010                        655 _ioread8:
      000010 AE 82            [24]  656 	mov	r6,dpl
      000012 AF 83            [24]  657 	mov	r7,dph
                                    658 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    659 ;	assignBit
      000014 D2 B4            [12]  660 	setb	_P3_4
                                    661 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      000016 8E 82            [24]  662 	mov	dpl,r6
      000018 8F 83            [24]  663 	mov	dph,r7
      00001A E0               [24]  664 	movx	a,@dptr
      00001B FE               [12]  665 	mov	r6,a
                                    666 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    667 ;	assignBit
      00001C C2 B4            [12]  668 	clr	_P3_4
                                    669 ;	ecen4330_lcd_v3.c:67: return val;
      00001E 8E 82            [24]  670 	mov	dpl,r6
                                    671 ;	ecen4330_lcd_v3.c:68: }
      000020 22               [24]  672 	ret
                                    673 ;------------------------------------------------------------
                                    674 ;Allocation info for local variables in function 'delay'
                                    675 ;------------------------------------------------------------
                                    676 ;i                         Allocated with name '_delay_i_65536_29'
                                    677 ;j                         Allocated with name '_delay_j_65536_29'
                                    678 ;d                         Allocated to registers r6 r7 
                                    679 ;------------------------------------------------------------
                                    680 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d) {
                                    681 ;	-----------------------------------------
                                    682 ;	 function delay
                                    683 ;	-----------------------------------------
      000021                        684 _delay:
      000021 AE 82            [24]  685 	mov	r6,dpl
      000023 AF 83            [24]  686 	mov	r7,dph
                                    687 ;	ecen4330_lcd_v3.c:75: for (i = 0; i < d; i++){
      000025 7C 00            [12]  688 	mov	r4,#0x00
      000027 7D 00            [12]  689 	mov	r5,#0x00
      000029                        690 00107$:
      000029 8C 02            [24]  691 	mov	ar2,r4
      00002B 8D 03            [24]  692 	mov	ar3,r5
      00002D C3               [12]  693 	clr	c
      00002E EA               [12]  694 	mov	a,r2
      00002F 9E               [12]  695 	subb	a,r6
      000030 EB               [12]  696 	mov	a,r3
      000031 64 80            [12]  697 	xrl	a,#0x80
      000033 8F F0            [24]  698 	mov	b,r7
      000035 63 F0 80         [24]  699 	xrl	b,#0x80
      000038 95 F0            [12]  700 	subb	a,b
      00003A 50 14            [24]  701 	jnc	00109$
                                    702 ;	ecen4330_lcd_v3.c:76: for (j = 0; j < 1000; j++);
      00003C 7A E8            [12]  703 	mov	r2,#0xe8
      00003E 7B 03            [12]  704 	mov	r3,#0x03
      000040                        705 00105$:
      000040 1A               [12]  706 	dec	r2
      000041 BA FF 01         [24]  707 	cjne	r2,#0xff,00130$
      000044 1B               [12]  708 	dec	r3
      000045                        709 00130$:
      000045 EA               [12]  710 	mov	a,r2
      000046 4B               [12]  711 	orl	a,r3
      000047 70 F7            [24]  712 	jnz	00105$
                                    713 ;	ecen4330_lcd_v3.c:75: for (i = 0; i < d; i++){
      000049 0C               [12]  714 	inc	r4
      00004A BC 00 DC         [24]  715 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  716 	inc	r5
      00004E 80 D9            [24]  717 	sjmp	00107$
      000050                        718 00109$:
                                    719 ;	ecen4330_lcd_v3.c:78: }
      000050 22               [24]  720 	ret
                                    721 ;------------------------------------------------------------
                                    722 ;Allocation info for local variables in function 'writeRegister8'
                                    723 ;------------------------------------------------------------
                                    724 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    725 ;a                         Allocated to registers r7 
                                    726 ;------------------------------------------------------------
                                    727 ;	ecen4330_lcd_v3.c:88: void writeRegister8 (uint8_t a, uint8_t d) {
                                    728 ;	-----------------------------------------
                                    729 ;	 function writeRegister8
                                    730 ;	-----------------------------------------
      000051                        731 _writeRegister8:
      000051 AF 82            [24]  732 	mov	r7,dpl
                                    733 ;	ecen4330_lcd_v3.c:89: CD = __CMD__;
                                    734 ;	assignBit
      000053 C2 B5            [12]  735 	clr	_P3_5
                                    736 ;	ecen4330_lcd_v3.c:90: write8(a);
                                    737 ;	assignBit
      000055 D2 B4            [12]  738 	setb	_P3_4
      000057 85*02 82         [24]  739 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  740 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  741 	mov	a,r7
      00005E F0               [24]  742 	movx	@dptr,a
                                    743 ;	assignBit
      00005F C2 B4            [12]  744 	clr	_P3_4
                                    745 ;	ecen4330_lcd_v3.c:91: CD = __DATA__;
                                    746 ;	assignBit
      000061 D2 B5            [12]  747 	setb	_P3_5
                                    748 ;	ecen4330_lcd_v3.c:92: write8(d);
                                    749 ;	assignBit
      000063 D2 B4            [12]  750 	setb	_P3_4
      000065 85*02 82         [24]  751 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  752 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  753 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  754 	movx	@dptr,a
                                    755 ;	assignBit
      00006E C2 B4            [12]  756 	clr	_P3_4
                                    757 ;	ecen4330_lcd_v3.c:93: }
      000070 22               [24]  758 	ret
                                    759 ;------------------------------------------------------------
                                    760 ;Allocation info for local variables in function 'writeRegister16'
                                    761 ;------------------------------------------------------------
                                    762 ;hi                        Allocated with name '_writeRegister16_hi_65536_38'
                                    763 ;lo                        Allocated with name '_writeRegister16_lo_65536_38'
                                    764 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    765 ;a                         Allocated to registers r6 r7 
                                    766 ;------------------------------------------------------------
                                    767 ;	ecen4330_lcd_v3.c:97: void writeRegister16 (uint16_t a, uint16_t d) {
                                    768 ;	-----------------------------------------
                                    769 ;	 function writeRegister16
                                    770 ;	-----------------------------------------
      000071                        771 _writeRegister16:
      000071 AE 82            [24]  772 	mov	r6,dpl
      000073 AF 83            [24]  773 	mov	r7,dph
                                    774 ;	ecen4330_lcd_v3.c:99: hi = (a) >> 8;
      000075 8F 05            [24]  775 	mov	ar5,r7
                                    776 ;	ecen4330_lcd_v3.c:100: lo = (a);
                                    777 ;	ecen4330_lcd_v3.c:101: write8Reg(hi);
                                    778 ;	assignBit
      000077 C2 B5            [12]  779 	clr	_P3_5
                                    780 ;	assignBit
      000079 D2 B4            [12]  781 	setb	_P3_4
      00007B 85*02 82         [24]  782 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  783 	mov	dph,(_lcd_address + 1)
      000081 ED               [12]  784 	mov	a,r5
      000082 F0               [24]  785 	movx	@dptr,a
                                    786 ;	assignBit
      000083 C2 B4            [12]  787 	clr	_P3_4
                                    788 ;	ecen4330_lcd_v3.c:102: write8Reg(lo);
                                    789 ;	assignBit
      000085 C2 B5            [12]  790 	clr	_P3_5
                                    791 ;	assignBit
      000087 D2 B4            [12]  792 	setb	_P3_4
      000089 85*02 82         [24]  793 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  794 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  795 	mov	a,r6
      000090 F0               [24]  796 	movx	@dptr,a
                                    797 ;	assignBit
      000091 C2 B4            [12]  798 	clr	_P3_4
                                    799 ;	ecen4330_lcd_v3.c:103: hi = (d) >> 8;
      000093 AF*01            [24]  800 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    801 ;	ecen4330_lcd_v3.c:104: lo = (d);
      000095 AE*00            [24]  802 	mov	r6,_writeRegister16_PARM_2
                                    803 ;	ecen4330_lcd_v3.c:105: CD = 1 ;
                                    804 ;	assignBit
      000097 D2 B5            [12]  805 	setb	_P3_5
                                    806 ;	ecen4330_lcd_v3.c:106: write8Data(hi);
                                    807 ;	assignBit
      000099 D2 B5            [12]  808 	setb	_P3_5
                                    809 ;	assignBit
      00009B D2 B4            [12]  810 	setb	_P3_4
      00009D 85*02 82         [24]  811 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  812 	mov	dph,(_lcd_address + 1)
      0000A3 EF               [12]  813 	mov	a,r7
      0000A4 F0               [24]  814 	movx	@dptr,a
                                    815 ;	assignBit
      0000A5 C2 B4            [12]  816 	clr	_P3_4
                                    817 ;	ecen4330_lcd_v3.c:107: write8Data(lo);
                                    818 ;	assignBit
      0000A7 D2 B5            [12]  819 	setb	_P3_5
                                    820 ;	assignBit
      0000A9 D2 B4            [12]  821 	setb	_P3_4
      0000AB 85*02 82         [24]  822 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  823 	mov	dph,(_lcd_address + 1)
      0000B1 EE               [12]  824 	mov	a,r6
      0000B2 F0               [24]  825 	movx	@dptr,a
                                    826 ;	assignBit
      0000B3 C2 B4            [12]  827 	clr	_P3_4
                                    828 ;	ecen4330_lcd_v3.c:108: }
      0000B5 22               [24]  829 	ret
                                    830 ;------------------------------------------------------------
                                    831 ;Allocation info for local variables in function 'setCursor'
                                    832 ;------------------------------------------------------------
                                    833 ;y                         Allocated with name '_setCursor_PARM_2'
                                    834 ;x                         Allocated to registers 
                                    835 ;------------------------------------------------------------
                                    836 ;	ecen4330_lcd_v3.c:116: void setCursor (uint16_t x, uint16_t y) {
                                    837 ;	-----------------------------------------
                                    838 ;	 function setCursor
                                    839 ;	-----------------------------------------
      0000B6                        840 _setCursor:
      0000B6 85 82*0C         [24]  841 	mov	_cursor_x,dpl
      0000B9 85 83*0D         [24]  842 	mov	(_cursor_x + 1),dph
                                    843 ;	ecen4330_lcd_v3.c:118: cursor_y = y;
      0000BC 85*00*0E         [24]  844 	mov	_cursor_y,_setCursor_PARM_2
      0000BF 85*01*0F         [24]  845 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    846 ;	ecen4330_lcd_v3.c:119: }
      0000C2 22               [24]  847 	ret
                                    848 ;------------------------------------------------------------
                                    849 ;Allocation info for local variables in function 'setTextColor'
                                    850 ;------------------------------------------------------------
                                    851 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    852 ;x                         Allocated to registers 
                                    853 ;------------------------------------------------------------
                                    854 ;	ecen4330_lcd_v3.c:126: void setTextColor (uint16_t x, uint16_t y) {
                                    855 ;	-----------------------------------------
                                    856 ;	 function setTextColor
                                    857 ;	-----------------------------------------
      0000C3                        858 _setTextColor:
      0000C3 85 82*12         [24]  859 	mov	_textcolor,dpl
      0000C6 85 83*13         [24]  860 	mov	(_textcolor + 1),dph
                                    861 ;	ecen4330_lcd_v3.c:128: textbgcolor = y;
      0000C9 85*00*14         [24]  862 	mov	_textbgcolor,_setTextColor_PARM_2
      0000CC 85*01*15         [24]  863 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    864 ;	ecen4330_lcd_v3.c:129: }
      0000CF 22               [24]  865 	ret
                                    866 ;------------------------------------------------------------
                                    867 ;Allocation info for local variables in function 'setTextSize'
                                    868 ;------------------------------------------------------------
                                    869 ;s                         Allocated to registers r7 
                                    870 ;------------------------------------------------------------
                                    871 ;	ecen4330_lcd_v3.c:136: void setTextSize (uint8_t s) {
                                    872 ;	-----------------------------------------
                                    873 ;	 function setTextSize
                                    874 ;	-----------------------------------------
      0000D0                        875 _setTextSize:
                                    876 ;	ecen4330_lcd_v3.c:137: if (s > 8) return;
      0000D0 E5 82            [12]  877 	mov	a,dpl
      0000D2 FF               [12]  878 	mov	r7,a
      0000D3 24 F7            [12]  879 	add	a,#0xff - 0x08
      0000D5 50 01            [24]  880 	jnc	00102$
      0000D7 22               [24]  881 	ret
      0000D8                        882 00102$:
                                    883 ;	ecen4330_lcd_v3.c:138: textsize = (s > 0) ? s : 1 ;
      0000D8 EF               [12]  884 	mov	a,r7
      0000D9 60 06            [24]  885 	jz	00105$
      0000DB 8F 06            [24]  886 	mov	ar6,r7
      0000DD 7F 00            [12]  887 	mov	r7,#0x00
      0000DF 80 04            [24]  888 	sjmp	00106$
      0000E1                        889 00105$:
      0000E1 7E 01            [12]  890 	mov	r6,#0x01
      0000E3 7F 00            [12]  891 	mov	r7,#0x00
      0000E5                        892 00106$:
      0000E5 8E*10            [24]  893 	mov	_textsize,r6
                                    894 ;	ecen4330_lcd_v3.c:139: }
      0000E7 22               [24]  895 	ret
                                    896 ;------------------------------------------------------------
                                    897 ;Allocation info for local variables in function 'setRotation'
                                    898 ;------------------------------------------------------------
                                    899 ;flag                      Allocated to registers r7 
                                    900 ;------------------------------------------------------------
                                    901 ;	ecen4330_lcd_v3.c:151: void setRotation (uint8_t flag) {
                                    902 ;	-----------------------------------------
                                    903 ;	 function setRotation
                                    904 ;	-----------------------------------------
      0000E8                        905 _setRotation:
                                    906 ;	ecen4330_lcd_v3.c:152: switch(flag) {
      0000E8 E5 82            [12]  907 	mov	a,dpl
      0000EA FF               [12]  908 	mov	r7,a
      0000EB 24 FC            [12]  909 	add	a,#0xff - 0x03
      0000ED 40 6A            [24]  910 	jc	00105$
      0000EF EF               [12]  911 	mov	a,r7
      0000F0 2F               [12]  912 	add	a,r7
                                    913 ;	ecen4330_lcd_v3.c:153: case 0:
      0000F1 90r00rF5         [24]  914 	mov	dptr,#00115$
      0000F4 73               [24]  915 	jmp	@a+dptr
      0000F5                        916 00115$:
      0000F5 80 06            [24]  917 	sjmp	00101$
      0000F7 80 1B            [24]  918 	sjmp	00102$
      0000F9 80 30            [24]  919 	sjmp	00103$
      0000FB 80 45            [24]  920 	sjmp	00104$
      0000FD                        921 00101$:
                                    922 ;	ecen4330_lcd_v3.c:154: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000FD 7F 48            [12]  923 	mov	r7,#0x48
                                    924 ;	ecen4330_lcd_v3.c:155: _width = TFTWIDTH;
      0000FF 90r00r00         [24]  925 	mov	dptr,#__width
      000102 74 F0            [12]  926 	mov	a,#0xf0
      000104 F0               [24]  927 	movx	@dptr,a
      000105 E4               [12]  928 	clr	a
      000106 A3               [24]  929 	inc	dptr
      000107 F0               [24]  930 	movx	@dptr,a
                                    931 ;	ecen4330_lcd_v3.c:156: _height = TFTHEIGHT;
      000108 90r00r02         [24]  932 	mov	dptr,#__height
      00010B 74 40            [12]  933 	mov	a,#0x40
      00010D F0               [24]  934 	movx	@dptr,a
      00010E 74 01            [12]  935 	mov	a,#0x01
      000110 A3               [24]  936 	inc	dptr
      000111 F0               [24]  937 	movx	@dptr,a
                                    938 ;	ecen4330_lcd_v3.c:157: break;
                                    939 ;	ecen4330_lcd_v3.c:158: case 1:
      000112 80 5A            [24]  940 	sjmp	00106$
      000114                        941 00102$:
                                    942 ;	ecen4330_lcd_v3.c:159: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000114 7F 28            [12]  943 	mov	r7,#0x28
                                    944 ;	ecen4330_lcd_v3.c:160: _width = TFTHEIGHT;
      000116 90r00r00         [24]  945 	mov	dptr,#__width
      000119 74 40            [12]  946 	mov	a,#0x40
      00011B F0               [24]  947 	movx	@dptr,a
      00011C 74 01            [12]  948 	mov	a,#0x01
      00011E A3               [24]  949 	inc	dptr
      00011F F0               [24]  950 	movx	@dptr,a
                                    951 ;	ecen4330_lcd_v3.c:161: _height = TFTWIDTH;
      000120 90r00r02         [24]  952 	mov	dptr,#__height
      000123 74 F0            [12]  953 	mov	a,#0xf0
      000125 F0               [24]  954 	movx	@dptr,a
      000126 E4               [12]  955 	clr	a
      000127 A3               [24]  956 	inc	dptr
      000128 F0               [24]  957 	movx	@dptr,a
                                    958 ;	ecen4330_lcd_v3.c:162: break;
                                    959 ;	ecen4330_lcd_v3.c:163: case 2:
      000129 80 43            [24]  960 	sjmp	00106$
      00012B                        961 00103$:
                                    962 ;	ecen4330_lcd_v3.c:164: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00012B 7F 88            [12]  963 	mov	r7,#0x88
                                    964 ;	ecen4330_lcd_v3.c:165: _width = TFTWIDTH;
      00012D 90r00r00         [24]  965 	mov	dptr,#__width
      000130 74 F0            [12]  966 	mov	a,#0xf0
      000132 F0               [24]  967 	movx	@dptr,a
      000133 E4               [12]  968 	clr	a
      000134 A3               [24]  969 	inc	dptr
      000135 F0               [24]  970 	movx	@dptr,a
                                    971 ;	ecen4330_lcd_v3.c:166: _height = TFTHEIGHT;
      000136 90r00r02         [24]  972 	mov	dptr,#__height
      000139 74 40            [12]  973 	mov	a,#0x40
      00013B F0               [24]  974 	movx	@dptr,a
      00013C 74 01            [12]  975 	mov	a,#0x01
      00013E A3               [24]  976 	inc	dptr
      00013F F0               [24]  977 	movx	@dptr,a
                                    978 ;	ecen4330_lcd_v3.c:167: break;
                                    979 ;	ecen4330_lcd_v3.c:168: case 3:
      000140 80 2C            [24]  980 	sjmp	00106$
      000142                        981 00104$:
                                    982 ;	ecen4330_lcd_v3.c:169: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000142 7F E8            [12]  983 	mov	r7,#0xe8
                                    984 ;	ecen4330_lcd_v3.c:170: _width = TFTHEIGHT;
      000144 90r00r00         [24]  985 	mov	dptr,#__width
      000147 74 40            [12]  986 	mov	a,#0x40
      000149 F0               [24]  987 	movx	@dptr,a
      00014A 74 01            [12]  988 	mov	a,#0x01
      00014C A3               [24]  989 	inc	dptr
      00014D F0               [24]  990 	movx	@dptr,a
                                    991 ;	ecen4330_lcd_v3.c:171: _height = TFTWIDTH;
      00014E 90r00r02         [24]  992 	mov	dptr,#__height
      000151 74 F0            [12]  993 	mov	a,#0xf0
      000153 F0               [24]  994 	movx	@dptr,a
      000154 E4               [12]  995 	clr	a
      000155 A3               [24]  996 	inc	dptr
      000156 F0               [24]  997 	movx	@dptr,a
                                    998 ;	ecen4330_lcd_v3.c:172: break;
                                    999 ;	ecen4330_lcd_v3.c:173: default:
      000157 80 15            [24] 1000 	sjmp	00106$
      000159                       1001 00105$:
                                   1002 ;	ecen4330_lcd_v3.c:174: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000159 7F 48            [12] 1003 	mov	r7,#0x48
                                   1004 ;	ecen4330_lcd_v3.c:175: _width = TFTWIDTH;
      00015B 90r00r00         [24] 1005 	mov	dptr,#__width
      00015E 74 F0            [12] 1006 	mov	a,#0xf0
      000160 F0               [24] 1007 	movx	@dptr,a
      000161 E4               [12] 1008 	clr	a
      000162 A3               [24] 1009 	inc	dptr
      000163 F0               [24] 1010 	movx	@dptr,a
                                   1011 ;	ecen4330_lcd_v3.c:176: _height = TFTHEIGHT;
      000164 90r00r02         [24] 1012 	mov	dptr,#__height
      000167 74 40            [12] 1013 	mov	a,#0x40
      000169 F0               [24] 1014 	movx	@dptr,a
      00016A 74 01            [12] 1015 	mov	a,#0x01
      00016C A3               [24] 1016 	inc	dptr
      00016D F0               [24] 1017 	movx	@dptr,a
                                   1018 ;	ecen4330_lcd_v3.c:178: }
      00016E                       1019 00106$:
                                   1020 ;	ecen4330_lcd_v3.c:179: writeRegister8(ILI9341_MEMCONTROL, flag);
      00016E 8F*00            [24] 1021 	mov	_writeRegister8_PARM_2,r7
      000170 75 82 36         [24] 1022 	mov	dpl,#0x36
                                   1023 ;	ecen4330_lcd_v3.c:180: }
      000173 02r00r51         [24] 1024 	ljmp	_writeRegister8
                                   1025 ;------------------------------------------------------------
                                   1026 ;Allocation info for local variables in function 'setAddress'
                                   1027 ;------------------------------------------------------------
                                   1028 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1029 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1030 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1031 ;x1                        Allocated to registers r6 r7 
                                   1032 ;------------------------------------------------------------
                                   1033 ;	ecen4330_lcd_v3.c:182: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                   1034 ;	-----------------------------------------
                                   1035 ;	 function setAddress
                                   1036 ;	-----------------------------------------
      000176                       1037 _setAddress:
      000176 AE 82            [24] 1038 	mov	r6,dpl
      000178 AF 83            [24] 1039 	mov	r7,dph
                                   1040 ;	ecen4330_lcd_v3.c:183: write8Reg(0x2A);
                                   1041 ;	assignBit
      00017A C2 B5            [12] 1042 	clr	_P3_5
                                   1043 ;	assignBit
      00017C D2 B4            [12] 1044 	setb	_P3_4
      00017E 85*02 82         [24] 1045 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1046 	mov	dph,(_lcd_address + 1)
      000184 74 2A            [12] 1047 	mov	a,#0x2a
      000186 F0               [24] 1048 	movx	@dptr,a
                                   1049 ;	assignBit
      000187 C2 B4            [12] 1050 	clr	_P3_4
                                   1051 ;	ecen4330_lcd_v3.c:184: write8Data(x1 >> 8);
                                   1052 ;	assignBit
      000189 D2 B5            [12] 1053 	setb	_P3_5
                                   1054 ;	assignBit
      00018B D2 B4            [12] 1055 	setb	_P3_4
      00018D 85*02 82         [24] 1056 	mov	dpl,_lcd_address
      000190 85*03 83         [24] 1057 	mov	dph,(_lcd_address + 1)
      000193 8F 05            [24] 1058 	mov	ar5,r7
      000195 ED               [12] 1059 	mov	a,r5
      000196 F0               [24] 1060 	movx	@dptr,a
                                   1061 ;	assignBit
      000197 C2 B4            [12] 1062 	clr	_P3_4
                                   1063 ;	ecen4330_lcd_v3.c:185: write8Data(x1);
                                   1064 ;	assignBit
      000199 D2 B5            [12] 1065 	setb	_P3_5
                                   1066 ;	assignBit
      00019B D2 B4            [12] 1067 	setb	_P3_4
      00019D 85*02 82         [24] 1068 	mov	dpl,_lcd_address
      0001A0 85*03 83         [24] 1069 	mov	dph,(_lcd_address + 1)
      0001A3 EE               [12] 1070 	mov	a,r6
      0001A4 F0               [24] 1071 	movx	@dptr,a
                                   1072 ;	assignBit
      0001A5 C2 B4            [12] 1073 	clr	_P3_4
                                   1074 ;	ecen4330_lcd_v3.c:186: write8Data(x2 >> 8);
                                   1075 ;	assignBit
      0001A7 D2 B5            [12] 1076 	setb	_P3_5
                                   1077 ;	assignBit
      0001A9 D2 B4            [12] 1078 	setb	_P3_4
      0001AB 85*02 82         [24] 1079 	mov	dpl,_lcd_address
      0001AE 85*03 83         [24] 1080 	mov	dph,(_lcd_address + 1)
      0001B1 E5*03            [12] 1081 	mov	a,(_setAddress_PARM_3 + 1)
      0001B3 F0               [24] 1082 	movx	@dptr,a
                                   1083 ;	assignBit
      0001B4 C2 B4            [12] 1084 	clr	_P3_4
                                   1085 ;	ecen4330_lcd_v3.c:187: write8Data(x2);
                                   1086 ;	assignBit
      0001B6 D2 B5            [12] 1087 	setb	_P3_5
                                   1088 ;	assignBit
      0001B8 D2 B4            [12] 1089 	setb	_P3_4
      0001BA 85*02 82         [24] 1090 	mov	dpl,_lcd_address
      0001BD 85*03 83         [24] 1091 	mov	dph,(_lcd_address + 1)
      0001C0 E5*02            [12] 1092 	mov	a,_setAddress_PARM_3
      0001C2 F0               [24] 1093 	movx	@dptr,a
                                   1094 ;	assignBit
      0001C3 C2 B4            [12] 1095 	clr	_P3_4
                                   1096 ;	ecen4330_lcd_v3.c:189: write8Reg(0x2B);
                                   1097 ;	assignBit
      0001C5 C2 B5            [12] 1098 	clr	_P3_5
                                   1099 ;	assignBit
      0001C7 D2 B4            [12] 1100 	setb	_P3_4
      0001C9 85*02 82         [24] 1101 	mov	dpl,_lcd_address
      0001CC 85*03 83         [24] 1102 	mov	dph,(_lcd_address + 1)
      0001CF 74 2B            [12] 1103 	mov	a,#0x2b
      0001D1 F0               [24] 1104 	movx	@dptr,a
                                   1105 ;	assignBit
      0001D2 C2 B4            [12] 1106 	clr	_P3_4
                                   1107 ;	ecen4330_lcd_v3.c:190: write8Data(y1 >> 8);
                                   1108 ;	assignBit
      0001D4 D2 B5            [12] 1109 	setb	_P3_5
                                   1110 ;	assignBit
      0001D6 D2 B4            [12] 1111 	setb	_P3_4
      0001D8 85*02 82         [24] 1112 	mov	dpl,_lcd_address
      0001DB 85*03 83         [24] 1113 	mov	dph,(_lcd_address + 1)
      0001DE E5*01            [12] 1114 	mov	a,(_setAddress_PARM_2 + 1)
      0001E0 F0               [24] 1115 	movx	@dptr,a
                                   1116 ;	assignBit
      0001E1 C2 B4            [12] 1117 	clr	_P3_4
                                   1118 ;	ecen4330_lcd_v3.c:191: write8Data(y1);
                                   1119 ;	assignBit
      0001E3 D2 B5            [12] 1120 	setb	_P3_5
                                   1121 ;	assignBit
      0001E5 D2 B4            [12] 1122 	setb	_P3_4
      0001E7 85*02 82         [24] 1123 	mov	dpl,_lcd_address
      0001EA 85*03 83         [24] 1124 	mov	dph,(_lcd_address + 1)
      0001ED E5*00            [12] 1125 	mov	a,_setAddress_PARM_2
      0001EF F0               [24] 1126 	movx	@dptr,a
                                   1127 ;	assignBit
      0001F0 C2 B4            [12] 1128 	clr	_P3_4
                                   1129 ;	ecen4330_lcd_v3.c:192: write8Data(y2 >> 8);
                                   1130 ;	assignBit
      0001F2 D2 B5            [12] 1131 	setb	_P3_5
                                   1132 ;	assignBit
      0001F4 D2 B4            [12] 1133 	setb	_P3_4
      0001F6 85*02 82         [24] 1134 	mov	dpl,_lcd_address
      0001F9 85*03 83         [24] 1135 	mov	dph,(_lcd_address + 1)
      0001FC E5*05            [12] 1136 	mov	a,(_setAddress_PARM_4 + 1)
      0001FE F0               [24] 1137 	movx	@dptr,a
                                   1138 ;	assignBit
      0001FF C2 B4            [12] 1139 	clr	_P3_4
                                   1140 ;	ecen4330_lcd_v3.c:193: write8Data(y2);
                                   1141 ;	assignBit
      000201 D2 B5            [12] 1142 	setb	_P3_5
                                   1143 ;	assignBit
      000203 D2 B4            [12] 1144 	setb	_P3_4
      000205 85*02 82         [24] 1145 	mov	dpl,_lcd_address
      000208 85*03 83         [24] 1146 	mov	dph,(_lcd_address + 1)
      00020B E5*04            [12] 1147 	mov	a,_setAddress_PARM_4
      00020D F0               [24] 1148 	movx	@dptr,a
                                   1149 ;	assignBit
      00020E C2 B4            [12] 1150 	clr	_P3_4
                                   1151 ;	ecen4330_lcd_v3.c:194: }
      000210 22               [24] 1152 	ret
                                   1153 ;------------------------------------------------------------
                                   1154 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1155 ;------------------------------------------------------------
                                   1156 ;	ecen4330_lcd_v3.c:200: void TFT_LCD_INIT (void) {
                                   1157 ;	-----------------------------------------
                                   1158 ;	 function TFT_LCD_INIT
                                   1159 ;	-----------------------------------------
      000211                       1160 _TFT_LCD_INIT:
                                   1161 ;	ecen4330_lcd_v3.c:201: _width = TFTWIDTH;
      000211 90r00r00         [24] 1162 	mov	dptr,#__width
      000214 74 F0            [12] 1163 	mov	a,#0xf0
      000216 F0               [24] 1164 	movx	@dptr,a
      000217 E4               [12] 1165 	clr	a
      000218 A3               [24] 1166 	inc	dptr
      000219 F0               [24] 1167 	movx	@dptr,a
                                   1168 ;	ecen4330_lcd_v3.c:202: _height = TFTHEIGHT;
      00021A 90r00r02         [24] 1169 	mov	dptr,#__height
      00021D 74 40            [12] 1170 	mov	a,#0x40
      00021F F0               [24] 1171 	movx	@dptr,a
      000220 74 01            [12] 1172 	mov	a,#0x01
      000222 A3               [24] 1173 	inc	dptr
      000223 F0               [24] 1174 	movx	@dptr,a
                                   1175 ;	ecen4330_lcd_v3.c:204: IOM = 0;
                                   1176 ;	assignBit
      000224 C2 B4            [12] 1177 	clr	_P3_4
                                   1178 ;	ecen4330_lcd_v3.c:205: CD = 1;
                                   1179 ;	assignBit
      000226 D2 B5            [12] 1180 	setb	_P3_5
                                   1181 ;	ecen4330_lcd_v3.c:207: write8Reg(0x00);
                                   1182 ;	assignBit
      000228 C2 B5            [12] 1183 	clr	_P3_5
                                   1184 ;	assignBit
      00022A D2 B4            [12] 1185 	setb	_P3_4
      00022C 85*02 82         [24] 1186 	mov	dpl,_lcd_address
      00022F 85*03 83         [24] 1187 	mov	dph,(_lcd_address + 1)
      000232 E4               [12] 1188 	clr	a
      000233 F0               [24] 1189 	movx	@dptr,a
                                   1190 ;	assignBit
      000234 C2 B4            [12] 1191 	clr	_P3_4
                                   1192 ;	ecen4330_lcd_v3.c:208: write8Data(0x00);
                                   1193 ;	assignBit
      000236 D2 B5            [12] 1194 	setb	_P3_5
                                   1195 ;	assignBit
      000238 D2 B4            [12] 1196 	setb	_P3_4
      00023A 85*02 82         [24] 1197 	mov	dpl,_lcd_address
      00023D 85*03 83         [24] 1198 	mov	dph,(_lcd_address + 1)
      000240 E4               [12] 1199 	clr	a
      000241 F0               [24] 1200 	movx	@dptr,a
                                   1201 ;	assignBit
      000242 C2 B4            [12] 1202 	clr	_P3_4
                                   1203 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1204 ;	assignBit
      000244 D2 B5            [12] 1205 	setb	_P3_5
                                   1206 ;	assignBit
      000246 D2 B4            [12] 1207 	setb	_P3_4
      000248 85*02 82         [24] 1208 	mov	dpl,_lcd_address
      00024B 85*03 83         [24] 1209 	mov	dph,(_lcd_address + 1)
      00024E E4               [12] 1210 	clr	a
      00024F F0               [24] 1211 	movx	@dptr,a
                                   1212 ;	assignBit
      000250 C2 B4            [12] 1213 	clr	_P3_4
                                   1214 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1215 ;	assignBit
      000252 D2 B5            [12] 1216 	setb	_P3_5
                                   1217 ;	assignBit
      000254 D2 B4            [12] 1218 	setb	_P3_4
      000256 85*02 82         [24] 1219 	mov	dpl,_lcd_address
      000259 85*03 83         [24] 1220 	mov	dph,(_lcd_address + 1)
      00025C E4               [12] 1221 	clr	a
      00025D F0               [24] 1222 	movx	@dptr,a
                                   1223 ;	assignBit
      00025E C2 B4            [12] 1224 	clr	_P3_4
                                   1225 ;	ecen4330_lcd_v3.c:211: delay(200);
      000260 90 00 C8         [24] 1226 	mov	dptr,#0x00c8
      000263 12r00r21         [24] 1227 	lcall	_delay
                                   1228 ;	ecen4330_lcd_v3.c:213: writeRegister8(ILI9341_SOFTRESET, 0);
      000266 75*00 00         [24] 1229 	mov	_writeRegister8_PARM_2,#0x00
      000269 75 82 01         [24] 1230 	mov	dpl,#0x01
      00026C 12r00r51         [24] 1231 	lcall	_writeRegister8
                                   1232 ;	ecen4330_lcd_v3.c:214: delay(50);
      00026F 90 00 32         [24] 1233 	mov	dptr,#0x0032
      000272 12r00r21         [24] 1234 	lcall	_delay
                                   1235 ;	ecen4330_lcd_v3.c:215: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000275 75*00 00         [24] 1236 	mov	_writeRegister8_PARM_2,#0x00
      000278 75 82 28         [24] 1237 	mov	dpl,#0x28
      00027B 12r00r51         [24] 1238 	lcall	_writeRegister8
                                   1239 ;	ecen4330_lcd_v3.c:216: delay(10);
      00027E 90 00 0A         [24] 1240 	mov	dptr,#0x000a
      000281 12r00r21         [24] 1241 	lcall	_delay
                                   1242 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000284 75*00 23         [24] 1243 	mov	_writeRegister8_PARM_2,#0x23
      000287 75 82 C0         [24] 1244 	mov	dpl,#0xc0
      00028A 12r00r51         [24] 1245 	lcall	_writeRegister8
                                   1246 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00028D 75*00 11         [24] 1247 	mov	_writeRegister8_PARM_2,#0x11
      000290 75 82 C1         [24] 1248 	mov	dpl,#0xc1
      000293 12r00r51         [24] 1249 	lcall	_writeRegister8
                                   1250 ;	ecen4330_lcd_v3.c:220: write8Reg(ILI9341_VCOMCONTROL1);
                                   1251 ;	assignBit
      000296 C2 B5            [12] 1252 	clr	_P3_5
                                   1253 ;	assignBit
      000298 D2 B4            [12] 1254 	setb	_P3_4
      00029A 85*02 82         [24] 1255 	mov	dpl,_lcd_address
      00029D 85*03 83         [24] 1256 	mov	dph,(_lcd_address + 1)
      0002A0 74 C5            [12] 1257 	mov	a,#0xc5
      0002A2 F0               [24] 1258 	movx	@dptr,a
                                   1259 ;	assignBit
      0002A3 C2 B4            [12] 1260 	clr	_P3_4
                                   1261 ;	ecen4330_lcd_v3.c:221: write8Data(0x3d);
                                   1262 ;	assignBit
      0002A5 D2 B5            [12] 1263 	setb	_P3_5
                                   1264 ;	assignBit
      0002A7 D2 B4            [12] 1265 	setb	_P3_4
      0002A9 85*02 82         [24] 1266 	mov	dpl,_lcd_address
      0002AC 85*03 83         [24] 1267 	mov	dph,(_lcd_address + 1)
      0002AF 74 3D            [12] 1268 	mov	a,#0x3d
      0002B1 F0               [24] 1269 	movx	@dptr,a
                                   1270 ;	assignBit
      0002B2 C2 B4            [12] 1271 	clr	_P3_4
                                   1272 ;	ecen4330_lcd_v3.c:222: write8Data(0x30);
                                   1273 ;	assignBit
      0002B4 D2 B5            [12] 1274 	setb	_P3_5
                                   1275 ;	assignBit
      0002B6 D2 B4            [12] 1276 	setb	_P3_4
      0002B8 85*02 82         [24] 1277 	mov	dpl,_lcd_address
      0002BB 85*03 83         [24] 1278 	mov	dph,(_lcd_address + 1)
      0002BE 74 30            [12] 1279 	mov	a,#0x30
      0002C0 F0               [24] 1280 	movx	@dptr,a
                                   1281 ;	assignBit
      0002C1 C2 B4            [12] 1282 	clr	_P3_4
                                   1283 ;	ecen4330_lcd_v3.c:223: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002C3 75*00 AA         [24] 1284 	mov	_writeRegister8_PARM_2,#0xaa
      0002C6 75 82 C7         [24] 1285 	mov	dpl,#0xc7
      0002C9 12r00r51         [24] 1286 	lcall	_writeRegister8
                                   1287 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002CC 75*00 88         [24] 1288 	mov	_writeRegister8_PARM_2,#0x88
      0002CF 75 82 36         [24] 1289 	mov	dpl,#0x36
      0002D2 12r00r51         [24] 1290 	lcall	_writeRegister8
                                   1291 ;	ecen4330_lcd_v3.c:225: write8Reg(ILI9341_PIXELFORMAT);
                                   1292 ;	assignBit
      0002D5 C2 B5            [12] 1293 	clr	_P3_5
                                   1294 ;	assignBit
      0002D7 D2 B4            [12] 1295 	setb	_P3_4
      0002D9 85*02 82         [24] 1296 	mov	dpl,_lcd_address
      0002DC 85*03 83         [24] 1297 	mov	dph,(_lcd_address + 1)
      0002DF 74 3A            [12] 1298 	mov	a,#0x3a
      0002E1 F0               [24] 1299 	movx	@dptr,a
                                   1300 ;	assignBit
      0002E2 C2 B4            [12] 1301 	clr	_P3_4
                                   1302 ;	ecen4330_lcd_v3.c:226: write8Data(0x55);
                                   1303 ;	assignBit
      0002E4 D2 B5            [12] 1304 	setb	_P3_5
                                   1305 ;	assignBit
      0002E6 D2 B4            [12] 1306 	setb	_P3_4
      0002E8 85*02 82         [24] 1307 	mov	dpl,_lcd_address
      0002EB 85*03 83         [24] 1308 	mov	dph,(_lcd_address + 1)
      0002EE 74 55            [12] 1309 	mov	a,#0x55
      0002F0 F0               [24] 1310 	movx	@dptr,a
                                   1311 ;	assignBit
      0002F1 C2 B4            [12] 1312 	clr	_P3_4
                                   1313 ;	ecen4330_lcd_v3.c:227: write8Data(0x00);
                                   1314 ;	assignBit
      0002F3 D2 B5            [12] 1315 	setb	_P3_5
                                   1316 ;	assignBit
      0002F5 D2 B4            [12] 1317 	setb	_P3_4
      0002F7 85*02 82         [24] 1318 	mov	dpl,_lcd_address
      0002FA 85*03 83         [24] 1319 	mov	dph,(_lcd_address + 1)
      0002FD E4               [12] 1320 	clr	a
      0002FE F0               [24] 1321 	movx	@dptr,a
                                   1322 ;	assignBit
      0002FF C2 B4            [12] 1323 	clr	_P3_4
                                   1324 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000301 75*00 1B         [24] 1325 	mov	_writeRegister16_PARM_2,#0x1b
      000304 75*01 00         [24] 1326 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000307 90 00 B1         [24] 1327 	mov	dptr,#0x00b1
      00030A 12r00r71         [24] 1328 	lcall	_writeRegister16
                                   1329 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00030D 75*00 07         [24] 1330 	mov	_writeRegister8_PARM_2,#0x07
      000310 75 82 B7         [24] 1331 	mov	dpl,#0xb7
      000313 12r00r51         [24] 1332 	lcall	_writeRegister8
                                   1333 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      000316 75*00 00         [24] 1334 	mov	_writeRegister8_PARM_2,#0x00
      000319 75 82 11         [24] 1335 	mov	dpl,#0x11
      00031C 12r00r51         [24] 1336 	lcall	_writeRegister8
                                   1337 ;	ecen4330_lcd_v3.c:233: delay(150);
      00031F 90 00 96         [24] 1338 	mov	dptr,#0x0096
      000322 12r00r21         [24] 1339 	lcall	_delay
                                   1340 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      000325 75*00 00         [24] 1341 	mov	_writeRegister8_PARM_2,#0x00
      000328 75 82 29         [24] 1342 	mov	dpl,#0x29
      00032B 12r00r51         [24] 1343 	lcall	_writeRegister8
                                   1344 ;	ecen4330_lcd_v3.c:235: delay(500);
      00032E 90 01 F4         [24] 1345 	mov	dptr,#0x01f4
      000331 12r00r21         [24] 1346 	lcall	_delay
                                   1347 ;	ecen4330_lcd_v3.c:236: setAddress(0, 0, _width-1, _height-1);
      000334 90r00r00         [24] 1348 	mov	dptr,#__width
      000337 E0               [24] 1349 	movx	a,@dptr
      000338 FE               [12] 1350 	mov	r6,a
      000339 A3               [24] 1351 	inc	dptr
      00033A E0               [24] 1352 	movx	a,@dptr
      00033B FF               [12] 1353 	mov	r7,a
      00033C 1E               [12] 1354 	dec	r6
      00033D BE FF 01         [24] 1355 	cjne	r6,#0xff,00103$
      000340 1F               [12] 1356 	dec	r7
      000341                       1357 00103$:
      000341 8E*02            [24] 1358 	mov	_setAddress_PARM_3,r6
      000343 8F*03            [24] 1359 	mov	(_setAddress_PARM_3 + 1),r7
      000345 90r00r02         [24] 1360 	mov	dptr,#__height
      000348 E0               [24] 1361 	movx	a,@dptr
      000349 FE               [12] 1362 	mov	r6,a
      00034A A3               [24] 1363 	inc	dptr
      00034B E0               [24] 1364 	movx	a,@dptr
      00034C FF               [12] 1365 	mov	r7,a
      00034D 1E               [12] 1366 	dec	r6
      00034E BE FF 01         [24] 1367 	cjne	r6,#0xff,00104$
      000351 1F               [12] 1368 	dec	r7
      000352                       1369 00104$:
      000352 8E*04            [24] 1370 	mov	_setAddress_PARM_4,r6
      000354 8F*05            [24] 1371 	mov	(_setAddress_PARM_4 + 1),r7
      000356 E4               [12] 1372 	clr	a
      000357 F5*00            [12] 1373 	mov	_setAddress_PARM_2,a
      000359 F5*01            [12] 1374 	mov	(_setAddress_PARM_2 + 1),a
      00035B 90 00 00         [24] 1375 	mov	dptr,#0x0000
                                   1376 ;	ecen4330_lcd_v3.c:237: }
      00035E 02r01r76         [24] 1377 	ljmp	_setAddress
                                   1378 ;------------------------------------------------------------
                                   1379 ;Allocation info for local variables in function 'drawPixel'
                                   1380 ;------------------------------------------------------------
                                   1381 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1382 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1383 ;x3                        Allocated to registers r6 r7 
                                   1384 ;------------------------------------------------------------
                                   1385 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1) {
                                   1386 ;	-----------------------------------------
                                   1387 ;	 function drawPixel
                                   1388 ;	-----------------------------------------
      000361                       1389 _drawPixel:
      000361 AE 82            [24] 1390 	mov	r6,dpl
      000363 AF 83            [24] 1391 	mov	r7,dph
                                   1392 ;	ecen4330_lcd_v3.c:247: setAddress(x3,y3,x3+1,y3+1);
      000365 8E 04            [24] 1393 	mov	ar4,r6
      000367 8F 05            [24] 1394 	mov	ar5,r7
      000369 0C               [12] 1395 	inc	r4
      00036A BC 00 01         [24] 1396 	cjne	r4,#0x00,00103$
      00036D 0D               [12] 1397 	inc	r5
      00036E                       1398 00103$:
      00036E 8C*02            [24] 1399 	mov	_setAddress_PARM_3,r4
      000370 8D*03            [24] 1400 	mov	(_setAddress_PARM_3 + 1),r5
      000372 AC*16            [24] 1401 	mov	r4,_drawPixel_PARM_2
      000374 AD*17            [24] 1402 	mov	r5,(_drawPixel_PARM_2 + 1)
      000376 0C               [12] 1403 	inc	r4
      000377 BC 00 01         [24] 1404 	cjne	r4,#0x00,00104$
      00037A 0D               [12] 1405 	inc	r5
      00037B                       1406 00104$:
      00037B 8C*04            [24] 1407 	mov	_setAddress_PARM_4,r4
      00037D 8D*05            [24] 1408 	mov	(_setAddress_PARM_4 + 1),r5
      00037F 85*16*00         [24] 1409 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000382 85*17*01         [24] 1410 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000385 8E 82            [24] 1411 	mov	dpl,r6
      000387 8F 83            [24] 1412 	mov	dph,r7
      000389 12r01r76         [24] 1413 	lcall	_setAddress
                                   1414 ;	ecen4330_lcd_v3.c:249: CD = 0;
                                   1415 ;	assignBit
      00038C C2 B5            [12] 1416 	clr	_P3_5
                                   1417 ;	ecen4330_lcd_v3.c:250: write8(0x2C);
                                   1418 ;	assignBit
      00038E D2 B4            [12] 1419 	setb	_P3_4
      000390 85*02 82         [24] 1420 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1421 	mov	dph,(_lcd_address + 1)
      000396 74 2C            [12] 1422 	mov	a,#0x2c
      000398 F0               [24] 1423 	movx	@dptr,a
                                   1424 ;	assignBit
      000399 C2 B4            [12] 1425 	clr	_P3_4
                                   1426 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1427 ;	assignBit
      00039B D2 B5            [12] 1428 	setb	_P3_5
                                   1429 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1430 ;	assignBit
      00039D D2 B4            [12] 1431 	setb	_P3_4
      00039F 85*02 82         [24] 1432 	mov	dpl,_lcd_address
      0003A2 85*03 83         [24] 1433 	mov	dph,(_lcd_address + 1)
      0003A5 E5*19            [12] 1434 	mov	a,(_drawPixel_PARM_3 + 1)
      0003A7 F0               [24] 1435 	movx	@dptr,a
                                   1436 ;	assignBit
      0003A8 C2 B4            [12] 1437 	clr	_P3_4
                                   1438 ;	assignBit
      0003AA D2 B4            [12] 1439 	setb	_P3_4
      0003AC 85*02 82         [24] 1440 	mov	dpl,_lcd_address
      0003AF 85*03 83         [24] 1441 	mov	dph,(_lcd_address + 1)
      0003B2 E5*18            [12] 1442 	mov	a,_drawPixel_PARM_3
      0003B4 F0               [24] 1443 	movx	@dptr,a
                                   1444 ;	assignBit
      0003B5 C2 B4            [12] 1445 	clr	_P3_4
                                   1446 ;	ecen4330_lcd_v3.c:254: }
      0003B7 22               [24] 1447 	ret
                                   1448 ;------------------------------------------------------------
                                   1449 ;Allocation info for local variables in function 'drawCircle'
                                   1450 ;------------------------------------------------------------
                                   1451 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1452 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1453 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1454 ;x0                        Allocated with name '_drawCircle_x0_65536_105'
                                   1455 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1456 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1457 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1458 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1459 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1460 ;f                         Allocated with name '_drawCircle_f_65536_106'
                                   1461 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_106'
                                   1462 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_106'
                                   1463 ;x                         Allocated with name '_drawCircle_x_65536_106'
                                   1464 ;y                         Allocated with name '_drawCircle_y_65536_106'
                                   1465 ;------------------------------------------------------------
                                   1466 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1467 ;	-----------------------------------------
                                   1468 ;	 function drawCircle
                                   1469 ;	-----------------------------------------
      0003B8                       1470 _drawCircle:
      0003B8 85 82*20         [24] 1471 	mov	_drawCircle_x0_65536_105,dpl
      0003BB 85 83*21         [24] 1472 	mov	(_drawCircle_x0_65536_105 + 1),dph
                                   1473 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003BE 74 01            [12] 1474 	mov	a,#0x01
      0003C0 C3               [12] 1475 	clr	c
      0003C1 95*1C            [12] 1476 	subb	a,_drawCircle_PARM_3
      0003C3 FC               [12] 1477 	mov	r4,a
      0003C4 E4               [12] 1478 	clr	a
      0003C5 95*1D            [12] 1479 	subb	a,(_drawCircle_PARM_3 + 1)
      0003C7 FD               [12] 1480 	mov	r5,a
      0003C8 90r00r04         [24] 1481 	mov	dptr,#_drawCircle_f_65536_106
      0003CB EC               [12] 1482 	mov	a,r4
      0003CC F0               [24] 1483 	movx	@dptr,a
      0003CD ED               [12] 1484 	mov	a,r5
      0003CE A3               [24] 1485 	inc	dptr
      0003CF F0               [24] 1486 	movx	@dptr,a
                                   1487 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003D0 85*1C*00         [24] 1488 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003D3 85*1D*01         [24] 1489 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003D6 90 FF FE         [24] 1490 	mov	dptr,#0xfffe
      0003D9 12r00r00         [24] 1491 	lcall	__mulint
      0003DC AC 82            [24] 1492 	mov	r4,dpl
      0003DE AD 83            [24] 1493 	mov	r5,dph
                                   1494 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      0003E0 AA*1C            [24] 1495 	mov	r2,_drawCircle_PARM_3
      0003E2 AB*1D            [24] 1496 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1497 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      0003E4 E5*1C            [12] 1498 	mov	a,_drawCircle_PARM_3
      0003E6 25*1A            [12] 1499 	add	a,_drawCircle_PARM_2
      0003E8 F5*16            [12] 1500 	mov	_drawPixel_PARM_2,a
      0003EA E5*1D            [12] 1501 	mov	a,(_drawCircle_PARM_3 + 1)
      0003EC 35*1B            [12] 1502 	addc	a,(_drawCircle_PARM_2 + 1)
      0003EE F5*17            [12] 1503 	mov	(_drawPixel_PARM_2 + 1),a
      0003F0 85*1E*18         [24] 1504 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F3 85*1F*19         [24] 1505 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F6 85*20 82         [24] 1506 	mov	dpl,_drawCircle_x0_65536_105
      0003F9 85*21 83         [24] 1507 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      0003FC C0 05            [24] 1508 	push	ar5
      0003FE C0 04            [24] 1509 	push	ar4
      000400 C0 03            [24] 1510 	push	ar3
      000402 C0 02            [24] 1511 	push	ar2
      000404 12r03r61         [24] 1512 	lcall	_drawPixel
                                   1513 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      000407 E5*1A            [12] 1514 	mov	a,_drawCircle_PARM_2
      000409 C3               [12] 1515 	clr	c
      00040A 95*1C            [12] 1516 	subb	a,_drawCircle_PARM_3
      00040C F5*16            [12] 1517 	mov	_drawPixel_PARM_2,a
      00040E E5*1B            [12] 1518 	mov	a,(_drawCircle_PARM_2 + 1)
      000410 95*1D            [12] 1519 	subb	a,(_drawCircle_PARM_3 + 1)
      000412 F5*17            [12] 1520 	mov	(_drawPixel_PARM_2 + 1),a
      000414 85*1E*18         [24] 1521 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000417 85*1F*19         [24] 1522 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041A 85*20 82         [24] 1523 	mov	dpl,_drawCircle_x0_65536_105
      00041D 85*21 83         [24] 1524 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      000420 12r03r61         [24] 1525 	lcall	_drawPixel
                                   1526 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000423 E5*1C            [12] 1527 	mov	a,_drawCircle_PARM_3
      000425 25*20            [12] 1528 	add	a,_drawCircle_x0_65536_105
      000427 F5 82            [12] 1529 	mov	dpl,a
      000429 E5*1D            [12] 1530 	mov	a,(_drawCircle_PARM_3 + 1)
      00042B 35*21            [12] 1531 	addc	a,(_drawCircle_x0_65536_105 + 1)
      00042D F5 83            [12] 1532 	mov	dph,a
      00042F 85*1A*16         [24] 1533 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000432 85*1B*17         [24] 1534 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000435 85*1E*18         [24] 1535 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000438 85*1F*19         [24] 1536 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043B 12r03r61         [24] 1537 	lcall	_drawPixel
                                   1538 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      00043E E5*20            [12] 1539 	mov	a,_drawCircle_x0_65536_105
      000440 C3               [12] 1540 	clr	c
      000441 95*1C            [12] 1541 	subb	a,_drawCircle_PARM_3
      000443 F5 82            [12] 1542 	mov	dpl,a
      000445 E5*21            [12] 1543 	mov	a,(_drawCircle_x0_65536_105 + 1)
      000447 95*1D            [12] 1544 	subb	a,(_drawCircle_PARM_3 + 1)
      000449 F5 83            [12] 1545 	mov	dph,a
      00044B 85*1A*16         [24] 1546 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00044E 85*1B*17         [24] 1547 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000451 85*1E*18         [24] 1548 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000454 85*1F*19         [24] 1549 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000457 12r03r61         [24] 1550 	lcall	_drawPixel
      00045A D0 02            [24] 1551 	pop	ar2
      00045C D0 03            [24] 1552 	pop	ar3
      00045E D0 04            [24] 1553 	pop	ar4
      000460 D0 05            [24] 1554 	pop	ar5
                                   1555 ;	ecen4330_lcd_v3.c:276: while (x < y) {
      000462 78 00            [12] 1556 	mov	r0,#0x00
      000464 79 00            [12] 1557 	mov	r1,#0x00
      000466 75*22 01         [24] 1558 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1559 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000469 89*23            [24] 1560 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      00046B                       1561 00103$:
      00046B C3               [12] 1562 	clr	c
      00046C E8               [12] 1563 	mov	a,r0
      00046D 9A               [12] 1564 	subb	a,r2
      00046E E9               [12] 1565 	mov	a,r1
      00046F 64 80            [12] 1566 	xrl	a,#0x80
      000471 8B F0            [24] 1567 	mov	b,r3
      000473 63 F0 80         [24] 1568 	xrl	b,#0x80
      000476 95 F0            [12] 1569 	subb	a,b
      000478 40 01            [24] 1570 	jc	00121$
      00047A 22               [24] 1571 	ret
      00047B                       1572 00121$:
                                   1573 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      00047B 90r00r04         [24] 1574 	mov	dptr,#_drawCircle_f_65536_106
      00047E E0               [24] 1575 	movx	a,@dptr
      00047F F5*24            [12] 1576 	mov	_drawCircle_sloc1_1_0,a
      000481 A3               [24] 1577 	inc	dptr
      000482 E0               [24] 1578 	movx	a,@dptr
      000483 F5*25            [12] 1579 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000485 20 E7 18         [24] 1580 	jb	acc.7,00102$
                                   1581 ;	ecen4330_lcd_v3.c:278: y--;
      000488 1A               [12] 1582 	dec	r2
      000489 BA FF 01         [24] 1583 	cjne	r2,#0xff,00123$
      00048C 1B               [12] 1584 	dec	r3
      00048D                       1585 00123$:
                                   1586 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      00048D 74 02            [12] 1587 	mov	a,#0x02
      00048F 2C               [12] 1588 	add	a,r4
      000490 FC               [12] 1589 	mov	r4,a
      000491 E4               [12] 1590 	clr	a
      000492 3D               [12] 1591 	addc	a,r5
      000493 FD               [12] 1592 	mov	r5,a
                                   1593 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      000494 90r00r04         [24] 1594 	mov	dptr,#_drawCircle_f_65536_106
      000497 EC               [12] 1595 	mov	a,r4
      000498 25*24            [12] 1596 	add	a,_drawCircle_sloc1_1_0
      00049A F0               [24] 1597 	movx	@dptr,a
      00049B ED               [12] 1598 	mov	a,r5
      00049C 35*25            [12] 1599 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00049E A3               [24] 1600 	inc	dptr
      00049F F0               [24] 1601 	movx	@dptr,a
      0004A0                       1602 00102$:
                                   1603 ;	ecen4330_lcd_v3.c:283: x++;
      0004A0 C0 04            [24] 1604 	push	ar4
      0004A2 C0 05            [24] 1605 	push	ar5
      0004A4 08               [12] 1606 	inc	r0
      0004A5 B8 00 01         [24] 1607 	cjne	r0,#0x00,00124$
      0004A8 09               [12] 1608 	inc	r1
      0004A9                       1609 00124$:
                                   1610 ;	ecen4330_lcd_v3.c:284: ddF_x += 2;
      0004A9 74 02            [12] 1611 	mov	a,#0x02
      0004AB 25*22            [12] 1612 	add	a,_drawCircle_sloc0_1_0
      0004AD F5*22            [12] 1613 	mov	_drawCircle_sloc0_1_0,a
      0004AF E4               [12] 1614 	clr	a
      0004B0 35*23            [12] 1615 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004B2 F5*23            [12] 1616 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1617 ;	ecen4330_lcd_v3.c:285: f += ddF_x;
      0004B4 90r00r04         [24] 1618 	mov	dptr,#_drawCircle_f_65536_106
      0004B7 E0               [24] 1619 	movx	a,@dptr
      0004B8 FE               [12] 1620 	mov	r6,a
      0004B9 A3               [24] 1621 	inc	dptr
      0004BA E0               [24] 1622 	movx	a,@dptr
      0004BB FF               [12] 1623 	mov	r7,a
      0004BC 90r00r04         [24] 1624 	mov	dptr,#_drawCircle_f_65536_106
      0004BF E5*22            [12] 1625 	mov	a,_drawCircle_sloc0_1_0
      0004C1 2E               [12] 1626 	add	a,r6
      0004C2 F0               [24] 1627 	movx	@dptr,a
      0004C3 E5*23            [12] 1628 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004C5 3F               [12] 1629 	addc	a,r7
      0004C6 A3               [24] 1630 	inc	dptr
      0004C7 F0               [24] 1631 	movx	@dptr,a
                                   1632 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 + x, y0 + y, color);
      0004C8 AE*20            [24] 1633 	mov	r6,_drawCircle_x0_65536_105
      0004CA AF*21            [24] 1634 	mov	r7,(_drawCircle_x0_65536_105 + 1)
      0004CC E8               [12] 1635 	mov	a,r0
      0004CD 2E               [12] 1636 	add	a,r6
      0004CE FC               [12] 1637 	mov	r4,a
      0004CF E9               [12] 1638 	mov	a,r1
      0004D0 3F               [12] 1639 	addc	a,r7
      0004D1 FD               [12] 1640 	mov	r5,a
      0004D2 8C*24            [24] 1641 	mov	_drawCircle_sloc1_1_0,r4
      0004D4 8D*25            [24] 1642 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004D6 85*1A*26         [24] 1643 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004D9 85*1B*27         [24] 1644 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      0004DC EA               [12] 1645 	mov	a,r2
      0004DD 25*26            [12] 1646 	add	a,_drawCircle_sloc2_1_0
      0004DF FC               [12] 1647 	mov	r4,a
      0004E0 EB               [12] 1648 	mov	a,r3
      0004E1 35*27            [12] 1649 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004E3 FD               [12] 1650 	mov	r5,a
      0004E4 8C*28            [24] 1651 	mov	_drawCircle_sloc3_1_0,r4
      0004E6 8D*29            [24] 1652 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004E8 85*28*16         [24] 1653 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004EB 85*29*17         [24] 1654 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EE 85*1E*18         [24] 1655 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004F1 85*1F*19         [24] 1656 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F4 85*24 82         [24] 1657 	mov	dpl,_drawCircle_sloc1_1_0
      0004F7 85*25 83         [24] 1658 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004FA C0 07            [24] 1659 	push	ar7
      0004FC C0 06            [24] 1660 	push	ar6
      0004FE C0 05            [24] 1661 	push	ar5
      000500 C0 04            [24] 1662 	push	ar4
      000502 C0 03            [24] 1663 	push	ar3
      000504 C0 02            [24] 1664 	push	ar2
      000506 C0 01            [24] 1665 	push	ar1
      000508 C0 00            [24] 1666 	push	ar0
      00050A 12r03r61         [24] 1667 	lcall	_drawPixel
      00050D D0 00            [24] 1668 	pop	ar0
      00050F D0 01            [24] 1669 	pop	ar1
      000511 D0 02            [24] 1670 	pop	ar2
      000513 D0 03            [24] 1671 	pop	ar3
      000515 D0 04            [24] 1672 	pop	ar4
      000517 D0 05            [24] 1673 	pop	ar5
      000519 D0 06            [24] 1674 	pop	ar6
      00051B D0 07            [24] 1675 	pop	ar7
                                   1676 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 - x, y0 + y, color);
      00051D EE               [12] 1677 	mov	a,r6
      00051E C3               [12] 1678 	clr	c
      00051F 98               [12] 1679 	subb	a,r0
      000520 FC               [12] 1680 	mov	r4,a
      000521 EF               [12] 1681 	mov	a,r7
      000522 99               [12] 1682 	subb	a,r1
      000523 FD               [12] 1683 	mov	r5,a
      000524 8C*2A            [24] 1684 	mov	_drawCircle_sloc4_1_0,r4
      000526 8D*2B            [24] 1685 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000528 85*28*16         [24] 1686 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      00052B 85*29*17         [24] 1687 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      00052E 85*1E*18         [24] 1688 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000531 85*1F*19         [24] 1689 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000534 85*2A 82         [24] 1690 	mov	dpl,_drawCircle_sloc4_1_0
      000537 85*2B 83         [24] 1691 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00053A C0 07            [24] 1692 	push	ar7
      00053C C0 06            [24] 1693 	push	ar6
      00053E C0 05            [24] 1694 	push	ar5
      000540 C0 04            [24] 1695 	push	ar4
      000542 C0 03            [24] 1696 	push	ar3
      000544 C0 02            [24] 1697 	push	ar2
      000546 C0 01            [24] 1698 	push	ar1
      000548 C0 00            [24] 1699 	push	ar0
      00054A 12r03r61         [24] 1700 	lcall	_drawPixel
      00054D D0 00            [24] 1701 	pop	ar0
      00054F D0 01            [24] 1702 	pop	ar1
      000551 D0 02            [24] 1703 	pop	ar2
      000553 D0 03            [24] 1704 	pop	ar3
      000555 D0 04            [24] 1705 	pop	ar4
      000557 D0 05            [24] 1706 	pop	ar5
                                   1707 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 + x, y0 - y, color);
      000559 E5*26            [12] 1708 	mov	a,_drawCircle_sloc2_1_0
      00055B C3               [12] 1709 	clr	c
      00055C 9A               [12] 1710 	subb	a,r2
      00055D FC               [12] 1711 	mov	r4,a
      00055E E5*27            [12] 1712 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000560 9B               [12] 1713 	subb	a,r3
      000561 FD               [12] 1714 	mov	r5,a
      000562 8C*16            [24] 1715 	mov	_drawPixel_PARM_2,r4
      000564 8D*17            [24] 1716 	mov	(_drawPixel_PARM_2 + 1),r5
      000566 85*1E*18         [24] 1717 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000569 85*1F*19         [24] 1718 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00056C 85*24 82         [24] 1719 	mov	dpl,_drawCircle_sloc1_1_0
      00056F 85*25 83         [24] 1720 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000572 C0 05            [24] 1721 	push	ar5
      000574 C0 04            [24] 1722 	push	ar4
      000576 C0 03            [24] 1723 	push	ar3
      000578 C0 02            [24] 1724 	push	ar2
      00057A C0 01            [24] 1725 	push	ar1
      00057C C0 00            [24] 1726 	push	ar0
      00057E 12r03r61         [24] 1727 	lcall	_drawPixel
      000581 D0 00            [24] 1728 	pop	ar0
      000583 D0 01            [24] 1729 	pop	ar1
      000585 D0 02            [24] 1730 	pop	ar2
      000587 D0 03            [24] 1731 	pop	ar3
      000589 D0 04            [24] 1732 	pop	ar4
      00058B D0 05            [24] 1733 	pop	ar5
                                   1734 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 - x, y0 - y, color);
      00058D 8C*16            [24] 1735 	mov	_drawPixel_PARM_2,r4
      00058F 8D*17            [24] 1736 	mov	(_drawPixel_PARM_2 + 1),r5
      000591 85*1E*18         [24] 1737 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000594 85*1F*19         [24] 1738 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000597 85*2A 82         [24] 1739 	mov	dpl,_drawCircle_sloc4_1_0
      00059A 85*2B 83         [24] 1740 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059D C0 05            [24] 1741 	push	ar5
      00059F C0 04            [24] 1742 	push	ar4
      0005A1 C0 03            [24] 1743 	push	ar3
      0005A3 C0 02            [24] 1744 	push	ar2
      0005A5 C0 01            [24] 1745 	push	ar1
      0005A7 C0 00            [24] 1746 	push	ar0
      0005A9 12r03r61         [24] 1747 	lcall	_drawPixel
      0005AC D0 00            [24] 1748 	pop	ar0
      0005AE D0 01            [24] 1749 	pop	ar1
      0005B0 D0 02            [24] 1750 	pop	ar2
      0005B2 D0 03            [24] 1751 	pop	ar3
      0005B4 D0 04            [24] 1752 	pop	ar4
      0005B6 D0 05            [24] 1753 	pop	ar5
      0005B8 D0 06            [24] 1754 	pop	ar6
      0005BA D0 07            [24] 1755 	pop	ar7
                                   1756 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 + y, y0 + x, color);
      0005BC EA               [12] 1757 	mov	a,r2
      0005BD 2E               [12] 1758 	add	a,r6
      0005BE FC               [12] 1759 	mov	r4,a
      0005BF EB               [12] 1760 	mov	a,r3
      0005C0 3F               [12] 1761 	addc	a,r7
      0005C1 FD               [12] 1762 	mov	r5,a
      0005C2 8C*2A            [24] 1763 	mov	_drawCircle_sloc4_1_0,r4
      0005C4 8D*2B            [24] 1764 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005C6 E8               [12] 1765 	mov	a,r0
      0005C7 25*26            [12] 1766 	add	a,_drawCircle_sloc2_1_0
      0005C9 FC               [12] 1767 	mov	r4,a
      0005CA E9               [12] 1768 	mov	a,r1
      0005CB 35*27            [12] 1769 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005CD FD               [12] 1770 	mov	r5,a
      0005CE 8C*16            [24] 1771 	mov	_drawPixel_PARM_2,r4
      0005D0 8D*17            [24] 1772 	mov	(_drawPixel_PARM_2 + 1),r5
      0005D2 85*1E*18         [24] 1773 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005D5 85*1F*19         [24] 1774 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005D8 85*2A 82         [24] 1775 	mov	dpl,_drawCircle_sloc4_1_0
      0005DB 85*2B 83         [24] 1776 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005DE C0 07            [24] 1777 	push	ar7
      0005E0 C0 06            [24] 1778 	push	ar6
      0005E2 C0 05            [24] 1779 	push	ar5
      0005E4 C0 04            [24] 1780 	push	ar4
      0005E6 C0 03            [24] 1781 	push	ar3
      0005E8 C0 02            [24] 1782 	push	ar2
      0005EA C0 01            [24] 1783 	push	ar1
      0005EC C0 00            [24] 1784 	push	ar0
      0005EE 12r03r61         [24] 1785 	lcall	_drawPixel
      0005F1 D0 00            [24] 1786 	pop	ar0
      0005F3 D0 01            [24] 1787 	pop	ar1
      0005F5 D0 02            [24] 1788 	pop	ar2
      0005F7 D0 03            [24] 1789 	pop	ar3
      0005F9 D0 04            [24] 1790 	pop	ar4
      0005FB D0 05            [24] 1791 	pop	ar5
      0005FD D0 06            [24] 1792 	pop	ar6
      0005FF D0 07            [24] 1793 	pop	ar7
                                   1794 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 - y, y0 + x, color);
      000601 EE               [12] 1795 	mov	a,r6
      000602 C3               [12] 1796 	clr	c
      000603 9A               [12] 1797 	subb	a,r2
      000604 FE               [12] 1798 	mov	r6,a
      000605 EF               [12] 1799 	mov	a,r7
      000606 9B               [12] 1800 	subb	a,r3
      000607 FF               [12] 1801 	mov	r7,a
      000608 8C*16            [24] 1802 	mov	_drawPixel_PARM_2,r4
      00060A 8D*17            [24] 1803 	mov	(_drawPixel_PARM_2 + 1),r5
      00060C 85*1E*18         [24] 1804 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00060F 85*1F*19         [24] 1805 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000612 8E 82            [24] 1806 	mov	dpl,r6
      000614 8F 83            [24] 1807 	mov	dph,r7
      000616 C0 07            [24] 1808 	push	ar7
      000618 C0 06            [24] 1809 	push	ar6
      00061A C0 05            [24] 1810 	push	ar5
      00061C C0 04            [24] 1811 	push	ar4
      00061E C0 03            [24] 1812 	push	ar3
      000620 C0 02            [24] 1813 	push	ar2
      000622 C0 01            [24] 1814 	push	ar1
      000624 C0 00            [24] 1815 	push	ar0
      000626 12r03r61         [24] 1816 	lcall	_drawPixel
      000629 D0 00            [24] 1817 	pop	ar0
      00062B D0 01            [24] 1818 	pop	ar1
      00062D D0 02            [24] 1819 	pop	ar2
      00062F D0 03            [24] 1820 	pop	ar3
      000631 D0 04            [24] 1821 	pop	ar4
      000633 D0 05            [24] 1822 	pop	ar5
                                   1823 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 + y, y0 - x, color);
      000635 E5*26            [12] 1824 	mov	a,_drawCircle_sloc2_1_0
      000637 C3               [12] 1825 	clr	c
      000638 98               [12] 1826 	subb	a,r0
      000639 FC               [12] 1827 	mov	r4,a
      00063A E5*27            [12] 1828 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00063C 99               [12] 1829 	subb	a,r1
      00063D FD               [12] 1830 	mov	r5,a
      00063E 8C*16            [24] 1831 	mov	_drawPixel_PARM_2,r4
      000640 8D*17            [24] 1832 	mov	(_drawPixel_PARM_2 + 1),r5
      000642 85*1E*18         [24] 1833 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000645 85*1F*19         [24] 1834 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000648 85*2A 82         [24] 1835 	mov	dpl,_drawCircle_sloc4_1_0
      00064B 85*2B 83         [24] 1836 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00064E C0 05            [24] 1837 	push	ar5
      000650 C0 04            [24] 1838 	push	ar4
      000652 C0 03            [24] 1839 	push	ar3
      000654 C0 02            [24] 1840 	push	ar2
      000656 C0 01            [24] 1841 	push	ar1
      000658 C0 00            [24] 1842 	push	ar0
      00065A 12r03r61         [24] 1843 	lcall	_drawPixel
      00065D D0 00            [24] 1844 	pop	ar0
      00065F D0 01            [24] 1845 	pop	ar1
      000661 D0 02            [24] 1846 	pop	ar2
      000663 D0 03            [24] 1847 	pop	ar3
      000665 D0 04            [24] 1848 	pop	ar4
      000667 D0 05            [24] 1849 	pop	ar5
      000669 D0 06            [24] 1850 	pop	ar6
      00066B D0 07            [24] 1851 	pop	ar7
                                   1852 ;	ecen4330_lcd_v3.c:294: drawPixel(x0 - y, y0 - x, color);
      00066D 8C*16            [24] 1853 	mov	_drawPixel_PARM_2,r4
      00066F 8D*17            [24] 1854 	mov	(_drawPixel_PARM_2 + 1),r5
      000671 85*1E*18         [24] 1855 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000674 85*1F*19         [24] 1856 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000677 8E 82            [24] 1857 	mov	dpl,r6
      000679 8F 83            [24] 1858 	mov	dph,r7
      00067B C0 05            [24] 1859 	push	ar5
      00067D C0 04            [24] 1860 	push	ar4
      00067F C0 03            [24] 1861 	push	ar3
      000681 C0 02            [24] 1862 	push	ar2
      000683 C0 01            [24] 1863 	push	ar1
      000685 C0 00            [24] 1864 	push	ar0
      000687 12r03r61         [24] 1865 	lcall	_drawPixel
      00068A D0 00            [24] 1866 	pop	ar0
      00068C D0 01            [24] 1867 	pop	ar1
      00068E D0 02            [24] 1868 	pop	ar2
      000690 D0 03            [24] 1869 	pop	ar3
      000692 D0 04            [24] 1870 	pop	ar4
      000694 D0 05            [24] 1871 	pop	ar5
      000696 D0 05            [24] 1872 	pop	ar5
      000698 D0 04            [24] 1873 	pop	ar4
                                   1874 ;	ecen4330_lcd_v3.c:296: }
      00069A 02r04r6B         [24] 1875 	ljmp	00103$
                                   1876 ;------------------------------------------------------------
                                   1877 ;Allocation info for local variables in function 'testCircles'
                                   1878 ;------------------------------------------------------------
                                   1879 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1880 ;radius                    Allocated with name '_testCircles_radius_65536_109'
                                   1881 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1882 ;x                         Allocated with name '_testCircles_x_65536_110'
                                   1883 ;y                         Allocated with name '_testCircles_y_65536_110'
                                   1884 ;r2                        Allocated with name '_testCircles_r2_65536_110'
                                   1885 ;w                         Allocated with name '_testCircles_w_65536_110'
                                   1886 ;h                         Allocated with name '_testCircles_h_65536_110'
                                   1887 ;------------------------------------------------------------
                                   1888 ;	ecen4330_lcd_v3.c:304: void testCircles (uint8_t radius, uint16_t color) {
                                   1889 ;	-----------------------------------------
                                   1890 ;	 function testCircles
                                   1891 ;	-----------------------------------------
      00069D                       1892 _testCircles:
      00069D 85 82*2E         [24] 1893 	mov	_testCircles_radius_65536_109,dpl
                                   1894 ;	ecen4330_lcd_v3.c:305: __xdata int x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006A0 AD*2E            [24] 1895 	mov	r5,_testCircles_radius_65536_109
      0006A2 7E 00            [12] 1896 	mov	r6,#0x00
      0006A4 ED               [12] 1897 	mov	a,r5
      0006A5 2D               [12] 1898 	add	a,r5
      0006A6 FB               [12] 1899 	mov	r3,a
      0006A7 EE               [12] 1900 	mov	a,r6
      0006A8 33               [12] 1901 	rlc	a
      0006A9 FC               [12] 1902 	mov	r4,a
      0006AA 90r00r00         [24] 1903 	mov	dptr,#__width
      0006AD E0               [24] 1904 	movx	a,@dptr
      0006AE F9               [12] 1905 	mov	r1,a
      0006AF A3               [24] 1906 	inc	dptr
      0006B0 E0               [24] 1907 	movx	a,@dptr
      0006B1 FA               [12] 1908 	mov	r2,a
      0006B2 ED               [12] 1909 	mov	a,r5
      0006B3 29               [12] 1910 	add	a,r1
      0006B4 F9               [12] 1911 	mov	r1,a
      0006B5 EE               [12] 1912 	mov	a,r6
      0006B6 3A               [12] 1913 	addc	a,r2
      0006B7 FA               [12] 1914 	mov	r2,a
      0006B8 90r00r02         [24] 1915 	mov	dptr,#__height
      0006BB E0               [24] 1916 	movx	a,@dptr
      0006BC FF               [12] 1917 	mov	r7,a
      0006BD A3               [24] 1918 	inc	dptr
      0006BE E0               [24] 1919 	movx	a,@dptr
      0006BF F8               [12] 1920 	mov	r0,a
      0006C0 ED               [12] 1921 	mov	a,r5
      0006C1 2F               [12] 1922 	add	a,r7
      0006C2 FF               [12] 1923 	mov	r7,a
      0006C3 EE               [12] 1924 	mov	a,r6
      0006C4 38               [12] 1925 	addc	a,r0
      0006C5 FE               [12] 1926 	mov	r6,a
                                   1927 ;	ecen4330_lcd_v3.c:307: for (x = 0; x < w; x += r2) {
      0006C6 90r00r06         [24] 1928 	mov	dptr,#_testCircles_x_65536_110
      0006C9 E4               [12] 1929 	clr	a
      0006CA F0               [24] 1930 	movx	@dptr,a
      0006CB A3               [24] 1931 	inc	dptr
      0006CC F0               [24] 1932 	movx	@dptr,a
      0006CD                       1933 00107$:
      0006CD 90r00r06         [24] 1934 	mov	dptr,#_testCircles_x_65536_110
      0006D0 E0               [24] 1935 	movx	a,@dptr
      0006D1 F8               [12] 1936 	mov	r0,a
      0006D2 A3               [24] 1937 	inc	dptr
      0006D3 E0               [24] 1938 	movx	a,@dptr
      0006D4 FD               [12] 1939 	mov	r5,a
      0006D5 C3               [12] 1940 	clr	c
      0006D6 E8               [12] 1941 	mov	a,r0
      0006D7 99               [12] 1942 	subb	a,r1
      0006D8 ED               [12] 1943 	mov	a,r5
      0006D9 64 80            [12] 1944 	xrl	a,#0x80
      0006DB 8A F0            [24] 1945 	mov	b,r2
      0006DD 63 F0 80         [24] 1946 	xrl	b,#0x80
      0006E0 95 F0            [12] 1947 	subb	a,b
      0006E2 40 01            [24] 1948 	jc	00127$
      0006E4 22               [24] 1949 	ret
      0006E5                       1950 00127$:
                                   1951 ;	ecen4330_lcd_v3.c:308: for (y = 0; y < h; y += r2) {
      0006E5 90r00r08         [24] 1952 	mov	dptr,#_testCircles_y_65536_110
      0006E8 E4               [12] 1953 	clr	a
      0006E9 F0               [24] 1954 	movx	@dptr,a
      0006EA A3               [24] 1955 	inc	dptr
      0006EB F0               [24] 1956 	movx	@dptr,a
      0006EC                       1957 00104$:
      0006EC 90r00r08         [24] 1958 	mov	dptr,#_testCircles_y_65536_110
      0006EF E0               [24] 1959 	movx	a,@dptr
      0006F0 F5*2F            [12] 1960 	mov	_testCircles_sloc0_1_0,a
      0006F2 A3               [24] 1961 	inc	dptr
      0006F3 E0               [24] 1962 	movx	a,@dptr
      0006F4 F5*30            [12] 1963 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006F6 C3               [12] 1964 	clr	c
      0006F7 E5*2F            [12] 1965 	mov	a,_testCircles_sloc0_1_0
      0006F9 9F               [12] 1966 	subb	a,r7
      0006FA E5*30            [12] 1967 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006FC 64 80            [12] 1968 	xrl	a,#0x80
      0006FE 8E F0            [24] 1969 	mov	b,r6
      000700 63 F0 80         [24] 1970 	xrl	b,#0x80
      000703 95 F0            [12] 1971 	subb	a,b
      000705 50 47            [24] 1972 	jnc	00108$
                                   1973 ;	ecen4330_lcd_v3.c:309: drawCircle(x, y, radius, color);
      000707 88 82            [24] 1974 	mov	dpl,r0
      000709 8D 83            [24] 1975 	mov	dph,r5
      00070B 85*2F*1A         [24] 1976 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      00070E 85*30*1B         [24] 1977 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000711 85*2E*1C         [24] 1978 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_109
      000714 75*1D 00         [24] 1979 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000717 85*2C*1E         [24] 1980 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00071A 85*2D*1F         [24] 1981 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      00071D C0 07            [24] 1982 	push	ar7
      00071F C0 06            [24] 1983 	push	ar6
      000721 C0 05            [24] 1984 	push	ar5
      000723 C0 04            [24] 1985 	push	ar4
      000725 C0 03            [24] 1986 	push	ar3
      000727 C0 02            [24] 1987 	push	ar2
      000729 C0 01            [24] 1988 	push	ar1
      00072B C0 00            [24] 1989 	push	ar0
      00072D 12r03rB8         [24] 1990 	lcall	_drawCircle
      000730 D0 00            [24] 1991 	pop	ar0
      000732 D0 01            [24] 1992 	pop	ar1
      000734 D0 02            [24] 1993 	pop	ar2
      000736 D0 03            [24] 1994 	pop	ar3
      000738 D0 04            [24] 1995 	pop	ar4
      00073A D0 05            [24] 1996 	pop	ar5
      00073C D0 06            [24] 1997 	pop	ar6
      00073E D0 07            [24] 1998 	pop	ar7
                                   1999 ;	ecen4330_lcd_v3.c:308: for (y = 0; y < h; y += r2) {
      000740 90r00r08         [24] 2000 	mov	dptr,#_testCircles_y_65536_110
      000743 EB               [12] 2001 	mov	a,r3
      000744 25*2F            [12] 2002 	add	a,_testCircles_sloc0_1_0
      000746 F0               [24] 2003 	movx	@dptr,a
      000747 EC               [12] 2004 	mov	a,r4
      000748 35*30            [12] 2005 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00074A A3               [24] 2006 	inc	dptr
      00074B F0               [24] 2007 	movx	@dptr,a
      00074C 80 9E            [24] 2008 	sjmp	00104$
      00074E                       2009 00108$:
                                   2010 ;	ecen4330_lcd_v3.c:307: for (x = 0; x < w; x += r2) {
      00074E 90r00r06         [24] 2011 	mov	dptr,#_testCircles_x_65536_110
      000751 E0               [24] 2012 	movx	a,@dptr
      000752 F8               [12] 2013 	mov	r0,a
      000753 A3               [24] 2014 	inc	dptr
      000754 E0               [24] 2015 	movx	a,@dptr
      000755 FD               [12] 2016 	mov	r5,a
      000756 90r00r06         [24] 2017 	mov	dptr,#_testCircles_x_65536_110
      000759 EB               [12] 2018 	mov	a,r3
      00075A 28               [12] 2019 	add	a,r0
      00075B F0               [24] 2020 	movx	@dptr,a
      00075C EC               [12] 2021 	mov	a,r4
      00075D 3D               [12] 2022 	addc	a,r5
      00075E A3               [24] 2023 	inc	dptr
      00075F F0               [24] 2024 	movx	@dptr,a
                                   2025 ;	ecen4330_lcd_v3.c:312: }
      000760 02r06rCD         [24] 2026 	ljmp	00107$
                                   2027 ;------------------------------------------------------------
                                   2028 ;Allocation info for local variables in function 'fillRect'
                                   2029 ;------------------------------------------------------------
                                   2030 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2031 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2032 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2033 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2034 ;x                         Allocated to registers 
                                   2035 ;------------------------------------------------------------
                                   2036 ;	ecen4330_lcd_v3.c:314: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2037 ;	-----------------------------------------
                                   2038 ;	 function fillRect
                                   2039 ;	-----------------------------------------
      000763                       2040 _fillRect:
      000763 AE 82            [24] 2041 	mov	r6,dpl
      000765 AF 83            [24] 2042 	mov	r7,dph
                                   2043 ;	ecen4330_lcd_v3.c:315: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT)) {
      000767 8E 04            [24] 2044 	mov	ar4,r6
      000769 8F 05            [24] 2045 	mov	ar5,r7
      00076B C3               [12] 2046 	clr	c
      00076C EC               [12] 2047 	mov	a,r4
      00076D 94 F0            [12] 2048 	subb	a,#0xf0
      00076F ED               [12] 2049 	mov	a,r5
      000770 94 00            [12] 2050 	subb	a,#0x00
      000772 50 0D            [24] 2051 	jnc	00101$
      000774 AC*31            [24] 2052 	mov	r4,_fillRect_PARM_2
      000776 AD*32            [24] 2053 	mov	r5,(_fillRect_PARM_2 + 1)
      000778 C3               [12] 2054 	clr	c
      000779 EC               [12] 2055 	mov	a,r4
      00077A 94 40            [12] 2056 	subb	a,#0x40
      00077C ED               [12] 2057 	mov	a,r5
      00077D 94 01            [12] 2058 	subb	a,#0x01
      00077F 40 01            [24] 2059 	jc	00102$
      000781                       2060 00101$:
                                   2061 ;	ecen4330_lcd_v3.c:316: return;
      000781 22               [24] 2062 	ret
      000782                       2063 00102$:
                                   2064 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH) {
      000782 E5*33            [12] 2065 	mov	a,_fillRect_PARM_3
      000784 2E               [12] 2066 	add	a,r6
      000785 FC               [12] 2067 	mov	r4,a
      000786 E5*34            [12] 2068 	mov	a,(_fillRect_PARM_3 + 1)
      000788 3F               [12] 2069 	addc	a,r7
      000789 FD               [12] 2070 	mov	r5,a
      00078A 1C               [12] 2071 	dec	r4
      00078B BC FF 01         [24] 2072 	cjne	r4,#0xff,00161$
      00078E 1D               [12] 2073 	dec	r5
      00078F                       2074 00161$:
      00078F C3               [12] 2075 	clr	c
      000790 EC               [12] 2076 	mov	a,r4
      000791 94 F0            [12] 2077 	subb	a,#0xf0
      000793 ED               [12] 2078 	mov	a,r5
      000794 94 00            [12] 2079 	subb	a,#0x00
      000796 40 0A            [24] 2080 	jc	00105$
                                   2081 ;	ecen4330_lcd_v3.c:320: w = TFTWIDTH-x;
      000798 74 F0            [12] 2082 	mov	a,#0xf0
      00079A C3               [12] 2083 	clr	c
      00079B 9E               [12] 2084 	subb	a,r6
      00079C F5*33            [12] 2085 	mov	_fillRect_PARM_3,a
      00079E E4               [12] 2086 	clr	a
      00079F 9F               [12] 2087 	subb	a,r7
      0007A0 F5*34            [12] 2088 	mov	(_fillRect_PARM_3 + 1),a
      0007A2                       2089 00105$:
                                   2090 ;	ecen4330_lcd_v3.c:323: if ((y+h-1) >= TFTHEIGHT) {
      0007A2 E5*35            [12] 2091 	mov	a,_fillRect_PARM_4
      0007A4 25*31            [12] 2092 	add	a,_fillRect_PARM_2
      0007A6 FC               [12] 2093 	mov	r4,a
      0007A7 E5*36            [12] 2094 	mov	a,(_fillRect_PARM_4 + 1)
      0007A9 35*32            [12] 2095 	addc	a,(_fillRect_PARM_2 + 1)
      0007AB FD               [12] 2096 	mov	r5,a
      0007AC 1C               [12] 2097 	dec	r4
      0007AD BC FF 01         [24] 2098 	cjne	r4,#0xff,00163$
      0007B0 1D               [12] 2099 	dec	r5
      0007B1                       2100 00163$:
      0007B1 C3               [12] 2101 	clr	c
      0007B2 EC               [12] 2102 	mov	a,r4
      0007B3 94 40            [12] 2103 	subb	a,#0x40
      0007B5 ED               [12] 2104 	mov	a,r5
      0007B6 94 01            [12] 2105 	subb	a,#0x01
      0007B8 40 0D            [24] 2106 	jc	00107$
                                   2107 ;	ecen4330_lcd_v3.c:324: h = TFTHEIGHT-y;
      0007BA 74 40            [12] 2108 	mov	a,#0x40
      0007BC C3               [12] 2109 	clr	c
      0007BD 95*31            [12] 2110 	subb	a,_fillRect_PARM_2
      0007BF F5*35            [12] 2111 	mov	_fillRect_PARM_4,a
      0007C1 74 01            [12] 2112 	mov	a,#0x01
      0007C3 95*32            [12] 2113 	subb	a,(_fillRect_PARM_2 + 1)
      0007C5 F5*36            [12] 2114 	mov	(_fillRect_PARM_4 + 1),a
      0007C7                       2115 00107$:
                                   2116 ;	ecen4330_lcd_v3.c:327: setAddress(x, y, x + w - 1, y + h - 1);
      0007C7 E5*33            [12] 2117 	mov	a,_fillRect_PARM_3
      0007C9 2E               [12] 2118 	add	a,r6
      0007CA FC               [12] 2119 	mov	r4,a
      0007CB E5*34            [12] 2120 	mov	a,(_fillRect_PARM_3 + 1)
      0007CD 3F               [12] 2121 	addc	a,r7
      0007CE FD               [12] 2122 	mov	r5,a
      0007CF 1C               [12] 2123 	dec	r4
      0007D0 BC FF 01         [24] 2124 	cjne	r4,#0xff,00165$
      0007D3 1D               [12] 2125 	dec	r5
      0007D4                       2126 00165$:
      0007D4 8C*02            [24] 2127 	mov	_setAddress_PARM_3,r4
      0007D6 8D*03            [24] 2128 	mov	(_setAddress_PARM_3 + 1),r5
      0007D8 E5*35            [12] 2129 	mov	a,_fillRect_PARM_4
      0007DA 25*31            [12] 2130 	add	a,_fillRect_PARM_2
      0007DC FC               [12] 2131 	mov	r4,a
      0007DD E5*36            [12] 2132 	mov	a,(_fillRect_PARM_4 + 1)
      0007DF 35*32            [12] 2133 	addc	a,(_fillRect_PARM_2 + 1)
      0007E1 FD               [12] 2134 	mov	r5,a
      0007E2 1C               [12] 2135 	dec	r4
      0007E3 BC FF 01         [24] 2136 	cjne	r4,#0xff,00166$
      0007E6 1D               [12] 2137 	dec	r5
      0007E7                       2138 00166$:
      0007E7 8C*04            [24] 2139 	mov	_setAddress_PARM_4,r4
      0007E9 8D*05            [24] 2140 	mov	(_setAddress_PARM_4 + 1),r5
      0007EB 85*31*00         [24] 2141 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007EE 85*32*01         [24] 2142 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007F1 8E 82            [24] 2143 	mov	dpl,r6
      0007F3 8F 83            [24] 2144 	mov	dph,r7
      0007F5 12r01r76         [24] 2145 	lcall	_setAddress
                                   2146 ;	ecen4330_lcd_v3.c:329: write8Reg(0x2C);
                                   2147 ;	assignBit
      0007F8 C2 B5            [12] 2148 	clr	_P3_5
                                   2149 ;	assignBit
      0007FA D2 B4            [12] 2150 	setb	_P3_4
      0007FC 85*02 82         [24] 2151 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2152 	mov	dph,(_lcd_address + 1)
      000802 74 2C            [12] 2153 	mov	a,#0x2c
      000804 F0               [24] 2154 	movx	@dptr,a
                                   2155 ;	assignBit
      000805 C2 B4            [12] 2156 	clr	_P3_4
                                   2157 ;	ecen4330_lcd_v3.c:330: CD = 1;
                                   2158 ;	assignBit
      000807 D2 B5            [12] 2159 	setb	_P3_5
                                   2160 ;	ecen4330_lcd_v3.c:332: for (y = h; y > 0; y--) {
      000809 AF*38            [24] 2161 	mov	r7,(_fillRect_PARM_5 + 1)
      00080B AD*35            [24] 2162 	mov	r5,_fillRect_PARM_4
      00080D AE*36            [24] 2163 	mov	r6,(_fillRect_PARM_4 + 1)
      00080F                       2164 00114$:
      00080F ED               [12] 2165 	mov	a,r5
      000810 4E               [12] 2166 	orl	a,r6
      000811 60 30            [24] 2167 	jz	00116$
                                   2168 ;	ecen4330_lcd_v3.c:333: for(x = w; x > 0; x--) {
      000813 AB*33            [24] 2169 	mov	r3,_fillRect_PARM_3
      000815 AC*34            [24] 2170 	mov	r4,(_fillRect_PARM_3 + 1)
      000817                       2171 00111$:
      000817 EB               [12] 2172 	mov	a,r3
      000818 4C               [12] 2173 	orl	a,r4
      000819 60 21            [24] 2174 	jz	00115$
                                   2175 ;	ecen4330_lcd_v3.c:334: write8(color>>8); write8(color);
                                   2176 ;	assignBit
      00081B D2 B4            [12] 2177 	setb	_P3_4
      00081D 85*02 82         [24] 2178 	mov	dpl,_lcd_address
      000820 85*03 83         [24] 2179 	mov	dph,(_lcd_address + 1)
      000823 EF               [12] 2180 	mov	a,r7
      000824 F0               [24] 2181 	movx	@dptr,a
                                   2182 ;	assignBit
      000825 C2 B4            [12] 2183 	clr	_P3_4
                                   2184 ;	assignBit
      000827 D2 B4            [12] 2185 	setb	_P3_4
      000829 85*02 82         [24] 2186 	mov	dpl,_lcd_address
      00082C 85*03 83         [24] 2187 	mov	dph,(_lcd_address + 1)
      00082F E5*37            [12] 2188 	mov	a,_fillRect_PARM_5
      000831 FA               [12] 2189 	mov	r2,a
      000832 F0               [24] 2190 	movx	@dptr,a
                                   2191 ;	assignBit
      000833 C2 B4            [12] 2192 	clr	_P3_4
                                   2193 ;	ecen4330_lcd_v3.c:333: for(x = w; x > 0; x--) {
      000835 1B               [12] 2194 	dec	r3
      000836 BB FF 01         [24] 2195 	cjne	r3,#0xff,00169$
      000839 1C               [12] 2196 	dec	r4
      00083A                       2197 00169$:
      00083A 80 DB            [24] 2198 	sjmp	00111$
      00083C                       2199 00115$:
                                   2200 ;	ecen4330_lcd_v3.c:332: for (y = h; y > 0; y--) {
      00083C 1D               [12] 2201 	dec	r5
      00083D BD FF 01         [24] 2202 	cjne	r5,#0xff,00170$
      000840 1E               [12] 2203 	dec	r6
      000841                       2204 00170$:
      000841 80 CC            [24] 2205 	sjmp	00114$
      000843                       2206 00116$:
                                   2207 ;	ecen4330_lcd_v3.c:337: }
      000843 22               [24] 2208 	ret
                                   2209 ;------------------------------------------------------------
                                   2210 ;Allocation info for local variables in function 'fillScreen'
                                   2211 ;------------------------------------------------------------
                                   2212 ;Color                     Allocated to registers r6 r7 
                                   2213 ;len                       Allocated with name '_fillScreen_len_65536_129'
                                   2214 ;blocks                    Allocated with name '_fillScreen_blocks_65536_129'
                                   2215 ;i                         Allocated with name '_fillScreen_i_65536_129'
                                   2216 ;hi                        Allocated with name '_fillScreen_hi_65536_129'
                                   2217 ;lo                        Allocated with name '_fillScreen_lo_65536_129'
                                   2218 ;------------------------------------------------------------
                                   2219 ;	ecen4330_lcd_v3.c:344: void fillScreen (uint16_t Color) {
                                   2220 ;	-----------------------------------------
                                   2221 ;	 function fillScreen
                                   2222 ;	-----------------------------------------
      000844                       2223 _fillScreen:
      000844 AE 82            [24] 2224 	mov	r6,dpl
      000846 AF 83            [24] 2225 	mov	r7,dph
                                   2226 ;	ecen4330_lcd_v3.c:349: __xdata uint8_t  i, hi = Color >> 8,
      000848 8F 05            [24] 2227 	mov	ar5,r7
                                   2228 ;	ecen4330_lcd_v3.c:350: lo = Color;
                                   2229 ;	ecen4330_lcd_v3.c:353: setAddress(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
      00084A E4               [12] 2230 	clr	a
      00084B F5*00            [12] 2231 	mov	_setAddress_PARM_2,a
      00084D F5*01            [12] 2232 	mov	(_setAddress_PARM_2 + 1),a
      00084F 75*02 EF         [24] 2233 	mov	_setAddress_PARM_3,#0xef
                                   2234 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000852 F5*03            [12] 2235 	mov	(_setAddress_PARM_3 + 1),a
      000854 75*04 3F         [24] 2236 	mov	_setAddress_PARM_4,#0x3f
      000857 75*05 01         [24] 2237 	mov	(_setAddress_PARM_4 + 1),#0x01
      00085A 90 00 00         [24] 2238 	mov	dptr,#0x0000
      00085D C0 06            [24] 2239 	push	ar6
      00085F C0 05            [24] 2240 	push	ar5
      000861 12r01r76         [24] 2241 	lcall	_setAddress
      000864 D0 05            [24] 2242 	pop	ar5
      000866 D0 06            [24] 2243 	pop	ar6
                                   2244 ;	ecen4330_lcd_v3.c:355: write8Reg(0x2C);
                                   2245 ;	assignBit
      000868 C2 B5            [12] 2246 	clr	_P3_5
                                   2247 ;	assignBit
      00086A D2 B4            [12] 2248 	setb	_P3_4
      00086C 85*02 82         [24] 2249 	mov	dpl,_lcd_address
      00086F 85*03 83         [24] 2250 	mov	dph,(_lcd_address + 1)
      000872 74 2C            [12] 2251 	mov	a,#0x2c
      000874 F0               [24] 2252 	movx	@dptr,a
                                   2253 ;	assignBit
      000875 C2 B4            [12] 2254 	clr	_P3_4
                                   2255 ;	ecen4330_lcd_v3.c:356: CD = 1;
                                   2256 ;	assignBit
      000877 D2 B5            [12] 2257 	setb	_P3_5
                                   2258 ;	ecen4330_lcd_v3.c:357: write8(hi);
                                   2259 ;	assignBit
      000879 D2 B4            [12] 2260 	setb	_P3_4
      00087B 85*02 82         [24] 2261 	mov	dpl,_lcd_address
      00087E 85*03 83         [24] 2262 	mov	dph,(_lcd_address + 1)
      000881 ED               [12] 2263 	mov	a,r5
      000882 F0               [24] 2264 	movx	@dptr,a
                                   2265 ;	assignBit
      000883 C2 B4            [12] 2266 	clr	_P3_4
                                   2267 ;	ecen4330_lcd_v3.c:358: write8(lo);
                                   2268 ;	assignBit
      000885 D2 B4            [12] 2269 	setb	_P3_4
      000887 85*02 82         [24] 2270 	mov	dpl,_lcd_address
      00088A 85*03 83         [24] 2271 	mov	dph,(_lcd_address + 1)
      00088D EE               [12] 2272 	mov	a,r6
      00088E F0               [24] 2273 	movx	@dptr,a
                                   2274 ;	assignBit
      00088F C2 B4            [12] 2275 	clr	_P3_4
                                   2276 ;	ecen4330_lcd_v3.c:361: while (blocks--) {
      000891 7C B0            [12] 2277 	mov	r4,#0xb0
      000893 7F 04            [12] 2278 	mov	r7,#0x04
      000895                       2279 00104$:
      000895 8C 02            [24] 2280 	mov	ar2,r4
      000897 8F 03            [24] 2281 	mov	ar3,r7
      000899 1C               [12] 2282 	dec	r4
      00089A BC FF 01         [24] 2283 	cjne	r4,#0xff,00140$
      00089D 1F               [12] 2284 	dec	r7
      00089E                       2285 00140$:
      00089E EA               [12] 2286 	mov	a,r2
      00089F 4B               [12] 2287 	orl	a,r3
      0008A0 60 66            [24] 2288 	jz	00106$
                                   2289 ;	ecen4330_lcd_v3.c:364: do {
      0008A2 7B 10            [12] 2290 	mov	r3,#0x10
      0008A4                       2291 00101$:
                                   2292 ;	ecen4330_lcd_v3.c:365: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2293 ;	assignBit
      0008A4 D2 B4            [12] 2294 	setb	_P3_4
      0008A6 85*02 82         [24] 2295 	mov	dpl,_lcd_address
      0008A9 85*03 83         [24] 2296 	mov	dph,(_lcd_address + 1)
      0008AC ED               [12] 2297 	mov	a,r5
      0008AD F0               [24] 2298 	movx	@dptr,a
                                   2299 ;	assignBit
      0008AE C2 B4            [12] 2300 	clr	_P3_4
                                   2301 ;	assignBit
      0008B0 D2 B4            [12] 2302 	setb	_P3_4
      0008B2 85*02 82         [24] 2303 	mov	dpl,_lcd_address
      0008B5 85*03 83         [24] 2304 	mov	dph,(_lcd_address + 1)
      0008B8 EE               [12] 2305 	mov	a,r6
      0008B9 F0               [24] 2306 	movx	@dptr,a
                                   2307 ;	assignBit
      0008BA C2 B4            [12] 2308 	clr	_P3_4
                                   2309 ;	assignBit
      0008BC D2 B4            [12] 2310 	setb	_P3_4
      0008BE 85*02 82         [24] 2311 	mov	dpl,_lcd_address
      0008C1 85*03 83         [24] 2312 	mov	dph,(_lcd_address + 1)
      0008C4 ED               [12] 2313 	mov	a,r5
      0008C5 F0               [24] 2314 	movx	@dptr,a
                                   2315 ;	assignBit
      0008C6 C2 B4            [12] 2316 	clr	_P3_4
                                   2317 ;	assignBit
      0008C8 D2 B4            [12] 2318 	setb	_P3_4
      0008CA 85*02 82         [24] 2319 	mov	dpl,_lcd_address
      0008CD 85*03 83         [24] 2320 	mov	dph,(_lcd_address + 1)
      0008D0 EE               [12] 2321 	mov	a,r6
      0008D1 F0               [24] 2322 	movx	@dptr,a
                                   2323 ;	assignBit
      0008D2 C2 B4            [12] 2324 	clr	_P3_4
                                   2325 ;	ecen4330_lcd_v3.c:366: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2326 ;	assignBit
      0008D4 D2 B4            [12] 2327 	setb	_P3_4
      0008D6 85*02 82         [24] 2328 	mov	dpl,_lcd_address
      0008D9 85*03 83         [24] 2329 	mov	dph,(_lcd_address + 1)
      0008DC ED               [12] 2330 	mov	a,r5
      0008DD F0               [24] 2331 	movx	@dptr,a
                                   2332 ;	assignBit
      0008DE C2 B4            [12] 2333 	clr	_P3_4
                                   2334 ;	assignBit
      0008E0 D2 B4            [12] 2335 	setb	_P3_4
      0008E2 85*02 82         [24] 2336 	mov	dpl,_lcd_address
      0008E5 85*03 83         [24] 2337 	mov	dph,(_lcd_address + 1)
      0008E8 EE               [12] 2338 	mov	a,r6
      0008E9 F0               [24] 2339 	movx	@dptr,a
                                   2340 ;	assignBit
      0008EA C2 B4            [12] 2341 	clr	_P3_4
                                   2342 ;	assignBit
      0008EC D2 B4            [12] 2343 	setb	_P3_4
      0008EE 85*02 82         [24] 2344 	mov	dpl,_lcd_address
      0008F1 85*03 83         [24] 2345 	mov	dph,(_lcd_address + 1)
      0008F4 ED               [12] 2346 	mov	a,r5
      0008F5 F0               [24] 2347 	movx	@dptr,a
                                   2348 ;	assignBit
      0008F6 C2 B4            [12] 2349 	clr	_P3_4
                                   2350 ;	assignBit
      0008F8 D2 B4            [12] 2351 	setb	_P3_4
      0008FA 85*02 82         [24] 2352 	mov	dpl,_lcd_address
      0008FD 85*03 83         [24] 2353 	mov	dph,(_lcd_address + 1)
      000900 EE               [12] 2354 	mov	a,r6
      000901 F0               [24] 2355 	movx	@dptr,a
                                   2356 ;	assignBit
      000902 C2 B4            [12] 2357 	clr	_P3_4
                                   2358 ;	ecen4330_lcd_v3.c:367: } while(--i);
      000904 DB 9E            [24] 2359 	djnz	r3,00101$
      000906 80 8D            [24] 2360 	sjmp	00104$
      000908                       2361 00106$:
                                   2362 ;	ecen4330_lcd_v3.c:370: for (i = (char)len & 63; i--; ) {
      000908 7F 3F            [12] 2363 	mov	r7,#0x3f
      00090A                       2364 00109$:
      00090A 8F 04            [24] 2365 	mov	ar4,r7
      00090C 1F               [12] 2366 	dec	r7
      00090D EC               [12] 2367 	mov	a,r4
      00090E 60 1A            [24] 2368 	jz	00111$
                                   2369 ;	ecen4330_lcd_v3.c:371: write8(hi);
                                   2370 ;	assignBit
      000910 D2 B4            [12] 2371 	setb	_P3_4
      000912 85*02 82         [24] 2372 	mov	dpl,_lcd_address
      000915 85*03 83         [24] 2373 	mov	dph,(_lcd_address + 1)
      000918 ED               [12] 2374 	mov	a,r5
      000919 F0               [24] 2375 	movx	@dptr,a
                                   2376 ;	assignBit
      00091A C2 B4            [12] 2377 	clr	_P3_4
                                   2378 ;	ecen4330_lcd_v3.c:372: write8(lo);
                                   2379 ;	assignBit
      00091C D2 B4            [12] 2380 	setb	_P3_4
      00091E 85*02 82         [24] 2381 	mov	dpl,_lcd_address
      000921 85*03 83         [24] 2382 	mov	dph,(_lcd_address + 1)
      000924 EE               [12] 2383 	mov	a,r6
      000925 F0               [24] 2384 	movx	@dptr,a
                                   2385 ;	assignBit
      000926 C2 B4            [12] 2386 	clr	_P3_4
      000928 80 E0            [24] 2387 	sjmp	00109$
      00092A                       2388 00111$:
                                   2389 ;	ecen4330_lcd_v3.c:374: }
      00092A 22               [24] 2390 	ret
                                   2391 ;------------------------------------------------------------
                                   2392 ;Allocation info for local variables in function 'drawChar'
                                   2393 ;------------------------------------------------------------
                                   2394 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2395 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2396 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2397 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2398 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2399 ;x                         Allocated to registers r6 r7 
                                   2400 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2401 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2402 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2403 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2404 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2405 ;i                         Allocated with name '_drawChar_i_65537_151'
                                   2406 ;line                      Allocated with name '_drawChar_line_196609_153'
                                   2407 ;j                         Allocated with name '_drawChar_j_196610_156'
                                   2408 ;------------------------------------------------------------
                                   2409 ;	ecen4330_lcd_v3.c:385: void drawChar (int16_t x, int16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t size) {
                                   2410 ;	-----------------------------------------
                                   2411 ;	 function drawChar
                                   2412 ;	-----------------------------------------
      00092B                       2413 _drawChar:
      00092B AE 82            [24] 2414 	mov	r6,dpl
      00092D AF 83            [24] 2415 	mov	r7,dph
                                   2416 ;	ecen4330_lcd_v3.c:386: if ((x >=TFTWIDTH) ||
      00092F C3               [12] 2417 	clr	c
      000930 EE               [12] 2418 	mov	a,r6
      000931 94 F0            [12] 2419 	subb	a,#0xf0
      000933 EF               [12] 2420 	mov	a,r7
      000934 64 80            [12] 2421 	xrl	a,#0x80
      000936 94 80            [12] 2422 	subb	a,#0x80
      000938 50 67            [24] 2423 	jnc	00101$
                                   2424 ;	ecen4330_lcd_v3.c:387: (y >=TFTHEIGHT) ||
      00093A AC*39            [24] 2425 	mov	r4,_drawChar_PARM_2
      00093C AD*3A            [24] 2426 	mov	r5,(_drawChar_PARM_2 + 1)
      00093E C3               [12] 2427 	clr	c
      00093F EC               [12] 2428 	mov	a,r4
      000940 94 40            [12] 2429 	subb	a,#0x40
      000942 ED               [12] 2430 	mov	a,r5
      000943 64 80            [12] 2431 	xrl	a,#0x80
      000945 94 81            [12] 2432 	subb	a,#0x81
      000947 50 58            [24] 2433 	jnc	00101$
                                   2434 ;	ecen4330_lcd_v3.c:388: ((x + 6 * size - 1) < 0) ||
      000949 AA*40            [24] 2435 	mov	r2,_drawChar_PARM_6
      00094B 7B 00            [12] 2436 	mov	r3,#0x00
      00094D 8A*00            [24] 2437 	mov	__mulint_PARM_2,r2
      00094F 8B*01            [24] 2438 	mov	(__mulint_PARM_2 + 1),r3
      000951 90 00 06         [24] 2439 	mov	dptr,#0x0006
      000954 C0 07            [24] 2440 	push	ar7
      000956 C0 06            [24] 2441 	push	ar6
      000958 C0 05            [24] 2442 	push	ar5
      00095A C0 04            [24] 2443 	push	ar4
      00095C C0 03            [24] 2444 	push	ar3
      00095E C0 02            [24] 2445 	push	ar2
      000960 12r00r00         [24] 2446 	lcall	__mulint
      000963 A8 82            [24] 2447 	mov	r0,dpl
      000965 A9 83            [24] 2448 	mov	r1,dph
      000967 D0 02            [24] 2449 	pop	ar2
      000969 D0 03            [24] 2450 	pop	ar3
      00096B D0 04            [24] 2451 	pop	ar4
      00096D D0 05            [24] 2452 	pop	ar5
      00096F D0 06            [24] 2453 	pop	ar6
      000971 D0 07            [24] 2454 	pop	ar7
      000973 E8               [12] 2455 	mov	a,r0
      000974 2E               [12] 2456 	add	a,r6
      000975 F8               [12] 2457 	mov	r0,a
      000976 E9               [12] 2458 	mov	a,r1
      000977 3F               [12] 2459 	addc	a,r7
      000978 F9               [12] 2460 	mov	r1,a
      000979 18               [12] 2461 	dec	r0
      00097A B8 FF 01         [24] 2462 	cjne	r0,#0xff,00176$
      00097D 19               [12] 2463 	dec	r1
      00097E                       2464 00176$:
      00097E E9               [12] 2465 	mov	a,r1
      00097F 20 E7 1F         [24] 2466 	jb	acc.7,00101$
                                   2467 ;	ecen4330_lcd_v3.c:389: ((y + 8 * size - 1) < 0))
      000982 EB               [12] 2468 	mov	a,r3
      000983 C4               [12] 2469 	swap	a
      000984 03               [12] 2470 	rr	a
      000985 54 F8            [12] 2471 	anl	a,#0xf8
      000987 CA               [12] 2472 	xch	a,r2
      000988 C4               [12] 2473 	swap	a
      000989 03               [12] 2474 	rr	a
      00098A CA               [12] 2475 	xch	a,r2
      00098B 6A               [12] 2476 	xrl	a,r2
      00098C CA               [12] 2477 	xch	a,r2
      00098D 54 F8            [12] 2478 	anl	a,#0xf8
      00098F CA               [12] 2479 	xch	a,r2
      000990 6A               [12] 2480 	xrl	a,r2
      000991 FB               [12] 2481 	mov	r3,a
      000992 EA               [12] 2482 	mov	a,r2
      000993 2C               [12] 2483 	add	a,r4
      000994 FA               [12] 2484 	mov	r2,a
      000995 EB               [12] 2485 	mov	a,r3
      000996 3D               [12] 2486 	addc	a,r5
      000997 FB               [12] 2487 	mov	r3,a
      000998 1A               [12] 2488 	dec	r2
      000999 BA FF 01         [24] 2489 	cjne	r2,#0xff,00178$
      00099C 1B               [12] 2490 	dec	r3
      00099D                       2491 00178$:
      00099D EB               [12] 2492 	mov	a,r3
      00099E 30 E7 01         [24] 2493 	jnb	acc.7,00138$
      0009A1                       2494 00101$:
                                   2495 ;	ecen4330_lcd_v3.c:391: return;
      0009A1 22               [24] 2496 	ret
                                   2497 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      0009A2                       2498 00138$:
      0009A2 74 01            [12] 2499 	mov	a,#0x01
      0009A4 B5*40 04         [24] 2500 	cjne	a,_drawChar_PARM_6,00180$
      0009A7 74 01            [12] 2501 	mov	a,#0x01
      0009A9 80 01            [24] 2502 	sjmp	00181$
      0009AB                       2503 00180$:
      0009AB E4               [12] 2504 	clr	a
      0009AC                       2505 00181$:
      0009AC FB               [12] 2506 	mov	r3,a
      0009AD 8B*47            [24] 2507 	mov	_drawChar_sloc5_1_0,r3
      0009AF E5*3C            [12] 2508 	mov	a,_drawChar_PARM_4
      0009B1 B5*3E 08         [24] 2509 	cjne	a,_drawChar_PARM_5,00182$
      0009B4 E5*3D            [12] 2510 	mov	a,(_drawChar_PARM_4 + 1)
      0009B6 B5*3F 03         [24] 2511 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009B9 D3               [12] 2512 	setb	c
      0009BA 80 01            [24] 2513 	sjmp	00183$
      0009BC                       2514 00182$:
      0009BC C3               [12] 2515 	clr	c
      0009BD                       2516 00183$:
      0009BD 92*00            [24] 2517 	mov	_drawChar_sloc0_1_0,c
      0009BF 79 00            [12] 2518 	mov	r1,#0x00
      0009C1                       2519 00124$:
                                   2520 ;	ecen4330_lcd_v3.c:399: if (i == 5) {
      0009C1 B9 05 07         [24] 2521 	cjne	r1,#0x05,00107$
                                   2522 ;	ecen4330_lcd_v3.c:400: line = 0x0;
      0009C4 90r00r0A         [24] 2523 	mov	dptr,#_drawChar_line_196609_153
      0009C7 E4               [12] 2524 	clr	a
      0009C8 F0               [24] 2525 	movx	@dptr,a
      0009C9 80 49            [24] 2526 	sjmp	00136$
      0009CB                       2527 00107$:
                                   2528 ;	ecen4330_lcd_v3.c:402: line = pgm_read_byte(font+(c*5)+i);
      0009CB 85*3B*00         [24] 2529 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009CE 75*01 00         [24] 2530 	mov	(__mulint_PARM_2 + 1),#0x00
      0009D1 90 00 05         [24] 2531 	mov	dptr,#0x0005
      0009D4 C0 07            [24] 2532 	push	ar7
      0009D6 C0 06            [24] 2533 	push	ar6
      0009D8 C0 05            [24] 2534 	push	ar5
      0009DA C0 04            [24] 2535 	push	ar4
      0009DC C0 03            [24] 2536 	push	ar3
      0009DE C0 01            [24] 2537 	push	ar1
      0009E0 12r00r00         [24] 2538 	lcall	__mulint
      0009E3 A8 82            [24] 2539 	mov	r0,dpl
      0009E5 AA 83            [24] 2540 	mov	r2,dph
      0009E7 D0 01            [24] 2541 	pop	ar1
      0009E9 D0 03            [24] 2542 	pop	ar3
      0009EB D0 04            [24] 2543 	pop	ar4
      0009ED D0 05            [24] 2544 	pop	ar5
      0009EF D0 06            [24] 2545 	pop	ar6
      0009F1 D0 07            [24] 2546 	pop	ar7
      0009F3 E8               [12] 2547 	mov	a,r0
      0009F4 24r00            [12] 2548 	add	a,#_font
      0009F6 F5*41            [12] 2549 	mov	_drawChar_sloc1_1_0,a
      0009F8 EA               [12] 2550 	mov	a,r2
      0009F9 34s00            [12] 2551 	addc	a,#(_font >> 8)
      0009FB F5*42            [12] 2552 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009FD E9               [12] 2553 	mov	a,r1
      0009FE F8               [12] 2554 	mov	r0,a
      0009FF 33               [12] 2555 	rlc	a
      000A00 95 E0            [12] 2556 	subb	a,acc
      000A02 FA               [12] 2557 	mov	r2,a
      000A03 E8               [12] 2558 	mov	a,r0
      000A04 25*41            [12] 2559 	add	a,_drawChar_sloc1_1_0
      000A06 F5 82            [12] 2560 	mov	dpl,a
      000A08 EA               [12] 2561 	mov	a,r2
      000A09 35*42            [12] 2562 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A0B F5 83            [12] 2563 	mov	dph,a
      000A0D E4               [12] 2564 	clr	a
      000A0E 93               [24] 2565 	movc	a,@a+dptr
      000A0F FA               [12] 2566 	mov	r2,a
      000A10 90r00r0A         [24] 2567 	mov	dptr,#_drawChar_line_196609_153
      000A13 F0               [24] 2568 	movx	@dptr,a
                                   2569 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
                                   2570 ;	ecen4330_lcd_v3.c:407: for (j = 0; j < 8; j++) {
      000A14                       2571 00136$:
      000A14 C2 D5            [12] 2572 	clr	F0
      000A16 85*40 F0         [24] 2573 	mov	b,_drawChar_PARM_6
      000A19 E9               [12] 2574 	mov	a,r1
      000A1A 30 E7 04         [24] 2575 	jnb	acc.7,00186$
      000A1D B2 D5            [12] 2576 	cpl	F0
      000A1F F4               [12] 2577 	cpl	a
      000A20 04               [12] 2578 	inc	a
      000A21                       2579 00186$:
      000A21 A4               [48] 2580 	mul	ab
      000A22 30 D5 0A         [24] 2581 	jnb	F0,00187$
      000A25 F4               [12] 2582 	cpl	a
      000A26 24 01            [12] 2583 	add	a,#0x01
      000A28 C5 F0            [12] 2584 	xch	a,b
      000A2A F4               [12] 2585 	cpl	a
      000A2B 34 00            [12] 2586 	addc	a,#0x00
      000A2D C5 F0            [12] 2587 	xch	a,b
      000A2F                       2588 00187$:
      000A2F 2E               [12] 2589 	add	a,r6
      000A30 F5*41            [12] 2590 	mov	_drawChar_sloc1_1_0,a
      000A32 EF               [12] 2591 	mov	a,r7
      000A33 35 F0            [12] 2592 	addc	a,b
      000A35 F5*42            [12] 2593 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A37 89 00            [24] 2594 	mov	ar0,r1
      000A39 85*41*43         [24] 2595 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A3C 85*42*44         [24] 2596 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A3F 89*45            [24] 2597 	mov	_drawChar_sloc3_1_0,r1
      000A41 75*46 00         [24] 2598 	mov	_drawChar_sloc4_1_0,#0x00
      000A44                       2599 00122$:
                                   2600 ;	ecen4330_lcd_v3.c:408: if (line & 0x1) {
      000A44 90r00r0A         [24] 2601 	mov	dptr,#_drawChar_line_196609_153
      000A47 E0               [24] 2602 	movx	a,@dptr
      000A48 20 E0 03         [24] 2603 	jb	acc.0,00188$
      000A4B 02r0Br03         [24] 2604 	ljmp	00118$
      000A4E                       2605 00188$:
                                   2606 ;	ecen4330_lcd_v3.c:409: if (size == 1) {
      000A4E EB               [12] 2607 	mov	a,r3
      000A4F 60 4E            [24] 2608 	jz	00110$
                                   2609 ;	ecen4330_lcd_v3.c:410: drawPixel(x+i, y+j, color);
      000A51 C0 00            [24] 2610 	push	ar0
      000A53 E5*45            [12] 2611 	mov	a,_drawChar_sloc3_1_0
      000A55 F8               [12] 2612 	mov	r0,a
      000A56 33               [12] 2613 	rlc	a
      000A57 95 E0            [12] 2614 	subb	a,acc
      000A59 FA               [12] 2615 	mov	r2,a
      000A5A E8               [12] 2616 	mov	a,r0
      000A5B 2E               [12] 2617 	add	a,r6
      000A5C F8               [12] 2618 	mov	r0,a
      000A5D EA               [12] 2619 	mov	a,r2
      000A5E 3F               [12] 2620 	addc	a,r7
      000A5F FA               [12] 2621 	mov	r2,a
      000A60 88 82            [24] 2622 	mov	dpl,r0
      000A62 8A 83            [24] 2623 	mov	dph,r2
      000A64 E5*46            [12] 2624 	mov	a,_drawChar_sloc4_1_0
      000A66 F8               [12] 2625 	mov	r0,a
      000A67 33               [12] 2626 	rlc	a
      000A68 95 E0            [12] 2627 	subb	a,acc
      000A6A FA               [12] 2628 	mov	r2,a
      000A6B E8               [12] 2629 	mov	a,r0
      000A6C 2C               [12] 2630 	add	a,r4
      000A6D F8               [12] 2631 	mov	r0,a
      000A6E EA               [12] 2632 	mov	a,r2
      000A6F 3D               [12] 2633 	addc	a,r5
      000A70 FA               [12] 2634 	mov	r2,a
      000A71 88*16            [24] 2635 	mov	_drawPixel_PARM_2,r0
      000A73 8A*17            [24] 2636 	mov	(_drawPixel_PARM_2 + 1),r2
      000A75 85*3C*18         [24] 2637 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A78 85*3D*19         [24] 2638 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A7B C0 07            [24] 2639 	push	ar7
      000A7D C0 06            [24] 2640 	push	ar6
      000A7F C0 05            [24] 2641 	push	ar5
      000A81 C0 04            [24] 2642 	push	ar4
      000A83 C0 03            [24] 2643 	push	ar3
      000A85 C0 01            [24] 2644 	push	ar1
      000A87 C0 00            [24] 2645 	push	ar0
      000A89 12r03r61         [24] 2646 	lcall	_drawPixel
      000A8C D0 00            [24] 2647 	pop	ar0
      000A8E D0 01            [24] 2648 	pop	ar1
      000A90 D0 03            [24] 2649 	pop	ar3
      000A92 D0 04            [24] 2650 	pop	ar4
      000A94 D0 05            [24] 2651 	pop	ar5
      000A96 D0 06            [24] 2652 	pop	ar6
      000A98 D0 07            [24] 2653 	pop	ar7
      000A9A D0 00            [24] 2654 	pop	ar0
      000A9C 02r0BrBA         [24] 2655 	ljmp	00119$
      000A9F                       2656 00110$:
                                   2657 ;	ecen4330_lcd_v3.c:412: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A9F C0 00            [24] 2658 	push	ar0
      000AA1 85*43 82         [24] 2659 	mov	dpl,_drawChar_sloc2_1_0
      000AA4 85*44 83         [24] 2660 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000AA7 C2 D5            [12] 2661 	clr	F0
      000AA9 85*40 F0         [24] 2662 	mov	b,_drawChar_PARM_6
      000AAC E5*46            [12] 2663 	mov	a,_drawChar_sloc4_1_0
      000AAE 30 E7 04         [24] 2664 	jnb	acc.7,00190$
      000AB1 B2 D5            [12] 2665 	cpl	F0
      000AB3 F4               [12] 2666 	cpl	a
      000AB4 04               [12] 2667 	inc	a
      000AB5                       2668 00190$:
      000AB5 A4               [48] 2669 	mul	ab
      000AB6 30 D5 0A         [24] 2670 	jnb	F0,00191$
      000AB9 F4               [12] 2671 	cpl	a
      000ABA 24 01            [12] 2672 	add	a,#0x01
      000ABC C5 F0            [12] 2673 	xch	a,b
      000ABE F4               [12] 2674 	cpl	a
      000ABF 34 00            [12] 2675 	addc	a,#0x00
      000AC1 C5 F0            [12] 2676 	xch	a,b
      000AC3                       2677 00191$:
      000AC3 2C               [12] 2678 	add	a,r4
      000AC4 F8               [12] 2679 	mov	r0,a
      000AC5 ED               [12] 2680 	mov	a,r5
      000AC6 35 F0            [12] 2681 	addc	a,b
      000AC8 FA               [12] 2682 	mov	r2,a
      000AC9 88*31            [24] 2683 	mov	_fillRect_PARM_2,r0
      000ACB 8A*32            [24] 2684 	mov	(_fillRect_PARM_2 + 1),r2
      000ACD A8*40            [24] 2685 	mov	r0,_drawChar_PARM_6
      000ACF 7A 00            [12] 2686 	mov	r2,#0x00
      000AD1 88*33            [24] 2687 	mov	_fillRect_PARM_3,r0
      000AD3 8A*34            [24] 2688 	mov	(_fillRect_PARM_3 + 1),r2
      000AD5 88*35            [24] 2689 	mov	_fillRect_PARM_4,r0
      000AD7 8A*36            [24] 2690 	mov	(_fillRect_PARM_4 + 1),r2
      000AD9 85*3C*37         [24] 2691 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000ADC 85*3D*38         [24] 2692 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000ADF C0 07            [24] 2693 	push	ar7
      000AE1 C0 06            [24] 2694 	push	ar6
      000AE3 C0 05            [24] 2695 	push	ar5
      000AE5 C0 04            [24] 2696 	push	ar4
      000AE7 C0 03            [24] 2697 	push	ar3
      000AE9 C0 01            [24] 2698 	push	ar1
      000AEB C0 00            [24] 2699 	push	ar0
      000AED 12r07r63         [24] 2700 	lcall	_fillRect
      000AF0 D0 00            [24] 2701 	pop	ar0
      000AF2 D0 01            [24] 2702 	pop	ar1
      000AF4 D0 03            [24] 2703 	pop	ar3
      000AF6 D0 04            [24] 2704 	pop	ar4
      000AF8 D0 05            [24] 2705 	pop	ar5
      000AFA D0 06            [24] 2706 	pop	ar6
      000AFC D0 07            [24] 2707 	pop	ar7
      000AFE D0 00            [24] 2708 	pop	ar0
      000B00 02r0BrBA         [24] 2709 	ljmp	00119$
      000B03                       2710 00118$:
                                   2711 ;	ecen4330_lcd_v3.c:414: } else if (bg != color) {
      000B03 30*00 03         [24] 2712 	jnb	_drawChar_sloc0_1_0,00192$
      000B06 02r0BrBA         [24] 2713 	ljmp	00119$
      000B09                       2714 00192$:
                                   2715 ;	ecen4330_lcd_v3.c:415: if (size == 1) {
      000B09 E5*47            [12] 2716 	mov	a,_drawChar_sloc5_1_0
      000B0B 60 4C            [24] 2717 	jz	00113$
                                   2718 ;	ecen4330_lcd_v3.c:416: drawPixel(x+i, y+j, bg);
      000B0D C0 03            [24] 2719 	push	ar3
      000B0F E8               [12] 2720 	mov	a,r0
      000B10 FA               [12] 2721 	mov	r2,a
      000B11 33               [12] 2722 	rlc	a
      000B12 95 E0            [12] 2723 	subb	a,acc
      000B14 FB               [12] 2724 	mov	r3,a
      000B15 EA               [12] 2725 	mov	a,r2
      000B16 2E               [12] 2726 	add	a,r6
      000B17 FA               [12] 2727 	mov	r2,a
      000B18 EB               [12] 2728 	mov	a,r3
      000B19 3F               [12] 2729 	addc	a,r7
      000B1A FB               [12] 2730 	mov	r3,a
      000B1B 8A 82            [24] 2731 	mov	dpl,r2
      000B1D 8B 83            [24] 2732 	mov	dph,r3
      000B1F E5*46            [12] 2733 	mov	a,_drawChar_sloc4_1_0
      000B21 FA               [12] 2734 	mov	r2,a
      000B22 33               [12] 2735 	rlc	a
      000B23 95 E0            [12] 2736 	subb	a,acc
      000B25 FB               [12] 2737 	mov	r3,a
      000B26 EA               [12] 2738 	mov	a,r2
      000B27 2C               [12] 2739 	add	a,r4
      000B28 FA               [12] 2740 	mov	r2,a
      000B29 EB               [12] 2741 	mov	a,r3
      000B2A 3D               [12] 2742 	addc	a,r5
      000B2B FB               [12] 2743 	mov	r3,a
      000B2C 8A*16            [24] 2744 	mov	_drawPixel_PARM_2,r2
      000B2E 8B*17            [24] 2745 	mov	(_drawPixel_PARM_2 + 1),r3
      000B30 85*3E*18         [24] 2746 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B33 85*3F*19         [24] 2747 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B36 C0 07            [24] 2748 	push	ar7
      000B38 C0 06            [24] 2749 	push	ar6
      000B3A C0 05            [24] 2750 	push	ar5
      000B3C C0 04            [24] 2751 	push	ar4
      000B3E C0 03            [24] 2752 	push	ar3
      000B40 C0 01            [24] 2753 	push	ar1
      000B42 C0 00            [24] 2754 	push	ar0
      000B44 12r03r61         [24] 2755 	lcall	_drawPixel
      000B47 D0 00            [24] 2756 	pop	ar0
      000B49 D0 01            [24] 2757 	pop	ar1
      000B4B D0 03            [24] 2758 	pop	ar3
      000B4D D0 04            [24] 2759 	pop	ar4
      000B4F D0 05            [24] 2760 	pop	ar5
      000B51 D0 06            [24] 2761 	pop	ar6
      000B53 D0 07            [24] 2762 	pop	ar7
      000B55 D0 03            [24] 2763 	pop	ar3
      000B57 80 61            [24] 2764 	sjmp	00119$
      000B59                       2765 00113$:
                                   2766 ;	ecen4330_lcd_v3.c:418: fillRect(x+i*size, y+j*size, size, size, bg);
      000B59 C0 00            [24] 2767 	push	ar0
      000B5B 85*41 82         [24] 2768 	mov	dpl,_drawChar_sloc1_1_0
      000B5E 85*42 83         [24] 2769 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B61 C2 D5            [12] 2770 	clr	F0
      000B63 85*40 F0         [24] 2771 	mov	b,_drawChar_PARM_6
      000B66 E5*46            [12] 2772 	mov	a,_drawChar_sloc4_1_0
      000B68 30 E7 04         [24] 2773 	jnb	acc.7,00194$
      000B6B B2 D5            [12] 2774 	cpl	F0
      000B6D F4               [12] 2775 	cpl	a
      000B6E 04               [12] 2776 	inc	a
      000B6F                       2777 00194$:
      000B6F A4               [48] 2778 	mul	ab
      000B70 30 D5 0A         [24] 2779 	jnb	F0,00195$
      000B73 F4               [12] 2780 	cpl	a
      000B74 24 01            [12] 2781 	add	a,#0x01
      000B76 C5 F0            [12] 2782 	xch	a,b
      000B78 F4               [12] 2783 	cpl	a
      000B79 34 00            [12] 2784 	addc	a,#0x00
      000B7B C5 F0            [12] 2785 	xch	a,b
      000B7D                       2786 00195$:
      000B7D 2C               [12] 2787 	add	a,r4
      000B7E F8               [12] 2788 	mov	r0,a
      000B7F ED               [12] 2789 	mov	a,r5
      000B80 35 F0            [12] 2790 	addc	a,b
      000B82 FA               [12] 2791 	mov	r2,a
      000B83 88*31            [24] 2792 	mov	_fillRect_PARM_2,r0
      000B85 8A*32            [24] 2793 	mov	(_fillRect_PARM_2 + 1),r2
      000B87 A8*40            [24] 2794 	mov	r0,_drawChar_PARM_6
      000B89 7A 00            [12] 2795 	mov	r2,#0x00
      000B8B 88*33            [24] 2796 	mov	_fillRect_PARM_3,r0
      000B8D 8A*34            [24] 2797 	mov	(_fillRect_PARM_3 + 1),r2
      000B8F 88*35            [24] 2798 	mov	_fillRect_PARM_4,r0
      000B91 8A*36            [24] 2799 	mov	(_fillRect_PARM_4 + 1),r2
      000B93 85*3E*37         [24] 2800 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B96 85*3F*38         [24] 2801 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B99 C0 07            [24] 2802 	push	ar7
      000B9B C0 06            [24] 2803 	push	ar6
      000B9D C0 05            [24] 2804 	push	ar5
      000B9F C0 04            [24] 2805 	push	ar4
      000BA1 C0 03            [24] 2806 	push	ar3
      000BA3 C0 01            [24] 2807 	push	ar1
      000BA5 C0 00            [24] 2808 	push	ar0
      000BA7 12r07r63         [24] 2809 	lcall	_fillRect
      000BAA D0 00            [24] 2810 	pop	ar0
      000BAC D0 01            [24] 2811 	pop	ar1
      000BAE D0 03            [24] 2812 	pop	ar3
      000BB0 D0 04            [24] 2813 	pop	ar4
      000BB2 D0 05            [24] 2814 	pop	ar5
      000BB4 D0 06            [24] 2815 	pop	ar6
      000BB6 D0 07            [24] 2816 	pop	ar7
                                   2817 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      000BB8 D0 00            [24] 2818 	pop	ar0
                                   2819 ;	ecen4330_lcd_v3.c:418: fillRect(x+i*size, y+j*size, size, size, bg);
      000BBA                       2820 00119$:
                                   2821 ;	ecen4330_lcd_v3.c:422: line >>= 1;
      000BBA 90r00r0A         [24] 2822 	mov	dptr,#_drawChar_line_196609_153
      000BBD E0               [24] 2823 	movx	a,@dptr
      000BBE C3               [12] 2824 	clr	c
      000BBF 13               [12] 2825 	rrc	a
      000BC0 FA               [12] 2826 	mov	r2,a
      000BC1 F0               [24] 2827 	movx	@dptr,a
                                   2828 ;	ecen4330_lcd_v3.c:407: for (j = 0; j < 8; j++) {
      000BC2 05*46            [12] 2829 	inc	_drawChar_sloc4_1_0
      000BC4 C3               [12] 2830 	clr	c
      000BC5 E5*46            [12] 2831 	mov	a,_drawChar_sloc4_1_0
      000BC7 64 80            [12] 2832 	xrl	a,#0x80
      000BC9 94 88            [12] 2833 	subb	a,#0x88
      000BCB 50 03            [24] 2834 	jnc	00196$
      000BCD 02r0Ar44         [24] 2835 	ljmp	00122$
      000BD0                       2836 00196$:
                                   2837 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      000BD0 09               [12] 2838 	inc	r1
      000BD1 C3               [12] 2839 	clr	c
      000BD2 E9               [12] 2840 	mov	a,r1
      000BD3 64 80            [12] 2841 	xrl	a,#0x80
      000BD5 94 86            [12] 2842 	subb	a,#0x86
      000BD7 50 03            [24] 2843 	jnc	00197$
      000BD9 02r09rC1         [24] 2844 	ljmp	00124$
      000BDC                       2845 00197$:
                                   2846 ;	ecen4330_lcd_v3.c:425: }
      000BDC 22               [24] 2847 	ret
                                   2848 ;------------------------------------------------------------
                                   2849 ;Allocation info for local variables in function 'write'
                                   2850 ;------------------------------------------------------------
                                   2851 ;c                         Allocated to registers r7 
                                   2852 ;------------------------------------------------------------
                                   2853 ;	ecen4330_lcd_v3.c:432: void write (uint8_t c)
                                   2854 ;	-----------------------------------------
                                   2855 ;	 function write
                                   2856 ;	-----------------------------------------
      000BDD                       2857 _write:
      000BDD AF 82            [24] 2858 	mov	r7,dpl
                                   2859 ;	ecen4330_lcd_v3.c:434: if (c == '\n') {
      000BDF BF 0A 26         [24] 2860 	cjne	r7,#0x0a,00105$
                                   2861 ;	ecen4330_lcd_v3.c:435: cursor_y += textsize*8;
      000BE2 AD*10            [24] 2862 	mov	r5,_textsize
      000BE4 E4               [12] 2863 	clr	a
      000BE5 C4               [12] 2864 	swap	a
      000BE6 03               [12] 2865 	rr	a
      000BE7 54 F8            [12] 2866 	anl	a,#0xf8
      000BE9 CD               [12] 2867 	xch	a,r5
      000BEA C4               [12] 2868 	swap	a
      000BEB 03               [12] 2869 	rr	a
      000BEC CD               [12] 2870 	xch	a,r5
      000BED 6D               [12] 2871 	xrl	a,r5
      000BEE CD               [12] 2872 	xch	a,r5
      000BEF 54 F8            [12] 2873 	anl	a,#0xf8
      000BF1 CD               [12] 2874 	xch	a,r5
      000BF2 6D               [12] 2875 	xrl	a,r5
      000BF3 FE               [12] 2876 	mov	r6,a
      000BF4 AB*0E            [24] 2877 	mov	r3,_cursor_y
      000BF6 AC*0F            [24] 2878 	mov	r4,(_cursor_y + 1)
      000BF8 ED               [12] 2879 	mov	a,r5
      000BF9 2B               [12] 2880 	add	a,r3
      000BFA FB               [12] 2881 	mov	r3,a
      000BFB EE               [12] 2882 	mov	a,r6
      000BFC 3C               [12] 2883 	addc	a,r4
      000BFD FC               [12] 2884 	mov	r4,a
      000BFE 8B*0E            [24] 2885 	mov	_cursor_y,r3
      000C00 8C*0F            [24] 2886 	mov	(_cursor_y + 1),r4
                                   2887 ;	ecen4330_lcd_v3.c:436: cursor_x  = 0;
      000C02 E4               [12] 2888 	clr	a
      000C03 F5*0C            [12] 2889 	mov	_cursor_x,a
      000C05 F5*0D            [12] 2890 	mov	(_cursor_x + 1),a
      000C07 22               [24] 2891 	ret
      000C08                       2892 00105$:
                                   2893 ;	ecen4330_lcd_v3.c:437: } else if (c == '\r') {
      000C08 BF 0D 01         [24] 2894 	cjne	r7,#0x0d,00119$
      000C0B 22               [24] 2895 	ret
      000C0C                       2896 00119$:
                                   2897 ;	ecen4330_lcd_v3.c:440: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C0C 85*0E*39         [24] 2898 	mov	_drawChar_PARM_2,_cursor_y
      000C0F 85*0F*3A         [24] 2899 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C12 8F*3B            [24] 2900 	mov	_drawChar_PARM_3,r7
      000C14 85*12*3C         [24] 2901 	mov	_drawChar_PARM_4,_textcolor
      000C17 85*13*3D         [24] 2902 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C1A 85*14*3E         [24] 2903 	mov	_drawChar_PARM_5,_textbgcolor
      000C1D 85*15*3F         [24] 2904 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C20 85*10*40         [24] 2905 	mov	_drawChar_PARM_6,_textsize
      000C23 85*0C 82         [24] 2906 	mov	dpl,_cursor_x
      000C26 85*0D 83         [24] 2907 	mov	dph,(_cursor_x + 1)
      000C29 12r09r2B         [24] 2908 	lcall	_drawChar
                                   2909 ;	ecen4330_lcd_v3.c:441: cursor_x += textsize*6;
      000C2C 85*10*00         [24] 2910 	mov	__mulint_PARM_2,_textsize
      000C2F 75*01 00         [24] 2911 	mov	(__mulint_PARM_2 + 1),#0x00
      000C32 90 00 06         [24] 2912 	mov	dptr,#0x0006
      000C35 12r00r00         [24] 2913 	lcall	__mulint
      000C38 AE 82            [24] 2914 	mov	r6,dpl
      000C3A AF 83            [24] 2915 	mov	r7,dph
      000C3C AC*0C            [24] 2916 	mov	r4,_cursor_x
      000C3E AD*0D            [24] 2917 	mov	r5,(_cursor_x + 1)
      000C40 EE               [12] 2918 	mov	a,r6
      000C41 2C               [12] 2919 	add	a,r4
      000C42 FC               [12] 2920 	mov	r4,a
      000C43 EF               [12] 2921 	mov	a,r7
      000C44 3D               [12] 2922 	addc	a,r5
      000C45 FD               [12] 2923 	mov	r5,a
      000C46 8C*0C            [24] 2924 	mov	_cursor_x,r4
      000C48 8D*0D            [24] 2925 	mov	(_cursor_x + 1),r5
                                   2926 ;	ecen4330_lcd_v3.c:443: }
      000C4A 22               [24] 2927 	ret
                                   2928 ;------------------------------------------------------------
                                   2929 ;Allocation info for local variables in function 'LCD_string_write'
                                   2930 ;------------------------------------------------------------
                                   2931 ;str                       Allocated to registers r5 r6 r7 
                                   2932 ;i                         Allocated with name '_LCD_string_write_i_65536_171'
                                   2933 ;------------------------------------------------------------
                                   2934 ;	ecen4330_lcd_v3.c:450: void LCD_string_write (int8_t *str) {
                                   2935 ;	-----------------------------------------
                                   2936 ;	 function LCD_string_write
                                   2937 ;	-----------------------------------------
      000C4B                       2938 _LCD_string_write:
      000C4B AD 82            [24] 2939 	mov	r5,dpl
      000C4D AE 83            [24] 2940 	mov	r6,dph
      000C4F AF F0            [24] 2941 	mov	r7,b
                                   2942 ;	ecen4330_lcd_v3.c:453: for (i = 0; str[i] != 0; i++) {
      000C51 7B 00            [12] 2943 	mov	r3,#0x00
      000C53 7C 00            [12] 2944 	mov	r4,#0x00
      000C55                       2945 00103$:
      000C55 EB               [12] 2946 	mov	a,r3
      000C56 2D               [12] 2947 	add	a,r5
      000C57 F8               [12] 2948 	mov	r0,a
      000C58 EC               [12] 2949 	mov	a,r4
      000C59 3E               [12] 2950 	addc	a,r6
      000C5A F9               [12] 2951 	mov	r1,a
      000C5B 8F 02            [24] 2952 	mov	ar2,r7
      000C5D 88 82            [24] 2953 	mov	dpl,r0
      000C5F 89 83            [24] 2954 	mov	dph,r1
      000C61 8A F0            [24] 2955 	mov	b,r2
      000C63 12r00r00         [24] 2956 	lcall	__gptrget
      000C66 FA               [12] 2957 	mov	r2,a
      000C67 60 20            [24] 2958 	jz	00105$
                                   2959 ;	ecen4330_lcd_v3.c:454: write(str[i]);
      000C69 8A 82            [24] 2960 	mov	dpl,r2
      000C6B C0 07            [24] 2961 	push	ar7
      000C6D C0 06            [24] 2962 	push	ar6
      000C6F C0 05            [24] 2963 	push	ar5
      000C71 C0 04            [24] 2964 	push	ar4
      000C73 C0 03            [24] 2965 	push	ar3
      000C75 12r0BrDD         [24] 2966 	lcall	_write
      000C78 D0 03            [24] 2967 	pop	ar3
      000C7A D0 04            [24] 2968 	pop	ar4
      000C7C D0 05            [24] 2969 	pop	ar5
      000C7E D0 06            [24] 2970 	pop	ar6
      000C80 D0 07            [24] 2971 	pop	ar7
                                   2972 ;	ecen4330_lcd_v3.c:453: for (i = 0; str[i] != 0; i++) {
      000C82 0B               [12] 2973 	inc	r3
      000C83 BB 00 CF         [24] 2974 	cjne	r3,#0x00,00103$
      000C86 0C               [12] 2975 	inc	r4
      000C87 80 CC            [24] 2976 	sjmp	00103$
      000C89                       2977 00105$:
                                   2978 ;	ecen4330_lcd_v3.c:456: }
      000C89 22               [24] 2979 	ret
                                   2980 ;------------------------------------------------------------
                                   2981 ;Allocation info for local variables in function 'testRAM'
                                   2982 ;------------------------------------------------------------
                                   2983 ;d                         Allocated with name '_testRAM_d_65536_174'
                                   2984 ;i                         Allocated with name '_testRAM_i_65536_175'
                                   2985 ;ram_address               Allocated to registers 
                                   2986 ;------------------------------------------------------------
                                   2987 ;	ecen4330_lcd_v3.c:463: void testRAM (__xdata uint8_t d) {
                                   2988 ;	-----------------------------------------
                                   2989 ;	 function testRAM
                                   2990 ;	-----------------------------------------
      000C8A                       2991 _testRAM:
      000C8A E5 82            [12] 2992 	mov	a,dpl
      000C8C 90r00r0B         [24] 2993 	mov	dptr,#_testRAM_d_65536_174
      000C8F F0               [24] 2994 	movx	@dptr,a
                                   2995 ;	ecen4330_lcd_v3.c:467: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C90 E0               [24] 2996 	movx	a,@dptr
      000C91 FF               [12] 2997 	mov	r7,a
      000C92 7B 00            [12] 2998 	mov	r3,#0x00
      000C94 7C 00            [12] 2999 	mov	r4,#0x00
      000C96 7D 00            [12] 3000 	mov	r5,#0x00
      000C98 7E 00            [12] 3001 	mov	r6,#0x00
      000C9A                       3002 00102$:
                                   3003 ;	ecen4330_lcd_v3.c:468: IOM = 0;
                                   3004 ;	assignBit
      000C9A C2 B4            [12] 3005 	clr	_P3_4
                                   3006 ;	ecen4330_lcd_v3.c:469: ram_address = (uint8_t __xdata*)(i);
      000C9C 8B 82            [24] 3007 	mov	dpl,r3
      000C9E 8C 83            [24] 3008 	mov	dph,r4
                                   3009 ;	ecen4330_lcd_v3.c:470: *ram_address = d;
      000CA0 EF               [12] 3010 	mov	a,r7
      000CA1 F0               [24] 3011 	movx	@dptr,a
                                   3012 ;	ecen4330_lcd_v3.c:471: IOM = 1;
                                   3013 ;	assignBit
      000CA2 D2 B4            [12] 3014 	setb	_P3_4
                                   3015 ;	ecen4330_lcd_v3.c:467: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CA4 0B               [12] 3016 	inc	r3
      000CA5 BB 00 09         [24] 3017 	cjne	r3,#0x00,00111$
      000CA8 0C               [12] 3018 	inc	r4
      000CA9 BC 00 05         [24] 3019 	cjne	r4,#0x00,00111$
      000CAC 0D               [12] 3020 	inc	r5
      000CAD BD 00 01         [24] 3021 	cjne	r5,#0x00,00111$
      000CB0 0E               [12] 3022 	inc	r6
      000CB1                       3023 00111$:
      000CB1 C3               [12] 3024 	clr	c
      000CB2 EB               [12] 3025 	mov	a,r3
      000CB3 94 FF            [12] 3026 	subb	a,#0xff
      000CB5 EC               [12] 3027 	mov	a,r4
      000CB6 94 FF            [12] 3028 	subb	a,#0xff
      000CB8 ED               [12] 3029 	mov	a,r5
      000CB9 94 00            [12] 3030 	subb	a,#0x00
      000CBB EE               [12] 3031 	mov	a,r6
      000CBC 94 00            [12] 3032 	subb	a,#0x00
      000CBE 40 DA            [24] 3033 	jc	00102$
                                   3034 ;	ecen4330_lcd_v3.c:473: }
      000CC0 22               [24] 3035 	ret
                                   3036 ;------------------------------------------------------------
                                   3037 ;Allocation info for local variables in function 'freeType'
                                   3038 ;------------------------------------------------------------
                                   3039 ;count                     Allocated with name '_freeType_count_65536_178'
                                   3040 ;d                         Allocated with name '_freeType_d_65536_178'
                                   3041 ;------------------------------------------------------------
                                   3042 ;	ecen4330_lcd_v3.c:479: void freeType () {
                                   3043 ;	-----------------------------------------
                                   3044 ;	 function freeType
                                   3045 ;	-----------------------------------------
      000CC1                       3046 _freeType:
                                   3047 ;	ecen4330_lcd_v3.c:480: __xdata uint8_t count = 0;
      000CC1 90r00r0C         [24] 3048 	mov	dptr,#_freeType_count_65536_178
      000CC4 E4               [12] 3049 	clr	a
      000CC5 F0               [24] 3050 	movx	@dptr,a
                                   3051 ;	ecen4330_lcd_v3.c:483: while (1) {
      000CC6                       3052 00105$:
                                   3053 ;	ecen4330_lcd_v3.c:484: if (count == 8) {
      000CC6 90r00r0C         [24] 3054 	mov	dptr,#_freeType_count_65536_178
      000CC9 E0               [24] 3055 	movx	a,@dptr
      000CCA FF               [12] 3056 	mov	r7,a
      000CCB BF 08 0D         [24] 3057 	cjne	r7,#0x08,00102$
                                   3058 ;	ecen4330_lcd_v3.c:486: count = 0;
      000CCE 90r00r0C         [24] 3059 	mov	dptr,#_freeType_count_65536_178
      000CD1 E4               [12] 3060 	clr	a
      000CD2 F0               [24] 3061 	movx	@dptr,a
                                   3062 ;	ecen4330_lcd_v3.c:487: write(d);
      000CD3 75 82 0A         [24] 3063 	mov	dpl,#0x0a
      000CD6 12r0BrDD         [24] 3064 	lcall	_write
      000CD9 80 06            [24] 3065 	sjmp	00103$
      000CDB                       3066 00102$:
                                   3067 ;	ecen4330_lcd_v3.c:489: d = keyDetect();
      000CDB 12r0CrEA         [24] 3068 	lcall	_keyDetect
                                   3069 ;	ecen4330_lcd_v3.c:490: write(d);
      000CDE 12r0BrDD         [24] 3070 	lcall	_write
      000CE1                       3071 00103$:
                                   3072 ;	ecen4330_lcd_v3.c:493: count++;
      000CE1 90r00r0C         [24] 3073 	mov	dptr,#_freeType_count_65536_178
      000CE4 E0               [24] 3074 	movx	a,@dptr
      000CE5 24 01            [12] 3075 	add	a,#0x01
      000CE7 F0               [24] 3076 	movx	@dptr,a
                                   3077 ;	ecen4330_lcd_v3.c:495: }
      000CE8 80 DC            [24] 3078 	sjmp	00105$
                                   3079 ;------------------------------------------------------------
                                   3080 ;Allocation info for local variables in function 'keyDetect'
                                   3081 ;------------------------------------------------------------
                                   3082 ;	ecen4330_lcd_v3.c:502: uint8_t keyDetect () {
                                   3083 ;	-----------------------------------------
                                   3084 ;	 function keyDetect
                                   3085 ;	-----------------------------------------
      000CEA                       3086 _keyDetect:
                                   3087 ;	ecen4330_lcd_v3.c:503: __KEYPAD_PORT__ = 0xF0;
      000CEA 75 90 F0         [24] 3088 	mov	_P1,#0xf0
                                   3089 ;	ecen4330_lcd_v3.c:504: do {
      000CED                       3090 00101$:
                                   3091 ;	ecen4330_lcd_v3.c:505: __KEYPAD_PORT__ = 0xF0;
      000CED 75 90 F0         [24] 3092 	mov	_P1,#0xf0
                                   3093 ;	ecen4330_lcd_v3.c:506: colloc = __KEYPAD_PORT__;
      000CF0 85 90*00         [24] 3094 	mov	_colloc,_P1
                                   3095 ;	ecen4330_lcd_v3.c:507: colloc&= 0xF0;
      000CF3 53*00 F0         [24] 3096 	anl	_colloc,#0xf0
                                   3097 ;	ecen4330_lcd_v3.c:508: } while (colloc != 0xF0);
      000CF6 74 F0            [12] 3098 	mov	a,#0xf0
      000CF8 B5*00 F2         [24] 3099 	cjne	a,_colloc,00101$
                                   3100 ;	ecen4330_lcd_v3.c:511: do {
      000CFB                       3101 00104$:
                                   3102 ;	ecen4330_lcd_v3.c:512: delay(20);
      000CFB 90 00 14         [24] 3103 	mov	dptr,#0x0014
      000CFE 12r00r21         [24] 3104 	lcall	_delay
                                   3105 ;	ecen4330_lcd_v3.c:513: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D01 E5 90            [12] 3106 	mov	a,_P1
      000D03 54 F0            [12] 3107 	anl	a,#0xf0
      000D05 F5*00            [12] 3108 	mov	_colloc,a
                                   3109 ;	ecen4330_lcd_v3.c:514: } while (colloc == 0xF0);
      000D07 74 F0            [12] 3110 	mov	a,#0xf0
      000D09 B5*00 02         [24] 3111 	cjne	a,_colloc,00178$
      000D0C 80 ED            [24] 3112 	sjmp	00104$
      000D0E                       3113 00178$:
                                   3114 ;	ecen4330_lcd_v3.c:516: delay(1);
      000D0E 90 00 01         [24] 3115 	mov	dptr,#0x0001
      000D11 12r00r21         [24] 3116 	lcall	_delay
                                   3117 ;	ecen4330_lcd_v3.c:517: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D14 E5 90            [12] 3118 	mov	a,_P1
      000D16 54 F0            [12] 3119 	anl	a,#0xf0
      000D18 F5*00            [12] 3120 	mov	_colloc,a
                                   3121 ;	ecen4330_lcd_v3.c:518: } while (colloc == 0xF0);
      000D1A 74 F0            [12] 3122 	mov	a,#0xf0
      000D1C B5*00 02         [24] 3123 	cjne	a,_colloc,00179$
      000D1F 80 DA            [24] 3124 	sjmp	00104$
      000D21                       3125 00179$:
                                   3126 ;	ecen4330_lcd_v3.c:520: while (1) {
      000D21                       3127 00119$:
                                   3128 ;	ecen4330_lcd_v3.c:521: __KEYPAD_PORT__= 0xFE;
      000D21 75 90 FE         [24] 3129 	mov	_P1,#0xfe
                                   3130 ;	ecen4330_lcd_v3.c:522: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D24 E5 90            [12] 3131 	mov	a,_P1
      000D26 54 F0            [12] 3132 	anl	a,#0xf0
      000D28 F5*00            [12] 3133 	mov	_colloc,a
                                   3134 ;	ecen4330_lcd_v3.c:523: if (colloc != 0xF0) {
      000D2A 74 F0            [12] 3135 	mov	a,#0xf0
      000D2C B5*00 02         [24] 3136 	cjne	a,_colloc,00180$
      000D2F 80 05            [24] 3137 	sjmp	00111$
      000D31                       3138 00180$:
                                   3139 ;	ecen4330_lcd_v3.c:524: rowloc = 0;
      000D31 75*01 00         [24] 3140 	mov	_rowloc,#0x00
                                   3141 ;	ecen4330_lcd_v3.c:525: break;
      000D34 80 3D            [24] 3142 	sjmp	00120$
      000D36                       3143 00111$:
                                   3144 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xFD;
      000D36 75 90 FD         [24] 3145 	mov	_P1,#0xfd
                                   3146 ;	ecen4330_lcd_v3.c:529: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D39 E5 90            [12] 3147 	mov	a,_P1
      000D3B 54 F0            [12] 3148 	anl	a,#0xf0
      000D3D F5*00            [12] 3149 	mov	_colloc,a
                                   3150 ;	ecen4330_lcd_v3.c:530: if (colloc != 0xF0) {
      000D3F 74 F0            [12] 3151 	mov	a,#0xf0
      000D41 B5*00 02         [24] 3152 	cjne	a,_colloc,00181$
      000D44 80 05            [24] 3153 	sjmp	00113$
      000D46                       3154 00181$:
                                   3155 ;	ecen4330_lcd_v3.c:531: rowloc = 1;
      000D46 75*01 01         [24] 3156 	mov	_rowloc,#0x01
                                   3157 ;	ecen4330_lcd_v3.c:532: break;
      000D49 80 28            [24] 3158 	sjmp	00120$
      000D4B                       3159 00113$:
                                   3160 ;	ecen4330_lcd_v3.c:535: __KEYPAD_PORT__ = 0xFB;
      000D4B 75 90 FB         [24] 3161 	mov	_P1,#0xfb
                                   3162 ;	ecen4330_lcd_v3.c:536: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D4E E5 90            [12] 3163 	mov	a,_P1
      000D50 54 F0            [12] 3164 	anl	a,#0xf0
      000D52 F5*00            [12] 3165 	mov	_colloc,a
                                   3166 ;	ecen4330_lcd_v3.c:537: if (colloc != 0xF0) {
      000D54 74 F0            [12] 3167 	mov	a,#0xf0
      000D56 B5*00 02         [24] 3168 	cjne	a,_colloc,00182$
      000D59 80 05            [24] 3169 	sjmp	00115$
      000D5B                       3170 00182$:
                                   3171 ;	ecen4330_lcd_v3.c:538: rowloc = 2;
      000D5B 75*01 02         [24] 3172 	mov	_rowloc,#0x02
                                   3173 ;	ecen4330_lcd_v3.c:539: break;
      000D5E 80 13            [24] 3174 	sjmp	00120$
      000D60                       3175 00115$:
                                   3176 ;	ecen4330_lcd_v3.c:542: __KEYPAD_PORT__ = 0xF7;
      000D60 75 90 F7         [24] 3177 	mov	_P1,#0xf7
                                   3178 ;	ecen4330_lcd_v3.c:543: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D63 E5 90            [12] 3179 	mov	a,_P1
      000D65 54 F0            [12] 3180 	anl	a,#0xf0
      000D67 F5*00            [12] 3181 	mov	_colloc,a
                                   3182 ;	ecen4330_lcd_v3.c:544: if (colloc != 0xF0) {
      000D69 74 F0            [12] 3183 	mov	a,#0xf0
      000D6B B5*00 02         [24] 3184 	cjne	a,_colloc,00183$
      000D6E 80 B1            [24] 3185 	sjmp	00119$
      000D70                       3186 00183$:
                                   3187 ;	ecen4330_lcd_v3.c:545: rowloc = 3;
      000D70 75*01 03         [24] 3188 	mov	_rowloc,#0x03
                                   3189 ;	ecen4330_lcd_v3.c:546: break;
      000D73                       3190 00120$:
                                   3191 ;	ecen4330_lcd_v3.c:550: if (colloc == 0xE0) {
      000D73 74 E0            [12] 3192 	mov	a,#0xe0
      000D75 B5*00 15         [24] 3193 	cjne	a,_colloc,00128$
                                   3194 ;	ecen4330_lcd_v3.c:551: return (keypad[rowloc][0]);
      000D78 E5*01            [12] 3195 	mov	a,_rowloc
      000D7A 75 F0 04         [24] 3196 	mov	b,#0x04
      000D7D A4               [48] 3197 	mul	ab
      000D7E 24rFB            [12] 3198 	add	a,#_keypad
      000D80 F5 82            [12] 3199 	mov	dpl,a
      000D82 74s04            [12] 3200 	mov	a,#(_keypad >> 8)
      000D84 35 F0            [12] 3201 	addc	a,b
      000D86 F5 83            [12] 3202 	mov	dph,a
      000D88 E4               [12] 3203 	clr	a
      000D89 93               [24] 3204 	movc	a,@a+dptr
      000D8A F5 82            [12] 3205 	mov	dpl,a
      000D8C 22               [24] 3206 	ret
      000D8D                       3207 00128$:
                                   3208 ;	ecen4330_lcd_v3.c:552: } else if (colloc == 0xD0) {
      000D8D 74 D0            [12] 3209 	mov	a,#0xd0
      000D8F B5*00 18         [24] 3210 	cjne	a,_colloc,00125$
                                   3211 ;	ecen4330_lcd_v3.c:553: return (keypad[rowloc][1]);
      000D92 E5*01            [12] 3212 	mov	a,_rowloc
      000D94 75 F0 04         [24] 3213 	mov	b,#0x04
      000D97 A4               [48] 3214 	mul	ab
      000D98 24rFB            [12] 3215 	add	a,#_keypad
      000D9A FE               [12] 3216 	mov	r6,a
      000D9B 74s04            [12] 3217 	mov	a,#(_keypad >> 8)
      000D9D 35 F0            [12] 3218 	addc	a,b
      000D9F FF               [12] 3219 	mov	r7,a
      000DA0 8E 82            [24] 3220 	mov	dpl,r6
      000DA2 8F 83            [24] 3221 	mov	dph,r7
      000DA4 A3               [24] 3222 	inc	dptr
      000DA5 E4               [12] 3223 	clr	a
      000DA6 93               [24] 3224 	movc	a,@a+dptr
      000DA7 F5 82            [12] 3225 	mov	dpl,a
      000DA9 22               [24] 3226 	ret
      000DAA                       3227 00125$:
                                   3228 ;	ecen4330_lcd_v3.c:554: } else if (colloc == 0xB0) {
      000DAA 74 B0            [12] 3229 	mov	a,#0xb0
      000DAC B5*00 19         [24] 3230 	cjne	a,_colloc,00122$
                                   3231 ;	ecen4330_lcd_v3.c:555: return (keypad[rowloc][2]);
      000DAF E5*01            [12] 3232 	mov	a,_rowloc
      000DB1 75 F0 04         [24] 3233 	mov	b,#0x04
      000DB4 A4               [48] 3234 	mul	ab
      000DB5 24rFB            [12] 3235 	add	a,#_keypad
      000DB7 FE               [12] 3236 	mov	r6,a
      000DB8 74s04            [12] 3237 	mov	a,#(_keypad >> 8)
      000DBA 35 F0            [12] 3238 	addc	a,b
      000DBC FF               [12] 3239 	mov	r7,a
      000DBD 8E 82            [24] 3240 	mov	dpl,r6
      000DBF 8F 83            [24] 3241 	mov	dph,r7
      000DC1 A3               [24] 3242 	inc	dptr
      000DC2 A3               [24] 3243 	inc	dptr
      000DC3 E4               [12] 3244 	clr	a
      000DC4 93               [24] 3245 	movc	a,@a+dptr
      000DC5 F5 82            [12] 3246 	mov	dpl,a
      000DC7 22               [24] 3247 	ret
      000DC8                       3248 00122$:
                                   3249 ;	ecen4330_lcd_v3.c:557: return (keypad[rowloc][3]);
      000DC8 E5*01            [12] 3250 	mov	a,_rowloc
      000DCA 75 F0 04         [24] 3251 	mov	b,#0x04
      000DCD A4               [48] 3252 	mul	ab
      000DCE 24rFB            [12] 3253 	add	a,#_keypad
      000DD0 FE               [12] 3254 	mov	r6,a
      000DD1 74s04            [12] 3255 	mov	a,#(_keypad >> 8)
      000DD3 35 F0            [12] 3256 	addc	a,b
      000DD5 FF               [12] 3257 	mov	r7,a
      000DD6 8E 82            [24] 3258 	mov	dpl,r6
      000DD8 8F 83            [24] 3259 	mov	dph,r7
      000DDA A3               [24] 3260 	inc	dptr
      000DDB A3               [24] 3261 	inc	dptr
      000DDC A3               [24] 3262 	inc	dptr
      000DDD E4               [12] 3263 	clr	a
      000DDE 93               [24] 3264 	movc	a,@a+dptr
                                   3265 ;	ecen4330_lcd_v3.c:559: }
      000DDF F5 82            [12] 3266 	mov	dpl,a
      000DE1 22               [24] 3267 	ret
                                   3268 ;------------------------------------------------------------
                                   3269 ;Allocation info for local variables in function 'reverse'
                                   3270 ;------------------------------------------------------------
                                   3271 ;d                         Allocated to registers r7 
                                   3272 ;rev                       Allocated with name '_reverse_rev_65536_196'
                                   3273 ;val                       Allocated with name '_reverse_val_65536_196'
                                   3274 ;------------------------------------------------------------
                                   3275 ;	ecen4330_lcd_v3.c:561: uint16_t reverse (uint8_t d) {
                                   3276 ;	-----------------------------------------
                                   3277 ;	 function reverse
                                   3278 ;	-----------------------------------------
      000DE2                       3279 _reverse:
      000DE2 AF 82            [24] 3280 	mov	r7,dpl
                                   3281 ;	ecen4330_lcd_v3.c:562: __xdata uint16_t rev = 0;
      000DE4 90r00r0D         [24] 3282 	mov	dptr,#_reverse_rev_65536_196
      000DE7 E4               [12] 3283 	clr	a
      000DE8 F0               [24] 3284 	movx	@dptr,a
      000DE9 A3               [24] 3285 	inc	dptr
      000DEA F0               [24] 3286 	movx	@dptr,a
                                   3287 ;	ecen4330_lcd_v3.c:565: while (d >= 1) {
      000DEB                       3288 00101$:
      000DEB BF 01 00         [24] 3289 	cjne	r7,#0x01,00114$
      000DEE                       3290 00114$:
      000DEE 40 63            [24] 3291 	jc	00103$
                                   3292 ;	ecen4330_lcd_v3.c:566: val = d % 10;
      000DF0 8F 05            [24] 3293 	mov	ar5,r7
      000DF2 7E 00            [12] 3294 	mov	r6,#0x00
      000DF4 75*00 0A         [24] 3295 	mov	__modsint_PARM_2,#0x0a
                                   3296 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DF7 8E*01            [24] 3297 	mov	(__modsint_PARM_2 + 1),r6
      000DF9 8D 82            [24] 3298 	mov	dpl,r5
      000DFB 8E 83            [24] 3299 	mov	dph,r6
      000DFD C0 06            [24] 3300 	push	ar6
      000DFF C0 05            [24] 3301 	push	ar5
      000E01 12r00r00         [24] 3302 	lcall	__modsint
      000E04 AB 82            [24] 3303 	mov	r3,dpl
      000E06 AC 83            [24] 3304 	mov	r4,dph
      000E08 D0 05            [24] 3305 	pop	ar5
      000E0A D0 06            [24] 3306 	pop	ar6
      000E0C 90r00r0F         [24] 3307 	mov	dptr,#_reverse_val_65536_196
      000E0F EB               [12] 3308 	mov	a,r3
      000E10 F0               [24] 3309 	movx	@dptr,a
      000E11 EC               [12] 3310 	mov	a,r4
      000E12 A3               [24] 3311 	inc	dptr
      000E13 F0               [24] 3312 	movx	@dptr,a
                                   3313 ;	ecen4330_lcd_v3.c:567: d = d / 10;
      000E14 75*00 0A         [24] 3314 	mov	__divsint_PARM_2,#0x0a
      000E17 75*01 00         [24] 3315 	mov	(__divsint_PARM_2 + 1),#0x00
      000E1A 8D 82            [24] 3316 	mov	dpl,r5
      000E1C 8E 83            [24] 3317 	mov	dph,r6
      000E1E 12r00r00         [24] 3318 	lcall	__divsint
      000E21 AD 82            [24] 3319 	mov	r5,dpl
      000E23 8D 07            [24] 3320 	mov	ar7,r5
                                   3321 ;	ecen4330_lcd_v3.c:568: rev = rev * 10 + val;
      000E25 90r00r0D         [24] 3322 	mov	dptr,#_reverse_rev_65536_196
      000E28 E0               [24] 3323 	movx	a,@dptr
      000E29 FD               [12] 3324 	mov	r5,a
      000E2A A3               [24] 3325 	inc	dptr
      000E2B E0               [24] 3326 	movx	a,@dptr
      000E2C FE               [12] 3327 	mov	r6,a
      000E2D 8D*00            [24] 3328 	mov	__mulint_PARM_2,r5
      000E2F 8E*01            [24] 3329 	mov	(__mulint_PARM_2 + 1),r6
      000E31 90 00 0A         [24] 3330 	mov	dptr,#0x000a
      000E34 C0 07            [24] 3331 	push	ar7
      000E36 12r00r00         [24] 3332 	lcall	__mulint
      000E39 AD 82            [24] 3333 	mov	r5,dpl
      000E3B AE 83            [24] 3334 	mov	r6,dph
      000E3D D0 07            [24] 3335 	pop	ar7
      000E3F 90r00r0F         [24] 3336 	mov	dptr,#_reverse_val_65536_196
      000E42 E0               [24] 3337 	movx	a,@dptr
      000E43 FB               [12] 3338 	mov	r3,a
      000E44 A3               [24] 3339 	inc	dptr
      000E45 E0               [24] 3340 	movx	a,@dptr
      000E46 FC               [12] 3341 	mov	r4,a
      000E47 90r00r0D         [24] 3342 	mov	dptr,#_reverse_rev_65536_196
      000E4A EB               [12] 3343 	mov	a,r3
      000E4B 2D               [12] 3344 	add	a,r5
      000E4C F0               [24] 3345 	movx	@dptr,a
      000E4D EC               [12] 3346 	mov	a,r4
      000E4E 3E               [12] 3347 	addc	a,r6
      000E4F A3               [24] 3348 	inc	dptr
      000E50 F0               [24] 3349 	movx	@dptr,a
      000E51 80 98            [24] 3350 	sjmp	00101$
      000E53                       3351 00103$:
                                   3352 ;	ecen4330_lcd_v3.c:570: return rev;
      000E53 90r00r0D         [24] 3353 	mov	dptr,#_reverse_rev_65536_196
      000E56 E0               [24] 3354 	movx	a,@dptr
      000E57 FE               [12] 3355 	mov	r6,a
      000E58 A3               [24] 3356 	inc	dptr
      000E59 E0               [24] 3357 	movx	a,@dptr
                                   3358 ;	ecen4330_lcd_v3.c:571: }
      000E5A 8E 82            [24] 3359 	mov	dpl,r6
      000E5C F5 83            [12] 3360 	mov	dph,a
      000E5E 22               [24] 3361 	ret
                                   3362 ;------------------------------------------------------------
                                   3363 ;Allocation info for local variables in function 'asciiToDec'
                                   3364 ;------------------------------------------------------------
                                   3365 ;d                         Allocated with name '_asciiToDec_d_65536_198'
                                   3366 ;val                       Allocated with name '_asciiToDec_val_65536_199'
                                   3367 ;id                        Allocated with name '_asciiToDec_id_65536_199'
                                   3368 ;------------------------------------------------------------
                                   3369 ;	ecen4330_lcd_v3.c:578: void asciiToDec (__xdata uint8_t d) {
                                   3370 ;	-----------------------------------------
                                   3371 ;	 function asciiToDec
                                   3372 ;	-----------------------------------------
      000E5F                       3373 _asciiToDec:
      000E5F E5 82            [12] 3374 	mov	a,dpl
      000E61 90r00r11         [24] 3375 	mov	dptr,#_asciiToDec_d_65536_198
      000E64 F0               [24] 3376 	movx	@dptr,a
                                   3377 ;	ecen4330_lcd_v3.c:581: id = reverse(d);
      000E65 E0               [24] 3378 	movx	a,@dptr
      000E66 F5 82            [12] 3379 	mov	dpl,a
      000E68 12r0DrE2         [24] 3380 	lcall	_reverse
      000E6B E5 82            [12] 3381 	mov	a,dpl
      000E6D 85 83 F0         [24] 3382 	mov	b,dph
      000E70 90r00r13         [24] 3383 	mov	dptr,#_asciiToDec_id_65536_199
      000E73 F0               [24] 3384 	movx	@dptr,a
      000E74 E5 F0            [12] 3385 	mov	a,b
      000E76 A3               [24] 3386 	inc	dptr
      000E77 F0               [24] 3387 	movx	@dptr,a
                                   3388 ;	ecen4330_lcd_v3.c:582: while (id >= 1){
      000E78                       3389 00101$:
      000E78 90r00r13         [24] 3390 	mov	dptr,#_asciiToDec_id_65536_199
      000E7B E0               [24] 3391 	movx	a,@dptr
      000E7C FE               [12] 3392 	mov	r6,a
      000E7D A3               [24] 3393 	inc	dptr
      000E7E E0               [24] 3394 	movx	a,@dptr
      000E7F FF               [12] 3395 	mov	r7,a
      000E80 C3               [12] 3396 	clr	c
      000E81 EE               [12] 3397 	mov	a,r6
      000E82 94 01            [12] 3398 	subb	a,#0x01
      000E84 EF               [12] 3399 	mov	a,r7
      000E85 94 00            [12] 3400 	subb	a,#0x00
      000E87 40 42            [24] 3401 	jc	00104$
                                   3402 ;	ecen4330_lcd_v3.c:584: val = id % 10;
      000E89 75*00 0A         [24] 3403 	mov	__moduint_PARM_2,#0x0a
      000E8C 75*01 00         [24] 3404 	mov	(__moduint_PARM_2 + 1),#0x00
      000E8F 8E 82            [24] 3405 	mov	dpl,r6
      000E91 8F 83            [24] 3406 	mov	dph,r7
      000E93 C0 07            [24] 3407 	push	ar7
      000E95 C0 06            [24] 3408 	push	ar6
      000E97 12r00r00         [24] 3409 	lcall	__moduint
      000E9A AC 82            [24] 3410 	mov	r4,dpl
      000E9C D0 06            [24] 3411 	pop	ar6
      000E9E D0 07            [24] 3412 	pop	ar7
      000EA0 90r00r12         [24] 3413 	mov	dptr,#_asciiToDec_val_65536_199
      000EA3 EC               [12] 3414 	mov	a,r4
      000EA4 F0               [24] 3415 	movx	@dptr,a
                                   3416 ;	ecen4330_lcd_v3.c:585: id = id / 10;
      000EA5 75*00 0A         [24] 3417 	mov	__divuint_PARM_2,#0x0a
      000EA8 75*01 00         [24] 3418 	mov	(__divuint_PARM_2 + 1),#0x00
      000EAB 8E 82            [24] 3419 	mov	dpl,r6
      000EAD 8F 83            [24] 3420 	mov	dph,r7
      000EAF 12r00r00         [24] 3421 	lcall	__divuint
      000EB2 AE 82            [24] 3422 	mov	r6,dpl
      000EB4 AF 83            [24] 3423 	mov	r7,dph
      000EB6 90r00r13         [24] 3424 	mov	dptr,#_asciiToDec_id_65536_199
      000EB9 EE               [12] 3425 	mov	a,r6
      000EBA F0               [24] 3426 	movx	@dptr,a
      000EBB EF               [12] 3427 	mov	a,r7
      000EBC A3               [24] 3428 	inc	dptr
      000EBD F0               [24] 3429 	movx	@dptr,a
                                   3430 ;	ecen4330_lcd_v3.c:586: write(val + '0');
      000EBE 90r00r12         [24] 3431 	mov	dptr,#_asciiToDec_val_65536_199
      000EC1 E0               [24] 3432 	movx	a,@dptr
      000EC2 24 30            [12] 3433 	add	a,#0x30
      000EC4 F5 82            [12] 3434 	mov	dpl,a
      000EC6 12r0BrDD         [24] 3435 	lcall	_write
      000EC9 80 AD            [24] 3436 	sjmp	00101$
      000ECB                       3437 00104$:
                                   3438 ;	ecen4330_lcd_v3.c:589: }
      000ECB 22               [24] 3439 	ret
                                   3440 ;------------------------------------------------------------
                                   3441 ;Allocation info for local variables in function 'asciiToHex'
                                   3442 ;------------------------------------------------------------
                                   3443 ;d                         Allocated to registers r7 
                                   3444 ;val                       Allocated to registers r2 
                                   3445 ;store                     Allocated with name '_asciiToHex_store_65536_202'
                                   3446 ;i                         Allocated to registers r6 
                                   3447 ;------------------------------------------------------------
                                   3448 ;	ecen4330_lcd_v3.c:596: void asciiToHex (uint8_t d) {
                                   3449 ;	-----------------------------------------
                                   3450 ;	 function asciiToHex
                                   3451 ;	-----------------------------------------
      000ECC                       3452 _asciiToHex:
      000ECC AF 82            [24] 3453 	mov	r7,dpl
                                   3454 ;	ecen4330_lcd_v3.c:600: store[0] = 0;
      000ECE 75*48 00         [24] 3455 	mov	_asciiToHex_store_65536_202,#0x00
                                   3456 ;	ecen4330_lcd_v3.c:601: store[1] = 0;
      000ED1 75*49 00         [24] 3457 	mov	(_asciiToHex_store_65536_202 + 0x0001),#0x00
                                   3458 ;	ecen4330_lcd_v3.c:603: while (d >= 1) {
      000ED4 7E 00            [12] 3459 	mov	r6,#0x00
      000ED6                       3460 00104$:
      000ED6 BF 01 00         [24] 3461 	cjne	r7,#0x01,00122$
      000ED9                       3462 00122$:
      000ED9 40 5A            [24] 3463 	jc	00106$
                                   3464 ;	ecen4330_lcd_v3.c:604: val = d % 16;
      000EDB 8F 04            [24] 3465 	mov	ar4,r7
      000EDD 7D 00            [12] 3466 	mov	r5,#0x00
      000EDF 74 0F            [12] 3467 	mov	a,#0x0f
      000EE1 5C               [12] 3468 	anl	a,r4
      000EE2 FA               [12] 3469 	mov	r2,a
                                   3470 ;	ecen4330_lcd_v3.c:605: d = d/16;
      000EE3 75*00 10         [24] 3471 	mov	__divsint_PARM_2,#0x10
                                   3472 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EE6 8D*01            [24] 3473 	mov	(__divsint_PARM_2 + 1),r5
      000EE8 8C 82            [24] 3474 	mov	dpl,r4
      000EEA 8D 83            [24] 3475 	mov	dph,r5
      000EEC C0 06            [24] 3476 	push	ar6
      000EEE C0 02            [24] 3477 	push	ar2
      000EF0 12r00r00         [24] 3478 	lcall	__divsint
      000EF3 AC 82            [24] 3479 	mov	r4,dpl
      000EF5 D0 02            [24] 3480 	pop	ar2
      000EF7 D0 06            [24] 3481 	pop	ar6
      000EF9 8C 07            [24] 3482 	mov	ar7,r4
                                   3483 ;	ecen4330_lcd_v3.c:606: if (val <= 9) {
      000EFB EA               [12] 3484 	mov	a,r2
      000EFC 24 F6            [12] 3485 	add	a,#0xff - 0x09
      000EFE 40 0C            [24] 3486 	jc	00102$
                                   3487 ;	ecen4330_lcd_v3.c:607: store[i] = val + '0';
      000F00 EE               [12] 3488 	mov	a,r6
      000F01 24r48            [12] 3489 	add	a,#_asciiToHex_store_65536_202
      000F03 F9               [12] 3490 	mov	r1,a
      000F04 8A 05            [24] 3491 	mov	ar5,r2
      000F06 74 30            [12] 3492 	mov	a,#0x30
      000F08 2D               [12] 3493 	add	a,r5
      000F09 F7               [12] 3494 	mov	@r1,a
      000F0A 80 26            [24] 3495 	sjmp	00103$
      000F0C                       3496 00102$:
                                   3497 ;	ecen4330_lcd_v3.c:609: store[i] = (val%10) + 'A';
      000F0C EE               [12] 3498 	mov	a,r6
      000F0D 24r48            [12] 3499 	add	a,#_asciiToHex_store_65536_202
      000F0F F9               [12] 3500 	mov	r1,a
      000F10 7D 00            [12] 3501 	mov	r5,#0x00
      000F12 75*00 0A         [24] 3502 	mov	__modsint_PARM_2,#0x0a
                                   3503 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F15 8D*01            [24] 3504 	mov	(__modsint_PARM_2 + 1),r5
      000F17 8A 82            [24] 3505 	mov	dpl,r2
      000F19 8D 83            [24] 3506 	mov	dph,r5
      000F1B C0 07            [24] 3507 	push	ar7
      000F1D C0 06            [24] 3508 	push	ar6
      000F1F C0 01            [24] 3509 	push	ar1
      000F21 12r00r00         [24] 3510 	lcall	__modsint
      000F24 AC 82            [24] 3511 	mov	r4,dpl
      000F26 AD 83            [24] 3512 	mov	r5,dph
      000F28 D0 01            [24] 3513 	pop	ar1
      000F2A D0 06            [24] 3514 	pop	ar6
      000F2C D0 07            [24] 3515 	pop	ar7
      000F2E 74 41            [12] 3516 	mov	a,#0x41
      000F30 2C               [12] 3517 	add	a,r4
      000F31 F7               [12] 3518 	mov	@r1,a
      000F32                       3519 00103$:
                                   3520 ;	ecen4330_lcd_v3.c:612: i++;
      000F32 0E               [12] 3521 	inc	r6
      000F33 80 A1            [24] 3522 	sjmp	00104$
      000F35                       3523 00106$:
                                   3524 ;	ecen4330_lcd_v3.c:615: write(store[1]);
      000F35 85*49 82         [24] 3525 	mov	dpl,(_asciiToHex_store_65536_202 + 0x0001)
      000F38 12r0BrDD         [24] 3526 	lcall	_write
                                   3527 ;	ecen4330_lcd_v3.c:616: write(store[0]);
      000F3B 85*48 82         [24] 3528 	mov	dpl,_asciiToHex_store_65536_202
                                   3529 ;	ecen4330_lcd_v3.c:617: }
      000F3E 02r0BrDD         [24] 3530 	ljmp	_write
                                   3531 ;------------------------------------------------------------
                                   3532 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3533 ;------------------------------------------------------------
                                   3534 ;d                         Allocated to registers r7 
                                   3535 ;------------------------------------------------------------
                                   3536 ;	ecen4330_lcd_v3.c:625: uint8_t convertAsciiHex(uint8_t d) {
                                   3537 ;	-----------------------------------------
                                   3538 ;	 function convertAsciiHex
                                   3539 ;	-----------------------------------------
      000F41                       3540 _convertAsciiHex:
                                   3541 ;	ecen4330_lcd_v3.c:626: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F41 E5 82            [12] 3542 	mov	a,dpl
      000F43 FF               [12] 3543 	mov	r7,a
      000F44 24 C6            [12] 3544 	add	a,#0xff - 0x39
      000F46 92*01            [24] 3545 	mov	_convertAsciiHex_sloc0_1_0,c
      000F48 40 08            [24] 3546 	jc	00103$
      000F4A 8F 06            [24] 3547 	mov	ar6,r7
      000F4C EE               [12] 3548 	mov	a,r6
      000F4D 24 D0            [12] 3549 	add	a,#0xd0
      000F4F FE               [12] 3550 	mov	r6,a
      000F50 80 04            [24] 3551 	sjmp	00104$
      000F52                       3552 00103$:
      000F52 74 C9            [12] 3553 	mov	a,#0xc9
      000F54 2F               [12] 3554 	add	a,r7
      000F55 FE               [12] 3555 	mov	r6,a
      000F56                       3556 00104$:
      000F56 8E 82            [24] 3557 	mov	dpl,r6
                                   3558 ;	ecen4330_lcd_v3.c:627: }
      000F58 22               [24] 3559 	ret
                                   3560 ;------------------------------------------------------------
                                   3561 ;Allocation info for local variables in function 'writeSomeLines'
                                   3562 ;------------------------------------------------------------
                                   3563 ;	ecen4330_lcd_v3.c:633: void writeSomeLines () {
                                   3564 ;	-----------------------------------------
                                   3565 ;	 function writeSomeLines
                                   3566 ;	-----------------------------------------
      000F59                       3567 _writeSomeLines:
                                   3568 ;	ecen4330_lcd_v3.c:634: fillScreen(RED);
      000F59 90 F8 00         [24] 3569 	mov	dptr,#0xf800
      000F5C 12r08r44         [24] 3570 	lcall	_fillScreen
                                   3571 ;	ecen4330_lcd_v3.c:636: delay(20);
      000F5F 90 00 14         [24] 3572 	mov	dptr,#0x0014
      000F62 12r00r21         [24] 3573 	lcall	_delay
                                   3574 ;	ecen4330_lcd_v3.c:637: fillScreen(GREEN);
      000F65 90 07 E0         [24] 3575 	mov	dptr,#0x07e0
      000F68 12r08r44         [24] 3576 	lcall	_fillScreen
                                   3577 ;	ecen4330_lcd_v3.c:639: delay(20);
      000F6B 90 00 14         [24] 3578 	mov	dptr,#0x0014
      000F6E 12r00r21         [24] 3579 	lcall	_delay
                                   3580 ;	ecen4330_lcd_v3.c:641: setRotation(0);
      000F71 75 82 00         [24] 3581 	mov	dpl,#0x00
      000F74 12r00rE8         [24] 3582 	lcall	_setRotation
                                   3583 ;	ecen4330_lcd_v3.c:642: fillScreen(BLACK);
      000F77 90 00 00         [24] 3584 	mov	dptr,#0x0000
      000F7A 12r08r44         [24] 3585 	lcall	_fillScreen
                                   3586 ;	ecen4330_lcd_v3.c:643: testCircles(20, RED);
      000F7D 75*2C 00         [24] 3587 	mov	_testCircles_PARM_2,#0x00
      000F80 75*2D F8         [24] 3588 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F83 75 82 14         [24] 3589 	mov	dpl,#0x14
      000F86 12r06r9D         [24] 3590 	lcall	_testCircles
                                   3591 ;	ecen4330_lcd_v3.c:644: delay(100);
      000F89 90 00 64         [24] 3592 	mov	dptr,#0x0064
      000F8C 12r00r21         [24] 3593 	lcall	_delay
                                   3594 ;	ecen4330_lcd_v3.c:645: fillScreen(BLACK);
      000F8F 90 00 00         [24] 3595 	mov	dptr,#0x0000
      000F92 12r08r44         [24] 3596 	lcall	_fillScreen
                                   3597 ;	ecen4330_lcd_v3.c:646: setTextSize(5);
      000F95 75 82 05         [24] 3598 	mov	dpl,#0x05
      000F98 12r00rD0         [24] 3599 	lcall	_setTextSize
                                   3600 ;	ecen4330_lcd_v3.c:647: setTextColor(CYAN, BLACK);
      000F9B E4               [12] 3601 	clr	a
      000F9C F5*00            [12] 3602 	mov	_setTextColor_PARM_2,a
      000F9E F5*01            [12] 3603 	mov	(_setTextColor_PARM_2 + 1),a
      000FA0 90 07 FF         [24] 3604 	mov	dptr,#0x07ff
      000FA3 12r00rC3         [24] 3605 	lcall	_setTextColor
                                   3606 ;	ecen4330_lcd_v3.c:648: LCD_string_write("Welcome\n");
      000FA6 90r05r0B         [24] 3607 	mov	dptr,#___str_0
      000FA9 75 F0 80         [24] 3608 	mov	b,#0x80
      000FAC 12r0Cr4B         [24] 3609 	lcall	_LCD_string_write
                                   3610 ;	ecen4330_lcd_v3.c:649: setTextSize(3);
      000FAF 75 82 03         [24] 3611 	mov	dpl,#0x03
      000FB2 12r00rD0         [24] 3612 	lcall	_setTextSize
                                   3613 ;	ecen4330_lcd_v3.c:650: LCD_string_write("ECEN-4330\n");
      000FB5 90r05r14         [24] 3614 	mov	dptr,#___str_1
      000FB8 75 F0 80         [24] 3615 	mov	b,#0x80
      000FBB 12r0Cr4B         [24] 3616 	lcall	_LCD_string_write
                                   3617 ;	ecen4330_lcd_v3.c:651: LCD_string_write("Rotation 0");
      000FBE 90r05r1F         [24] 3618 	mov	dptr,#___str_2
      000FC1 75 F0 80         [24] 3619 	mov	b,#0x80
      000FC4 12r0Cr4B         [24] 3620 	lcall	_LCD_string_write
                                   3621 ;	ecen4330_lcd_v3.c:652: delay(200);
      000FC7 90 00 C8         [24] 3622 	mov	dptr,#0x00c8
      000FCA 12r00r21         [24] 3623 	lcall	_delay
                                   3624 ;	ecen4330_lcd_v3.c:653: fillScreen(BLACK);
      000FCD 90 00 00         [24] 3625 	mov	dptr,#0x0000
      000FD0 12r08r44         [24] 3626 	lcall	_fillScreen
                                   3627 ;	ecen4330_lcd_v3.c:654: setRotation(1);
      000FD3 75 82 01         [24] 3628 	mov	dpl,#0x01
      000FD6 12r00rE8         [24] 3629 	lcall	_setRotation
                                   3630 ;	ecen4330_lcd_v3.c:655: setCursor(0,0);
      000FD9 E4               [12] 3631 	clr	a
      000FDA F5*00            [12] 3632 	mov	_setCursor_PARM_2,a
      000FDC F5*01            [12] 3633 	mov	(_setCursor_PARM_2 + 1),a
      000FDE 90 00 00         [24] 3634 	mov	dptr,#0x0000
      000FE1 12r00rB6         [24] 3635 	lcall	_setCursor
                                   3636 ;	ecen4330_lcd_v3.c:656: LCD_string_write("Rotation 1");
      000FE4 90r05r2A         [24] 3637 	mov	dptr,#___str_3
      000FE7 75 F0 80         [24] 3638 	mov	b,#0x80
      000FEA 12r0Cr4B         [24] 3639 	lcall	_LCD_string_write
                                   3640 ;	ecen4330_lcd_v3.c:657: delay(500);
      000FED 90 01 F4         [24] 3641 	mov	dptr,#0x01f4
      000FF0 12r00r21         [24] 3642 	lcall	_delay
                                   3643 ;	ecen4330_lcd_v3.c:658: fillScreen(BLACK);
      000FF3 90 00 00         [24] 3644 	mov	dptr,#0x0000
      000FF6 12r08r44         [24] 3645 	lcall	_fillScreen
                                   3646 ;	ecen4330_lcd_v3.c:659: setRotation(2);
      000FF9 75 82 02         [24] 3647 	mov	dpl,#0x02
      000FFC 12r00rE8         [24] 3648 	lcall	_setRotation
                                   3649 ;	ecen4330_lcd_v3.c:660: setCursor(0,0);
      000FFF E4               [12] 3650 	clr	a
      001000 F5*00            [12] 3651 	mov	_setCursor_PARM_2,a
      001002 F5*01            [12] 3652 	mov	(_setCursor_PARM_2 + 1),a
      001004 90 00 00         [24] 3653 	mov	dptr,#0x0000
      001007 12r00rB6         [24] 3654 	lcall	_setCursor
                                   3655 ;	ecen4330_lcd_v3.c:661: LCD_string_write("Rotation 2");
      00100A 90r05r35         [24] 3656 	mov	dptr,#___str_4
      00100D 75 F0 80         [24] 3657 	mov	b,#0x80
      001010 12r0Cr4B         [24] 3658 	lcall	_LCD_string_write
                                   3659 ;	ecen4330_lcd_v3.c:662: delay(500);
      001013 90 01 F4         [24] 3660 	mov	dptr,#0x01f4
      001016 12r00r21         [24] 3661 	lcall	_delay
                                   3662 ;	ecen4330_lcd_v3.c:663: fillScreen(BLACK);
      001019 90 00 00         [24] 3663 	mov	dptr,#0x0000
      00101C 12r08r44         [24] 3664 	lcall	_fillScreen
                                   3665 ;	ecen4330_lcd_v3.c:664: setRotation(3);
      00101F 75 82 03         [24] 3666 	mov	dpl,#0x03
      001022 12r00rE8         [24] 3667 	lcall	_setRotation
                                   3668 ;	ecen4330_lcd_v3.c:665: setCursor(0,0);
      001025 E4               [12] 3669 	clr	a
      001026 F5*00            [12] 3670 	mov	_setCursor_PARM_2,a
      001028 F5*01            [12] 3671 	mov	(_setCursor_PARM_2 + 1),a
      00102A 90 00 00         [24] 3672 	mov	dptr,#0x0000
      00102D 12r00rB6         [24] 3673 	lcall	_setCursor
                                   3674 ;	ecen4330_lcd_v3.c:666: delay(200);
      001030 90 00 C8         [24] 3675 	mov	dptr,#0x00c8
      001033 12r00r21         [24] 3676 	lcall	_delay
                                   3677 ;	ecen4330_lcd_v3.c:667: LCD_string_write("Rotation 3");
      001036 90r05r40         [24] 3678 	mov	dptr,#___str_5
      001039 75 F0 80         [24] 3679 	mov	b,#0x80
      00103C 12r0Cr4B         [24] 3680 	lcall	_LCD_string_write
                                   3681 ;	ecen4330_lcd_v3.c:668: delay(200);
      00103F 90 00 C8         [24] 3682 	mov	dptr,#0x00c8
                                   3683 ;	ecen4330_lcd_v3.c:669: }
      001042 02r00r21         [24] 3684 	ljmp	_delay
                                   3685 ;------------------------------------------------------------
                                   3686 ;Allocation info for local variables in function 'getAddress'
                                   3687 ;------------------------------------------------------------
                                   3688 ;input                     Allocated with name '_getAddress_input_65536_227'
                                   3689 ;hex                       Allocated with name '_getAddress_hex_65536_227'
                                   3690 ;i                         Allocated with name '_getAddress_i_65536_227'
                                   3691 ;address                   Allocated with name '_getAddress_address_65536_227'
                                   3692 ;------------------------------------------------------------
                                   3693 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3694 ;	-----------------------------------------
                                   3695 ;	 function getAddress
                                   3696 ;	-----------------------------------------
      001045                       3697 _getAddress:
                                   3698 ;	getFunctions.c:16: address = 0;
      001045 90r00r15         [24] 3699 	mov	dptr,#_getAddress_address_65536_227
      001048 E4               [12] 3700 	clr	a
      001049 F0               [24] 3701 	movx	@dptr,a
      00104A A3               [24] 3702 	inc	dptr
      00104B F0               [24] 3703 	movx	@dptr,a
                                   3704 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00104C 7F 00            [12] 3705 	mov	r7,#0x00
      00104E                       3706 00104$:
                                   3707 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      00104E C0 07            [24] 3708 	push	ar7
      001050 12r0CrEA         [24] 3709 	lcall	_keyDetect
                                   3710 ;	getFunctions.c:21: write(input);						// display nibble to user
      001053 AE 82            [24] 3711 	mov  r6,dpl
      001055 C0 06            [24] 3712 	push	ar6
      001057 12r0BrDD         [24] 3713 	lcall	_write
      00105A D0 06            [24] 3714 	pop	ar6
                                   3715 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      00105C 8E 82            [24] 3716 	mov	dpl,r6
      00105E 12r0Fr41         [24] 3717 	lcall	_convertAsciiHex
      001061 AE 82            [24] 3718 	mov	r6,dpl
      001063 D0 07            [24] 3719 	pop	ar7
                                   3720 ;	getFunctions.c:25: address = address | hex;
      001065 90r00r15         [24] 3721 	mov	dptr,#_getAddress_address_65536_227
      001068 E0               [24] 3722 	movx	a,@dptr
      001069 FC               [12] 3723 	mov	r4,a
      00106A A3               [24] 3724 	inc	dptr
      00106B E0               [24] 3725 	movx	a,@dptr
      00106C FD               [12] 3726 	mov	r5,a
      00106D 7B 00            [12] 3727 	mov	r3,#0x00
      00106F 90r00r15         [24] 3728 	mov	dptr,#_getAddress_address_65536_227
      001072 EE               [12] 3729 	mov	a,r6
      001073 4C               [12] 3730 	orl	a,r4
      001074 F0               [24] 3731 	movx	@dptr,a
      001075 EB               [12] 3732 	mov	a,r3
      001076 4D               [12] 3733 	orl	a,r5
      001077 A3               [24] 3734 	inc	dptr
      001078 F0               [24] 3735 	movx	@dptr,a
                                   3736 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      001079 BF 03 02         [24] 3737 	cjne	r7,#0x03,00121$
      00107C 80 1C            [24] 3738 	sjmp	00105$
      00107E                       3739 00121$:
      00107E 90r00r15         [24] 3740 	mov	dptr,#_getAddress_address_65536_227
      001081 E0               [24] 3741 	movx	a,@dptr
      001082 FD               [12] 3742 	mov	r5,a
      001083 A3               [24] 3743 	inc	dptr
      001084 E0               [24] 3744 	movx	a,@dptr
      001085 C4               [12] 3745 	swap	a
      001086 54 F0            [12] 3746 	anl	a,#0xf0
      001088 CD               [12] 3747 	xch	a,r5
      001089 C4               [12] 3748 	swap	a
      00108A CD               [12] 3749 	xch	a,r5
      00108B 6D               [12] 3750 	xrl	a,r5
      00108C CD               [12] 3751 	xch	a,r5
      00108D 54 F0            [12] 3752 	anl	a,#0xf0
      00108F CD               [12] 3753 	xch	a,r5
      001090 6D               [12] 3754 	xrl	a,r5
      001091 FE               [12] 3755 	mov	r6,a
      001092 90r00r15         [24] 3756 	mov	dptr,#_getAddress_address_65536_227
      001095 ED               [12] 3757 	mov	a,r5
      001096 F0               [24] 3758 	movx	@dptr,a
      001097 EE               [12] 3759 	mov	a,r6
      001098 A3               [24] 3760 	inc	dptr
      001099 F0               [24] 3761 	movx	@dptr,a
      00109A                       3762 00105$:
                                   3763 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00109A 0F               [12] 3764 	inc	r7
      00109B BF 04 00         [24] 3765 	cjne	r7,#0x04,00122$
      00109E                       3766 00122$:
      00109E 40 AE            [24] 3767 	jc	00104$
                                   3768 ;	getFunctions.c:28: return address;
      0010A0 90r00r15         [24] 3769 	mov	dptr,#_getAddress_address_65536_227
      0010A3 E0               [24] 3770 	movx	a,@dptr
      0010A4 FE               [12] 3771 	mov	r6,a
      0010A5 A3               [24] 3772 	inc	dptr
      0010A6 E0               [24] 3773 	movx	a,@dptr
                                   3774 ;	getFunctions.c:29: }
      0010A7 8E 82            [24] 3775 	mov	dpl,r6
      0010A9 F5 83            [12] 3776 	mov	dph,a
      0010AB 22               [24] 3777 	ret
                                   3778 ;------------------------------------------------------------
                                   3779 ;Allocation info for local variables in function 'getByte'
                                   3780 ;------------------------------------------------------------
                                   3781 ;input                     Allocated with name '_getByte_input_65536_230'
                                   3782 ;hex                       Allocated with name '_getByte_hex_65536_230'
                                   3783 ;byte                      Allocated with name '_getByte_byte_65536_230'
                                   3784 ;i                         Allocated with name '_getByte_i_65536_230'
                                   3785 ;------------------------------------------------------------
                                   3786 ;	getFunctions.c:36: uint8_t getByte() {
                                   3787 ;	-----------------------------------------
                                   3788 ;	 function getByte
                                   3789 ;	-----------------------------------------
      0010AC                       3790 _getByte:
                                   3791 ;	getFunctions.c:40: byte = 0;
      0010AC 90r00r17         [24] 3792 	mov	dptr,#_getByte_byte_65536_230
      0010AF E4               [12] 3793 	clr	a
      0010B0 F0               [24] 3794 	movx	@dptr,a
                                   3795 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010B1 7F 00            [12] 3796 	mov	r7,#0x00
      0010B3                       3797 00104$:
                                   3798 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      0010B3 C0 07            [24] 3799 	push	ar7
      0010B5 12r0CrEA         [24] 3800 	lcall	_keyDetect
                                   3801 ;	getFunctions.c:45: write(input);						// display nibble to user
      0010B8 AE 82            [24] 3802 	mov  r6,dpl
      0010BA C0 06            [24] 3803 	push	ar6
      0010BC 12r0BrDD         [24] 3804 	lcall	_write
      0010BF D0 06            [24] 3805 	pop	ar6
                                   3806 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      0010C1 8E 82            [24] 3807 	mov	dpl,r6
      0010C3 12r0Fr41         [24] 3808 	lcall	_convertAsciiHex
      0010C6 AE 82            [24] 3809 	mov	r6,dpl
      0010C8 D0 07            [24] 3810 	pop	ar7
                                   3811 ;	getFunctions.c:49: byte = byte | hex;
      0010CA 90r00r17         [24] 3812 	mov	dptr,#_getByte_byte_65536_230
      0010CD E0               [24] 3813 	movx	a,@dptr
      0010CE 4E               [12] 3814 	orl	a,r6
      0010CF F0               [24] 3815 	movx	@dptr,a
                                   3816 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010D0 BF 01 02         [24] 3817 	cjne	r7,#0x01,00121$
      0010D3 80 09            [24] 3818 	sjmp	00105$
      0010D5                       3819 00121$:
      0010D5 90r00r17         [24] 3820 	mov	dptr,#_getByte_byte_65536_230
      0010D8 E0               [24] 3821 	movx	a,@dptr
      0010D9 C4               [12] 3822 	swap	a
      0010DA 54 F0            [12] 3823 	anl	a,#0xf0
      0010DC FE               [12] 3824 	mov	r6,a
      0010DD F0               [24] 3825 	movx	@dptr,a
      0010DE                       3826 00105$:
                                   3827 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010DE 0F               [12] 3828 	inc	r7
      0010DF BF 02 00         [24] 3829 	cjne	r7,#0x02,00122$
      0010E2                       3830 00122$:
      0010E2 40 CF            [24] 3831 	jc	00104$
                                   3832 ;	getFunctions.c:52: return byte;
      0010E4 90r00r17         [24] 3833 	mov	dptr,#_getByte_byte_65536_230
      0010E7 E0               [24] 3834 	movx	a,@dptr
                                   3835 ;	getFunctions.c:53: }
      0010E8 F5 82            [12] 3836 	mov	dpl,a
      0010EA 22               [24] 3837 	ret
                                   3838 ;------------------------------------------------------------
                                   3839 ;Allocation info for local variables in function 'dumpPage'
                                   3840 ;------------------------------------------------------------
                                   3841 ;start                     Allocated with name '_dumpPage_start_65536_233'
                                   3842 ;data                      Allocated to registers r1 
                                   3843 ;ramAddress                Allocated with name '_dumpPage_ramAddress_65537_235'
                                   3844 ;high                      Allocated to registers 
                                   3845 ;low                       Allocated to registers r6 
                                   3846 ;sloc0                     Allocated with name '_dumpPage_sloc0_1_0'
                                   3847 ;n                         Allocated with name '_dumpPage_PARM_2'
                                   3848 ;type                      Allocated with name '_dumpPage_PARM_3'
                                   3849 ;i                         Allocated with name '_dumpPage_i_65537_235'
                                   3850 ;j                         Allocated with name '_dumpPage_j_65537_235'
                                   3851 ;------------------------------------------------------------
                                   3852 ;	dump2.c:8: void dumpPage(uint16_t start, __xdata uint8_t n, __xdata uint8_t type) {
                                   3853 ;	-----------------------------------------
                                   3854 ;	 function dumpPage
                                   3855 ;	-----------------------------------------
      0010EB                       3856 _dumpPage:
      0010EB 85 82*4A         [24] 3857 	mov	_dumpPage_start_65536_233,dpl
      0010EE 85 83*4B         [24] 3858 	mov	(_dumpPage_start_65536_233 + 1),dph
                                   3859 ;	dump2.c:10: fillScreen(GRAY);
      0010F1 90 D6 BA         [24] 3860 	mov	dptr,#0xd6ba
      0010F4 12r08r44         [24] 3861 	lcall	_fillScreen
                                   3862 ;	dump2.c:11: setCursor(0, 0);
      0010F7 E4               [12] 3863 	clr	a
      0010F8 F5*00            [12] 3864 	mov	_setCursor_PARM_2,a
      0010FA F5*01            [12] 3865 	mov	(_setCursor_PARM_2 + 1),a
      0010FC 90 00 00         [24] 3866 	mov	dptr,#0x0000
      0010FF 12r00rB6         [24] 3867 	lcall	_setCursor
                                   3868 ;	dump2.c:12: setTextSize(2);
      001102 75 82 02         [24] 3869 	mov	dpl,#0x02
      001105 12r00rD0         [24] 3870 	lcall	_setTextSize
                                   3871 ;	dump2.c:24: for (i = 0; i < n * type; i += type) {
      001108 90r00r1A         [24] 3872 	mov	dptr,#_dumpPage_i_65537_235
      00110B E4               [12] 3873 	clr	a
      00110C F0               [24] 3874 	movx	@dptr,a
      00110D 90r00r19         [24] 3875 	mov	dptr,#_dumpPage_PARM_3
      001110 E0               [24] 3876 	movx	a,@dptr
      001111 FD               [12] 3877 	mov	r5,a
      001112 90r00r18         [24] 3878 	mov	dptr,#_dumpPage_PARM_2
      001115 E0               [24] 3879 	movx	a,@dptr
      001116 F5 F0            [12] 3880 	mov	b,a
      001118 ED               [12] 3881 	mov	a,r5
      001119 A4               [48] 3882 	mul	ab
      00111A FB               [12] 3883 	mov	r3,a
      00111B AC F0            [24] 3884 	mov	r4,b
      00111D                       3885 00109$:
      00111D 90r00r1A         [24] 3886 	mov	dptr,#_dumpPage_i_65537_235
      001120 E0               [24] 3887 	movx	a,@dptr
      001121 FA               [12] 3888 	mov	r2,a
      001122 F8               [12] 3889 	mov	r0,a
      001123 79 00            [12] 3890 	mov	r1,#0x00
      001125 C3               [12] 3891 	clr	c
      001126 E8               [12] 3892 	mov	a,r0
      001127 9B               [12] 3893 	subb	a,r3
      001128 E9               [12] 3894 	mov	a,r1
      001129 64 80            [12] 3895 	xrl	a,#0x80
      00112B 8C F0            [24] 3896 	mov	b,r4
      00112D 63 F0 80         [24] 3897 	xrl	b,#0x80
      001130 95 F0            [12] 3898 	subb	a,b
      001132 40 01            [24] 3899 	jc	00134$
      001134 22               [24] 3900 	ret
      001135                       3901 00134$:
                                   3902 ;	dump2.c:26: if ((i * type) + start == __END_RAM__) break;
      001135 8A F0            [24] 3903 	mov	b,r2
      001137 ED               [12] 3904 	mov	a,r5
      001138 A4               [48] 3905 	mul	ab
      001139 F8               [12] 3906 	mov	r0,a
      00113A A9 F0            [24] 3907 	mov	r1,b
      00113C 88*4E            [24] 3908 	mov	_dumpPage_sloc0_1_0,r0
      00113E 89*4F            [24] 3909 	mov	(_dumpPage_sloc0_1_0 + 1),r1
      001140 E5*4A            [12] 3910 	mov	a,_dumpPage_start_65536_233
      001142 25*4E            [12] 3911 	add	a,_dumpPage_sloc0_1_0
      001144 FE               [12] 3912 	mov	r6,a
      001145 E5*4B            [12] 3913 	mov	a,(_dumpPage_start_65536_233 + 1)
      001147 35*4F            [12] 3914 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      001149 FF               [12] 3915 	mov	r7,a
      00114A BE FF 04         [24] 3916 	cjne	r6,#0xff,00135$
      00114D BF FF 01         [24] 3917 	cjne	r7,#0xff,00135$
      001150 22               [24] 3918 	ret
      001151                       3919 00135$:
                                   3920 ;	dump2.c:29: IOM = 0;
                                   3921 ;	assignBit
      001151 C2 B4            [12] 3922 	clr	_P3_4
                                   3923 ;	dump2.c:30: ramAddress = (uint16_t __xdata*)((i * type) + start);
      001153 E5*4A            [12] 3924 	mov	a,_dumpPage_start_65536_233
      001155 25*4E            [12] 3925 	add	a,_dumpPage_sloc0_1_0
      001157 FE               [12] 3926 	mov	r6,a
      001158 E5*4B            [12] 3927 	mov	a,(_dumpPage_start_65536_233 + 1)
      00115A 35*4F            [12] 3928 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      00115C FF               [12] 3929 	mov	r7,a
      00115D 8E*4C            [24] 3930 	mov	_dumpPage_ramAddress_65537_235,r6
      00115F 8F*4D            [24] 3931 	mov	(_dumpPage_ramAddress_65537_235 + 1),r7
                                   3932 ;	dump2.c:31: IOM = 1;
                                   3933 ;	assignBit
      001161 D2 B4            [12] 3934 	setb	_P3_4
                                   3935 ;	dump2.c:33: high = HIGHBYTE(start + (i * type));
      001163 AE*4A            [24] 3936 	mov	r6,_dumpPage_start_65536_233
      001165 AF*4B            [24] 3937 	mov	r7,(_dumpPage_start_65536_233 + 1)
      001167 E8               [12] 3938 	mov	a,r0
      001168 2E               [12] 3939 	add	a,r6
      001169 E9               [12] 3940 	mov	a,r1
      00116A 3F               [12] 3941 	addc	a,r7
      00116B F5 82            [12] 3942 	mov	dpl,a
                                   3943 ;	dump2.c:34: low = LOWBYTE(start + (i * type));
      00116D AE*4A            [24] 3944 	mov	r6,_dumpPage_start_65536_233
      00116F 8A F0            [24] 3945 	mov	b,r2
      001171 ED               [12] 3946 	mov	a,r5
      001172 A4               [48] 3947 	mul	ab
      001173 2E               [12] 3948 	add	a,r6
      001174 FE               [12] 3949 	mov	r6,a
                                   3950 ;	dump2.c:37: asciiToHex(high);
      001175 C0 06            [24] 3951 	push	ar6
      001177 C0 05            [24] 3952 	push	ar5
      001179 C0 04            [24] 3953 	push	ar4
      00117B C0 03            [24] 3954 	push	ar3
      00117D 12r0ErCC         [24] 3955 	lcall	_asciiToHex
      001180 D0 03            [24] 3956 	pop	ar3
      001182 D0 04            [24] 3957 	pop	ar4
      001184 D0 05            [24] 3958 	pop	ar5
      001186 D0 06            [24] 3959 	pop	ar6
                                   3960 ;	dump2.c:38: asciiToHex(low);
      001188 8E 82            [24] 3961 	mov	dpl,r6
      00118A C0 05            [24] 3962 	push	ar5
      00118C C0 04            [24] 3963 	push	ar4
      00118E C0 03            [24] 3964 	push	ar3
      001190 12r0ErCC         [24] 3965 	lcall	_asciiToHex
                                   3966 ;	dump2.c:39: LCD_string_write(": ");
      001193 90r05r4B         [24] 3967 	mov	dptr,#___str_6
      001196 75 F0 80         [24] 3968 	mov	b,#0x80
      001199 12r0Cr4B         [24] 3969 	lcall	_LCD_string_write
      00119C D0 03            [24] 3970 	pop	ar3
      00119E D0 04            [24] 3971 	pop	ar4
      0011A0 D0 05            [24] 3972 	pop	ar5
                                   3973 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011A2 AE*4C            [24] 3974 	mov	r6,_dumpPage_ramAddress_65537_235
      0011A4 AF*4D            [24] 3975 	mov	r7,(_dumpPage_ramAddress_65537_235 + 1)
      0011A6 7A 00            [12] 3976 	mov	r2,#0x00
      0011A8                       3977 00106$:
      0011A8 C3               [12] 3978 	clr	c
      0011A9 EA               [12] 3979 	mov	a,r2
      0011AA 9D               [12] 3980 	subb	a,r5
      0011AB 50 31            [24] 3981 	jnc	00103$
                                   3982 ;	dump2.c:44: IOM = 0;
                                   3983 ;	assignBit
      0011AD C2 B4            [12] 3984 	clr	_P3_4
                                   3985 ;	dump2.c:45: data = *ramAddress;
      0011AF 8E 82            [24] 3986 	mov	dpl,r6
      0011B1 8F 83            [24] 3987 	mov	dph,r7
      0011B3 E0               [24] 3988 	movx	a,@dptr
      0011B4 F9               [12] 3989 	mov	r1,a
                                   3990 ;	dump2.c:46: &ramAddress++;
      0011B5 74 02            [12] 3991 	mov	a,#0x02
      0011B7 2E               [12] 3992 	add	a,r6
      0011B8 FE               [12] 3993 	mov	r6,a
      0011B9 E4               [12] 3994 	clr	a
      0011BA 3F               [12] 3995 	addc	a,r7
      0011BB FF               [12] 3996 	mov	r7,a
                                   3997 ;	dump2.c:47: IOM = 1;
                                   3998 ;	assignBit
      0011BC D2 B4            [12] 3999 	setb	_P3_4
                                   4000 ;	dump2.c:49: asciiToHex(data);
      0011BE 89 82            [24] 4001 	mov	dpl,r1
      0011C0 C0 07            [24] 4002 	push	ar7
      0011C2 C0 06            [24] 4003 	push	ar6
      0011C4 C0 05            [24] 4004 	push	ar5
      0011C6 C0 04            [24] 4005 	push	ar4
      0011C8 C0 03            [24] 4006 	push	ar3
      0011CA C0 02            [24] 4007 	push	ar2
      0011CC 12r0ErCC         [24] 4008 	lcall	_asciiToHex
      0011CF D0 02            [24] 4009 	pop	ar2
      0011D1 D0 03            [24] 4010 	pop	ar3
      0011D3 D0 04            [24] 4011 	pop	ar4
      0011D5 D0 05            [24] 4012 	pop	ar5
      0011D7 D0 06            [24] 4013 	pop	ar6
      0011D9 D0 07            [24] 4014 	pop	ar7
                                   4015 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011DB 0A               [12] 4016 	inc	r2
      0011DC 80 CA            [24] 4017 	sjmp	00106$
      0011DE                       4018 00103$:
                                   4019 ;	dump2.c:52: write('\n');
      0011DE 75 82 0A         [24] 4020 	mov	dpl,#0x0a
      0011E1 C0 05            [24] 4021 	push	ar5
      0011E3 C0 04            [24] 4022 	push	ar4
      0011E5 C0 03            [24] 4023 	push	ar3
      0011E7 12r0BrDD         [24] 4024 	lcall	_write
      0011EA D0 03            [24] 4025 	pop	ar3
      0011EC D0 04            [24] 4026 	pop	ar4
      0011EE D0 05            [24] 4027 	pop	ar5
                                   4028 ;	dump2.c:24: for (i = 0; i < n * type; i += type) {
      0011F0 90r00r1A         [24] 4029 	mov	dptr,#_dumpPage_i_65537_235
      0011F3 E0               [24] 4030 	movx	a,@dptr
      0011F4 2D               [12] 4031 	add	a,r5
      0011F5 F0               [24] 4032 	movx	@dptr,a
                                   4033 ;	dump2.c:54: }
      0011F6 02r11r1D         [24] 4034 	ljmp	00109$
                                   4035 ;------------------------------------------------------------
                                   4036 ;Allocation info for local variables in function 'dump'
                                   4037 ;------------------------------------------------------------
                                   4038 ;type                      Allocated with name '_dump_type_65537_242'
                                   4039 ;size                      Allocated with name '_dump_size_65537_242'
                                   4040 ;page                      Allocated with name '_dump_page_65537_242'
                                   4041 ;input                     Allocated with name '_dump_input_65537_242'
                                   4042 ;pages                     Allocated with name '_dump_pages_65537_242'
                                   4043 ;address                   Allocated with name '_dump_address_65537_242'
                                   4044 ;------------------------------------------------------------
                                   4045 ;	dump2.c:60: void dump(void) {
                                   4046 ;	-----------------------------------------
                                   4047 ;	 function dump
                                   4048 ;	-----------------------------------------
      0011F9                       4049 _dump:
                                   4050 ;	dump2.c:62: fillScreen(GRAY);
      0011F9 90 D6 BA         [24] 4051 	mov	dptr,#0xd6ba
      0011FC 12r08r44         [24] 4052 	lcall	_fillScreen
                                   4053 ;	dump2.c:63: setCursor(0, 0);
      0011FF E4               [12] 4054 	clr	a
      001200 F5*00            [12] 4055 	mov	_setCursor_PARM_2,a
      001202 F5*01            [12] 4056 	mov	(_setCursor_PARM_2 + 1),a
      001204 90 00 00         [24] 4057 	mov	dptr,#0x0000
      001207 12r00rB6         [24] 4058 	lcall	_setCursor
                                   4059 ;	dump2.c:64: setTextSize(2);
      00120A 75 82 02         [24] 4060 	mov	dpl,#0x02
      00120D 12r00rD0         [24] 4061 	lcall	_setTextSize
                                   4062 ;	dump2.c:74: page = 1;
      001210 90r00r1C         [24] 4063 	mov	dptr,#_dump_page_65537_242
      001213 74 01            [12] 4064 	mov	a,#0x01
      001215 F0               [24] 4065 	movx	@dptr,a
                                   4066 ;	dump2.c:77: LCD_string_write("Enter start address:\n");
      001216 90r05r4E         [24] 4067 	mov	dptr,#___str_7
      001219 75 F0 80         [24] 4068 	mov	b,#0x80
      00121C 12r0Cr4B         [24] 4069 	lcall	_LCD_string_write
                                   4070 ;	dump2.c:78: address = getAddress();
      00121F 12r10r45         [24] 4071 	lcall	_getAddress
      001222 AE 82            [24] 4072 	mov	r6,dpl
      001224 AF 83            [24] 4073 	mov	r7,dph
      001226 90r00r1D         [24] 4074 	mov	dptr,#_dump_address_65537_242
      001229 EE               [12] 4075 	mov	a,r6
      00122A F0               [24] 4076 	movx	@dptr,a
      00122B EF               [12] 4077 	mov	a,r7
      00122C A3               [24] 4078 	inc	dptr
      00122D F0               [24] 4079 	movx	@dptr,a
                                   4080 ;	dump2.c:79: write('\n');
      00122E 75 82 0A         [24] 4081 	mov	dpl,#0x0a
      001231 C0 07            [24] 4082 	push	ar7
      001233 C0 06            [24] 4083 	push	ar6
      001235 12r0BrDD         [24] 4084 	lcall	_write
                                   4085 ;	dump2.c:82: LCD_string_write("Enter data type\n");
      001238 90r05r64         [24] 4086 	mov	dptr,#___str_8
      00123B 75 F0 80         [24] 4087 	mov	b,#0x80
      00123E 12r0Cr4B         [24] 4088 	lcall	_LCD_string_write
                                   4089 ;	dump2.c:83: LCD_string_write("B-Byte, A-Word,\n");
      001241 90r05r75         [24] 4090 	mov	dptr,#___str_9
      001244 75 F0 80         [24] 4091 	mov	b,#0x80
      001247 12r0Cr4B         [24] 4092 	lcall	_LCD_string_write
                                   4093 ;	dump2.c:84: LCD_string_write("D-Double word\n");
      00124A 90r05r86         [24] 4094 	mov	dptr,#___str_10
      00124D 75 F0 80         [24] 4095 	mov	b,#0x80
      001250 12r0Cr4B         [24] 4096 	lcall	_LCD_string_write
      001253 D0 06            [24] 4097 	pop	ar6
      001255 D0 07            [24] 4098 	pop	ar7
                                   4099 ;	dump2.c:87: do {
      001257                       4100 00108$:
                                   4101 ;	dump2.c:88: type = keyDetect();
      001257 C0 07            [24] 4102 	push	ar7
      001259 C0 06            [24] 4103 	push	ar6
      00125B 12r0CrEA         [24] 4104 	lcall	_keyDetect
      00125E AD 82            [24] 4105 	mov	r5,dpl
      001260 D0 06            [24] 4106 	pop	ar6
      001262 D0 07            [24] 4107 	pop	ar7
      001264 90r00r1B         [24] 4108 	mov	dptr,#_dump_type_65537_242
      001267 ED               [12] 4109 	mov	a,r5
      001268 F0               [24] 4110 	movx	@dptr,a
                                   4111 ;	dump2.c:89: switch(type) {
      001269 BD 41 02         [24] 4112 	cjne	r5,#0x41,00202$
      00126C 80 23            [24] 4113 	sjmp	00102$
      00126E                       4114 00202$:
      00126E BD 42 02         [24] 4115 	cjne	r5,#0x42,00203$
      001271 80 05            [24] 4116 	sjmp	00101$
      001273                       4117 00203$:
                                   4118 ;	dump2.c:90: case 'B': {
      001273 BD 44 4B         [24] 4119 	cjne	r5,#0x44,00109$
      001276 80 32            [24] 4120 	sjmp	00103$
      001278                       4121 00101$:
                                   4122 ;	dump2.c:91: type = 1;
      001278 90r00r1B         [24] 4123 	mov	dptr,#_dump_type_65537_242
      00127B 74 01            [12] 4124 	mov	a,#0x01
      00127D F0               [24] 4125 	movx	@dptr,a
                                   4126 ;	dump2.c:92: LCD_string_write("Byte\n");
      00127E 90r05r95         [24] 4127 	mov	dptr,#___str_11
      001281 75 F0 80         [24] 4128 	mov	b,#0x80
      001284 C0 07            [24] 4129 	push	ar7
      001286 C0 06            [24] 4130 	push	ar6
      001288 12r0Cr4B         [24] 4131 	lcall	_LCD_string_write
      00128B D0 06            [24] 4132 	pop	ar6
      00128D D0 07            [24] 4133 	pop	ar7
                                   4134 ;	dump2.c:93: break;
                                   4135 ;	dump2.c:95: case 'A': {
      00128F 80 30            [24] 4136 	sjmp	00109$
      001291                       4137 00102$:
                                   4138 ;	dump2.c:96: type = 2; 
      001291 90r00r1B         [24] 4139 	mov	dptr,#_dump_type_65537_242
      001294 74 02            [12] 4140 	mov	a,#0x02
      001296 F0               [24] 4141 	movx	@dptr,a
                                   4142 ;	dump2.c:97: LCD_string_write("Word\n");
      001297 90r05r9B         [24] 4143 	mov	dptr,#___str_12
      00129A 75 F0 80         [24] 4144 	mov	b,#0x80
      00129D C0 07            [24] 4145 	push	ar7
      00129F C0 06            [24] 4146 	push	ar6
      0012A1 12r0Cr4B         [24] 4147 	lcall	_LCD_string_write
      0012A4 D0 06            [24] 4148 	pop	ar6
      0012A6 D0 07            [24] 4149 	pop	ar7
                                   4150 ;	dump2.c:98: break;
                                   4151 ;	dump2.c:100: case 'D': {
      0012A8 80 17            [24] 4152 	sjmp	00109$
      0012AA                       4153 00103$:
                                   4154 ;	dump2.c:101: type = 4;
      0012AA 90r00r1B         [24] 4155 	mov	dptr,#_dump_type_65537_242
      0012AD 74 04            [12] 4156 	mov	a,#0x04
      0012AF F0               [24] 4157 	movx	@dptr,a
                                   4158 ;	dump2.c:102: LCD_string_write("Double word\n");
      0012B0 90r05rA1         [24] 4159 	mov	dptr,#___str_13
      0012B3 75 F0 80         [24] 4160 	mov	b,#0x80
      0012B6 C0 07            [24] 4161 	push	ar7
      0012B8 C0 06            [24] 4162 	push	ar6
      0012BA 12r0Cr4B         [24] 4163 	lcall	_LCD_string_write
      0012BD D0 06            [24] 4164 	pop	ar6
      0012BF D0 07            [24] 4165 	pop	ar7
                                   4166 ;	dump2.c:106: }
      0012C1                       4167 00109$:
                                   4168 ;	dump2.c:107: } while(type != 1 && type != 2 && type != 4);
      0012C1 90r00r1B         [24] 4169 	mov	dptr,#_dump_type_65537_242
      0012C4 E0               [24] 4170 	movx	a,@dptr
      0012C5 FD               [12] 4171 	mov	r5,a
      0012C6 BD 01 02         [24] 4172 	cjne	r5,#0x01,00205$
      0012C9 80 0D            [24] 4173 	sjmp	00110$
      0012CB                       4174 00205$:
      0012CB BD 02 02         [24] 4175 	cjne	r5,#0x02,00206$
      0012CE 80 08            [24] 4176 	sjmp	00110$
      0012D0                       4177 00206$:
      0012D0 BD 04 02         [24] 4178 	cjne	r5,#0x04,00207$
      0012D3 80 03            [24] 4179 	sjmp	00208$
      0012D5                       4180 00207$:
      0012D5 02r12r57         [24] 4181 	ljmp	00108$
      0012D8                       4182 00208$:
      0012D8                       4183 00110$:
                                   4184 ;	dump2.c:110: LCD_string_write("Enter block size:\n");
      0012D8 90r05rAE         [24] 4185 	mov	dptr,#___str_14
      0012DB 75 F0 80         [24] 4186 	mov	b,#0x80
      0012DE C0 07            [24] 4187 	push	ar7
      0012E0 C0 06            [24] 4188 	push	ar6
      0012E2 12r0Cr4B         [24] 4189 	lcall	_LCD_string_write
                                   4190 ;	dump2.c:111: size = getByte();
      0012E5 12r10rAC         [24] 4191 	lcall	_getByte
      0012E8 AD 82            [24] 4192 	mov	r5,dpl
                                   4193 ;	dump2.c:112: write('\n');
      0012EA 75 82 0A         [24] 4194 	mov	dpl,#0x0a
      0012ED C0 05            [24] 4195 	push	ar5
      0012EF 12r0BrDD         [24] 4196 	lcall	_write
      0012F2 D0 05            [24] 4197 	pop	ar5
      0012F4 D0 06            [24] 4198 	pop	ar6
      0012F6 D0 07            [24] 4199 	pop	ar7
                                   4200 ;	dump2.c:115: if (size < NUM) {
      0012F8 BD 0F 00         [24] 4201 	cjne	r5,#0x0f,00209$
      0012FB                       4202 00209$:
      0012FB 50 1C            [24] 4203 	jnc	00112$
                                   4204 ;	dump2.c:116: dumpPage(address, size, type);
      0012FD 90r00r1B         [24] 4205 	mov	dptr,#_dump_type_65537_242
      001300 E0               [24] 4206 	movx	a,@dptr
      001301 FC               [12] 4207 	mov	r4,a
      001302 90r00r18         [24] 4208 	mov	dptr,#_dumpPage_PARM_2
      001305 ED               [12] 4209 	mov	a,r5
      001306 F0               [24] 4210 	movx	@dptr,a
      001307 90r00r19         [24] 4211 	mov	dptr,#_dumpPage_PARM_3
      00130A EC               [12] 4212 	mov	a,r4
      00130B F0               [24] 4213 	movx	@dptr,a
      00130C 8E 82            [24] 4214 	mov	dpl,r6
      00130E 8F 83            [24] 4215 	mov	dph,r7
      001310 C0 05            [24] 4216 	push	ar5
      001312 12r10rEB         [24] 4217 	lcall	_dumpPage
      001315 D0 05            [24] 4218 	pop	ar5
      001317 80 1B            [24] 4219 	sjmp	00113$
      001319                       4220 00112$:
                                   4221 ;	dump2.c:118: dumpPage(address, NUM, type);
      001319 90r00r1B         [24] 4222 	mov	dptr,#_dump_type_65537_242
      00131C E0               [24] 4223 	movx	a,@dptr
      00131D FC               [12] 4224 	mov	r4,a
      00131E 90r00r18         [24] 4225 	mov	dptr,#_dumpPage_PARM_2
      001321 74 0F            [12] 4226 	mov	a,#0x0f
      001323 F0               [24] 4227 	movx	@dptr,a
      001324 90r00r19         [24] 4228 	mov	dptr,#_dumpPage_PARM_3
      001327 EC               [12] 4229 	mov	a,r4
      001328 F0               [24] 4230 	movx	@dptr,a
      001329 8E 82            [24] 4231 	mov	dpl,r6
      00132B 8F 83            [24] 4232 	mov	dph,r7
      00132D C0 05            [24] 4233 	push	ar5
      00132F 12r10rEB         [24] 4234 	lcall	_dumpPage
      001332 D0 05            [24] 4235 	pop	ar5
      001334                       4236 00113$:
                                   4237 ;	dump2.c:122: pages = size / NUM;
      001334 7F 00            [12] 4238 	mov	r7,#0x00
      001336 75*00 0F         [24] 4239 	mov	__divsint_PARM_2,#0x0f
                                   4240 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001339 8F*01            [24] 4241 	mov	(__divsint_PARM_2 + 1),r7
      00133B 8D 82            [24] 4242 	mov	dpl,r5
      00133D 8F 83            [24] 4243 	mov	dph,r7
      00133F 12r00r00         [24] 4244 	lcall	__divsint
      001342 AE 82            [24] 4245 	mov	r6,dpl
                                   4246 ;	dump2.c:124: do {
      001344 90r00r1B         [24] 4247 	mov	dptr,#_dump_type_65537_242
      001347 E0               [24] 4248 	movx	a,@dptr
      001348 FF               [12] 4249 	mov	r7,a
      001349 FD               [12] 4250 	mov	r5,a
      00134A                       4251 00133$:
                                   4252 ;	dump2.c:126: if (page != 1 && page != pages) {
      00134A 90r00r1C         [24] 4253 	mov	dptr,#_dump_page_65537_242
      00134D E0               [24] 4254 	movx	a,@dptr
      00134E FC               [12] 4255 	mov	r4,a
      00134F BC 01 02         [24] 4256 	cjne	r4,#0x01,00211$
      001352 80 26            [24] 4257 	sjmp	00120$
      001354                       4258 00211$:
      001354 EC               [12] 4259 	mov	a,r4
      001355 B5 06 02         [24] 4260 	cjne	a,ar6,00212$
      001358 80 20            [24] 4261 	sjmp	00120$
      00135A                       4262 00212$:
                                   4263 ;	dump2.c:127: LCD_string_write("Press A for previous\n");
      00135A 90r05rC1         [24] 4264 	mov	dptr,#___str_15
      00135D 75 F0 80         [24] 4265 	mov	b,#0x80
      001360 C0 07            [24] 4266 	push	ar7
      001362 C0 06            [24] 4267 	push	ar6
      001364 C0 05            [24] 4268 	push	ar5
      001366 12r0Cr4B         [24] 4269 	lcall	_LCD_string_write
                                   4270 ;	dump2.c:128: LCD_string_write("Press B for next\n");
      001369 90r05rD7         [24] 4271 	mov	dptr,#___str_16
      00136C 75 F0 80         [24] 4272 	mov	b,#0x80
      00136F 12r0Cr4B         [24] 4273 	lcall	_LCD_string_write
      001372 D0 05            [24] 4274 	pop	ar5
      001374 D0 06            [24] 4275 	pop	ar6
      001376 D0 07            [24] 4276 	pop	ar7
      001378 80 3B            [24] 4277 	sjmp	00121$
      00137A                       4278 00120$:
                                   4279 ;	dump2.c:129: } else if (page != pages) {
      00137A 90r00r1C         [24] 4280 	mov	dptr,#_dump_page_65537_242
      00137D E0               [24] 4281 	movx	a,@dptr
      00137E FC               [12] 4282 	mov	r4,a
      00137F B5 06 02         [24] 4283 	cjne	a,ar6,00213$
      001382 80 17            [24] 4284 	sjmp	00117$
      001384                       4285 00213$:
                                   4286 ;	dump2.c:130: LCD_string_write("Press B for next\n");
      001384 90r05rD7         [24] 4287 	mov	dptr,#___str_16
      001387 75 F0 80         [24] 4288 	mov	b,#0x80
      00138A C0 07            [24] 4289 	push	ar7
      00138C C0 06            [24] 4290 	push	ar6
      00138E C0 05            [24] 4291 	push	ar5
      001390 12r0Cr4B         [24] 4292 	lcall	_LCD_string_write
      001393 D0 05            [24] 4293 	pop	ar5
      001395 D0 06            [24] 4294 	pop	ar6
      001397 D0 07            [24] 4295 	pop	ar7
      001399 80 1A            [24] 4296 	sjmp	00121$
      00139B                       4297 00117$:
                                   4298 ;	dump2.c:131: } else if (page != 1) {
      00139B BC 01 02         [24] 4299 	cjne	r4,#0x01,00214$
      00139E 80 15            [24] 4300 	sjmp	00121$
      0013A0                       4301 00214$:
                                   4302 ;	dump2.c:132: LCD_string_write("Press A for previous\n");
      0013A0 90r05rC1         [24] 4303 	mov	dptr,#___str_15
      0013A3 75 F0 80         [24] 4304 	mov	b,#0x80
      0013A6 C0 07            [24] 4305 	push	ar7
      0013A8 C0 06            [24] 4306 	push	ar6
      0013AA C0 05            [24] 4307 	push	ar5
      0013AC 12r0Cr4B         [24] 4308 	lcall	_LCD_string_write
      0013AF D0 05            [24] 4309 	pop	ar5
      0013B1 D0 06            [24] 4310 	pop	ar6
      0013B3 D0 07            [24] 4311 	pop	ar7
      0013B5                       4312 00121$:
                                   4313 ;	dump2.c:135: LCD_string_write("Press 1 for menu\n");
      0013B5 90r05rE9         [24] 4314 	mov	dptr,#___str_17
      0013B8 75 F0 80         [24] 4315 	mov	b,#0x80
      0013BB C0 07            [24] 4316 	push	ar7
      0013BD C0 06            [24] 4317 	push	ar6
      0013BF C0 05            [24] 4318 	push	ar5
      0013C1 12r0Cr4B         [24] 4319 	lcall	_LCD_string_write
                                   4320 ;	dump2.c:137: input = keyDetect();
      0013C4 12r0CrEA         [24] 4321 	lcall	_keyDetect
      0013C7 AC 82            [24] 4322 	mov	r4,dpl
      0013C9 D0 05            [24] 4323 	pop	ar5
      0013CB D0 06            [24] 4324 	pop	ar6
      0013CD D0 07            [24] 4325 	pop	ar7
                                   4326 ;	dump2.c:140: if (input == 'B' && page != pages) {	// next
      0013CF BC 42 54         [24] 4327 	cjne	r4,#0x42,00130$
      0013D2 90r00r1C         [24] 4328 	mov	dptr,#_dump_page_65537_242
      0013D5 E0               [24] 4329 	movx	a,@dptr
      0013D6 FB               [12] 4330 	mov	r3,a
      0013D7 B5 06 02         [24] 4331 	cjne	a,ar6,00217$
      0013DA 80 4A            [24] 4332 	sjmp	00130$
      0013DC                       4333 00217$:
                                   4334 ;	dump2.c:141: address += NUM;
      0013DC 90r00r1D         [24] 4335 	mov	dptr,#_dump_address_65537_242
      0013DF E0               [24] 4336 	movx	a,@dptr
      0013E0 F9               [12] 4337 	mov	r1,a
      0013E1 A3               [24] 4338 	inc	dptr
      0013E2 E0               [24] 4339 	movx	a,@dptr
      0013E3 FA               [12] 4340 	mov	r2,a
      0013E4 74 0F            [12] 4341 	mov	a,#0x0f
      0013E6 29               [12] 4342 	add	a,r1
      0013E7 F9               [12] 4343 	mov	r1,a
      0013E8 E4               [12] 4344 	clr	a
      0013E9 3A               [12] 4345 	addc	a,r2
      0013EA FA               [12] 4346 	mov	r2,a
      0013EB 90r00r1D         [24] 4347 	mov	dptr,#_dump_address_65537_242
      0013EE E9               [12] 4348 	mov	a,r1
      0013EF F0               [24] 4349 	movx	@dptr,a
      0013F0 EA               [12] 4350 	mov	a,r2
      0013F1 A3               [24] 4351 	inc	dptr
      0013F2 F0               [24] 4352 	movx	@dptr,a
                                   4353 ;	dump2.c:142: dumpPage(address, NUM, type);
      0013F3 90r00r1D         [24] 4354 	mov	dptr,#_dump_address_65537_242
      0013F6 E0               [24] 4355 	movx	a,@dptr
      0013F7 F9               [12] 4356 	mov	r1,a
      0013F8 A3               [24] 4357 	inc	dptr
      0013F9 E0               [24] 4358 	movx	a,@dptr
      0013FA FA               [12] 4359 	mov	r2,a
      0013FB 90r00r18         [24] 4360 	mov	dptr,#_dumpPage_PARM_2
      0013FE 74 0F            [12] 4361 	mov	a,#0x0f
      001400 F0               [24] 4362 	movx	@dptr,a
      001401 90r00r19         [24] 4363 	mov	dptr,#_dumpPage_PARM_3
      001404 EF               [12] 4364 	mov	a,r7
      001405 F0               [24] 4365 	movx	@dptr,a
      001406 89 82            [24] 4366 	mov	dpl,r1
      001408 8A 83            [24] 4367 	mov	dph,r2
      00140A C0 07            [24] 4368 	push	ar7
      00140C C0 06            [24] 4369 	push	ar6
      00140E C0 05            [24] 4370 	push	ar5
      001410 C0 03            [24] 4371 	push	ar3
      001412 12r10rEB         [24] 4372 	lcall	_dumpPage
      001415 D0 03            [24] 4373 	pop	ar3
      001417 D0 05            [24] 4374 	pop	ar5
      001419 D0 06            [24] 4375 	pop	ar6
      00141B D0 07            [24] 4376 	pop	ar7
                                   4377 ;	dump2.c:143: page++;
      00141D 90r00r1C         [24] 4378 	mov	dptr,#_dump_page_65537_242
      001420 EB               [12] 4379 	mov	a,r3
      001421 04               [12] 4380 	inc	a
      001422 F0               [24] 4381 	movx	@dptr,a
      001423 02r13r4A         [24] 4382 	ljmp	00133$
      001426                       4383 00130$:
                                   4384 ;	dump2.c:144: } else if (input == 'A' && page != 1) {				// previous
      001426 BC 41 55         [24] 4385 	cjne	r4,#0x41,00126$
      001429 90r00r1C         [24] 4386 	mov	dptr,#_dump_page_65537_242
      00142C E0               [24] 4387 	movx	a,@dptr
      00142D FB               [12] 4388 	mov	r3,a
      00142E BB 01 02         [24] 4389 	cjne	r3,#0x01,00220$
      001431 80 4B            [24] 4390 	sjmp	00126$
      001433                       4391 00220$:
                                   4392 ;	dump2.c:145: address -= NUM;
      001433 90r00r1D         [24] 4393 	mov	dptr,#_dump_address_65537_242
      001436 E0               [24] 4394 	movx	a,@dptr
      001437 F9               [12] 4395 	mov	r1,a
      001438 A3               [24] 4396 	inc	dptr
      001439 E0               [24] 4397 	movx	a,@dptr
      00143A FA               [12] 4398 	mov	r2,a
      00143B E9               [12] 4399 	mov	a,r1
      00143C 24 F1            [12] 4400 	add	a,#0xf1
      00143E F9               [12] 4401 	mov	r1,a
      00143F EA               [12] 4402 	mov	a,r2
      001440 34 FF            [12] 4403 	addc	a,#0xff
      001442 FA               [12] 4404 	mov	r2,a
      001443 90r00r1D         [24] 4405 	mov	dptr,#_dump_address_65537_242
      001446 E9               [12] 4406 	mov	a,r1
      001447 F0               [24] 4407 	movx	@dptr,a
      001448 EA               [12] 4408 	mov	a,r2
      001449 A3               [24] 4409 	inc	dptr
      00144A F0               [24] 4410 	movx	@dptr,a
                                   4411 ;	dump2.c:146: dumpPage(address, NUM, type);
      00144B 90r00r1D         [24] 4412 	mov	dptr,#_dump_address_65537_242
      00144E E0               [24] 4413 	movx	a,@dptr
      00144F F9               [12] 4414 	mov	r1,a
      001450 A3               [24] 4415 	inc	dptr
      001451 E0               [24] 4416 	movx	a,@dptr
      001452 FA               [12] 4417 	mov	r2,a
      001453 90r00r18         [24] 4418 	mov	dptr,#_dumpPage_PARM_2
      001456 74 0F            [12] 4419 	mov	a,#0x0f
      001458 F0               [24] 4420 	movx	@dptr,a
      001459 90r00r19         [24] 4421 	mov	dptr,#_dumpPage_PARM_3
      00145C ED               [12] 4422 	mov	a,r5
      00145D F0               [24] 4423 	movx	@dptr,a
      00145E 89 82            [24] 4424 	mov	dpl,r1
      001460 8A 83            [24] 4425 	mov	dph,r2
      001462 C0 07            [24] 4426 	push	ar7
      001464 C0 06            [24] 4427 	push	ar6
      001466 C0 05            [24] 4428 	push	ar5
      001468 C0 03            [24] 4429 	push	ar3
      00146A 12r10rEB         [24] 4430 	lcall	_dumpPage
      00146D D0 03            [24] 4431 	pop	ar3
      00146F D0 05            [24] 4432 	pop	ar5
      001471 D0 06            [24] 4433 	pop	ar6
      001473 D0 07            [24] 4434 	pop	ar7
                                   4435 ;	dump2.c:147: page--;
      001475 EB               [12] 4436 	mov	a,r3
      001476 14               [12] 4437 	dec	a
      001477 90r00r1C         [24] 4438 	mov	dptr,#_dump_page_65537_242
      00147A F0               [24] 4439 	movx	@dptr,a
      00147B 02r13r4A         [24] 4440 	ljmp	00133$
      00147E                       4441 00126$:
                                   4442 ;	dump2.c:148: } else if (input == '1') {							// main menu
      00147E BC 31 01         [24] 4443 	cjne	r4,#0x31,00221$
      001481 22               [24] 4444 	ret
      001482                       4445 00221$:
      001482 02r13r4A         [24] 4446 	ljmp	00133$
                                   4447 ;	dump2.c:152: } while (1);
                                   4448 ;	dump2.c:154: }
      001485 22               [24] 4449 	ret
                                   4450 ;------------------------------------------------------------
                                   4451 ;Allocation info for local variables in function 'check'
                                   4452 ;------------------------------------------------------------
                                   4453 ;ramAddress                Allocated to registers r4 r5 
                                   4454 ;checker                   Allocated with name '_check_checker_65537_259'
                                   4455 ;fetched                   Allocated with name '_check_fetched_65537_259'
                                   4456 ;i                         Allocated with name '_check_i_65537_259'
                                   4457 ;error                     Allocated with name '_check_error_65537_259'
                                   4458 ;------------------------------------------------------------
                                   4459 ;	check.c:6: void check(void) {
                                   4460 ;	-----------------------------------------
                                   4461 ;	 function check
                                   4462 ;	-----------------------------------------
      001486                       4463 _check:
                                   4464 ;	check.c:8: fillScreen(GRAY);
      001486 90 D6 BA         [24] 4465 	mov	dptr,#0xd6ba
      001489 12r08r44         [24] 4466 	lcall	_fillScreen
                                   4467 ;	check.c:9: setCursor(0, 0);
      00148C E4               [12] 4468 	clr	a
      00148D F5*00            [12] 4469 	mov	_setCursor_PARM_2,a
      00148F F5*01            [12] 4470 	mov	(_setCursor_PARM_2 + 1),a
      001491 90 00 00         [24] 4471 	mov	dptr,#0x0000
      001494 12r00rB6         [24] 4472 	lcall	_setCursor
                                   4473 ;	check.c:10: setTextSize(2);
      001497 75 82 02         [24] 4474 	mov	dpl,#0x02
      00149A 12r00rD0         [24] 4475 	lcall	_setTextSize
                                   4476 ;	check.c:17: __xdata uint8_t error = 0;
      00149D 90r00r20         [24] 4477 	mov	dptr,#_check_error_65537_259
      0014A0 E4               [12] 4478 	clr	a
      0014A1 F0               [24] 4479 	movx	@dptr,a
                                   4480 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      0014A2 90r05rFB         [24] 4481 	mov	dptr,#___str_18
      0014A5 75 F0 80         [24] 4482 	mov	b,#0x80
      0014A8 12r0Cr4B         [24] 4483 	lcall	_LCD_string_write
                                   4484 ;	check.c:22: checker = getByte();
      0014AB 12r10rAC         [24] 4485 	lcall	_getByte
      0014AE E5 82            [12] 4486 	mov	a,dpl
      0014B0 90r00r1F         [24] 4487 	mov	dptr,#_check_checker_65537_259
      0014B3 F0               [24] 4488 	movx	@dptr,a
                                   4489 ;	check.c:23: write('\n');
      0014B4 75 82 0A         [24] 4490 	mov	dpl,#0x0a
      0014B7 12r0BrDD         [24] 4491 	lcall	_write
                                   4492 ;	check.c:24: LCD_string_write("In progress...\n");
      0014BA 90r06r10         [24] 4493 	mov	dptr,#___str_19
      0014BD 75 F0 80         [24] 4494 	mov	b,#0x80
      0014C0 12r0Cr4B         [24] 4495 	lcall	_LCD_string_write
                                   4496 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0014C3 7E 00            [12] 4497 	mov	r6,#0x00
      0014C5 7F 00            [12] 4498 	mov	r7,#0x00
      0014C7                       4499 00112$:
                                   4500 ;	check.c:30: IOM = 0;
                                   4501 ;	assignBit
      0014C7 C2 B4            [12] 4502 	clr	_P3_4
                                   4503 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      0014C9 8E 04            [24] 4504 	mov	ar4,r6
      0014CB 8F 05            [24] 4505 	mov	ar5,r7
                                   4506 ;	check.c:32: *ramAddress = checker;
      0014CD 90r00r1F         [24] 4507 	mov	dptr,#_check_checker_65537_259
      0014D0 E0               [24] 4508 	movx	a,@dptr
      0014D1 FB               [12] 4509 	mov	r3,a
      0014D2 F9               [12] 4510 	mov	r1,a
      0014D3 7A 00            [12] 4511 	mov	r2,#0x00
      0014D5 8C 82            [24] 4512 	mov	dpl,r4
      0014D7 8D 83            [24] 4513 	mov	dph,r5
      0014D9 E9               [12] 4514 	mov	a,r1
      0014DA F0               [24] 4515 	movx	@dptr,a
      0014DB EA               [12] 4516 	mov	a,r2
      0014DC A3               [24] 4517 	inc	dptr
      0014DD F0               [24] 4518 	movx	@dptr,a
                                   4519 ;	check.c:33: fetched = *ramAddress;
                                   4520 ;	check.c:34: IOM = 1;
                                   4521 ;	assignBit
      0014DE D2 B4            [12] 4522 	setb	_P3_4
                                   4523 ;	check.c:35: if (fetched != checker) {
      0014E0 E9               [12] 4524 	mov	a,r1
      0014E1 B5 03 02         [24] 4525 	cjne	a,ar3,00136$
      0014E4 80 43            [24] 4526 	sjmp	00104$
      0014E6                       4527 00136$:
                                   4528 ;	check.c:36: asciiToHex(checker);
      0014E6 8B 82            [24] 4529 	mov	dpl,r3
      0014E8 C0 05            [24] 4530 	push	ar5
      0014EA C0 04            [24] 4531 	push	ar4
      0014EC C0 01            [24] 4532 	push	ar1
      0014EE 12r0ErCC         [24] 4533 	lcall	_asciiToHex
                                   4534 ;	check.c:37: write(' ');
      0014F1 75 82 20         [24] 4535 	mov	dpl,#0x20
      0014F4 12r0BrDD         [24] 4536 	lcall	_write
      0014F7 D0 01            [24] 4537 	pop	ar1
                                   4538 ;	check.c:38: asciiToHex(fetched);
      0014F9 89 82            [24] 4539 	mov	dpl,r1
      0014FB 12r0ErCC         [24] 4540 	lcall	_asciiToHex
                                   4541 ;	check.c:39: write(' ');
      0014FE 75 82 20         [24] 4542 	mov	dpl,#0x20
      001501 12r0BrDD         [24] 4543 	lcall	_write
      001504 D0 04            [24] 4544 	pop	ar4
      001506 D0 05            [24] 4545 	pop	ar5
                                   4546 ;	check.c:40: asciiToHex(*ramAddress);
      001508 8C 82            [24] 4547 	mov	dpl,r4
      00150A 8D 83            [24] 4548 	mov	dph,r5
      00150C E0               [24] 4549 	movx	a,@dptr
      00150D F5 82            [12] 4550 	mov	dpl,a
      00150F 12r0ErCC         [24] 4551 	lcall	_asciiToHex
                                   4552 ;	check.c:41: write('\n');
      001512 75 82 0A         [24] 4553 	mov	dpl,#0x0a
      001515 12r0BrDD         [24] 4554 	lcall	_write
                                   4555 ;	check.c:42: LCD_string_write("Memory check failed\n");
      001518 90r06r20         [24] 4556 	mov	dptr,#___str_20
      00151B 75 F0 80         [24] 4557 	mov	b,#0x80
      00151E 12r0Cr4B         [24] 4558 	lcall	_LCD_string_write
                                   4559 ;	check.c:43: error = 1;
      001521 90r00r20         [24] 4560 	mov	dptr,#_check_error_65537_259
      001524 74 01            [12] 4561 	mov	a,#0x01
      001526 F0               [24] 4562 	movx	@dptr,a
                                   4563 ;	check.c:44: break;
      001527 80 78            [24] 4564 	sjmp	00106$
      001529                       4565 00104$:
                                   4566 ;	check.c:46: IOM = 0;
                                   4567 ;	assignBit
      001529 C2 B4            [12] 4568 	clr	_P3_4
                                   4569 ;	check.c:47: checker = ~checker;
      00152B 90r00r1F         [24] 4570 	mov	dptr,#_check_checker_65537_259
      00152E EB               [12] 4571 	mov	a,r3
      00152F F4               [12] 4572 	cpl	a
      001530 F0               [24] 4573 	movx	@dptr,a
                                   4574 ;	check.c:48: *ramAddress = checker;
      001531 E0               [24] 4575 	movx	a,@dptr
      001532 FB               [12] 4576 	mov	r3,a
      001533 F9               [12] 4577 	mov	r1,a
      001534 7A 00            [12] 4578 	mov	r2,#0x00
      001536 8C 82            [24] 4579 	mov	dpl,r4
      001538 8D 83            [24] 4580 	mov	dph,r5
      00153A E9               [12] 4581 	mov	a,r1
      00153B F0               [24] 4582 	movx	@dptr,a
      00153C EA               [12] 4583 	mov	a,r2
      00153D A3               [24] 4584 	inc	dptr
      00153E F0               [24] 4585 	movx	@dptr,a
                                   4586 ;	check.c:49: fetched = *ramAddress;
                                   4587 ;	check.c:50: IOM = 1;
                                   4588 ;	assignBit
      00153F D2 B4            [12] 4589 	setb	_P3_4
                                   4590 ;	check.c:51: if (fetched != checker) {
      001541 E9               [12] 4591 	mov	a,r1
      001542 B5 03 02         [24] 4592 	cjne	a,ar3,00137$
      001545 80 45            [24] 4593 	sjmp	00113$
      001547                       4594 00137$:
                                   4595 ;	check.c:52: asciiToHex(~checker);
      001547 EB               [12] 4596 	mov	a,r3
      001548 F4               [12] 4597 	cpl	a
      001549 F5 82            [12] 4598 	mov	dpl,a
      00154B C0 05            [24] 4599 	push	ar5
      00154D C0 04            [24] 4600 	push	ar4
      00154F C0 01            [24] 4601 	push	ar1
      001551 12r0ErCC         [24] 4602 	lcall	_asciiToHex
                                   4603 ;	check.c:53: write(' ');
      001554 75 82 20         [24] 4604 	mov	dpl,#0x20
      001557 12r0BrDD         [24] 4605 	lcall	_write
      00155A D0 01            [24] 4606 	pop	ar1
                                   4607 ;	check.c:54: asciiToHex(fetched);
      00155C 89 82            [24] 4608 	mov	dpl,r1
      00155E 12r0ErCC         [24] 4609 	lcall	_asciiToHex
                                   4610 ;	check.c:55: write(' ');
      001561 75 82 20         [24] 4611 	mov	dpl,#0x20
      001564 12r0BrDD         [24] 4612 	lcall	_write
      001567 D0 04            [24] 4613 	pop	ar4
      001569 D0 05            [24] 4614 	pop	ar5
                                   4615 ;	check.c:56: asciiToHex(*ramAddress);
      00156B 8C 82            [24] 4616 	mov	dpl,r4
      00156D 8D 83            [24] 4617 	mov	dph,r5
      00156F E0               [24] 4618 	movx	a,@dptr
      001570 F5 82            [12] 4619 	mov	dpl,a
      001572 12r0ErCC         [24] 4620 	lcall	_asciiToHex
                                   4621 ;	check.c:57: write('\n');
      001575 75 82 0A         [24] 4622 	mov	dpl,#0x0a
      001578 12r0BrDD         [24] 4623 	lcall	_write
                                   4624 ;	check.c:58: LCD_string_write("Memory check failed\n");
      00157B 90r06r20         [24] 4625 	mov	dptr,#___str_20
      00157E 75 F0 80         [24] 4626 	mov	b,#0x80
      001581 12r0Cr4B         [24] 4627 	lcall	_LCD_string_write
                                   4628 ;	check.c:59: error = 1;
      001584 90r00r20         [24] 4629 	mov	dptr,#_check_error_65537_259
      001587 74 01            [12] 4630 	mov	a,#0x01
      001589 F0               [24] 4631 	movx	@dptr,a
                                   4632 ;	check.c:60: break;
      00158A 80 15            [24] 4633 	sjmp	00106$
      00158C                       4634 00113$:
                                   4635 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      00158C 0E               [12] 4636 	inc	r6
      00158D BE 00 01         [24] 4637 	cjne	r6,#0x00,00138$
      001590 0F               [12] 4638 	inc	r7
      001591                       4639 00138$:
      001591 8E 04            [24] 4640 	mov	ar4,r6
      001593 8F 05            [24] 4641 	mov	ar5,r7
      001595 C3               [12] 4642 	clr	c
      001596 EC               [12] 4643 	mov	a,r4
      001597 94 FF            [12] 4644 	subb	a,#0xff
      001599 ED               [12] 4645 	mov	a,r5
      00159A 94 FF            [12] 4646 	subb	a,#0xff
      00159C 50 03            [24] 4647 	jnc	00139$
      00159E 02r14rC7         [24] 4648 	ljmp	00112$
      0015A1                       4649 00139$:
      0015A1                       4650 00106$:
                                   4651 ;	check.c:68: if (error == 0) {
      0015A1 90r00r20         [24] 4652 	mov	dptr,#_check_error_65537_259
      0015A4 E0               [24] 4653 	movx	a,@dptr
      0015A5 70 09            [24] 4654 	jnz	00108$
                                   4655 ;	check.c:69: LCD_string_write("Success!\n");
      0015A7 90r06r35         [24] 4656 	mov	dptr,#___str_21
      0015AA 75 F0 80         [24] 4657 	mov	b,#0x80
      0015AD 12r0Cr4B         [24] 4658 	lcall	_LCD_string_write
      0015B0                       4659 00108$:
                                   4660 ;	check.c:73: LCD_string_write("Press 1 for menu\n");
      0015B0 90r05rE9         [24] 4661 	mov	dptr,#___str_17
      0015B3 75 F0 80         [24] 4662 	mov	b,#0x80
      0015B6 12r0Cr4B         [24] 4663 	lcall	_LCD_string_write
                                   4664 ;	check.c:75: do {
      0015B9                       4665 00109$:
                                   4666 ;	check.c:76: checker = keyDetect();
      0015B9 12r0CrEA         [24] 4667 	lcall	_keyDetect
      0015BC AF 82            [24] 4668 	mov	r7,dpl
                                   4669 ;	check.c:77: } while (checker != '1');
      0015BE BF 31 F8         [24] 4670 	cjne	r7,#0x31,00109$
                                   4671 ;	check.c:78: }
      0015C1 22               [24] 4672 	ret
                                   4673 ;------------------------------------------------------------
                                   4674 ;Allocation info for local variables in function 'basic'
                                   4675 ;------------------------------------------------------------
                                   4676 ;ramAddress                Allocated to registers 
                                   4677 ;val                       Allocated with name '_basic_val_65537_269'
                                   4678 ;fetched                   Allocated with name '_basic_fetched_65537_269'
                                   4679 ;add                       Allocated with name '_basic_add_65537_269'
                                   4680 ;------------------------------------------------------------
                                   4681 ;	check.c:84: void basic(void) {
                                   4682 ;	-----------------------------------------
                                   4683 ;	 function basic
                                   4684 ;	-----------------------------------------
      0015C2                       4685 _basic:
                                   4686 ;	check.c:86: fillScreen(GRAY);
      0015C2 90 D6 BA         [24] 4687 	mov	dptr,#0xd6ba
      0015C5 12r08r44         [24] 4688 	lcall	_fillScreen
                                   4689 ;	check.c:87: setCursor(0, 0);
      0015C8 E4               [12] 4690 	clr	a
      0015C9 F5*00            [12] 4691 	mov	_setCursor_PARM_2,a
      0015CB F5*01            [12] 4692 	mov	(_setCursor_PARM_2 + 1),a
      0015CD 90 00 00         [24] 4693 	mov	dptr,#0x0000
      0015D0 12r00rB6         [24] 4694 	lcall	_setCursor
                                   4695 ;	check.c:88: setTextSize(2);
      0015D3 75 82 02         [24] 4696 	mov	dpl,#0x02
      0015D6 12r00rD0         [24] 4697 	lcall	_setTextSize
                                   4698 ;	check.c:97: LCD_string_write("Enter byte\n");
      0015D9 90r06r3F         [24] 4699 	mov	dptr,#___str_22
      0015DC 75 F0 80         [24] 4700 	mov	b,#0x80
      0015DF 12r0Cr4B         [24] 4701 	lcall	_LCD_string_write
                                   4702 ;	check.c:98: val = getByte();
      0015E2 12r10rAC         [24] 4703 	lcall	_getByte
      0015E5 AF 82            [24] 4704 	mov	r7,dpl
                                   4705 ;	check.c:99: write('\n');
      0015E7 75 82 0A         [24] 4706 	mov	dpl,#0x0a
      0015EA C0 07            [24] 4707 	push	ar7
      0015EC 12r0BrDD         [24] 4708 	lcall	_write
                                   4709 ;	check.c:102: LCD_string_write("Enter address\n");
      0015EF 90r06r4B         [24] 4710 	mov	dptr,#___str_23
      0015F2 75 F0 80         [24] 4711 	mov	b,#0x80
      0015F5 12r0Cr4B         [24] 4712 	lcall	_LCD_string_write
                                   4713 ;	check.c:103: add = getAddress();
      0015F8 12r10r45         [24] 4714 	lcall	_getAddress
      0015FB AD 82            [24] 4715 	mov	r5,dpl
      0015FD AE 83            [24] 4716 	mov	r6,dph
                                   4717 ;	check.c:104: write('\n');
      0015FF 75 82 0A         [24] 4718 	mov	dpl,#0x0a
      001602 C0 06            [24] 4719 	push	ar6
      001604 C0 05            [24] 4720 	push	ar5
      001606 12r0BrDD         [24] 4721 	lcall	_write
                                   4722 ;	check.c:105: LCD_string_write("In progress\n");
      001609 90r06r5A         [24] 4723 	mov	dptr,#___str_24
      00160C 75 F0 80         [24] 4724 	mov	b,#0x80
      00160F 12r0Cr4B         [24] 4725 	lcall	_LCD_string_write
      001612 D0 05            [24] 4726 	pop	ar5
      001614 D0 06            [24] 4727 	pop	ar6
      001616 D0 07            [24] 4728 	pop	ar7
                                   4729 ;	check.c:107: IOM = 0;
                                   4730 ;	assignBit
      001618 C2 B4            [12] 4731 	clr	_P3_4
                                   4732 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      00161A 8D 82            [24] 4733 	mov	dpl,r5
      00161C 8E 83            [24] 4734 	mov	dph,r6
                                   4735 ;	check.c:111: *ramAddress = val;
      00161E 8F 05            [24] 4736 	mov	ar5,r7
      001620 7E 00            [12] 4737 	mov	r6,#0x00
      001622 ED               [12] 4738 	mov	a,r5
      001623 F0               [24] 4739 	movx	@dptr,a
      001624 EE               [12] 4740 	mov	a,r6
      001625 A3               [24] 4741 	inc	dptr
      001626 F0               [24] 4742 	movx	@dptr,a
                                   4743 ;	check.c:114: fetched = *ramAddress;
                                   4744 ;	check.c:116: IOM = 1;
                                   4745 ;	assignBit
      001627 D2 B4            [12] 4746 	setb	_P3_4
                                   4747 ;	check.c:119: if (fetched == val) {
      001629 ED               [12] 4748 	mov	a,r5
      00162A B5 07 10         [24] 4749 	cjne	a,ar7,00102$
                                   4750 ;	check.c:120: asciiToHex(fetched);
      00162D 8D 82            [24] 4751 	mov	dpl,r5
      00162F 12r0ErCC         [24] 4752 	lcall	_asciiToHex
                                   4753 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      001632 90r06r67         [24] 4754 	mov	dptr,#___str_25
      001635 75 F0 80         [24] 4755 	mov	b,#0x80
      001638 12r0Cr4B         [24] 4756 	lcall	_LCD_string_write
      00163B 80 09            [24] 4757 	sjmp	00103$
      00163D                       4758 00102$:
                                   4759 ;	check.c:123: LCD_string_write("Check failed\n");
      00163D 90r06r7B         [24] 4760 	mov	dptr,#___str_26
      001640 75 F0 80         [24] 4761 	mov	b,#0x80
      001643 12r0Cr4B         [24] 4762 	lcall	_LCD_string_write
      001646                       4763 00103$:
                                   4764 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      001646 90r05rE9         [24] 4765 	mov	dptr,#___str_17
      001649 75 F0 80         [24] 4766 	mov	b,#0x80
      00164C 12r0Cr4B         [24] 4767 	lcall	_LCD_string_write
                                   4768 ;	check.c:128: do {
      00164F                       4769 00104$:
                                   4770 ;	check.c:129: fetched = keyDetect();
      00164F 12r0CrEA         [24] 4771 	lcall	_keyDetect
      001652 AF 82            [24] 4772 	mov	r7,dpl
                                   4773 ;	check.c:130: } while (fetched != '1');
      001654 BF 31 F8         [24] 4774 	cjne	r7,#0x31,00104$
                                   4775 ;	check.c:131: }
      001657 22               [24] 4776 	ret
                                   4777 ;------------------------------------------------------------
                                   4778 ;Allocation info for local variables in function 'move'
                                   4779 ;------------------------------------------------------------
                                   4780 ;origin                    Allocated to registers 
                                   4781 ;target                    Allocated with name '_move_target_65537_275'
                                   4782 ;sloc0                     Allocated with name '_move_sloc0_1_0'
                                   4783 ;sloc1                     Allocated with name '_move_sloc1_1_0'
                                   4784 ;startAdd                  Allocated with name '_move_startAdd_65537_275'
                                   4785 ;targetAdd                 Allocated with name '_move_targetAdd_65537_275'
                                   4786 ;i                         Allocated with name '_move_i_65537_275'
                                   4787 ;size                      Allocated with name '_move_size_65537_275'
                                   4788 ;o                         Allocated with name '_move_o_65537_275'
                                   4789 ;------------------------------------------------------------
                                   4790 ;	move.c:5: void move(void) {
                                   4791 ;	-----------------------------------------
                                   4792 ;	 function move
                                   4793 ;	-----------------------------------------
      001658                       4794 _move:
                                   4795 ;	move.c:7: fillScreen(GRAY);
      001658 90 D6 BA         [24] 4796 	mov	dptr,#0xd6ba
      00165B 12r08r44         [24] 4797 	lcall	_fillScreen
                                   4798 ;	move.c:8: setCursor(0, 0);
      00165E E4               [12] 4799 	clr	a
      00165F F5*00            [12] 4800 	mov	_setCursor_PARM_2,a
      001661 F5*01            [12] 4801 	mov	(_setCursor_PARM_2 + 1),a
      001663 90 00 00         [24] 4802 	mov	dptr,#0x0000
      001666 12r00rB6         [24] 4803 	lcall	_setCursor
                                   4804 ;	move.c:18: setTextSize(2);
      001669 75 82 02         [24] 4805 	mov	dpl,#0x02
      00166C 12r00rD0         [24] 4806 	lcall	_setTextSize
                                   4807 ;	move.c:19: LCD_string_write("Enter start address:\n");
      00166F 90r05r4E         [24] 4808 	mov	dptr,#___str_7
      001672 75 F0 80         [24] 4809 	mov	b,#0x80
      001675 12r0Cr4B         [24] 4810 	lcall	_LCD_string_write
                                   4811 ;	move.c:20: startAdd = getAddress();
      001678 12r10r45         [24] 4812 	lcall	_getAddress
      00167B AE 82            [24] 4813 	mov	r6,dpl
      00167D AF 83            [24] 4814 	mov	r7,dph
                                   4815 ;	move.c:21: write('\n');
      00167F 75 82 0A         [24] 4816 	mov	dpl,#0x0a
      001682 C0 07            [24] 4817 	push	ar7
      001684 C0 06            [24] 4818 	push	ar6
      001686 12r0BrDD         [24] 4819 	lcall	_write
                                   4820 ;	move.c:24: LCD_string_write("Enter target address:\n");
      001689 90r06r89         [24] 4821 	mov	dptr,#___str_27
      00168C 75 F0 80         [24] 4822 	mov	b,#0x80
      00168F 12r0Cr4B         [24] 4823 	lcall	_LCD_string_write
                                   4824 ;	move.c:25: targetAdd = getAddress();
      001692 12r10r45         [24] 4825 	lcall	_getAddress
      001695 AC 82            [24] 4826 	mov	r4,dpl
      001697 AD 83            [24] 4827 	mov	r5,dph
                                   4828 ;	move.c:26: write('\n');
      001699 75 82 0A         [24] 4829 	mov	dpl,#0x0a
      00169C C0 05            [24] 4830 	push	ar5
      00169E C0 04            [24] 4831 	push	ar4
      0016A0 12r0BrDD         [24] 4832 	lcall	_write
                                   4833 ;	move.c:29: LCD_string_write("Enter size:\n");
      0016A3 90r06rA0         [24] 4834 	mov	dptr,#___str_28
      0016A6 75 F0 80         [24] 4835 	mov	b,#0x80
      0016A9 12r0Cr4B         [24] 4836 	lcall	_LCD_string_write
                                   4837 ;	move.c:30: size = getByte();
      0016AC 12r10rAC         [24] 4838 	lcall	_getByte
      0016AF AB 82            [24] 4839 	mov	r3,dpl
                                   4840 ;	move.c:31: write('\n');
      0016B1 75 82 0A         [24] 4841 	mov	dpl,#0x0a
      0016B4 C0 03            [24] 4842 	push	ar3
      0016B6 12r0BrDD         [24] 4843 	lcall	_write
                                   4844 ;	move.c:34: LCD_string_write("Move in progress...\n");
      0016B9 90r06rAD         [24] 4845 	mov	dptr,#___str_29
      0016BC 75 F0 80         [24] 4846 	mov	b,#0x80
      0016BF 12r0Cr4B         [24] 4847 	lcall	_LCD_string_write
      0016C2 D0 03            [24] 4848 	pop	ar3
      0016C4 D0 04            [24] 4849 	pop	ar4
      0016C6 D0 05            [24] 4850 	pop	ar5
      0016C8 D0 06            [24] 4851 	pop	ar6
      0016CA D0 07            [24] 4852 	pop	ar7
                                   4853 ;	move.c:37: for (i = 0; i < size; i++) {
      0016CC 7A 00            [12] 4854 	mov	r2,#0x00
      0016CE                       4855 00109$:
      0016CE C3               [12] 4856 	clr	c
      0016CF EA               [12] 4857 	mov	a,r2
      0016D0 9B               [12] 4858 	subb	a,r3
      0016D1 50 6D            [24] 4859 	jnc	00104$
                                   4860 ;	move.c:39: if ((i + startAdd == __END_RAM__) || (i + targetAdd == __END_RAM__)) break;
      0016D3 C0 03            [24] 4861 	push	ar3
      0016D5 8A*54            [24] 4862 	mov	_move_sloc1_1_0,r2
      0016D7 75*55 00         [24] 4863 	mov	(_move_sloc1_1_0 + 1),#0x00
      0016DA 85*54*52         [24] 4864 	mov	_move_sloc0_1_0,_move_sloc1_1_0
      0016DD 85*55*53         [24] 4865 	mov	(_move_sloc0_1_0 + 1),(_move_sloc1_1_0 + 1)
      0016E0 EE               [12] 4866 	mov	a,r6
      0016E1 25*52            [12] 4867 	add	a,_move_sloc0_1_0
      0016E3 F9               [12] 4868 	mov	r1,a
      0016E4 EF               [12] 4869 	mov	a,r7
      0016E5 35*53            [12] 4870 	addc	a,(_move_sloc0_1_0 + 1)
      0016E7 FB               [12] 4871 	mov	r3,a
      0016E8 B9 FF 07         [24] 4872 	cjne	r1,#0xff,00135$
      0016EB BB FF 04         [24] 4873 	cjne	r3,#0xff,00135$
      0016EE D0 03            [24] 4874 	pop	ar3
      0016F0 80 4E            [24] 4875 	sjmp	00104$
      0016F2                       4876 00135$:
      0016F2 D0 03            [24] 4877 	pop	ar3
      0016F4 EC               [12] 4878 	mov	a,r4
      0016F5 25*52            [12] 4879 	add	a,_move_sloc0_1_0
      0016F7 F8               [12] 4880 	mov	r0,a
      0016F8 ED               [12] 4881 	mov	a,r5
      0016F9 35*53            [12] 4882 	addc	a,(_move_sloc0_1_0 + 1)
      0016FB F9               [12] 4883 	mov	r1,a
      0016FC B8 FF 05         [24] 4884 	cjne	r0,#0xff,00136$
      0016FF B9 FF 02         [24] 4885 	cjne	r1,#0xff,00136$
      001702 80 3C            [24] 4886 	sjmp	00104$
      001704                       4887 00136$:
                                   4888 ;	move.c:44: IOM = 0;
      001704 C0 03            [24] 4889 	push	ar3
                                   4890 ;	assignBit
      001706 C2 B4            [12] 4891 	clr	_P3_4
                                   4892 ;	move.c:45: origin = (uint16_t __xdata*)(startAdd + i);
      001708 8E*52            [24] 4893 	mov	_move_sloc0_1_0,r6
      00170A 8F*53            [24] 4894 	mov	(_move_sloc0_1_0 + 1),r7
      00170C E5*54            [12] 4895 	mov	a,_move_sloc1_1_0
      00170E 25*52            [12] 4896 	add	a,_move_sloc0_1_0
      001710 F8               [12] 4897 	mov	r0,a
      001711 E5*55            [12] 4898 	mov	a,(_move_sloc1_1_0 + 1)
      001713 35*53            [12] 4899 	addc	a,(_move_sloc0_1_0 + 1)
      001715 FB               [12] 4900 	mov	r3,a
      001716 88 82            [24] 4901 	mov	dpl,r0
      001718 8B 83            [24] 4902 	mov	dph,r3
                                   4903 ;	move.c:46: target = (uint16_t __xdata*)(targetAdd + i);
      00171A 8C 01            [24] 4904 	mov	ar1,r4
      00171C 8D 03            [24] 4905 	mov	ar3,r5
      00171E E5*54            [12] 4906 	mov	a,_move_sloc1_1_0
      001720 29               [12] 4907 	add	a,r1
      001721 F9               [12] 4908 	mov	r1,a
      001722 E5*55            [12] 4909 	mov	a,(_move_sloc1_1_0 + 1)
      001724 3B               [12] 4910 	addc	a,r3
      001725 FB               [12] 4911 	mov	r3,a
      001726 89*50            [24] 4912 	mov	_move_target_65537_275,r1
      001728 8B*51            [24] 4913 	mov	(_move_target_65537_275 + 1),r3
                                   4914 ;	move.c:47: o = *origin;
      00172A E0               [24] 4915 	movx	a,@dptr
      00172B F8               [12] 4916 	mov	r0,a
                                   4917 ;	move.c:48: *target = o;
      00172C 7B 00            [12] 4918 	mov	r3,#0x00
      00172E 85*50 82         [24] 4919 	mov	dpl,_move_target_65537_275
      001731 85*51 83         [24] 4920 	mov	dph,(_move_target_65537_275 + 1)
      001734 E8               [12] 4921 	mov	a,r0
      001735 F0               [24] 4922 	movx	@dptr,a
      001736 EB               [12] 4923 	mov	a,r3
      001737 A3               [24] 4924 	inc	dptr
      001738 F0               [24] 4925 	movx	@dptr,a
                                   4926 ;	move.c:49: IOM = 1;
                                   4927 ;	assignBit
      001739 D2 B4            [12] 4928 	setb	_P3_4
                                   4929 ;	move.c:37: for (i = 0; i < size; i++) {
      00173B 0A               [12] 4930 	inc	r2
      00173C D0 03            [24] 4931 	pop	ar3
      00173E 80 8E            [24] 4932 	sjmp	00109$
      001740                       4933 00104$:
                                   4934 ;	move.c:56: LCD_string_write("Done!\n");
      001740 90r06rC2         [24] 4935 	mov	dptr,#___str_30
      001743 75 F0 80         [24] 4936 	mov	b,#0x80
      001746 12r0Cr4B         [24] 4937 	lcall	_LCD_string_write
                                   4938 ;	move.c:57: LCD_string_write("Press 1 for menu\n");
      001749 90r05rE9         [24] 4939 	mov	dptr,#___str_17
      00174C 75 F0 80         [24] 4940 	mov	b,#0x80
      00174F 12r0Cr4B         [24] 4941 	lcall	_LCD_string_write
                                   4942 ;	move.c:59: do {
      001752                       4943 00105$:
                                   4944 ;	move.c:60: size = keyDetect();
      001752 12r0CrEA         [24] 4945 	lcall	_keyDetect
      001755 AF 82            [24] 4946 	mov	r7,dpl
                                   4947 ;	move.c:61: } while (size != '1');
      001757 BF 31 F8         [24] 4948 	cjne	r7,#0x31,00105$
                                   4949 ;	move.c:62: }
      00175A 22               [24] 4950 	ret
                                   4951 ;------------------------------------------------------------
                                   4952 ;Allocation info for local variables in function 'editByte'
                                   4953 ;------------------------------------------------------------
                                   4954 ;ramAddress                Allocated to registers r6 r7 
                                   4955 ;add                       Allocated with name '_editByte_add_65536_279'
                                   4956 ;val                       Allocated with name '_editByte_val_65536_280'
                                   4957 ;new                       Allocated with name '_editByte_new_65536_280'
                                   4958 ;high                      Allocated with name '_editByte_high_65536_280'
                                   4959 ;low                       Allocated with name '_editByte_low_65536_280'
                                   4960 ;------------------------------------------------------------
                                   4961 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   4962 ;	-----------------------------------------
                                   4963 ;	 function editByte
                                   4964 ;	-----------------------------------------
      00175B                       4965 _editByte:
      00175B AF 83            [24] 4966 	mov	r7,dph
      00175D E5 82            [12] 4967 	mov	a,dpl
      00175F 90r00r21         [24] 4968 	mov	dptr,#_editByte_add_65536_279
      001762 F0               [24] 4969 	movx	@dptr,a
      001763 EF               [12] 4970 	mov	a,r7
      001764 A3               [24] 4971 	inc	dptr
      001765 F0               [24] 4972 	movx	@dptr,a
                                   4973 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      001766 90r00r21         [24] 4974 	mov	dptr,#_editByte_add_65536_279
      001769 E0               [24] 4975 	movx	a,@dptr
      00176A FE               [12] 4976 	mov	r6,a
      00176B A3               [24] 4977 	inc	dptr
      00176C E0               [24] 4978 	movx	a,@dptr
      00176D FF               [12] 4979 	mov	r7,a
      00176E FC               [12] 4980 	mov	r4,a
                                   4981 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      00176F 8E 05            [24] 4982 	mov	ar5,r6
                                   4983 ;	edit.c:16: asciiToHex(high);
      001771 8C 82            [24] 4984 	mov	dpl,r4
      001773 C0 07            [24] 4985 	push	ar7
      001775 C0 06            [24] 4986 	push	ar6
      001777 C0 05            [24] 4987 	push	ar5
      001779 C0 04            [24] 4988 	push	ar4
      00177B 12r0ErCC         [24] 4989 	lcall	_asciiToHex
      00177E D0 04            [24] 4990 	pop	ar4
      001780 D0 05            [24] 4991 	pop	ar5
                                   4992 ;	edit.c:17: asciiToHex(low);
      001782 8D 82            [24] 4993 	mov	dpl,r5
      001784 C0 05            [24] 4994 	push	ar5
      001786 C0 04            [24] 4995 	push	ar4
      001788 12r0ErCC         [24] 4996 	lcall	_asciiToHex
                                   4997 ;	edit.c:19: LCD_string_write(": ");
      00178B 90r05r4B         [24] 4998 	mov	dptr,#___str_6
      00178E 75 F0 80         [24] 4999 	mov	b,#0x80
      001791 12r0Cr4B         [24] 5000 	lcall	_LCD_string_write
      001794 D0 04            [24] 5001 	pop	ar4
      001796 D0 05            [24] 5002 	pop	ar5
      001798 D0 06            [24] 5003 	pop	ar6
      00179A D0 07            [24] 5004 	pop	ar7
                                   5005 ;	edit.c:22: IOM = 0;
                                   5006 ;	assignBit
      00179C C2 B4            [12] 5007 	clr	_P3_4
                                   5008 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   5009 ;	edit.c:24: val = *ramAddress;
      00179E 8E 82            [24] 5010 	mov	dpl,r6
      0017A0 8F 83            [24] 5011 	mov	dph,r7
      0017A2 E0               [24] 5012 	movx	a,@dptr
      0017A3 FB               [12] 5013 	mov	r3,a
                                   5014 ;	edit.c:25: IOM = 1;
                                   5015 ;	assignBit
      0017A4 D2 B4            [12] 5016 	setb	_P3_4
                                   5017 ;	edit.c:28: asciiToHex(val);
      0017A6 8B 82            [24] 5018 	mov	dpl,r3
      0017A8 C0 07            [24] 5019 	push	ar7
      0017AA C0 06            [24] 5020 	push	ar6
      0017AC C0 05            [24] 5021 	push	ar5
      0017AE C0 04            [24] 5022 	push	ar4
      0017B0 12r0ErCC         [24] 5023 	lcall	_asciiToHex
                                   5024 ;	edit.c:31: write('\n');
      0017B3 75 82 0A         [24] 5025 	mov	dpl,#0x0a
      0017B6 12r0BrDD         [24] 5026 	lcall	_write
                                   5027 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      0017B9 90r06rC9         [24] 5028 	mov	dptr,#___str_31
      0017BC 75 F0 80         [24] 5029 	mov	b,#0x80
      0017BF 12r0Cr4B         [24] 5030 	lcall	_LCD_string_write
                                   5031 ;	edit.c:33: new = getByte();
      0017C2 12r10rAC         [24] 5032 	lcall	_getByte
      0017C5 AB 82            [24] 5033 	mov	r3,dpl
                                   5034 ;	edit.c:34: write('\n');
      0017C7 75 82 0A         [24] 5035 	mov	dpl,#0x0a
      0017CA C0 03            [24] 5036 	push	ar3
      0017CC 12r0BrDD         [24] 5037 	lcall	_write
      0017CF D0 03            [24] 5038 	pop	ar3
      0017D1 D0 04            [24] 5039 	pop	ar4
      0017D3 D0 05            [24] 5040 	pop	ar5
      0017D5 D0 06            [24] 5041 	pop	ar6
      0017D7 D0 07            [24] 5042 	pop	ar7
                                   5043 ;	edit.c:37: IOM = 0;
                                   5044 ;	assignBit
      0017D9 C2 B4            [12] 5045 	clr	_P3_4
                                   5046 ;	edit.c:38: *ramAddress = new;
      0017DB 7A 00            [12] 5047 	mov	r2,#0x00
      0017DD 8E 82            [24] 5048 	mov	dpl,r6
      0017DF 8F 83            [24] 5049 	mov	dph,r7
      0017E1 EB               [12] 5050 	mov	a,r3
      0017E2 F0               [24] 5051 	movx	@dptr,a
      0017E3 EA               [12] 5052 	mov	a,r2
      0017E4 A3               [24] 5053 	inc	dptr
      0017E5 F0               [24] 5054 	movx	@dptr,a
                                   5055 ;	edit.c:39: val = *ramAddress;
                                   5056 ;	edit.c:40: IOM = 1;
                                   5057 ;	assignBit
      0017E6 D2 B4            [12] 5058 	setb	_P3_4
                                   5059 ;	edit.c:43: asciiToHex(high);
      0017E8 8C 82            [24] 5060 	mov	dpl,r4
      0017EA C0 05            [24] 5061 	push	ar5
      0017EC C0 03            [24] 5062 	push	ar3
      0017EE 12r0ErCC         [24] 5063 	lcall	_asciiToHex
      0017F1 D0 03            [24] 5064 	pop	ar3
      0017F3 D0 05            [24] 5065 	pop	ar5
                                   5066 ;	edit.c:44: asciiToHex(low);
      0017F5 8D 82            [24] 5067 	mov	dpl,r5
      0017F7 C0 03            [24] 5068 	push	ar3
      0017F9 12r0ErCC         [24] 5069 	lcall	_asciiToHex
                                   5070 ;	edit.c:45: LCD_string_write(": ");
      0017FC 90r05r4B         [24] 5071 	mov	dptr,#___str_6
      0017FF 75 F0 80         [24] 5072 	mov	b,#0x80
      001802 12r0Cr4B         [24] 5073 	lcall	_LCD_string_write
      001805 D0 03            [24] 5074 	pop	ar3
                                   5075 ;	edit.c:46: asciiToHex(val);
      001807 8B 82            [24] 5076 	mov	dpl,r3
      001809 12r0ErCC         [24] 5077 	lcall	_asciiToHex
                                   5078 ;	edit.c:47: write('\n');
      00180C 75 82 0A         [24] 5079 	mov	dpl,#0x0a
                                   5080 ;	edit.c:49: }
      00180F 02r0BrDD         [24] 5081 	ljmp	_write
                                   5082 ;------------------------------------------------------------
                                   5083 ;Allocation info for local variables in function 'edit'
                                   5084 ;------------------------------------------------------------
                                   5085 ;input                     Allocated with name '_edit_input_65537_283'
                                   5086 ;add                       Allocated with name '_edit_add_65537_283'
                                   5087 ;------------------------------------------------------------
                                   5088 ;	edit.c:55: void edit(void) {
                                   5089 ;	-----------------------------------------
                                   5090 ;	 function edit
                                   5091 ;	-----------------------------------------
      001812                       5092 _edit:
                                   5093 ;	edit.c:57: fillScreen(GRAY);
      001812 90 D6 BA         [24] 5094 	mov	dptr,#0xd6ba
      001815 12r08r44         [24] 5095 	lcall	_fillScreen
                                   5096 ;	edit.c:58: setCursor(0, 0);
      001818 E4               [12] 5097 	clr	a
      001819 F5*00            [12] 5098 	mov	_setCursor_PARM_2,a
      00181B F5*01            [12] 5099 	mov	(_setCursor_PARM_2 + 1),a
      00181D 90 00 00         [24] 5100 	mov	dptr,#0x0000
      001820 12r00rB6         [24] 5101 	lcall	_setCursor
                                   5102 ;	edit.c:59: setTextSize(2);
      001823 75 82 02         [24] 5103 	mov	dpl,#0x02
      001826 12r00rD0         [24] 5104 	lcall	_setTextSize
                                   5105 ;	edit.c:66: LCD_string_write("Enter address:\n");
      001829 90r06rDA         [24] 5106 	mov	dptr,#___str_32
      00182C 75 F0 80         [24] 5107 	mov	b,#0x80
      00182F 12r0Cr4B         [24] 5108 	lcall	_LCD_string_write
                                   5109 ;	edit.c:67: add = getAddress();
      001832 12r10r45         [24] 5110 	lcall	_getAddress
      001835 AE 82            [24] 5111 	mov	r6,dpl
      001837 AF 83            [24] 5112 	mov	r7,dph
                                   5113 ;	edit.c:68: write('\n');
      001839 75 82 0A         [24] 5114 	mov	dpl,#0x0a
      00183C C0 07            [24] 5115 	push	ar7
      00183E C0 06            [24] 5116 	push	ar6
      001840 12r0BrDD         [24] 5117 	lcall	_write
      001843 D0 06            [24] 5118 	pop	ar6
      001845 D0 07            [24] 5119 	pop	ar7
                                   5120 ;	edit.c:71: editByte(add);
      001847 8E 82            [24] 5121 	mov	dpl,r6
      001849 8F 83            [24] 5122 	mov	dph,r7
      00184B C0 07            [24] 5123 	push	ar7
      00184D C0 06            [24] 5124 	push	ar6
      00184F 12r17r5B         [24] 5125 	lcall	_editByte
      001852 D0 06            [24] 5126 	pop	ar6
      001854 D0 07            [24] 5127 	pop	ar7
                                   5128 ;	edit.c:74: do {
      001856                       5129 00111$:
                                   5130 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      001856 90r05rE9         [24] 5131 	mov	dptr,#___str_17
      001859 75 F0 80         [24] 5132 	mov	b,#0x80
      00185C C0 07            [24] 5133 	push	ar7
      00185E C0 06            [24] 5134 	push	ar6
      001860 12r0Cr4B         [24] 5135 	lcall	_LCD_string_write
                                   5136 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      001863 90r06rEA         [24] 5137 	mov	dptr,#___str_33
      001866 75 F0 80         [24] 5138 	mov	b,#0x80
      001869 12r0Cr4B         [24] 5139 	lcall	_LCD_string_write
                                   5140 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      00186C 90r07r01         [24] 5141 	mov	dptr,#___str_34
      00186F 75 F0 80         [24] 5142 	mov	b,#0x80
      001872 12r0Cr4B         [24] 5143 	lcall	_LCD_string_write
                                   5144 ;	edit.c:78: input = keyDetect();
      001875 12r0CrEA         [24] 5145 	lcall	_keyDetect
      001878 AD 82            [24] 5146 	mov	r5,dpl
      00187A D0 06            [24] 5147 	pop	ar6
      00187C D0 07            [24] 5148 	pop	ar7
      00187E 90r00r23         [24] 5149 	mov	dptr,#_edit_input_65537_283
      001881 ED               [12] 5150 	mov	a,r5
      001882 F0               [24] 5151 	movx	@dptr,a
                                   5152 ;	edit.c:80: if (input == '1') {
      001883 BD 31 01         [24] 5153 	cjne	r5,#0x31,00141$
      001886 22               [24] 5154 	ret
      001887                       5155 00141$:
                                   5156 ;	edit.c:82: } else if (input =='2') {
      001887 BD 32 2F         [24] 5157 	cjne	r5,#0x32,00104$
                                   5158 ;	edit.c:83: fillScreen(GRAY);
      00188A 90 D6 BA         [24] 5159 	mov	dptr,#0xd6ba
      00188D C0 07            [24] 5160 	push	ar7
      00188F C0 06            [24] 5161 	push	ar6
      001891 12r08r44         [24] 5162 	lcall	_fillScreen
                                   5163 ;	edit.c:84: setCursor(0, 0);
      001894 E4               [12] 5164 	clr	a
      001895 F5*00            [12] 5165 	mov	_setCursor_PARM_2,a
      001897 F5*01            [12] 5166 	mov	(_setCursor_PARM_2 + 1),a
      001899 90 00 00         [24] 5167 	mov	dptr,#0x0000
      00189C 12r00rB6         [24] 5168 	lcall	_setCursor
      00189F D0 06            [24] 5169 	pop	ar6
      0018A1 D0 07            [24] 5170 	pop	ar7
                                   5171 ;	edit.c:86: editByte(add);
      0018A3 8E 82            [24] 5172 	mov	dpl,r6
      0018A5 8F 83            [24] 5173 	mov	dph,r7
      0018A7 C0 07            [24] 5174 	push	ar7
      0018A9 C0 06            [24] 5175 	push	ar6
      0018AB 12r17r5B         [24] 5176 	lcall	_editByte
      0018AE D0 06            [24] 5177 	pop	ar6
      0018B0 D0 07            [24] 5178 	pop	ar7
                                   5179 ;	edit.c:88: input = 0;
      0018B2 90r00r23         [24] 5180 	mov	dptr,#_edit_input_65537_283
      0018B5 E4               [12] 5181 	clr	a
      0018B6 F0               [24] 5182 	movx	@dptr,a
      0018B7 80 35            [24] 5183 	sjmp	00112$
      0018B9                       5184 00104$:
                                   5185 ;	edit.c:89: } else if (input == '3') {
      0018B9 BD 33 32         [24] 5186 	cjne	r5,#0x33,00112$
                                   5187 ;	edit.c:90: fillScreen(GRAY);
      0018BC 90 D6 BA         [24] 5188 	mov	dptr,#0xd6ba
      0018BF C0 07            [24] 5189 	push	ar7
      0018C1 C0 06            [24] 5190 	push	ar6
      0018C3 12r08r44         [24] 5191 	lcall	_fillScreen
                                   5192 ;	edit.c:91: setCursor(0, 0);
      0018C6 E4               [12] 5193 	clr	a
      0018C7 F5*00            [12] 5194 	mov	_setCursor_PARM_2,a
      0018C9 F5*01            [12] 5195 	mov	(_setCursor_PARM_2 + 1),a
      0018CB 90 00 00         [24] 5196 	mov	dptr,#0x0000
      0018CE 12r00rB6         [24] 5197 	lcall	_setCursor
      0018D1 D0 06            [24] 5198 	pop	ar6
      0018D3 D0 07            [24] 5199 	pop	ar7
                                   5200 ;	edit.c:93: editByte(++add);
      0018D5 0E               [12] 5201 	inc	r6
      0018D6 BE 00 01         [24] 5202 	cjne	r6,#0x00,00146$
      0018D9 0F               [12] 5203 	inc	r7
      0018DA                       5204 00146$:
      0018DA 8E 82            [24] 5205 	mov	dpl,r6
      0018DC 8F 83            [24] 5206 	mov	dph,r7
      0018DE C0 07            [24] 5207 	push	ar7
      0018E0 C0 06            [24] 5208 	push	ar6
      0018E2 12r17r5B         [24] 5209 	lcall	_editByte
      0018E5 D0 06            [24] 5210 	pop	ar6
      0018E7 D0 07            [24] 5211 	pop	ar7
                                   5212 ;	edit.c:95: input = 0;
      0018E9 90r00r23         [24] 5213 	mov	dptr,#_edit_input_65537_283
      0018EC E4               [12] 5214 	clr	a
      0018ED F0               [24] 5215 	movx	@dptr,a
      0018EE                       5216 00112$:
                                   5217 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      0018EE 90r00r23         [24] 5218 	mov	dptr,#_edit_input_65537_283
      0018F1 E0               [24] 5219 	movx	a,@dptr
      0018F2 FD               [12] 5220 	mov	r5,a
      0018F3 BD 31 01         [24] 5221 	cjne	r5,#0x31,00147$
      0018F6 22               [24] 5222 	ret
      0018F7                       5223 00147$:
      0018F7 BD 32 01         [24] 5224 	cjne	r5,#0x32,00148$
      0018FA 22               [24] 5225 	ret
      0018FB                       5226 00148$:
      0018FB BD 33 01         [24] 5227 	cjne	r5,#0x33,00149$
      0018FE 22               [24] 5228 	ret
      0018FF                       5229 00149$:
      0018FF 02r18r56         [24] 5230 	ljmp	00111$
                                   5231 ;	edit.c:99: }
      001902 22               [24] 5232 	ret
                                   5233 ;------------------------------------------------------------
                                   5234 ;Allocation info for local variables in function 'printCount'
                                   5235 ;------------------------------------------------------------
                                   5236 ;num                       Allocated with name '_printCount_PARM_2'
                                   5237 ;key                       Allocated with name '_printCount_PARM_3'
                                   5238 ;count                     Allocated with name '_printCount_PARM_5'
                                   5239 ;start                     Allocated with name '_printCount_start_65536_288'
                                   5240 ;found                     Allocated to registers r7 
                                   5241 ;ramAddress                Allocated to registers 
                                   5242 ;index                     Allocated with name '_printCount_PARM_4'
                                   5243 ;i                         Allocated with name '_printCount_i_65537_290'
                                   5244 ;high                      Allocated with name '_printCount_high_65537_290'
                                   5245 ;low                       Allocated with name '_printCount_low_65537_290'
                                   5246 ;------------------------------------------------------------
                                   5247 ;	count3.c:1: void printCount(uint16_t start, uint8_t num, uint8_t key, __xdata uint8_t index, uint8_t count) {
                                   5248 ;	-----------------------------------------
                                   5249 ;	 function printCount
                                   5250 ;	-----------------------------------------
      001903                       5251 _printCount:
      001903 85 82*59         [24] 5252 	mov	_printCount_start_65536_288,dpl
      001906 85 83*5A         [24] 5253 	mov	(_printCount_start_65536_288 + 1),dph
                                   5254 ;	count3.c:3: fillScreen(GRAY);
      001909 90 D6 BA         [24] 5255 	mov	dptr,#0xd6ba
      00190C 12r08r44         [24] 5256 	lcall	_fillScreen
                                   5257 ;	count3.c:4: setCursor(0, 0);
      00190F E4               [12] 5258 	clr	a
      001910 F5*00            [12] 5259 	mov	_setCursor_PARM_2,a
      001912 F5*01            [12] 5260 	mov	(_setCursor_PARM_2 + 1),a
      001914 90 00 00         [24] 5261 	mov	dptr,#0x0000
      001917 12r00rB6         [24] 5262 	lcall	_setCursor
                                   5263 ;	count3.c:5: setTextSize(2);
      00191A 75 82 02         [24] 5264 	mov	dpl,#0x02
      00191D 12r00rD0         [24] 5265 	lcall	_setTextSize
                                   5266 ;	count3.c:15: if (count == 0) {
      001920 E5*58            [12] 5267 	mov	a,_printCount_PARM_5
      001922 70 0B            [24] 5268 	jnz	00102$
                                   5269 ;	count3.c:16: LCD_string_write("No matches found\n");
      001924 90r07r1F         [24] 5270 	mov	dptr,#___str_35
      001927 75 F0 80         [24] 5271 	mov	b,#0x80
      00192A 12r0Cr4B         [24] 5272 	lcall	_LCD_string_write
      00192D 80 0F            [24] 5273 	sjmp	00118$
      00192F                       5274 00102$:
                                   5275 ;	count3.c:18: asciiToHex(count);
      00192F 85*58 82         [24] 5276 	mov	dpl,_printCount_PARM_5
      001932 12r0ErCC         [24] 5277 	lcall	_asciiToHex
                                   5278 ;	count3.c:19: LCD_string_write(" matches found\n");
      001935 90r07r31         [24] 5279 	mov	dptr,#___str_36
      001938 75 F0 80         [24] 5280 	mov	b,#0x80
      00193B 12r0Cr4B         [24] 5281 	lcall	_LCD_string_write
                                   5282 ;	count3.c:23: for (i = 0; i < num; i++) {
      00193E                       5283 00118$:
      00193E 90r00r24         [24] 5284 	mov	dptr,#_printCount_PARM_4
      001941 E0               [24] 5285 	movx	a,@dptr
      001942 FD               [12] 5286 	mov	r5,a
      001943 7C 00            [12] 5287 	mov	r4,#0x00
      001945                       5288 00110$:
      001945 C3               [12] 5289 	clr	c
      001946 EC               [12] 5290 	mov	a,r4
      001947 95*56            [12] 5291 	subb	a,_printCount_PARM_2
      001949 40 01            [24] 5292 	jc	00136$
      00194B 22               [24] 5293 	ret
      00194C                       5294 00136$:
                                   5295 ;	count3.c:24: if (start + i == __END_RAM__) break;
      00194C 8C 02            [24] 5296 	mov	ar2,r4
      00194E 7B 00            [12] 5297 	mov	r3,#0x00
      001950 A8*59            [24] 5298 	mov	r0,_printCount_start_65536_288
      001952 A9*5A            [24] 5299 	mov	r1,(_printCount_start_65536_288 + 1)
      001954 EA               [12] 5300 	mov	a,r2
      001955 28               [12] 5301 	add	a,r0
      001956 FE               [12] 5302 	mov	r6,a
      001957 EB               [12] 5303 	mov	a,r3
      001958 39               [12] 5304 	addc	a,r1
      001959 FF               [12] 5305 	mov	r7,a
      00195A BE FF 04         [24] 5306 	cjne	r6,#0xff,00137$
      00195D BF FF 01         [24] 5307 	cjne	r7,#0xff,00137$
      001960 22               [24] 5308 	ret
      001961                       5309 00137$:
                                   5310 ;	count3.c:26: IOM = 0;
                                   5311 ;	assignBit
      001961 C2 B4            [12] 5312 	clr	_P3_4
                                   5313 ;	count3.c:27: ramAddress = (uint16_t __xdata*)(start + i);
      001963 EA               [12] 5314 	mov	a,r2
      001964 28               [12] 5315 	add	a,r0
      001965 FE               [12] 5316 	mov	r6,a
      001966 EB               [12] 5317 	mov	a,r3
      001967 39               [12] 5318 	addc	a,r1
      001968 FF               [12] 5319 	mov	r7,a
      001969 8E 82            [24] 5320 	mov	dpl,r6
      00196B 8F 83            [24] 5321 	mov	dph,r7
                                   5322 ;	count3.c:28: found = *ramAddress;
      00196D E0               [24] 5323 	movx	a,@dptr
                                   5324 ;	count3.c:31: if (found == key) {
      00196E FF               [12] 5325 	mov	r7,a
      00196F B5*57 54         [24] 5326 	cjne	a,_printCount_PARM_3,00111$
                                   5327 ;	count3.c:33: asciiToHex(index++);
      001972 8D 82            [24] 5328 	mov	dpl,r5
      001974 0D               [12] 5329 	inc	r5
      001975 C0 05            [24] 5330 	push	ar5
      001977 C0 04            [24] 5331 	push	ar4
      001979 C0 03            [24] 5332 	push	ar3
      00197B C0 02            [24] 5333 	push	ar2
      00197D C0 01            [24] 5334 	push	ar1
      00197F C0 00            [24] 5335 	push	ar0
      001981 12r0ErCC         [24] 5336 	lcall	_asciiToHex
                                   5337 ;	count3.c:34: LCD_string_write(": ");
      001984 90r05r4B         [24] 5338 	mov	dptr,#___str_6
      001987 75 F0 80         [24] 5339 	mov	b,#0x80
      00198A 12r0Cr4B         [24] 5340 	lcall	_LCD_string_write
      00198D D0 00            [24] 5341 	pop	ar0
      00198F D0 01            [24] 5342 	pop	ar1
      001991 D0 02            [24] 5343 	pop	ar2
      001993 D0 03            [24] 5344 	pop	ar3
      001995 D0 04            [24] 5345 	pop	ar4
      001997 D0 05            [24] 5346 	pop	ar5
                                   5347 ;	count3.c:36: high = HIGHBYTE(start + i);
      001999 EA               [12] 5348 	mov	a,r2
      00199A 28               [12] 5349 	add	a,r0
      00199B EB               [12] 5350 	mov	a,r3
      00199C 39               [12] 5351 	addc	a,r1
      00199D F5 82            [12] 5352 	mov	dpl,a
                                   5353 ;	count3.c:37: low = LOWBYTE(start + i);
      00199F AE*59            [24] 5354 	mov	r6,_printCount_start_65536_288
      0019A1 EC               [12] 5355 	mov	a,r4
      0019A2 2E               [12] 5356 	add	a,r6
      0019A3 FE               [12] 5357 	mov	r6,a
                                   5358 ;	count3.c:40: asciiToHex(high);
      0019A4 C0 06            [24] 5359 	push	ar6
      0019A6 C0 05            [24] 5360 	push	ar5
      0019A8 C0 04            [24] 5361 	push	ar4
      0019AA 12r0ErCC         [24] 5362 	lcall	_asciiToHex
      0019AD D0 04            [24] 5363 	pop	ar4
      0019AF D0 05            [24] 5364 	pop	ar5
      0019B1 D0 06            [24] 5365 	pop	ar6
                                   5366 ;	count3.c:41: asciiToHex(low);
      0019B3 8E 82            [24] 5367 	mov	dpl,r6
      0019B5 C0 05            [24] 5368 	push	ar5
      0019B7 C0 04            [24] 5369 	push	ar4
      0019B9 12r0ErCC         [24] 5370 	lcall	_asciiToHex
                                   5371 ;	count3.c:42: write('\n');
      0019BC 75 82 0A         [24] 5372 	mov	dpl,#0x0a
      0019BF 12r0BrDD         [24] 5373 	lcall	_write
      0019C2 D0 04            [24] 5374 	pop	ar4
      0019C4 D0 05            [24] 5375 	pop	ar5
      0019C6                       5376 00111$:
                                   5377 ;	count3.c:23: for (i = 0; i < num; i++) {
      0019C6 0C               [12] 5378 	inc	r4
                                   5379 ;	count3.c:45: }
      0019C7 02r19r45         [24] 5380 	ljmp	00110$
                                   5381 ;------------------------------------------------------------
                                   5382 ;Allocation info for local variables in function 'count'
                                   5383 ;------------------------------------------------------------
                                   5384 ;key                       Allocated with name '_count_key_65537_298'
                                   5385 ;n                         Allocated with name '_count_n_65537_298'
                                   5386 ;found                     Allocated to registers r7 
                                   5387 ;size                      Allocated with name '_count_size_65537_298'
                                   5388 ;ramAddress                Allocated to registers 
                                   5389 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                   5390 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                   5391 ;sloc2                     Allocated with name '_count_sloc2_1_0'
                                   5392 ;i                         Allocated with name '_count_i_65537_298'
                                   5393 ;page                      Allocated with name '_count_page_65537_298'
                                   5394 ;index                     Allocated with name '_count_index_65537_298'
                                   5395 ;pages                     Allocated with name '_count_pages_65537_298'
                                   5396 ;address                   Allocated with name '_count_address_65537_298'
                                   5397 ;------------------------------------------------------------
                                   5398 ;	count3.c:47: void count(void) {
                                   5399 ;	-----------------------------------------
                                   5400 ;	 function count
                                   5401 ;	-----------------------------------------
      0019CA                       5402 _count:
                                   5403 ;	count3.c:49: fillScreen(GRAY);
      0019CA 90 D6 BA         [24] 5404 	mov	dptr,#0xd6ba
      0019CD 12r08r44         [24] 5405 	lcall	_fillScreen
                                   5406 ;	count3.c:50: setCursor(0, 0);
      0019D0 E4               [12] 5407 	clr	a
      0019D1 F5*00            [12] 5408 	mov	_setCursor_PARM_2,a
      0019D3 F5*01            [12] 5409 	mov	(_setCursor_PARM_2 + 1),a
      0019D5 90 00 00         [24] 5410 	mov	dptr,#0x0000
      0019D8 12r00rB6         [24] 5411 	lcall	_setCursor
                                   5412 ;	count3.c:51: setTextSize(2);
      0019DB 75 82 02         [24] 5413 	mov	dpl,#0x02
      0019DE 12r00rD0         [24] 5414 	lcall	_setTextSize
                                   5415 ;	count3.c:59: __xdata uint8_t page = 1;
      0019E1 90r00r25         [24] 5416 	mov	dptr,#_count_page_65537_298
      0019E4 74 01            [12] 5417 	mov	a,#0x01
      0019E6 F0               [24] 5418 	movx	@dptr,a
                                   5419 ;	count3.c:66: LCD_string_write("Enter byte to count:\n");
      0019E7 90r07r41         [24] 5420 	mov	dptr,#___str_37
      0019EA 75 F0 80         [24] 5421 	mov	b,#0x80
      0019ED 12r0Cr4B         [24] 5422 	lcall	_LCD_string_write
                                   5423 ;	count3.c:67: key = getByte();
      0019F0 12r10rAC         [24] 5424 	lcall	_getByte
      0019F3 85 82*5B         [24] 5425 	mov	_count_key_65537_298,dpl
                                   5426 ;	count3.c:68: write('\n');
      0019F6 75 82 0A         [24] 5427 	mov	dpl,#0x0a
      0019F9 12r0BrDD         [24] 5428 	lcall	_write
                                   5429 ;	count3.c:71: LCD_string_write("Enter start address:\n");
      0019FC 90r05r4E         [24] 5430 	mov	dptr,#___str_7
      0019FF 75 F0 80         [24] 5431 	mov	b,#0x80
      001A02 12r0Cr4B         [24] 5432 	lcall	_LCD_string_write
                                   5433 ;	count3.c:72: address = getAddress();
      001A05 12r10r45         [24] 5434 	lcall	_getAddress
      001A08 AD 82            [24] 5435 	mov	r5,dpl
      001A0A AE 83            [24] 5436 	mov	r6,dph
      001A0C 90r00r27         [24] 5437 	mov	dptr,#_count_address_65537_298
      001A0F ED               [12] 5438 	mov	a,r5
      001A10 F0               [24] 5439 	movx	@dptr,a
      001A11 EE               [12] 5440 	mov	a,r6
      001A12 A3               [24] 5441 	inc	dptr
      001A13 F0               [24] 5442 	movx	@dptr,a
                                   5443 ;	count3.c:73: write('\n');
      001A14 75 82 0A         [24] 5444 	mov	dpl,#0x0a
      001A17 C0 06            [24] 5445 	push	ar6
      001A19 C0 05            [24] 5446 	push	ar5
      001A1B 12r0BrDD         [24] 5447 	lcall	_write
                                   5448 ;	count3.c:76: LCD_string_write("Enter block size:\n");
      001A1E 90r05rAE         [24] 5449 	mov	dptr,#___str_14
      001A21 75 F0 80         [24] 5450 	mov	b,#0x80
      001A24 12r0Cr4B         [24] 5451 	lcall	_LCD_string_write
                                   5452 ;	count3.c:77: size = getByte();
      001A27 12r10rAC         [24] 5453 	lcall	_getByte
      001A2A 85 82*5D         [24] 5454 	mov	_count_size_65537_298,dpl
                                   5455 ;	count3.c:78: write('\n');
      001A2D 75 82 0A         [24] 5456 	mov	dpl,#0x0a
      001A30 12r0BrDD         [24] 5457 	lcall	_write
      001A33 D0 05            [24] 5458 	pop	ar5
      001A35 D0 06            [24] 5459 	pop	ar6
                                   5460 ;	count3.c:81: for (i = 0; i < size; i++) {
      001A37 75*5C 00         [24] 5461 	mov	_count_n_65537_298,#0x00
      001A3A 7A 00            [12] 5462 	mov	r2,#0x00
      001A3C                       5463 00132$:
      001A3C C3               [12] 5464 	clr	c
      001A3D EA               [12] 5465 	mov	a,r2
      001A3E 95*5D            [12] 5466 	subb	a,_count_size_65537_298
      001A40 50 21            [24] 5467 	jnc	00154$
                                   5468 ;	count3.c:82: IOM = 0;
                                   5469 ;	assignBit
      001A42 C2 B4            [12] 5470 	clr	_P3_4
                                   5471 ;	count3.c:83: ramAddress = (uint16_t __xdata*)(address + i);
      001A44 8A 00            [24] 5472 	mov	ar0,r2
      001A46 79 00            [12] 5473 	mov	r1,#0x00
      001A48 8D 03            [24] 5474 	mov	ar3,r5
      001A4A 8E 04            [24] 5475 	mov	ar4,r6
      001A4C E8               [12] 5476 	mov	a,r0
      001A4D 2B               [12] 5477 	add	a,r3
      001A4E FB               [12] 5478 	mov	r3,a
      001A4F E9               [12] 5479 	mov	a,r1
      001A50 3C               [12] 5480 	addc	a,r4
      001A51 FC               [12] 5481 	mov	r4,a
      001A52 8B 82            [24] 5482 	mov	dpl,r3
      001A54 8C 83            [24] 5483 	mov	dph,r4
                                   5484 ;	count3.c:84: found = *ramAddress;
      001A56 E0               [24] 5485 	movx	a,@dptr
      001A57 FC               [12] 5486 	mov	r4,a
                                   5487 ;	count3.c:85: IOM = 1;
                                   5488 ;	assignBit
      001A58 D2 B4            [12] 5489 	setb	_P3_4
                                   5490 ;	count3.c:87: if (found == key) n++;
      001A5A EC               [12] 5491 	mov	a,r4
      001A5B B5*5B 02         [24] 5492 	cjne	a,_count_key_65537_298,00133$
      001A5E 05*5C            [12] 5493 	inc	_count_n_65537_298
      001A60                       5494 00133$:
                                   5495 ;	count3.c:81: for (i = 0; i < size; i++) {
      001A60 0A               [12] 5496 	inc	r2
      001A61 80 D9            [24] 5497 	sjmp	00132$
      001A63                       5498 00154$:
      001A63 AC*5C            [24] 5499 	mov	r4,_count_n_65537_298
                                   5500 ;	count3.c:92: printCount(address, NUM, key, index, n);
      001A65 75*56 0F         [24] 5501 	mov	_printCount_PARM_2,#0x0f
      001A68 85*5B*57         [24] 5502 	mov	_printCount_PARM_3,_count_key_65537_298
      001A6B 90r00r24         [24] 5503 	mov	dptr,#_printCount_PARM_4
      001A6E E4               [12] 5504 	clr	a
      001A6F F0               [24] 5505 	movx	@dptr,a
      001A70 85*5C*58         [24] 5506 	mov	_printCount_PARM_5,_count_n_65537_298
      001A73 8D 82            [24] 5507 	mov	dpl,r5
      001A75 8E 83            [24] 5508 	mov	dph,r6
      001A77 C0 04            [24] 5509 	push	ar4
      001A79 12r19r03         [24] 5510 	lcall	_printCount
                                   5511 ;	count3.c:93: index += NUM;
      001A7C 90r00r26         [24] 5512 	mov	dptr,#_count_index_65537_298
      001A7F 74 0F            [12] 5513 	mov	a,#0x0f
      001A81 F0               [24] 5514 	movx	@dptr,a
                                   5515 ;	count3.c:99: pages = n / NUM;
      001A82 AB*5C            [24] 5516 	mov	r3,_count_n_65537_298
      001A84 7E 00            [12] 5517 	mov	r6,#0x00
                                   5518 ;	1-genFromRTrack replaced	mov	__divsint_PARM_2,#0x0f
      001A86 F5*00            [12] 5519 	mov	__divsint_PARM_2,a
                                   5520 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001A88 8E*01            [24] 5521 	mov	(__divsint_PARM_2 + 1),r6
      001A8A 8B 82            [24] 5522 	mov	dpl,r3
      001A8C 8E 83            [24] 5523 	mov	dph,r6
      001A8E 12r00r00         [24] 5524 	lcall	__divsint
      001A91 AD 82            [24] 5525 	mov	r5,dpl
      001A93 D0 04            [24] 5526 	pop	ar4
                                   5527 ;	count3.c:102: do {
      001A95 C3               [12] 5528 	clr	c
      001A96 74 0F            [12] 5529 	mov	a,#0x0f
      001A98 95*5C            [12] 5530 	subb	a,_count_n_65537_298
      001A9A E4               [12] 5531 	clr	a
      001A9B 33               [12] 5532 	rlc	a
      001A9C FE               [12] 5533 	mov	r6,a
      001A9D FB               [12] 5534 	mov	r3,a
      001A9E 8E*60            [24] 5535 	mov	_count_sloc2_1_0,r6
      001AA0 8E*5F            [24] 5536 	mov	_count_sloc1_1_0,r6
      001AA2 8E 00            [24] 5537 	mov	ar0,r6
      001AA4                       5538 00128$:
                                   5539 ;	count3.c:104: if (page != 1 && page != pages && n > NUM) {
      001AA4 90r00r25         [24] 5540 	mov	dptr,#_count_page_65537_298
      001AA7 E0               [24] 5541 	movx	a,@dptr
      001AA8 F5*5E            [12] 5542 	mov	_count_sloc0_1_0,a
      001AAA 74 01            [12] 5543 	mov	a,#0x01
      001AAC B5*5E 02         [24] 5544 	cjne	a,_count_sloc0_1_0,00230$
      001AAF 80 31            [24] 5545 	sjmp	00112$
      001AB1                       5546 00230$:
      001AB1 ED               [12] 5547 	mov	a,r5
      001AB2 B5*5E 02         [24] 5548 	cjne	a,_count_sloc0_1_0,00231$
      001AB5 80 2B            [24] 5549 	sjmp	00112$
      001AB7                       5550 00231$:
      001AB7 EE               [12] 5551 	mov	a,r6
      001AB8 60 28            [24] 5552 	jz	00112$
                                   5553 ;	count3.c:105: LCD_string_write("Press A for previous\n");
      001ABA 90r05rC1         [24] 5554 	mov	dptr,#___str_15
      001ABD 75 F0 80         [24] 5555 	mov	b,#0x80
      001AC0 C0 06            [24] 5556 	push	ar6
      001AC2 C0 05            [24] 5557 	push	ar5
      001AC4 C0 04            [24] 5558 	push	ar4
      001AC6 C0 03            [24] 5559 	push	ar3
      001AC8 C0 00            [24] 5560 	push	ar0
      001ACA 12r0Cr4B         [24] 5561 	lcall	_LCD_string_write
                                   5562 ;	count3.c:106: LCD_string_write("Press B for next\n");
      001ACD 90r05rD7         [24] 5563 	mov	dptr,#___str_16
      001AD0 75 F0 80         [24] 5564 	mov	b,#0x80
      001AD3 12r0Cr4B         [24] 5565 	lcall	_LCD_string_write
      001AD6 D0 00            [24] 5566 	pop	ar0
      001AD8 D0 03            [24] 5567 	pop	ar3
      001ADA D0 04            [24] 5568 	pop	ar4
      001ADC D0 05            [24] 5569 	pop	ar5
      001ADE D0 06            [24] 5570 	pop	ar6
      001AE0 80 56            [24] 5571 	sjmp	00113$
      001AE2                       5572 00112$:
                                   5573 ;	count3.c:107: } else if (page != pages && n > NUM) {
      001AE2 90r00r25         [24] 5574 	mov	dptr,#_count_page_65537_298
      001AE5 E0               [24] 5575 	movx	a,@dptr
      001AE6 B5 05 02         [24] 5576 	cjne	a,ar5,00233$
      001AE9 80 22            [24] 5577 	sjmp	00108$
      001AEB                       5578 00233$:
      001AEB EB               [12] 5579 	mov	a,r3
      001AEC 60 1F            [24] 5580 	jz	00108$
                                   5581 ;	count3.c:108: LCD_string_write("Press B for next\n");
      001AEE 90r05rD7         [24] 5582 	mov	dptr,#___str_16
      001AF1 75 F0 80         [24] 5583 	mov	b,#0x80
      001AF4 C0 06            [24] 5584 	push	ar6
      001AF6 C0 05            [24] 5585 	push	ar5
      001AF8 C0 04            [24] 5586 	push	ar4
      001AFA C0 03            [24] 5587 	push	ar3
      001AFC C0 00            [24] 5588 	push	ar0
      001AFE 12r0Cr4B         [24] 5589 	lcall	_LCD_string_write
      001B01 D0 00            [24] 5590 	pop	ar0
      001B03 D0 03            [24] 5591 	pop	ar3
      001B05 D0 04            [24] 5592 	pop	ar4
      001B07 D0 05            [24] 5593 	pop	ar5
      001B09 D0 06            [24] 5594 	pop	ar6
      001B0B 80 2B            [24] 5595 	sjmp	00113$
      001B0D                       5596 00108$:
                                   5597 ;	count3.c:109: } else if (page != 1 && n > NUM) {
      001B0D 90r00r25         [24] 5598 	mov	dptr,#_count_page_65537_298
      001B10 E0               [24] 5599 	movx	a,@dptr
      001B11 FF               [12] 5600 	mov	r7,a
      001B12 BF 01 02         [24] 5601 	cjne	r7,#0x01,00235$
      001B15 80 21            [24] 5602 	sjmp	00113$
      001B17                       5603 00235$:
      001B17 E5*60            [12] 5604 	mov	a,_count_sloc2_1_0
      001B19 60 1D            [24] 5605 	jz	00113$
                                   5606 ;	count3.c:110: LCD_string_write("Press A for previous\n");
      001B1B 90r05rC1         [24] 5607 	mov	dptr,#___str_15
      001B1E 75 F0 80         [24] 5608 	mov	b,#0x80
      001B21 C0 06            [24] 5609 	push	ar6
      001B23 C0 05            [24] 5610 	push	ar5
      001B25 C0 04            [24] 5611 	push	ar4
      001B27 C0 03            [24] 5612 	push	ar3
      001B29 C0 00            [24] 5613 	push	ar0
      001B2B 12r0Cr4B         [24] 5614 	lcall	_LCD_string_write
      001B2E D0 00            [24] 5615 	pop	ar0
      001B30 D0 03            [24] 5616 	pop	ar3
      001B32 D0 04            [24] 5617 	pop	ar4
      001B34 D0 05            [24] 5618 	pop	ar5
      001B36 D0 06            [24] 5619 	pop	ar6
      001B38                       5620 00113$:
                                   5621 ;	count3.c:114: LCD_string_write("Press 1 for menu\n");
      001B38 90r05rE9         [24] 5622 	mov	dptr,#___str_17
      001B3B 75 F0 80         [24] 5623 	mov	b,#0x80
      001B3E C0 06            [24] 5624 	push	ar6
      001B40 C0 05            [24] 5625 	push	ar5
      001B42 C0 04            [24] 5626 	push	ar4
      001B44 C0 03            [24] 5627 	push	ar3
      001B46 C0 00            [24] 5628 	push	ar0
      001B48 12r0Cr4B         [24] 5629 	lcall	_LCD_string_write
                                   5630 ;	count3.c:117: found = keyDetect();
      001B4B 12r0CrEA         [24] 5631 	lcall	_keyDetect
      001B4E AF 82            [24] 5632 	mov	r7,dpl
      001B50 D0 00            [24] 5633 	pop	ar0
      001B52 D0 03            [24] 5634 	pop	ar3
      001B54 D0 04            [24] 5635 	pop	ar4
      001B56 D0 05            [24] 5636 	pop	ar5
      001B58 D0 06            [24] 5637 	pop	ar6
                                   5638 ;	count3.c:120: if (found == '1') {
      001B5A BF 31 01         [24] 5639 	cjne	r7,#0x31,00237$
      001B5D 22               [24] 5640 	ret
      001B5E                       5641 00237$:
                                   5642 ;	count3.c:122: } else if (found == 'B' && page != pages && n > NUM) {
      001B5E BF 42 71         [24] 5643 	cjne	r7,#0x42,00121$
      001B61 90r00r25         [24] 5644 	mov	dptr,#_count_page_65537_298
      001B64 E0               [24] 5645 	movx	a,@dptr
      001B65 F5*5E            [12] 5646 	mov	_count_sloc0_1_0,a
      001B67 ED               [12] 5647 	mov	a,r5
      001B68 B5*5E 02         [24] 5648 	cjne	a,_count_sloc0_1_0,00240$
      001B6B 80 65            [24] 5649 	sjmp	00121$
      001B6D                       5650 00240$:
      001B6D E5*5F            [12] 5651 	mov	a,_count_sloc1_1_0
      001B6F 60 61            [24] 5652 	jz	00121$
                                   5653 ;	count3.c:123: index += NUM;
      001B71 C0 00            [24] 5654 	push	ar0
      001B73 90r00r26         [24] 5655 	mov	dptr,#_count_index_65537_298
      001B76 E0               [24] 5656 	movx	a,@dptr
      001B77 24 0F            [12] 5657 	add	a,#0x0f
      001B79 F0               [24] 5658 	movx	@dptr,a
                                   5659 ;	count3.c:124: address += NUM;
      001B7A 90r00r27         [24] 5660 	mov	dptr,#_count_address_65537_298
      001B7D E0               [24] 5661 	movx	a,@dptr
      001B7E F8               [12] 5662 	mov	r0,a
      001B7F A3               [24] 5663 	inc	dptr
      001B80 E0               [24] 5664 	movx	a,@dptr
      001B81 F9               [12] 5665 	mov	r1,a
      001B82 74 0F            [12] 5666 	mov	a,#0x0f
      001B84 28               [12] 5667 	add	a,r0
      001B85 F8               [12] 5668 	mov	r0,a
      001B86 E4               [12] 5669 	clr	a
      001B87 39               [12] 5670 	addc	a,r1
      001B88 F9               [12] 5671 	mov	r1,a
      001B89 90r00r27         [24] 5672 	mov	dptr,#_count_address_65537_298
      001B8C E8               [12] 5673 	mov	a,r0
      001B8D F0               [24] 5674 	movx	@dptr,a
      001B8E E9               [12] 5675 	mov	a,r1
      001B8F A3               [24] 5676 	inc	dptr
      001B90 F0               [24] 5677 	movx	@dptr,a
                                   5678 ;	count3.c:125: printCount(address, NUM, key, index, n);
      001B91 90r00r27         [24] 5679 	mov	dptr,#_count_address_65537_298
      001B94 E0               [24] 5680 	movx	a,@dptr
      001B95 F8               [12] 5681 	mov	r0,a
      001B96 A3               [24] 5682 	inc	dptr
      001B97 E0               [24] 5683 	movx	a,@dptr
      001B98 F9               [12] 5684 	mov	r1,a
      001B99 90r00r26         [24] 5685 	mov	dptr,#_count_index_65537_298
      001B9C E0               [24] 5686 	movx	a,@dptr
      001B9D FA               [12] 5687 	mov	r2,a
      001B9E 75*56 0F         [24] 5688 	mov	_printCount_PARM_2,#0x0f
      001BA1 85*5B*57         [24] 5689 	mov	_printCount_PARM_3,_count_key_65537_298
      001BA4 90r00r24         [24] 5690 	mov	dptr,#_printCount_PARM_4
      001BA7 EA               [12] 5691 	mov	a,r2
      001BA8 F0               [24] 5692 	movx	@dptr,a
      001BA9 8C*58            [24] 5693 	mov	_printCount_PARM_5,r4
      001BAB 88 82            [24] 5694 	mov	dpl,r0
      001BAD 89 83            [24] 5695 	mov	dph,r1
      001BAF C0 06            [24] 5696 	push	ar6
      001BB1 C0 05            [24] 5697 	push	ar5
      001BB3 C0 04            [24] 5698 	push	ar4
      001BB5 C0 03            [24] 5699 	push	ar3
      001BB7 C0 00            [24] 5700 	push	ar0
      001BB9 12r19r03         [24] 5701 	lcall	_printCount
      001BBC D0 00            [24] 5702 	pop	ar0
      001BBE D0 03            [24] 5703 	pop	ar3
      001BC0 D0 04            [24] 5704 	pop	ar4
      001BC2 D0 05            [24] 5705 	pop	ar5
      001BC4 D0 06            [24] 5706 	pop	ar6
                                   5707 ;	count3.c:126: page++;
      001BC6 90r00r25         [24] 5708 	mov	dptr,#_count_page_65537_298
      001BC9 E5*5E            [12] 5709 	mov	a,_count_sloc0_1_0
      001BCB 04               [12] 5710 	inc	a
      001BCC F0               [24] 5711 	movx	@dptr,a
      001BCD D0 00            [24] 5712 	pop	ar0
      001BCF 02r1ArA4         [24] 5713 	ljmp	00128$
      001BD2                       5714 00121$:
                                   5715 ;	count3.c:127: } else if (found == 'A' && page != 1 && n > NUM) {
      001BD2 BF 41 02         [24] 5716 	cjne	r7,#0x41,00242$
      001BD5 80 03            [24] 5717 	sjmp	00243$
      001BD7                       5718 00242$:
      001BD7 02r1ArA4         [24] 5719 	ljmp	00128$
      001BDA                       5720 00243$:
      001BDA 90r00r25         [24] 5721 	mov	dptr,#_count_page_65537_298
      001BDD E0               [24] 5722 	movx	a,@dptr
      001BDE FF               [12] 5723 	mov	r7,a
      001BDF BF 01 03         [24] 5724 	cjne	r7,#0x01,00244$
      001BE2 02r1ArA4         [24] 5725 	ljmp	00128$
      001BE5                       5726 00244$:
      001BE5 E8               [12] 5727 	mov	a,r0
      001BE6 70 03            [24] 5728 	jnz	00245$
      001BE8 02r1ArA4         [24] 5729 	ljmp	00128$
      001BEB                       5730 00245$:
                                   5731 ;	count3.c:128: index -= NUM;
      001BEB C0 00            [24] 5732 	push	ar0
      001BED 90r00r26         [24] 5733 	mov	dptr,#_count_index_65537_298
      001BF0 E0               [24] 5734 	movx	a,@dptr
      001BF1 24 F1            [12] 5735 	add	a,#0xf1
      001BF3 F0               [24] 5736 	movx	@dptr,a
                                   5737 ;	count3.c:129: address -= NUM;
      001BF4 90r00r27         [24] 5738 	mov	dptr,#_count_address_65537_298
      001BF7 E0               [24] 5739 	movx	a,@dptr
      001BF8 F9               [12] 5740 	mov	r1,a
      001BF9 A3               [24] 5741 	inc	dptr
      001BFA E0               [24] 5742 	movx	a,@dptr
      001BFB FA               [12] 5743 	mov	r2,a
      001BFC E9               [12] 5744 	mov	a,r1
      001BFD 24 F1            [12] 5745 	add	a,#0xf1
      001BFF F9               [12] 5746 	mov	r1,a
      001C00 EA               [12] 5747 	mov	a,r2
      001C01 34 FF            [12] 5748 	addc	a,#0xff
      001C03 FA               [12] 5749 	mov	r2,a
      001C04 90r00r27         [24] 5750 	mov	dptr,#_count_address_65537_298
      001C07 E9               [12] 5751 	mov	a,r1
      001C08 F0               [24] 5752 	movx	@dptr,a
      001C09 EA               [12] 5753 	mov	a,r2
      001C0A A3               [24] 5754 	inc	dptr
      001C0B F0               [24] 5755 	movx	@dptr,a
                                   5756 ;	count3.c:130: printCount(address, NUM, key, index, n);
      001C0C 90r00r27         [24] 5757 	mov	dptr,#_count_address_65537_298
      001C0F E0               [24] 5758 	movx	a,@dptr
      001C10 F9               [12] 5759 	mov	r1,a
      001C11 A3               [24] 5760 	inc	dptr
      001C12 E0               [24] 5761 	movx	a,@dptr
      001C13 FA               [12] 5762 	mov	r2,a
      001C14 90r00r26         [24] 5763 	mov	dptr,#_count_index_65537_298
      001C17 E0               [24] 5764 	movx	a,@dptr
      001C18 F8               [12] 5765 	mov	r0,a
      001C19 75*56 0F         [24] 5766 	mov	_printCount_PARM_2,#0x0f
      001C1C 85*5B*57         [24] 5767 	mov	_printCount_PARM_3,_count_key_65537_298
      001C1F 90r00r24         [24] 5768 	mov	dptr,#_printCount_PARM_4
      001C22 E8               [12] 5769 	mov	a,r0
      001C23 F0               [24] 5770 	movx	@dptr,a
      001C24 8C*58            [24] 5771 	mov	_printCount_PARM_5,r4
      001C26 89 82            [24] 5772 	mov	dpl,r1
      001C28 8A 83            [24] 5773 	mov	dph,r2
      001C2A C0 07            [24] 5774 	push	ar7
      001C2C C0 06            [24] 5775 	push	ar6
      001C2E C0 05            [24] 5776 	push	ar5
      001C30 C0 04            [24] 5777 	push	ar4
      001C32 C0 03            [24] 5778 	push	ar3
      001C34 C0 00            [24] 5779 	push	ar0
      001C36 12r19r03         [24] 5780 	lcall	_printCount
      001C39 D0 00            [24] 5781 	pop	ar0
      001C3B D0 03            [24] 5782 	pop	ar3
      001C3D D0 04            [24] 5783 	pop	ar4
      001C3F D0 05            [24] 5784 	pop	ar5
      001C41 D0 06            [24] 5785 	pop	ar6
      001C43 D0 07            [24] 5786 	pop	ar7
                                   5787 ;	count3.c:131: page--;
      001C45 EF               [12] 5788 	mov	a,r7
      001C46 14               [12] 5789 	dec	a
      001C47 90r00r25         [24] 5790 	mov	dptr,#_count_page_65537_298
      001C4A F0               [24] 5791 	movx	@dptr,a
                                   5792 ;	count3.c:133: } while (1);
      001C4B D0 00            [24] 5793 	pop	ar0
                                   5794 ;	count3.c:134: }
      001C4D 02r1ArA4         [24] 5795 	ljmp	00128$
                                   5796 ;------------------------------------------------------------
                                   5797 ;Allocation info for local variables in function 'displayTemp'
                                   5798 ;------------------------------------------------------------
                                   5799 ;t                         Allocated to registers r7 
                                   5800 ;------------------------------------------------------------
                                   5801 ;	analog.c:6: void displayTemp(uint8_t t) {
                                   5802 ;	-----------------------------------------
                                   5803 ;	 function displayTemp
                                   5804 ;	-----------------------------------------
      001C50                       5805 _displayTemp:
      001C50 AF 82            [24] 5806 	mov	r7,dpl
                                   5807 ;	analog.c:8: fillScreen(GRAY);
      001C52 90 D6 BA         [24] 5808 	mov	dptr,#0xd6ba
      001C55 C0 07            [24] 5809 	push	ar7
      001C57 12r08r44         [24] 5810 	lcall	_fillScreen
                                   5811 ;	analog.c:9: setCursor(0, 0);
      001C5A E4               [12] 5812 	clr	a
      001C5B F5*00            [12] 5813 	mov	_setCursor_PARM_2,a
      001C5D F5*01            [12] 5814 	mov	(_setCursor_PARM_2 + 1),a
      001C5F 90 00 00         [24] 5815 	mov	dptr,#0x0000
      001C62 12r00rB6         [24] 5816 	lcall	_setCursor
                                   5817 ;	analog.c:11: LCD_string_write("Temperature: ");
      001C65 90r07r57         [24] 5818 	mov	dptr,#___str_38
      001C68 75 F0 80         [24] 5819 	mov	b,#0x80
      001C6B 12r0Cr4B         [24] 5820 	lcall	_LCD_string_write
      001C6E D0 07            [24] 5821 	pop	ar7
                                   5822 ;	analog.c:13: asciiToHex(t);
      001C70 8F 82            [24] 5823 	mov	dpl,r7
      001C72 12r0ErCC         [24] 5824 	lcall	_asciiToHex
                                   5825 ;	analog.c:15: write('\n');
      001C75 75 82 0A         [24] 5826 	mov	dpl,#0x0a
      001C78 12r0BrDD         [24] 5827 	lcall	_write
                                   5828 ;	analog.c:16: LCD_string_write("Press 1 for menu\n");
      001C7B 90r05rE9         [24] 5829 	mov	dptr,#___str_17
      001C7E 75 F0 80         [24] 5830 	mov	b,#0x80
      001C81 12r0Cr4B         [24] 5831 	lcall	_LCD_string_write
                                   5832 ;	analog.c:17: LCD_string_write("Press key to refresh\n");
      001C84 90r07r65         [24] 5833 	mov	dptr,#___str_39
      001C87 75 F0 80         [24] 5834 	mov	b,#0x80
                                   5835 ;	analog.c:18: }
      001C8A 02r0Cr4B         [24] 5836 	ljmp	_LCD_string_write
                                   5837 ;------------------------------------------------------------
                                   5838 ;Allocation info for local variables in function 'displayLight'
                                   5839 ;------------------------------------------------------------
                                   5840 ;l                         Allocated to registers r7 
                                   5841 ;------------------------------------------------------------
                                   5842 ;	analog.c:25: void displayLight(uint8_t l) {
                                   5843 ;	-----------------------------------------
                                   5844 ;	 function displayLight
                                   5845 ;	-----------------------------------------
      001C8D                       5846 _displayLight:
      001C8D AF 82            [24] 5847 	mov	r7,dpl
                                   5848 ;	analog.c:27: fillScreen(GRAY);
      001C8F 90 D6 BA         [24] 5849 	mov	dptr,#0xd6ba
      001C92 C0 07            [24] 5850 	push	ar7
      001C94 12r08r44         [24] 5851 	lcall	_fillScreen
                                   5852 ;	analog.c:28: setCursor(0, 0);
      001C97 E4               [12] 5853 	clr	a
      001C98 F5*00            [12] 5854 	mov	_setCursor_PARM_2,a
      001C9A F5*01            [12] 5855 	mov	(_setCursor_PARM_2 + 1),a
      001C9C 90 00 00         [24] 5856 	mov	dptr,#0x0000
      001C9F 12r00rB6         [24] 5857 	lcall	_setCursor
                                   5858 ;	analog.c:30: LCD_string_write("Light level: ");
      001CA2 90r07r7B         [24] 5859 	mov	dptr,#___str_40
      001CA5 75 F0 80         [24] 5860 	mov	b,#0x80
      001CA8 12r0Cr4B         [24] 5861 	lcall	_LCD_string_write
      001CAB D0 07            [24] 5862 	pop	ar7
                                   5863 ;	analog.c:32: asciiToHex(l);
      001CAD 8F 82            [24] 5864 	mov	dpl,r7
      001CAF 12r0ErCC         [24] 5865 	lcall	_asciiToHex
                                   5866 ;	analog.c:34: write('\n');
      001CB2 75 82 0A         [24] 5867 	mov	dpl,#0x0a
      001CB5 12r0BrDD         [24] 5868 	lcall	_write
                                   5869 ;	analog.c:35: LCD_string_write("Press 1 for menu\n");
      001CB8 90r05rE9         [24] 5870 	mov	dptr,#___str_17
      001CBB 75 F0 80         [24] 5871 	mov	b,#0x80
      001CBE 12r0Cr4B         [24] 5872 	lcall	_LCD_string_write
                                   5873 ;	analog.c:36: LCD_string_write("Press key to refresh\n");
      001CC1 90r07r65         [24] 5874 	mov	dptr,#___str_39
      001CC4 75 F0 80         [24] 5875 	mov	b,#0x80
                                   5876 ;	analog.c:37: }
      001CC7 02r0Cr4B         [24] 5877 	ljmp	_LCD_string_write
                                   5878 ;------------------------------------------------------------
                                   5879 ;Allocation info for local variables in function 'temperature'
                                   5880 ;------------------------------------------------------------
                                   5881 ;temp                      Allocated to registers r7 
                                   5882 ;------------------------------------------------------------
                                   5883 ;	analog.c:44: void temperature(void) {
                                   5884 ;	-----------------------------------------
                                   5885 ;	 function temperature
                                   5886 ;	-----------------------------------------
      001CCA                       5887 _temperature:
                                   5888 ;	analog.c:46: fillScreen(GRAY);
      001CCA 90 D6 BA         [24] 5889 	mov	dptr,#0xd6ba
      001CCD 12r08r44         [24] 5890 	lcall	_fillScreen
                                   5891 ;	analog.c:47: setCursor(0, 0);
      001CD0 E4               [12] 5892 	clr	a
      001CD1 F5*00            [12] 5893 	mov	_setCursor_PARM_2,a
      001CD3 F5*01            [12] 5894 	mov	(_setCursor_PARM_2 + 1),a
      001CD5 90 00 00         [24] 5895 	mov	dptr,#0x0000
      001CD8 12r00rB6         [24] 5896 	lcall	_setCursor
                                   5897 ;	analog.c:48: setTextSize(2);
      001CDB 75 82 02         [24] 5898 	mov	dpl,#0x02
      001CDE 12r00rD0         [24] 5899 	lcall	_setTextSize
                                   5900 ;	analog.c:56: temp = ioread8(temp_address);
      001CE1 85*06 82         [24] 5901 	mov	dpl,_temp_address
      001CE4 85*07 83         [24] 5902 	mov	dph,(_temp_address + 1)
      001CE7 12r00r10         [24] 5903 	lcall	_ioread8
                                   5904 ;	analog.c:58: displayTemp(temp);
      001CEA 12r1Cr50         [24] 5905 	lcall	_displayTemp
                                   5906 ;	analog.c:61: while (1) {
      001CED                       5907 00104$:
                                   5908 ;	analog.c:62: temp = keyDetect();
      001CED 12r0CrEA         [24] 5909 	lcall	_keyDetect
      001CF0 AF 82            [24] 5910 	mov	r7,dpl
                                   5911 ;	analog.c:64: if (temp == '1') break;
      001CF2 BF 31 01         [24] 5912 	cjne	r7,#0x31,00118$
      001CF5 22               [24] 5913 	ret
      001CF6                       5914 00118$:
                                   5915 ;	analog.c:68: temp = ioread8(temp_address);
      001CF6 85*06 82         [24] 5916 	mov	dpl,_temp_address
      001CF9 85*07 83         [24] 5917 	mov	dph,(_temp_address + 1)
      001CFC 12r00r10         [24] 5918 	lcall	_ioread8
                                   5919 ;	analog.c:69: displayTemp(temp);
      001CFF 12r1Cr50         [24] 5920 	lcall	_displayTemp
                                   5921 ;	analog.c:71: }
      001D02 80 E9            [24] 5922 	sjmp	00104$
                                   5923 ;------------------------------------------------------------
                                   5924 ;Allocation info for local variables in function 'light'
                                   5925 ;------------------------------------------------------------
                                   5926 ;light                     Allocated to registers r7 
                                   5927 ;------------------------------------------------------------
                                   5928 ;	analog.c:78: void light(void) {
                                   5929 ;	-----------------------------------------
                                   5930 ;	 function light
                                   5931 ;	-----------------------------------------
      001D04                       5932 _light:
                                   5933 ;	analog.c:80: fillScreen(GRAY);
      001D04 90 D6 BA         [24] 5934 	mov	dptr,#0xd6ba
      001D07 12r08r44         [24] 5935 	lcall	_fillScreen
                                   5936 ;	analog.c:81: setCursor(0, 0);
      001D0A E4               [12] 5937 	clr	a
      001D0B F5*00            [12] 5938 	mov	_setCursor_PARM_2,a
      001D0D F5*01            [12] 5939 	mov	(_setCursor_PARM_2 + 1),a
      001D0F 90 00 00         [24] 5940 	mov	dptr,#0x0000
      001D12 12r00rB6         [24] 5941 	lcall	_setCursor
                                   5942 ;	analog.c:82: setTextSize(2);
      001D15 75 82 02         [24] 5943 	mov	dpl,#0x02
      001D18 12r00rD0         [24] 5944 	lcall	_setTextSize
                                   5945 ;	analog.c:90: light = ioread8(light_address);
      001D1B 85*08 82         [24] 5946 	mov	dpl,_light_address
      001D1E 85*09 83         [24] 5947 	mov	dph,(_light_address + 1)
      001D21 12r00r10         [24] 5948 	lcall	_ioread8
                                   5949 ;	analog.c:92: displayLight(light);
      001D24 12r1Cr8D         [24] 5950 	lcall	_displayLight
                                   5951 ;	analog.c:95: while (1) {
      001D27                       5952 00104$:
                                   5953 ;	analog.c:96: light = keyDetect();
      001D27 12r0CrEA         [24] 5954 	lcall	_keyDetect
      001D2A AF 82            [24] 5955 	mov	r7,dpl
                                   5956 ;	analog.c:98: if (light == '1') break;
      001D2C BF 31 01         [24] 5957 	cjne	r7,#0x31,00118$
      001D2F 22               [24] 5958 	ret
      001D30                       5959 00118$:
                                   5960 ;	analog.c:102: light = ioread8(light_address);
      001D30 85*08 82         [24] 5961 	mov	dpl,_light_address
      001D33 85*09 83         [24] 5962 	mov	dph,(_light_address + 1)
      001D36 12r00r10         [24] 5963 	lcall	_ioread8
                                   5964 ;	analog.c:103: displayLight(light);
      001D39 12r1Cr8D         [24] 5965 	lcall	_displayLight
                                   5966 ;	analog.c:105: }
      001D3C 80 E9            [24] 5967 	sjmp	00104$
                                   5968 ;------------------------------------------------------------
                                   5969 ;Allocation info for local variables in function 'menu'
                                   5970 ;------------------------------------------------------------
                                   5971 ;	main.c:30: void menu(void) {
                                   5972 ;	-----------------------------------------
                                   5973 ;	 function menu
                                   5974 ;	-----------------------------------------
      001D3E                       5975 _menu:
                                   5976 ;	main.c:32: setRotation(2);
      001D3E 75 82 02         [24] 5977 	mov	dpl,#0x02
      001D41 12r00rE8         [24] 5978 	lcall	_setRotation
                                   5979 ;	main.c:33: setTextSize(3);
      001D44 75 82 03         [24] 5980 	mov	dpl,#0x03
      001D47 12r00rD0         [24] 5981 	lcall	_setTextSize
                                   5982 ;	main.c:34: fillScreen(GRAY);
      001D4A 90 D6 BA         [24] 5983 	mov	dptr,#0xd6ba
      001D4D 12r08r44         [24] 5984 	lcall	_fillScreen
                                   5985 ;	main.c:35: setTextColor(BLACK, GRAY);
      001D50 75*00 BA         [24] 5986 	mov	_setTextColor_PARM_2,#0xba
      001D53 75*01 D6         [24] 5987 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001D56 90 00 00         [24] 5988 	mov	dptr,#0x0000
      001D59 12r00rC3         [24] 5989 	lcall	_setTextColor
                                   5990 ;	main.c:36: setCursor(0, 0);
      001D5C E4               [12] 5991 	clr	a
      001D5D F5*00            [12] 5992 	mov	_setCursor_PARM_2,a
      001D5F F5*01            [12] 5993 	mov	(_setCursor_PARM_2 + 1),a
      001D61 90 00 00         [24] 5994 	mov	dptr,#0x0000
      001D64 12r00rB6         [24] 5995 	lcall	_setCursor
                                   5996 ;	main.c:39: LCD_string_write("Brandon Cline\n");
      001D67 90r07r89         [24] 5997 	mov	dptr,#___str_41
      001D6A 75 F0 80         [24] 5998 	mov	b,#0x80
      001D6D 12r0Cr4B         [24] 5999 	lcall	_LCD_string_write
                                   6000 ;	main.c:40: LCD_string_write("ECEN 4330\n");
      001D70 90r07r98         [24] 6001 	mov	dptr,#___str_42
      001D73 75 F0 80         [24] 6002 	mov	b,#0x80
      001D76 12r0Cr4B         [24] 6003 	lcall	_LCD_string_write
                                   6004 ;	main.c:42: setTextSize(2);
      001D79 75 82 02         [24] 6005 	mov	dpl,#0x02
      001D7C 12r00rD0         [24] 6006 	lcall	_setTextSize
                                   6007 ;	main.c:46: LCD_string_write("1: Basic check\n");
      001D7F 90r07rA3         [24] 6008 	mov	dptr,#___str_43
      001D82 75 F0 80         [24] 6009 	mov	b,#0x80
      001D85 12r0Cr4B         [24] 6010 	lcall	_LCD_string_write
                                   6011 ;	main.c:48: LCD_string_write("2: Dump\n");
      001D88 90r07rB3         [24] 6012 	mov	dptr,#___str_44
      001D8B 75 F0 80         [24] 6013 	mov	b,#0x80
      001D8E 12r0Cr4B         [24] 6014 	lcall	_LCD_string_write
                                   6015 ;	main.c:50: LCD_string_write("3: Check\n");
      001D91 90r07rBC         [24] 6016 	mov	dptr,#___str_45
      001D94 75 F0 80         [24] 6017 	mov	b,#0x80
      001D97 12r0Cr4B         [24] 6018 	lcall	_LCD_string_write
                                   6019 ;	main.c:52: LCD_string_write("A: Move\n");
      001D9A 90r07rC6         [24] 6020 	mov	dptr,#___str_46
      001D9D 75 F0 80         [24] 6021 	mov	b,#0x80
      001DA0 12r0Cr4B         [24] 6022 	lcall	_LCD_string_write
                                   6023 ;	main.c:54: LCD_string_write("4: Edit\n");
      001DA3 90r07rCF         [24] 6024 	mov	dptr,#___str_47
      001DA6 75 F0 80         [24] 6025 	mov	b,#0x80
      001DA9 12r0Cr4B         [24] 6026 	lcall	_LCD_string_write
                                   6027 ;	main.c:56: LCD_string_write("5: Find\n");
      001DAC 90r07rD8         [24] 6028 	mov	dptr,#___str_48
      001DAF 75 F0 80         [24] 6029 	mov	b,#0x80
      001DB2 12r0Cr4B         [24] 6030 	lcall	_LCD_string_write
                                   6031 ;	main.c:58: LCD_string_write("6: Count\n");
      001DB5 90r07rE1         [24] 6032 	mov	dptr,#___str_49
      001DB8 75 F0 80         [24] 6033 	mov	b,#0x80
      001DBB 12r0Cr4B         [24] 6034 	lcall	_LCD_string_write
                                   6035 ;	main.c:61: LCD_string_write("B: Temperature\n");
      001DBE 90r07rEB         [24] 6036 	mov	dptr,#___str_50
      001DC1 75 F0 80         [24] 6037 	mov	b,#0x80
      001DC4 12r0Cr4B         [24] 6038 	lcall	_LCD_string_write
                                   6039 ;	main.c:63: LCD_string_write("7: Light\n");
      001DC7 90r07rFB         [24] 6040 	mov	dptr,#___str_51
      001DCA 75 F0 80         [24] 6041 	mov	b,#0x80
                                   6042 ;	main.c:64: }
      001DCD 02r0Cr4B         [24] 6043 	ljmp	_LCD_string_write
                                   6044 ;------------------------------------------------------------
                                   6045 ;Allocation info for local variables in function 'main'
                                   6046 ;------------------------------------------------------------
                                   6047 ;input                     Allocated with name '_main_input_65536_323'
                                   6048 ;------------------------------------------------------------
                                   6049 ;	main.c:66: void main(void) {
                                   6050 ;	-----------------------------------------
                                   6051 ;	 function main
                                   6052 ;	-----------------------------------------
      001DD0                       6053 _main:
                                   6054 ;	main.c:71: iowrite8(seg7_address, 0x00);
      001DD0 75*00 00         [24] 6055 	mov	_iowrite8_PARM_2,#0x00
      001DD3 85*04 82         [24] 6056 	mov	dpl,_seg7_address
      001DD6 85*05 83         [24] 6057 	mov	dph,(_seg7_address + 1)
      001DD9 12r00r00         [24] 6058 	lcall	_iowrite8
                                   6059 ;	main.c:74: TFT_LCD_INIT();
      001DDC 12r02r11         [24] 6060 	lcall	_TFT_LCD_INIT
                                   6061 ;	main.c:75: fillScreen(BLACK);
      001DDF 90 00 00         [24] 6062 	mov	dptr,#0x0000
      001DE2 12r08r44         [24] 6063 	lcall	_fillScreen
                                   6064 ;	main.c:76: setRotation(0);
      001DE5 75 82 00         [24] 6065 	mov	dpl,#0x00
      001DE8 12r00rE8         [24] 6066 	lcall	_setRotation
                                   6067 ;	main.c:77: testCircles(20, BLUE);
      001DEB 75*2C 1F         [24] 6068 	mov	_testCircles_PARM_2,#0x1f
      001DEE 75*2D 00         [24] 6069 	mov	(_testCircles_PARM_2 + 1),#0x00
      001DF1 75 82 14         [24] 6070 	mov	dpl,#0x14
      001DF4 12r06r9D         [24] 6071 	lcall	_testCircles
                                   6072 ;	main.c:79: while (1) {
      001DF7                       6073 00113$:
                                   6074 ;	main.c:81: menu();
      001DF7 12r1Dr3E         [24] 6075 	lcall	_menu
                                   6076 ;	main.c:84: input = keyDetect();
      001DFA 12r0CrEA         [24] 6077 	lcall	_keyDetect
      001DFD AF 82            [24] 6078 	mov	r7,dpl
                                   6079 ;	main.c:88: switch(input) {
      001DFF BF 31 02         [24] 6080 	cjne	r7,#0x31,00157$
      001E02 80 28            [24] 6081 	sjmp	00101$
      001E04                       6082 00157$:
      001E04 BF 32 02         [24] 6083 	cjne	r7,#0x32,00158$
      001E07 80 28            [24] 6084 	sjmp	00102$
      001E09                       6085 00158$:
      001E09 BF 33 02         [24] 6086 	cjne	r7,#0x33,00159$
      001E0C 80 28            [24] 6087 	sjmp	00103$
      001E0E                       6088 00159$:
      001E0E BF 34 02         [24] 6089 	cjne	r7,#0x34,00160$
      001E11 80 2D            [24] 6090 	sjmp	00105$
      001E13                       6091 00160$:
      001E13 BF 35 02         [24] 6092 	cjne	r7,#0x35,00161$
      001E16 80 2D            [24] 6093 	sjmp	00106$
      001E18                       6094 00161$:
      001E18 BF 36 02         [24] 6095 	cjne	r7,#0x36,00162$
      001E1B 80 2D            [24] 6096 	sjmp	00107$
      001E1D                       6097 00162$:
      001E1D BF 37 02         [24] 6098 	cjne	r7,#0x37,00163$
      001E20 80 32            [24] 6099 	sjmp	00109$
      001E22                       6100 00163$:
      001E22 BF 41 02         [24] 6101 	cjne	r7,#0x41,00164$
      001E25 80 14            [24] 6102 	sjmp	00104$
      001E27                       6103 00164$:
                                   6104 ;	main.c:89: case '1': basic(); break;
      001E27 BF 42 CD         [24] 6105 	cjne	r7,#0x42,00113$
      001E2A 80 23            [24] 6106 	sjmp	00108$
      001E2C                       6107 00101$:
      001E2C 12r15rC2         [24] 6108 	lcall	_basic
                                   6109 ;	main.c:90: case '2': dump(); break;
      001E2F 80 C6            [24] 6110 	sjmp	00113$
      001E31                       6111 00102$:
      001E31 12r11rF9         [24] 6112 	lcall	_dump
                                   6113 ;	main.c:91: case '3': check(); break;
      001E34 80 C1            [24] 6114 	sjmp	00113$
      001E36                       6115 00103$:
      001E36 12r14r86         [24] 6116 	lcall	_check
                                   6117 ;	main.c:92: case 'A': move(); break;
      001E39 80 BC            [24] 6118 	sjmp	00113$
      001E3B                       6119 00104$:
      001E3B 12r16r58         [24] 6120 	lcall	_move
                                   6121 ;	main.c:93: case '4': edit(); break;
      001E3E 80 B7            [24] 6122 	sjmp	00113$
      001E40                       6123 00105$:
      001E40 12r18r12         [24] 6124 	lcall	_edit
                                   6125 ;	main.c:94: case '5': count(); break;
      001E43 80 B2            [24] 6126 	sjmp	00113$
      001E45                       6127 00106$:
      001E45 12r19rCA         [24] 6128 	lcall	_count
                                   6129 ;	main.c:95: case '6': count(); break;
      001E48 80 AD            [24] 6130 	sjmp	00113$
      001E4A                       6131 00107$:
      001E4A 12r19rCA         [24] 6132 	lcall	_count
                                   6133 ;	main.c:96: case 'B': temperature(); break;
      001E4D 80 A8            [24] 6134 	sjmp	00113$
      001E4F                       6135 00108$:
      001E4F 12r1CrCA         [24] 6136 	lcall	_temperature
                                   6137 ;	main.c:97: case '7': light(); break;
      001E52 80 A3            [24] 6138 	sjmp	00113$
      001E54                       6139 00109$:
      001E54 12r1Dr04         [24] 6140 	lcall	_light
                                   6141 ;	main.c:99: }
                                   6142 ;	main.c:101: }
      001E57 80 9E            [24] 6143 	sjmp	00113$
                                   6144 	.area CSEG    (CODE)
                                   6145 	.area CONST   (CODE)
      000000                       6146 _font:
      000000 00                    6147 	.db #0x00	; 0
      000001 00                    6148 	.db #0x00	; 0
      000002 00                    6149 	.db #0x00	; 0
      000003 00                    6150 	.db #0x00	; 0
      000004 00                    6151 	.db #0x00	; 0
      000005 3E                    6152 	.db #0x3e	; 62
      000006 5B                    6153 	.db #0x5b	; 91
      000007 4F                    6154 	.db #0x4f	; 79	'O'
      000008 5B                    6155 	.db #0x5b	; 91
      000009 3E                    6156 	.db #0x3e	; 62
      00000A 3E                    6157 	.db #0x3e	; 62
      00000B 6B                    6158 	.db #0x6b	; 107	'k'
      00000C 4F                    6159 	.db #0x4f	; 79	'O'
      00000D 6B                    6160 	.db #0x6b	; 107	'k'
      00000E 3E                    6161 	.db #0x3e	; 62
      00000F 1C                    6162 	.db #0x1c	; 28
      000010 3E                    6163 	.db #0x3e	; 62
      000011 7C                    6164 	.db #0x7c	; 124
      000012 3E                    6165 	.db #0x3e	; 62
      000013 1C                    6166 	.db #0x1c	; 28
      000014 18                    6167 	.db #0x18	; 24
      000015 3C                    6168 	.db #0x3c	; 60
      000016 7E                    6169 	.db #0x7e	; 126
      000017 3C                    6170 	.db #0x3c	; 60
      000018 18                    6171 	.db #0x18	; 24
      000019 1C                    6172 	.db #0x1c	; 28
      00001A 57                    6173 	.db #0x57	; 87	'W'
      00001B 7D                    6174 	.db #0x7d	; 125
      00001C 57                    6175 	.db #0x57	; 87	'W'
      00001D 1C                    6176 	.db #0x1c	; 28
      00001E 1C                    6177 	.db #0x1c	; 28
      00001F 5E                    6178 	.db #0x5e	; 94
      000020 7F                    6179 	.db #0x7f	; 127
      000021 5E                    6180 	.db #0x5e	; 94
      000022 1C                    6181 	.db #0x1c	; 28
      000023 00                    6182 	.db #0x00	; 0
      000024 18                    6183 	.db #0x18	; 24
      000025 3C                    6184 	.db #0x3c	; 60
      000026 18                    6185 	.db #0x18	; 24
      000027 00                    6186 	.db #0x00	; 0
      000028 FF                    6187 	.db #0xff	; 255
      000029 E7                    6188 	.db #0xe7	; 231
      00002A C3                    6189 	.db #0xc3	; 195
      00002B E7                    6190 	.db #0xe7	; 231
      00002C FF                    6191 	.db #0xff	; 255
      00002D 00                    6192 	.db #0x00	; 0
      00002E 18                    6193 	.db #0x18	; 24
      00002F 24                    6194 	.db #0x24	; 36
      000030 18                    6195 	.db #0x18	; 24
      000031 00                    6196 	.db #0x00	; 0
      000032 FF                    6197 	.db #0xff	; 255
      000033 E7                    6198 	.db #0xe7	; 231
      000034 DB                    6199 	.db #0xdb	; 219
      000035 E7                    6200 	.db #0xe7	; 231
      000036 FF                    6201 	.db #0xff	; 255
      000037 30                    6202 	.db #0x30	; 48	'0'
      000038 48                    6203 	.db #0x48	; 72	'H'
      000039 3A                    6204 	.db #0x3a	; 58
      00003A 06                    6205 	.db #0x06	; 6
      00003B 0E                    6206 	.db #0x0e	; 14
      00003C 26                    6207 	.db #0x26	; 38
      00003D 29                    6208 	.db #0x29	; 41
      00003E 79                    6209 	.db #0x79	; 121	'y'
      00003F 29                    6210 	.db #0x29	; 41
      000040 26                    6211 	.db #0x26	; 38
      000041 40                    6212 	.db #0x40	; 64
      000042 7F                    6213 	.db #0x7f	; 127
      000043 05                    6214 	.db #0x05	; 5
      000044 05                    6215 	.db #0x05	; 5
      000045 07                    6216 	.db #0x07	; 7
      000046 40                    6217 	.db #0x40	; 64
      000047 7F                    6218 	.db #0x7f	; 127
      000048 05                    6219 	.db #0x05	; 5
      000049 25                    6220 	.db #0x25	; 37
      00004A 3F                    6221 	.db #0x3f	; 63
      00004B 5A                    6222 	.db #0x5a	; 90	'Z'
      00004C 3C                    6223 	.db #0x3c	; 60
      00004D E7                    6224 	.db #0xe7	; 231
      00004E 3C                    6225 	.db #0x3c	; 60
      00004F 5A                    6226 	.db #0x5a	; 90	'Z'
      000050 7F                    6227 	.db #0x7f	; 127
      000051 3E                    6228 	.db #0x3e	; 62
      000052 1C                    6229 	.db #0x1c	; 28
      000053 1C                    6230 	.db #0x1c	; 28
      000054 08                    6231 	.db #0x08	; 8
      000055 08                    6232 	.db #0x08	; 8
      000056 1C                    6233 	.db #0x1c	; 28
      000057 1C                    6234 	.db #0x1c	; 28
      000058 3E                    6235 	.db #0x3e	; 62
      000059 7F                    6236 	.db #0x7f	; 127
      00005A 14                    6237 	.db #0x14	; 20
      00005B 22                    6238 	.db #0x22	; 34
      00005C 7F                    6239 	.db #0x7f	; 127
      00005D 22                    6240 	.db #0x22	; 34
      00005E 14                    6241 	.db #0x14	; 20
      00005F 5F                    6242 	.db #0x5f	; 95
      000060 5F                    6243 	.db #0x5f	; 95
      000061 00                    6244 	.db #0x00	; 0
      000062 5F                    6245 	.db #0x5f	; 95
      000063 5F                    6246 	.db #0x5f	; 95
      000064 06                    6247 	.db #0x06	; 6
      000065 09                    6248 	.db #0x09	; 9
      000066 7F                    6249 	.db #0x7f	; 127
      000067 01                    6250 	.db #0x01	; 1
      000068 7F                    6251 	.db #0x7f	; 127
      000069 00                    6252 	.db #0x00	; 0
      00006A 66                    6253 	.db #0x66	; 102	'f'
      00006B 89                    6254 	.db #0x89	; 137
      00006C 95                    6255 	.db #0x95	; 149
      00006D 6A                    6256 	.db #0x6a	; 106	'j'
      00006E 60                    6257 	.db #0x60	; 96
      00006F 60                    6258 	.db #0x60	; 96
      000070 60                    6259 	.db #0x60	; 96
      000071 60                    6260 	.db #0x60	; 96
      000072 60                    6261 	.db #0x60	; 96
      000073 94                    6262 	.db #0x94	; 148
      000074 A2                    6263 	.db #0xa2	; 162
      000075 FF                    6264 	.db #0xff	; 255
      000076 A2                    6265 	.db #0xa2	; 162
      000077 94                    6266 	.db #0x94	; 148
      000078 08                    6267 	.db #0x08	; 8
      000079 04                    6268 	.db #0x04	; 4
      00007A 7E                    6269 	.db #0x7e	; 126
      00007B 04                    6270 	.db #0x04	; 4
      00007C 08                    6271 	.db #0x08	; 8
      00007D 10                    6272 	.db #0x10	; 16
      00007E 20                    6273 	.db #0x20	; 32
      00007F 7E                    6274 	.db #0x7e	; 126
      000080 20                    6275 	.db #0x20	; 32
      000081 10                    6276 	.db #0x10	; 16
      000082 08                    6277 	.db #0x08	; 8
      000083 08                    6278 	.db #0x08	; 8
      000084 2A                    6279 	.db #0x2a	; 42
      000085 1C                    6280 	.db #0x1c	; 28
      000086 08                    6281 	.db #0x08	; 8
      000087 08                    6282 	.db #0x08	; 8
      000088 1C                    6283 	.db #0x1c	; 28
      000089 2A                    6284 	.db #0x2a	; 42
      00008A 08                    6285 	.db #0x08	; 8
      00008B 08                    6286 	.db #0x08	; 8
      00008C 1E                    6287 	.db #0x1e	; 30
      00008D 10                    6288 	.db #0x10	; 16
      00008E 10                    6289 	.db #0x10	; 16
      00008F 10                    6290 	.db #0x10	; 16
      000090 10                    6291 	.db #0x10	; 16
      000091 0C                    6292 	.db #0x0c	; 12
      000092 1E                    6293 	.db #0x1e	; 30
      000093 0C                    6294 	.db #0x0c	; 12
      000094 1E                    6295 	.db #0x1e	; 30
      000095 0C                    6296 	.db #0x0c	; 12
      000096 30                    6297 	.db #0x30	; 48	'0'
      000097 38                    6298 	.db #0x38	; 56	'8'
      000098 3E                    6299 	.db #0x3e	; 62
      000099 38                    6300 	.db #0x38	; 56	'8'
      00009A 30                    6301 	.db #0x30	; 48	'0'
      00009B 06                    6302 	.db #0x06	; 6
      00009C 0E                    6303 	.db #0x0e	; 14
      00009D 3E                    6304 	.db #0x3e	; 62
      00009E 0E                    6305 	.db #0x0e	; 14
      00009F 06                    6306 	.db #0x06	; 6
      0000A0 00                    6307 	.db #0x00	; 0
      0000A1 00                    6308 	.db #0x00	; 0
      0000A2 00                    6309 	.db #0x00	; 0
      0000A3 00                    6310 	.db #0x00	; 0
      0000A4 00                    6311 	.db #0x00	; 0
      0000A5 00                    6312 	.db #0x00	; 0
      0000A6 00                    6313 	.db #0x00	; 0
      0000A7 5F                    6314 	.db #0x5f	; 95
      0000A8 00                    6315 	.db #0x00	; 0
      0000A9 00                    6316 	.db #0x00	; 0
      0000AA 00                    6317 	.db #0x00	; 0
      0000AB 07                    6318 	.db #0x07	; 7
      0000AC 00                    6319 	.db #0x00	; 0
      0000AD 07                    6320 	.db #0x07	; 7
      0000AE 00                    6321 	.db #0x00	; 0
      0000AF 14                    6322 	.db #0x14	; 20
      0000B0 7F                    6323 	.db #0x7f	; 127
      0000B1 14                    6324 	.db #0x14	; 20
      0000B2 7F                    6325 	.db #0x7f	; 127
      0000B3 14                    6326 	.db #0x14	; 20
      0000B4 24                    6327 	.db #0x24	; 36
      0000B5 2A                    6328 	.db #0x2a	; 42
      0000B6 7F                    6329 	.db #0x7f	; 127
      0000B7 2A                    6330 	.db #0x2a	; 42
      0000B8 12                    6331 	.db #0x12	; 18
      0000B9 23                    6332 	.db #0x23	; 35
      0000BA 13                    6333 	.db #0x13	; 19
      0000BB 08                    6334 	.db #0x08	; 8
      0000BC 64                    6335 	.db #0x64	; 100	'd'
      0000BD 62                    6336 	.db #0x62	; 98	'b'
      0000BE 36                    6337 	.db #0x36	; 54	'6'
      0000BF 49                    6338 	.db #0x49	; 73	'I'
      0000C0 56                    6339 	.db #0x56	; 86	'V'
      0000C1 20                    6340 	.db #0x20	; 32
      0000C2 50                    6341 	.db #0x50	; 80	'P'
      0000C3 00                    6342 	.db #0x00	; 0
      0000C4 08                    6343 	.db #0x08	; 8
      0000C5 07                    6344 	.db #0x07	; 7
      0000C6 03                    6345 	.db #0x03	; 3
      0000C7 00                    6346 	.db #0x00	; 0
      0000C8 00                    6347 	.db #0x00	; 0
      0000C9 1C                    6348 	.db #0x1c	; 28
      0000CA 22                    6349 	.db #0x22	; 34
      0000CB 41                    6350 	.db #0x41	; 65	'A'
      0000CC 00                    6351 	.db #0x00	; 0
      0000CD 00                    6352 	.db #0x00	; 0
      0000CE 41                    6353 	.db #0x41	; 65	'A'
      0000CF 22                    6354 	.db #0x22	; 34
      0000D0 1C                    6355 	.db #0x1c	; 28
      0000D1 00                    6356 	.db #0x00	; 0
      0000D2 2A                    6357 	.db #0x2a	; 42
      0000D3 1C                    6358 	.db #0x1c	; 28
      0000D4 7F                    6359 	.db #0x7f	; 127
      0000D5 1C                    6360 	.db #0x1c	; 28
      0000D6 2A                    6361 	.db #0x2a	; 42
      0000D7 08                    6362 	.db #0x08	; 8
      0000D8 08                    6363 	.db #0x08	; 8
      0000D9 3E                    6364 	.db #0x3e	; 62
      0000DA 08                    6365 	.db #0x08	; 8
      0000DB 08                    6366 	.db #0x08	; 8
      0000DC 00                    6367 	.db #0x00	; 0
      0000DD 80                    6368 	.db #0x80	; 128
      0000DE 70                    6369 	.db #0x70	; 112	'p'
      0000DF 30                    6370 	.db #0x30	; 48	'0'
      0000E0 00                    6371 	.db #0x00	; 0
      0000E1 08                    6372 	.db #0x08	; 8
      0000E2 08                    6373 	.db #0x08	; 8
      0000E3 08                    6374 	.db #0x08	; 8
      0000E4 08                    6375 	.db #0x08	; 8
      0000E5 08                    6376 	.db #0x08	; 8
      0000E6 00                    6377 	.db #0x00	; 0
      0000E7 00                    6378 	.db #0x00	; 0
      0000E8 60                    6379 	.db #0x60	; 96
      0000E9 60                    6380 	.db #0x60	; 96
      0000EA 00                    6381 	.db #0x00	; 0
      0000EB 20                    6382 	.db #0x20	; 32
      0000EC 10                    6383 	.db #0x10	; 16
      0000ED 08                    6384 	.db #0x08	; 8
      0000EE 04                    6385 	.db #0x04	; 4
      0000EF 02                    6386 	.db #0x02	; 2
      0000F0 3E                    6387 	.db #0x3e	; 62
      0000F1 51                    6388 	.db #0x51	; 81	'Q'
      0000F2 49                    6389 	.db #0x49	; 73	'I'
      0000F3 45                    6390 	.db #0x45	; 69	'E'
      0000F4 3E                    6391 	.db #0x3e	; 62
      0000F5 00                    6392 	.db #0x00	; 0
      0000F6 42                    6393 	.db #0x42	; 66	'B'
      0000F7 7F                    6394 	.db #0x7f	; 127
      0000F8 40                    6395 	.db #0x40	; 64
      0000F9 00                    6396 	.db #0x00	; 0
      0000FA 72                    6397 	.db #0x72	; 114	'r'
      0000FB 49                    6398 	.db #0x49	; 73	'I'
      0000FC 49                    6399 	.db #0x49	; 73	'I'
      0000FD 49                    6400 	.db #0x49	; 73	'I'
      0000FE 46                    6401 	.db #0x46	; 70	'F'
      0000FF 21                    6402 	.db #0x21	; 33
      000100 41                    6403 	.db #0x41	; 65	'A'
      000101 49                    6404 	.db #0x49	; 73	'I'
      000102 4D                    6405 	.db #0x4d	; 77	'M'
      000103 33                    6406 	.db #0x33	; 51	'3'
      000104 18                    6407 	.db #0x18	; 24
      000105 14                    6408 	.db #0x14	; 20
      000106 12                    6409 	.db #0x12	; 18
      000107 7F                    6410 	.db #0x7f	; 127
      000108 10                    6411 	.db #0x10	; 16
      000109 27                    6412 	.db #0x27	; 39
      00010A 45                    6413 	.db #0x45	; 69	'E'
      00010B 45                    6414 	.db #0x45	; 69	'E'
      00010C 45                    6415 	.db #0x45	; 69	'E'
      00010D 39                    6416 	.db #0x39	; 57	'9'
      00010E 3C                    6417 	.db #0x3c	; 60
      00010F 4A                    6418 	.db #0x4a	; 74	'J'
      000110 49                    6419 	.db #0x49	; 73	'I'
      000111 49                    6420 	.db #0x49	; 73	'I'
      000112 31                    6421 	.db #0x31	; 49	'1'
      000113 41                    6422 	.db #0x41	; 65	'A'
      000114 21                    6423 	.db #0x21	; 33
      000115 11                    6424 	.db #0x11	; 17
      000116 09                    6425 	.db #0x09	; 9
      000117 07                    6426 	.db #0x07	; 7
      000118 36                    6427 	.db #0x36	; 54	'6'
      000119 49                    6428 	.db #0x49	; 73	'I'
      00011A 49                    6429 	.db #0x49	; 73	'I'
      00011B 49                    6430 	.db #0x49	; 73	'I'
      00011C 36                    6431 	.db #0x36	; 54	'6'
      00011D 46                    6432 	.db #0x46	; 70	'F'
      00011E 49                    6433 	.db #0x49	; 73	'I'
      00011F 49                    6434 	.db #0x49	; 73	'I'
      000120 29                    6435 	.db #0x29	; 41
      000121 1E                    6436 	.db #0x1e	; 30
      000122 00                    6437 	.db #0x00	; 0
      000123 00                    6438 	.db #0x00	; 0
      000124 14                    6439 	.db #0x14	; 20
      000125 00                    6440 	.db #0x00	; 0
      000126 00                    6441 	.db #0x00	; 0
      000127 00                    6442 	.db #0x00	; 0
      000128 40                    6443 	.db #0x40	; 64
      000129 34                    6444 	.db #0x34	; 52	'4'
      00012A 00                    6445 	.db #0x00	; 0
      00012B 00                    6446 	.db #0x00	; 0
      00012C 00                    6447 	.db #0x00	; 0
      00012D 08                    6448 	.db #0x08	; 8
      00012E 14                    6449 	.db #0x14	; 20
      00012F 22                    6450 	.db #0x22	; 34
      000130 41                    6451 	.db #0x41	; 65	'A'
      000131 14                    6452 	.db #0x14	; 20
      000132 14                    6453 	.db #0x14	; 20
      000133 14                    6454 	.db #0x14	; 20
      000134 14                    6455 	.db #0x14	; 20
      000135 14                    6456 	.db #0x14	; 20
      000136 00                    6457 	.db #0x00	; 0
      000137 41                    6458 	.db #0x41	; 65	'A'
      000138 22                    6459 	.db #0x22	; 34
      000139 14                    6460 	.db #0x14	; 20
      00013A 08                    6461 	.db #0x08	; 8
      00013B 02                    6462 	.db #0x02	; 2
      00013C 01                    6463 	.db #0x01	; 1
      00013D 59                    6464 	.db #0x59	; 89	'Y'
      00013E 09                    6465 	.db #0x09	; 9
      00013F 06                    6466 	.db #0x06	; 6
      000140 3E                    6467 	.db #0x3e	; 62
      000141 41                    6468 	.db #0x41	; 65	'A'
      000142 5D                    6469 	.db #0x5d	; 93
      000143 59                    6470 	.db #0x59	; 89	'Y'
      000144 4E                    6471 	.db #0x4e	; 78	'N'
      000145 7C                    6472 	.db #0x7c	; 124
      000146 12                    6473 	.db #0x12	; 18
      000147 11                    6474 	.db #0x11	; 17
      000148 12                    6475 	.db #0x12	; 18
      000149 7C                    6476 	.db #0x7c	; 124
      00014A 7F                    6477 	.db #0x7f	; 127
      00014B 49                    6478 	.db #0x49	; 73	'I'
      00014C 49                    6479 	.db #0x49	; 73	'I'
      00014D 49                    6480 	.db #0x49	; 73	'I'
      00014E 36                    6481 	.db #0x36	; 54	'6'
      00014F 3E                    6482 	.db #0x3e	; 62
      000150 41                    6483 	.db #0x41	; 65	'A'
      000151 41                    6484 	.db #0x41	; 65	'A'
      000152 41                    6485 	.db #0x41	; 65	'A'
      000153 22                    6486 	.db #0x22	; 34
      000154 7F                    6487 	.db #0x7f	; 127
      000155 41                    6488 	.db #0x41	; 65	'A'
      000156 41                    6489 	.db #0x41	; 65	'A'
      000157 41                    6490 	.db #0x41	; 65	'A'
      000158 3E                    6491 	.db #0x3e	; 62
      000159 7F                    6492 	.db #0x7f	; 127
      00015A 49                    6493 	.db #0x49	; 73	'I'
      00015B 49                    6494 	.db #0x49	; 73	'I'
      00015C 49                    6495 	.db #0x49	; 73	'I'
      00015D 41                    6496 	.db #0x41	; 65	'A'
      00015E 7F                    6497 	.db #0x7f	; 127
      00015F 09                    6498 	.db #0x09	; 9
      000160 09                    6499 	.db #0x09	; 9
      000161 09                    6500 	.db #0x09	; 9
      000162 01                    6501 	.db #0x01	; 1
      000163 3E                    6502 	.db #0x3e	; 62
      000164 41                    6503 	.db #0x41	; 65	'A'
      000165 41                    6504 	.db #0x41	; 65	'A'
      000166 51                    6505 	.db #0x51	; 81	'Q'
      000167 73                    6506 	.db #0x73	; 115	's'
      000168 7F                    6507 	.db #0x7f	; 127
      000169 08                    6508 	.db #0x08	; 8
      00016A 08                    6509 	.db #0x08	; 8
      00016B 08                    6510 	.db #0x08	; 8
      00016C 7F                    6511 	.db #0x7f	; 127
      00016D 00                    6512 	.db #0x00	; 0
      00016E 41                    6513 	.db #0x41	; 65	'A'
      00016F 7F                    6514 	.db #0x7f	; 127
      000170 41                    6515 	.db #0x41	; 65	'A'
      000171 00                    6516 	.db #0x00	; 0
      000172 20                    6517 	.db #0x20	; 32
      000173 40                    6518 	.db #0x40	; 64
      000174 41                    6519 	.db #0x41	; 65	'A'
      000175 3F                    6520 	.db #0x3f	; 63
      000176 01                    6521 	.db #0x01	; 1
      000177 7F                    6522 	.db #0x7f	; 127
      000178 08                    6523 	.db #0x08	; 8
      000179 14                    6524 	.db #0x14	; 20
      00017A 22                    6525 	.db #0x22	; 34
      00017B 41                    6526 	.db #0x41	; 65	'A'
      00017C 7F                    6527 	.db #0x7f	; 127
      00017D 40                    6528 	.db #0x40	; 64
      00017E 40                    6529 	.db #0x40	; 64
      00017F 40                    6530 	.db #0x40	; 64
      000180 40                    6531 	.db #0x40	; 64
      000181 7F                    6532 	.db #0x7f	; 127
      000182 02                    6533 	.db #0x02	; 2
      000183 1C                    6534 	.db #0x1c	; 28
      000184 02                    6535 	.db #0x02	; 2
      000185 7F                    6536 	.db #0x7f	; 127
      000186 7F                    6537 	.db #0x7f	; 127
      000187 04                    6538 	.db #0x04	; 4
      000188 08                    6539 	.db #0x08	; 8
      000189 10                    6540 	.db #0x10	; 16
      00018A 7F                    6541 	.db #0x7f	; 127
      00018B 3E                    6542 	.db #0x3e	; 62
      00018C 41                    6543 	.db #0x41	; 65	'A'
      00018D 41                    6544 	.db #0x41	; 65	'A'
      00018E 41                    6545 	.db #0x41	; 65	'A'
      00018F 3E                    6546 	.db #0x3e	; 62
      000190 7F                    6547 	.db #0x7f	; 127
      000191 09                    6548 	.db #0x09	; 9
      000192 09                    6549 	.db #0x09	; 9
      000193 09                    6550 	.db #0x09	; 9
      000194 06                    6551 	.db #0x06	; 6
      000195 3E                    6552 	.db #0x3e	; 62
      000196 41                    6553 	.db #0x41	; 65	'A'
      000197 51                    6554 	.db #0x51	; 81	'Q'
      000198 21                    6555 	.db #0x21	; 33
      000199 5E                    6556 	.db #0x5e	; 94
      00019A 7F                    6557 	.db #0x7f	; 127
      00019B 09                    6558 	.db #0x09	; 9
      00019C 19                    6559 	.db #0x19	; 25
      00019D 29                    6560 	.db #0x29	; 41
      00019E 46                    6561 	.db #0x46	; 70	'F'
      00019F 26                    6562 	.db #0x26	; 38
      0001A0 49                    6563 	.db #0x49	; 73	'I'
      0001A1 49                    6564 	.db #0x49	; 73	'I'
      0001A2 49                    6565 	.db #0x49	; 73	'I'
      0001A3 32                    6566 	.db #0x32	; 50	'2'
      0001A4 03                    6567 	.db #0x03	; 3
      0001A5 01                    6568 	.db #0x01	; 1
      0001A6 7F                    6569 	.db #0x7f	; 127
      0001A7 01                    6570 	.db #0x01	; 1
      0001A8 03                    6571 	.db #0x03	; 3
      0001A9 3F                    6572 	.db #0x3f	; 63
      0001AA 40                    6573 	.db #0x40	; 64
      0001AB 40                    6574 	.db #0x40	; 64
      0001AC 40                    6575 	.db #0x40	; 64
      0001AD 3F                    6576 	.db #0x3f	; 63
      0001AE 1F                    6577 	.db #0x1f	; 31
      0001AF 20                    6578 	.db #0x20	; 32
      0001B0 40                    6579 	.db #0x40	; 64
      0001B1 20                    6580 	.db #0x20	; 32
      0001B2 1F                    6581 	.db #0x1f	; 31
      0001B3 3F                    6582 	.db #0x3f	; 63
      0001B4 40                    6583 	.db #0x40	; 64
      0001B5 38                    6584 	.db #0x38	; 56	'8'
      0001B6 40                    6585 	.db #0x40	; 64
      0001B7 3F                    6586 	.db #0x3f	; 63
      0001B8 63                    6587 	.db #0x63	; 99	'c'
      0001B9 14                    6588 	.db #0x14	; 20
      0001BA 08                    6589 	.db #0x08	; 8
      0001BB 14                    6590 	.db #0x14	; 20
      0001BC 63                    6591 	.db #0x63	; 99	'c'
      0001BD 03                    6592 	.db #0x03	; 3
      0001BE 04                    6593 	.db #0x04	; 4
      0001BF 78                    6594 	.db #0x78	; 120	'x'
      0001C0 04                    6595 	.db #0x04	; 4
      0001C1 03                    6596 	.db #0x03	; 3
      0001C2 61                    6597 	.db #0x61	; 97	'a'
      0001C3 59                    6598 	.db #0x59	; 89	'Y'
      0001C4 49                    6599 	.db #0x49	; 73	'I'
      0001C5 4D                    6600 	.db #0x4d	; 77	'M'
      0001C6 43                    6601 	.db #0x43	; 67	'C'
      0001C7 00                    6602 	.db #0x00	; 0
      0001C8 7F                    6603 	.db #0x7f	; 127
      0001C9 41                    6604 	.db #0x41	; 65	'A'
      0001CA 41                    6605 	.db #0x41	; 65	'A'
      0001CB 41                    6606 	.db #0x41	; 65	'A'
      0001CC 02                    6607 	.db #0x02	; 2
      0001CD 04                    6608 	.db #0x04	; 4
      0001CE 08                    6609 	.db #0x08	; 8
      0001CF 10                    6610 	.db #0x10	; 16
      0001D0 20                    6611 	.db #0x20	; 32
      0001D1 00                    6612 	.db #0x00	; 0
      0001D2 41                    6613 	.db #0x41	; 65	'A'
      0001D3 41                    6614 	.db #0x41	; 65	'A'
      0001D4 41                    6615 	.db #0x41	; 65	'A'
      0001D5 7F                    6616 	.db #0x7f	; 127
      0001D6 04                    6617 	.db #0x04	; 4
      0001D7 02                    6618 	.db #0x02	; 2
      0001D8 01                    6619 	.db #0x01	; 1
      0001D9 02                    6620 	.db #0x02	; 2
      0001DA 04                    6621 	.db #0x04	; 4
      0001DB 40                    6622 	.db #0x40	; 64
      0001DC 40                    6623 	.db #0x40	; 64
      0001DD 40                    6624 	.db #0x40	; 64
      0001DE 40                    6625 	.db #0x40	; 64
      0001DF 40                    6626 	.db #0x40	; 64
      0001E0 00                    6627 	.db #0x00	; 0
      0001E1 03                    6628 	.db #0x03	; 3
      0001E2 07                    6629 	.db #0x07	; 7
      0001E3 08                    6630 	.db #0x08	; 8
      0001E4 00                    6631 	.db #0x00	; 0
      0001E5 20                    6632 	.db #0x20	; 32
      0001E6 54                    6633 	.db #0x54	; 84	'T'
      0001E7 54                    6634 	.db #0x54	; 84	'T'
      0001E8 78                    6635 	.db #0x78	; 120	'x'
      0001E9 40                    6636 	.db #0x40	; 64
      0001EA 7F                    6637 	.db #0x7f	; 127
      0001EB 28                    6638 	.db #0x28	; 40
      0001EC 44                    6639 	.db #0x44	; 68	'D'
      0001ED 44                    6640 	.db #0x44	; 68	'D'
      0001EE 38                    6641 	.db #0x38	; 56	'8'
      0001EF 38                    6642 	.db #0x38	; 56	'8'
      0001F0 44                    6643 	.db #0x44	; 68	'D'
      0001F1 44                    6644 	.db #0x44	; 68	'D'
      0001F2 44                    6645 	.db #0x44	; 68	'D'
      0001F3 28                    6646 	.db #0x28	; 40
      0001F4 38                    6647 	.db #0x38	; 56	'8'
      0001F5 44                    6648 	.db #0x44	; 68	'D'
      0001F6 44                    6649 	.db #0x44	; 68	'D'
      0001F7 28                    6650 	.db #0x28	; 40
      0001F8 7F                    6651 	.db #0x7f	; 127
      0001F9 38                    6652 	.db #0x38	; 56	'8'
      0001FA 54                    6653 	.db #0x54	; 84	'T'
      0001FB 54                    6654 	.db #0x54	; 84	'T'
      0001FC 54                    6655 	.db #0x54	; 84	'T'
      0001FD 18                    6656 	.db #0x18	; 24
      0001FE 00                    6657 	.db #0x00	; 0
      0001FF 08                    6658 	.db #0x08	; 8
      000200 7E                    6659 	.db #0x7e	; 126
      000201 09                    6660 	.db #0x09	; 9
      000202 02                    6661 	.db #0x02	; 2
      000203 18                    6662 	.db #0x18	; 24
      000204 A4                    6663 	.db #0xa4	; 164
      000205 A4                    6664 	.db #0xa4	; 164
      000206 9C                    6665 	.db #0x9c	; 156
      000207 78                    6666 	.db #0x78	; 120	'x'
      000208 7F                    6667 	.db #0x7f	; 127
      000209 08                    6668 	.db #0x08	; 8
      00020A 04                    6669 	.db #0x04	; 4
      00020B 04                    6670 	.db #0x04	; 4
      00020C 78                    6671 	.db #0x78	; 120	'x'
      00020D 00                    6672 	.db #0x00	; 0
      00020E 44                    6673 	.db #0x44	; 68	'D'
      00020F 7D                    6674 	.db #0x7d	; 125
      000210 40                    6675 	.db #0x40	; 64
      000211 00                    6676 	.db #0x00	; 0
      000212 20                    6677 	.db #0x20	; 32
      000213 40                    6678 	.db #0x40	; 64
      000214 40                    6679 	.db #0x40	; 64
      000215 3D                    6680 	.db #0x3d	; 61
      000216 00                    6681 	.db #0x00	; 0
      000217 7F                    6682 	.db #0x7f	; 127
      000218 10                    6683 	.db #0x10	; 16
      000219 28                    6684 	.db #0x28	; 40
      00021A 44                    6685 	.db #0x44	; 68	'D'
      00021B 00                    6686 	.db #0x00	; 0
      00021C 00                    6687 	.db #0x00	; 0
      00021D 41                    6688 	.db #0x41	; 65	'A'
      00021E 7F                    6689 	.db #0x7f	; 127
      00021F 40                    6690 	.db #0x40	; 64
      000220 00                    6691 	.db #0x00	; 0
      000221 7C                    6692 	.db #0x7c	; 124
      000222 04                    6693 	.db #0x04	; 4
      000223 78                    6694 	.db #0x78	; 120	'x'
      000224 04                    6695 	.db #0x04	; 4
      000225 78                    6696 	.db #0x78	; 120	'x'
      000226 7C                    6697 	.db #0x7c	; 124
      000227 08                    6698 	.db #0x08	; 8
      000228 04                    6699 	.db #0x04	; 4
      000229 04                    6700 	.db #0x04	; 4
      00022A 78                    6701 	.db #0x78	; 120	'x'
      00022B 38                    6702 	.db #0x38	; 56	'8'
      00022C 44                    6703 	.db #0x44	; 68	'D'
      00022D 44                    6704 	.db #0x44	; 68	'D'
      00022E 44                    6705 	.db #0x44	; 68	'D'
      00022F 38                    6706 	.db #0x38	; 56	'8'
      000230 FC                    6707 	.db #0xfc	; 252
      000231 18                    6708 	.db #0x18	; 24
      000232 24                    6709 	.db #0x24	; 36
      000233 24                    6710 	.db #0x24	; 36
      000234 18                    6711 	.db #0x18	; 24
      000235 18                    6712 	.db #0x18	; 24
      000236 24                    6713 	.db #0x24	; 36
      000237 24                    6714 	.db #0x24	; 36
      000238 18                    6715 	.db #0x18	; 24
      000239 FC                    6716 	.db #0xfc	; 252
      00023A 7C                    6717 	.db #0x7c	; 124
      00023B 08                    6718 	.db #0x08	; 8
      00023C 04                    6719 	.db #0x04	; 4
      00023D 04                    6720 	.db #0x04	; 4
      00023E 08                    6721 	.db #0x08	; 8
      00023F 48                    6722 	.db #0x48	; 72	'H'
      000240 54                    6723 	.db #0x54	; 84	'T'
      000241 54                    6724 	.db #0x54	; 84	'T'
      000242 54                    6725 	.db #0x54	; 84	'T'
      000243 24                    6726 	.db #0x24	; 36
      000244 04                    6727 	.db #0x04	; 4
      000245 04                    6728 	.db #0x04	; 4
      000246 3F                    6729 	.db #0x3f	; 63
      000247 44                    6730 	.db #0x44	; 68	'D'
      000248 24                    6731 	.db #0x24	; 36
      000249 3C                    6732 	.db #0x3c	; 60
      00024A 40                    6733 	.db #0x40	; 64
      00024B 40                    6734 	.db #0x40	; 64
      00024C 20                    6735 	.db #0x20	; 32
      00024D 7C                    6736 	.db #0x7c	; 124
      00024E 1C                    6737 	.db #0x1c	; 28
      00024F 20                    6738 	.db #0x20	; 32
      000250 40                    6739 	.db #0x40	; 64
      000251 20                    6740 	.db #0x20	; 32
      000252 1C                    6741 	.db #0x1c	; 28
      000253 3C                    6742 	.db #0x3c	; 60
      000254 40                    6743 	.db #0x40	; 64
      000255 30                    6744 	.db #0x30	; 48	'0'
      000256 40                    6745 	.db #0x40	; 64
      000257 3C                    6746 	.db #0x3c	; 60
      000258 44                    6747 	.db #0x44	; 68	'D'
      000259 28                    6748 	.db #0x28	; 40
      00025A 10                    6749 	.db #0x10	; 16
      00025B 28                    6750 	.db #0x28	; 40
      00025C 44                    6751 	.db #0x44	; 68	'D'
      00025D 4C                    6752 	.db #0x4c	; 76	'L'
      00025E 90                    6753 	.db #0x90	; 144
      00025F 90                    6754 	.db #0x90	; 144
      000260 90                    6755 	.db #0x90	; 144
      000261 7C                    6756 	.db #0x7c	; 124
      000262 44                    6757 	.db #0x44	; 68	'D'
      000263 64                    6758 	.db #0x64	; 100	'd'
      000264 54                    6759 	.db #0x54	; 84	'T'
      000265 4C                    6760 	.db #0x4c	; 76	'L'
      000266 44                    6761 	.db #0x44	; 68	'D'
      000267 00                    6762 	.db #0x00	; 0
      000268 08                    6763 	.db #0x08	; 8
      000269 36                    6764 	.db #0x36	; 54	'6'
      00026A 41                    6765 	.db #0x41	; 65	'A'
      00026B 00                    6766 	.db #0x00	; 0
      00026C 00                    6767 	.db #0x00	; 0
      00026D 00                    6768 	.db #0x00	; 0
      00026E 77                    6769 	.db #0x77	; 119	'w'
      00026F 00                    6770 	.db #0x00	; 0
      000270 00                    6771 	.db #0x00	; 0
      000271 00                    6772 	.db #0x00	; 0
      000272 41                    6773 	.db #0x41	; 65	'A'
      000273 36                    6774 	.db #0x36	; 54	'6'
      000274 08                    6775 	.db #0x08	; 8
      000275 00                    6776 	.db #0x00	; 0
      000276 02                    6777 	.db #0x02	; 2
      000277 01                    6778 	.db #0x01	; 1
      000278 02                    6779 	.db #0x02	; 2
      000279 04                    6780 	.db #0x04	; 4
      00027A 02                    6781 	.db #0x02	; 2
      00027B 3C                    6782 	.db #0x3c	; 60
      00027C 26                    6783 	.db #0x26	; 38
      00027D 23                    6784 	.db #0x23	; 35
      00027E 26                    6785 	.db #0x26	; 38
      00027F 3C                    6786 	.db #0x3c	; 60
      000280 1E                    6787 	.db #0x1e	; 30
      000281 A1                    6788 	.db #0xa1	; 161
      000282 A1                    6789 	.db #0xa1	; 161
      000283 61                    6790 	.db #0x61	; 97	'a'
      000284 12                    6791 	.db #0x12	; 18
      000285 3A                    6792 	.db #0x3a	; 58
      000286 40                    6793 	.db #0x40	; 64
      000287 40                    6794 	.db #0x40	; 64
      000288 20                    6795 	.db #0x20	; 32
      000289 7A                    6796 	.db #0x7a	; 122	'z'
      00028A 38                    6797 	.db #0x38	; 56	'8'
      00028B 54                    6798 	.db #0x54	; 84	'T'
      00028C 54                    6799 	.db #0x54	; 84	'T'
      00028D 55                    6800 	.db #0x55	; 85	'U'
      00028E 59                    6801 	.db #0x59	; 89	'Y'
      00028F 21                    6802 	.db #0x21	; 33
      000290 55                    6803 	.db #0x55	; 85	'U'
      000291 55                    6804 	.db #0x55	; 85	'U'
      000292 79                    6805 	.db #0x79	; 121	'y'
      000293 41                    6806 	.db #0x41	; 65	'A'
      000294 22                    6807 	.db #0x22	; 34
      000295 54                    6808 	.db #0x54	; 84	'T'
      000296 54                    6809 	.db #0x54	; 84	'T'
      000297 78                    6810 	.db #0x78	; 120	'x'
      000298 42                    6811 	.db #0x42	; 66	'B'
      000299 21                    6812 	.db #0x21	; 33
      00029A 55                    6813 	.db #0x55	; 85	'U'
      00029B 54                    6814 	.db #0x54	; 84	'T'
      00029C 78                    6815 	.db #0x78	; 120	'x'
      00029D 40                    6816 	.db #0x40	; 64
      00029E 20                    6817 	.db #0x20	; 32
      00029F 54                    6818 	.db #0x54	; 84	'T'
      0002A0 55                    6819 	.db #0x55	; 85	'U'
      0002A1 79                    6820 	.db #0x79	; 121	'y'
      0002A2 40                    6821 	.db #0x40	; 64
      0002A3 0C                    6822 	.db #0x0c	; 12
      0002A4 1E                    6823 	.db #0x1e	; 30
      0002A5 52                    6824 	.db #0x52	; 82	'R'
      0002A6 72                    6825 	.db #0x72	; 114	'r'
      0002A7 12                    6826 	.db #0x12	; 18
      0002A8 39                    6827 	.db #0x39	; 57	'9'
      0002A9 55                    6828 	.db #0x55	; 85	'U'
      0002AA 55                    6829 	.db #0x55	; 85	'U'
      0002AB 55                    6830 	.db #0x55	; 85	'U'
      0002AC 59                    6831 	.db #0x59	; 89	'Y'
      0002AD 39                    6832 	.db #0x39	; 57	'9'
      0002AE 54                    6833 	.db #0x54	; 84	'T'
      0002AF 54                    6834 	.db #0x54	; 84	'T'
      0002B0 54                    6835 	.db #0x54	; 84	'T'
      0002B1 59                    6836 	.db #0x59	; 89	'Y'
      0002B2 39                    6837 	.db #0x39	; 57	'9'
      0002B3 55                    6838 	.db #0x55	; 85	'U'
      0002B4 54                    6839 	.db #0x54	; 84	'T'
      0002B5 54                    6840 	.db #0x54	; 84	'T'
      0002B6 58                    6841 	.db #0x58	; 88	'X'
      0002B7 00                    6842 	.db #0x00	; 0
      0002B8 00                    6843 	.db #0x00	; 0
      0002B9 45                    6844 	.db #0x45	; 69	'E'
      0002BA 7C                    6845 	.db #0x7c	; 124
      0002BB 41                    6846 	.db #0x41	; 65	'A'
      0002BC 00                    6847 	.db #0x00	; 0
      0002BD 02                    6848 	.db #0x02	; 2
      0002BE 45                    6849 	.db #0x45	; 69	'E'
      0002BF 7D                    6850 	.db #0x7d	; 125
      0002C0 42                    6851 	.db #0x42	; 66	'B'
      0002C1 00                    6852 	.db #0x00	; 0
      0002C2 01                    6853 	.db #0x01	; 1
      0002C3 45                    6854 	.db #0x45	; 69	'E'
      0002C4 7C                    6855 	.db #0x7c	; 124
      0002C5 40                    6856 	.db #0x40	; 64
      0002C6 7D                    6857 	.db #0x7d	; 125
      0002C7 12                    6858 	.db #0x12	; 18
      0002C8 11                    6859 	.db #0x11	; 17
      0002C9 12                    6860 	.db #0x12	; 18
      0002CA 7D                    6861 	.db #0x7d	; 125
      0002CB F0                    6862 	.db #0xf0	; 240
      0002CC 28                    6863 	.db #0x28	; 40
      0002CD 25                    6864 	.db #0x25	; 37
      0002CE 28                    6865 	.db #0x28	; 40
      0002CF F0                    6866 	.db #0xf0	; 240
      0002D0 7C                    6867 	.db #0x7c	; 124
      0002D1 54                    6868 	.db #0x54	; 84	'T'
      0002D2 55                    6869 	.db #0x55	; 85	'U'
      0002D3 45                    6870 	.db #0x45	; 69	'E'
      0002D4 00                    6871 	.db #0x00	; 0
      0002D5 20                    6872 	.db #0x20	; 32
      0002D6 54                    6873 	.db #0x54	; 84	'T'
      0002D7 54                    6874 	.db #0x54	; 84	'T'
      0002D8 7C                    6875 	.db #0x7c	; 124
      0002D9 54                    6876 	.db #0x54	; 84	'T'
      0002DA 7C                    6877 	.db #0x7c	; 124
      0002DB 0A                    6878 	.db #0x0a	; 10
      0002DC 09                    6879 	.db #0x09	; 9
      0002DD 7F                    6880 	.db #0x7f	; 127
      0002DE 49                    6881 	.db #0x49	; 73	'I'
      0002DF 32                    6882 	.db #0x32	; 50	'2'
      0002E0 49                    6883 	.db #0x49	; 73	'I'
      0002E1 49                    6884 	.db #0x49	; 73	'I'
      0002E2 49                    6885 	.db #0x49	; 73	'I'
      0002E3 32                    6886 	.db #0x32	; 50	'2'
      0002E4 3A                    6887 	.db #0x3a	; 58
      0002E5 44                    6888 	.db #0x44	; 68	'D'
      0002E6 44                    6889 	.db #0x44	; 68	'D'
      0002E7 44                    6890 	.db #0x44	; 68	'D'
      0002E8 3A                    6891 	.db #0x3a	; 58
      0002E9 32                    6892 	.db #0x32	; 50	'2'
      0002EA 4A                    6893 	.db #0x4a	; 74	'J'
      0002EB 48                    6894 	.db #0x48	; 72	'H'
      0002EC 48                    6895 	.db #0x48	; 72	'H'
      0002ED 30                    6896 	.db #0x30	; 48	'0'
      0002EE 3A                    6897 	.db #0x3a	; 58
      0002EF 41                    6898 	.db #0x41	; 65	'A'
      0002F0 41                    6899 	.db #0x41	; 65	'A'
      0002F1 21                    6900 	.db #0x21	; 33
      0002F2 7A                    6901 	.db #0x7a	; 122	'z'
      0002F3 3A                    6902 	.db #0x3a	; 58
      0002F4 42                    6903 	.db #0x42	; 66	'B'
      0002F5 40                    6904 	.db #0x40	; 64
      0002F6 20                    6905 	.db #0x20	; 32
      0002F7 78                    6906 	.db #0x78	; 120	'x'
      0002F8 00                    6907 	.db #0x00	; 0
      0002F9 9D                    6908 	.db #0x9d	; 157
      0002FA A0                    6909 	.db #0xa0	; 160
      0002FB A0                    6910 	.db #0xa0	; 160
      0002FC 7D                    6911 	.db #0x7d	; 125
      0002FD 3D                    6912 	.db #0x3d	; 61
      0002FE 42                    6913 	.db #0x42	; 66	'B'
      0002FF 42                    6914 	.db #0x42	; 66	'B'
      000300 42                    6915 	.db #0x42	; 66	'B'
      000301 3D                    6916 	.db #0x3d	; 61
      000302 3D                    6917 	.db #0x3d	; 61
      000303 40                    6918 	.db #0x40	; 64
      000304 40                    6919 	.db #0x40	; 64
      000305 40                    6920 	.db #0x40	; 64
      000306 3D                    6921 	.db #0x3d	; 61
      000307 3C                    6922 	.db #0x3c	; 60
      000308 24                    6923 	.db #0x24	; 36
      000309 FF                    6924 	.db #0xff	; 255
      00030A 24                    6925 	.db #0x24	; 36
      00030B 24                    6926 	.db #0x24	; 36
      00030C 48                    6927 	.db #0x48	; 72	'H'
      00030D 7E                    6928 	.db #0x7e	; 126
      00030E 49                    6929 	.db #0x49	; 73	'I'
      00030F 43                    6930 	.db #0x43	; 67	'C'
      000310 66                    6931 	.db #0x66	; 102	'f'
      000311 2B                    6932 	.db #0x2b	; 43
      000312 2F                    6933 	.db #0x2f	; 47
      000313 FC                    6934 	.db #0xfc	; 252
      000314 2F                    6935 	.db #0x2f	; 47
      000315 2B                    6936 	.db #0x2b	; 43
      000316 FF                    6937 	.db #0xff	; 255
      000317 09                    6938 	.db #0x09	; 9
      000318 29                    6939 	.db #0x29	; 41
      000319 F6                    6940 	.db #0xf6	; 246
      00031A 20                    6941 	.db #0x20	; 32
      00031B C0                    6942 	.db #0xc0	; 192
      00031C 88                    6943 	.db #0x88	; 136
      00031D 7E                    6944 	.db #0x7e	; 126
      00031E 09                    6945 	.db #0x09	; 9
      00031F 03                    6946 	.db #0x03	; 3
      000320 20                    6947 	.db #0x20	; 32
      000321 54                    6948 	.db #0x54	; 84	'T'
      000322 54                    6949 	.db #0x54	; 84	'T'
      000323 79                    6950 	.db #0x79	; 121	'y'
      000324 41                    6951 	.db #0x41	; 65	'A'
      000325 00                    6952 	.db #0x00	; 0
      000326 00                    6953 	.db #0x00	; 0
      000327 44                    6954 	.db #0x44	; 68	'D'
      000328 7D                    6955 	.db #0x7d	; 125
      000329 41                    6956 	.db #0x41	; 65	'A'
      00032A 30                    6957 	.db #0x30	; 48	'0'
      00032B 48                    6958 	.db #0x48	; 72	'H'
      00032C 48                    6959 	.db #0x48	; 72	'H'
      00032D 4A                    6960 	.db #0x4a	; 74	'J'
      00032E 32                    6961 	.db #0x32	; 50	'2'
      00032F 38                    6962 	.db #0x38	; 56	'8'
      000330 40                    6963 	.db #0x40	; 64
      000331 40                    6964 	.db #0x40	; 64
      000332 22                    6965 	.db #0x22	; 34
      000333 7A                    6966 	.db #0x7a	; 122	'z'
      000334 00                    6967 	.db #0x00	; 0
      000335 7A                    6968 	.db #0x7a	; 122	'z'
      000336 0A                    6969 	.db #0x0a	; 10
      000337 0A                    6970 	.db #0x0a	; 10
      000338 72                    6971 	.db #0x72	; 114	'r'
      000339 7D                    6972 	.db #0x7d	; 125
      00033A 0D                    6973 	.db #0x0d	; 13
      00033B 19                    6974 	.db #0x19	; 25
      00033C 31                    6975 	.db #0x31	; 49	'1'
      00033D 7D                    6976 	.db #0x7d	; 125
      00033E 26                    6977 	.db #0x26	; 38
      00033F 29                    6978 	.db #0x29	; 41
      000340 29                    6979 	.db #0x29	; 41
      000341 2F                    6980 	.db #0x2f	; 47
      000342 28                    6981 	.db #0x28	; 40
      000343 26                    6982 	.db #0x26	; 38
      000344 29                    6983 	.db #0x29	; 41
      000345 29                    6984 	.db #0x29	; 41
      000346 29                    6985 	.db #0x29	; 41
      000347 26                    6986 	.db #0x26	; 38
      000348 30                    6987 	.db #0x30	; 48	'0'
      000349 48                    6988 	.db #0x48	; 72	'H'
      00034A 4D                    6989 	.db #0x4d	; 77	'M'
      00034B 40                    6990 	.db #0x40	; 64
      00034C 20                    6991 	.db #0x20	; 32
      00034D 38                    6992 	.db #0x38	; 56	'8'
      00034E 08                    6993 	.db #0x08	; 8
      00034F 08                    6994 	.db #0x08	; 8
      000350 08                    6995 	.db #0x08	; 8
      000351 08                    6996 	.db #0x08	; 8
      000352 08                    6997 	.db #0x08	; 8
      000353 08                    6998 	.db #0x08	; 8
      000354 08                    6999 	.db #0x08	; 8
      000355 08                    7000 	.db #0x08	; 8
      000356 38                    7001 	.db #0x38	; 56	'8'
      000357 2F                    7002 	.db #0x2f	; 47
      000358 10                    7003 	.db #0x10	; 16
      000359 C8                    7004 	.db #0xc8	; 200
      00035A AC                    7005 	.db #0xac	; 172
      00035B BA                    7006 	.db #0xba	; 186
      00035C 2F                    7007 	.db #0x2f	; 47
      00035D 10                    7008 	.db #0x10	; 16
      00035E 28                    7009 	.db #0x28	; 40
      00035F 34                    7010 	.db #0x34	; 52	'4'
      000360 FA                    7011 	.db #0xfa	; 250
      000361 00                    7012 	.db #0x00	; 0
      000362 00                    7013 	.db #0x00	; 0
      000363 7B                    7014 	.db #0x7b	; 123
      000364 00                    7015 	.db #0x00	; 0
      000365 00                    7016 	.db #0x00	; 0
      000366 08                    7017 	.db #0x08	; 8
      000367 14                    7018 	.db #0x14	; 20
      000368 2A                    7019 	.db #0x2a	; 42
      000369 14                    7020 	.db #0x14	; 20
      00036A 22                    7021 	.db #0x22	; 34
      00036B 22                    7022 	.db #0x22	; 34
      00036C 14                    7023 	.db #0x14	; 20
      00036D 2A                    7024 	.db #0x2a	; 42
      00036E 14                    7025 	.db #0x14	; 20
      00036F 08                    7026 	.db #0x08	; 8
      000370 AA                    7027 	.db #0xaa	; 170
      000371 00                    7028 	.db #0x00	; 0
      000372 55                    7029 	.db #0x55	; 85	'U'
      000373 00                    7030 	.db #0x00	; 0
      000374 AA                    7031 	.db #0xaa	; 170
      000375 AA                    7032 	.db #0xaa	; 170
      000376 55                    7033 	.db #0x55	; 85	'U'
      000377 AA                    7034 	.db #0xaa	; 170
      000378 55                    7035 	.db #0x55	; 85	'U'
      000379 AA                    7036 	.db #0xaa	; 170
      00037A 00                    7037 	.db #0x00	; 0
      00037B 00                    7038 	.db #0x00	; 0
      00037C 00                    7039 	.db #0x00	; 0
      00037D FF                    7040 	.db #0xff	; 255
      00037E 00                    7041 	.db #0x00	; 0
      00037F 10                    7042 	.db #0x10	; 16
      000380 10                    7043 	.db #0x10	; 16
      000381 10                    7044 	.db #0x10	; 16
      000382 FF                    7045 	.db #0xff	; 255
      000383 00                    7046 	.db #0x00	; 0
      000384 14                    7047 	.db #0x14	; 20
      000385 14                    7048 	.db #0x14	; 20
      000386 14                    7049 	.db #0x14	; 20
      000387 FF                    7050 	.db #0xff	; 255
      000388 00                    7051 	.db #0x00	; 0
      000389 10                    7052 	.db #0x10	; 16
      00038A 10                    7053 	.db #0x10	; 16
      00038B FF                    7054 	.db #0xff	; 255
      00038C 00                    7055 	.db #0x00	; 0
      00038D FF                    7056 	.db #0xff	; 255
      00038E 10                    7057 	.db #0x10	; 16
      00038F 10                    7058 	.db #0x10	; 16
      000390 F0                    7059 	.db #0xf0	; 240
      000391 10                    7060 	.db #0x10	; 16
      000392 F0                    7061 	.db #0xf0	; 240
      000393 14                    7062 	.db #0x14	; 20
      000394 14                    7063 	.db #0x14	; 20
      000395 14                    7064 	.db #0x14	; 20
      000396 FC                    7065 	.db #0xfc	; 252
      000397 00                    7066 	.db #0x00	; 0
      000398 14                    7067 	.db #0x14	; 20
      000399 14                    7068 	.db #0x14	; 20
      00039A F7                    7069 	.db #0xf7	; 247
      00039B 00                    7070 	.db #0x00	; 0
      00039C FF                    7071 	.db #0xff	; 255
      00039D 00                    7072 	.db #0x00	; 0
      00039E 00                    7073 	.db #0x00	; 0
      00039F FF                    7074 	.db #0xff	; 255
      0003A0 00                    7075 	.db #0x00	; 0
      0003A1 FF                    7076 	.db #0xff	; 255
      0003A2 14                    7077 	.db #0x14	; 20
      0003A3 14                    7078 	.db #0x14	; 20
      0003A4 F4                    7079 	.db #0xf4	; 244
      0003A5 04                    7080 	.db #0x04	; 4
      0003A6 FC                    7081 	.db #0xfc	; 252
      0003A7 14                    7082 	.db #0x14	; 20
      0003A8 14                    7083 	.db #0x14	; 20
      0003A9 17                    7084 	.db #0x17	; 23
      0003AA 10                    7085 	.db #0x10	; 16
      0003AB 1F                    7086 	.db #0x1f	; 31
      0003AC 10                    7087 	.db #0x10	; 16
      0003AD 10                    7088 	.db #0x10	; 16
      0003AE 1F                    7089 	.db #0x1f	; 31
      0003AF 10                    7090 	.db #0x10	; 16
      0003B0 1F                    7091 	.db #0x1f	; 31
      0003B1 14                    7092 	.db #0x14	; 20
      0003B2 14                    7093 	.db #0x14	; 20
      0003B3 14                    7094 	.db #0x14	; 20
      0003B4 1F                    7095 	.db #0x1f	; 31
      0003B5 00                    7096 	.db #0x00	; 0
      0003B6 10                    7097 	.db #0x10	; 16
      0003B7 10                    7098 	.db #0x10	; 16
      0003B8 10                    7099 	.db #0x10	; 16
      0003B9 F0                    7100 	.db #0xf0	; 240
      0003BA 00                    7101 	.db #0x00	; 0
      0003BB 00                    7102 	.db #0x00	; 0
      0003BC 00                    7103 	.db #0x00	; 0
      0003BD 00                    7104 	.db #0x00	; 0
      0003BE 1F                    7105 	.db #0x1f	; 31
      0003BF 10                    7106 	.db #0x10	; 16
      0003C0 10                    7107 	.db #0x10	; 16
      0003C1 10                    7108 	.db #0x10	; 16
      0003C2 10                    7109 	.db #0x10	; 16
      0003C3 1F                    7110 	.db #0x1f	; 31
      0003C4 10                    7111 	.db #0x10	; 16
      0003C5 10                    7112 	.db #0x10	; 16
      0003C6 10                    7113 	.db #0x10	; 16
      0003C7 10                    7114 	.db #0x10	; 16
      0003C8 F0                    7115 	.db #0xf0	; 240
      0003C9 10                    7116 	.db #0x10	; 16
      0003CA 00                    7117 	.db #0x00	; 0
      0003CB 00                    7118 	.db #0x00	; 0
      0003CC 00                    7119 	.db #0x00	; 0
      0003CD FF                    7120 	.db #0xff	; 255
      0003CE 10                    7121 	.db #0x10	; 16
      0003CF 10                    7122 	.db #0x10	; 16
      0003D0 10                    7123 	.db #0x10	; 16
      0003D1 10                    7124 	.db #0x10	; 16
      0003D2 10                    7125 	.db #0x10	; 16
      0003D3 10                    7126 	.db #0x10	; 16
      0003D4 10                    7127 	.db #0x10	; 16
      0003D5 10                    7128 	.db #0x10	; 16
      0003D6 10                    7129 	.db #0x10	; 16
      0003D7 FF                    7130 	.db #0xff	; 255
      0003D8 10                    7131 	.db #0x10	; 16
      0003D9 00                    7132 	.db #0x00	; 0
      0003DA 00                    7133 	.db #0x00	; 0
      0003DB 00                    7134 	.db #0x00	; 0
      0003DC FF                    7135 	.db #0xff	; 255
      0003DD 14                    7136 	.db #0x14	; 20
      0003DE 00                    7137 	.db #0x00	; 0
      0003DF 00                    7138 	.db #0x00	; 0
      0003E0 FF                    7139 	.db #0xff	; 255
      0003E1 00                    7140 	.db #0x00	; 0
      0003E2 FF                    7141 	.db #0xff	; 255
      0003E3 00                    7142 	.db #0x00	; 0
      0003E4 00                    7143 	.db #0x00	; 0
      0003E5 1F                    7144 	.db #0x1f	; 31
      0003E6 10                    7145 	.db #0x10	; 16
      0003E7 17                    7146 	.db #0x17	; 23
      0003E8 00                    7147 	.db #0x00	; 0
      0003E9 00                    7148 	.db #0x00	; 0
      0003EA FC                    7149 	.db #0xfc	; 252
      0003EB 04                    7150 	.db #0x04	; 4
      0003EC F4                    7151 	.db #0xf4	; 244
      0003ED 14                    7152 	.db #0x14	; 20
      0003EE 14                    7153 	.db #0x14	; 20
      0003EF 17                    7154 	.db #0x17	; 23
      0003F0 10                    7155 	.db #0x10	; 16
      0003F1 17                    7156 	.db #0x17	; 23
      0003F2 14                    7157 	.db #0x14	; 20
      0003F3 14                    7158 	.db #0x14	; 20
      0003F4 F4                    7159 	.db #0xf4	; 244
      0003F5 04                    7160 	.db #0x04	; 4
      0003F6 F4                    7161 	.db #0xf4	; 244
      0003F7 00                    7162 	.db #0x00	; 0
      0003F8 00                    7163 	.db #0x00	; 0
      0003F9 FF                    7164 	.db #0xff	; 255
      0003FA 00                    7165 	.db #0x00	; 0
      0003FB F7                    7166 	.db #0xf7	; 247
      0003FC 14                    7167 	.db #0x14	; 20
      0003FD 14                    7168 	.db #0x14	; 20
      0003FE 14                    7169 	.db #0x14	; 20
      0003FF 14                    7170 	.db #0x14	; 20
      000400 14                    7171 	.db #0x14	; 20
      000401 14                    7172 	.db #0x14	; 20
      000402 14                    7173 	.db #0x14	; 20
      000403 F7                    7174 	.db #0xf7	; 247
      000404 00                    7175 	.db #0x00	; 0
      000405 F7                    7176 	.db #0xf7	; 247
      000406 14                    7177 	.db #0x14	; 20
      000407 14                    7178 	.db #0x14	; 20
      000408 14                    7179 	.db #0x14	; 20
      000409 17                    7180 	.db #0x17	; 23
      00040A 14                    7181 	.db #0x14	; 20
      00040B 10                    7182 	.db #0x10	; 16
      00040C 10                    7183 	.db #0x10	; 16
      00040D 1F                    7184 	.db #0x1f	; 31
      00040E 10                    7185 	.db #0x10	; 16
      00040F 1F                    7186 	.db #0x1f	; 31
      000410 14                    7187 	.db #0x14	; 20
      000411 14                    7188 	.db #0x14	; 20
      000412 14                    7189 	.db #0x14	; 20
      000413 F4                    7190 	.db #0xf4	; 244
      000414 14                    7191 	.db #0x14	; 20
      000415 10                    7192 	.db #0x10	; 16
      000416 10                    7193 	.db #0x10	; 16
      000417 F0                    7194 	.db #0xf0	; 240
      000418 10                    7195 	.db #0x10	; 16
      000419 F0                    7196 	.db #0xf0	; 240
      00041A 00                    7197 	.db #0x00	; 0
      00041B 00                    7198 	.db #0x00	; 0
      00041C 1F                    7199 	.db #0x1f	; 31
      00041D 10                    7200 	.db #0x10	; 16
      00041E 1F                    7201 	.db #0x1f	; 31
      00041F 00                    7202 	.db #0x00	; 0
      000420 00                    7203 	.db #0x00	; 0
      000421 00                    7204 	.db #0x00	; 0
      000422 1F                    7205 	.db #0x1f	; 31
      000423 14                    7206 	.db #0x14	; 20
      000424 00                    7207 	.db #0x00	; 0
      000425 00                    7208 	.db #0x00	; 0
      000426 00                    7209 	.db #0x00	; 0
      000427 FC                    7210 	.db #0xfc	; 252
      000428 14                    7211 	.db #0x14	; 20
      000429 00                    7212 	.db #0x00	; 0
      00042A 00                    7213 	.db #0x00	; 0
      00042B F0                    7214 	.db #0xf0	; 240
      00042C 10                    7215 	.db #0x10	; 16
      00042D F0                    7216 	.db #0xf0	; 240
      00042E 10                    7217 	.db #0x10	; 16
      00042F 10                    7218 	.db #0x10	; 16
      000430 FF                    7219 	.db #0xff	; 255
      000431 10                    7220 	.db #0x10	; 16
      000432 FF                    7221 	.db #0xff	; 255
      000433 14                    7222 	.db #0x14	; 20
      000434 14                    7223 	.db #0x14	; 20
      000435 14                    7224 	.db #0x14	; 20
      000436 FF                    7225 	.db #0xff	; 255
      000437 14                    7226 	.db #0x14	; 20
      000438 10                    7227 	.db #0x10	; 16
      000439 10                    7228 	.db #0x10	; 16
      00043A 10                    7229 	.db #0x10	; 16
      00043B 1F                    7230 	.db #0x1f	; 31
      00043C 00                    7231 	.db #0x00	; 0
      00043D 00                    7232 	.db #0x00	; 0
      00043E 00                    7233 	.db #0x00	; 0
      00043F 00                    7234 	.db #0x00	; 0
      000440 F0                    7235 	.db #0xf0	; 240
      000441 10                    7236 	.db #0x10	; 16
      000442 FF                    7237 	.db #0xff	; 255
      000443 FF                    7238 	.db #0xff	; 255
      000444 FF                    7239 	.db #0xff	; 255
      000445 FF                    7240 	.db #0xff	; 255
      000446 FF                    7241 	.db #0xff	; 255
      000447 F0                    7242 	.db #0xf0	; 240
      000448 F0                    7243 	.db #0xf0	; 240
      000449 F0                    7244 	.db #0xf0	; 240
      00044A F0                    7245 	.db #0xf0	; 240
      00044B F0                    7246 	.db #0xf0	; 240
      00044C FF                    7247 	.db #0xff	; 255
      00044D FF                    7248 	.db #0xff	; 255
      00044E FF                    7249 	.db #0xff	; 255
      00044F 00                    7250 	.db #0x00	; 0
      000450 00                    7251 	.db #0x00	; 0
      000451 00                    7252 	.db #0x00	; 0
      000452 00                    7253 	.db #0x00	; 0
      000453 00                    7254 	.db #0x00	; 0
      000454 FF                    7255 	.db #0xff	; 255
      000455 FF                    7256 	.db #0xff	; 255
      000456 0F                    7257 	.db #0x0f	; 15
      000457 0F                    7258 	.db #0x0f	; 15
      000458 0F                    7259 	.db #0x0f	; 15
      000459 0F                    7260 	.db #0x0f	; 15
      00045A 0F                    7261 	.db #0x0f	; 15
      00045B 38                    7262 	.db #0x38	; 56	'8'
      00045C 44                    7263 	.db #0x44	; 68	'D'
      00045D 44                    7264 	.db #0x44	; 68	'D'
      00045E 38                    7265 	.db #0x38	; 56	'8'
      00045F 44                    7266 	.db #0x44	; 68	'D'
      000460 FC                    7267 	.db #0xfc	; 252
      000461 4A                    7268 	.db #0x4a	; 74	'J'
      000462 4A                    7269 	.db #0x4a	; 74	'J'
      000463 4A                    7270 	.db #0x4a	; 74	'J'
      000464 34                    7271 	.db #0x34	; 52	'4'
      000465 7E                    7272 	.db #0x7e	; 126
      000466 02                    7273 	.db #0x02	; 2
      000467 02                    7274 	.db #0x02	; 2
      000468 06                    7275 	.db #0x06	; 6
      000469 06                    7276 	.db #0x06	; 6
      00046A 02                    7277 	.db #0x02	; 2
      00046B 7E                    7278 	.db #0x7e	; 126
      00046C 02                    7279 	.db #0x02	; 2
      00046D 7E                    7280 	.db #0x7e	; 126
      00046E 02                    7281 	.db #0x02	; 2
      00046F 63                    7282 	.db #0x63	; 99	'c'
      000470 55                    7283 	.db #0x55	; 85	'U'
      000471 49                    7284 	.db #0x49	; 73	'I'
      000472 41                    7285 	.db #0x41	; 65	'A'
      000473 63                    7286 	.db #0x63	; 99	'c'
      000474 38                    7287 	.db #0x38	; 56	'8'
      000475 44                    7288 	.db #0x44	; 68	'D'
      000476 44                    7289 	.db #0x44	; 68	'D'
      000477 3C                    7290 	.db #0x3c	; 60
      000478 04                    7291 	.db #0x04	; 4
      000479 40                    7292 	.db #0x40	; 64
      00047A 7E                    7293 	.db #0x7e	; 126
      00047B 20                    7294 	.db #0x20	; 32
      00047C 1E                    7295 	.db #0x1e	; 30
      00047D 20                    7296 	.db #0x20	; 32
      00047E 06                    7297 	.db #0x06	; 6
      00047F 02                    7298 	.db #0x02	; 2
      000480 7E                    7299 	.db #0x7e	; 126
      000481 02                    7300 	.db #0x02	; 2
      000482 02                    7301 	.db #0x02	; 2
      000483 99                    7302 	.db #0x99	; 153
      000484 A5                    7303 	.db #0xa5	; 165
      000485 E7                    7304 	.db #0xe7	; 231
      000486 A5                    7305 	.db #0xa5	; 165
      000487 99                    7306 	.db #0x99	; 153
      000488 1C                    7307 	.db #0x1c	; 28
      000489 2A                    7308 	.db #0x2a	; 42
      00048A 49                    7309 	.db #0x49	; 73	'I'
      00048B 2A                    7310 	.db #0x2a	; 42
      00048C 1C                    7311 	.db #0x1c	; 28
      00048D 4C                    7312 	.db #0x4c	; 76	'L'
      00048E 72                    7313 	.db #0x72	; 114	'r'
      00048F 01                    7314 	.db #0x01	; 1
      000490 72                    7315 	.db #0x72	; 114	'r'
      000491 4C                    7316 	.db #0x4c	; 76	'L'
      000492 30                    7317 	.db #0x30	; 48	'0'
      000493 4A                    7318 	.db #0x4a	; 74	'J'
      000494 4D                    7319 	.db #0x4d	; 77	'M'
      000495 4D                    7320 	.db #0x4d	; 77	'M'
      000496 30                    7321 	.db #0x30	; 48	'0'
      000497 30                    7322 	.db #0x30	; 48	'0'
      000498 48                    7323 	.db #0x48	; 72	'H'
      000499 78                    7324 	.db #0x78	; 120	'x'
      00049A 48                    7325 	.db #0x48	; 72	'H'
      00049B 30                    7326 	.db #0x30	; 48	'0'
      00049C BC                    7327 	.db #0xbc	; 188
      00049D 62                    7328 	.db #0x62	; 98	'b'
      00049E 5A                    7329 	.db #0x5a	; 90	'Z'
      00049F 46                    7330 	.db #0x46	; 70	'F'
      0004A0 3D                    7331 	.db #0x3d	; 61
      0004A1 3E                    7332 	.db #0x3e	; 62
      0004A2 49                    7333 	.db #0x49	; 73	'I'
      0004A3 49                    7334 	.db #0x49	; 73	'I'
      0004A4 49                    7335 	.db #0x49	; 73	'I'
      0004A5 00                    7336 	.db #0x00	; 0
      0004A6 7E                    7337 	.db #0x7e	; 126
      0004A7 01                    7338 	.db #0x01	; 1
      0004A8 01                    7339 	.db #0x01	; 1
      0004A9 01                    7340 	.db #0x01	; 1
      0004AA 7E                    7341 	.db #0x7e	; 126
      0004AB 2A                    7342 	.db #0x2a	; 42
      0004AC 2A                    7343 	.db #0x2a	; 42
      0004AD 2A                    7344 	.db #0x2a	; 42
      0004AE 2A                    7345 	.db #0x2a	; 42
      0004AF 2A                    7346 	.db #0x2a	; 42
      0004B0 44                    7347 	.db #0x44	; 68	'D'
      0004B1 44                    7348 	.db #0x44	; 68	'D'
      0004B2 5F                    7349 	.db #0x5f	; 95
      0004B3 44                    7350 	.db #0x44	; 68	'D'
      0004B4 44                    7351 	.db #0x44	; 68	'D'
      0004B5 40                    7352 	.db #0x40	; 64
      0004B6 51                    7353 	.db #0x51	; 81	'Q'
      0004B7 4A                    7354 	.db #0x4a	; 74	'J'
      0004B8 44                    7355 	.db #0x44	; 68	'D'
      0004B9 40                    7356 	.db #0x40	; 64
      0004BA 40                    7357 	.db #0x40	; 64
      0004BB 44                    7358 	.db #0x44	; 68	'D'
      0004BC 4A                    7359 	.db #0x4a	; 74	'J'
      0004BD 51                    7360 	.db #0x51	; 81	'Q'
      0004BE 40                    7361 	.db #0x40	; 64
      0004BF 00                    7362 	.db #0x00	; 0
      0004C0 00                    7363 	.db #0x00	; 0
      0004C1 FF                    7364 	.db #0xff	; 255
      0004C2 01                    7365 	.db #0x01	; 1
      0004C3 03                    7366 	.db #0x03	; 3
      0004C4 E0                    7367 	.db #0xe0	; 224
      0004C5 80                    7368 	.db #0x80	; 128
      0004C6 FF                    7369 	.db #0xff	; 255
      0004C7 00                    7370 	.db #0x00	; 0
      0004C8 00                    7371 	.db #0x00	; 0
      0004C9 08                    7372 	.db #0x08	; 8
      0004CA 08                    7373 	.db #0x08	; 8
      0004CB 6B                    7374 	.db #0x6b	; 107	'k'
      0004CC 6B                    7375 	.db #0x6b	; 107	'k'
      0004CD 08                    7376 	.db #0x08	; 8
      0004CE 36                    7377 	.db #0x36	; 54	'6'
      0004CF 12                    7378 	.db #0x12	; 18
      0004D0 36                    7379 	.db #0x36	; 54	'6'
      0004D1 24                    7380 	.db #0x24	; 36
      0004D2 36                    7381 	.db #0x36	; 54	'6'
      0004D3 06                    7382 	.db #0x06	; 6
      0004D4 0F                    7383 	.db #0x0f	; 15
      0004D5 09                    7384 	.db #0x09	; 9
      0004D6 0F                    7385 	.db #0x0f	; 15
      0004D7 06                    7386 	.db #0x06	; 6
      0004D8 00                    7387 	.db #0x00	; 0
      0004D9 00                    7388 	.db #0x00	; 0
      0004DA 18                    7389 	.db #0x18	; 24
      0004DB 18                    7390 	.db #0x18	; 24
      0004DC 00                    7391 	.db #0x00	; 0
      0004DD 00                    7392 	.db #0x00	; 0
      0004DE 00                    7393 	.db #0x00	; 0
      0004DF 10                    7394 	.db #0x10	; 16
      0004E0 10                    7395 	.db #0x10	; 16
      0004E1 00                    7396 	.db #0x00	; 0
      0004E2 30                    7397 	.db #0x30	; 48	'0'
      0004E3 40                    7398 	.db #0x40	; 64
      0004E4 FF                    7399 	.db #0xff	; 255
      0004E5 01                    7400 	.db #0x01	; 1
      0004E6 01                    7401 	.db #0x01	; 1
      0004E7 00                    7402 	.db #0x00	; 0
      0004E8 1F                    7403 	.db #0x1f	; 31
      0004E9 01                    7404 	.db #0x01	; 1
      0004EA 01                    7405 	.db #0x01	; 1
      0004EB 1E                    7406 	.db #0x1e	; 30
      0004EC 00                    7407 	.db #0x00	; 0
      0004ED 19                    7408 	.db #0x19	; 25
      0004EE 1D                    7409 	.db #0x1d	; 29
      0004EF 17                    7410 	.db #0x17	; 23
      0004F0 12                    7411 	.db #0x12	; 18
      0004F1 00                    7412 	.db #0x00	; 0
      0004F2 3C                    7413 	.db #0x3c	; 60
      0004F3 3C                    7414 	.db #0x3c	; 60
      0004F4 3C                    7415 	.db #0x3c	; 60
      0004F5 3C                    7416 	.db #0x3c	; 60
      0004F6 00                    7417 	.db #0x00	; 0
      0004F7 00                    7418 	.db #0x00	; 0
      0004F8 00                    7419 	.db #0x00	; 0
      0004F9 00                    7420 	.db #0x00	; 0
      0004FA 00                    7421 	.db #0x00	; 0
      0004FB                       7422 _keypad:
      0004FB 31                    7423 	.db #0x31	; 49	'1'
      0004FC 34                    7424 	.db #0x34	; 52	'4'
      0004FD 37                    7425 	.db #0x37	; 55	'7'
      0004FE 46                    7426 	.db #0x46	; 70	'F'
      0004FF 32                    7427 	.db #0x32	; 50	'2'
      000500 35                    7428 	.db #0x35	; 53	'5'
      000501 38                    7429 	.db #0x38	; 56	'8'
      000502 30                    7430 	.db #0x30	; 48	'0'
      000503 33                    7431 	.db #0x33	; 51	'3'
      000504 36                    7432 	.db #0x36	; 54	'6'
      000505 39                    7433 	.db #0x39	; 57	'9'
      000506 45                    7434 	.db #0x45	; 69	'E'
      000507 41                    7435 	.db #0x41	; 65	'A'
      000508 42                    7436 	.db #0x42	; 66	'B'
      000509 43                    7437 	.db #0x43	; 67	'C'
      00050A 44                    7438 	.db #0x44	; 68	'D'
                                   7439 	.area CONST   (CODE)
      00050B                       7440 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  7441 	.ascii "Welcome"
      000512 0A                    7442 	.db 0x0a
      000513 00                    7443 	.db 0x00
                                   7444 	.area CSEG    (CODE)
                                   7445 	.area CONST   (CODE)
      000514                       7446 ___str_1:
      000514 45 43 45 4E 2D 34 33  7447 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    7448 	.db 0x0a
      00051E 00                    7449 	.db 0x00
                                   7450 	.area CSEG    (CODE)
                                   7451 	.area CONST   (CODE)
      00051F                       7452 ___str_2:
      00051F 52 6F 74 61 74 69 6F  7453 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    7454 	.db 0x00
                                   7455 	.area CSEG    (CODE)
                                   7456 	.area CONST   (CODE)
      00052A                       7457 ___str_3:
      00052A 52 6F 74 61 74 69 6F  7458 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    7459 	.db 0x00
                                   7460 	.area CSEG    (CODE)
                                   7461 	.area CONST   (CODE)
      000535                       7462 ___str_4:
      000535 52 6F 74 61 74 69 6F  7463 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    7464 	.db 0x00
                                   7465 	.area CSEG    (CODE)
                                   7466 	.area CONST   (CODE)
      000540                       7467 ___str_5:
      000540 52 6F 74 61 74 69 6F  7468 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    7469 	.db 0x00
                                   7470 	.area CSEG    (CODE)
                                   7471 	.area CONST   (CODE)
      00054B                       7472 ___str_6:
      00054B 3A 20                 7473 	.ascii ": "
      00054D 00                    7474 	.db 0x00
                                   7475 	.area CSEG    (CODE)
                                   7476 	.area CONST   (CODE)
      00054E                       7477 ___str_7:
      00054E 45 6E 74 65 72 20 73  7478 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      000562 0A                    7479 	.db 0x0a
      000563 00                    7480 	.db 0x00
                                   7481 	.area CSEG    (CODE)
                                   7482 	.area CONST   (CODE)
      000564                       7483 ___str_8:
      000564 45 6E 74 65 72 20 64  7484 	.ascii "Enter data type"
             61 74 61 20 74 79 70
             65
      000573 0A                    7485 	.db 0x0a
      000574 00                    7486 	.db 0x00
                                   7487 	.area CSEG    (CODE)
                                   7488 	.area CONST   (CODE)
      000575                       7489 ___str_9:
      000575 42 2D 42 79 74 65 2C  7490 	.ascii "B-Byte, A-Word,"
             20 41 2D 57 6F 72 64
             2C
      000584 0A                    7491 	.db 0x0a
      000585 00                    7492 	.db 0x00
                                   7493 	.area CSEG    (CODE)
                                   7494 	.area CONST   (CODE)
      000586                       7495 ___str_10:
      000586 44 2D 44 6F 75 62 6C  7496 	.ascii "D-Double word"
             65 20 77 6F 72 64
      000593 0A                    7497 	.db 0x0a
      000594 00                    7498 	.db 0x00
                                   7499 	.area CSEG    (CODE)
                                   7500 	.area CONST   (CODE)
      000595                       7501 ___str_11:
      000595 42 79 74 65           7502 	.ascii "Byte"
      000599 0A                    7503 	.db 0x0a
      00059A 00                    7504 	.db 0x00
                                   7505 	.area CSEG    (CODE)
                                   7506 	.area CONST   (CODE)
      00059B                       7507 ___str_12:
      00059B 57 6F 72 64           7508 	.ascii "Word"
      00059F 0A                    7509 	.db 0x0a
      0005A0 00                    7510 	.db 0x00
                                   7511 	.area CSEG    (CODE)
                                   7512 	.area CONST   (CODE)
      0005A1                       7513 ___str_13:
      0005A1 44 6F 75 62 6C 65 20  7514 	.ascii "Double word"
             77 6F 72 64
      0005AC 0A                    7515 	.db 0x0a
      0005AD 00                    7516 	.db 0x00
                                   7517 	.area CSEG    (CODE)
                                   7518 	.area CONST   (CODE)
      0005AE                       7519 ___str_14:
      0005AE 45 6E 74 65 72 20 62  7520 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0005BF 0A                    7521 	.db 0x0a
      0005C0 00                    7522 	.db 0x00
                                   7523 	.area CSEG    (CODE)
                                   7524 	.area CONST   (CODE)
      0005C1                       7525 ___str_15:
      0005C1 50 72 65 73 73 20 41  7526 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0005D5 0A                    7527 	.db 0x0a
      0005D6 00                    7528 	.db 0x00
                                   7529 	.area CSEG    (CODE)
                                   7530 	.area CONST   (CODE)
      0005D7                       7531 ___str_16:
      0005D7 50 72 65 73 73 20 42  7532 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0005E7 0A                    7533 	.db 0x0a
      0005E8 00                    7534 	.db 0x00
                                   7535 	.area CSEG    (CODE)
                                   7536 	.area CONST   (CODE)
      0005E9                       7537 ___str_17:
      0005E9 50 72 65 73 73 20 31  7538 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0005F9 0A                    7539 	.db 0x0a
      0005FA 00                    7540 	.db 0x00
                                   7541 	.area CSEG    (CODE)
                                   7542 	.area CONST   (CODE)
      0005FB                       7543 ___str_18:
      0005FB 45 6E 74 65 72 20 62  7544 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00060E 0A                    7545 	.db 0x0a
      00060F 00                    7546 	.db 0x00
                                   7547 	.area CSEG    (CODE)
                                   7548 	.area CONST   (CODE)
      000610                       7549 ___str_19:
      000610 49 6E 20 70 72 6F 67  7550 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00061E 0A                    7551 	.db 0x0a
      00061F 00                    7552 	.db 0x00
                                   7553 	.area CSEG    (CODE)
                                   7554 	.area CONST   (CODE)
      000620                       7555 ___str_20:
      000620 4D 65 6D 6F 72 79 20  7556 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000633 0A                    7557 	.db 0x0a
      000634 00                    7558 	.db 0x00
                                   7559 	.area CSEG    (CODE)
                                   7560 	.area CONST   (CODE)
      000635                       7561 ___str_21:
      000635 53 75 63 63 65 73 73  7562 	.ascii "Success!"
             21
      00063D 0A                    7563 	.db 0x0a
      00063E 00                    7564 	.db 0x00
                                   7565 	.area CSEG    (CODE)
                                   7566 	.area CONST   (CODE)
      00063F                       7567 ___str_22:
      00063F 45 6E 74 65 72 20 62  7568 	.ascii "Enter byte"
             79 74 65
      000649 0A                    7569 	.db 0x0a
      00064A 00                    7570 	.db 0x00
                                   7571 	.area CSEG    (CODE)
                                   7572 	.area CONST   (CODE)
      00064B                       7573 ___str_23:
      00064B 45 6E 74 65 72 20 61  7574 	.ascii "Enter address"
             64 64 72 65 73 73
      000658 0A                    7575 	.db 0x0a
      000659 00                    7576 	.db 0x00
                                   7577 	.area CSEG    (CODE)
                                   7578 	.area CONST   (CODE)
      00065A                       7579 ___str_24:
      00065A 49 6E 20 70 72 6F 67  7580 	.ascii "In progress"
             72 65 73 73
      000665 0A                    7581 	.db 0x0a
      000666 00                    7582 	.db 0x00
                                   7583 	.area CSEG    (CODE)
                                   7584 	.area CONST   (CODE)
      000667                       7585 ___str_25:
      000667 20 66 65 74 63 68 65  7586 	.ascii " fetched!"
             64 21
      000670 0A                    7587 	.db 0x0a
      000671 53 75 63 63 65 73 73  7588 	.ascii "Success!"
             21
      000679 0A                    7589 	.db 0x0a
      00067A 00                    7590 	.db 0x00
                                   7591 	.area CSEG    (CODE)
                                   7592 	.area CONST   (CODE)
      00067B                       7593 ___str_26:
      00067B 43 68 65 63 6B 20 66  7594 	.ascii "Check failed"
             61 69 6C 65 64
      000687 0A                    7595 	.db 0x0a
      000688 00                    7596 	.db 0x00
                                   7597 	.area CSEG    (CODE)
                                   7598 	.area CONST   (CODE)
      000689                       7599 ___str_27:
      000689 45 6E 74 65 72 20 74  7600 	.ascii "Enter target address:"
             61 72 67 65 74 20 61
             64 64 72 65 73 73 3A
      00069E 0A                    7601 	.db 0x0a
      00069F 00                    7602 	.db 0x00
                                   7603 	.area CSEG    (CODE)
                                   7604 	.area CONST   (CODE)
      0006A0                       7605 ___str_28:
      0006A0 45 6E 74 65 72 20 73  7606 	.ascii "Enter size:"
             69 7A 65 3A
      0006AB 0A                    7607 	.db 0x0a
      0006AC 00                    7608 	.db 0x00
                                   7609 	.area CSEG    (CODE)
                                   7610 	.area CONST   (CODE)
      0006AD                       7611 ___str_29:
      0006AD 4D 6F 76 65 20 69 6E  7612 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      0006C0 0A                    7613 	.db 0x0a
      0006C1 00                    7614 	.db 0x00
                                   7615 	.area CSEG    (CODE)
                                   7616 	.area CONST   (CODE)
      0006C2                       7617 ___str_30:
      0006C2 44 6F 6E 65 21        7618 	.ascii "Done!"
      0006C7 0A                    7619 	.db 0x0a
      0006C8 00                    7620 	.db 0x00
                                   7621 	.area CSEG    (CODE)
                                   7622 	.area CONST   (CODE)
      0006C9                       7623 ___str_31:
      0006C9 45 6E 74 65 72 20 6E  7624 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      0006D8 0A                    7625 	.db 0x0a
      0006D9 00                    7626 	.db 0x00
                                   7627 	.area CSEG    (CODE)
                                   7628 	.area CONST   (CODE)
      0006DA                       7629 ___str_32:
      0006DA 45 6E 74 65 72 20 61  7630 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      0006E8 0A                    7631 	.db 0x0a
      0006E9 00                    7632 	.db 0x00
                                   7633 	.area CSEG    (CODE)
                                   7634 	.area CONST   (CODE)
      0006EA                       7635 ___str_33:
      0006EA 50 72 65 73 73 20 32  7636 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      0006FF 0A                    7637 	.db 0x0a
      000700 00                    7638 	.db 0x00
                                   7639 	.area CSEG    (CODE)
                                   7640 	.area CONST   (CODE)
      000701                       7641 ___str_34:
      000701 50 72 65 73 73 20 33  7642 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      00071D 0A                    7643 	.db 0x0a
      00071E 00                    7644 	.db 0x00
                                   7645 	.area CSEG    (CODE)
                                   7646 	.area CONST   (CODE)
      00071F                       7647 ___str_35:
      00071F 4E 6F 20 6D 61 74 63  7648 	.ascii "No matches found"
             68 65 73 20 66 6F 75
             6E 64
      00072F 0A                    7649 	.db 0x0a
      000730 00                    7650 	.db 0x00
                                   7651 	.area CSEG    (CODE)
                                   7652 	.area CONST   (CODE)
      000731                       7653 ___str_36:
      000731 20 6D 61 74 63 68 65  7654 	.ascii " matches found"
             73 20 66 6F 75 6E 64
      00073F 0A                    7655 	.db 0x0a
      000740 00                    7656 	.db 0x00
                                   7657 	.area CSEG    (CODE)
                                   7658 	.area CONST   (CODE)
      000741                       7659 ___str_37:
      000741 45 6E 74 65 72 20 62  7660 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      000755 0A                    7661 	.db 0x0a
      000756 00                    7662 	.db 0x00
                                   7663 	.area CSEG    (CODE)
                                   7664 	.area CONST   (CODE)
      000757                       7665 ___str_38:
      000757 54 65 6D 70 65 72 61  7666 	.ascii "Temperature: "
             74 75 72 65 3A 20
      000764 00                    7667 	.db 0x00
                                   7668 	.area CSEG    (CODE)
                                   7669 	.area CONST   (CODE)
      000765                       7670 ___str_39:
      000765 50 72 65 73 73 20 6B  7671 	.ascii "Press key to refresh"
             65 79 20 74 6F 20 72
             65 66 72 65 73 68
      000779 0A                    7672 	.db 0x0a
      00077A 00                    7673 	.db 0x00
                                   7674 	.area CSEG    (CODE)
                                   7675 	.area CONST   (CODE)
      00077B                       7676 ___str_40:
      00077B 4C 69 67 68 74 20 6C  7677 	.ascii "Light level: "
             65 76 65 6C 3A 20
      000788 00                    7678 	.db 0x00
                                   7679 	.area CSEG    (CODE)
                                   7680 	.area CONST   (CODE)
      000789                       7681 ___str_41:
      000789 42 72 61 6E 64 6F 6E  7682 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      000796 0A                    7683 	.db 0x0a
      000797 00                    7684 	.db 0x00
                                   7685 	.area CSEG    (CODE)
                                   7686 	.area CONST   (CODE)
      000798                       7687 ___str_42:
      000798 45 43 45 4E 20 34 33  7688 	.ascii "ECEN 4330"
             33 30
      0007A1 0A                    7689 	.db 0x0a
      0007A2 00                    7690 	.db 0x00
                                   7691 	.area CSEG    (CODE)
                                   7692 	.area CONST   (CODE)
      0007A3                       7693 ___str_43:
      0007A3 31 3A 20 42 61 73 69  7694 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      0007B1 0A                    7695 	.db 0x0a
      0007B2 00                    7696 	.db 0x00
                                   7697 	.area CSEG    (CODE)
                                   7698 	.area CONST   (CODE)
      0007B3                       7699 ___str_44:
      0007B3 32 3A 20 44 75 6D 70  7700 	.ascii "2: Dump"
      0007BA 0A                    7701 	.db 0x0a
      0007BB 00                    7702 	.db 0x00
                                   7703 	.area CSEG    (CODE)
                                   7704 	.area CONST   (CODE)
      0007BC                       7705 ___str_45:
      0007BC 33 3A 20 43 68 65 63  7706 	.ascii "3: Check"
             6B
      0007C4 0A                    7707 	.db 0x0a
      0007C5 00                    7708 	.db 0x00
                                   7709 	.area CSEG    (CODE)
                                   7710 	.area CONST   (CODE)
      0007C6                       7711 ___str_46:
      0007C6 41 3A 20 4D 6F 76 65  7712 	.ascii "A: Move"
      0007CD 0A                    7713 	.db 0x0a
      0007CE 00                    7714 	.db 0x00
                                   7715 	.area CSEG    (CODE)
                                   7716 	.area CONST   (CODE)
      0007CF                       7717 ___str_47:
      0007CF 34 3A 20 45 64 69 74  7718 	.ascii "4: Edit"
      0007D6 0A                    7719 	.db 0x0a
      0007D7 00                    7720 	.db 0x00
                                   7721 	.area CSEG    (CODE)
                                   7722 	.area CONST   (CODE)
      0007D8                       7723 ___str_48:
      0007D8 35 3A 20 46 69 6E 64  7724 	.ascii "5: Find"
      0007DF 0A                    7725 	.db 0x0a
      0007E0 00                    7726 	.db 0x00
                                   7727 	.area CSEG    (CODE)
                                   7728 	.area CONST   (CODE)
      0007E1                       7729 ___str_49:
      0007E1 36 3A 20 43 6F 75 6E  7730 	.ascii "6: Count"
             74
      0007E9 0A                    7731 	.db 0x0a
      0007EA 00                    7732 	.db 0x00
                                   7733 	.area CSEG    (CODE)
                                   7734 	.area CONST   (CODE)
      0007EB                       7735 ___str_50:
      0007EB 42 3A 20 54 65 6D 70  7736 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      0007F9 0A                    7737 	.db 0x0a
      0007FA 00                    7738 	.db 0x00
                                   7739 	.area CSEG    (CODE)
                                   7740 	.area CONST   (CODE)
      0007FB                       7741 ___str_51:
      0007FB 37 3A 20 4C 69 67 68  7742 	.ascii "7: Light"
             74
      000803 0A                    7743 	.db 0x0a
      000804 00                    7744 	.db 0x00
                                   7745 	.area CSEG    (CODE)
                                   7746 	.area XINIT   (CODE)
                                   7747 	.area CABS    (ABS,CODE)
