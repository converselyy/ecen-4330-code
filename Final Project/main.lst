                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _UART_free_type
                                     23 	.globl _basic
                                     24 	.globl _writeSomeLines
                                     25 	.globl _convertAsciiHex
                                     26 	.globl _write
                                     27 	.globl _drawChar
                                     28 	.globl _setRotation
                                     29 	.globl _ioread8
                                     30 	.globl _iowrite8
                                     31 	.globl _UART_transmit
                                     32 	.globl _UART_init
                                     33 	.globl _ISR_receive
                                     34 	.globl _CY
                                     35 	.globl _AC
                                     36 	.globl _F0
                                     37 	.globl _RS1
                                     38 	.globl _RS0
                                     39 	.globl _OV
                                     40 	.globl _F1
                                     41 	.globl _P
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ES
                                     65 	.globl _ET1
                                     66 	.globl _EX1
                                     67 	.globl _ET0
                                     68 	.globl _EX0
                                     69 	.globl _P2_7
                                     70 	.globl _P2_6
                                     71 	.globl _P2_5
                                     72 	.globl _P2_4
                                     73 	.globl _P2_3
                                     74 	.globl _P2_2
                                     75 	.globl _P2_1
                                     76 	.globl _P2_0
                                     77 	.globl _SM0
                                     78 	.globl _SM1
                                     79 	.globl _SM2
                                     80 	.globl _REN
                                     81 	.globl _TB8
                                     82 	.globl _RB8
                                     83 	.globl _TI
                                     84 	.globl _RI
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _ACC
                                    111 	.globl _PSW
                                    112 	.globl _IP
                                    113 	.globl _P3
                                    114 	.globl _IE
                                    115 	.globl _P2
                                    116 	.globl _SBUF
                                    117 	.globl _SCON
                                    118 	.globl _P1
                                    119 	.globl _TH1
                                    120 	.globl _TH0
                                    121 	.globl _TL1
                                    122 	.globl _TL0
                                    123 	.globl _TMOD
                                    124 	.globl _TCON
                                    125 	.globl _PCON
                                    126 	.globl _DPH
                                    127 	.globl _DPL
                                    128 	.globl _SP
                                    129 	.globl _P0
                                    130 	.globl _dumpPage_PARM_3
                                    131 	.globl _dumpPage_PARM_2
                                    132 	.globl __height
                                    133 	.globl __width
                                    134 	.globl _printCount_PARM_4
                                    135 	.globl _printCount_PARM_3
                                    136 	.globl _printCount_PARM_2
                                    137 	.globl _drawChar_PARM_6
                                    138 	.globl _drawChar_PARM_5
                                    139 	.globl _drawChar_PARM_4
                                    140 	.globl _drawChar_PARM_3
                                    141 	.globl _drawChar_PARM_2
                                    142 	.globl _fillRect_PARM_5
                                    143 	.globl _fillRect_PARM_4
                                    144 	.globl _fillRect_PARM_3
                                    145 	.globl _fillRect_PARM_2
                                    146 	.globl _testCircles_PARM_2
                                    147 	.globl _drawCircle_PARM_4
                                    148 	.globl _drawCircle_PARM_3
                                    149 	.globl _drawCircle_PARM_2
                                    150 	.globl _drawPixel_PARM_3
                                    151 	.globl _drawPixel_PARM_2
                                    152 	.globl _textbgcolor
                                    153 	.globl _textcolor
                                    154 	.globl _rotation
                                    155 	.globl _textsize
                                    156 	.globl _cursor_y
                                    157 	.globl _cursor_x
                                    158 	.globl _read_ram_address
                                    159 	.globl _light_address
                                    160 	.globl _temp_address
                                    161 	.globl _seg7_address
                                    162 	.globl _lcd_address
                                    163 	.globl _rowloc
                                    164 	.globl _colloc
                                    165 	.globl _recieved_flag
                                    166 	.globl _received_byte
                                    167 	.globl _delay
                                    168 	.globl _writeRegister8
                                    169 	.globl _writeRegister16
                                    170 	.globl _setCursor
                                    171 	.globl _setTextColor
                                    172 	.globl _setTextSize
                                    173 	.globl _setAddress
                                    174 	.globl _TFT_LCD_INIT
                                    175 	.globl _drawPixel
                                    176 	.globl _drawCircle
                                    177 	.globl _testCircles
                                    178 	.globl _fillRect
                                    179 	.globl _fillScreen
                                    180 	.globl _LCD_string_write
                                    181 	.globl _testRAM
                                    182 	.globl _freeType
                                    183 	.globl _keyDetect
                                    184 	.globl _reverse
                                    185 	.globl _asciiToDec
                                    186 	.globl _asciiToHex
                                    187 	.globl _getAddress
                                    188 	.globl _getByte
                                    189 	.globl _dumpPage
                                    190 	.globl _dump
                                    191 	.globl _check
                                    192 	.globl _move
                                    193 	.globl _editByte
                                    194 	.globl _edit
                                    195 	.globl _printCount
                                    196 	.globl _count
                                    197 	.globl _displayTemp
                                    198 	.globl _displayLight
                                    199 	.globl _temperature
                                    200 	.globl _light
                                    201 ;--------------------------------------------------------
                                    202 ; special function registers
                                    203 ;--------------------------------------------------------
                                    204 	.area RSEG    (ABS,DATA)
      000000                        205 	.org 0x0000
                           000080   206 _P0	=	0x0080
                           000081   207 _SP	=	0x0081
                           000082   208 _DPL	=	0x0082
                           000083   209 _DPH	=	0x0083
                           000087   210 _PCON	=	0x0087
                           000088   211 _TCON	=	0x0088
                           000089   212 _TMOD	=	0x0089
                           00008A   213 _TL0	=	0x008a
                           00008B   214 _TL1	=	0x008b
                           00008C   215 _TH0	=	0x008c
                           00008D   216 _TH1	=	0x008d
                           000090   217 _P1	=	0x0090
                           000098   218 _SCON	=	0x0098
                           000099   219 _SBUF	=	0x0099
                           0000A0   220 _P2	=	0x00a0
                           0000A8   221 _IE	=	0x00a8
                           0000B0   222 _P3	=	0x00b0
                           0000B8   223 _IP	=	0x00b8
                           0000D0   224 _PSW	=	0x00d0
                           0000E0   225 _ACC	=	0x00e0
                           0000F0   226 _B	=	0x00f0
                                    227 ;--------------------------------------------------------
                                    228 ; special function bits
                                    229 ;--------------------------------------------------------
                                    230 	.area RSEG    (ABS,DATA)
      000000                        231 	.org 0x0000
                           000080   232 _P0_0	=	0x0080
                           000081   233 _P0_1	=	0x0081
                           000082   234 _P0_2	=	0x0082
                           000083   235 _P0_3	=	0x0083
                           000084   236 _P0_4	=	0x0084
                           000085   237 _P0_5	=	0x0085
                           000086   238 _P0_6	=	0x0086
                           000087   239 _P0_7	=	0x0087
                           000088   240 _IT0	=	0x0088
                           000089   241 _IE0	=	0x0089
                           00008A   242 _IT1	=	0x008a
                           00008B   243 _IE1	=	0x008b
                           00008C   244 _TR0	=	0x008c
                           00008D   245 _TF0	=	0x008d
                           00008E   246 _TR1	=	0x008e
                           00008F   247 _TF1	=	0x008f
                           000090   248 _P1_0	=	0x0090
                           000091   249 _P1_1	=	0x0091
                           000092   250 _P1_2	=	0x0092
                           000093   251 _P1_3	=	0x0093
                           000094   252 _P1_4	=	0x0094
                           000095   253 _P1_5	=	0x0095
                           000096   254 _P1_6	=	0x0096
                           000097   255 _P1_7	=	0x0097
                           000098   256 _RI	=	0x0098
                           000099   257 _TI	=	0x0099
                           00009A   258 _RB8	=	0x009a
                           00009B   259 _TB8	=	0x009b
                           00009C   260 _REN	=	0x009c
                           00009D   261 _SM2	=	0x009d
                           00009E   262 _SM1	=	0x009e
                           00009F   263 _SM0	=	0x009f
                           0000A0   264 _P2_0	=	0x00a0
                           0000A1   265 _P2_1	=	0x00a1
                           0000A2   266 _P2_2	=	0x00a2
                           0000A3   267 _P2_3	=	0x00a3
                           0000A4   268 _P2_4	=	0x00a4
                           0000A5   269 _P2_5	=	0x00a5
                           0000A6   270 _P2_6	=	0x00a6
                           0000A7   271 _P2_7	=	0x00a7
                           0000A8   272 _EX0	=	0x00a8
                           0000A9   273 _ET0	=	0x00a9
                           0000AA   274 _EX1	=	0x00aa
                           0000AB   275 _ET1	=	0x00ab
                           0000AC   276 _ES	=	0x00ac
                           0000AF   277 _EA	=	0x00af
                           0000B0   278 _P3_0	=	0x00b0
                           0000B1   279 _P3_1	=	0x00b1
                           0000B2   280 _P3_2	=	0x00b2
                           0000B3   281 _P3_3	=	0x00b3
                           0000B4   282 _P3_4	=	0x00b4
                           0000B5   283 _P3_5	=	0x00b5
                           0000B6   284 _P3_6	=	0x00b6
                           0000B7   285 _P3_7	=	0x00b7
                           0000B0   286 _RXD	=	0x00b0
                           0000B1   287 _TXD	=	0x00b1
                           0000B2   288 _INT0	=	0x00b2
                           0000B3   289 _INT1	=	0x00b3
                           0000B4   290 _T0	=	0x00b4
                           0000B5   291 _T1	=	0x00b5
                           0000B6   292 _WR	=	0x00b6
                           0000B7   293 _RD	=	0x00b7
                           0000B8   294 _PX0	=	0x00b8
                           0000B9   295 _PT0	=	0x00b9
                           0000BA   296 _PX1	=	0x00ba
                           0000BB   297 _PT1	=	0x00bb
                           0000BC   298 _PS	=	0x00bc
                           0000D0   299 _P	=	0x00d0
                           0000D1   300 _F1	=	0x00d1
                           0000D2   301 _OV	=	0x00d2
                           0000D3   302 _RS0	=	0x00d3
                           0000D4   303 _RS1	=	0x00d4
                           0000D5   304 _F0	=	0x00d5
                           0000D6   305 _AC	=	0x00d6
                           0000D7   306 _CY	=	0x00d7
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable register banks
                                    309 ;--------------------------------------------------------
                                    310 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        311 	.ds 8
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
      000000                        316 _received_byte::
      000000                        317 	.ds 1
      000001                        318 _recieved_flag::
      000001                        319 	.ds 1
      000002                        320 _colloc::
      000002                        321 	.ds 1
      000003                        322 _rowloc::
      000003                        323 	.ds 1
      000004                        324 _lcd_address::
      000004                        325 	.ds 2
      000006                        326 _seg7_address::
      000006                        327 	.ds 2
      000008                        328 _temp_address::
      000008                        329 	.ds 2
      00000A                        330 _light_address::
      00000A                        331 	.ds 2
      00000C                        332 _read_ram_address::
      00000C                        333 	.ds 2
      00000E                        334 _cursor_x::
      00000E                        335 	.ds 2
      000010                        336 _cursor_y::
      000010                        337 	.ds 2
      000012                        338 _textsize::
      000012                        339 	.ds 1
      000013                        340 _rotation::
      000013                        341 	.ds 1
      000014                        342 _textcolor::
      000014                        343 	.ds 2
      000016                        344 _textbgcolor::
      000016                        345 	.ds 2
      000018                        346 _drawPixel_PARM_2:
      000018                        347 	.ds 2
      00001A                        348 _drawPixel_PARM_3:
      00001A                        349 	.ds 2
      00001C                        350 _drawCircle_PARM_2:
      00001C                        351 	.ds 2
      00001E                        352 _drawCircle_PARM_3:
      00001E                        353 	.ds 2
      000020                        354 _drawCircle_PARM_4:
      000020                        355 	.ds 2
      000022                        356 _drawCircle_x0_65536_110:
      000022                        357 	.ds 2
      000024                        358 _drawCircle_sloc0_1_0:
      000024                        359 	.ds 2
      000026                        360 _drawCircle_sloc1_1_0:
      000026                        361 	.ds 2
      000028                        362 _drawCircle_sloc2_1_0:
      000028                        363 	.ds 2
      00002A                        364 _drawCircle_sloc3_1_0:
      00002A                        365 	.ds 2
      00002C                        366 _drawCircle_sloc4_1_0:
      00002C                        367 	.ds 2
      00002E                        368 _testCircles_PARM_2:
      00002E                        369 	.ds 2
      000030                        370 _testCircles_radius_65536_114:
      000030                        371 	.ds 1
      000031                        372 _testCircles_sloc0_1_0:
      000031                        373 	.ds 2
      000033                        374 _fillRect_PARM_2:
      000033                        375 	.ds 2
      000035                        376 _fillRect_PARM_3:
      000035                        377 	.ds 2
      000037                        378 _fillRect_PARM_4:
      000037                        379 	.ds 2
      000039                        380 _fillRect_PARM_5:
      000039                        381 	.ds 2
      00003B                        382 _drawChar_PARM_2:
      00003B                        383 	.ds 2
      00003D                        384 _drawChar_PARM_3:
      00003D                        385 	.ds 1
      00003E                        386 _drawChar_PARM_4:
      00003E                        387 	.ds 2
      000040                        388 _drawChar_PARM_5:
      000040                        389 	.ds 2
      000042                        390 _drawChar_PARM_6:
      000042                        391 	.ds 1
      000043                        392 _drawChar_sloc1_1_0:
      000043                        393 	.ds 2
      000045                        394 _drawChar_sloc2_1_0:
      000045                        395 	.ds 2
      000047                        396 _drawChar_sloc3_1_0:
      000047                        397 	.ds 1
      000048                        398 _drawChar_sloc4_1_0:
      000048                        399 	.ds 1
      000049                        400 _drawChar_sloc5_1_0:
      000049                        401 	.ds 1
      00004A                        402 _asciiToHex_store_65536_207:
      00004A                        403 	.ds 2
      00004C                        404 _dumpPage_start_65536_238:
      00004C                        405 	.ds 2
      00004E                        406 _dumpPage_ramAddress_65537_240:
      00004E                        407 	.ds 2
      000050                        408 _dumpPage_sloc0_1_0:
      000050                        409 	.ds 2
      000052                        410 _move_target_65537_280:
      000052                        411 	.ds 2
      000054                        412 _move_sloc0_1_0:
      000054                        413 	.ds 2
      000056                        414 _move_sloc1_1_0:
      000056                        415 	.ds 2
      000058                        416 _printCount_PARM_2:
      000058                        417 	.ds 1
      000059                        418 _printCount_PARM_3:
      000059                        419 	.ds 1
      00005A                        420 _printCount_PARM_4:
      00005A                        421 	.ds 1
      00005B                        422 _count_key_65537_302:
      00005B                        423 	.ds 1
      00005C                        424 _count_sloc0_1_0:
      00005C                        425 	.ds 1
      00005D                        426 _count_sloc1_1_0:
      00005D                        427 	.ds 1
      00005E                        428 _count_sloc2_1_0:
      00005E                        429 	.ds 1
                                    430 ;--------------------------------------------------------
                                    431 ; overlayable items in internal ram
                                    432 ;--------------------------------------------------------
                                    433 	.area	OSEG    (OVR,DATA)
                                    434 	.area	OSEG    (OVR,DATA)
      000000                        435 _iowrite8_PARM_2:
      000000                        436 	.ds 1
                                    437 	.area	OSEG    (OVR,DATA)
                                    438 	.area	OSEG    (OVR,DATA)
                                    439 	.area	OSEG    (OVR,DATA)
      000000                        440 _writeRegister8_PARM_2:
      000000                        441 	.ds 1
                                    442 	.area	OSEG    (OVR,DATA)
      000000                        443 _writeRegister16_PARM_2:
      000000                        444 	.ds 2
                                    445 	.area	OSEG    (OVR,DATA)
      000000                        446 _setCursor_PARM_2:
      000000                        447 	.ds 2
                                    448 	.area	OSEG    (OVR,DATA)
      000000                        449 _setTextColor_PARM_2:
      000000                        450 	.ds 2
                                    451 	.area	OSEG    (OVR,DATA)
                                    452 	.area	OSEG    (OVR,DATA)
      000000                        453 _setAddress_PARM_2:
      000000                        454 	.ds 2
      000002                        455 _setAddress_PARM_3:
      000002                        456 	.ds 2
      000004                        457 _setAddress_PARM_4:
      000004                        458 	.ds 2
                                    459 	.area	OSEG    (OVR,DATA)
                                    460 	.area	OSEG    (OVR,DATA)
                                    461 ;--------------------------------------------------------
                                    462 ; Stack segment in internal ram
                                    463 ;--------------------------------------------------------
                                    464 	.area	SSEG
      000000                        465 __start__stack:
      000000                        466 	.ds	1
                                    467 
                                    468 ;--------------------------------------------------------
                                    469 ; indirectly addressable internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area ISEG    (DATA)
                                    472 ;--------------------------------------------------------
                                    473 ; absolute internal ram data
                                    474 ;--------------------------------------------------------
                                    475 	.area IABS    (ABS,DATA)
                                    476 	.area IABS    (ABS,DATA)
                                    477 ;--------------------------------------------------------
                                    478 ; bit data
                                    479 ;--------------------------------------------------------
                                    480 	.area BSEG    (BIT)
      000000                        481 _drawChar_sloc0_1_0:
      000000                        482 	.ds 1
      000001                        483 _convertAsciiHex_sloc0_1_0:
      000001                        484 	.ds 1
                                    485 ;--------------------------------------------------------
                                    486 ; paged external ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area PSEG    (PAG,XDATA)
                                    489 ;--------------------------------------------------------
                                    490 ; external ram data
                                    491 ;--------------------------------------------------------
                                    492 	.area XSEG    (XDATA)
      000000                        493 __width::
      000000                        494 	.ds 2
      000002                        495 __height::
      000002                        496 	.ds 2
      000004                        497 _drawCircle_f_65536_111:
      000004                        498 	.ds 2
      000006                        499 _testCircles_x_65536_115:
      000006                        500 	.ds 2
      000008                        501 _testCircles_y_65536_115:
      000008                        502 	.ds 2
      00000A                        503 _drawChar_line_196609_158:
      00000A                        504 	.ds 1
      00000B                        505 _testRAM_d_65536_179:
      00000B                        506 	.ds 1
      00000C                        507 _freeType_count_65536_183:
      00000C                        508 	.ds 1
      00000D                        509 _reverse_rev_65536_201:
      00000D                        510 	.ds 2
      00000F                        511 _reverse_val_65536_201:
      00000F                        512 	.ds 2
      000011                        513 _asciiToDec_d_65536_203:
      000011                        514 	.ds 1
      000012                        515 _asciiToDec_val_65536_204:
      000012                        516 	.ds 1
      000013                        517 _asciiToDec_id_65536_204:
      000013                        518 	.ds 2
      000015                        519 _getAddress_address_65536_232:
      000015                        520 	.ds 2
      000017                        521 _getByte_byte_65536_235:
      000017                        522 	.ds 1
      000018                        523 _dumpPage_PARM_2:
      000018                        524 	.ds 1
      000019                        525 _dumpPage_PARM_3:
      000019                        526 	.ds 1
      00001A                        527 _dumpPage_i_65537_240:
      00001A                        528 	.ds 1
      00001B                        529 _dump_type_65537_247:
      00001B                        530 	.ds 1
      00001C                        531 _dump_page_65537_247:
      00001C                        532 	.ds 1
      00001D                        533 _dump_address_65537_247:
      00001D                        534 	.ds 2
      00001F                        535 _editByte_add_65536_284:
      00001F                        536 	.ds 2
      000021                        537 _edit_input_65537_288:
      000021                        538 	.ds 1
      000022                        539 _count_page_65537_302:
      000022                        540 	.ds 1
      000023                        541 _count_index_65537_302:
      000023                        542 	.ds 1
      000024                        543 _count_address_65537_302:
      000024                        544 	.ds 2
                                    545 ;--------------------------------------------------------
                                    546 ; absolute external ram data
                                    547 ;--------------------------------------------------------
                                    548 	.area XABS    (ABS,XDATA)
                                    549 ;--------------------------------------------------------
                                    550 ; external initialized ram data
                                    551 ;--------------------------------------------------------
                                    552 	.area XISEG   (XDATA)
                                    553 	.area HOME    (CODE)
                                    554 	.area GSINIT0 (CODE)
                                    555 	.area GSINIT1 (CODE)
                                    556 	.area GSINIT2 (CODE)
                                    557 	.area GSINIT3 (CODE)
                                    558 	.area GSINIT4 (CODE)
                                    559 	.area GSINIT5 (CODE)
                                    560 	.area GSINIT  (CODE)
                                    561 	.area GSFINAL (CODE)
                                    562 	.area CSEG    (CODE)
                                    563 ;--------------------------------------------------------
                                    564 ; interrupt vector
                                    565 ;--------------------------------------------------------
                                    566 	.area HOME    (CODE)
      000000                        567 __interrupt_vect:
      000000 02r00r00         [24]  568 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  569 	reti
      000004                        570 	.ds	7
      00000B 32               [24]  571 	reti
      00000C                        572 	.ds	7
      000013 32               [24]  573 	reti
      000014                        574 	.ds	7
      00001B 32               [24]  575 	reti
      00001C                        576 	.ds	7
      000023 02r00r00         [24]  577 	ljmp	_ISR_receive
                                    578 ;--------------------------------------------------------
                                    579 ; global & static initialisations
                                    580 ;--------------------------------------------------------
                                    581 	.area HOME    (CODE)
                                    582 	.area GSINIT  (CODE)
                                    583 	.area GSFINAL (CODE)
                                    584 	.area GSINIT  (CODE)
                                    585 	.globl __sdcc_gsinit_startup
                                    586 	.globl __sdcc_program_startup
                                    587 	.globl __start__stack
                                    588 	.globl __mcs51_genXINIT
                                    589 	.globl __mcs51_genXRAMCLEAR
                                    590 	.globl __mcs51_genRAMCLEAR
                                    591 ;	USART.c:1: volatile unsigned char received_byte = 0;
      000000 75*00 00         [24]  592 	mov	_received_byte,#0x00
                                    593 ;	USART.c:2: volatile unsigned char recieved_flag = 0;
      000003 75*01 00         [24]  594 	mov	_recieved_flag,#0x00
                                    595 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000006 75*04 00         [24]  596 	mov	_lcd_address,#0x00
      000009 75*05 40         [24]  597 	mov	(_lcd_address + 1),#0x40
                                    598 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      00000C 75*06 00         [24]  599 	mov	_seg7_address,#0x00
      00000F 75*07 80         [24]  600 	mov	(_seg7_address + 1),#0x80
                                    601 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      000012 75*08 00         [24]  602 	mov	_temp_address,#0x00
      000015 75*09 C0         [24]  603 	mov	(_temp_address + 1),#0xc0
                                    604 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000018 E4               [12]  605 	clr	a
      000019 F5*0A            [12]  606 	mov	_light_address,a
      00001B F5*0B            [12]  607 	mov	(_light_address + 1),a
                                    608 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  609 	ljmp	__sdcc_program_startup
                                    610 ;--------------------------------------------------------
                                    611 ; Home
                                    612 ;--------------------------------------------------------
                                    613 	.area HOME    (CODE)
                                    614 	.area HOME    (CODE)
      000026                        615 __sdcc_program_startup:
      000026 02r1Er51         [24]  616 	ljmp	_main
                                    617 ;	return from main will return to caller
                                    618 ;--------------------------------------------------------
                                    619 ; code
                                    620 ;--------------------------------------------------------
                                    621 	.area CSEG    (CODE)
                                    622 ;------------------------------------------------------------
                                    623 ;Allocation info for local variables in function 'ISR_receive'
                                    624 ;------------------------------------------------------------
                                    625 ;	USART.c:4: void ISR_receive() __interrupt (4) {
                                    626 ;	-----------------------------------------
                                    627 ;	 function ISR_receive
                                    628 ;	-----------------------------------------
      000000                        629 _ISR_receive:
                           000007   630 	ar7 = 0x07
                           000006   631 	ar6 = 0x06
                           000005   632 	ar5 = 0x05
                           000004   633 	ar4 = 0x04
                           000003   634 	ar3 = 0x03
                           000002   635 	ar2 = 0x02
                           000001   636 	ar1 = 0x01
                           000000   637 	ar0 = 0x00
                                    638 ;	USART.c:5: if (RI == 1) {
      000000 30 98 08         [24]  639 	jnb	_RI,00103$
                                    640 ;	USART.c:6: received_byte = SBUF;
      000003 85 99*00         [24]  641 	mov	_received_byte,_SBUF
                                    642 ;	USART.c:7: RI = 0;
                                    643 ;	assignBit
      000006 C2 98            [12]  644 	clr	_RI
                                    645 ;	USART.c:8: recieved_flag = 1;
      000008 75*01 01         [24]  646 	mov	_recieved_flag,#0x01
      00000B                        647 00103$:
                                    648 ;	USART.c:10: }
      00000B 32               [24]  649 	reti
                                    650 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    651 ;	eliminated unneeded push/pop not_psw
                                    652 ;	eliminated unneeded push/pop dpl
                                    653 ;	eliminated unneeded push/pop dph
                                    654 ;	eliminated unneeded push/pop b
                                    655 ;	eliminated unneeded push/pop acc
                                    656 ;------------------------------------------------------------
                                    657 ;Allocation info for local variables in function 'UART_init'
                                    658 ;------------------------------------------------------------
                                    659 ;	USART.c:12: void UART_init () {
                                    660 ;	-----------------------------------------
                                    661 ;	 function UART_init
                                    662 ;	-----------------------------------------
      00000C                        663 _UART_init:
                                    664 ;	USART.c:13: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      00000C 75 98 50         [24]  665 	mov	_SCON,#0x50
                                    666 ;	USART.c:14: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      00000F 75 89 20         [24]  667 	mov	_TMOD,#0x20
                                    668 ;	USART.c:15: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      000012 75 8D FD         [24]  669 	mov	_TH1,#0xfd
                                    670 ;	USART.c:16: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    671 ;	assignBit
      000015 D2 8E            [12]  672 	setb	_TR1
                                    673 ;	USART.c:17: ES  = 1;      // Enable Serial Interrupt
                                    674 ;	assignBit
      000017 D2 AC            [12]  675 	setb	_ES
                                    676 ;	USART.c:18: EA  = 1;      // Enable Global Interrupt bit
                                    677 ;	assignBit
      000019 D2 AF            [12]  678 	setb	_EA
                                    679 ;	USART.c:19: }
      00001B 22               [24]  680 	ret
                                    681 ;------------------------------------------------------------
                                    682 ;Allocation info for local variables in function 'UART_transmit'
                                    683 ;------------------------------------------------------------
                                    684 ;byte                      Allocated to registers 
                                    685 ;------------------------------------------------------------
                                    686 ;	USART.c:21: void UART_transmit (unsigned char byte) {
                                    687 ;	-----------------------------------------
                                    688 ;	 function UART_transmit
                                    689 ;	-----------------------------------------
      00001C                        690 _UART_transmit:
      00001C 85 82 99         [24]  691 	mov	_SBUF,dpl
                                    692 ;	USART.c:23: while(TI == 0);
      00001F                        693 00101$:
                                    694 ;	USART.c:24: TI = 0;
                                    695 ;	assignBit
      00001F 10 99 02         [24]  696 	jbc	_TI,00114$
      000022 80 FB            [24]  697 	sjmp	00101$
      000024                        698 00114$:
                                    699 ;	USART.c:25: }
      000024 22               [24]  700 	ret
                                    701 ;------------------------------------------------------------
                                    702 ;Allocation info for local variables in function 'iowrite8'
                                    703 ;------------------------------------------------------------
                                    704 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    705 ;map_address               Allocated to registers r6 r7 
                                    706 ;------------------------------------------------------------
                                    707 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    708 ;	-----------------------------------------
                                    709 ;	 function iowrite8
                                    710 ;	-----------------------------------------
      000025                        711 _iowrite8:
      000025 AE 82            [24]  712 	mov	r6,dpl
      000027 AF 83            [24]  713 	mov	r7,dph
                                    714 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    715 ;	assignBit
      000029 D2 B4            [12]  716 	setb	_P3_4
                                    717 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      00002B 8E 82            [24]  718 	mov	dpl,r6
      00002D 8F 83            [24]  719 	mov	dph,r7
      00002F E5*00            [12]  720 	mov	a,_iowrite8_PARM_2
      000031 F0               [24]  721 	movx	@dptr,a
                                    722 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    723 ;	assignBit
      000032 C2 B4            [12]  724 	clr	_P3_4
                                    725 ;	ecen4330_lcd_v3.c:54: }
      000034 22               [24]  726 	ret
                                    727 ;------------------------------------------------------------
                                    728 ;Allocation info for local variables in function 'ioread8'
                                    729 ;------------------------------------------------------------
                                    730 ;map_address               Allocated to registers r6 r7 
                                    731 ;val                       Allocated to registers r6 
                                    732 ;------------------------------------------------------------
                                    733 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    734 ;	-----------------------------------------
                                    735 ;	 function ioread8
                                    736 ;	-----------------------------------------
      000035                        737 _ioread8:
      000035 AE 82            [24]  738 	mov	r6,dpl
      000037 AF 83            [24]  739 	mov	r7,dph
                                    740 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    741 ;	assignBit
      000039 D2 B4            [12]  742 	setb	_P3_4
                                    743 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      00003B 8E 82            [24]  744 	mov	dpl,r6
      00003D 8F 83            [24]  745 	mov	dph,r7
      00003F E0               [24]  746 	movx	a,@dptr
      000040 FE               [12]  747 	mov	r6,a
                                    748 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    749 ;	assignBit
      000041 C2 B4            [12]  750 	clr	_P3_4
                                    751 ;	ecen4330_lcd_v3.c:67: return val;
      000043 8E 82            [24]  752 	mov	dpl,r6
                                    753 ;	ecen4330_lcd_v3.c:68: }
      000045 22               [24]  754 	ret
                                    755 ;------------------------------------------------------------
                                    756 ;Allocation info for local variables in function 'delay'
                                    757 ;------------------------------------------------------------
                                    758 ;i                         Allocated with name '_delay_i_65536_34'
                                    759 ;j                         Allocated with name '_delay_j_65536_34'
                                    760 ;d                         Allocated to registers r6 r7 
                                    761 ;------------------------------------------------------------
                                    762 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d) {
                                    763 ;	-----------------------------------------
                                    764 ;	 function delay
                                    765 ;	-----------------------------------------
      000046                        766 _delay:
      000046 AE 82            [24]  767 	mov	r6,dpl
      000048 AF 83            [24]  768 	mov	r7,dph
                                    769 ;	ecen4330_lcd_v3.c:75: for (i = 0; i < d; i++) {
      00004A 7C 00            [12]  770 	mov	r4,#0x00
      00004C 7D 00            [12]  771 	mov	r5,#0x00
      00004E                        772 00107$:
      00004E 8C 02            [24]  773 	mov	ar2,r4
      000050 8D 03            [24]  774 	mov	ar3,r5
      000052 C3               [12]  775 	clr	c
      000053 EA               [12]  776 	mov	a,r2
      000054 9E               [12]  777 	subb	a,r6
      000055 EB               [12]  778 	mov	a,r3
      000056 64 80            [12]  779 	xrl	a,#0x80
      000058 8F F0            [24]  780 	mov	b,r7
      00005A 63 F0 80         [24]  781 	xrl	b,#0x80
      00005D 95 F0            [12]  782 	subb	a,b
      00005F 50 14            [24]  783 	jnc	00109$
                                    784 ;	ecen4330_lcd_v3.c:76: for (j = 0; j < 1000; j++);
      000061 7A E8            [12]  785 	mov	r2,#0xe8
      000063 7B 03            [12]  786 	mov	r3,#0x03
      000065                        787 00105$:
      000065 1A               [12]  788 	dec	r2
      000066 BA FF 01         [24]  789 	cjne	r2,#0xff,00130$
      000069 1B               [12]  790 	dec	r3
      00006A                        791 00130$:
      00006A EA               [12]  792 	mov	a,r2
      00006B 4B               [12]  793 	orl	a,r3
      00006C 70 F7            [24]  794 	jnz	00105$
                                    795 ;	ecen4330_lcd_v3.c:75: for (i = 0; i < d; i++) {
      00006E 0C               [12]  796 	inc	r4
      00006F BC 00 DC         [24]  797 	cjne	r4,#0x00,00107$
      000072 0D               [12]  798 	inc	r5
      000073 80 D9            [24]  799 	sjmp	00107$
      000075                        800 00109$:
                                    801 ;	ecen4330_lcd_v3.c:78: }
      000075 22               [24]  802 	ret
                                    803 ;------------------------------------------------------------
                                    804 ;Allocation info for local variables in function 'writeRegister8'
                                    805 ;------------------------------------------------------------
                                    806 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    807 ;a                         Allocated to registers r7 
                                    808 ;------------------------------------------------------------
                                    809 ;	ecen4330_lcd_v3.c:88: void writeRegister8 (uint8_t a, uint8_t d) {
                                    810 ;	-----------------------------------------
                                    811 ;	 function writeRegister8
                                    812 ;	-----------------------------------------
      000076                        813 _writeRegister8:
      000076 AF 82            [24]  814 	mov	r7,dpl
                                    815 ;	ecen4330_lcd_v3.c:89: CD = __CMD__;
                                    816 ;	assignBit
      000078 C2 B5            [12]  817 	clr	_P3_5
                                    818 ;	ecen4330_lcd_v3.c:90: write8(a);
                                    819 ;	assignBit
      00007A D2 B4            [12]  820 	setb	_P3_4
      00007C 85*04 82         [24]  821 	mov	dpl,_lcd_address
      00007F 85*05 83         [24]  822 	mov	dph,(_lcd_address + 1)
      000082 EF               [12]  823 	mov	a,r7
      000083 F0               [24]  824 	movx	@dptr,a
                                    825 ;	assignBit
      000084 C2 B4            [12]  826 	clr	_P3_4
                                    827 ;	ecen4330_lcd_v3.c:91: CD = __DATA__;
                                    828 ;	assignBit
      000086 D2 B5            [12]  829 	setb	_P3_5
                                    830 ;	ecen4330_lcd_v3.c:92: write8(d);
                                    831 ;	assignBit
      000088 D2 B4            [12]  832 	setb	_P3_4
      00008A 85*04 82         [24]  833 	mov	dpl,_lcd_address
      00008D 85*05 83         [24]  834 	mov	dph,(_lcd_address + 1)
      000090 E5*00            [12]  835 	mov	a,_writeRegister8_PARM_2
      000092 F0               [24]  836 	movx	@dptr,a
                                    837 ;	assignBit
      000093 C2 B4            [12]  838 	clr	_P3_4
                                    839 ;	ecen4330_lcd_v3.c:93: }
      000095 22               [24]  840 	ret
                                    841 ;------------------------------------------------------------
                                    842 ;Allocation info for local variables in function 'writeRegister16'
                                    843 ;------------------------------------------------------------
                                    844 ;hi                        Allocated with name '_writeRegister16_hi_65536_43'
                                    845 ;lo                        Allocated with name '_writeRegister16_lo_65536_43'
                                    846 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    847 ;a                         Allocated to registers r6 r7 
                                    848 ;------------------------------------------------------------
                                    849 ;	ecen4330_lcd_v3.c:97: void writeRegister16 (uint16_t a, uint16_t d) {
                                    850 ;	-----------------------------------------
                                    851 ;	 function writeRegister16
                                    852 ;	-----------------------------------------
      000096                        853 _writeRegister16:
      000096 AE 82            [24]  854 	mov	r6,dpl
      000098 AF 83            [24]  855 	mov	r7,dph
                                    856 ;	ecen4330_lcd_v3.c:99: hi = (a) >> 8;
      00009A 8F 05            [24]  857 	mov	ar5,r7
                                    858 ;	ecen4330_lcd_v3.c:100: lo = (a);
                                    859 ;	ecen4330_lcd_v3.c:101: write8Reg(hi);
                                    860 ;	assignBit
      00009C C2 B5            [12]  861 	clr	_P3_5
                                    862 ;	assignBit
      00009E D2 B4            [12]  863 	setb	_P3_4
      0000A0 85*04 82         [24]  864 	mov	dpl,_lcd_address
      0000A3 85*05 83         [24]  865 	mov	dph,(_lcd_address + 1)
      0000A6 ED               [12]  866 	mov	a,r5
      0000A7 F0               [24]  867 	movx	@dptr,a
                                    868 ;	assignBit
      0000A8 C2 B4            [12]  869 	clr	_P3_4
                                    870 ;	ecen4330_lcd_v3.c:102: write8Reg(lo);
                                    871 ;	assignBit
      0000AA C2 B5            [12]  872 	clr	_P3_5
                                    873 ;	assignBit
      0000AC D2 B4            [12]  874 	setb	_P3_4
      0000AE 85*04 82         [24]  875 	mov	dpl,_lcd_address
      0000B1 85*05 83         [24]  876 	mov	dph,(_lcd_address + 1)
      0000B4 EE               [12]  877 	mov	a,r6
      0000B5 F0               [24]  878 	movx	@dptr,a
                                    879 ;	assignBit
      0000B6 C2 B4            [12]  880 	clr	_P3_4
                                    881 ;	ecen4330_lcd_v3.c:103: hi = (d) >> 8;
      0000B8 AF*01            [24]  882 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    883 ;	ecen4330_lcd_v3.c:104: lo = (d);
      0000BA AE*00            [24]  884 	mov	r6,_writeRegister16_PARM_2
                                    885 ;	ecen4330_lcd_v3.c:105: CD = 1 ;
                                    886 ;	assignBit
      0000BC D2 B5            [12]  887 	setb	_P3_5
                                    888 ;	ecen4330_lcd_v3.c:106: write8Data(hi);
                                    889 ;	assignBit
      0000BE D2 B5            [12]  890 	setb	_P3_5
                                    891 ;	assignBit
      0000C0 D2 B4            [12]  892 	setb	_P3_4
      0000C2 85*04 82         [24]  893 	mov	dpl,_lcd_address
      0000C5 85*05 83         [24]  894 	mov	dph,(_lcd_address + 1)
      0000C8 EF               [12]  895 	mov	a,r7
      0000C9 F0               [24]  896 	movx	@dptr,a
                                    897 ;	assignBit
      0000CA C2 B4            [12]  898 	clr	_P3_4
                                    899 ;	ecen4330_lcd_v3.c:107: write8Data(lo);
                                    900 ;	assignBit
      0000CC D2 B5            [12]  901 	setb	_P3_5
                                    902 ;	assignBit
      0000CE D2 B4            [12]  903 	setb	_P3_4
      0000D0 85*04 82         [24]  904 	mov	dpl,_lcd_address
      0000D3 85*05 83         [24]  905 	mov	dph,(_lcd_address + 1)
      0000D6 EE               [12]  906 	mov	a,r6
      0000D7 F0               [24]  907 	movx	@dptr,a
                                    908 ;	assignBit
      0000D8 C2 B4            [12]  909 	clr	_P3_4
                                    910 ;	ecen4330_lcd_v3.c:108: }
      0000DA 22               [24]  911 	ret
                                    912 ;------------------------------------------------------------
                                    913 ;Allocation info for local variables in function 'setCursor'
                                    914 ;------------------------------------------------------------
                                    915 ;y                         Allocated with name '_setCursor_PARM_2'
                                    916 ;x                         Allocated to registers 
                                    917 ;------------------------------------------------------------
                                    918 ;	ecen4330_lcd_v3.c:116: void setCursor (uint16_t x, uint16_t y) {
                                    919 ;	-----------------------------------------
                                    920 ;	 function setCursor
                                    921 ;	-----------------------------------------
      0000DB                        922 _setCursor:
      0000DB 85 82*0E         [24]  923 	mov	_cursor_x,dpl
      0000DE 85 83*0F         [24]  924 	mov	(_cursor_x + 1),dph
                                    925 ;	ecen4330_lcd_v3.c:118: cursor_y = y;
      0000E1 85*00*10         [24]  926 	mov	_cursor_y,_setCursor_PARM_2
      0000E4 85*01*11         [24]  927 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    928 ;	ecen4330_lcd_v3.c:119: }
      0000E7 22               [24]  929 	ret
                                    930 ;------------------------------------------------------------
                                    931 ;Allocation info for local variables in function 'setTextColor'
                                    932 ;------------------------------------------------------------
                                    933 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    934 ;x                         Allocated to registers 
                                    935 ;------------------------------------------------------------
                                    936 ;	ecen4330_lcd_v3.c:126: void setTextColor (uint16_t x, uint16_t y) {
                                    937 ;	-----------------------------------------
                                    938 ;	 function setTextColor
                                    939 ;	-----------------------------------------
      0000E8                        940 _setTextColor:
      0000E8 85 82*14         [24]  941 	mov	_textcolor,dpl
      0000EB 85 83*15         [24]  942 	mov	(_textcolor + 1),dph
                                    943 ;	ecen4330_lcd_v3.c:128: textbgcolor = y;
      0000EE 85*00*16         [24]  944 	mov	_textbgcolor,_setTextColor_PARM_2
      0000F1 85*01*17         [24]  945 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    946 ;	ecen4330_lcd_v3.c:129: }
      0000F4 22               [24]  947 	ret
                                    948 ;------------------------------------------------------------
                                    949 ;Allocation info for local variables in function 'setTextSize'
                                    950 ;------------------------------------------------------------
                                    951 ;s                         Allocated to registers r7 
                                    952 ;------------------------------------------------------------
                                    953 ;	ecen4330_lcd_v3.c:136: void setTextSize (uint8_t s) {
                                    954 ;	-----------------------------------------
                                    955 ;	 function setTextSize
                                    956 ;	-----------------------------------------
      0000F5                        957 _setTextSize:
                                    958 ;	ecen4330_lcd_v3.c:137: if (s > 8) return;
      0000F5 E5 82            [12]  959 	mov	a,dpl
      0000F7 FF               [12]  960 	mov	r7,a
      0000F8 24 F7            [12]  961 	add	a,#0xff - 0x08
      0000FA 50 01            [24]  962 	jnc	00102$
      0000FC 22               [24]  963 	ret
      0000FD                        964 00102$:
                                    965 ;	ecen4330_lcd_v3.c:138: textsize = (s > 0) ? s : 1 ;
      0000FD EF               [12]  966 	mov	a,r7
      0000FE 60 06            [24]  967 	jz	00105$
      000100 8F 06            [24]  968 	mov	ar6,r7
      000102 7F 00            [12]  969 	mov	r7,#0x00
      000104 80 04            [24]  970 	sjmp	00106$
      000106                        971 00105$:
      000106 7E 01            [12]  972 	mov	r6,#0x01
      000108 7F 00            [12]  973 	mov	r7,#0x00
      00010A                        974 00106$:
      00010A 8E*12            [24]  975 	mov	_textsize,r6
                                    976 ;	ecen4330_lcd_v3.c:139: }
      00010C 22               [24]  977 	ret
                                    978 ;------------------------------------------------------------
                                    979 ;Allocation info for local variables in function 'setRotation'
                                    980 ;------------------------------------------------------------
                                    981 ;flag                      Allocated to registers r7 
                                    982 ;------------------------------------------------------------
                                    983 ;	ecen4330_lcd_v3.c:151: void setRotation (uint8_t flag) {
                                    984 ;	-----------------------------------------
                                    985 ;	 function setRotation
                                    986 ;	-----------------------------------------
      00010D                        987 _setRotation:
                                    988 ;	ecen4330_lcd_v3.c:152: switch(flag) {
      00010D E5 82            [12]  989 	mov	a,dpl
      00010F FF               [12]  990 	mov	r7,a
      000110 24 FC            [12]  991 	add	a,#0xff - 0x03
      000112 40 6A            [24]  992 	jc	00105$
      000114 EF               [12]  993 	mov	a,r7
      000115 2F               [12]  994 	add	a,r7
                                    995 ;	ecen4330_lcd_v3.c:153: case 0:
      000116 90r01r1A         [24]  996 	mov	dptr,#00115$
      000119 73               [24]  997 	jmp	@a+dptr
      00011A                        998 00115$:
      00011A 80 06            [24]  999 	sjmp	00101$
      00011C 80 1B            [24] 1000 	sjmp	00102$
      00011E 80 30            [24] 1001 	sjmp	00103$
      000120 80 45            [24] 1002 	sjmp	00104$
      000122                       1003 00101$:
                                   1004 ;	ecen4330_lcd_v3.c:154: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000122 7F 48            [12] 1005 	mov	r7,#0x48
                                   1006 ;	ecen4330_lcd_v3.c:155: _width = TFTWIDTH;
      000124 90r00r00         [24] 1007 	mov	dptr,#__width
      000127 74 F0            [12] 1008 	mov	a,#0xf0
      000129 F0               [24] 1009 	movx	@dptr,a
      00012A E4               [12] 1010 	clr	a
      00012B A3               [24] 1011 	inc	dptr
      00012C F0               [24] 1012 	movx	@dptr,a
                                   1013 ;	ecen4330_lcd_v3.c:156: _height = TFTHEIGHT;
      00012D 90r00r02         [24] 1014 	mov	dptr,#__height
      000130 74 40            [12] 1015 	mov	a,#0x40
      000132 F0               [24] 1016 	movx	@dptr,a
      000133 74 01            [12] 1017 	mov	a,#0x01
      000135 A3               [24] 1018 	inc	dptr
      000136 F0               [24] 1019 	movx	@dptr,a
                                   1020 ;	ecen4330_lcd_v3.c:157: break;
                                   1021 ;	ecen4330_lcd_v3.c:158: case 1:
      000137 80 5A            [24] 1022 	sjmp	00106$
      000139                       1023 00102$:
                                   1024 ;	ecen4330_lcd_v3.c:159: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000139 7F 28            [12] 1025 	mov	r7,#0x28
                                   1026 ;	ecen4330_lcd_v3.c:160: _width = TFTHEIGHT;
      00013B 90r00r00         [24] 1027 	mov	dptr,#__width
      00013E 74 40            [12] 1028 	mov	a,#0x40
      000140 F0               [24] 1029 	movx	@dptr,a
      000141 74 01            [12] 1030 	mov	a,#0x01
      000143 A3               [24] 1031 	inc	dptr
      000144 F0               [24] 1032 	movx	@dptr,a
                                   1033 ;	ecen4330_lcd_v3.c:161: _height = TFTWIDTH;
      000145 90r00r02         [24] 1034 	mov	dptr,#__height
      000148 74 F0            [12] 1035 	mov	a,#0xf0
      00014A F0               [24] 1036 	movx	@dptr,a
      00014B E4               [12] 1037 	clr	a
      00014C A3               [24] 1038 	inc	dptr
      00014D F0               [24] 1039 	movx	@dptr,a
                                   1040 ;	ecen4330_lcd_v3.c:162: break;
                                   1041 ;	ecen4330_lcd_v3.c:163: case 2:
      00014E 80 43            [24] 1042 	sjmp	00106$
      000150                       1043 00103$:
                                   1044 ;	ecen4330_lcd_v3.c:164: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000150 7F 88            [12] 1045 	mov	r7,#0x88
                                   1046 ;	ecen4330_lcd_v3.c:165: _width = TFTWIDTH;
      000152 90r00r00         [24] 1047 	mov	dptr,#__width
      000155 74 F0            [12] 1048 	mov	a,#0xf0
      000157 F0               [24] 1049 	movx	@dptr,a
      000158 E4               [12] 1050 	clr	a
      000159 A3               [24] 1051 	inc	dptr
      00015A F0               [24] 1052 	movx	@dptr,a
                                   1053 ;	ecen4330_lcd_v3.c:166: _height = TFTHEIGHT;
      00015B 90r00r02         [24] 1054 	mov	dptr,#__height
      00015E 74 40            [12] 1055 	mov	a,#0x40
      000160 F0               [24] 1056 	movx	@dptr,a
      000161 74 01            [12] 1057 	mov	a,#0x01
      000163 A3               [24] 1058 	inc	dptr
      000164 F0               [24] 1059 	movx	@dptr,a
                                   1060 ;	ecen4330_lcd_v3.c:167: break;
                                   1061 ;	ecen4330_lcd_v3.c:168: case 3:
      000165 80 2C            [24] 1062 	sjmp	00106$
      000167                       1063 00104$:
                                   1064 ;	ecen4330_lcd_v3.c:169: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000167 7F E8            [12] 1065 	mov	r7,#0xe8
                                   1066 ;	ecen4330_lcd_v3.c:170: _width = TFTHEIGHT;
      000169 90r00r00         [24] 1067 	mov	dptr,#__width
      00016C 74 40            [12] 1068 	mov	a,#0x40
      00016E F0               [24] 1069 	movx	@dptr,a
      00016F 74 01            [12] 1070 	mov	a,#0x01
      000171 A3               [24] 1071 	inc	dptr
      000172 F0               [24] 1072 	movx	@dptr,a
                                   1073 ;	ecen4330_lcd_v3.c:171: _height = TFTWIDTH;
      000173 90r00r02         [24] 1074 	mov	dptr,#__height
      000176 74 F0            [12] 1075 	mov	a,#0xf0
      000178 F0               [24] 1076 	movx	@dptr,a
      000179 E4               [12] 1077 	clr	a
      00017A A3               [24] 1078 	inc	dptr
      00017B F0               [24] 1079 	movx	@dptr,a
                                   1080 ;	ecen4330_lcd_v3.c:172: break;
                                   1081 ;	ecen4330_lcd_v3.c:173: default:
      00017C 80 15            [24] 1082 	sjmp	00106$
      00017E                       1083 00105$:
                                   1084 ;	ecen4330_lcd_v3.c:174: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00017E 7F 48            [12] 1085 	mov	r7,#0x48
                                   1086 ;	ecen4330_lcd_v3.c:175: _width = TFTWIDTH;
      000180 90r00r00         [24] 1087 	mov	dptr,#__width
      000183 74 F0            [12] 1088 	mov	a,#0xf0
      000185 F0               [24] 1089 	movx	@dptr,a
      000186 E4               [12] 1090 	clr	a
      000187 A3               [24] 1091 	inc	dptr
      000188 F0               [24] 1092 	movx	@dptr,a
                                   1093 ;	ecen4330_lcd_v3.c:176: _height = TFTHEIGHT;
      000189 90r00r02         [24] 1094 	mov	dptr,#__height
      00018C 74 40            [12] 1095 	mov	a,#0x40
      00018E F0               [24] 1096 	movx	@dptr,a
      00018F 74 01            [12] 1097 	mov	a,#0x01
      000191 A3               [24] 1098 	inc	dptr
      000192 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	ecen4330_lcd_v3.c:178: }
      000193                       1101 00106$:
                                   1102 ;	ecen4330_lcd_v3.c:179: writeRegister8(ILI9341_MEMCONTROL, flag);
      000193 8F*00            [24] 1103 	mov	_writeRegister8_PARM_2,r7
      000195 75 82 36         [24] 1104 	mov	dpl,#0x36
                                   1105 ;	ecen4330_lcd_v3.c:180: }
      000198 02r00r76         [24] 1106 	ljmp	_writeRegister8
                                   1107 ;------------------------------------------------------------
                                   1108 ;Allocation info for local variables in function 'setAddress'
                                   1109 ;------------------------------------------------------------
                                   1110 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1111 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1112 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1113 ;x1                        Allocated to registers r6 r7 
                                   1114 ;------------------------------------------------------------
                                   1115 ;	ecen4330_lcd_v3.c:182: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                   1116 ;	-----------------------------------------
                                   1117 ;	 function setAddress
                                   1118 ;	-----------------------------------------
      00019B                       1119 _setAddress:
      00019B AE 82            [24] 1120 	mov	r6,dpl
      00019D AF 83            [24] 1121 	mov	r7,dph
                                   1122 ;	ecen4330_lcd_v3.c:183: write8Reg(0x2A);
                                   1123 ;	assignBit
      00019F C2 B5            [12] 1124 	clr	_P3_5
                                   1125 ;	assignBit
      0001A1 D2 B4            [12] 1126 	setb	_P3_4
      0001A3 85*04 82         [24] 1127 	mov	dpl,_lcd_address
      0001A6 85*05 83         [24] 1128 	mov	dph,(_lcd_address + 1)
      0001A9 74 2A            [12] 1129 	mov	a,#0x2a
      0001AB F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	assignBit
      0001AC C2 B4            [12] 1132 	clr	_P3_4
                                   1133 ;	ecen4330_lcd_v3.c:184: write8Data(x1 >> 8);
                                   1134 ;	assignBit
      0001AE D2 B5            [12] 1135 	setb	_P3_5
                                   1136 ;	assignBit
      0001B0 D2 B4            [12] 1137 	setb	_P3_4
      0001B2 85*04 82         [24] 1138 	mov	dpl,_lcd_address
      0001B5 85*05 83         [24] 1139 	mov	dph,(_lcd_address + 1)
      0001B8 8F 05            [24] 1140 	mov	ar5,r7
      0001BA ED               [12] 1141 	mov	a,r5
      0001BB F0               [24] 1142 	movx	@dptr,a
                                   1143 ;	assignBit
      0001BC C2 B4            [12] 1144 	clr	_P3_4
                                   1145 ;	ecen4330_lcd_v3.c:185: write8Data(x1);
                                   1146 ;	assignBit
      0001BE D2 B5            [12] 1147 	setb	_P3_5
                                   1148 ;	assignBit
      0001C0 D2 B4            [12] 1149 	setb	_P3_4
      0001C2 85*04 82         [24] 1150 	mov	dpl,_lcd_address
      0001C5 85*05 83         [24] 1151 	mov	dph,(_lcd_address + 1)
      0001C8 EE               [12] 1152 	mov	a,r6
      0001C9 F0               [24] 1153 	movx	@dptr,a
                                   1154 ;	assignBit
      0001CA C2 B4            [12] 1155 	clr	_P3_4
                                   1156 ;	ecen4330_lcd_v3.c:186: write8Data(x2 >> 8);
                                   1157 ;	assignBit
      0001CC D2 B5            [12] 1158 	setb	_P3_5
                                   1159 ;	assignBit
      0001CE D2 B4            [12] 1160 	setb	_P3_4
      0001D0 85*04 82         [24] 1161 	mov	dpl,_lcd_address
      0001D3 85*05 83         [24] 1162 	mov	dph,(_lcd_address + 1)
      0001D6 E5*03            [12] 1163 	mov	a,(_setAddress_PARM_3 + 1)
      0001D8 F0               [24] 1164 	movx	@dptr,a
                                   1165 ;	assignBit
      0001D9 C2 B4            [12] 1166 	clr	_P3_4
                                   1167 ;	ecen4330_lcd_v3.c:187: write8Data(x2);
                                   1168 ;	assignBit
      0001DB D2 B5            [12] 1169 	setb	_P3_5
                                   1170 ;	assignBit
      0001DD D2 B4            [12] 1171 	setb	_P3_4
      0001DF 85*04 82         [24] 1172 	mov	dpl,_lcd_address
      0001E2 85*05 83         [24] 1173 	mov	dph,(_lcd_address + 1)
      0001E5 E5*02            [12] 1174 	mov	a,_setAddress_PARM_3
      0001E7 F0               [24] 1175 	movx	@dptr,a
                                   1176 ;	assignBit
      0001E8 C2 B4            [12] 1177 	clr	_P3_4
                                   1178 ;	ecen4330_lcd_v3.c:189: write8Reg(0x2B);
                                   1179 ;	assignBit
      0001EA C2 B5            [12] 1180 	clr	_P3_5
                                   1181 ;	assignBit
      0001EC D2 B4            [12] 1182 	setb	_P3_4
      0001EE 85*04 82         [24] 1183 	mov	dpl,_lcd_address
      0001F1 85*05 83         [24] 1184 	mov	dph,(_lcd_address + 1)
      0001F4 74 2B            [12] 1185 	mov	a,#0x2b
      0001F6 F0               [24] 1186 	movx	@dptr,a
                                   1187 ;	assignBit
      0001F7 C2 B4            [12] 1188 	clr	_P3_4
                                   1189 ;	ecen4330_lcd_v3.c:190: write8Data(y1 >> 8);
                                   1190 ;	assignBit
      0001F9 D2 B5            [12] 1191 	setb	_P3_5
                                   1192 ;	assignBit
      0001FB D2 B4            [12] 1193 	setb	_P3_4
      0001FD 85*04 82         [24] 1194 	mov	dpl,_lcd_address
      000200 85*05 83         [24] 1195 	mov	dph,(_lcd_address + 1)
      000203 E5*01            [12] 1196 	mov	a,(_setAddress_PARM_2 + 1)
      000205 F0               [24] 1197 	movx	@dptr,a
                                   1198 ;	assignBit
      000206 C2 B4            [12] 1199 	clr	_P3_4
                                   1200 ;	ecen4330_lcd_v3.c:191: write8Data(y1);
                                   1201 ;	assignBit
      000208 D2 B5            [12] 1202 	setb	_P3_5
                                   1203 ;	assignBit
      00020A D2 B4            [12] 1204 	setb	_P3_4
      00020C 85*04 82         [24] 1205 	mov	dpl,_lcd_address
      00020F 85*05 83         [24] 1206 	mov	dph,(_lcd_address + 1)
      000212 E5*00            [12] 1207 	mov	a,_setAddress_PARM_2
      000214 F0               [24] 1208 	movx	@dptr,a
                                   1209 ;	assignBit
      000215 C2 B4            [12] 1210 	clr	_P3_4
                                   1211 ;	ecen4330_lcd_v3.c:192: write8Data(y2 >> 8);
                                   1212 ;	assignBit
      000217 D2 B5            [12] 1213 	setb	_P3_5
                                   1214 ;	assignBit
      000219 D2 B4            [12] 1215 	setb	_P3_4
      00021B 85*04 82         [24] 1216 	mov	dpl,_lcd_address
      00021E 85*05 83         [24] 1217 	mov	dph,(_lcd_address + 1)
      000221 E5*05            [12] 1218 	mov	a,(_setAddress_PARM_4 + 1)
      000223 F0               [24] 1219 	movx	@dptr,a
                                   1220 ;	assignBit
      000224 C2 B4            [12] 1221 	clr	_P3_4
                                   1222 ;	ecen4330_lcd_v3.c:193: write8Data(y2);
                                   1223 ;	assignBit
      000226 D2 B5            [12] 1224 	setb	_P3_5
                                   1225 ;	assignBit
      000228 D2 B4            [12] 1226 	setb	_P3_4
      00022A 85*04 82         [24] 1227 	mov	dpl,_lcd_address
      00022D 85*05 83         [24] 1228 	mov	dph,(_lcd_address + 1)
      000230 E5*04            [12] 1229 	mov	a,_setAddress_PARM_4
      000232 F0               [24] 1230 	movx	@dptr,a
                                   1231 ;	assignBit
      000233 C2 B4            [12] 1232 	clr	_P3_4
                                   1233 ;	ecen4330_lcd_v3.c:194: }
      000235 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1237 ;------------------------------------------------------------
                                   1238 ;	ecen4330_lcd_v3.c:200: void TFT_LCD_INIT (void) {
                                   1239 ;	-----------------------------------------
                                   1240 ;	 function TFT_LCD_INIT
                                   1241 ;	-----------------------------------------
      000236                       1242 _TFT_LCD_INIT:
                                   1243 ;	ecen4330_lcd_v3.c:201: _width = TFTWIDTH;
      000236 90r00r00         [24] 1244 	mov	dptr,#__width
      000239 74 F0            [12] 1245 	mov	a,#0xf0
      00023B F0               [24] 1246 	movx	@dptr,a
      00023C E4               [12] 1247 	clr	a
      00023D A3               [24] 1248 	inc	dptr
      00023E F0               [24] 1249 	movx	@dptr,a
                                   1250 ;	ecen4330_lcd_v3.c:202: _height = TFTHEIGHT;
      00023F 90r00r02         [24] 1251 	mov	dptr,#__height
      000242 74 40            [12] 1252 	mov	a,#0x40
      000244 F0               [24] 1253 	movx	@dptr,a
      000245 74 01            [12] 1254 	mov	a,#0x01
      000247 A3               [24] 1255 	inc	dptr
      000248 F0               [24] 1256 	movx	@dptr,a
                                   1257 ;	ecen4330_lcd_v3.c:204: IOM = 0;
                                   1258 ;	assignBit
      000249 C2 B4            [12] 1259 	clr	_P3_4
                                   1260 ;	ecen4330_lcd_v3.c:205: CD = 1;
                                   1261 ;	assignBit
      00024B D2 B5            [12] 1262 	setb	_P3_5
                                   1263 ;	ecen4330_lcd_v3.c:207: write8Reg(0x00);
                                   1264 ;	assignBit
      00024D C2 B5            [12] 1265 	clr	_P3_5
                                   1266 ;	assignBit
      00024F D2 B4            [12] 1267 	setb	_P3_4
      000251 85*04 82         [24] 1268 	mov	dpl,_lcd_address
      000254 85*05 83         [24] 1269 	mov	dph,(_lcd_address + 1)
      000257 E4               [12] 1270 	clr	a
      000258 F0               [24] 1271 	movx	@dptr,a
                                   1272 ;	assignBit
      000259 C2 B4            [12] 1273 	clr	_P3_4
                                   1274 ;	ecen4330_lcd_v3.c:208: write8Data(0x00);
                                   1275 ;	assignBit
      00025B D2 B5            [12] 1276 	setb	_P3_5
                                   1277 ;	assignBit
      00025D D2 B4            [12] 1278 	setb	_P3_4
      00025F 85*04 82         [24] 1279 	mov	dpl,_lcd_address
      000262 85*05 83         [24] 1280 	mov	dph,(_lcd_address + 1)
      000265 E4               [12] 1281 	clr	a
      000266 F0               [24] 1282 	movx	@dptr,a
                                   1283 ;	assignBit
      000267 C2 B4            [12] 1284 	clr	_P3_4
                                   1285 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1286 ;	assignBit
      000269 D2 B5            [12] 1287 	setb	_P3_5
                                   1288 ;	assignBit
      00026B D2 B4            [12] 1289 	setb	_P3_4
      00026D 85*04 82         [24] 1290 	mov	dpl,_lcd_address
      000270 85*05 83         [24] 1291 	mov	dph,(_lcd_address + 1)
      000273 E4               [12] 1292 	clr	a
      000274 F0               [24] 1293 	movx	@dptr,a
                                   1294 ;	assignBit
      000275 C2 B4            [12] 1295 	clr	_P3_4
                                   1296 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1297 ;	assignBit
      000277 D2 B5            [12] 1298 	setb	_P3_5
                                   1299 ;	assignBit
      000279 D2 B4            [12] 1300 	setb	_P3_4
      00027B 85*04 82         [24] 1301 	mov	dpl,_lcd_address
      00027E 85*05 83         [24] 1302 	mov	dph,(_lcd_address + 1)
      000281 E4               [12] 1303 	clr	a
      000282 F0               [24] 1304 	movx	@dptr,a
                                   1305 ;	assignBit
      000283 C2 B4            [12] 1306 	clr	_P3_4
                                   1307 ;	ecen4330_lcd_v3.c:211: delay(200);
      000285 90 00 C8         [24] 1308 	mov	dptr,#0x00c8
      000288 12r00r46         [24] 1309 	lcall	_delay
                                   1310 ;	ecen4330_lcd_v3.c:213: writeRegister8(ILI9341_SOFTRESET, 0);
      00028B 75*00 00         [24] 1311 	mov	_writeRegister8_PARM_2,#0x00
      00028E 75 82 01         [24] 1312 	mov	dpl,#0x01
      000291 12r00r76         [24] 1313 	lcall	_writeRegister8
                                   1314 ;	ecen4330_lcd_v3.c:214: delay(50);
      000294 90 00 32         [24] 1315 	mov	dptr,#0x0032
      000297 12r00r46         [24] 1316 	lcall	_delay
                                   1317 ;	ecen4330_lcd_v3.c:215: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00029A 75*00 00         [24] 1318 	mov	_writeRegister8_PARM_2,#0x00
      00029D 75 82 28         [24] 1319 	mov	dpl,#0x28
      0002A0 12r00r76         [24] 1320 	lcall	_writeRegister8
                                   1321 ;	ecen4330_lcd_v3.c:216: delay(10);
      0002A3 90 00 0A         [24] 1322 	mov	dptr,#0x000a
      0002A6 12r00r46         [24] 1323 	lcall	_delay
                                   1324 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      0002A9 75*00 23         [24] 1325 	mov	_writeRegister8_PARM_2,#0x23
      0002AC 75 82 C0         [24] 1326 	mov	dpl,#0xc0
      0002AF 12r00r76         [24] 1327 	lcall	_writeRegister8
                                   1328 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      0002B2 75*00 11         [24] 1329 	mov	_writeRegister8_PARM_2,#0x11
      0002B5 75 82 C1         [24] 1330 	mov	dpl,#0xc1
      0002B8 12r00r76         [24] 1331 	lcall	_writeRegister8
                                   1332 ;	ecen4330_lcd_v3.c:220: write8Reg(ILI9341_VCOMCONTROL1);
                                   1333 ;	assignBit
      0002BB C2 B5            [12] 1334 	clr	_P3_5
                                   1335 ;	assignBit
      0002BD D2 B4            [12] 1336 	setb	_P3_4
      0002BF 85*04 82         [24] 1337 	mov	dpl,_lcd_address
      0002C2 85*05 83         [24] 1338 	mov	dph,(_lcd_address + 1)
      0002C5 74 C5            [12] 1339 	mov	a,#0xc5
      0002C7 F0               [24] 1340 	movx	@dptr,a
                                   1341 ;	assignBit
      0002C8 C2 B4            [12] 1342 	clr	_P3_4
                                   1343 ;	ecen4330_lcd_v3.c:221: write8Data(0x3d);
                                   1344 ;	assignBit
      0002CA D2 B5            [12] 1345 	setb	_P3_5
                                   1346 ;	assignBit
      0002CC D2 B4            [12] 1347 	setb	_P3_4
      0002CE 85*04 82         [24] 1348 	mov	dpl,_lcd_address
      0002D1 85*05 83         [24] 1349 	mov	dph,(_lcd_address + 1)
      0002D4 74 3D            [12] 1350 	mov	a,#0x3d
      0002D6 F0               [24] 1351 	movx	@dptr,a
                                   1352 ;	assignBit
      0002D7 C2 B4            [12] 1353 	clr	_P3_4
                                   1354 ;	ecen4330_lcd_v3.c:222: write8Data(0x30);
                                   1355 ;	assignBit
      0002D9 D2 B5            [12] 1356 	setb	_P3_5
                                   1357 ;	assignBit
      0002DB D2 B4            [12] 1358 	setb	_P3_4
      0002DD 85*04 82         [24] 1359 	mov	dpl,_lcd_address
      0002E0 85*05 83         [24] 1360 	mov	dph,(_lcd_address + 1)
      0002E3 74 30            [12] 1361 	mov	a,#0x30
      0002E5 F0               [24] 1362 	movx	@dptr,a
                                   1363 ;	assignBit
      0002E6 C2 B4            [12] 1364 	clr	_P3_4
                                   1365 ;	ecen4330_lcd_v3.c:223: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002E8 75*00 AA         [24] 1366 	mov	_writeRegister8_PARM_2,#0xaa
      0002EB 75 82 C7         [24] 1367 	mov	dpl,#0xc7
      0002EE 12r00r76         [24] 1368 	lcall	_writeRegister8
                                   1369 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002F1 75*00 88         [24] 1370 	mov	_writeRegister8_PARM_2,#0x88
      0002F4 75 82 36         [24] 1371 	mov	dpl,#0x36
      0002F7 12r00r76         [24] 1372 	lcall	_writeRegister8
                                   1373 ;	ecen4330_lcd_v3.c:225: write8Reg(ILI9341_PIXELFORMAT);
                                   1374 ;	assignBit
      0002FA C2 B5            [12] 1375 	clr	_P3_5
                                   1376 ;	assignBit
      0002FC D2 B4            [12] 1377 	setb	_P3_4
      0002FE 85*04 82         [24] 1378 	mov	dpl,_lcd_address
      000301 85*05 83         [24] 1379 	mov	dph,(_lcd_address + 1)
      000304 74 3A            [12] 1380 	mov	a,#0x3a
      000306 F0               [24] 1381 	movx	@dptr,a
                                   1382 ;	assignBit
      000307 C2 B4            [12] 1383 	clr	_P3_4
                                   1384 ;	ecen4330_lcd_v3.c:226: write8Data(0x55);
                                   1385 ;	assignBit
      000309 D2 B5            [12] 1386 	setb	_P3_5
                                   1387 ;	assignBit
      00030B D2 B4            [12] 1388 	setb	_P3_4
      00030D 85*04 82         [24] 1389 	mov	dpl,_lcd_address
      000310 85*05 83         [24] 1390 	mov	dph,(_lcd_address + 1)
      000313 74 55            [12] 1391 	mov	a,#0x55
      000315 F0               [24] 1392 	movx	@dptr,a
                                   1393 ;	assignBit
      000316 C2 B4            [12] 1394 	clr	_P3_4
                                   1395 ;	ecen4330_lcd_v3.c:227: write8Data(0x00);
                                   1396 ;	assignBit
      000318 D2 B5            [12] 1397 	setb	_P3_5
                                   1398 ;	assignBit
      00031A D2 B4            [12] 1399 	setb	_P3_4
      00031C 85*04 82         [24] 1400 	mov	dpl,_lcd_address
      00031F 85*05 83         [24] 1401 	mov	dph,(_lcd_address + 1)
      000322 E4               [12] 1402 	clr	a
      000323 F0               [24] 1403 	movx	@dptr,a
                                   1404 ;	assignBit
      000324 C2 B4            [12] 1405 	clr	_P3_4
                                   1406 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000326 75*00 1B         [24] 1407 	mov	_writeRegister16_PARM_2,#0x1b
      000329 75*01 00         [24] 1408 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      00032C 90 00 B1         [24] 1409 	mov	dptr,#0x00b1
      00032F 12r00r96         [24] 1410 	lcall	_writeRegister16
                                   1411 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      000332 75*00 07         [24] 1412 	mov	_writeRegister8_PARM_2,#0x07
      000335 75 82 B7         [24] 1413 	mov	dpl,#0xb7
      000338 12r00r76         [24] 1414 	lcall	_writeRegister8
                                   1415 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      00033B 75*00 00         [24] 1416 	mov	_writeRegister8_PARM_2,#0x00
      00033E 75 82 11         [24] 1417 	mov	dpl,#0x11
      000341 12r00r76         [24] 1418 	lcall	_writeRegister8
                                   1419 ;	ecen4330_lcd_v3.c:233: delay(150);
      000344 90 00 96         [24] 1420 	mov	dptr,#0x0096
      000347 12r00r46         [24] 1421 	lcall	_delay
                                   1422 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      00034A 75*00 00         [24] 1423 	mov	_writeRegister8_PARM_2,#0x00
      00034D 75 82 29         [24] 1424 	mov	dpl,#0x29
      000350 12r00r76         [24] 1425 	lcall	_writeRegister8
                                   1426 ;	ecen4330_lcd_v3.c:235: delay(500);
      000353 90 01 F4         [24] 1427 	mov	dptr,#0x01f4
      000356 12r00r46         [24] 1428 	lcall	_delay
                                   1429 ;	ecen4330_lcd_v3.c:236: setAddress(0, 0, _width-1, _height-1);
      000359 90r00r00         [24] 1430 	mov	dptr,#__width
      00035C E0               [24] 1431 	movx	a,@dptr
      00035D FE               [12] 1432 	mov	r6,a
      00035E A3               [24] 1433 	inc	dptr
      00035F E0               [24] 1434 	movx	a,@dptr
      000360 FF               [12] 1435 	mov	r7,a
      000361 1E               [12] 1436 	dec	r6
      000362 BE FF 01         [24] 1437 	cjne	r6,#0xff,00103$
      000365 1F               [12] 1438 	dec	r7
      000366                       1439 00103$:
      000366 8E*02            [24] 1440 	mov	_setAddress_PARM_3,r6
      000368 8F*03            [24] 1441 	mov	(_setAddress_PARM_3 + 1),r7
      00036A 90r00r02         [24] 1442 	mov	dptr,#__height
      00036D E0               [24] 1443 	movx	a,@dptr
      00036E FE               [12] 1444 	mov	r6,a
      00036F A3               [24] 1445 	inc	dptr
      000370 E0               [24] 1446 	movx	a,@dptr
      000371 FF               [12] 1447 	mov	r7,a
      000372 1E               [12] 1448 	dec	r6
      000373 BE FF 01         [24] 1449 	cjne	r6,#0xff,00104$
      000376 1F               [12] 1450 	dec	r7
      000377                       1451 00104$:
      000377 8E*04            [24] 1452 	mov	_setAddress_PARM_4,r6
      000379 8F*05            [24] 1453 	mov	(_setAddress_PARM_4 + 1),r7
      00037B E4               [12] 1454 	clr	a
      00037C F5*00            [12] 1455 	mov	_setAddress_PARM_2,a
      00037E F5*01            [12] 1456 	mov	(_setAddress_PARM_2 + 1),a
      000380 90 00 00         [24] 1457 	mov	dptr,#0x0000
                                   1458 ;	ecen4330_lcd_v3.c:237: }
      000383 02r01r9B         [24] 1459 	ljmp	_setAddress
                                   1460 ;------------------------------------------------------------
                                   1461 ;Allocation info for local variables in function 'drawPixel'
                                   1462 ;------------------------------------------------------------
                                   1463 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1464 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1465 ;x3                        Allocated to registers r6 r7 
                                   1466 ;------------------------------------------------------------
                                   1467 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1) {
                                   1468 ;	-----------------------------------------
                                   1469 ;	 function drawPixel
                                   1470 ;	-----------------------------------------
      000386                       1471 _drawPixel:
      000386 AE 82            [24] 1472 	mov	r6,dpl
      000388 AF 83            [24] 1473 	mov	r7,dph
                                   1474 ;	ecen4330_lcd_v3.c:247: setAddress(x3,y3,x3+1,y3+1);
      00038A 8E 04            [24] 1475 	mov	ar4,r6
      00038C 8F 05            [24] 1476 	mov	ar5,r7
      00038E 0C               [12] 1477 	inc	r4
      00038F BC 00 01         [24] 1478 	cjne	r4,#0x00,00103$
      000392 0D               [12] 1479 	inc	r5
      000393                       1480 00103$:
      000393 8C*02            [24] 1481 	mov	_setAddress_PARM_3,r4
      000395 8D*03            [24] 1482 	mov	(_setAddress_PARM_3 + 1),r5
      000397 AC*18            [24] 1483 	mov	r4,_drawPixel_PARM_2
      000399 AD*19            [24] 1484 	mov	r5,(_drawPixel_PARM_2 + 1)
      00039B 0C               [12] 1485 	inc	r4
      00039C BC 00 01         [24] 1486 	cjne	r4,#0x00,00104$
      00039F 0D               [12] 1487 	inc	r5
      0003A0                       1488 00104$:
      0003A0 8C*04            [24] 1489 	mov	_setAddress_PARM_4,r4
      0003A2 8D*05            [24] 1490 	mov	(_setAddress_PARM_4 + 1),r5
      0003A4 85*18*00         [24] 1491 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      0003A7 85*19*01         [24] 1492 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      0003AA 8E 82            [24] 1493 	mov	dpl,r6
      0003AC 8F 83            [24] 1494 	mov	dph,r7
      0003AE 12r01r9B         [24] 1495 	lcall	_setAddress
                                   1496 ;	ecen4330_lcd_v3.c:249: CD = 0;
                                   1497 ;	assignBit
      0003B1 C2 B5            [12] 1498 	clr	_P3_5
                                   1499 ;	ecen4330_lcd_v3.c:250: write8(0x2C);
                                   1500 ;	assignBit
      0003B3 D2 B4            [12] 1501 	setb	_P3_4
      0003B5 85*04 82         [24] 1502 	mov	dpl,_lcd_address
      0003B8 85*05 83         [24] 1503 	mov	dph,(_lcd_address + 1)
      0003BB 74 2C            [12] 1504 	mov	a,#0x2c
      0003BD F0               [24] 1505 	movx	@dptr,a
                                   1506 ;	assignBit
      0003BE C2 B4            [12] 1507 	clr	_P3_4
                                   1508 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1509 ;	assignBit
      0003C0 D2 B5            [12] 1510 	setb	_P3_5
                                   1511 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1512 ;	assignBit
      0003C2 D2 B4            [12] 1513 	setb	_P3_4
      0003C4 85*04 82         [24] 1514 	mov	dpl,_lcd_address
      0003C7 85*05 83         [24] 1515 	mov	dph,(_lcd_address + 1)
      0003CA E5*1B            [12] 1516 	mov	a,(_drawPixel_PARM_3 + 1)
      0003CC F0               [24] 1517 	movx	@dptr,a
                                   1518 ;	assignBit
      0003CD C2 B4            [12] 1519 	clr	_P3_4
                                   1520 ;	assignBit
      0003CF D2 B4            [12] 1521 	setb	_P3_4
      0003D1 85*04 82         [24] 1522 	mov	dpl,_lcd_address
      0003D4 85*05 83         [24] 1523 	mov	dph,(_lcd_address + 1)
      0003D7 E5*1A            [12] 1524 	mov	a,_drawPixel_PARM_3
      0003D9 F0               [24] 1525 	movx	@dptr,a
                                   1526 ;	assignBit
      0003DA C2 B4            [12] 1527 	clr	_P3_4
                                   1528 ;	ecen4330_lcd_v3.c:254: }
      0003DC 22               [24] 1529 	ret
                                   1530 ;------------------------------------------------------------
                                   1531 ;Allocation info for local variables in function 'drawCircle'
                                   1532 ;------------------------------------------------------------
                                   1533 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1534 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1535 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1536 ;x0                        Allocated with name '_drawCircle_x0_65536_110'
                                   1537 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1538 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1539 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1540 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1541 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1542 ;f                         Allocated with name '_drawCircle_f_65536_111'
                                   1543 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_111'
                                   1544 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_111'
                                   1545 ;x                         Allocated with name '_drawCircle_x_65536_111'
                                   1546 ;y                         Allocated with name '_drawCircle_y_65536_111'
                                   1547 ;------------------------------------------------------------
                                   1548 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1549 ;	-----------------------------------------
                                   1550 ;	 function drawCircle
                                   1551 ;	-----------------------------------------
      0003DD                       1552 _drawCircle:
      0003DD 85 82*22         [24] 1553 	mov	_drawCircle_x0_65536_110,dpl
      0003E0 85 83*23         [24] 1554 	mov	(_drawCircle_x0_65536_110 + 1),dph
                                   1555 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003E3 74 01            [12] 1556 	mov	a,#0x01
      0003E5 C3               [12] 1557 	clr	c
      0003E6 95*1E            [12] 1558 	subb	a,_drawCircle_PARM_3
      0003E8 FC               [12] 1559 	mov	r4,a
      0003E9 E4               [12] 1560 	clr	a
      0003EA 95*1F            [12] 1561 	subb	a,(_drawCircle_PARM_3 + 1)
      0003EC FD               [12] 1562 	mov	r5,a
      0003ED 90r00r04         [24] 1563 	mov	dptr,#_drawCircle_f_65536_111
      0003F0 EC               [12] 1564 	mov	a,r4
      0003F1 F0               [24] 1565 	movx	@dptr,a
      0003F2 ED               [12] 1566 	mov	a,r5
      0003F3 A3               [24] 1567 	inc	dptr
      0003F4 F0               [24] 1568 	movx	@dptr,a
                                   1569 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003F5 85*1E*00         [24] 1570 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003F8 85*1F*01         [24] 1571 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003FB 90 FF FE         [24] 1572 	mov	dptr,#0xfffe
      0003FE 12r00r00         [24] 1573 	lcall	__mulint
      000401 AC 82            [24] 1574 	mov	r4,dpl
      000403 AD 83            [24] 1575 	mov	r5,dph
                                   1576 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      000405 AA*1E            [24] 1577 	mov	r2,_drawCircle_PARM_3
      000407 AB*1F            [24] 1578 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1579 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      000409 E5*1E            [12] 1580 	mov	a,_drawCircle_PARM_3
      00040B 25*1C            [12] 1581 	add	a,_drawCircle_PARM_2
      00040D F5*18            [12] 1582 	mov	_drawPixel_PARM_2,a
      00040F E5*1F            [12] 1583 	mov	a,(_drawCircle_PARM_3 + 1)
      000411 35*1D            [12] 1584 	addc	a,(_drawCircle_PARM_2 + 1)
      000413 F5*19            [12] 1585 	mov	(_drawPixel_PARM_2 + 1),a
      000415 85*20*1A         [24] 1586 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000418 85*21*1B         [24] 1587 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041B 85*22 82         [24] 1588 	mov	dpl,_drawCircle_x0_65536_110
      00041E 85*23 83         [24] 1589 	mov	dph,(_drawCircle_x0_65536_110 + 1)
      000421 C0 05            [24] 1590 	push	ar5
      000423 C0 04            [24] 1591 	push	ar4
      000425 C0 03            [24] 1592 	push	ar3
      000427 C0 02            [24] 1593 	push	ar2
      000429 12r03r86         [24] 1594 	lcall	_drawPixel
                                   1595 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      00042C E5*1C            [12] 1596 	mov	a,_drawCircle_PARM_2
      00042E C3               [12] 1597 	clr	c
      00042F 95*1E            [12] 1598 	subb	a,_drawCircle_PARM_3
      000431 F5*18            [12] 1599 	mov	_drawPixel_PARM_2,a
      000433 E5*1D            [12] 1600 	mov	a,(_drawCircle_PARM_2 + 1)
      000435 95*1F            [12] 1601 	subb	a,(_drawCircle_PARM_3 + 1)
      000437 F5*19            [12] 1602 	mov	(_drawPixel_PARM_2 + 1),a
      000439 85*20*1A         [24] 1603 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00043C 85*21*1B         [24] 1604 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043F 85*22 82         [24] 1605 	mov	dpl,_drawCircle_x0_65536_110
      000442 85*23 83         [24] 1606 	mov	dph,(_drawCircle_x0_65536_110 + 1)
      000445 12r03r86         [24] 1607 	lcall	_drawPixel
                                   1608 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000448 E5*1E            [12] 1609 	mov	a,_drawCircle_PARM_3
      00044A 25*22            [12] 1610 	add	a,_drawCircle_x0_65536_110
      00044C F5 82            [12] 1611 	mov	dpl,a
      00044E E5*1F            [12] 1612 	mov	a,(_drawCircle_PARM_3 + 1)
      000450 35*23            [12] 1613 	addc	a,(_drawCircle_x0_65536_110 + 1)
      000452 F5 83            [12] 1614 	mov	dph,a
      000454 85*1C*18         [24] 1615 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000457 85*1D*19         [24] 1616 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00045A 85*20*1A         [24] 1617 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00045D 85*21*1B         [24] 1618 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000460 12r03r86         [24] 1619 	lcall	_drawPixel
                                   1620 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      000463 E5*22            [12] 1621 	mov	a,_drawCircle_x0_65536_110
      000465 C3               [12] 1622 	clr	c
      000466 95*1E            [12] 1623 	subb	a,_drawCircle_PARM_3
      000468 F5 82            [12] 1624 	mov	dpl,a
      00046A E5*23            [12] 1625 	mov	a,(_drawCircle_x0_65536_110 + 1)
      00046C 95*1F            [12] 1626 	subb	a,(_drawCircle_PARM_3 + 1)
      00046E F5 83            [12] 1627 	mov	dph,a
      000470 85*1C*18         [24] 1628 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000473 85*1D*19         [24] 1629 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000476 85*20*1A         [24] 1630 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000479 85*21*1B         [24] 1631 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00047C 12r03r86         [24] 1632 	lcall	_drawPixel
      00047F D0 02            [24] 1633 	pop	ar2
      000481 D0 03            [24] 1634 	pop	ar3
      000483 D0 04            [24] 1635 	pop	ar4
      000485 D0 05            [24] 1636 	pop	ar5
                                   1637 ;	ecen4330_lcd_v3.c:276: while (x < y) {
      000487 78 00            [12] 1638 	mov	r0,#0x00
      000489 79 00            [12] 1639 	mov	r1,#0x00
      00048B 75*24 01         [24] 1640 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1641 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      00048E 89*25            [24] 1642 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      000490                       1643 00103$:
      000490 C3               [12] 1644 	clr	c
      000491 E8               [12] 1645 	mov	a,r0
      000492 9A               [12] 1646 	subb	a,r2
      000493 E9               [12] 1647 	mov	a,r1
      000494 64 80            [12] 1648 	xrl	a,#0x80
      000496 8B F0            [24] 1649 	mov	b,r3
      000498 63 F0 80         [24] 1650 	xrl	b,#0x80
      00049B 95 F0            [12] 1651 	subb	a,b
      00049D 40 01            [24] 1652 	jc	00121$
      00049F 22               [24] 1653 	ret
      0004A0                       1654 00121$:
                                   1655 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      0004A0 90r00r04         [24] 1656 	mov	dptr,#_drawCircle_f_65536_111
      0004A3 E0               [24] 1657 	movx	a,@dptr
      0004A4 F5*26            [12] 1658 	mov	_drawCircle_sloc1_1_0,a
      0004A6 A3               [24] 1659 	inc	dptr
      0004A7 E0               [24] 1660 	movx	a,@dptr
      0004A8 F5*27            [12] 1661 	mov	(_drawCircle_sloc1_1_0 + 1),a
      0004AA 20 E7 18         [24] 1662 	jb	acc.7,00102$
                                   1663 ;	ecen4330_lcd_v3.c:278: y--;
      0004AD 1A               [12] 1664 	dec	r2
      0004AE BA FF 01         [24] 1665 	cjne	r2,#0xff,00123$
      0004B1 1B               [12] 1666 	dec	r3
      0004B2                       1667 00123$:
                                   1668 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      0004B2 74 02            [12] 1669 	mov	a,#0x02
      0004B4 2C               [12] 1670 	add	a,r4
      0004B5 FC               [12] 1671 	mov	r4,a
      0004B6 E4               [12] 1672 	clr	a
      0004B7 3D               [12] 1673 	addc	a,r5
      0004B8 FD               [12] 1674 	mov	r5,a
                                   1675 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      0004B9 90r00r04         [24] 1676 	mov	dptr,#_drawCircle_f_65536_111
      0004BC EC               [12] 1677 	mov	a,r4
      0004BD 25*26            [12] 1678 	add	a,_drawCircle_sloc1_1_0
      0004BF F0               [24] 1679 	movx	@dptr,a
      0004C0 ED               [12] 1680 	mov	a,r5
      0004C1 35*27            [12] 1681 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      0004C3 A3               [24] 1682 	inc	dptr
      0004C4 F0               [24] 1683 	movx	@dptr,a
      0004C5                       1684 00102$:
                                   1685 ;	ecen4330_lcd_v3.c:283: x++;
      0004C5 C0 04            [24] 1686 	push	ar4
      0004C7 C0 05            [24] 1687 	push	ar5
      0004C9 08               [12] 1688 	inc	r0
      0004CA B8 00 01         [24] 1689 	cjne	r0,#0x00,00124$
      0004CD 09               [12] 1690 	inc	r1
      0004CE                       1691 00124$:
                                   1692 ;	ecen4330_lcd_v3.c:284: ddF_x += 2;
      0004CE 74 02            [12] 1693 	mov	a,#0x02
      0004D0 25*24            [12] 1694 	add	a,_drawCircle_sloc0_1_0
      0004D2 F5*24            [12] 1695 	mov	_drawCircle_sloc0_1_0,a
      0004D4 E4               [12] 1696 	clr	a
      0004D5 35*25            [12] 1697 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004D7 F5*25            [12] 1698 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1699 ;	ecen4330_lcd_v3.c:285: f += ddF_x;
      0004D9 90r00r04         [24] 1700 	mov	dptr,#_drawCircle_f_65536_111
      0004DC E0               [24] 1701 	movx	a,@dptr
      0004DD FE               [12] 1702 	mov	r6,a
      0004DE A3               [24] 1703 	inc	dptr
      0004DF E0               [24] 1704 	movx	a,@dptr
      0004E0 FF               [12] 1705 	mov	r7,a
      0004E1 90r00r04         [24] 1706 	mov	dptr,#_drawCircle_f_65536_111
      0004E4 E5*24            [12] 1707 	mov	a,_drawCircle_sloc0_1_0
      0004E6 2E               [12] 1708 	add	a,r6
      0004E7 F0               [24] 1709 	movx	@dptr,a
      0004E8 E5*25            [12] 1710 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004EA 3F               [12] 1711 	addc	a,r7
      0004EB A3               [24] 1712 	inc	dptr
      0004EC F0               [24] 1713 	movx	@dptr,a
                                   1714 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 + x, y0 + y, color);
      0004ED AE*22            [24] 1715 	mov	r6,_drawCircle_x0_65536_110
      0004EF AF*23            [24] 1716 	mov	r7,(_drawCircle_x0_65536_110 + 1)
      0004F1 E8               [12] 1717 	mov	a,r0
      0004F2 2E               [12] 1718 	add	a,r6
      0004F3 FC               [12] 1719 	mov	r4,a
      0004F4 E9               [12] 1720 	mov	a,r1
      0004F5 3F               [12] 1721 	addc	a,r7
      0004F6 FD               [12] 1722 	mov	r5,a
      0004F7 8C*26            [24] 1723 	mov	_drawCircle_sloc1_1_0,r4
      0004F9 8D*27            [24] 1724 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004FB 85*1C*28         [24] 1725 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004FE 85*1D*29         [24] 1726 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      000501 EA               [12] 1727 	mov	a,r2
      000502 25*28            [12] 1728 	add	a,_drawCircle_sloc2_1_0
      000504 FC               [12] 1729 	mov	r4,a
      000505 EB               [12] 1730 	mov	a,r3
      000506 35*29            [12] 1731 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      000508 FD               [12] 1732 	mov	r5,a
      000509 8C*2A            [24] 1733 	mov	_drawCircle_sloc3_1_0,r4
      00050B 8D*2B            [24] 1734 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      00050D 85*2A*18         [24] 1735 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      000510 85*2B*19         [24] 1736 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      000513 85*20*1A         [24] 1737 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000516 85*21*1B         [24] 1738 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000519 85*26 82         [24] 1739 	mov	dpl,_drawCircle_sloc1_1_0
      00051C 85*27 83         [24] 1740 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      00051F C0 07            [24] 1741 	push	ar7
      000521 C0 06            [24] 1742 	push	ar6
      000523 C0 05            [24] 1743 	push	ar5
      000525 C0 04            [24] 1744 	push	ar4
      000527 C0 03            [24] 1745 	push	ar3
      000529 C0 02            [24] 1746 	push	ar2
      00052B C0 01            [24] 1747 	push	ar1
      00052D C0 00            [24] 1748 	push	ar0
      00052F 12r03r86         [24] 1749 	lcall	_drawPixel
      000532 D0 00            [24] 1750 	pop	ar0
      000534 D0 01            [24] 1751 	pop	ar1
      000536 D0 02            [24] 1752 	pop	ar2
      000538 D0 03            [24] 1753 	pop	ar3
      00053A D0 04            [24] 1754 	pop	ar4
      00053C D0 05            [24] 1755 	pop	ar5
      00053E D0 06            [24] 1756 	pop	ar6
      000540 D0 07            [24] 1757 	pop	ar7
                                   1758 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 - x, y0 + y, color);
      000542 EE               [12] 1759 	mov	a,r6
      000543 C3               [12] 1760 	clr	c
      000544 98               [12] 1761 	subb	a,r0
      000545 FC               [12] 1762 	mov	r4,a
      000546 EF               [12] 1763 	mov	a,r7
      000547 99               [12] 1764 	subb	a,r1
      000548 FD               [12] 1765 	mov	r5,a
      000549 8C*2C            [24] 1766 	mov	_drawCircle_sloc4_1_0,r4
      00054B 8D*2D            [24] 1767 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      00054D 85*2A*18         [24] 1768 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      000550 85*2B*19         [24] 1769 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      000553 85*20*1A         [24] 1770 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000556 85*21*1B         [24] 1771 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000559 85*2C 82         [24] 1772 	mov	dpl,_drawCircle_sloc4_1_0
      00055C 85*2D 83         [24] 1773 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00055F C0 07            [24] 1774 	push	ar7
      000561 C0 06            [24] 1775 	push	ar6
      000563 C0 05            [24] 1776 	push	ar5
      000565 C0 04            [24] 1777 	push	ar4
      000567 C0 03            [24] 1778 	push	ar3
      000569 C0 02            [24] 1779 	push	ar2
      00056B C0 01            [24] 1780 	push	ar1
      00056D C0 00            [24] 1781 	push	ar0
      00056F 12r03r86         [24] 1782 	lcall	_drawPixel
      000572 D0 00            [24] 1783 	pop	ar0
      000574 D0 01            [24] 1784 	pop	ar1
      000576 D0 02            [24] 1785 	pop	ar2
      000578 D0 03            [24] 1786 	pop	ar3
      00057A D0 04            [24] 1787 	pop	ar4
      00057C D0 05            [24] 1788 	pop	ar5
                                   1789 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 + x, y0 - y, color);
      00057E E5*28            [12] 1790 	mov	a,_drawCircle_sloc2_1_0
      000580 C3               [12] 1791 	clr	c
      000581 9A               [12] 1792 	subb	a,r2
      000582 FC               [12] 1793 	mov	r4,a
      000583 E5*29            [12] 1794 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000585 9B               [12] 1795 	subb	a,r3
      000586 FD               [12] 1796 	mov	r5,a
      000587 8C*18            [24] 1797 	mov	_drawPixel_PARM_2,r4
      000589 8D*19            [24] 1798 	mov	(_drawPixel_PARM_2 + 1),r5
      00058B 85*20*1A         [24] 1799 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00058E 85*21*1B         [24] 1800 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000591 85*26 82         [24] 1801 	mov	dpl,_drawCircle_sloc1_1_0
      000594 85*27 83         [24] 1802 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000597 C0 05            [24] 1803 	push	ar5
      000599 C0 04            [24] 1804 	push	ar4
      00059B C0 03            [24] 1805 	push	ar3
      00059D C0 02            [24] 1806 	push	ar2
      00059F C0 01            [24] 1807 	push	ar1
      0005A1 C0 00            [24] 1808 	push	ar0
      0005A3 12r03r86         [24] 1809 	lcall	_drawPixel
      0005A6 D0 00            [24] 1810 	pop	ar0
      0005A8 D0 01            [24] 1811 	pop	ar1
      0005AA D0 02            [24] 1812 	pop	ar2
      0005AC D0 03            [24] 1813 	pop	ar3
      0005AE D0 04            [24] 1814 	pop	ar4
      0005B0 D0 05            [24] 1815 	pop	ar5
                                   1816 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 - x, y0 - y, color);
      0005B2 8C*18            [24] 1817 	mov	_drawPixel_PARM_2,r4
      0005B4 8D*19            [24] 1818 	mov	(_drawPixel_PARM_2 + 1),r5
      0005B6 85*20*1A         [24] 1819 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B9 85*21*1B         [24] 1820 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005BC 85*2C 82         [24] 1821 	mov	dpl,_drawCircle_sloc4_1_0
      0005BF 85*2D 83         [24] 1822 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005C2 C0 05            [24] 1823 	push	ar5
      0005C4 C0 04            [24] 1824 	push	ar4
      0005C6 C0 03            [24] 1825 	push	ar3
      0005C8 C0 02            [24] 1826 	push	ar2
      0005CA C0 01            [24] 1827 	push	ar1
      0005CC C0 00            [24] 1828 	push	ar0
      0005CE 12r03r86         [24] 1829 	lcall	_drawPixel
      0005D1 D0 00            [24] 1830 	pop	ar0
      0005D3 D0 01            [24] 1831 	pop	ar1
      0005D5 D0 02            [24] 1832 	pop	ar2
      0005D7 D0 03            [24] 1833 	pop	ar3
      0005D9 D0 04            [24] 1834 	pop	ar4
      0005DB D0 05            [24] 1835 	pop	ar5
      0005DD D0 06            [24] 1836 	pop	ar6
      0005DF D0 07            [24] 1837 	pop	ar7
                                   1838 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 + y, y0 + x, color);
      0005E1 EA               [12] 1839 	mov	a,r2
      0005E2 2E               [12] 1840 	add	a,r6
      0005E3 FC               [12] 1841 	mov	r4,a
      0005E4 EB               [12] 1842 	mov	a,r3
      0005E5 3F               [12] 1843 	addc	a,r7
      0005E6 FD               [12] 1844 	mov	r5,a
      0005E7 8C*2C            [24] 1845 	mov	_drawCircle_sloc4_1_0,r4
      0005E9 8D*2D            [24] 1846 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005EB E8               [12] 1847 	mov	a,r0
      0005EC 25*28            [12] 1848 	add	a,_drawCircle_sloc2_1_0
      0005EE FC               [12] 1849 	mov	r4,a
      0005EF E9               [12] 1850 	mov	a,r1
      0005F0 35*29            [12] 1851 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005F2 FD               [12] 1852 	mov	r5,a
      0005F3 8C*18            [24] 1853 	mov	_drawPixel_PARM_2,r4
      0005F5 8D*19            [24] 1854 	mov	(_drawPixel_PARM_2 + 1),r5
      0005F7 85*20*1A         [24] 1855 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005FA 85*21*1B         [24] 1856 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005FD 85*2C 82         [24] 1857 	mov	dpl,_drawCircle_sloc4_1_0
      000600 85*2D 83         [24] 1858 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      000603 C0 07            [24] 1859 	push	ar7
      000605 C0 06            [24] 1860 	push	ar6
      000607 C0 05            [24] 1861 	push	ar5
      000609 C0 04            [24] 1862 	push	ar4
      00060B C0 03            [24] 1863 	push	ar3
      00060D C0 02            [24] 1864 	push	ar2
      00060F C0 01            [24] 1865 	push	ar1
      000611 C0 00            [24] 1866 	push	ar0
      000613 12r03r86         [24] 1867 	lcall	_drawPixel
      000616 D0 00            [24] 1868 	pop	ar0
      000618 D0 01            [24] 1869 	pop	ar1
      00061A D0 02            [24] 1870 	pop	ar2
      00061C D0 03            [24] 1871 	pop	ar3
      00061E D0 04            [24] 1872 	pop	ar4
      000620 D0 05            [24] 1873 	pop	ar5
      000622 D0 06            [24] 1874 	pop	ar6
      000624 D0 07            [24] 1875 	pop	ar7
                                   1876 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 - y, y0 + x, color);
      000626 EE               [12] 1877 	mov	a,r6
      000627 C3               [12] 1878 	clr	c
      000628 9A               [12] 1879 	subb	a,r2
      000629 FE               [12] 1880 	mov	r6,a
      00062A EF               [12] 1881 	mov	a,r7
      00062B 9B               [12] 1882 	subb	a,r3
      00062C FF               [12] 1883 	mov	r7,a
      00062D 8C*18            [24] 1884 	mov	_drawPixel_PARM_2,r4
      00062F 8D*19            [24] 1885 	mov	(_drawPixel_PARM_2 + 1),r5
      000631 85*20*1A         [24] 1886 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000634 85*21*1B         [24] 1887 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000637 8E 82            [24] 1888 	mov	dpl,r6
      000639 8F 83            [24] 1889 	mov	dph,r7
      00063B C0 07            [24] 1890 	push	ar7
      00063D C0 06            [24] 1891 	push	ar6
      00063F C0 05            [24] 1892 	push	ar5
      000641 C0 04            [24] 1893 	push	ar4
      000643 C0 03            [24] 1894 	push	ar3
      000645 C0 02            [24] 1895 	push	ar2
      000647 C0 01            [24] 1896 	push	ar1
      000649 C0 00            [24] 1897 	push	ar0
      00064B 12r03r86         [24] 1898 	lcall	_drawPixel
      00064E D0 00            [24] 1899 	pop	ar0
      000650 D0 01            [24] 1900 	pop	ar1
      000652 D0 02            [24] 1901 	pop	ar2
      000654 D0 03            [24] 1902 	pop	ar3
      000656 D0 04            [24] 1903 	pop	ar4
      000658 D0 05            [24] 1904 	pop	ar5
                                   1905 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 + y, y0 - x, color);
      00065A E5*28            [12] 1906 	mov	a,_drawCircle_sloc2_1_0
      00065C C3               [12] 1907 	clr	c
      00065D 98               [12] 1908 	subb	a,r0
      00065E FC               [12] 1909 	mov	r4,a
      00065F E5*29            [12] 1910 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000661 99               [12] 1911 	subb	a,r1
      000662 FD               [12] 1912 	mov	r5,a
      000663 8C*18            [24] 1913 	mov	_drawPixel_PARM_2,r4
      000665 8D*19            [24] 1914 	mov	(_drawPixel_PARM_2 + 1),r5
      000667 85*20*1A         [24] 1915 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00066A 85*21*1B         [24] 1916 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00066D 85*2C 82         [24] 1917 	mov	dpl,_drawCircle_sloc4_1_0
      000670 85*2D 83         [24] 1918 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      000673 C0 05            [24] 1919 	push	ar5
      000675 C0 04            [24] 1920 	push	ar4
      000677 C0 03            [24] 1921 	push	ar3
      000679 C0 02            [24] 1922 	push	ar2
      00067B C0 01            [24] 1923 	push	ar1
      00067D C0 00            [24] 1924 	push	ar0
      00067F 12r03r86         [24] 1925 	lcall	_drawPixel
      000682 D0 00            [24] 1926 	pop	ar0
      000684 D0 01            [24] 1927 	pop	ar1
      000686 D0 02            [24] 1928 	pop	ar2
      000688 D0 03            [24] 1929 	pop	ar3
      00068A D0 04            [24] 1930 	pop	ar4
      00068C D0 05            [24] 1931 	pop	ar5
      00068E D0 06            [24] 1932 	pop	ar6
      000690 D0 07            [24] 1933 	pop	ar7
                                   1934 ;	ecen4330_lcd_v3.c:294: drawPixel(x0 - y, y0 - x, color);
      000692 8C*18            [24] 1935 	mov	_drawPixel_PARM_2,r4
      000694 8D*19            [24] 1936 	mov	(_drawPixel_PARM_2 + 1),r5
      000696 85*20*1A         [24] 1937 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000699 85*21*1B         [24] 1938 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00069C 8E 82            [24] 1939 	mov	dpl,r6
      00069E 8F 83            [24] 1940 	mov	dph,r7
      0006A0 C0 05            [24] 1941 	push	ar5
      0006A2 C0 04            [24] 1942 	push	ar4
      0006A4 C0 03            [24] 1943 	push	ar3
      0006A6 C0 02            [24] 1944 	push	ar2
      0006A8 C0 01            [24] 1945 	push	ar1
      0006AA C0 00            [24] 1946 	push	ar0
      0006AC 12r03r86         [24] 1947 	lcall	_drawPixel
      0006AF D0 00            [24] 1948 	pop	ar0
      0006B1 D0 01            [24] 1949 	pop	ar1
      0006B3 D0 02            [24] 1950 	pop	ar2
      0006B5 D0 03            [24] 1951 	pop	ar3
      0006B7 D0 04            [24] 1952 	pop	ar4
      0006B9 D0 05            [24] 1953 	pop	ar5
      0006BB D0 05            [24] 1954 	pop	ar5
      0006BD D0 04            [24] 1955 	pop	ar4
                                   1956 ;	ecen4330_lcd_v3.c:296: }
      0006BF 02r04r90         [24] 1957 	ljmp	00103$
                                   1958 ;------------------------------------------------------------
                                   1959 ;Allocation info for local variables in function 'testCircles'
                                   1960 ;------------------------------------------------------------
                                   1961 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1962 ;radius                    Allocated with name '_testCircles_radius_65536_114'
                                   1963 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1964 ;x                         Allocated with name '_testCircles_x_65536_115'
                                   1965 ;y                         Allocated with name '_testCircles_y_65536_115'
                                   1966 ;r2                        Allocated with name '_testCircles_r2_65536_115'
                                   1967 ;w                         Allocated with name '_testCircles_w_65536_115'
                                   1968 ;h                         Allocated with name '_testCircles_h_65536_115'
                                   1969 ;------------------------------------------------------------
                                   1970 ;	ecen4330_lcd_v3.c:304: void testCircles (uint8_t radius, uint16_t color) {
                                   1971 ;	-----------------------------------------
                                   1972 ;	 function testCircles
                                   1973 ;	-----------------------------------------
      0006C2                       1974 _testCircles:
      0006C2 85 82*30         [24] 1975 	mov	_testCircles_radius_65536_114,dpl
                                   1976 ;	ecen4330_lcd_v3.c:305: __xdata int x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006C5 AD*30            [24] 1977 	mov	r5,_testCircles_radius_65536_114
      0006C7 7E 00            [12] 1978 	mov	r6,#0x00
      0006C9 ED               [12] 1979 	mov	a,r5
      0006CA 2D               [12] 1980 	add	a,r5
      0006CB FB               [12] 1981 	mov	r3,a
      0006CC EE               [12] 1982 	mov	a,r6
      0006CD 33               [12] 1983 	rlc	a
      0006CE FC               [12] 1984 	mov	r4,a
      0006CF 90r00r00         [24] 1985 	mov	dptr,#__width
      0006D2 E0               [24] 1986 	movx	a,@dptr
      0006D3 F9               [12] 1987 	mov	r1,a
      0006D4 A3               [24] 1988 	inc	dptr
      0006D5 E0               [24] 1989 	movx	a,@dptr
      0006D6 FA               [12] 1990 	mov	r2,a
      0006D7 ED               [12] 1991 	mov	a,r5
      0006D8 29               [12] 1992 	add	a,r1
      0006D9 F9               [12] 1993 	mov	r1,a
      0006DA EE               [12] 1994 	mov	a,r6
      0006DB 3A               [12] 1995 	addc	a,r2
      0006DC FA               [12] 1996 	mov	r2,a
      0006DD 90r00r02         [24] 1997 	mov	dptr,#__height
      0006E0 E0               [24] 1998 	movx	a,@dptr
      0006E1 FF               [12] 1999 	mov	r7,a
      0006E2 A3               [24] 2000 	inc	dptr
      0006E3 E0               [24] 2001 	movx	a,@dptr
      0006E4 F8               [12] 2002 	mov	r0,a
      0006E5 ED               [12] 2003 	mov	a,r5
      0006E6 2F               [12] 2004 	add	a,r7
      0006E7 FF               [12] 2005 	mov	r7,a
      0006E8 EE               [12] 2006 	mov	a,r6
      0006E9 38               [12] 2007 	addc	a,r0
      0006EA FE               [12] 2008 	mov	r6,a
                                   2009 ;	ecen4330_lcd_v3.c:307: for (x = 0; x < w; x += r2) {
      0006EB 90r00r06         [24] 2010 	mov	dptr,#_testCircles_x_65536_115
      0006EE E4               [12] 2011 	clr	a
      0006EF F0               [24] 2012 	movx	@dptr,a
      0006F0 A3               [24] 2013 	inc	dptr
      0006F1 F0               [24] 2014 	movx	@dptr,a
      0006F2                       2015 00107$:
      0006F2 90r00r06         [24] 2016 	mov	dptr,#_testCircles_x_65536_115
      0006F5 E0               [24] 2017 	movx	a,@dptr
      0006F6 F8               [12] 2018 	mov	r0,a
      0006F7 A3               [24] 2019 	inc	dptr
      0006F8 E0               [24] 2020 	movx	a,@dptr
      0006F9 FD               [12] 2021 	mov	r5,a
      0006FA C3               [12] 2022 	clr	c
      0006FB E8               [12] 2023 	mov	a,r0
      0006FC 99               [12] 2024 	subb	a,r1
      0006FD ED               [12] 2025 	mov	a,r5
      0006FE 64 80            [12] 2026 	xrl	a,#0x80
      000700 8A F0            [24] 2027 	mov	b,r2
      000702 63 F0 80         [24] 2028 	xrl	b,#0x80
      000705 95 F0            [12] 2029 	subb	a,b
      000707 40 01            [24] 2030 	jc	00127$
      000709 22               [24] 2031 	ret
      00070A                       2032 00127$:
                                   2033 ;	ecen4330_lcd_v3.c:308: for (y = 0; y < h; y += r2) {
      00070A 90r00r08         [24] 2034 	mov	dptr,#_testCircles_y_65536_115
      00070D E4               [12] 2035 	clr	a
      00070E F0               [24] 2036 	movx	@dptr,a
      00070F A3               [24] 2037 	inc	dptr
      000710 F0               [24] 2038 	movx	@dptr,a
      000711                       2039 00104$:
      000711 90r00r08         [24] 2040 	mov	dptr,#_testCircles_y_65536_115
      000714 E0               [24] 2041 	movx	a,@dptr
      000715 F5*31            [12] 2042 	mov	_testCircles_sloc0_1_0,a
      000717 A3               [24] 2043 	inc	dptr
      000718 E0               [24] 2044 	movx	a,@dptr
      000719 F5*32            [12] 2045 	mov	(_testCircles_sloc0_1_0 + 1),a
      00071B C3               [12] 2046 	clr	c
      00071C E5*31            [12] 2047 	mov	a,_testCircles_sloc0_1_0
      00071E 9F               [12] 2048 	subb	a,r7
      00071F E5*32            [12] 2049 	mov	a,(_testCircles_sloc0_1_0 + 1)
      000721 64 80            [12] 2050 	xrl	a,#0x80
      000723 8E F0            [24] 2051 	mov	b,r6
      000725 63 F0 80         [24] 2052 	xrl	b,#0x80
      000728 95 F0            [12] 2053 	subb	a,b
      00072A 50 47            [24] 2054 	jnc	00108$
                                   2055 ;	ecen4330_lcd_v3.c:309: drawCircle(x, y, radius, color);
      00072C 88 82            [24] 2056 	mov	dpl,r0
      00072E 8D 83            [24] 2057 	mov	dph,r5
      000730 85*31*1C         [24] 2058 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      000733 85*32*1D         [24] 2059 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000736 85*30*1E         [24] 2060 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_114
      000739 75*1F 00         [24] 2061 	mov	(_drawCircle_PARM_3 + 1),#0x00
      00073C 85*2E*20         [24] 2062 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00073F 85*2F*21         [24] 2063 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000742 C0 07            [24] 2064 	push	ar7
      000744 C0 06            [24] 2065 	push	ar6
      000746 C0 05            [24] 2066 	push	ar5
      000748 C0 04            [24] 2067 	push	ar4
      00074A C0 03            [24] 2068 	push	ar3
      00074C C0 02            [24] 2069 	push	ar2
      00074E C0 01            [24] 2070 	push	ar1
      000750 C0 00            [24] 2071 	push	ar0
      000752 12r03rDD         [24] 2072 	lcall	_drawCircle
      000755 D0 00            [24] 2073 	pop	ar0
      000757 D0 01            [24] 2074 	pop	ar1
      000759 D0 02            [24] 2075 	pop	ar2
      00075B D0 03            [24] 2076 	pop	ar3
      00075D D0 04            [24] 2077 	pop	ar4
      00075F D0 05            [24] 2078 	pop	ar5
      000761 D0 06            [24] 2079 	pop	ar6
      000763 D0 07            [24] 2080 	pop	ar7
                                   2081 ;	ecen4330_lcd_v3.c:308: for (y = 0; y < h; y += r2) {
      000765 90r00r08         [24] 2082 	mov	dptr,#_testCircles_y_65536_115
      000768 EB               [12] 2083 	mov	a,r3
      000769 25*31            [12] 2084 	add	a,_testCircles_sloc0_1_0
      00076B F0               [24] 2085 	movx	@dptr,a
      00076C EC               [12] 2086 	mov	a,r4
      00076D 35*32            [12] 2087 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00076F A3               [24] 2088 	inc	dptr
      000770 F0               [24] 2089 	movx	@dptr,a
      000771 80 9E            [24] 2090 	sjmp	00104$
      000773                       2091 00108$:
                                   2092 ;	ecen4330_lcd_v3.c:307: for (x = 0; x < w; x += r2) {
      000773 90r00r06         [24] 2093 	mov	dptr,#_testCircles_x_65536_115
      000776 E0               [24] 2094 	movx	a,@dptr
      000777 F8               [12] 2095 	mov	r0,a
      000778 A3               [24] 2096 	inc	dptr
      000779 E0               [24] 2097 	movx	a,@dptr
      00077A FD               [12] 2098 	mov	r5,a
      00077B 90r00r06         [24] 2099 	mov	dptr,#_testCircles_x_65536_115
      00077E EB               [12] 2100 	mov	a,r3
      00077F 28               [12] 2101 	add	a,r0
      000780 F0               [24] 2102 	movx	@dptr,a
      000781 EC               [12] 2103 	mov	a,r4
      000782 3D               [12] 2104 	addc	a,r5
      000783 A3               [24] 2105 	inc	dptr
      000784 F0               [24] 2106 	movx	@dptr,a
                                   2107 ;	ecen4330_lcd_v3.c:312: }
      000785 02r06rF2         [24] 2108 	ljmp	00107$
                                   2109 ;------------------------------------------------------------
                                   2110 ;Allocation info for local variables in function 'fillRect'
                                   2111 ;------------------------------------------------------------
                                   2112 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2113 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2114 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2115 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2116 ;x                         Allocated to registers 
                                   2117 ;------------------------------------------------------------
                                   2118 ;	ecen4330_lcd_v3.c:314: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2119 ;	-----------------------------------------
                                   2120 ;	 function fillRect
                                   2121 ;	-----------------------------------------
      000788                       2122 _fillRect:
      000788 AE 82            [24] 2123 	mov	r6,dpl
      00078A AF 83            [24] 2124 	mov	r7,dph
                                   2125 ;	ecen4330_lcd_v3.c:315: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT)) {
      00078C 8E 04            [24] 2126 	mov	ar4,r6
      00078E 8F 05            [24] 2127 	mov	ar5,r7
      000790 C3               [12] 2128 	clr	c
      000791 EC               [12] 2129 	mov	a,r4
      000792 94 F0            [12] 2130 	subb	a,#0xf0
      000794 ED               [12] 2131 	mov	a,r5
      000795 94 00            [12] 2132 	subb	a,#0x00
      000797 50 0D            [24] 2133 	jnc	00101$
      000799 AC*33            [24] 2134 	mov	r4,_fillRect_PARM_2
      00079B AD*34            [24] 2135 	mov	r5,(_fillRect_PARM_2 + 1)
      00079D C3               [12] 2136 	clr	c
      00079E EC               [12] 2137 	mov	a,r4
      00079F 94 40            [12] 2138 	subb	a,#0x40
      0007A1 ED               [12] 2139 	mov	a,r5
      0007A2 94 01            [12] 2140 	subb	a,#0x01
      0007A4 40 01            [24] 2141 	jc	00102$
      0007A6                       2142 00101$:
                                   2143 ;	ecen4330_lcd_v3.c:316: return;
      0007A6 22               [24] 2144 	ret
      0007A7                       2145 00102$:
                                   2146 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH) {
      0007A7 E5*35            [12] 2147 	mov	a,_fillRect_PARM_3
      0007A9 2E               [12] 2148 	add	a,r6
      0007AA FC               [12] 2149 	mov	r4,a
      0007AB E5*36            [12] 2150 	mov	a,(_fillRect_PARM_3 + 1)
      0007AD 3F               [12] 2151 	addc	a,r7
      0007AE FD               [12] 2152 	mov	r5,a
      0007AF 1C               [12] 2153 	dec	r4
      0007B0 BC FF 01         [24] 2154 	cjne	r4,#0xff,00161$
      0007B3 1D               [12] 2155 	dec	r5
      0007B4                       2156 00161$:
      0007B4 C3               [12] 2157 	clr	c
      0007B5 EC               [12] 2158 	mov	a,r4
      0007B6 94 F0            [12] 2159 	subb	a,#0xf0
      0007B8 ED               [12] 2160 	mov	a,r5
      0007B9 94 00            [12] 2161 	subb	a,#0x00
      0007BB 40 0A            [24] 2162 	jc	00105$
                                   2163 ;	ecen4330_lcd_v3.c:320: w = TFTWIDTH-x;
      0007BD 74 F0            [12] 2164 	mov	a,#0xf0
      0007BF C3               [12] 2165 	clr	c
      0007C0 9E               [12] 2166 	subb	a,r6
      0007C1 F5*35            [12] 2167 	mov	_fillRect_PARM_3,a
      0007C3 E4               [12] 2168 	clr	a
      0007C4 9F               [12] 2169 	subb	a,r7
      0007C5 F5*36            [12] 2170 	mov	(_fillRect_PARM_3 + 1),a
      0007C7                       2171 00105$:
                                   2172 ;	ecen4330_lcd_v3.c:323: if ((y+h-1) >= TFTHEIGHT) {
      0007C7 E5*37            [12] 2173 	mov	a,_fillRect_PARM_4
      0007C9 25*33            [12] 2174 	add	a,_fillRect_PARM_2
      0007CB FC               [12] 2175 	mov	r4,a
      0007CC E5*38            [12] 2176 	mov	a,(_fillRect_PARM_4 + 1)
      0007CE 35*34            [12] 2177 	addc	a,(_fillRect_PARM_2 + 1)
      0007D0 FD               [12] 2178 	mov	r5,a
      0007D1 1C               [12] 2179 	dec	r4
      0007D2 BC FF 01         [24] 2180 	cjne	r4,#0xff,00163$
      0007D5 1D               [12] 2181 	dec	r5
      0007D6                       2182 00163$:
      0007D6 C3               [12] 2183 	clr	c
      0007D7 EC               [12] 2184 	mov	a,r4
      0007D8 94 40            [12] 2185 	subb	a,#0x40
      0007DA ED               [12] 2186 	mov	a,r5
      0007DB 94 01            [12] 2187 	subb	a,#0x01
      0007DD 40 0D            [24] 2188 	jc	00107$
                                   2189 ;	ecen4330_lcd_v3.c:324: h = TFTHEIGHT-y;
      0007DF 74 40            [12] 2190 	mov	a,#0x40
      0007E1 C3               [12] 2191 	clr	c
      0007E2 95*33            [12] 2192 	subb	a,_fillRect_PARM_2
      0007E4 F5*37            [12] 2193 	mov	_fillRect_PARM_4,a
      0007E6 74 01            [12] 2194 	mov	a,#0x01
      0007E8 95*34            [12] 2195 	subb	a,(_fillRect_PARM_2 + 1)
      0007EA F5*38            [12] 2196 	mov	(_fillRect_PARM_4 + 1),a
      0007EC                       2197 00107$:
                                   2198 ;	ecen4330_lcd_v3.c:327: setAddress(x, y, x + w - 1, y + h - 1);
      0007EC E5*35            [12] 2199 	mov	a,_fillRect_PARM_3
      0007EE 2E               [12] 2200 	add	a,r6
      0007EF FC               [12] 2201 	mov	r4,a
      0007F0 E5*36            [12] 2202 	mov	a,(_fillRect_PARM_3 + 1)
      0007F2 3F               [12] 2203 	addc	a,r7
      0007F3 FD               [12] 2204 	mov	r5,a
      0007F4 1C               [12] 2205 	dec	r4
      0007F5 BC FF 01         [24] 2206 	cjne	r4,#0xff,00165$
      0007F8 1D               [12] 2207 	dec	r5
      0007F9                       2208 00165$:
      0007F9 8C*02            [24] 2209 	mov	_setAddress_PARM_3,r4
      0007FB 8D*03            [24] 2210 	mov	(_setAddress_PARM_3 + 1),r5
      0007FD E5*37            [12] 2211 	mov	a,_fillRect_PARM_4
      0007FF 25*33            [12] 2212 	add	a,_fillRect_PARM_2
      000801 FC               [12] 2213 	mov	r4,a
      000802 E5*38            [12] 2214 	mov	a,(_fillRect_PARM_4 + 1)
      000804 35*34            [12] 2215 	addc	a,(_fillRect_PARM_2 + 1)
      000806 FD               [12] 2216 	mov	r5,a
      000807 1C               [12] 2217 	dec	r4
      000808 BC FF 01         [24] 2218 	cjne	r4,#0xff,00166$
      00080B 1D               [12] 2219 	dec	r5
      00080C                       2220 00166$:
      00080C 8C*04            [24] 2221 	mov	_setAddress_PARM_4,r4
      00080E 8D*05            [24] 2222 	mov	(_setAddress_PARM_4 + 1),r5
      000810 85*33*00         [24] 2223 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000813 85*34*01         [24] 2224 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000816 8E 82            [24] 2225 	mov	dpl,r6
      000818 8F 83            [24] 2226 	mov	dph,r7
      00081A 12r01r9B         [24] 2227 	lcall	_setAddress
                                   2228 ;	ecen4330_lcd_v3.c:329: write8Reg(0x2C);
                                   2229 ;	assignBit
      00081D C2 B5            [12] 2230 	clr	_P3_5
                                   2231 ;	assignBit
      00081F D2 B4            [12] 2232 	setb	_P3_4
      000821 85*04 82         [24] 2233 	mov	dpl,_lcd_address
      000824 85*05 83         [24] 2234 	mov	dph,(_lcd_address + 1)
      000827 74 2C            [12] 2235 	mov	a,#0x2c
      000829 F0               [24] 2236 	movx	@dptr,a
                                   2237 ;	assignBit
      00082A C2 B4            [12] 2238 	clr	_P3_4
                                   2239 ;	ecen4330_lcd_v3.c:330: CD = 1;
                                   2240 ;	assignBit
      00082C D2 B5            [12] 2241 	setb	_P3_5
                                   2242 ;	ecen4330_lcd_v3.c:332: for (y = h; y > 0; y--) {
      00082E AF*3A            [24] 2243 	mov	r7,(_fillRect_PARM_5 + 1)
      000830 AD*37            [24] 2244 	mov	r5,_fillRect_PARM_4
      000832 AE*38            [24] 2245 	mov	r6,(_fillRect_PARM_4 + 1)
      000834                       2246 00114$:
      000834 ED               [12] 2247 	mov	a,r5
      000835 4E               [12] 2248 	orl	a,r6
      000836 60 30            [24] 2249 	jz	00116$
                                   2250 ;	ecen4330_lcd_v3.c:333: for(x = w; x > 0; x--) {
      000838 AB*35            [24] 2251 	mov	r3,_fillRect_PARM_3
      00083A AC*36            [24] 2252 	mov	r4,(_fillRect_PARM_3 + 1)
      00083C                       2253 00111$:
      00083C EB               [12] 2254 	mov	a,r3
      00083D 4C               [12] 2255 	orl	a,r4
      00083E 60 21            [24] 2256 	jz	00115$
                                   2257 ;	ecen4330_lcd_v3.c:334: write8(color>>8); write8(color);
                                   2258 ;	assignBit
      000840 D2 B4            [12] 2259 	setb	_P3_4
      000842 85*04 82         [24] 2260 	mov	dpl,_lcd_address
      000845 85*05 83         [24] 2261 	mov	dph,(_lcd_address + 1)
      000848 EF               [12] 2262 	mov	a,r7
      000849 F0               [24] 2263 	movx	@dptr,a
                                   2264 ;	assignBit
      00084A C2 B4            [12] 2265 	clr	_P3_4
                                   2266 ;	assignBit
      00084C D2 B4            [12] 2267 	setb	_P3_4
      00084E 85*04 82         [24] 2268 	mov	dpl,_lcd_address
      000851 85*05 83         [24] 2269 	mov	dph,(_lcd_address + 1)
      000854 E5*39            [12] 2270 	mov	a,_fillRect_PARM_5
      000856 FA               [12] 2271 	mov	r2,a
      000857 F0               [24] 2272 	movx	@dptr,a
                                   2273 ;	assignBit
      000858 C2 B4            [12] 2274 	clr	_P3_4
                                   2275 ;	ecen4330_lcd_v3.c:333: for(x = w; x > 0; x--) {
      00085A 1B               [12] 2276 	dec	r3
      00085B BB FF 01         [24] 2277 	cjne	r3,#0xff,00169$
      00085E 1C               [12] 2278 	dec	r4
      00085F                       2279 00169$:
      00085F 80 DB            [24] 2280 	sjmp	00111$
      000861                       2281 00115$:
                                   2282 ;	ecen4330_lcd_v3.c:332: for (y = h; y > 0; y--) {
      000861 1D               [12] 2283 	dec	r5
      000862 BD FF 01         [24] 2284 	cjne	r5,#0xff,00170$
      000865 1E               [12] 2285 	dec	r6
      000866                       2286 00170$:
      000866 80 CC            [24] 2287 	sjmp	00114$
      000868                       2288 00116$:
                                   2289 ;	ecen4330_lcd_v3.c:337: }
      000868 22               [24] 2290 	ret
                                   2291 ;------------------------------------------------------------
                                   2292 ;Allocation info for local variables in function 'fillScreen'
                                   2293 ;------------------------------------------------------------
                                   2294 ;Color                     Allocated to registers r6 r7 
                                   2295 ;len                       Allocated with name '_fillScreen_len_65536_134'
                                   2296 ;blocks                    Allocated with name '_fillScreen_blocks_65536_134'
                                   2297 ;i                         Allocated with name '_fillScreen_i_65536_134'
                                   2298 ;hi                        Allocated with name '_fillScreen_hi_65536_134'
                                   2299 ;lo                        Allocated with name '_fillScreen_lo_65536_134'
                                   2300 ;------------------------------------------------------------
                                   2301 ;	ecen4330_lcd_v3.c:344: void fillScreen (uint16_t Color) {
                                   2302 ;	-----------------------------------------
                                   2303 ;	 function fillScreen
                                   2304 ;	-----------------------------------------
      000869                       2305 _fillScreen:
      000869 AE 82            [24] 2306 	mov	r6,dpl
      00086B AF 83            [24] 2307 	mov	r7,dph
                                   2308 ;	ecen4330_lcd_v3.c:349: __xdata uint8_t  i, hi = Color >> 8,
      00086D 8F 05            [24] 2309 	mov	ar5,r7
                                   2310 ;	ecen4330_lcd_v3.c:350: lo = Color;
                                   2311 ;	ecen4330_lcd_v3.c:353: setAddress(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
      00086F E4               [12] 2312 	clr	a
      000870 F5*00            [12] 2313 	mov	_setAddress_PARM_2,a
      000872 F5*01            [12] 2314 	mov	(_setAddress_PARM_2 + 1),a
      000874 75*02 EF         [24] 2315 	mov	_setAddress_PARM_3,#0xef
                                   2316 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000877 F5*03            [12] 2317 	mov	(_setAddress_PARM_3 + 1),a
      000879 75*04 3F         [24] 2318 	mov	_setAddress_PARM_4,#0x3f
      00087C 75*05 01         [24] 2319 	mov	(_setAddress_PARM_4 + 1),#0x01
      00087F 90 00 00         [24] 2320 	mov	dptr,#0x0000
      000882 C0 06            [24] 2321 	push	ar6
      000884 C0 05            [24] 2322 	push	ar5
      000886 12r01r9B         [24] 2323 	lcall	_setAddress
      000889 D0 05            [24] 2324 	pop	ar5
      00088B D0 06            [24] 2325 	pop	ar6
                                   2326 ;	ecen4330_lcd_v3.c:355: write8Reg(0x2C);
                                   2327 ;	assignBit
      00088D C2 B5            [12] 2328 	clr	_P3_5
                                   2329 ;	assignBit
      00088F D2 B4            [12] 2330 	setb	_P3_4
      000891 85*04 82         [24] 2331 	mov	dpl,_lcd_address
      000894 85*05 83         [24] 2332 	mov	dph,(_lcd_address + 1)
      000897 74 2C            [12] 2333 	mov	a,#0x2c
      000899 F0               [24] 2334 	movx	@dptr,a
                                   2335 ;	assignBit
      00089A C2 B4            [12] 2336 	clr	_P3_4
                                   2337 ;	ecen4330_lcd_v3.c:356: CD = 1;
                                   2338 ;	assignBit
      00089C D2 B5            [12] 2339 	setb	_P3_5
                                   2340 ;	ecen4330_lcd_v3.c:357: write8(hi);
                                   2341 ;	assignBit
      00089E D2 B4            [12] 2342 	setb	_P3_4
      0008A0 85*04 82         [24] 2343 	mov	dpl,_lcd_address
      0008A3 85*05 83         [24] 2344 	mov	dph,(_lcd_address + 1)
      0008A6 ED               [12] 2345 	mov	a,r5
      0008A7 F0               [24] 2346 	movx	@dptr,a
                                   2347 ;	assignBit
      0008A8 C2 B4            [12] 2348 	clr	_P3_4
                                   2349 ;	ecen4330_lcd_v3.c:358: write8(lo);
                                   2350 ;	assignBit
      0008AA D2 B4            [12] 2351 	setb	_P3_4
      0008AC 85*04 82         [24] 2352 	mov	dpl,_lcd_address
      0008AF 85*05 83         [24] 2353 	mov	dph,(_lcd_address + 1)
      0008B2 EE               [12] 2354 	mov	a,r6
      0008B3 F0               [24] 2355 	movx	@dptr,a
                                   2356 ;	assignBit
      0008B4 C2 B4            [12] 2357 	clr	_P3_4
                                   2358 ;	ecen4330_lcd_v3.c:361: while (blocks--) {
      0008B6 7C B0            [12] 2359 	mov	r4,#0xb0
      0008B8 7F 04            [12] 2360 	mov	r7,#0x04
      0008BA                       2361 00104$:
      0008BA 8C 02            [24] 2362 	mov	ar2,r4
      0008BC 8F 03            [24] 2363 	mov	ar3,r7
      0008BE 1C               [12] 2364 	dec	r4
      0008BF BC FF 01         [24] 2365 	cjne	r4,#0xff,00140$
      0008C2 1F               [12] 2366 	dec	r7
      0008C3                       2367 00140$:
      0008C3 EA               [12] 2368 	mov	a,r2
      0008C4 4B               [12] 2369 	orl	a,r3
      0008C5 60 66            [24] 2370 	jz	00106$
                                   2371 ;	ecen4330_lcd_v3.c:364: do {
      0008C7 7B 10            [12] 2372 	mov	r3,#0x10
      0008C9                       2373 00101$:
                                   2374 ;	ecen4330_lcd_v3.c:365: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2375 ;	assignBit
      0008C9 D2 B4            [12] 2376 	setb	_P3_4
      0008CB 85*04 82         [24] 2377 	mov	dpl,_lcd_address
      0008CE 85*05 83         [24] 2378 	mov	dph,(_lcd_address + 1)
      0008D1 ED               [12] 2379 	mov	a,r5
      0008D2 F0               [24] 2380 	movx	@dptr,a
                                   2381 ;	assignBit
      0008D3 C2 B4            [12] 2382 	clr	_P3_4
                                   2383 ;	assignBit
      0008D5 D2 B4            [12] 2384 	setb	_P3_4
      0008D7 85*04 82         [24] 2385 	mov	dpl,_lcd_address
      0008DA 85*05 83         [24] 2386 	mov	dph,(_lcd_address + 1)
      0008DD EE               [12] 2387 	mov	a,r6
      0008DE F0               [24] 2388 	movx	@dptr,a
                                   2389 ;	assignBit
      0008DF C2 B4            [12] 2390 	clr	_P3_4
                                   2391 ;	assignBit
      0008E1 D2 B4            [12] 2392 	setb	_P3_4
      0008E3 85*04 82         [24] 2393 	mov	dpl,_lcd_address
      0008E6 85*05 83         [24] 2394 	mov	dph,(_lcd_address + 1)
      0008E9 ED               [12] 2395 	mov	a,r5
      0008EA F0               [24] 2396 	movx	@dptr,a
                                   2397 ;	assignBit
      0008EB C2 B4            [12] 2398 	clr	_P3_4
                                   2399 ;	assignBit
      0008ED D2 B4            [12] 2400 	setb	_P3_4
      0008EF 85*04 82         [24] 2401 	mov	dpl,_lcd_address
      0008F2 85*05 83         [24] 2402 	mov	dph,(_lcd_address + 1)
      0008F5 EE               [12] 2403 	mov	a,r6
      0008F6 F0               [24] 2404 	movx	@dptr,a
                                   2405 ;	assignBit
      0008F7 C2 B4            [12] 2406 	clr	_P3_4
                                   2407 ;	ecen4330_lcd_v3.c:366: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2408 ;	assignBit
      0008F9 D2 B4            [12] 2409 	setb	_P3_4
      0008FB 85*04 82         [24] 2410 	mov	dpl,_lcd_address
      0008FE 85*05 83         [24] 2411 	mov	dph,(_lcd_address + 1)
      000901 ED               [12] 2412 	mov	a,r5
      000902 F0               [24] 2413 	movx	@dptr,a
                                   2414 ;	assignBit
      000903 C2 B4            [12] 2415 	clr	_P3_4
                                   2416 ;	assignBit
      000905 D2 B4            [12] 2417 	setb	_P3_4
      000907 85*04 82         [24] 2418 	mov	dpl,_lcd_address
      00090A 85*05 83         [24] 2419 	mov	dph,(_lcd_address + 1)
      00090D EE               [12] 2420 	mov	a,r6
      00090E F0               [24] 2421 	movx	@dptr,a
                                   2422 ;	assignBit
      00090F C2 B4            [12] 2423 	clr	_P3_4
                                   2424 ;	assignBit
      000911 D2 B4            [12] 2425 	setb	_P3_4
      000913 85*04 82         [24] 2426 	mov	dpl,_lcd_address
      000916 85*05 83         [24] 2427 	mov	dph,(_lcd_address + 1)
      000919 ED               [12] 2428 	mov	a,r5
      00091A F0               [24] 2429 	movx	@dptr,a
                                   2430 ;	assignBit
      00091B C2 B4            [12] 2431 	clr	_P3_4
                                   2432 ;	assignBit
      00091D D2 B4            [12] 2433 	setb	_P3_4
      00091F 85*04 82         [24] 2434 	mov	dpl,_lcd_address
      000922 85*05 83         [24] 2435 	mov	dph,(_lcd_address + 1)
      000925 EE               [12] 2436 	mov	a,r6
      000926 F0               [24] 2437 	movx	@dptr,a
                                   2438 ;	assignBit
      000927 C2 B4            [12] 2439 	clr	_P3_4
                                   2440 ;	ecen4330_lcd_v3.c:367: } while(--i);
      000929 DB 9E            [24] 2441 	djnz	r3,00101$
      00092B 80 8D            [24] 2442 	sjmp	00104$
      00092D                       2443 00106$:
                                   2444 ;	ecen4330_lcd_v3.c:370: for (i = (char)len & 63; i--; ) {
      00092D 7F 3F            [12] 2445 	mov	r7,#0x3f
      00092F                       2446 00109$:
      00092F 8F 04            [24] 2447 	mov	ar4,r7
      000931 1F               [12] 2448 	dec	r7
      000932 EC               [12] 2449 	mov	a,r4
      000933 60 1A            [24] 2450 	jz	00111$
                                   2451 ;	ecen4330_lcd_v3.c:371: write8(hi);
                                   2452 ;	assignBit
      000935 D2 B4            [12] 2453 	setb	_P3_4
      000937 85*04 82         [24] 2454 	mov	dpl,_lcd_address
      00093A 85*05 83         [24] 2455 	mov	dph,(_lcd_address + 1)
      00093D ED               [12] 2456 	mov	a,r5
      00093E F0               [24] 2457 	movx	@dptr,a
                                   2458 ;	assignBit
      00093F C2 B4            [12] 2459 	clr	_P3_4
                                   2460 ;	ecen4330_lcd_v3.c:372: write8(lo);
                                   2461 ;	assignBit
      000941 D2 B4            [12] 2462 	setb	_P3_4
      000943 85*04 82         [24] 2463 	mov	dpl,_lcd_address
      000946 85*05 83         [24] 2464 	mov	dph,(_lcd_address + 1)
      000949 EE               [12] 2465 	mov	a,r6
      00094A F0               [24] 2466 	movx	@dptr,a
                                   2467 ;	assignBit
      00094B C2 B4            [12] 2468 	clr	_P3_4
      00094D 80 E0            [24] 2469 	sjmp	00109$
      00094F                       2470 00111$:
                                   2471 ;	ecen4330_lcd_v3.c:374: }
      00094F 22               [24] 2472 	ret
                                   2473 ;------------------------------------------------------------
                                   2474 ;Allocation info for local variables in function 'drawChar'
                                   2475 ;------------------------------------------------------------
                                   2476 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2477 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2478 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2479 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2480 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2481 ;x                         Allocated to registers r6 r7 
                                   2482 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2483 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2484 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2485 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2486 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2487 ;i                         Allocated with name '_drawChar_i_65537_156'
                                   2488 ;line                      Allocated with name '_drawChar_line_196609_158'
                                   2489 ;j                         Allocated with name '_drawChar_j_196610_161'
                                   2490 ;------------------------------------------------------------
                                   2491 ;	ecen4330_lcd_v3.c:385: void drawChar (int16_t x, int16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t size) {
                                   2492 ;	-----------------------------------------
                                   2493 ;	 function drawChar
                                   2494 ;	-----------------------------------------
      000950                       2495 _drawChar:
      000950 AE 82            [24] 2496 	mov	r6,dpl
      000952 AF 83            [24] 2497 	mov	r7,dph
                                   2498 ;	ecen4330_lcd_v3.c:386: if ((x >=TFTWIDTH) ||
      000954 C3               [12] 2499 	clr	c
      000955 EE               [12] 2500 	mov	a,r6
      000956 94 F0            [12] 2501 	subb	a,#0xf0
      000958 EF               [12] 2502 	mov	a,r7
      000959 64 80            [12] 2503 	xrl	a,#0x80
      00095B 94 80            [12] 2504 	subb	a,#0x80
      00095D 50 67            [24] 2505 	jnc	00101$
                                   2506 ;	ecen4330_lcd_v3.c:387: (y >=TFTHEIGHT) ||
      00095F AC*3B            [24] 2507 	mov	r4,_drawChar_PARM_2
      000961 AD*3C            [24] 2508 	mov	r5,(_drawChar_PARM_2 + 1)
      000963 C3               [12] 2509 	clr	c
      000964 EC               [12] 2510 	mov	a,r4
      000965 94 40            [12] 2511 	subb	a,#0x40
      000967 ED               [12] 2512 	mov	a,r5
      000968 64 80            [12] 2513 	xrl	a,#0x80
      00096A 94 81            [12] 2514 	subb	a,#0x81
      00096C 50 58            [24] 2515 	jnc	00101$
                                   2516 ;	ecen4330_lcd_v3.c:388: ((x + 6 * size - 1) < 0) ||
      00096E AA*42            [24] 2517 	mov	r2,_drawChar_PARM_6
      000970 7B 00            [12] 2518 	mov	r3,#0x00
      000972 8A*00            [24] 2519 	mov	__mulint_PARM_2,r2
      000974 8B*01            [24] 2520 	mov	(__mulint_PARM_2 + 1),r3
      000976 90 00 06         [24] 2521 	mov	dptr,#0x0006
      000979 C0 07            [24] 2522 	push	ar7
      00097B C0 06            [24] 2523 	push	ar6
      00097D C0 05            [24] 2524 	push	ar5
      00097F C0 04            [24] 2525 	push	ar4
      000981 C0 03            [24] 2526 	push	ar3
      000983 C0 02            [24] 2527 	push	ar2
      000985 12r00r00         [24] 2528 	lcall	__mulint
      000988 A8 82            [24] 2529 	mov	r0,dpl
      00098A A9 83            [24] 2530 	mov	r1,dph
      00098C D0 02            [24] 2531 	pop	ar2
      00098E D0 03            [24] 2532 	pop	ar3
      000990 D0 04            [24] 2533 	pop	ar4
      000992 D0 05            [24] 2534 	pop	ar5
      000994 D0 06            [24] 2535 	pop	ar6
      000996 D0 07            [24] 2536 	pop	ar7
      000998 E8               [12] 2537 	mov	a,r0
      000999 2E               [12] 2538 	add	a,r6
      00099A F8               [12] 2539 	mov	r0,a
      00099B E9               [12] 2540 	mov	a,r1
      00099C 3F               [12] 2541 	addc	a,r7
      00099D F9               [12] 2542 	mov	r1,a
      00099E 18               [12] 2543 	dec	r0
      00099F B8 FF 01         [24] 2544 	cjne	r0,#0xff,00176$
      0009A2 19               [12] 2545 	dec	r1
      0009A3                       2546 00176$:
      0009A3 E9               [12] 2547 	mov	a,r1
      0009A4 20 E7 1F         [24] 2548 	jb	acc.7,00101$
                                   2549 ;	ecen4330_lcd_v3.c:389: ((y + 8 * size - 1) < 0))
      0009A7 EB               [12] 2550 	mov	a,r3
      0009A8 C4               [12] 2551 	swap	a
      0009A9 03               [12] 2552 	rr	a
      0009AA 54 F8            [12] 2553 	anl	a,#0xf8
      0009AC CA               [12] 2554 	xch	a,r2
      0009AD C4               [12] 2555 	swap	a
      0009AE 03               [12] 2556 	rr	a
      0009AF CA               [12] 2557 	xch	a,r2
      0009B0 6A               [12] 2558 	xrl	a,r2
      0009B1 CA               [12] 2559 	xch	a,r2
      0009B2 54 F8            [12] 2560 	anl	a,#0xf8
      0009B4 CA               [12] 2561 	xch	a,r2
      0009B5 6A               [12] 2562 	xrl	a,r2
      0009B6 FB               [12] 2563 	mov	r3,a
      0009B7 EA               [12] 2564 	mov	a,r2
      0009B8 2C               [12] 2565 	add	a,r4
      0009B9 FA               [12] 2566 	mov	r2,a
      0009BA EB               [12] 2567 	mov	a,r3
      0009BB 3D               [12] 2568 	addc	a,r5
      0009BC FB               [12] 2569 	mov	r3,a
      0009BD 1A               [12] 2570 	dec	r2
      0009BE BA FF 01         [24] 2571 	cjne	r2,#0xff,00178$
      0009C1 1B               [12] 2572 	dec	r3
      0009C2                       2573 00178$:
      0009C2 EB               [12] 2574 	mov	a,r3
      0009C3 30 E7 01         [24] 2575 	jnb	acc.7,00138$
      0009C6                       2576 00101$:
                                   2577 ;	ecen4330_lcd_v3.c:391: return;
      0009C6 22               [24] 2578 	ret
                                   2579 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      0009C7                       2580 00138$:
      0009C7 74 01            [12] 2581 	mov	a,#0x01
      0009C9 B5*42 04         [24] 2582 	cjne	a,_drawChar_PARM_6,00180$
      0009CC 74 01            [12] 2583 	mov	a,#0x01
      0009CE 80 01            [24] 2584 	sjmp	00181$
      0009D0                       2585 00180$:
      0009D0 E4               [12] 2586 	clr	a
      0009D1                       2587 00181$:
      0009D1 FB               [12] 2588 	mov	r3,a
      0009D2 8B*49            [24] 2589 	mov	_drawChar_sloc5_1_0,r3
      0009D4 E5*3E            [12] 2590 	mov	a,_drawChar_PARM_4
      0009D6 B5*40 08         [24] 2591 	cjne	a,_drawChar_PARM_5,00182$
      0009D9 E5*3F            [12] 2592 	mov	a,(_drawChar_PARM_4 + 1)
      0009DB B5*41 03         [24] 2593 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009DE D3               [12] 2594 	setb	c
      0009DF 80 01            [24] 2595 	sjmp	00183$
      0009E1                       2596 00182$:
      0009E1 C3               [12] 2597 	clr	c
      0009E2                       2598 00183$:
      0009E2 92*00            [24] 2599 	mov	_drawChar_sloc0_1_0,c
      0009E4 79 00            [12] 2600 	mov	r1,#0x00
      0009E6                       2601 00124$:
                                   2602 ;	ecen4330_lcd_v3.c:399: if (i == 5) {
      0009E6 B9 05 07         [24] 2603 	cjne	r1,#0x05,00107$
                                   2604 ;	ecen4330_lcd_v3.c:400: line = 0x0;
      0009E9 90r00r0A         [24] 2605 	mov	dptr,#_drawChar_line_196609_158
      0009EC E4               [12] 2606 	clr	a
      0009ED F0               [24] 2607 	movx	@dptr,a
      0009EE 80 49            [24] 2608 	sjmp	00136$
      0009F0                       2609 00107$:
                                   2610 ;	ecen4330_lcd_v3.c:402: line = pgm_read_byte(font+(c*5)+i);
      0009F0 85*3D*00         [24] 2611 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009F3 75*01 00         [24] 2612 	mov	(__mulint_PARM_2 + 1),#0x00
      0009F6 90 00 05         [24] 2613 	mov	dptr,#0x0005
      0009F9 C0 07            [24] 2614 	push	ar7
      0009FB C0 06            [24] 2615 	push	ar6
      0009FD C0 05            [24] 2616 	push	ar5
      0009FF C0 04            [24] 2617 	push	ar4
      000A01 C0 03            [24] 2618 	push	ar3
      000A03 C0 01            [24] 2619 	push	ar1
      000A05 12r00r00         [24] 2620 	lcall	__mulint
      000A08 A8 82            [24] 2621 	mov	r0,dpl
      000A0A AA 83            [24] 2622 	mov	r2,dph
      000A0C D0 01            [24] 2623 	pop	ar1
      000A0E D0 03            [24] 2624 	pop	ar3
      000A10 D0 04            [24] 2625 	pop	ar4
      000A12 D0 05            [24] 2626 	pop	ar5
      000A14 D0 06            [24] 2627 	pop	ar6
      000A16 D0 07            [24] 2628 	pop	ar7
      000A18 E8               [12] 2629 	mov	a,r0
      000A19 24r00            [12] 2630 	add	a,#_font
      000A1B F5*43            [12] 2631 	mov	_drawChar_sloc1_1_0,a
      000A1D EA               [12] 2632 	mov	a,r2
      000A1E 34s00            [12] 2633 	addc	a,#(_font >> 8)
      000A20 F5*44            [12] 2634 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A22 E9               [12] 2635 	mov	a,r1
      000A23 F8               [12] 2636 	mov	r0,a
      000A24 33               [12] 2637 	rlc	a
      000A25 95 E0            [12] 2638 	subb	a,acc
      000A27 FA               [12] 2639 	mov	r2,a
      000A28 E8               [12] 2640 	mov	a,r0
      000A29 25*43            [12] 2641 	add	a,_drawChar_sloc1_1_0
      000A2B F5 82            [12] 2642 	mov	dpl,a
      000A2D EA               [12] 2643 	mov	a,r2
      000A2E 35*44            [12] 2644 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A30 F5 83            [12] 2645 	mov	dph,a
      000A32 E4               [12] 2646 	clr	a
      000A33 93               [24] 2647 	movc	a,@a+dptr
      000A34 FA               [12] 2648 	mov	r2,a
      000A35 90r00r0A         [24] 2649 	mov	dptr,#_drawChar_line_196609_158
      000A38 F0               [24] 2650 	movx	@dptr,a
                                   2651 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
                                   2652 ;	ecen4330_lcd_v3.c:407: for (j = 0; j < 8; j++) {
      000A39                       2653 00136$:
      000A39 C2 D5            [12] 2654 	clr	F0
      000A3B 85*42 F0         [24] 2655 	mov	b,_drawChar_PARM_6
      000A3E E9               [12] 2656 	mov	a,r1
      000A3F 30 E7 04         [24] 2657 	jnb	acc.7,00186$
      000A42 B2 D5            [12] 2658 	cpl	F0
      000A44 F4               [12] 2659 	cpl	a
      000A45 04               [12] 2660 	inc	a
      000A46                       2661 00186$:
      000A46 A4               [48] 2662 	mul	ab
      000A47 30 D5 0A         [24] 2663 	jnb	F0,00187$
      000A4A F4               [12] 2664 	cpl	a
      000A4B 24 01            [12] 2665 	add	a,#0x01
      000A4D C5 F0            [12] 2666 	xch	a,b
      000A4F F4               [12] 2667 	cpl	a
      000A50 34 00            [12] 2668 	addc	a,#0x00
      000A52 C5 F0            [12] 2669 	xch	a,b
      000A54                       2670 00187$:
      000A54 2E               [12] 2671 	add	a,r6
      000A55 F5*43            [12] 2672 	mov	_drawChar_sloc1_1_0,a
      000A57 EF               [12] 2673 	mov	a,r7
      000A58 35 F0            [12] 2674 	addc	a,b
      000A5A F5*44            [12] 2675 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A5C 89 00            [24] 2676 	mov	ar0,r1
      000A5E 85*43*45         [24] 2677 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A61 85*44*46         [24] 2678 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A64 89*47            [24] 2679 	mov	_drawChar_sloc3_1_0,r1
      000A66 75*48 00         [24] 2680 	mov	_drawChar_sloc4_1_0,#0x00
      000A69                       2681 00122$:
                                   2682 ;	ecen4330_lcd_v3.c:408: if (line & 0x1) {
      000A69 90r00r0A         [24] 2683 	mov	dptr,#_drawChar_line_196609_158
      000A6C E0               [24] 2684 	movx	a,@dptr
      000A6D 20 E0 03         [24] 2685 	jb	acc.0,00188$
      000A70 02r0Br28         [24] 2686 	ljmp	00118$
      000A73                       2687 00188$:
                                   2688 ;	ecen4330_lcd_v3.c:409: if (size == 1) {
      000A73 EB               [12] 2689 	mov	a,r3
      000A74 60 4E            [24] 2690 	jz	00110$
                                   2691 ;	ecen4330_lcd_v3.c:410: drawPixel(x+i, y+j, color);
      000A76 C0 00            [24] 2692 	push	ar0
      000A78 E5*47            [12] 2693 	mov	a,_drawChar_sloc3_1_0
      000A7A F8               [12] 2694 	mov	r0,a
      000A7B 33               [12] 2695 	rlc	a
      000A7C 95 E0            [12] 2696 	subb	a,acc
      000A7E FA               [12] 2697 	mov	r2,a
      000A7F E8               [12] 2698 	mov	a,r0
      000A80 2E               [12] 2699 	add	a,r6
      000A81 F8               [12] 2700 	mov	r0,a
      000A82 EA               [12] 2701 	mov	a,r2
      000A83 3F               [12] 2702 	addc	a,r7
      000A84 FA               [12] 2703 	mov	r2,a
      000A85 88 82            [24] 2704 	mov	dpl,r0
      000A87 8A 83            [24] 2705 	mov	dph,r2
      000A89 E5*48            [12] 2706 	mov	a,_drawChar_sloc4_1_0
      000A8B F8               [12] 2707 	mov	r0,a
      000A8C 33               [12] 2708 	rlc	a
      000A8D 95 E0            [12] 2709 	subb	a,acc
      000A8F FA               [12] 2710 	mov	r2,a
      000A90 E8               [12] 2711 	mov	a,r0
      000A91 2C               [12] 2712 	add	a,r4
      000A92 F8               [12] 2713 	mov	r0,a
      000A93 EA               [12] 2714 	mov	a,r2
      000A94 3D               [12] 2715 	addc	a,r5
      000A95 FA               [12] 2716 	mov	r2,a
      000A96 88*18            [24] 2717 	mov	_drawPixel_PARM_2,r0
      000A98 8A*19            [24] 2718 	mov	(_drawPixel_PARM_2 + 1),r2
      000A9A 85*3E*1A         [24] 2719 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A9D 85*3F*1B         [24] 2720 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000AA0 C0 07            [24] 2721 	push	ar7
      000AA2 C0 06            [24] 2722 	push	ar6
      000AA4 C0 05            [24] 2723 	push	ar5
      000AA6 C0 04            [24] 2724 	push	ar4
      000AA8 C0 03            [24] 2725 	push	ar3
      000AAA C0 01            [24] 2726 	push	ar1
      000AAC C0 00            [24] 2727 	push	ar0
      000AAE 12r03r86         [24] 2728 	lcall	_drawPixel
      000AB1 D0 00            [24] 2729 	pop	ar0
      000AB3 D0 01            [24] 2730 	pop	ar1
      000AB5 D0 03            [24] 2731 	pop	ar3
      000AB7 D0 04            [24] 2732 	pop	ar4
      000AB9 D0 05            [24] 2733 	pop	ar5
      000ABB D0 06            [24] 2734 	pop	ar6
      000ABD D0 07            [24] 2735 	pop	ar7
      000ABF D0 00            [24] 2736 	pop	ar0
      000AC1 02r0BrDF         [24] 2737 	ljmp	00119$
      000AC4                       2738 00110$:
                                   2739 ;	ecen4330_lcd_v3.c:412: fillRect(x+(i*size), y+(j*size), size, size, color);
      000AC4 C0 00            [24] 2740 	push	ar0
      000AC6 85*45 82         [24] 2741 	mov	dpl,_drawChar_sloc2_1_0
      000AC9 85*46 83         [24] 2742 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000ACC C2 D5            [12] 2743 	clr	F0
      000ACE 85*42 F0         [24] 2744 	mov	b,_drawChar_PARM_6
      000AD1 E5*48            [12] 2745 	mov	a,_drawChar_sloc4_1_0
      000AD3 30 E7 04         [24] 2746 	jnb	acc.7,00190$
      000AD6 B2 D5            [12] 2747 	cpl	F0
      000AD8 F4               [12] 2748 	cpl	a
      000AD9 04               [12] 2749 	inc	a
      000ADA                       2750 00190$:
      000ADA A4               [48] 2751 	mul	ab
      000ADB 30 D5 0A         [24] 2752 	jnb	F0,00191$
      000ADE F4               [12] 2753 	cpl	a
      000ADF 24 01            [12] 2754 	add	a,#0x01
      000AE1 C5 F0            [12] 2755 	xch	a,b
      000AE3 F4               [12] 2756 	cpl	a
      000AE4 34 00            [12] 2757 	addc	a,#0x00
      000AE6 C5 F0            [12] 2758 	xch	a,b
      000AE8                       2759 00191$:
      000AE8 2C               [12] 2760 	add	a,r4
      000AE9 F8               [12] 2761 	mov	r0,a
      000AEA ED               [12] 2762 	mov	a,r5
      000AEB 35 F0            [12] 2763 	addc	a,b
      000AED FA               [12] 2764 	mov	r2,a
      000AEE 88*33            [24] 2765 	mov	_fillRect_PARM_2,r0
      000AF0 8A*34            [24] 2766 	mov	(_fillRect_PARM_2 + 1),r2
      000AF2 A8*42            [24] 2767 	mov	r0,_drawChar_PARM_6
      000AF4 7A 00            [12] 2768 	mov	r2,#0x00
      000AF6 88*35            [24] 2769 	mov	_fillRect_PARM_3,r0
      000AF8 8A*36            [24] 2770 	mov	(_fillRect_PARM_3 + 1),r2
      000AFA 88*37            [24] 2771 	mov	_fillRect_PARM_4,r0
      000AFC 8A*38            [24] 2772 	mov	(_fillRect_PARM_4 + 1),r2
      000AFE 85*3E*39         [24] 2773 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000B01 85*3F*3A         [24] 2774 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000B04 C0 07            [24] 2775 	push	ar7
      000B06 C0 06            [24] 2776 	push	ar6
      000B08 C0 05            [24] 2777 	push	ar5
      000B0A C0 04            [24] 2778 	push	ar4
      000B0C C0 03            [24] 2779 	push	ar3
      000B0E C0 01            [24] 2780 	push	ar1
      000B10 C0 00            [24] 2781 	push	ar0
      000B12 12r07r88         [24] 2782 	lcall	_fillRect
      000B15 D0 00            [24] 2783 	pop	ar0
      000B17 D0 01            [24] 2784 	pop	ar1
      000B19 D0 03            [24] 2785 	pop	ar3
      000B1B D0 04            [24] 2786 	pop	ar4
      000B1D D0 05            [24] 2787 	pop	ar5
      000B1F D0 06            [24] 2788 	pop	ar6
      000B21 D0 07            [24] 2789 	pop	ar7
      000B23 D0 00            [24] 2790 	pop	ar0
      000B25 02r0BrDF         [24] 2791 	ljmp	00119$
      000B28                       2792 00118$:
                                   2793 ;	ecen4330_lcd_v3.c:414: } else if (bg != color) {
      000B28 30*00 03         [24] 2794 	jnb	_drawChar_sloc0_1_0,00192$
      000B2B 02r0BrDF         [24] 2795 	ljmp	00119$
      000B2E                       2796 00192$:
                                   2797 ;	ecen4330_lcd_v3.c:415: if (size == 1) {
      000B2E E5*49            [12] 2798 	mov	a,_drawChar_sloc5_1_0
      000B30 60 4C            [24] 2799 	jz	00113$
                                   2800 ;	ecen4330_lcd_v3.c:416: drawPixel(x+i, y+j, bg);
      000B32 C0 03            [24] 2801 	push	ar3
      000B34 E8               [12] 2802 	mov	a,r0
      000B35 FA               [12] 2803 	mov	r2,a
      000B36 33               [12] 2804 	rlc	a
      000B37 95 E0            [12] 2805 	subb	a,acc
      000B39 FB               [12] 2806 	mov	r3,a
      000B3A EA               [12] 2807 	mov	a,r2
      000B3B 2E               [12] 2808 	add	a,r6
      000B3C FA               [12] 2809 	mov	r2,a
      000B3D EB               [12] 2810 	mov	a,r3
      000B3E 3F               [12] 2811 	addc	a,r7
      000B3F FB               [12] 2812 	mov	r3,a
      000B40 8A 82            [24] 2813 	mov	dpl,r2
      000B42 8B 83            [24] 2814 	mov	dph,r3
      000B44 E5*48            [12] 2815 	mov	a,_drawChar_sloc4_1_0
      000B46 FA               [12] 2816 	mov	r2,a
      000B47 33               [12] 2817 	rlc	a
      000B48 95 E0            [12] 2818 	subb	a,acc
      000B4A FB               [12] 2819 	mov	r3,a
      000B4B EA               [12] 2820 	mov	a,r2
      000B4C 2C               [12] 2821 	add	a,r4
      000B4D FA               [12] 2822 	mov	r2,a
      000B4E EB               [12] 2823 	mov	a,r3
      000B4F 3D               [12] 2824 	addc	a,r5
      000B50 FB               [12] 2825 	mov	r3,a
      000B51 8A*18            [24] 2826 	mov	_drawPixel_PARM_2,r2
      000B53 8B*19            [24] 2827 	mov	(_drawPixel_PARM_2 + 1),r3
      000B55 85*40*1A         [24] 2828 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B58 85*41*1B         [24] 2829 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B5B C0 07            [24] 2830 	push	ar7
      000B5D C0 06            [24] 2831 	push	ar6
      000B5F C0 05            [24] 2832 	push	ar5
      000B61 C0 04            [24] 2833 	push	ar4
      000B63 C0 03            [24] 2834 	push	ar3
      000B65 C0 01            [24] 2835 	push	ar1
      000B67 C0 00            [24] 2836 	push	ar0
      000B69 12r03r86         [24] 2837 	lcall	_drawPixel
      000B6C D0 00            [24] 2838 	pop	ar0
      000B6E D0 01            [24] 2839 	pop	ar1
      000B70 D0 03            [24] 2840 	pop	ar3
      000B72 D0 04            [24] 2841 	pop	ar4
      000B74 D0 05            [24] 2842 	pop	ar5
      000B76 D0 06            [24] 2843 	pop	ar6
      000B78 D0 07            [24] 2844 	pop	ar7
      000B7A D0 03            [24] 2845 	pop	ar3
      000B7C 80 61            [24] 2846 	sjmp	00119$
      000B7E                       2847 00113$:
                                   2848 ;	ecen4330_lcd_v3.c:418: fillRect(x+i*size, y+j*size, size, size, bg);
      000B7E C0 00            [24] 2849 	push	ar0
      000B80 85*43 82         [24] 2850 	mov	dpl,_drawChar_sloc1_1_0
      000B83 85*44 83         [24] 2851 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B86 C2 D5            [12] 2852 	clr	F0
      000B88 85*42 F0         [24] 2853 	mov	b,_drawChar_PARM_6
      000B8B E5*48            [12] 2854 	mov	a,_drawChar_sloc4_1_0
      000B8D 30 E7 04         [24] 2855 	jnb	acc.7,00194$
      000B90 B2 D5            [12] 2856 	cpl	F0
      000B92 F4               [12] 2857 	cpl	a
      000B93 04               [12] 2858 	inc	a
      000B94                       2859 00194$:
      000B94 A4               [48] 2860 	mul	ab
      000B95 30 D5 0A         [24] 2861 	jnb	F0,00195$
      000B98 F4               [12] 2862 	cpl	a
      000B99 24 01            [12] 2863 	add	a,#0x01
      000B9B C5 F0            [12] 2864 	xch	a,b
      000B9D F4               [12] 2865 	cpl	a
      000B9E 34 00            [12] 2866 	addc	a,#0x00
      000BA0 C5 F0            [12] 2867 	xch	a,b
      000BA2                       2868 00195$:
      000BA2 2C               [12] 2869 	add	a,r4
      000BA3 F8               [12] 2870 	mov	r0,a
      000BA4 ED               [12] 2871 	mov	a,r5
      000BA5 35 F0            [12] 2872 	addc	a,b
      000BA7 FA               [12] 2873 	mov	r2,a
      000BA8 88*33            [24] 2874 	mov	_fillRect_PARM_2,r0
      000BAA 8A*34            [24] 2875 	mov	(_fillRect_PARM_2 + 1),r2
      000BAC A8*42            [24] 2876 	mov	r0,_drawChar_PARM_6
      000BAE 7A 00            [12] 2877 	mov	r2,#0x00
      000BB0 88*35            [24] 2878 	mov	_fillRect_PARM_3,r0
      000BB2 8A*36            [24] 2879 	mov	(_fillRect_PARM_3 + 1),r2
      000BB4 88*37            [24] 2880 	mov	_fillRect_PARM_4,r0
      000BB6 8A*38            [24] 2881 	mov	(_fillRect_PARM_4 + 1),r2
      000BB8 85*40*39         [24] 2882 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000BBB 85*41*3A         [24] 2883 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000BBE C0 07            [24] 2884 	push	ar7
      000BC0 C0 06            [24] 2885 	push	ar6
      000BC2 C0 05            [24] 2886 	push	ar5
      000BC4 C0 04            [24] 2887 	push	ar4
      000BC6 C0 03            [24] 2888 	push	ar3
      000BC8 C0 01            [24] 2889 	push	ar1
      000BCA C0 00            [24] 2890 	push	ar0
      000BCC 12r07r88         [24] 2891 	lcall	_fillRect
      000BCF D0 00            [24] 2892 	pop	ar0
      000BD1 D0 01            [24] 2893 	pop	ar1
      000BD3 D0 03            [24] 2894 	pop	ar3
      000BD5 D0 04            [24] 2895 	pop	ar4
      000BD7 D0 05            [24] 2896 	pop	ar5
      000BD9 D0 06            [24] 2897 	pop	ar6
      000BDB D0 07            [24] 2898 	pop	ar7
                                   2899 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      000BDD D0 00            [24] 2900 	pop	ar0
                                   2901 ;	ecen4330_lcd_v3.c:418: fillRect(x+i*size, y+j*size, size, size, bg);
      000BDF                       2902 00119$:
                                   2903 ;	ecen4330_lcd_v3.c:422: line >>= 1;
      000BDF 90r00r0A         [24] 2904 	mov	dptr,#_drawChar_line_196609_158
      000BE2 E0               [24] 2905 	movx	a,@dptr
      000BE3 C3               [12] 2906 	clr	c
      000BE4 13               [12] 2907 	rrc	a
      000BE5 FA               [12] 2908 	mov	r2,a
      000BE6 F0               [24] 2909 	movx	@dptr,a
                                   2910 ;	ecen4330_lcd_v3.c:407: for (j = 0; j < 8; j++) {
      000BE7 05*48            [12] 2911 	inc	_drawChar_sloc4_1_0
      000BE9 C3               [12] 2912 	clr	c
      000BEA E5*48            [12] 2913 	mov	a,_drawChar_sloc4_1_0
      000BEC 64 80            [12] 2914 	xrl	a,#0x80
      000BEE 94 88            [12] 2915 	subb	a,#0x88
      000BF0 50 03            [24] 2916 	jnc	00196$
      000BF2 02r0Ar69         [24] 2917 	ljmp	00122$
      000BF5                       2918 00196$:
                                   2919 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      000BF5 09               [12] 2920 	inc	r1
      000BF6 C3               [12] 2921 	clr	c
      000BF7 E9               [12] 2922 	mov	a,r1
      000BF8 64 80            [12] 2923 	xrl	a,#0x80
      000BFA 94 86            [12] 2924 	subb	a,#0x86
      000BFC 50 03            [24] 2925 	jnc	00197$
      000BFE 02r09rE6         [24] 2926 	ljmp	00124$
      000C01                       2927 00197$:
                                   2928 ;	ecen4330_lcd_v3.c:425: }
      000C01 22               [24] 2929 	ret
                                   2930 ;------------------------------------------------------------
                                   2931 ;Allocation info for local variables in function 'write'
                                   2932 ;------------------------------------------------------------
                                   2933 ;c                         Allocated to registers r7 
                                   2934 ;------------------------------------------------------------
                                   2935 ;	ecen4330_lcd_v3.c:432: void write (uint8_t c)
                                   2936 ;	-----------------------------------------
                                   2937 ;	 function write
                                   2938 ;	-----------------------------------------
      000C02                       2939 _write:
      000C02 AF 82            [24] 2940 	mov	r7,dpl
                                   2941 ;	ecen4330_lcd_v3.c:434: if (c == '\n') {
      000C04 BF 0A 26         [24] 2942 	cjne	r7,#0x0a,00105$
                                   2943 ;	ecen4330_lcd_v3.c:435: cursor_y += textsize*8;
      000C07 AD*12            [24] 2944 	mov	r5,_textsize
      000C09 E4               [12] 2945 	clr	a
      000C0A C4               [12] 2946 	swap	a
      000C0B 03               [12] 2947 	rr	a
      000C0C 54 F8            [12] 2948 	anl	a,#0xf8
      000C0E CD               [12] 2949 	xch	a,r5
      000C0F C4               [12] 2950 	swap	a
      000C10 03               [12] 2951 	rr	a
      000C11 CD               [12] 2952 	xch	a,r5
      000C12 6D               [12] 2953 	xrl	a,r5
      000C13 CD               [12] 2954 	xch	a,r5
      000C14 54 F8            [12] 2955 	anl	a,#0xf8
      000C16 CD               [12] 2956 	xch	a,r5
      000C17 6D               [12] 2957 	xrl	a,r5
      000C18 FE               [12] 2958 	mov	r6,a
      000C19 AB*10            [24] 2959 	mov	r3,_cursor_y
      000C1B AC*11            [24] 2960 	mov	r4,(_cursor_y + 1)
      000C1D ED               [12] 2961 	mov	a,r5
      000C1E 2B               [12] 2962 	add	a,r3
      000C1F FB               [12] 2963 	mov	r3,a
      000C20 EE               [12] 2964 	mov	a,r6
      000C21 3C               [12] 2965 	addc	a,r4
      000C22 FC               [12] 2966 	mov	r4,a
      000C23 8B*10            [24] 2967 	mov	_cursor_y,r3
      000C25 8C*11            [24] 2968 	mov	(_cursor_y + 1),r4
                                   2969 ;	ecen4330_lcd_v3.c:436: cursor_x  = 0;
      000C27 E4               [12] 2970 	clr	a
      000C28 F5*0E            [12] 2971 	mov	_cursor_x,a
      000C2A F5*0F            [12] 2972 	mov	(_cursor_x + 1),a
      000C2C 22               [24] 2973 	ret
      000C2D                       2974 00105$:
                                   2975 ;	ecen4330_lcd_v3.c:437: } else if (c == '\r') {
      000C2D BF 0D 01         [24] 2976 	cjne	r7,#0x0d,00119$
      000C30 22               [24] 2977 	ret
      000C31                       2978 00119$:
                                   2979 ;	ecen4330_lcd_v3.c:440: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C31 85*10*3B         [24] 2980 	mov	_drawChar_PARM_2,_cursor_y
      000C34 85*11*3C         [24] 2981 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C37 8F*3D            [24] 2982 	mov	_drawChar_PARM_3,r7
      000C39 85*14*3E         [24] 2983 	mov	_drawChar_PARM_4,_textcolor
      000C3C 85*15*3F         [24] 2984 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C3F 85*16*40         [24] 2985 	mov	_drawChar_PARM_5,_textbgcolor
      000C42 85*17*41         [24] 2986 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C45 85*12*42         [24] 2987 	mov	_drawChar_PARM_6,_textsize
      000C48 85*0E 82         [24] 2988 	mov	dpl,_cursor_x
      000C4B 85*0F 83         [24] 2989 	mov	dph,(_cursor_x + 1)
      000C4E 12r09r50         [24] 2990 	lcall	_drawChar
                                   2991 ;	ecen4330_lcd_v3.c:441: cursor_x += textsize*6;
      000C51 85*12*00         [24] 2992 	mov	__mulint_PARM_2,_textsize
      000C54 75*01 00         [24] 2993 	mov	(__mulint_PARM_2 + 1),#0x00
      000C57 90 00 06         [24] 2994 	mov	dptr,#0x0006
      000C5A 12r00r00         [24] 2995 	lcall	__mulint
      000C5D AE 82            [24] 2996 	mov	r6,dpl
      000C5F AF 83            [24] 2997 	mov	r7,dph
      000C61 AC*0E            [24] 2998 	mov	r4,_cursor_x
      000C63 AD*0F            [24] 2999 	mov	r5,(_cursor_x + 1)
      000C65 EE               [12] 3000 	mov	a,r6
      000C66 2C               [12] 3001 	add	a,r4
      000C67 FC               [12] 3002 	mov	r4,a
      000C68 EF               [12] 3003 	mov	a,r7
      000C69 3D               [12] 3004 	addc	a,r5
      000C6A FD               [12] 3005 	mov	r5,a
      000C6B 8C*0E            [24] 3006 	mov	_cursor_x,r4
      000C6D 8D*0F            [24] 3007 	mov	(_cursor_x + 1),r5
                                   3008 ;	ecen4330_lcd_v3.c:443: }
      000C6F 22               [24] 3009 	ret
                                   3010 ;------------------------------------------------------------
                                   3011 ;Allocation info for local variables in function 'LCD_string_write'
                                   3012 ;------------------------------------------------------------
                                   3013 ;str                       Allocated to registers r5 r6 r7 
                                   3014 ;i                         Allocated with name '_LCD_string_write_i_65536_176'
                                   3015 ;------------------------------------------------------------
                                   3016 ;	ecen4330_lcd_v3.c:450: void LCD_string_write (int8_t *str) {
                                   3017 ;	-----------------------------------------
                                   3018 ;	 function LCD_string_write
                                   3019 ;	-----------------------------------------
      000C70                       3020 _LCD_string_write:
      000C70 AD 82            [24] 3021 	mov	r5,dpl
      000C72 AE 83            [24] 3022 	mov	r6,dph
      000C74 AF F0            [24] 3023 	mov	r7,b
                                   3024 ;	ecen4330_lcd_v3.c:453: for (i = 0; str[i] != 0; i++) {
      000C76 7B 00            [12] 3025 	mov	r3,#0x00
      000C78 7C 00            [12] 3026 	mov	r4,#0x00
      000C7A                       3027 00103$:
      000C7A EB               [12] 3028 	mov	a,r3
      000C7B 2D               [12] 3029 	add	a,r5
      000C7C F8               [12] 3030 	mov	r0,a
      000C7D EC               [12] 3031 	mov	a,r4
      000C7E 3E               [12] 3032 	addc	a,r6
      000C7F F9               [12] 3033 	mov	r1,a
      000C80 8F 02            [24] 3034 	mov	ar2,r7
      000C82 88 82            [24] 3035 	mov	dpl,r0
      000C84 89 83            [24] 3036 	mov	dph,r1
      000C86 8A F0            [24] 3037 	mov	b,r2
      000C88 12r00r00         [24] 3038 	lcall	__gptrget
      000C8B FA               [12] 3039 	mov	r2,a
      000C8C 60 20            [24] 3040 	jz	00105$
                                   3041 ;	ecen4330_lcd_v3.c:454: write(str[i]);
      000C8E 8A 82            [24] 3042 	mov	dpl,r2
      000C90 C0 07            [24] 3043 	push	ar7
      000C92 C0 06            [24] 3044 	push	ar6
      000C94 C0 05            [24] 3045 	push	ar5
      000C96 C0 04            [24] 3046 	push	ar4
      000C98 C0 03            [24] 3047 	push	ar3
      000C9A 12r0Cr02         [24] 3048 	lcall	_write
      000C9D D0 03            [24] 3049 	pop	ar3
      000C9F D0 04            [24] 3050 	pop	ar4
      000CA1 D0 05            [24] 3051 	pop	ar5
      000CA3 D0 06            [24] 3052 	pop	ar6
      000CA5 D0 07            [24] 3053 	pop	ar7
                                   3054 ;	ecen4330_lcd_v3.c:453: for (i = 0; str[i] != 0; i++) {
      000CA7 0B               [12] 3055 	inc	r3
      000CA8 BB 00 CF         [24] 3056 	cjne	r3,#0x00,00103$
      000CAB 0C               [12] 3057 	inc	r4
      000CAC 80 CC            [24] 3058 	sjmp	00103$
      000CAE                       3059 00105$:
                                   3060 ;	ecen4330_lcd_v3.c:456: }
      000CAE 22               [24] 3061 	ret
                                   3062 ;------------------------------------------------------------
                                   3063 ;Allocation info for local variables in function 'testRAM'
                                   3064 ;------------------------------------------------------------
                                   3065 ;d                         Allocated with name '_testRAM_d_65536_179'
                                   3066 ;i                         Allocated with name '_testRAM_i_65536_180'
                                   3067 ;ram_address               Allocated to registers 
                                   3068 ;------------------------------------------------------------
                                   3069 ;	ecen4330_lcd_v3.c:463: void testRAM (__xdata uint8_t d) {
                                   3070 ;	-----------------------------------------
                                   3071 ;	 function testRAM
                                   3072 ;	-----------------------------------------
      000CAF                       3073 _testRAM:
      000CAF E5 82            [12] 3074 	mov	a,dpl
      000CB1 90r00r0B         [24] 3075 	mov	dptr,#_testRAM_d_65536_179
      000CB4 F0               [24] 3076 	movx	@dptr,a
                                   3077 ;	ecen4330_lcd_v3.c:467: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CB5 E0               [24] 3078 	movx	a,@dptr
      000CB6 FF               [12] 3079 	mov	r7,a
      000CB7 7B 00            [12] 3080 	mov	r3,#0x00
      000CB9 7C 00            [12] 3081 	mov	r4,#0x00
      000CBB 7D 00            [12] 3082 	mov	r5,#0x00
      000CBD 7E 00            [12] 3083 	mov	r6,#0x00
      000CBF                       3084 00102$:
                                   3085 ;	ecen4330_lcd_v3.c:468: IOM = 0;
                                   3086 ;	assignBit
      000CBF C2 B4            [12] 3087 	clr	_P3_4
                                   3088 ;	ecen4330_lcd_v3.c:469: ram_address = (uint8_t __xdata*)(i);
      000CC1 8B 82            [24] 3089 	mov	dpl,r3
      000CC3 8C 83            [24] 3090 	mov	dph,r4
                                   3091 ;	ecen4330_lcd_v3.c:470: *ram_address = d;
      000CC5 EF               [12] 3092 	mov	a,r7
      000CC6 F0               [24] 3093 	movx	@dptr,a
                                   3094 ;	ecen4330_lcd_v3.c:471: IOM = 1;
                                   3095 ;	assignBit
      000CC7 D2 B4            [12] 3096 	setb	_P3_4
                                   3097 ;	ecen4330_lcd_v3.c:467: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CC9 0B               [12] 3098 	inc	r3
      000CCA BB 00 09         [24] 3099 	cjne	r3,#0x00,00111$
      000CCD 0C               [12] 3100 	inc	r4
      000CCE BC 00 05         [24] 3101 	cjne	r4,#0x00,00111$
      000CD1 0D               [12] 3102 	inc	r5
      000CD2 BD 00 01         [24] 3103 	cjne	r5,#0x00,00111$
      000CD5 0E               [12] 3104 	inc	r6
      000CD6                       3105 00111$:
      000CD6 C3               [12] 3106 	clr	c
      000CD7 EB               [12] 3107 	mov	a,r3
      000CD8 94 FF            [12] 3108 	subb	a,#0xff
      000CDA EC               [12] 3109 	mov	a,r4
      000CDB 94 FF            [12] 3110 	subb	a,#0xff
      000CDD ED               [12] 3111 	mov	a,r5
      000CDE 94 00            [12] 3112 	subb	a,#0x00
      000CE0 EE               [12] 3113 	mov	a,r6
      000CE1 94 00            [12] 3114 	subb	a,#0x00
      000CE3 40 DA            [24] 3115 	jc	00102$
                                   3116 ;	ecen4330_lcd_v3.c:473: }
      000CE5 22               [24] 3117 	ret
                                   3118 ;------------------------------------------------------------
                                   3119 ;Allocation info for local variables in function 'freeType'
                                   3120 ;------------------------------------------------------------
                                   3121 ;count                     Allocated with name '_freeType_count_65536_183'
                                   3122 ;d                         Allocated with name '_freeType_d_65536_183'
                                   3123 ;------------------------------------------------------------
                                   3124 ;	ecen4330_lcd_v3.c:479: void freeType () {
                                   3125 ;	-----------------------------------------
                                   3126 ;	 function freeType
                                   3127 ;	-----------------------------------------
      000CE6                       3128 _freeType:
                                   3129 ;	ecen4330_lcd_v3.c:480: __xdata uint8_t count = 0;
      000CE6 90r00r0C         [24] 3130 	mov	dptr,#_freeType_count_65536_183
      000CE9 E4               [12] 3131 	clr	a
      000CEA F0               [24] 3132 	movx	@dptr,a
                                   3133 ;	ecen4330_lcd_v3.c:483: while (1) {
      000CEB                       3134 00105$:
                                   3135 ;	ecen4330_lcd_v3.c:484: if (count == 8) {
      000CEB 90r00r0C         [24] 3136 	mov	dptr,#_freeType_count_65536_183
      000CEE E0               [24] 3137 	movx	a,@dptr
      000CEF FF               [12] 3138 	mov	r7,a
      000CF0 BF 08 0D         [24] 3139 	cjne	r7,#0x08,00102$
                                   3140 ;	ecen4330_lcd_v3.c:486: count = 0;
      000CF3 90r00r0C         [24] 3141 	mov	dptr,#_freeType_count_65536_183
      000CF6 E4               [12] 3142 	clr	a
      000CF7 F0               [24] 3143 	movx	@dptr,a
                                   3144 ;	ecen4330_lcd_v3.c:487: write(d);
      000CF8 75 82 0A         [24] 3145 	mov	dpl,#0x0a
      000CFB 12r0Cr02         [24] 3146 	lcall	_write
      000CFE 80 06            [24] 3147 	sjmp	00103$
      000D00                       3148 00102$:
                                   3149 ;	ecen4330_lcd_v3.c:489: d = keyDetect();
      000D00 12r0Dr0F         [24] 3150 	lcall	_keyDetect
                                   3151 ;	ecen4330_lcd_v3.c:490: write(d);
      000D03 12r0Cr02         [24] 3152 	lcall	_write
      000D06                       3153 00103$:
                                   3154 ;	ecen4330_lcd_v3.c:493: count++;
      000D06 90r00r0C         [24] 3155 	mov	dptr,#_freeType_count_65536_183
      000D09 E0               [24] 3156 	movx	a,@dptr
      000D0A 24 01            [12] 3157 	add	a,#0x01
      000D0C F0               [24] 3158 	movx	@dptr,a
                                   3159 ;	ecen4330_lcd_v3.c:495: }
      000D0D 80 DC            [24] 3160 	sjmp	00105$
                                   3161 ;------------------------------------------------------------
                                   3162 ;Allocation info for local variables in function 'keyDetect'
                                   3163 ;------------------------------------------------------------
                                   3164 ;	ecen4330_lcd_v3.c:502: uint8_t keyDetect () {
                                   3165 ;	-----------------------------------------
                                   3166 ;	 function keyDetect
                                   3167 ;	-----------------------------------------
      000D0F                       3168 _keyDetect:
                                   3169 ;	ecen4330_lcd_v3.c:503: __KEYPAD_PORT__ = 0xF0;
      000D0F 75 90 F0         [24] 3170 	mov	_P1,#0xf0
                                   3171 ;	ecen4330_lcd_v3.c:504: do {
      000D12                       3172 00101$:
                                   3173 ;	ecen4330_lcd_v3.c:505: __KEYPAD_PORT__ = 0xF0;
      000D12 75 90 F0         [24] 3174 	mov	_P1,#0xf0
                                   3175 ;	ecen4330_lcd_v3.c:506: colloc = __KEYPAD_PORT__;
      000D15 85 90*02         [24] 3176 	mov	_colloc,_P1
                                   3177 ;	ecen4330_lcd_v3.c:507: colloc&= 0xF0;
      000D18 53*02 F0         [24] 3178 	anl	_colloc,#0xf0
                                   3179 ;	ecen4330_lcd_v3.c:508: } while (colloc != 0xF0);
      000D1B 74 F0            [12] 3180 	mov	a,#0xf0
      000D1D B5*02 F2         [24] 3181 	cjne	a,_colloc,00101$
                                   3182 ;	ecen4330_lcd_v3.c:511: do {
      000D20                       3183 00104$:
                                   3184 ;	ecen4330_lcd_v3.c:512: delay(20);
      000D20 90 00 14         [24] 3185 	mov	dptr,#0x0014
      000D23 12r00r46         [24] 3186 	lcall	_delay
                                   3187 ;	ecen4330_lcd_v3.c:513: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D26 E5 90            [12] 3188 	mov	a,_P1
      000D28 54 F0            [12] 3189 	anl	a,#0xf0
      000D2A F5*02            [12] 3190 	mov	_colloc,a
                                   3191 ;	ecen4330_lcd_v3.c:514: } while (colloc == 0xF0);
      000D2C 74 F0            [12] 3192 	mov	a,#0xf0
      000D2E B5*02 02         [24] 3193 	cjne	a,_colloc,00178$
      000D31 80 ED            [24] 3194 	sjmp	00104$
      000D33                       3195 00178$:
                                   3196 ;	ecen4330_lcd_v3.c:516: delay(1);
      000D33 90 00 01         [24] 3197 	mov	dptr,#0x0001
      000D36 12r00r46         [24] 3198 	lcall	_delay
                                   3199 ;	ecen4330_lcd_v3.c:517: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D39 E5 90            [12] 3200 	mov	a,_P1
      000D3B 54 F0            [12] 3201 	anl	a,#0xf0
      000D3D F5*02            [12] 3202 	mov	_colloc,a
                                   3203 ;	ecen4330_lcd_v3.c:518: } while (colloc == 0xF0);
      000D3F 74 F0            [12] 3204 	mov	a,#0xf0
      000D41 B5*02 02         [24] 3205 	cjne	a,_colloc,00179$
      000D44 80 DA            [24] 3206 	sjmp	00104$
      000D46                       3207 00179$:
                                   3208 ;	ecen4330_lcd_v3.c:520: while (1) {
      000D46                       3209 00119$:
                                   3210 ;	ecen4330_lcd_v3.c:521: __KEYPAD_PORT__= 0xFE;
      000D46 75 90 FE         [24] 3211 	mov	_P1,#0xfe
                                   3212 ;	ecen4330_lcd_v3.c:522: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D49 E5 90            [12] 3213 	mov	a,_P1
      000D4B 54 F0            [12] 3214 	anl	a,#0xf0
      000D4D F5*02            [12] 3215 	mov	_colloc,a
                                   3216 ;	ecen4330_lcd_v3.c:523: if (colloc != 0xF0) {
      000D4F 74 F0            [12] 3217 	mov	a,#0xf0
      000D51 B5*02 02         [24] 3218 	cjne	a,_colloc,00180$
      000D54 80 05            [24] 3219 	sjmp	00111$
      000D56                       3220 00180$:
                                   3221 ;	ecen4330_lcd_v3.c:524: rowloc = 0;
      000D56 75*03 00         [24] 3222 	mov	_rowloc,#0x00
                                   3223 ;	ecen4330_lcd_v3.c:525: break;
      000D59 80 3D            [24] 3224 	sjmp	00120$
      000D5B                       3225 00111$:
                                   3226 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xFD;
      000D5B 75 90 FD         [24] 3227 	mov	_P1,#0xfd
                                   3228 ;	ecen4330_lcd_v3.c:529: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D5E E5 90            [12] 3229 	mov	a,_P1
      000D60 54 F0            [12] 3230 	anl	a,#0xf0
      000D62 F5*02            [12] 3231 	mov	_colloc,a
                                   3232 ;	ecen4330_lcd_v3.c:530: if (colloc != 0xF0) {
      000D64 74 F0            [12] 3233 	mov	a,#0xf0
      000D66 B5*02 02         [24] 3234 	cjne	a,_colloc,00181$
      000D69 80 05            [24] 3235 	sjmp	00113$
      000D6B                       3236 00181$:
                                   3237 ;	ecen4330_lcd_v3.c:531: rowloc = 1;
      000D6B 75*03 01         [24] 3238 	mov	_rowloc,#0x01
                                   3239 ;	ecen4330_lcd_v3.c:532: break;
      000D6E 80 28            [24] 3240 	sjmp	00120$
      000D70                       3241 00113$:
                                   3242 ;	ecen4330_lcd_v3.c:535: __KEYPAD_PORT__ = 0xFB;
      000D70 75 90 FB         [24] 3243 	mov	_P1,#0xfb
                                   3244 ;	ecen4330_lcd_v3.c:536: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D73 E5 90            [12] 3245 	mov	a,_P1
      000D75 54 F0            [12] 3246 	anl	a,#0xf0
      000D77 F5*02            [12] 3247 	mov	_colloc,a
                                   3248 ;	ecen4330_lcd_v3.c:537: if (colloc != 0xF0) {
      000D79 74 F0            [12] 3249 	mov	a,#0xf0
      000D7B B5*02 02         [24] 3250 	cjne	a,_colloc,00182$
      000D7E 80 05            [24] 3251 	sjmp	00115$
      000D80                       3252 00182$:
                                   3253 ;	ecen4330_lcd_v3.c:538: rowloc = 2;
      000D80 75*03 02         [24] 3254 	mov	_rowloc,#0x02
                                   3255 ;	ecen4330_lcd_v3.c:539: break;
      000D83 80 13            [24] 3256 	sjmp	00120$
      000D85                       3257 00115$:
                                   3258 ;	ecen4330_lcd_v3.c:542: __KEYPAD_PORT__ = 0xF7;
      000D85 75 90 F7         [24] 3259 	mov	_P1,#0xf7
                                   3260 ;	ecen4330_lcd_v3.c:543: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D88 E5 90            [12] 3261 	mov	a,_P1
      000D8A 54 F0            [12] 3262 	anl	a,#0xf0
      000D8C F5*02            [12] 3263 	mov	_colloc,a
                                   3264 ;	ecen4330_lcd_v3.c:544: if (colloc != 0xF0) {
      000D8E 74 F0            [12] 3265 	mov	a,#0xf0
      000D90 B5*02 02         [24] 3266 	cjne	a,_colloc,00183$
      000D93 80 B1            [24] 3267 	sjmp	00119$
      000D95                       3268 00183$:
                                   3269 ;	ecen4330_lcd_v3.c:545: rowloc = 3;
      000D95 75*03 03         [24] 3270 	mov	_rowloc,#0x03
                                   3271 ;	ecen4330_lcd_v3.c:546: break;
      000D98                       3272 00120$:
                                   3273 ;	ecen4330_lcd_v3.c:550: if (colloc == 0xE0) {
      000D98 74 E0            [12] 3274 	mov	a,#0xe0
      000D9A B5*02 15         [24] 3275 	cjne	a,_colloc,00128$
                                   3276 ;	ecen4330_lcd_v3.c:551: return (keypad[rowloc][0]);
      000D9D E5*03            [12] 3277 	mov	a,_rowloc
      000D9F 75 F0 04         [24] 3278 	mov	b,#0x04
      000DA2 A4               [48] 3279 	mul	ab
      000DA3 24rFB            [12] 3280 	add	a,#_keypad
      000DA5 F5 82            [12] 3281 	mov	dpl,a
      000DA7 74s04            [12] 3282 	mov	a,#(_keypad >> 8)
      000DA9 35 F0            [12] 3283 	addc	a,b
      000DAB F5 83            [12] 3284 	mov	dph,a
      000DAD E4               [12] 3285 	clr	a
      000DAE 93               [24] 3286 	movc	a,@a+dptr
      000DAF F5 82            [12] 3287 	mov	dpl,a
      000DB1 22               [24] 3288 	ret
      000DB2                       3289 00128$:
                                   3290 ;	ecen4330_lcd_v3.c:552: } else if (colloc == 0xD0) {
      000DB2 74 D0            [12] 3291 	mov	a,#0xd0
      000DB4 B5*02 18         [24] 3292 	cjne	a,_colloc,00125$
                                   3293 ;	ecen4330_lcd_v3.c:553: return (keypad[rowloc][1]);
      000DB7 E5*03            [12] 3294 	mov	a,_rowloc
      000DB9 75 F0 04         [24] 3295 	mov	b,#0x04
      000DBC A4               [48] 3296 	mul	ab
      000DBD 24rFB            [12] 3297 	add	a,#_keypad
      000DBF FE               [12] 3298 	mov	r6,a
      000DC0 74s04            [12] 3299 	mov	a,#(_keypad >> 8)
      000DC2 35 F0            [12] 3300 	addc	a,b
      000DC4 FF               [12] 3301 	mov	r7,a
      000DC5 8E 82            [24] 3302 	mov	dpl,r6
      000DC7 8F 83            [24] 3303 	mov	dph,r7
      000DC9 A3               [24] 3304 	inc	dptr
      000DCA E4               [12] 3305 	clr	a
      000DCB 93               [24] 3306 	movc	a,@a+dptr
      000DCC F5 82            [12] 3307 	mov	dpl,a
      000DCE 22               [24] 3308 	ret
      000DCF                       3309 00125$:
                                   3310 ;	ecen4330_lcd_v3.c:554: } else if (colloc == 0xB0) {
      000DCF 74 B0            [12] 3311 	mov	a,#0xb0
      000DD1 B5*02 19         [24] 3312 	cjne	a,_colloc,00122$
                                   3313 ;	ecen4330_lcd_v3.c:555: return (keypad[rowloc][2]);
      000DD4 E5*03            [12] 3314 	mov	a,_rowloc
      000DD6 75 F0 04         [24] 3315 	mov	b,#0x04
      000DD9 A4               [48] 3316 	mul	ab
      000DDA 24rFB            [12] 3317 	add	a,#_keypad
      000DDC FE               [12] 3318 	mov	r6,a
      000DDD 74s04            [12] 3319 	mov	a,#(_keypad >> 8)
      000DDF 35 F0            [12] 3320 	addc	a,b
      000DE1 FF               [12] 3321 	mov	r7,a
      000DE2 8E 82            [24] 3322 	mov	dpl,r6
      000DE4 8F 83            [24] 3323 	mov	dph,r7
      000DE6 A3               [24] 3324 	inc	dptr
      000DE7 A3               [24] 3325 	inc	dptr
      000DE8 E4               [12] 3326 	clr	a
      000DE9 93               [24] 3327 	movc	a,@a+dptr
      000DEA F5 82            [12] 3328 	mov	dpl,a
      000DEC 22               [24] 3329 	ret
      000DED                       3330 00122$:
                                   3331 ;	ecen4330_lcd_v3.c:557: return (keypad[rowloc][3]);
      000DED E5*03            [12] 3332 	mov	a,_rowloc
      000DEF 75 F0 04         [24] 3333 	mov	b,#0x04
      000DF2 A4               [48] 3334 	mul	ab
      000DF3 24rFB            [12] 3335 	add	a,#_keypad
      000DF5 FE               [12] 3336 	mov	r6,a
      000DF6 74s04            [12] 3337 	mov	a,#(_keypad >> 8)
      000DF8 35 F0            [12] 3338 	addc	a,b
      000DFA FF               [12] 3339 	mov	r7,a
      000DFB 8E 82            [24] 3340 	mov	dpl,r6
      000DFD 8F 83            [24] 3341 	mov	dph,r7
      000DFF A3               [24] 3342 	inc	dptr
      000E00 A3               [24] 3343 	inc	dptr
      000E01 A3               [24] 3344 	inc	dptr
      000E02 E4               [12] 3345 	clr	a
      000E03 93               [24] 3346 	movc	a,@a+dptr
                                   3347 ;	ecen4330_lcd_v3.c:559: }
      000E04 F5 82            [12] 3348 	mov	dpl,a
      000E06 22               [24] 3349 	ret
                                   3350 ;------------------------------------------------------------
                                   3351 ;Allocation info for local variables in function 'reverse'
                                   3352 ;------------------------------------------------------------
                                   3353 ;d                         Allocated to registers r7 
                                   3354 ;rev                       Allocated with name '_reverse_rev_65536_201'
                                   3355 ;val                       Allocated with name '_reverse_val_65536_201'
                                   3356 ;------------------------------------------------------------
                                   3357 ;	ecen4330_lcd_v3.c:561: uint16_t reverse (uint8_t d) {
                                   3358 ;	-----------------------------------------
                                   3359 ;	 function reverse
                                   3360 ;	-----------------------------------------
      000E07                       3361 _reverse:
      000E07 AF 82            [24] 3362 	mov	r7,dpl
                                   3363 ;	ecen4330_lcd_v3.c:562: __xdata uint16_t rev = 0;
      000E09 90r00r0D         [24] 3364 	mov	dptr,#_reverse_rev_65536_201
      000E0C E4               [12] 3365 	clr	a
      000E0D F0               [24] 3366 	movx	@dptr,a
      000E0E A3               [24] 3367 	inc	dptr
      000E0F F0               [24] 3368 	movx	@dptr,a
                                   3369 ;	ecen4330_lcd_v3.c:565: while (d >= 1) {
      000E10                       3370 00101$:
      000E10 BF 01 00         [24] 3371 	cjne	r7,#0x01,00114$
      000E13                       3372 00114$:
      000E13 40 63            [24] 3373 	jc	00103$
                                   3374 ;	ecen4330_lcd_v3.c:566: val = d % 10;
      000E15 8F 05            [24] 3375 	mov	ar5,r7
      000E17 7E 00            [12] 3376 	mov	r6,#0x00
      000E19 75*00 0A         [24] 3377 	mov	__modsint_PARM_2,#0x0a
                                   3378 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000E1C 8E*01            [24] 3379 	mov	(__modsint_PARM_2 + 1),r6
      000E1E 8D 82            [24] 3380 	mov	dpl,r5
      000E20 8E 83            [24] 3381 	mov	dph,r6
      000E22 C0 06            [24] 3382 	push	ar6
      000E24 C0 05            [24] 3383 	push	ar5
      000E26 12r00r00         [24] 3384 	lcall	__modsint
      000E29 AB 82            [24] 3385 	mov	r3,dpl
      000E2B AC 83            [24] 3386 	mov	r4,dph
      000E2D D0 05            [24] 3387 	pop	ar5
      000E2F D0 06            [24] 3388 	pop	ar6
      000E31 90r00r0F         [24] 3389 	mov	dptr,#_reverse_val_65536_201
      000E34 EB               [12] 3390 	mov	a,r3
      000E35 F0               [24] 3391 	movx	@dptr,a
      000E36 EC               [12] 3392 	mov	a,r4
      000E37 A3               [24] 3393 	inc	dptr
      000E38 F0               [24] 3394 	movx	@dptr,a
                                   3395 ;	ecen4330_lcd_v3.c:567: d = d / 10;
      000E39 75*00 0A         [24] 3396 	mov	__divsint_PARM_2,#0x0a
      000E3C 75*01 00         [24] 3397 	mov	(__divsint_PARM_2 + 1),#0x00
      000E3F 8D 82            [24] 3398 	mov	dpl,r5
      000E41 8E 83            [24] 3399 	mov	dph,r6
      000E43 12r00r00         [24] 3400 	lcall	__divsint
      000E46 AD 82            [24] 3401 	mov	r5,dpl
      000E48 8D 07            [24] 3402 	mov	ar7,r5
                                   3403 ;	ecen4330_lcd_v3.c:568: rev = rev * 10 + val;
      000E4A 90r00r0D         [24] 3404 	mov	dptr,#_reverse_rev_65536_201
      000E4D E0               [24] 3405 	movx	a,@dptr
      000E4E FD               [12] 3406 	mov	r5,a
      000E4F A3               [24] 3407 	inc	dptr
      000E50 E0               [24] 3408 	movx	a,@dptr
      000E51 FE               [12] 3409 	mov	r6,a
      000E52 8D*00            [24] 3410 	mov	__mulint_PARM_2,r5
      000E54 8E*01            [24] 3411 	mov	(__mulint_PARM_2 + 1),r6
      000E56 90 00 0A         [24] 3412 	mov	dptr,#0x000a
      000E59 C0 07            [24] 3413 	push	ar7
      000E5B 12r00r00         [24] 3414 	lcall	__mulint
      000E5E AD 82            [24] 3415 	mov	r5,dpl
      000E60 AE 83            [24] 3416 	mov	r6,dph
      000E62 D0 07            [24] 3417 	pop	ar7
      000E64 90r00r0F         [24] 3418 	mov	dptr,#_reverse_val_65536_201
      000E67 E0               [24] 3419 	movx	a,@dptr
      000E68 FB               [12] 3420 	mov	r3,a
      000E69 A3               [24] 3421 	inc	dptr
      000E6A E0               [24] 3422 	movx	a,@dptr
      000E6B FC               [12] 3423 	mov	r4,a
      000E6C 90r00r0D         [24] 3424 	mov	dptr,#_reverse_rev_65536_201
      000E6F EB               [12] 3425 	mov	a,r3
      000E70 2D               [12] 3426 	add	a,r5
      000E71 F0               [24] 3427 	movx	@dptr,a
      000E72 EC               [12] 3428 	mov	a,r4
      000E73 3E               [12] 3429 	addc	a,r6
      000E74 A3               [24] 3430 	inc	dptr
      000E75 F0               [24] 3431 	movx	@dptr,a
      000E76 80 98            [24] 3432 	sjmp	00101$
      000E78                       3433 00103$:
                                   3434 ;	ecen4330_lcd_v3.c:570: return rev;
      000E78 90r00r0D         [24] 3435 	mov	dptr,#_reverse_rev_65536_201
      000E7B E0               [24] 3436 	movx	a,@dptr
      000E7C FE               [12] 3437 	mov	r6,a
      000E7D A3               [24] 3438 	inc	dptr
      000E7E E0               [24] 3439 	movx	a,@dptr
                                   3440 ;	ecen4330_lcd_v3.c:571: }
      000E7F 8E 82            [24] 3441 	mov	dpl,r6
      000E81 F5 83            [12] 3442 	mov	dph,a
      000E83 22               [24] 3443 	ret
                                   3444 ;------------------------------------------------------------
                                   3445 ;Allocation info for local variables in function 'asciiToDec'
                                   3446 ;------------------------------------------------------------
                                   3447 ;d                         Allocated with name '_asciiToDec_d_65536_203'
                                   3448 ;val                       Allocated with name '_asciiToDec_val_65536_204'
                                   3449 ;id                        Allocated with name '_asciiToDec_id_65536_204'
                                   3450 ;------------------------------------------------------------
                                   3451 ;	ecen4330_lcd_v3.c:578: void asciiToDec (__xdata uint8_t d) {
                                   3452 ;	-----------------------------------------
                                   3453 ;	 function asciiToDec
                                   3454 ;	-----------------------------------------
      000E84                       3455 _asciiToDec:
      000E84 E5 82            [12] 3456 	mov	a,dpl
      000E86 90r00r11         [24] 3457 	mov	dptr,#_asciiToDec_d_65536_203
      000E89 F0               [24] 3458 	movx	@dptr,a
                                   3459 ;	ecen4330_lcd_v3.c:581: id = reverse(d);
      000E8A E0               [24] 3460 	movx	a,@dptr
      000E8B F5 82            [12] 3461 	mov	dpl,a
      000E8D 12r0Er07         [24] 3462 	lcall	_reverse
      000E90 E5 82            [12] 3463 	mov	a,dpl
      000E92 85 83 F0         [24] 3464 	mov	b,dph
      000E95 90r00r13         [24] 3465 	mov	dptr,#_asciiToDec_id_65536_204
      000E98 F0               [24] 3466 	movx	@dptr,a
      000E99 E5 F0            [12] 3467 	mov	a,b
      000E9B A3               [24] 3468 	inc	dptr
      000E9C F0               [24] 3469 	movx	@dptr,a
                                   3470 ;	ecen4330_lcd_v3.c:582: while (id >= 1){
      000E9D                       3471 00101$:
      000E9D 90r00r13         [24] 3472 	mov	dptr,#_asciiToDec_id_65536_204
      000EA0 E0               [24] 3473 	movx	a,@dptr
      000EA1 FE               [12] 3474 	mov	r6,a
      000EA2 A3               [24] 3475 	inc	dptr
      000EA3 E0               [24] 3476 	movx	a,@dptr
      000EA4 FF               [12] 3477 	mov	r7,a
      000EA5 C3               [12] 3478 	clr	c
      000EA6 EE               [12] 3479 	mov	a,r6
      000EA7 94 01            [12] 3480 	subb	a,#0x01
      000EA9 EF               [12] 3481 	mov	a,r7
      000EAA 94 00            [12] 3482 	subb	a,#0x00
      000EAC 40 42            [24] 3483 	jc	00104$
                                   3484 ;	ecen4330_lcd_v3.c:584: val = id % 10;
      000EAE 75*00 0A         [24] 3485 	mov	__moduint_PARM_2,#0x0a
      000EB1 75*01 00         [24] 3486 	mov	(__moduint_PARM_2 + 1),#0x00
      000EB4 8E 82            [24] 3487 	mov	dpl,r6
      000EB6 8F 83            [24] 3488 	mov	dph,r7
      000EB8 C0 07            [24] 3489 	push	ar7
      000EBA C0 06            [24] 3490 	push	ar6
      000EBC 12r00r00         [24] 3491 	lcall	__moduint
      000EBF AC 82            [24] 3492 	mov	r4,dpl
      000EC1 D0 06            [24] 3493 	pop	ar6
      000EC3 D0 07            [24] 3494 	pop	ar7
      000EC5 90r00r12         [24] 3495 	mov	dptr,#_asciiToDec_val_65536_204
      000EC8 EC               [12] 3496 	mov	a,r4
      000EC9 F0               [24] 3497 	movx	@dptr,a
                                   3498 ;	ecen4330_lcd_v3.c:585: id = id / 10;
      000ECA 75*00 0A         [24] 3499 	mov	__divuint_PARM_2,#0x0a
      000ECD 75*01 00         [24] 3500 	mov	(__divuint_PARM_2 + 1),#0x00
      000ED0 8E 82            [24] 3501 	mov	dpl,r6
      000ED2 8F 83            [24] 3502 	mov	dph,r7
      000ED4 12r00r00         [24] 3503 	lcall	__divuint
      000ED7 AE 82            [24] 3504 	mov	r6,dpl
      000ED9 AF 83            [24] 3505 	mov	r7,dph
      000EDB 90r00r13         [24] 3506 	mov	dptr,#_asciiToDec_id_65536_204
      000EDE EE               [12] 3507 	mov	a,r6
      000EDF F0               [24] 3508 	movx	@dptr,a
      000EE0 EF               [12] 3509 	mov	a,r7
      000EE1 A3               [24] 3510 	inc	dptr
      000EE2 F0               [24] 3511 	movx	@dptr,a
                                   3512 ;	ecen4330_lcd_v3.c:586: write(val + '0');
      000EE3 90r00r12         [24] 3513 	mov	dptr,#_asciiToDec_val_65536_204
      000EE6 E0               [24] 3514 	movx	a,@dptr
      000EE7 24 30            [12] 3515 	add	a,#0x30
      000EE9 F5 82            [12] 3516 	mov	dpl,a
      000EEB 12r0Cr02         [24] 3517 	lcall	_write
      000EEE 80 AD            [24] 3518 	sjmp	00101$
      000EF0                       3519 00104$:
                                   3520 ;	ecen4330_lcd_v3.c:589: }
      000EF0 22               [24] 3521 	ret
                                   3522 ;------------------------------------------------------------
                                   3523 ;Allocation info for local variables in function 'asciiToHex'
                                   3524 ;------------------------------------------------------------
                                   3525 ;d                         Allocated to registers r7 
                                   3526 ;val                       Allocated to registers r2 
                                   3527 ;store                     Allocated with name '_asciiToHex_store_65536_207'
                                   3528 ;i                         Allocated to registers r6 
                                   3529 ;------------------------------------------------------------
                                   3530 ;	ecen4330_lcd_v3.c:596: void asciiToHex (uint8_t d) {
                                   3531 ;	-----------------------------------------
                                   3532 ;	 function asciiToHex
                                   3533 ;	-----------------------------------------
      000EF1                       3534 _asciiToHex:
      000EF1 AF 82            [24] 3535 	mov	r7,dpl
                                   3536 ;	ecen4330_lcd_v3.c:600: store[0] = '0';
      000EF3 75*4A 30         [24] 3537 	mov	_asciiToHex_store_65536_207,#0x30
                                   3538 ;	ecen4330_lcd_v3.c:601: store[1] = '0';
      000EF6 75*4B 30         [24] 3539 	mov	(_asciiToHex_store_65536_207 + 0x0001),#0x30
                                   3540 ;	ecen4330_lcd_v3.c:603: while (d >= 1) {
      000EF9 7E 00            [12] 3541 	mov	r6,#0x00
      000EFB                       3542 00104$:
      000EFB BF 01 00         [24] 3543 	cjne	r7,#0x01,00122$
      000EFE                       3544 00122$:
      000EFE 40 5A            [24] 3545 	jc	00106$
                                   3546 ;	ecen4330_lcd_v3.c:604: val = d % 16;
      000F00 8F 04            [24] 3547 	mov	ar4,r7
      000F02 7D 00            [12] 3548 	mov	r5,#0x00
      000F04 74 0F            [12] 3549 	mov	a,#0x0f
      000F06 5C               [12] 3550 	anl	a,r4
      000F07 FA               [12] 3551 	mov	r2,a
                                   3552 ;	ecen4330_lcd_v3.c:605: d = d / 16;
      000F08 75*00 10         [24] 3553 	mov	__divsint_PARM_2,#0x10
                                   3554 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000F0B 8D*01            [24] 3555 	mov	(__divsint_PARM_2 + 1),r5
      000F0D 8C 82            [24] 3556 	mov	dpl,r4
      000F0F 8D 83            [24] 3557 	mov	dph,r5
      000F11 C0 06            [24] 3558 	push	ar6
      000F13 C0 02            [24] 3559 	push	ar2
      000F15 12r00r00         [24] 3560 	lcall	__divsint
      000F18 AC 82            [24] 3561 	mov	r4,dpl
      000F1A D0 02            [24] 3562 	pop	ar2
      000F1C D0 06            [24] 3563 	pop	ar6
      000F1E 8C 07            [24] 3564 	mov	ar7,r4
                                   3565 ;	ecen4330_lcd_v3.c:606: if (val <= 9) {
      000F20 EA               [12] 3566 	mov	a,r2
      000F21 24 F6            [12] 3567 	add	a,#0xff - 0x09
      000F23 40 0C            [24] 3568 	jc	00102$
                                   3569 ;	ecen4330_lcd_v3.c:607: store[i] = val + '0';
      000F25 EE               [12] 3570 	mov	a,r6
      000F26 24r4A            [12] 3571 	add	a,#_asciiToHex_store_65536_207
      000F28 F9               [12] 3572 	mov	r1,a
      000F29 8A 05            [24] 3573 	mov	ar5,r2
      000F2B 74 30            [12] 3574 	mov	a,#0x30
      000F2D 2D               [12] 3575 	add	a,r5
      000F2E F7               [12] 3576 	mov	@r1,a
      000F2F 80 26            [24] 3577 	sjmp	00103$
      000F31                       3578 00102$:
                                   3579 ;	ecen4330_lcd_v3.c:609: store[i] = (val % 10) + 'A';
      000F31 EE               [12] 3580 	mov	a,r6
      000F32 24r4A            [12] 3581 	add	a,#_asciiToHex_store_65536_207
      000F34 F9               [12] 3582 	mov	r1,a
      000F35 7D 00            [12] 3583 	mov	r5,#0x00
      000F37 75*00 0A         [24] 3584 	mov	__modsint_PARM_2,#0x0a
                                   3585 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F3A 8D*01            [24] 3586 	mov	(__modsint_PARM_2 + 1),r5
      000F3C 8A 82            [24] 3587 	mov	dpl,r2
      000F3E 8D 83            [24] 3588 	mov	dph,r5
      000F40 C0 07            [24] 3589 	push	ar7
      000F42 C0 06            [24] 3590 	push	ar6
      000F44 C0 01            [24] 3591 	push	ar1
      000F46 12r00r00         [24] 3592 	lcall	__modsint
      000F49 AC 82            [24] 3593 	mov	r4,dpl
      000F4B AD 83            [24] 3594 	mov	r5,dph
      000F4D D0 01            [24] 3595 	pop	ar1
      000F4F D0 06            [24] 3596 	pop	ar6
      000F51 D0 07            [24] 3597 	pop	ar7
      000F53 74 41            [12] 3598 	mov	a,#0x41
      000F55 2C               [12] 3599 	add	a,r4
      000F56 F7               [12] 3600 	mov	@r1,a
      000F57                       3601 00103$:
                                   3602 ;	ecen4330_lcd_v3.c:612: i++;
      000F57 0E               [12] 3603 	inc	r6
      000F58 80 A1            [24] 3604 	sjmp	00104$
      000F5A                       3605 00106$:
                                   3606 ;	ecen4330_lcd_v3.c:615: write(store[1]);
      000F5A 85*4B 82         [24] 3607 	mov	dpl,(_asciiToHex_store_65536_207 + 0x0001)
      000F5D 12r0Cr02         [24] 3608 	lcall	_write
                                   3609 ;	ecen4330_lcd_v3.c:616: write(store[0]);
      000F60 85*4A 82         [24] 3610 	mov	dpl,_asciiToHex_store_65536_207
                                   3611 ;	ecen4330_lcd_v3.c:617: }
      000F63 02r0Cr02         [24] 3612 	ljmp	_write
                                   3613 ;------------------------------------------------------------
                                   3614 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3615 ;------------------------------------------------------------
                                   3616 ;d                         Allocated to registers r7 
                                   3617 ;------------------------------------------------------------
                                   3618 ;	ecen4330_lcd_v3.c:625: uint8_t convertAsciiHex(uint8_t d) {
                                   3619 ;	-----------------------------------------
                                   3620 ;	 function convertAsciiHex
                                   3621 ;	-----------------------------------------
      000F66                       3622 _convertAsciiHex:
                                   3623 ;	ecen4330_lcd_v3.c:626: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F66 E5 82            [12] 3624 	mov	a,dpl
      000F68 FF               [12] 3625 	mov	r7,a
      000F69 24 C6            [12] 3626 	add	a,#0xff - 0x39
      000F6B 92*01            [24] 3627 	mov	_convertAsciiHex_sloc0_1_0,c
      000F6D 40 08            [24] 3628 	jc	00103$
      000F6F 8F 06            [24] 3629 	mov	ar6,r7
      000F71 EE               [12] 3630 	mov	a,r6
      000F72 24 D0            [12] 3631 	add	a,#0xd0
      000F74 FE               [12] 3632 	mov	r6,a
      000F75 80 04            [24] 3633 	sjmp	00104$
      000F77                       3634 00103$:
      000F77 74 C9            [12] 3635 	mov	a,#0xc9
      000F79 2F               [12] 3636 	add	a,r7
      000F7A FE               [12] 3637 	mov	r6,a
      000F7B                       3638 00104$:
      000F7B 8E 82            [24] 3639 	mov	dpl,r6
                                   3640 ;	ecen4330_lcd_v3.c:627: }
      000F7D 22               [24] 3641 	ret
                                   3642 ;------------------------------------------------------------
                                   3643 ;Allocation info for local variables in function 'writeSomeLines'
                                   3644 ;------------------------------------------------------------
                                   3645 ;	ecen4330_lcd_v3.c:633: void writeSomeLines () {
                                   3646 ;	-----------------------------------------
                                   3647 ;	 function writeSomeLines
                                   3648 ;	-----------------------------------------
      000F7E                       3649 _writeSomeLines:
                                   3650 ;	ecen4330_lcd_v3.c:634: fillScreen(RED);
      000F7E 90 F8 00         [24] 3651 	mov	dptr,#0xf800
      000F81 12r08r69         [24] 3652 	lcall	_fillScreen
                                   3653 ;	ecen4330_lcd_v3.c:636: delay(20);
      000F84 90 00 14         [24] 3654 	mov	dptr,#0x0014
      000F87 12r00r46         [24] 3655 	lcall	_delay
                                   3656 ;	ecen4330_lcd_v3.c:637: fillScreen(GREEN);
      000F8A 90 07 E0         [24] 3657 	mov	dptr,#0x07e0
      000F8D 12r08r69         [24] 3658 	lcall	_fillScreen
                                   3659 ;	ecen4330_lcd_v3.c:639: delay(20);
      000F90 90 00 14         [24] 3660 	mov	dptr,#0x0014
      000F93 12r00r46         [24] 3661 	lcall	_delay
                                   3662 ;	ecen4330_lcd_v3.c:641: setRotation(0);
      000F96 75 82 00         [24] 3663 	mov	dpl,#0x00
      000F99 12r01r0D         [24] 3664 	lcall	_setRotation
                                   3665 ;	ecen4330_lcd_v3.c:642: fillScreen(BLACK);
      000F9C 90 00 00         [24] 3666 	mov	dptr,#0x0000
      000F9F 12r08r69         [24] 3667 	lcall	_fillScreen
                                   3668 ;	ecen4330_lcd_v3.c:643: testCircles(20, RED);
      000FA2 75*2E 00         [24] 3669 	mov	_testCircles_PARM_2,#0x00
      000FA5 75*2F F8         [24] 3670 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000FA8 75 82 14         [24] 3671 	mov	dpl,#0x14
      000FAB 12r06rC2         [24] 3672 	lcall	_testCircles
                                   3673 ;	ecen4330_lcd_v3.c:644: delay(100);
      000FAE 90 00 64         [24] 3674 	mov	dptr,#0x0064
      000FB1 12r00r46         [24] 3675 	lcall	_delay
                                   3676 ;	ecen4330_lcd_v3.c:645: fillScreen(BLACK);
      000FB4 90 00 00         [24] 3677 	mov	dptr,#0x0000
      000FB7 12r08r69         [24] 3678 	lcall	_fillScreen
                                   3679 ;	ecen4330_lcd_v3.c:646: setTextSize(5);
      000FBA 75 82 05         [24] 3680 	mov	dpl,#0x05
      000FBD 12r00rF5         [24] 3681 	lcall	_setTextSize
                                   3682 ;	ecen4330_lcd_v3.c:647: setTextColor(CYAN, BLACK);
      000FC0 E4               [12] 3683 	clr	a
      000FC1 F5*00            [12] 3684 	mov	_setTextColor_PARM_2,a
      000FC3 F5*01            [12] 3685 	mov	(_setTextColor_PARM_2 + 1),a
      000FC5 90 07 FF         [24] 3686 	mov	dptr,#0x07ff
      000FC8 12r00rE8         [24] 3687 	lcall	_setTextColor
                                   3688 ;	ecen4330_lcd_v3.c:648: LCD_string_write("Welcome\n");
      000FCB 90r05r0B         [24] 3689 	mov	dptr,#___str_0
      000FCE 75 F0 80         [24] 3690 	mov	b,#0x80
      000FD1 12r0Cr70         [24] 3691 	lcall	_LCD_string_write
                                   3692 ;	ecen4330_lcd_v3.c:649: setTextSize(3);
      000FD4 75 82 03         [24] 3693 	mov	dpl,#0x03
      000FD7 12r00rF5         [24] 3694 	lcall	_setTextSize
                                   3695 ;	ecen4330_lcd_v3.c:650: LCD_string_write("ECEN-4330\n");
      000FDA 90r05r14         [24] 3696 	mov	dptr,#___str_1
      000FDD 75 F0 80         [24] 3697 	mov	b,#0x80
      000FE0 12r0Cr70         [24] 3698 	lcall	_LCD_string_write
                                   3699 ;	ecen4330_lcd_v3.c:651: LCD_string_write("Rotation 0");
      000FE3 90r05r1F         [24] 3700 	mov	dptr,#___str_2
      000FE6 75 F0 80         [24] 3701 	mov	b,#0x80
      000FE9 12r0Cr70         [24] 3702 	lcall	_LCD_string_write
                                   3703 ;	ecen4330_lcd_v3.c:652: delay(200);
      000FEC 90 00 C8         [24] 3704 	mov	dptr,#0x00c8
      000FEF 12r00r46         [24] 3705 	lcall	_delay
                                   3706 ;	ecen4330_lcd_v3.c:653: fillScreen(BLACK);
      000FF2 90 00 00         [24] 3707 	mov	dptr,#0x0000
      000FF5 12r08r69         [24] 3708 	lcall	_fillScreen
                                   3709 ;	ecen4330_lcd_v3.c:654: setRotation(1);
      000FF8 75 82 01         [24] 3710 	mov	dpl,#0x01
      000FFB 12r01r0D         [24] 3711 	lcall	_setRotation
                                   3712 ;	ecen4330_lcd_v3.c:655: setCursor(0,0);
      000FFE E4               [12] 3713 	clr	a
      000FFF F5*00            [12] 3714 	mov	_setCursor_PARM_2,a
      001001 F5*01            [12] 3715 	mov	(_setCursor_PARM_2 + 1),a
      001003 90 00 00         [24] 3716 	mov	dptr,#0x0000
      001006 12r00rDB         [24] 3717 	lcall	_setCursor
                                   3718 ;	ecen4330_lcd_v3.c:656: LCD_string_write("Rotation 1");
      001009 90r05r2A         [24] 3719 	mov	dptr,#___str_3
      00100C 75 F0 80         [24] 3720 	mov	b,#0x80
      00100F 12r0Cr70         [24] 3721 	lcall	_LCD_string_write
                                   3722 ;	ecen4330_lcd_v3.c:657: delay(500);
      001012 90 01 F4         [24] 3723 	mov	dptr,#0x01f4
      001015 12r00r46         [24] 3724 	lcall	_delay
                                   3725 ;	ecen4330_lcd_v3.c:658: fillScreen(BLACK);
      001018 90 00 00         [24] 3726 	mov	dptr,#0x0000
      00101B 12r08r69         [24] 3727 	lcall	_fillScreen
                                   3728 ;	ecen4330_lcd_v3.c:659: setRotation(2);
      00101E 75 82 02         [24] 3729 	mov	dpl,#0x02
      001021 12r01r0D         [24] 3730 	lcall	_setRotation
                                   3731 ;	ecen4330_lcd_v3.c:660: setCursor(0,0);
      001024 E4               [12] 3732 	clr	a
      001025 F5*00            [12] 3733 	mov	_setCursor_PARM_2,a
      001027 F5*01            [12] 3734 	mov	(_setCursor_PARM_2 + 1),a
      001029 90 00 00         [24] 3735 	mov	dptr,#0x0000
      00102C 12r00rDB         [24] 3736 	lcall	_setCursor
                                   3737 ;	ecen4330_lcd_v3.c:661: LCD_string_write("Rotation 2");
      00102F 90r05r35         [24] 3738 	mov	dptr,#___str_4
      001032 75 F0 80         [24] 3739 	mov	b,#0x80
      001035 12r0Cr70         [24] 3740 	lcall	_LCD_string_write
                                   3741 ;	ecen4330_lcd_v3.c:662: delay(500);
      001038 90 01 F4         [24] 3742 	mov	dptr,#0x01f4
      00103B 12r00r46         [24] 3743 	lcall	_delay
                                   3744 ;	ecen4330_lcd_v3.c:663: fillScreen(BLACK);
      00103E 90 00 00         [24] 3745 	mov	dptr,#0x0000
      001041 12r08r69         [24] 3746 	lcall	_fillScreen
                                   3747 ;	ecen4330_lcd_v3.c:664: setRotation(3);
      001044 75 82 03         [24] 3748 	mov	dpl,#0x03
      001047 12r01r0D         [24] 3749 	lcall	_setRotation
                                   3750 ;	ecen4330_lcd_v3.c:665: setCursor(0,0);
      00104A E4               [12] 3751 	clr	a
      00104B F5*00            [12] 3752 	mov	_setCursor_PARM_2,a
      00104D F5*01            [12] 3753 	mov	(_setCursor_PARM_2 + 1),a
      00104F 90 00 00         [24] 3754 	mov	dptr,#0x0000
      001052 12r00rDB         [24] 3755 	lcall	_setCursor
                                   3756 ;	ecen4330_lcd_v3.c:666: delay(200);
      001055 90 00 C8         [24] 3757 	mov	dptr,#0x00c8
      001058 12r00r46         [24] 3758 	lcall	_delay
                                   3759 ;	ecen4330_lcd_v3.c:667: LCD_string_write("Rotation 3");
      00105B 90r05r40         [24] 3760 	mov	dptr,#___str_5
      00105E 75 F0 80         [24] 3761 	mov	b,#0x80
      001061 12r0Cr70         [24] 3762 	lcall	_LCD_string_write
                                   3763 ;	ecen4330_lcd_v3.c:668: delay(200);
      001064 90 00 C8         [24] 3764 	mov	dptr,#0x00c8
                                   3765 ;	ecen4330_lcd_v3.c:669: }
      001067 02r00r46         [24] 3766 	ljmp	_delay
                                   3767 ;------------------------------------------------------------
                                   3768 ;Allocation info for local variables in function 'getAddress'
                                   3769 ;------------------------------------------------------------
                                   3770 ;input                     Allocated with name '_getAddress_input_65536_232'
                                   3771 ;hex                       Allocated with name '_getAddress_hex_65536_232'
                                   3772 ;i                         Allocated with name '_getAddress_i_65536_232'
                                   3773 ;address                   Allocated with name '_getAddress_address_65536_232'
                                   3774 ;------------------------------------------------------------
                                   3775 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3776 ;	-----------------------------------------
                                   3777 ;	 function getAddress
                                   3778 ;	-----------------------------------------
      00106A                       3779 _getAddress:
                                   3780 ;	getFunctions.c:16: address = 0;
      00106A 90r00r15         [24] 3781 	mov	dptr,#_getAddress_address_65536_232
      00106D E4               [12] 3782 	clr	a
      00106E F0               [24] 3783 	movx	@dptr,a
      00106F A3               [24] 3784 	inc	dptr
      001070 F0               [24] 3785 	movx	@dptr,a
                                   3786 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      001071 7F 00            [12] 3787 	mov	r7,#0x00
      001073                       3788 00104$:
                                   3789 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      001073 C0 07            [24] 3790 	push	ar7
      001075 12r0Dr0F         [24] 3791 	lcall	_keyDetect
                                   3792 ;	getFunctions.c:21: write(input);						// display nibble to user
      001078 AE 82            [24] 3793 	mov  r6,dpl
      00107A C0 06            [24] 3794 	push	ar6
      00107C 12r0Cr02         [24] 3795 	lcall	_write
      00107F D0 06            [24] 3796 	pop	ar6
                                   3797 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      001081 8E 82            [24] 3798 	mov	dpl,r6
      001083 12r0Fr66         [24] 3799 	lcall	_convertAsciiHex
      001086 AE 82            [24] 3800 	mov	r6,dpl
      001088 D0 07            [24] 3801 	pop	ar7
                                   3802 ;	getFunctions.c:25: address = address | hex;
      00108A 90r00r15         [24] 3803 	mov	dptr,#_getAddress_address_65536_232
      00108D E0               [24] 3804 	movx	a,@dptr
      00108E FC               [12] 3805 	mov	r4,a
      00108F A3               [24] 3806 	inc	dptr
      001090 E0               [24] 3807 	movx	a,@dptr
      001091 FD               [12] 3808 	mov	r5,a
      001092 7B 00            [12] 3809 	mov	r3,#0x00
      001094 90r00r15         [24] 3810 	mov	dptr,#_getAddress_address_65536_232
      001097 EE               [12] 3811 	mov	a,r6
      001098 4C               [12] 3812 	orl	a,r4
      001099 F0               [24] 3813 	movx	@dptr,a
      00109A EB               [12] 3814 	mov	a,r3
      00109B 4D               [12] 3815 	orl	a,r5
      00109C A3               [24] 3816 	inc	dptr
      00109D F0               [24] 3817 	movx	@dptr,a
                                   3818 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      00109E BF 03 02         [24] 3819 	cjne	r7,#0x03,00121$
      0010A1 80 1C            [24] 3820 	sjmp	00105$
      0010A3                       3821 00121$:
      0010A3 90r00r15         [24] 3822 	mov	dptr,#_getAddress_address_65536_232
      0010A6 E0               [24] 3823 	movx	a,@dptr
      0010A7 FD               [12] 3824 	mov	r5,a
      0010A8 A3               [24] 3825 	inc	dptr
      0010A9 E0               [24] 3826 	movx	a,@dptr
      0010AA C4               [12] 3827 	swap	a
      0010AB 54 F0            [12] 3828 	anl	a,#0xf0
      0010AD CD               [12] 3829 	xch	a,r5
      0010AE C4               [12] 3830 	swap	a
      0010AF CD               [12] 3831 	xch	a,r5
      0010B0 6D               [12] 3832 	xrl	a,r5
      0010B1 CD               [12] 3833 	xch	a,r5
      0010B2 54 F0            [12] 3834 	anl	a,#0xf0
      0010B4 CD               [12] 3835 	xch	a,r5
      0010B5 6D               [12] 3836 	xrl	a,r5
      0010B6 FE               [12] 3837 	mov	r6,a
      0010B7 90r00r15         [24] 3838 	mov	dptr,#_getAddress_address_65536_232
      0010BA ED               [12] 3839 	mov	a,r5
      0010BB F0               [24] 3840 	movx	@dptr,a
      0010BC EE               [12] 3841 	mov	a,r6
      0010BD A3               [24] 3842 	inc	dptr
      0010BE F0               [24] 3843 	movx	@dptr,a
      0010BF                       3844 00105$:
                                   3845 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      0010BF 0F               [12] 3846 	inc	r7
      0010C0 BF 04 00         [24] 3847 	cjne	r7,#0x04,00122$
      0010C3                       3848 00122$:
      0010C3 40 AE            [24] 3849 	jc	00104$
                                   3850 ;	getFunctions.c:28: return address;
      0010C5 90r00r15         [24] 3851 	mov	dptr,#_getAddress_address_65536_232
      0010C8 E0               [24] 3852 	movx	a,@dptr
      0010C9 FE               [12] 3853 	mov	r6,a
      0010CA A3               [24] 3854 	inc	dptr
      0010CB E0               [24] 3855 	movx	a,@dptr
                                   3856 ;	getFunctions.c:29: }
      0010CC 8E 82            [24] 3857 	mov	dpl,r6
      0010CE F5 83            [12] 3858 	mov	dph,a
      0010D0 22               [24] 3859 	ret
                                   3860 ;------------------------------------------------------------
                                   3861 ;Allocation info for local variables in function 'getByte'
                                   3862 ;------------------------------------------------------------
                                   3863 ;input                     Allocated with name '_getByte_input_65536_235'
                                   3864 ;hex                       Allocated with name '_getByte_hex_65536_235'
                                   3865 ;byte                      Allocated with name '_getByte_byte_65536_235'
                                   3866 ;i                         Allocated with name '_getByte_i_65536_235'
                                   3867 ;------------------------------------------------------------
                                   3868 ;	getFunctions.c:36: uint8_t getByte() {
                                   3869 ;	-----------------------------------------
                                   3870 ;	 function getByte
                                   3871 ;	-----------------------------------------
      0010D1                       3872 _getByte:
                                   3873 ;	getFunctions.c:40: byte = 0;
      0010D1 90r00r17         [24] 3874 	mov	dptr,#_getByte_byte_65536_235
      0010D4 E4               [12] 3875 	clr	a
      0010D5 F0               [24] 3876 	movx	@dptr,a
                                   3877 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010D6 7F 00            [12] 3878 	mov	r7,#0x00
      0010D8                       3879 00104$:
                                   3880 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      0010D8 C0 07            [24] 3881 	push	ar7
      0010DA 12r0Dr0F         [24] 3882 	lcall	_keyDetect
                                   3883 ;	getFunctions.c:45: write(input);						// display nibble to user
      0010DD AE 82            [24] 3884 	mov  r6,dpl
      0010DF C0 06            [24] 3885 	push	ar6
      0010E1 12r0Cr02         [24] 3886 	lcall	_write
      0010E4 D0 06            [24] 3887 	pop	ar6
                                   3888 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      0010E6 8E 82            [24] 3889 	mov	dpl,r6
      0010E8 12r0Fr66         [24] 3890 	lcall	_convertAsciiHex
      0010EB AE 82            [24] 3891 	mov	r6,dpl
      0010ED D0 07            [24] 3892 	pop	ar7
                                   3893 ;	getFunctions.c:49: byte = byte | hex;
      0010EF 90r00r17         [24] 3894 	mov	dptr,#_getByte_byte_65536_235
      0010F2 E0               [24] 3895 	movx	a,@dptr
      0010F3 4E               [12] 3896 	orl	a,r6
      0010F4 F0               [24] 3897 	movx	@dptr,a
                                   3898 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010F5 BF 01 02         [24] 3899 	cjne	r7,#0x01,00121$
      0010F8 80 09            [24] 3900 	sjmp	00105$
      0010FA                       3901 00121$:
      0010FA 90r00r17         [24] 3902 	mov	dptr,#_getByte_byte_65536_235
      0010FD E0               [24] 3903 	movx	a,@dptr
      0010FE C4               [12] 3904 	swap	a
      0010FF 54 F0            [12] 3905 	anl	a,#0xf0
      001101 FE               [12] 3906 	mov	r6,a
      001102 F0               [24] 3907 	movx	@dptr,a
      001103                       3908 00105$:
                                   3909 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      001103 0F               [12] 3910 	inc	r7
      001104 BF 02 00         [24] 3911 	cjne	r7,#0x02,00122$
      001107                       3912 00122$:
      001107 40 CF            [24] 3913 	jc	00104$
                                   3914 ;	getFunctions.c:52: return byte;
      001109 90r00r17         [24] 3915 	mov	dptr,#_getByte_byte_65536_235
      00110C E0               [24] 3916 	movx	a,@dptr
                                   3917 ;	getFunctions.c:53: }
      00110D F5 82            [12] 3918 	mov	dpl,a
      00110F 22               [24] 3919 	ret
                                   3920 ;------------------------------------------------------------
                                   3921 ;Allocation info for local variables in function 'dumpPage'
                                   3922 ;------------------------------------------------------------
                                   3923 ;start                     Allocated with name '_dumpPage_start_65536_238'
                                   3924 ;data                      Allocated to registers r4 
                                   3925 ;ramAddress                Allocated with name '_dumpPage_ramAddress_65537_240'
                                   3926 ;sloc0                     Allocated with name '_dumpPage_sloc0_1_0'
                                   3927 ;n                         Allocated with name '_dumpPage_PARM_2'
                                   3928 ;type                      Allocated with name '_dumpPage_PARM_3'
                                   3929 ;i                         Allocated with name '_dumpPage_i_65537_240'
                                   3930 ;j                         Allocated with name '_dumpPage_j_65537_240'
                                   3931 ;high                      Allocated with name '_dumpPage_high_65537_240'
                                   3932 ;low                       Allocated with name '_dumpPage_low_65537_240'
                                   3933 ;------------------------------------------------------------
                                   3934 ;	dump2.c:8: void dumpPage(uint16_t start, __xdata uint8_t n, __xdata uint8_t type) {
                                   3935 ;	-----------------------------------------
                                   3936 ;	 function dumpPage
                                   3937 ;	-----------------------------------------
      001110                       3938 _dumpPage:
      001110 85 82*4C         [24] 3939 	mov	_dumpPage_start_65536_238,dpl
      001113 85 83*4D         [24] 3940 	mov	(_dumpPage_start_65536_238 + 1),dph
                                   3941 ;	dump2.c:10: fillScreen(GRAY);
      001116 90 D6 BA         [24] 3942 	mov	dptr,#0xd6ba
      001119 12r08r69         [24] 3943 	lcall	_fillScreen
                                   3944 ;	dump2.c:11: setCursor(0, 0);
      00111C E4               [12] 3945 	clr	a
      00111D F5*00            [12] 3946 	mov	_setCursor_PARM_2,a
      00111F F5*01            [12] 3947 	mov	(_setCursor_PARM_2 + 1),a
      001121 90 00 00         [24] 3948 	mov	dptr,#0x0000
      001124 12r00rDB         [24] 3949 	lcall	_setCursor
                                   3950 ;	dump2.c:12: setTextSize(2);
      001127 75 82 02         [24] 3951 	mov	dpl,#0x02
      00112A 12r00rF5         [24] 3952 	lcall	_setTextSize
                                   3953 ;	dump2.c:24: for (i = 0; i < n * type; i += type) {
      00112D 90r00r1A         [24] 3954 	mov	dptr,#_dumpPage_i_65537_240
      001130 E4               [12] 3955 	clr	a
      001131 F0               [24] 3956 	movx	@dptr,a
      001132 90r00r19         [24] 3957 	mov	dptr,#_dumpPage_PARM_3
      001135 E0               [24] 3958 	movx	a,@dptr
      001136 FD               [12] 3959 	mov	r5,a
      001137 90r00r18         [24] 3960 	mov	dptr,#_dumpPage_PARM_2
      00113A E0               [24] 3961 	movx	a,@dptr
      00113B F5 F0            [12] 3962 	mov	b,a
      00113D ED               [12] 3963 	mov	a,r5
      00113E A4               [48] 3964 	mul	ab
      00113F FB               [12] 3965 	mov	r3,a
      001140 AC F0            [24] 3966 	mov	r4,b
      001142                       3967 00111$:
      001142 90r00r1A         [24] 3968 	mov	dptr,#_dumpPage_i_65537_240
      001145 E0               [24] 3969 	movx	a,@dptr
      001146 FA               [12] 3970 	mov	r2,a
      001147 F8               [12] 3971 	mov	r0,a
      001148 79 00            [12] 3972 	mov	r1,#0x00
      00114A C3               [12] 3973 	clr	c
      00114B E8               [12] 3974 	mov	a,r0
      00114C 9B               [12] 3975 	subb	a,r3
      00114D E9               [12] 3976 	mov	a,r1
      00114E 64 80            [12] 3977 	xrl	a,#0x80
      001150 8C F0            [24] 3978 	mov	b,r4
      001152 63 F0 80         [24] 3979 	xrl	b,#0x80
      001155 95 F0            [12] 3980 	subb	a,b
      001157 40 01            [24] 3981 	jc	00140$
      001159 22               [24] 3982 	ret
      00115A                       3983 00140$:
                                   3984 ;	dump2.c:26: if ((i * type) + start == __END_RAM__) break;
      00115A 8A F0            [24] 3985 	mov	b,r2
      00115C ED               [12] 3986 	mov	a,r5
      00115D A4               [48] 3987 	mul	ab
      00115E F8               [12] 3988 	mov	r0,a
      00115F A9 F0            [24] 3989 	mov	r1,b
      001161 88*50            [24] 3990 	mov	_dumpPage_sloc0_1_0,r0
      001163 89*51            [24] 3991 	mov	(_dumpPage_sloc0_1_0 + 1),r1
      001165 E5*4C            [12] 3992 	mov	a,_dumpPage_start_65536_238
      001167 25*50            [12] 3993 	add	a,_dumpPage_sloc0_1_0
      001169 FE               [12] 3994 	mov	r6,a
      00116A E5*4D            [12] 3995 	mov	a,(_dumpPage_start_65536_238 + 1)
      00116C 35*51            [12] 3996 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      00116E FF               [12] 3997 	mov	r7,a
      00116F BE FF 04         [24] 3998 	cjne	r6,#0xff,00141$
      001172 BF FF 01         [24] 3999 	cjne	r7,#0xff,00141$
      001175 22               [24] 4000 	ret
      001176                       4001 00141$:
                                   4002 ;	dump2.c:29: IOM = 0;
                                   4003 ;	assignBit
      001176 C2 B4            [12] 4004 	clr	_P3_4
                                   4005 ;	dump2.c:30: ramAddress = (uint16_t __xdata*)((i * type) + start);
      001178 E5*4C            [12] 4006 	mov	a,_dumpPage_start_65536_238
      00117A 25*50            [12] 4007 	add	a,_dumpPage_sloc0_1_0
      00117C FE               [12] 4008 	mov	r6,a
      00117D E5*4D            [12] 4009 	mov	a,(_dumpPage_start_65536_238 + 1)
      00117F 35*51            [12] 4010 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      001181 FF               [12] 4011 	mov	r7,a
      001182 8E*4E            [24] 4012 	mov	_dumpPage_ramAddress_65537_240,r6
      001184 8F*4F            [24] 4013 	mov	(_dumpPage_ramAddress_65537_240 + 1),r7
                                   4014 ;	dump2.c:31: IOM = 1;
                                   4015 ;	assignBit
      001186 D2 B4            [12] 4016 	setb	_P3_4
                                   4017 ;	dump2.c:33: high = HIGHBYTE(start + (i * type));
      001188 AE*4C            [24] 4018 	mov	r6,_dumpPage_start_65536_238
      00118A AF*4D            [24] 4019 	mov	r7,(_dumpPage_start_65536_238 + 1)
      00118C E8               [12] 4020 	mov	a,r0
      00118D 2E               [12] 4021 	add	a,r6
      00118E E9               [12] 4022 	mov	a,r1
      00118F 3F               [12] 4023 	addc	a,r7
      001190 F5 82            [12] 4024 	mov	dpl,a
                                   4025 ;	dump2.c:34: low = LOWBYTE(start + (i * type));
      001192 AE*4C            [24] 4026 	mov	r6,_dumpPage_start_65536_238
      001194 8A F0            [24] 4027 	mov	b,r2
      001196 ED               [12] 4028 	mov	a,r5
      001197 A4               [48] 4029 	mul	ab
      001198 2E               [12] 4030 	add	a,r6
      001199 FE               [12] 4031 	mov	r6,a
                                   4032 ;	dump2.c:37: asciiToHex(high);
      00119A C0 06            [24] 4033 	push	ar6
      00119C C0 05            [24] 4034 	push	ar5
      00119E C0 04            [24] 4035 	push	ar4
      0011A0 C0 03            [24] 4036 	push	ar3
      0011A2 C0 02            [24] 4037 	push	ar2
      0011A4 12r0ErF1         [24] 4038 	lcall	_asciiToHex
      0011A7 D0 02            [24] 4039 	pop	ar2
      0011A9 D0 03            [24] 4040 	pop	ar3
      0011AB D0 04            [24] 4041 	pop	ar4
      0011AD D0 05            [24] 4042 	pop	ar5
      0011AF D0 06            [24] 4043 	pop	ar6
                                   4044 ;	dump2.c:38: asciiToHex(low);
      0011B1 8E 82            [24] 4045 	mov	dpl,r6
      0011B3 C0 05            [24] 4046 	push	ar5
      0011B5 C0 04            [24] 4047 	push	ar4
      0011B7 C0 03            [24] 4048 	push	ar3
      0011B9 C0 02            [24] 4049 	push	ar2
      0011BB 12r0ErF1         [24] 4050 	lcall	_asciiToHex
                                   4051 ;	dump2.c:39: LCD_string_write(": ");
      0011BE 90r05r4B         [24] 4052 	mov	dptr,#___str_6
      0011C1 75 F0 80         [24] 4053 	mov	b,#0x80
      0011C4 12r0Cr70         [24] 4054 	lcall	_LCD_string_write
      0011C7 D0 02            [24] 4055 	pop	ar2
      0011C9 D0 03            [24] 4056 	pop	ar3
      0011CB D0 04            [24] 4057 	pop	ar4
      0011CD D0 05            [24] 4058 	pop	ar5
                                   4059 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011CF 8A F0            [24] 4060 	mov	b,r2
      0011D1 ED               [12] 4061 	mov	a,r5
      0011D2 A4               [48] 4062 	mul	ab
      0011D3 FE               [12] 4063 	mov	r6,a
      0011D4 AF F0            [24] 4064 	mov	r7,b
      0011D6 A9*4E            [24] 4065 	mov	r1,_dumpPage_ramAddress_65537_240
      0011D8 AA*4F            [24] 4066 	mov	r2,(_dumpPage_ramAddress_65537_240 + 1)
      0011DA 78 00            [12] 4067 	mov	r0,#0x00
      0011DC                       4068 00108$:
      0011DC C3               [12] 4069 	clr	c
      0011DD E8               [12] 4070 	mov	a,r0
      0011DE 9D               [12] 4071 	subb	a,r5
      0011DF 50 61            [24] 4072 	jnc	00105$
                                   4073 ;	dump2.c:43: if ((i * type) + start == __END_RAM__) break;
      0011E1 C0 03            [24] 4074 	push	ar3
      0011E3 C0 04            [24] 4075 	push	ar4
      0011E5 8E 03            [24] 4076 	mov	ar3,r6
      0011E7 8F 04            [24] 4077 	mov	ar4,r7
      0011E9 E5*4C            [12] 4078 	mov	a,_dumpPage_start_65536_238
      0011EB 2B               [12] 4079 	add	a,r3
      0011EC FB               [12] 4080 	mov	r3,a
      0011ED E5*4D            [12] 4081 	mov	a,(_dumpPage_start_65536_238 + 1)
      0011EF 3C               [12] 4082 	addc	a,r4
      0011F0 FC               [12] 4083 	mov	r4,a
      0011F1 BB FF 09         [24] 4084 	cjne	r3,#0xff,00143$
      0011F4 BC FF 06         [24] 4085 	cjne	r4,#0xff,00143$
      0011F7 D0 04            [24] 4086 	pop	ar4
      0011F9 D0 03            [24] 4087 	pop	ar3
      0011FB 80 45            [24] 4088 	sjmp	00105$
      0011FD                       4089 00143$:
      0011FD D0 04            [24] 4090 	pop	ar4
      0011FF D0 03            [24] 4091 	pop	ar3
                                   4092 ;	dump2.c:46: IOM = 0;
      001201 C0 03            [24] 4093 	push	ar3
      001203 C0 04            [24] 4094 	push	ar4
                                   4095 ;	assignBit
      001205 C2 B4            [12] 4096 	clr	_P3_4
                                   4097 ;	dump2.c:47: data = *ramAddress;
      001207 89 82            [24] 4098 	mov	dpl,r1
      001209 8A 83            [24] 4099 	mov	dph,r2
      00120B E0               [24] 4100 	movx	a,@dptr
      00120C FC               [12] 4101 	mov	r4,a
                                   4102 ;	dump2.c:48: &ramAddress++;
      00120D 74 02            [12] 4103 	mov	a,#0x02
      00120F 29               [12] 4104 	add	a,r1
      001210 F9               [12] 4105 	mov	r1,a
      001211 E4               [12] 4106 	clr	a
      001212 3A               [12] 4107 	addc	a,r2
      001213 FA               [12] 4108 	mov	r2,a
                                   4109 ;	dump2.c:49: IOM = 1;
                                   4110 ;	assignBit
      001214 D2 B4            [12] 4111 	setb	_P3_4
                                   4112 ;	dump2.c:51: asciiToHex(data);
      001216 8C 82            [24] 4113 	mov	dpl,r4
      001218 C0 07            [24] 4114 	push	ar7
      00121A C0 06            [24] 4115 	push	ar6
      00121C C0 05            [24] 4116 	push	ar5
      00121E C0 04            [24] 4117 	push	ar4
      001220 C0 03            [24] 4118 	push	ar3
      001222 C0 02            [24] 4119 	push	ar2
      001224 C0 01            [24] 4120 	push	ar1
      001226 C0 00            [24] 4121 	push	ar0
      001228 12r0ErF1         [24] 4122 	lcall	_asciiToHex
      00122B D0 00            [24] 4123 	pop	ar0
      00122D D0 01            [24] 4124 	pop	ar1
      00122F D0 02            [24] 4125 	pop	ar2
      001231 D0 03            [24] 4126 	pop	ar3
      001233 D0 04            [24] 4127 	pop	ar4
      001235 D0 05            [24] 4128 	pop	ar5
      001237 D0 06            [24] 4129 	pop	ar6
      001239 D0 07            [24] 4130 	pop	ar7
                                   4131 ;	dump2.c:41: for (j = 0; j < type; j++) {
      00123B 08               [12] 4132 	inc	r0
      00123C D0 04            [24] 4133 	pop	ar4
      00123E D0 03            [24] 4134 	pop	ar3
      001240 80 9A            [24] 4135 	sjmp	00108$
      001242                       4136 00105$:
                                   4137 ;	dump2.c:54: write('\n');
      001242 75 82 0A         [24] 4138 	mov	dpl,#0x0a
      001245 C0 05            [24] 4139 	push	ar5
      001247 C0 04            [24] 4140 	push	ar4
      001249 C0 03            [24] 4141 	push	ar3
      00124B 12r0Cr02         [24] 4142 	lcall	_write
      00124E D0 03            [24] 4143 	pop	ar3
      001250 D0 04            [24] 4144 	pop	ar4
      001252 D0 05            [24] 4145 	pop	ar5
                                   4146 ;	dump2.c:24: for (i = 0; i < n * type; i += type) {
      001254 90r00r1A         [24] 4147 	mov	dptr,#_dumpPage_i_65537_240
      001257 E0               [24] 4148 	movx	a,@dptr
      001258 2D               [12] 4149 	add	a,r5
      001259 F0               [24] 4150 	movx	@dptr,a
                                   4151 ;	dump2.c:56: }
      00125A 02r11r42         [24] 4152 	ljmp	00111$
                                   4153 ;------------------------------------------------------------
                                   4154 ;Allocation info for local variables in function 'dump'
                                   4155 ;------------------------------------------------------------
                                   4156 ;type                      Allocated with name '_dump_type_65537_247'
                                   4157 ;size                      Allocated with name '_dump_size_65537_247'
                                   4158 ;page                      Allocated with name '_dump_page_65537_247'
                                   4159 ;input                     Allocated with name '_dump_input_65537_247'
                                   4160 ;pages                     Allocated with name '_dump_pages_65537_247'
                                   4161 ;address                   Allocated with name '_dump_address_65537_247'
                                   4162 ;------------------------------------------------------------
                                   4163 ;	dump2.c:62: void dump(void) {
                                   4164 ;	-----------------------------------------
                                   4165 ;	 function dump
                                   4166 ;	-----------------------------------------
      00125D                       4167 _dump:
                                   4168 ;	dump2.c:64: fillScreen(GRAY);
      00125D 90 D6 BA         [24] 4169 	mov	dptr,#0xd6ba
      001260 12r08r69         [24] 4170 	lcall	_fillScreen
                                   4171 ;	dump2.c:65: setCursor(0, 0);
      001263 E4               [12] 4172 	clr	a
      001264 F5*00            [12] 4173 	mov	_setCursor_PARM_2,a
      001266 F5*01            [12] 4174 	mov	(_setCursor_PARM_2 + 1),a
      001268 90 00 00         [24] 4175 	mov	dptr,#0x0000
      00126B 12r00rDB         [24] 4176 	lcall	_setCursor
                                   4177 ;	dump2.c:66: setTextSize(2);
      00126E 75 82 02         [24] 4178 	mov	dpl,#0x02
      001271 12r00rF5         [24] 4179 	lcall	_setTextSize
                                   4180 ;	dump2.c:76: page = 1;
      001274 90r00r1C         [24] 4181 	mov	dptr,#_dump_page_65537_247
      001277 74 01            [12] 4182 	mov	a,#0x01
      001279 F0               [24] 4183 	movx	@dptr,a
                                   4184 ;	dump2.c:79: LCD_string_write("Enter start address:\n");
      00127A 90r05r4E         [24] 4185 	mov	dptr,#___str_7
      00127D 75 F0 80         [24] 4186 	mov	b,#0x80
      001280 12r0Cr70         [24] 4187 	lcall	_LCD_string_write
                                   4188 ;	dump2.c:80: address = getAddress();
      001283 12r10r6A         [24] 4189 	lcall	_getAddress
      001286 AE 82            [24] 4190 	mov	r6,dpl
      001288 AF 83            [24] 4191 	mov	r7,dph
      00128A 90r00r1D         [24] 4192 	mov	dptr,#_dump_address_65537_247
      00128D EE               [12] 4193 	mov	a,r6
      00128E F0               [24] 4194 	movx	@dptr,a
      00128F EF               [12] 4195 	mov	a,r7
      001290 A3               [24] 4196 	inc	dptr
      001291 F0               [24] 4197 	movx	@dptr,a
                                   4198 ;	dump2.c:81: write('\n');
      001292 75 82 0A         [24] 4199 	mov	dpl,#0x0a
      001295 C0 07            [24] 4200 	push	ar7
      001297 C0 06            [24] 4201 	push	ar6
      001299 12r0Cr02         [24] 4202 	lcall	_write
                                   4203 ;	dump2.c:84: LCD_string_write("Enter data type\n");
      00129C 90r05r64         [24] 4204 	mov	dptr,#___str_8
      00129F 75 F0 80         [24] 4205 	mov	b,#0x80
      0012A2 12r0Cr70         [24] 4206 	lcall	_LCD_string_write
                                   4207 ;	dump2.c:85: LCD_string_write("B-Byte, A-Word,\n");
      0012A5 90r05r75         [24] 4208 	mov	dptr,#___str_9
      0012A8 75 F0 80         [24] 4209 	mov	b,#0x80
      0012AB 12r0Cr70         [24] 4210 	lcall	_LCD_string_write
                                   4211 ;	dump2.c:86: LCD_string_write("D-Double word\n");
      0012AE 90r05r86         [24] 4212 	mov	dptr,#___str_10
      0012B1 75 F0 80         [24] 4213 	mov	b,#0x80
      0012B4 12r0Cr70         [24] 4214 	lcall	_LCD_string_write
      0012B7 D0 06            [24] 4215 	pop	ar6
      0012B9 D0 07            [24] 4216 	pop	ar7
                                   4217 ;	dump2.c:89: do {
      0012BB                       4218 00108$:
                                   4219 ;	dump2.c:90: type = keyDetect();
      0012BB C0 07            [24] 4220 	push	ar7
      0012BD C0 06            [24] 4221 	push	ar6
      0012BF 12r0Dr0F         [24] 4222 	lcall	_keyDetect
      0012C2 AD 82            [24] 4223 	mov	r5,dpl
      0012C4 D0 06            [24] 4224 	pop	ar6
      0012C6 D0 07            [24] 4225 	pop	ar7
      0012C8 90r00r1B         [24] 4226 	mov	dptr,#_dump_type_65537_247
      0012CB ED               [12] 4227 	mov	a,r5
      0012CC F0               [24] 4228 	movx	@dptr,a
                                   4229 ;	dump2.c:91: switch(type) {
      0012CD BD 41 02         [24] 4230 	cjne	r5,#0x41,00202$
      0012D0 80 23            [24] 4231 	sjmp	00102$
      0012D2                       4232 00202$:
      0012D2 BD 42 02         [24] 4233 	cjne	r5,#0x42,00203$
      0012D5 80 05            [24] 4234 	sjmp	00101$
      0012D7                       4235 00203$:
                                   4236 ;	dump2.c:92: case 'B': {
      0012D7 BD 44 4B         [24] 4237 	cjne	r5,#0x44,00109$
      0012DA 80 32            [24] 4238 	sjmp	00103$
      0012DC                       4239 00101$:
                                   4240 ;	dump2.c:93: type = 1;
      0012DC 90r00r1B         [24] 4241 	mov	dptr,#_dump_type_65537_247
      0012DF 74 01            [12] 4242 	mov	a,#0x01
      0012E1 F0               [24] 4243 	movx	@dptr,a
                                   4244 ;	dump2.c:94: LCD_string_write("Byte\n");
      0012E2 90r05r95         [24] 4245 	mov	dptr,#___str_11
      0012E5 75 F0 80         [24] 4246 	mov	b,#0x80
      0012E8 C0 07            [24] 4247 	push	ar7
      0012EA C0 06            [24] 4248 	push	ar6
      0012EC 12r0Cr70         [24] 4249 	lcall	_LCD_string_write
      0012EF D0 06            [24] 4250 	pop	ar6
      0012F1 D0 07            [24] 4251 	pop	ar7
                                   4252 ;	dump2.c:95: break;
                                   4253 ;	dump2.c:97: case 'A': {
      0012F3 80 30            [24] 4254 	sjmp	00109$
      0012F5                       4255 00102$:
                                   4256 ;	dump2.c:98: type = 2; 
      0012F5 90r00r1B         [24] 4257 	mov	dptr,#_dump_type_65537_247
      0012F8 74 02            [12] 4258 	mov	a,#0x02
      0012FA F0               [24] 4259 	movx	@dptr,a
                                   4260 ;	dump2.c:99: LCD_string_write("Word\n");
      0012FB 90r05r9B         [24] 4261 	mov	dptr,#___str_12
      0012FE 75 F0 80         [24] 4262 	mov	b,#0x80
      001301 C0 07            [24] 4263 	push	ar7
      001303 C0 06            [24] 4264 	push	ar6
      001305 12r0Cr70         [24] 4265 	lcall	_LCD_string_write
      001308 D0 06            [24] 4266 	pop	ar6
      00130A D0 07            [24] 4267 	pop	ar7
                                   4268 ;	dump2.c:100: break;
                                   4269 ;	dump2.c:102: case 'D': {
      00130C 80 17            [24] 4270 	sjmp	00109$
      00130E                       4271 00103$:
                                   4272 ;	dump2.c:103: type = 4;
      00130E 90r00r1B         [24] 4273 	mov	dptr,#_dump_type_65537_247
      001311 74 04            [12] 4274 	mov	a,#0x04
      001313 F0               [24] 4275 	movx	@dptr,a
                                   4276 ;	dump2.c:104: LCD_string_write("Double word\n");
      001314 90r05rA1         [24] 4277 	mov	dptr,#___str_13
      001317 75 F0 80         [24] 4278 	mov	b,#0x80
      00131A C0 07            [24] 4279 	push	ar7
      00131C C0 06            [24] 4280 	push	ar6
      00131E 12r0Cr70         [24] 4281 	lcall	_LCD_string_write
      001321 D0 06            [24] 4282 	pop	ar6
      001323 D0 07            [24] 4283 	pop	ar7
                                   4284 ;	dump2.c:108: }
      001325                       4285 00109$:
                                   4286 ;	dump2.c:109: } while(type != 1 && type != 2 && type != 4);
      001325 90r00r1B         [24] 4287 	mov	dptr,#_dump_type_65537_247
      001328 E0               [24] 4288 	movx	a,@dptr
      001329 FD               [12] 4289 	mov	r5,a
      00132A BD 01 02         [24] 4290 	cjne	r5,#0x01,00205$
      00132D 80 0D            [24] 4291 	sjmp	00110$
      00132F                       4292 00205$:
      00132F BD 02 02         [24] 4293 	cjne	r5,#0x02,00206$
      001332 80 08            [24] 4294 	sjmp	00110$
      001334                       4295 00206$:
      001334 BD 04 02         [24] 4296 	cjne	r5,#0x04,00207$
      001337 80 03            [24] 4297 	sjmp	00208$
      001339                       4298 00207$:
      001339 02r12rBB         [24] 4299 	ljmp	00108$
      00133C                       4300 00208$:
      00133C                       4301 00110$:
                                   4302 ;	dump2.c:112: LCD_string_write("Enter block size:\n");
      00133C 90r05rAE         [24] 4303 	mov	dptr,#___str_14
      00133F 75 F0 80         [24] 4304 	mov	b,#0x80
      001342 C0 07            [24] 4305 	push	ar7
      001344 C0 06            [24] 4306 	push	ar6
      001346 12r0Cr70         [24] 4307 	lcall	_LCD_string_write
                                   4308 ;	dump2.c:113: size = getByte();
      001349 12r10rD1         [24] 4309 	lcall	_getByte
      00134C AD 82            [24] 4310 	mov	r5,dpl
                                   4311 ;	dump2.c:114: write('\n');
      00134E 75 82 0A         [24] 4312 	mov	dpl,#0x0a
      001351 C0 05            [24] 4313 	push	ar5
      001353 12r0Cr02         [24] 4314 	lcall	_write
      001356 D0 05            [24] 4315 	pop	ar5
      001358 D0 06            [24] 4316 	pop	ar6
      00135A D0 07            [24] 4317 	pop	ar7
                                   4318 ;	dump2.c:117: if (size < NUM) {
      00135C BD 0F 00         [24] 4319 	cjne	r5,#0x0f,00209$
      00135F                       4320 00209$:
      00135F 50 1C            [24] 4321 	jnc	00112$
                                   4322 ;	dump2.c:118: dumpPage(address, size, type);
      001361 90r00r1B         [24] 4323 	mov	dptr,#_dump_type_65537_247
      001364 E0               [24] 4324 	movx	a,@dptr
      001365 FC               [12] 4325 	mov	r4,a
      001366 90r00r18         [24] 4326 	mov	dptr,#_dumpPage_PARM_2
      001369 ED               [12] 4327 	mov	a,r5
      00136A F0               [24] 4328 	movx	@dptr,a
      00136B 90r00r19         [24] 4329 	mov	dptr,#_dumpPage_PARM_3
      00136E EC               [12] 4330 	mov	a,r4
      00136F F0               [24] 4331 	movx	@dptr,a
      001370 8E 82            [24] 4332 	mov	dpl,r6
      001372 8F 83            [24] 4333 	mov	dph,r7
      001374 C0 05            [24] 4334 	push	ar5
      001376 12r11r10         [24] 4335 	lcall	_dumpPage
      001379 D0 05            [24] 4336 	pop	ar5
      00137B 80 1B            [24] 4337 	sjmp	00113$
      00137D                       4338 00112$:
                                   4339 ;	dump2.c:120: dumpPage(address, NUM, type);
      00137D 90r00r1B         [24] 4340 	mov	dptr,#_dump_type_65537_247
      001380 E0               [24] 4341 	movx	a,@dptr
      001381 FC               [12] 4342 	mov	r4,a
      001382 90r00r18         [24] 4343 	mov	dptr,#_dumpPage_PARM_2
      001385 74 0F            [12] 4344 	mov	a,#0x0f
      001387 F0               [24] 4345 	movx	@dptr,a
      001388 90r00r19         [24] 4346 	mov	dptr,#_dumpPage_PARM_3
      00138B EC               [12] 4347 	mov	a,r4
      00138C F0               [24] 4348 	movx	@dptr,a
      00138D 8E 82            [24] 4349 	mov	dpl,r6
      00138F 8F 83            [24] 4350 	mov	dph,r7
      001391 C0 05            [24] 4351 	push	ar5
      001393 12r11r10         [24] 4352 	lcall	_dumpPage
      001396 D0 05            [24] 4353 	pop	ar5
      001398                       4354 00113$:
                                   4355 ;	dump2.c:124: pages = size / NUM;
      001398 7F 00            [12] 4356 	mov	r7,#0x00
      00139A 75*00 0F         [24] 4357 	mov	__divsint_PARM_2,#0x0f
                                   4358 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00139D 8F*01            [24] 4359 	mov	(__divsint_PARM_2 + 1),r7
      00139F 8D 82            [24] 4360 	mov	dpl,r5
      0013A1 8F 83            [24] 4361 	mov	dph,r7
      0013A3 12r00r00         [24] 4362 	lcall	__divsint
      0013A6 AE 82            [24] 4363 	mov	r6,dpl
                                   4364 ;	dump2.c:126: do {
      0013A8 90r00r1B         [24] 4365 	mov	dptr,#_dump_type_65537_247
      0013AB E0               [24] 4366 	movx	a,@dptr
      0013AC FF               [12] 4367 	mov	r7,a
      0013AD FD               [12] 4368 	mov	r5,a
      0013AE                       4369 00133$:
                                   4370 ;	dump2.c:128: if (page != 1 && page != pages) {
      0013AE 90r00r1C         [24] 4371 	mov	dptr,#_dump_page_65537_247
      0013B1 E0               [24] 4372 	movx	a,@dptr
      0013B2 FC               [12] 4373 	mov	r4,a
      0013B3 BC 01 02         [24] 4374 	cjne	r4,#0x01,00211$
      0013B6 80 26            [24] 4375 	sjmp	00120$
      0013B8                       4376 00211$:
      0013B8 EC               [12] 4377 	mov	a,r4
      0013B9 B5 06 02         [24] 4378 	cjne	a,ar6,00212$
      0013BC 80 20            [24] 4379 	sjmp	00120$
      0013BE                       4380 00212$:
                                   4381 ;	dump2.c:129: LCD_string_write("Press A for previous\n");
      0013BE 90r05rC1         [24] 4382 	mov	dptr,#___str_15
      0013C1 75 F0 80         [24] 4383 	mov	b,#0x80
      0013C4 C0 07            [24] 4384 	push	ar7
      0013C6 C0 06            [24] 4385 	push	ar6
      0013C8 C0 05            [24] 4386 	push	ar5
      0013CA 12r0Cr70         [24] 4387 	lcall	_LCD_string_write
                                   4388 ;	dump2.c:130: LCD_string_write("Press B for next\n");
      0013CD 90r05rD7         [24] 4389 	mov	dptr,#___str_16
      0013D0 75 F0 80         [24] 4390 	mov	b,#0x80
      0013D3 12r0Cr70         [24] 4391 	lcall	_LCD_string_write
      0013D6 D0 05            [24] 4392 	pop	ar5
      0013D8 D0 06            [24] 4393 	pop	ar6
      0013DA D0 07            [24] 4394 	pop	ar7
      0013DC 80 3B            [24] 4395 	sjmp	00121$
      0013DE                       4396 00120$:
                                   4397 ;	dump2.c:131: } else if (page != pages) {
      0013DE 90r00r1C         [24] 4398 	mov	dptr,#_dump_page_65537_247
      0013E1 E0               [24] 4399 	movx	a,@dptr
      0013E2 FC               [12] 4400 	mov	r4,a
      0013E3 B5 06 02         [24] 4401 	cjne	a,ar6,00213$
      0013E6 80 17            [24] 4402 	sjmp	00117$
      0013E8                       4403 00213$:
                                   4404 ;	dump2.c:132: LCD_string_write("Press B for next\n");
      0013E8 90r05rD7         [24] 4405 	mov	dptr,#___str_16
      0013EB 75 F0 80         [24] 4406 	mov	b,#0x80
      0013EE C0 07            [24] 4407 	push	ar7
      0013F0 C0 06            [24] 4408 	push	ar6
      0013F2 C0 05            [24] 4409 	push	ar5
      0013F4 12r0Cr70         [24] 4410 	lcall	_LCD_string_write
      0013F7 D0 05            [24] 4411 	pop	ar5
      0013F9 D0 06            [24] 4412 	pop	ar6
      0013FB D0 07            [24] 4413 	pop	ar7
      0013FD 80 1A            [24] 4414 	sjmp	00121$
      0013FF                       4415 00117$:
                                   4416 ;	dump2.c:133: } else if (page != 1) {
      0013FF BC 01 02         [24] 4417 	cjne	r4,#0x01,00214$
      001402 80 15            [24] 4418 	sjmp	00121$
      001404                       4419 00214$:
                                   4420 ;	dump2.c:134: LCD_string_write("Press A for previous\n");
      001404 90r05rC1         [24] 4421 	mov	dptr,#___str_15
      001407 75 F0 80         [24] 4422 	mov	b,#0x80
      00140A C0 07            [24] 4423 	push	ar7
      00140C C0 06            [24] 4424 	push	ar6
      00140E C0 05            [24] 4425 	push	ar5
      001410 12r0Cr70         [24] 4426 	lcall	_LCD_string_write
      001413 D0 05            [24] 4427 	pop	ar5
      001415 D0 06            [24] 4428 	pop	ar6
      001417 D0 07            [24] 4429 	pop	ar7
      001419                       4430 00121$:
                                   4431 ;	dump2.c:137: LCD_string_write("Press 1 for menu\n");
      001419 90r05rE9         [24] 4432 	mov	dptr,#___str_17
      00141C 75 F0 80         [24] 4433 	mov	b,#0x80
      00141F C0 07            [24] 4434 	push	ar7
      001421 C0 06            [24] 4435 	push	ar6
      001423 C0 05            [24] 4436 	push	ar5
      001425 12r0Cr70         [24] 4437 	lcall	_LCD_string_write
                                   4438 ;	dump2.c:139: input = keyDetect();
      001428 12r0Dr0F         [24] 4439 	lcall	_keyDetect
      00142B AC 82            [24] 4440 	mov	r4,dpl
      00142D D0 05            [24] 4441 	pop	ar5
      00142F D0 06            [24] 4442 	pop	ar6
      001431 D0 07            [24] 4443 	pop	ar7
                                   4444 ;	dump2.c:142: if (input == 'B' && page != pages) {	// next
      001433 BC 42 54         [24] 4445 	cjne	r4,#0x42,00130$
      001436 90r00r1C         [24] 4446 	mov	dptr,#_dump_page_65537_247
      001439 E0               [24] 4447 	movx	a,@dptr
      00143A FB               [12] 4448 	mov	r3,a
      00143B B5 06 02         [24] 4449 	cjne	a,ar6,00217$
      00143E 80 4A            [24] 4450 	sjmp	00130$
      001440                       4451 00217$:
                                   4452 ;	dump2.c:143: address += NUM;
      001440 90r00r1D         [24] 4453 	mov	dptr,#_dump_address_65537_247
      001443 E0               [24] 4454 	movx	a,@dptr
      001444 F9               [12] 4455 	mov	r1,a
      001445 A3               [24] 4456 	inc	dptr
      001446 E0               [24] 4457 	movx	a,@dptr
      001447 FA               [12] 4458 	mov	r2,a
      001448 74 0F            [12] 4459 	mov	a,#0x0f
      00144A 29               [12] 4460 	add	a,r1
      00144B F9               [12] 4461 	mov	r1,a
      00144C E4               [12] 4462 	clr	a
      00144D 3A               [12] 4463 	addc	a,r2
      00144E FA               [12] 4464 	mov	r2,a
      00144F 90r00r1D         [24] 4465 	mov	dptr,#_dump_address_65537_247
      001452 E9               [12] 4466 	mov	a,r1
      001453 F0               [24] 4467 	movx	@dptr,a
      001454 EA               [12] 4468 	mov	a,r2
      001455 A3               [24] 4469 	inc	dptr
      001456 F0               [24] 4470 	movx	@dptr,a
                                   4471 ;	dump2.c:144: dumpPage(address, NUM, type);
      001457 90r00r1D         [24] 4472 	mov	dptr,#_dump_address_65537_247
      00145A E0               [24] 4473 	movx	a,@dptr
      00145B F9               [12] 4474 	mov	r1,a
      00145C A3               [24] 4475 	inc	dptr
      00145D E0               [24] 4476 	movx	a,@dptr
      00145E FA               [12] 4477 	mov	r2,a
      00145F 90r00r18         [24] 4478 	mov	dptr,#_dumpPage_PARM_2
      001462 74 0F            [12] 4479 	mov	a,#0x0f
      001464 F0               [24] 4480 	movx	@dptr,a
      001465 90r00r19         [24] 4481 	mov	dptr,#_dumpPage_PARM_3
      001468 EF               [12] 4482 	mov	a,r7
      001469 F0               [24] 4483 	movx	@dptr,a
      00146A 89 82            [24] 4484 	mov	dpl,r1
      00146C 8A 83            [24] 4485 	mov	dph,r2
      00146E C0 07            [24] 4486 	push	ar7
      001470 C0 06            [24] 4487 	push	ar6
      001472 C0 05            [24] 4488 	push	ar5
      001474 C0 03            [24] 4489 	push	ar3
      001476 12r11r10         [24] 4490 	lcall	_dumpPage
      001479 D0 03            [24] 4491 	pop	ar3
      00147B D0 05            [24] 4492 	pop	ar5
      00147D D0 06            [24] 4493 	pop	ar6
      00147F D0 07            [24] 4494 	pop	ar7
                                   4495 ;	dump2.c:145: page++;
      001481 90r00r1C         [24] 4496 	mov	dptr,#_dump_page_65537_247
      001484 EB               [12] 4497 	mov	a,r3
      001485 04               [12] 4498 	inc	a
      001486 F0               [24] 4499 	movx	@dptr,a
      001487 02r13rAE         [24] 4500 	ljmp	00133$
      00148A                       4501 00130$:
                                   4502 ;	dump2.c:146: } else if (input == 'A' && page != 1) {				// previous
      00148A BC 41 55         [24] 4503 	cjne	r4,#0x41,00126$
      00148D 90r00r1C         [24] 4504 	mov	dptr,#_dump_page_65537_247
      001490 E0               [24] 4505 	movx	a,@dptr
      001491 FB               [12] 4506 	mov	r3,a
      001492 BB 01 02         [24] 4507 	cjne	r3,#0x01,00220$
      001495 80 4B            [24] 4508 	sjmp	00126$
      001497                       4509 00220$:
                                   4510 ;	dump2.c:147: address -= NUM;
      001497 90r00r1D         [24] 4511 	mov	dptr,#_dump_address_65537_247
      00149A E0               [24] 4512 	movx	a,@dptr
      00149B F9               [12] 4513 	mov	r1,a
      00149C A3               [24] 4514 	inc	dptr
      00149D E0               [24] 4515 	movx	a,@dptr
      00149E FA               [12] 4516 	mov	r2,a
      00149F E9               [12] 4517 	mov	a,r1
      0014A0 24 F1            [12] 4518 	add	a,#0xf1
      0014A2 F9               [12] 4519 	mov	r1,a
      0014A3 EA               [12] 4520 	mov	a,r2
      0014A4 34 FF            [12] 4521 	addc	a,#0xff
      0014A6 FA               [12] 4522 	mov	r2,a
      0014A7 90r00r1D         [24] 4523 	mov	dptr,#_dump_address_65537_247
      0014AA E9               [12] 4524 	mov	a,r1
      0014AB F0               [24] 4525 	movx	@dptr,a
      0014AC EA               [12] 4526 	mov	a,r2
      0014AD A3               [24] 4527 	inc	dptr
      0014AE F0               [24] 4528 	movx	@dptr,a
                                   4529 ;	dump2.c:148: dumpPage(address, NUM, type);
      0014AF 90r00r1D         [24] 4530 	mov	dptr,#_dump_address_65537_247
      0014B2 E0               [24] 4531 	movx	a,@dptr
      0014B3 F9               [12] 4532 	mov	r1,a
      0014B4 A3               [24] 4533 	inc	dptr
      0014B5 E0               [24] 4534 	movx	a,@dptr
      0014B6 FA               [12] 4535 	mov	r2,a
      0014B7 90r00r18         [24] 4536 	mov	dptr,#_dumpPage_PARM_2
      0014BA 74 0F            [12] 4537 	mov	a,#0x0f
      0014BC F0               [24] 4538 	movx	@dptr,a
      0014BD 90r00r19         [24] 4539 	mov	dptr,#_dumpPage_PARM_3
      0014C0 ED               [12] 4540 	mov	a,r5
      0014C1 F0               [24] 4541 	movx	@dptr,a
      0014C2 89 82            [24] 4542 	mov	dpl,r1
      0014C4 8A 83            [24] 4543 	mov	dph,r2
      0014C6 C0 07            [24] 4544 	push	ar7
      0014C8 C0 06            [24] 4545 	push	ar6
      0014CA C0 05            [24] 4546 	push	ar5
      0014CC C0 03            [24] 4547 	push	ar3
      0014CE 12r11r10         [24] 4548 	lcall	_dumpPage
      0014D1 D0 03            [24] 4549 	pop	ar3
      0014D3 D0 05            [24] 4550 	pop	ar5
      0014D5 D0 06            [24] 4551 	pop	ar6
      0014D7 D0 07            [24] 4552 	pop	ar7
                                   4553 ;	dump2.c:149: page--;
      0014D9 EB               [12] 4554 	mov	a,r3
      0014DA 14               [12] 4555 	dec	a
      0014DB 90r00r1C         [24] 4556 	mov	dptr,#_dump_page_65537_247
      0014DE F0               [24] 4557 	movx	@dptr,a
      0014DF 02r13rAE         [24] 4558 	ljmp	00133$
      0014E2                       4559 00126$:
                                   4560 ;	dump2.c:150: } else if (input == '1') {							// main menu
      0014E2 BC 31 01         [24] 4561 	cjne	r4,#0x31,00221$
      0014E5 22               [24] 4562 	ret
      0014E6                       4563 00221$:
      0014E6 02r13rAE         [24] 4564 	ljmp	00133$
                                   4565 ;	dump2.c:154: } while (1);
                                   4566 ;	dump2.c:156: }
      0014E9 22               [24] 4567 	ret
                                   4568 ;------------------------------------------------------------
                                   4569 ;Allocation info for local variables in function 'check'
                                   4570 ;------------------------------------------------------------
                                   4571 ;checker                   Allocated to registers r7 
                                   4572 ;fetched                   Allocated to registers r0 
                                   4573 ;error                     Allocated to registers r7 
                                   4574 ;ramAddress                Allocated to registers r2 r3 
                                   4575 ;i                         Allocated with name '_check_i_65537_264'
                                   4576 ;------------------------------------------------------------
                                   4577 ;	check.c:6: void check (void) {
                                   4578 ;	-----------------------------------------
                                   4579 ;	 function check
                                   4580 ;	-----------------------------------------
      0014EA                       4581 _check:
                                   4582 ;	check.c:8: fillScreen(GRAY);
      0014EA 90 D6 BA         [24] 4583 	mov	dptr,#0xd6ba
      0014ED 12r08r69         [24] 4584 	lcall	_fillScreen
                                   4585 ;	check.c:9: setCursor(0, 0);
      0014F0 E4               [12] 4586 	clr	a
      0014F1 F5*00            [12] 4587 	mov	_setCursor_PARM_2,a
      0014F3 F5*01            [12] 4588 	mov	(_setCursor_PARM_2 + 1),a
      0014F5 90 00 00         [24] 4589 	mov	dptr,#0x0000
      0014F8 12r00rDB         [24] 4590 	lcall	_setCursor
                                   4591 ;	check.c:10: setTextSize(2);
      0014FB 75 82 02         [24] 4592 	mov	dpl,#0x02
      0014FE 12r00rF5         [24] 4593 	lcall	_setTextSize
                                   4594 ;	check.c:16: uint8_t error = 0;
      001501 7F 00            [12] 4595 	mov	r7,#0x00
                                   4596 ;	check.c:20: LCD_string_write("Enter byte to check\n");
      001503 90r05rFB         [24] 4597 	mov	dptr,#___str_18
      001506 75 F0 80         [24] 4598 	mov	b,#0x80
      001509 C0 07            [24] 4599 	push	ar7
      00150B 12r0Cr70         [24] 4600 	lcall	_LCD_string_write
                                   4601 ;	check.c:21: checker = getByte();
      00150E 12r10rD1         [24] 4602 	lcall	_getByte
      001511 AE 82            [24] 4603 	mov	r6,dpl
                                   4604 ;	check.c:22: write('\n');
      001513 75 82 0A         [24] 4605 	mov	dpl,#0x0a
      001516 C0 06            [24] 4606 	push	ar6
      001518 12r0Cr02         [24] 4607 	lcall	_write
                                   4608 ;	check.c:23: LCD_string_write("In progress...\n");
      00151B 90r06r10         [24] 4609 	mov	dptr,#___str_19
      00151E 75 F0 80         [24] 4610 	mov	b,#0x80
      001521 12r0Cr70         [24] 4611 	lcall	_LCD_string_write
      001524 D0 06            [24] 4612 	pop	ar6
      001526 D0 07            [24] 4613 	pop	ar7
                                   4614 ;	check.c:28: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001528 7C 00            [12] 4615 	mov	r4,#0x00
      00152A 7D 00            [12] 4616 	mov	r5,#0x00
      00152C                       4617 00112$:
                                   4618 ;	check.c:29: IOM = 0;
                                   4619 ;	assignBit
      00152C C2 B4            [12] 4620 	clr	_P3_4
                                   4621 ;	check.c:30: ramAddress = (uint16_t __xdata*)(i);
      00152E 8C 02            [24] 4622 	mov	ar2,r4
      001530 8D 03            [24] 4623 	mov	ar3,r5
                                   4624 ;	check.c:31: *ramAddress = checker;
      001532 8E 00            [24] 4625 	mov	ar0,r6
      001534 79 00            [12] 4626 	mov	r1,#0x00
      001536 8A 82            [24] 4627 	mov	dpl,r2
      001538 8B 83            [24] 4628 	mov	dph,r3
      00153A E8               [12] 4629 	mov	a,r0
      00153B F0               [24] 4630 	movx	@dptr,a
      00153C E9               [12] 4631 	mov	a,r1
      00153D A3               [24] 4632 	inc	dptr
      00153E F0               [24] 4633 	movx	@dptr,a
                                   4634 ;	check.c:32: fetched = *ramAddress;
                                   4635 ;	check.c:33: IOM = 1;
                                   4636 ;	assignBit
      00153F D2 B4            [12] 4637 	setb	_P3_4
                                   4638 ;	check.c:35: if (fetched != checker) {
      001541 E8               [12] 4639 	mov	a,r0
      001542 B5 06 02         [24] 4640 	cjne	a,ar6,00141$
      001545 80 3F            [24] 4641 	sjmp	00104$
      001547                       4642 00141$:
                                   4643 ;	check.c:36: asciiToHex(checker);
      001547 8E 82            [24] 4644 	mov	dpl,r6
      001549 C0 03            [24] 4645 	push	ar3
      00154B C0 02            [24] 4646 	push	ar2
      00154D C0 00            [24] 4647 	push	ar0
      00154F 12r0ErF1         [24] 4648 	lcall	_asciiToHex
                                   4649 ;	check.c:37: write(' ');
      001552 75 82 20         [24] 4650 	mov	dpl,#0x20
      001555 12r0Cr02         [24] 4651 	lcall	_write
      001558 D0 00            [24] 4652 	pop	ar0
                                   4653 ;	check.c:38: asciiToHex(fetched);
      00155A 88 82            [24] 4654 	mov	dpl,r0
      00155C 12r0ErF1         [24] 4655 	lcall	_asciiToHex
                                   4656 ;	check.c:39: write(' ');
      00155F 75 82 20         [24] 4657 	mov	dpl,#0x20
      001562 12r0Cr02         [24] 4658 	lcall	_write
      001565 D0 02            [24] 4659 	pop	ar2
      001567 D0 03            [24] 4660 	pop	ar3
                                   4661 ;	check.c:40: asciiToHex(*ramAddress);
      001569 8A 82            [24] 4662 	mov	dpl,r2
      00156B 8B 83            [24] 4663 	mov	dph,r3
      00156D E0               [24] 4664 	movx	a,@dptr
      00156E F5 82            [12] 4665 	mov	dpl,a
      001570 12r0ErF1         [24] 4666 	lcall	_asciiToHex
                                   4667 ;	check.c:41: write('\n');
      001573 75 82 0A         [24] 4668 	mov	dpl,#0x0a
      001576 12r0Cr02         [24] 4669 	lcall	_write
                                   4670 ;	check.c:42: LCD_string_write("Memory check failed\n");
      001579 90r06r20         [24] 4671 	mov	dptr,#___str_20
      00157C 75 F0 80         [24] 4672 	mov	b,#0x80
      00157F 12r0Cr70         [24] 4673 	lcall	_LCD_string_write
                                   4674 ;	check.c:43: error = 1;
      001582 7F 01            [12] 4675 	mov	r7,#0x01
                                   4676 ;	check.c:44: break;
      001584 80 6D            [24] 4677 	sjmp	00106$
      001586                       4678 00104$:
                                   4679 ;	check.c:46: IOM = 0;
                                   4680 ;	assignBit
      001586 C2 B4            [12] 4681 	clr	_P3_4
                                   4682 ;	check.c:47: checker = ~checker;
      001588 EE               [12] 4683 	mov	a,r6
      001589 F4               [12] 4684 	cpl	a
                                   4685 ;	check.c:48: *ramAddress = checker;
      00158A FE               [12] 4686 	mov	r6,a
      00158B F8               [12] 4687 	mov	r0,a
      00158C 79 00            [12] 4688 	mov	r1,#0x00
      00158E 8A 82            [24] 4689 	mov	dpl,r2
      001590 8B 83            [24] 4690 	mov	dph,r3
      001592 E8               [12] 4691 	mov	a,r0
      001593 F0               [24] 4692 	movx	@dptr,a
      001594 E9               [12] 4693 	mov	a,r1
      001595 A3               [24] 4694 	inc	dptr
      001596 F0               [24] 4695 	movx	@dptr,a
                                   4696 ;	check.c:49: fetched = *ramAddress;
                                   4697 ;	check.c:50: IOM = 1;
                                   4698 ;	assignBit
      001597 D2 B4            [12] 4699 	setb	_P3_4
                                   4700 ;	check.c:52: if (fetched != checker) {
      001599 E8               [12] 4701 	mov	a,r0
      00159A B5 06 02         [24] 4702 	cjne	a,ar6,00142$
      00159D 80 3F            [24] 4703 	sjmp	00113$
      00159F                       4704 00142$:
                                   4705 ;	check.c:53: asciiToHex(checker);
      00159F 8E 82            [24] 4706 	mov	dpl,r6
      0015A1 C0 03            [24] 4707 	push	ar3
      0015A3 C0 02            [24] 4708 	push	ar2
      0015A5 C0 00            [24] 4709 	push	ar0
      0015A7 12r0ErF1         [24] 4710 	lcall	_asciiToHex
                                   4711 ;	check.c:54: write(' ');
      0015AA 75 82 20         [24] 4712 	mov	dpl,#0x20
      0015AD 12r0Cr02         [24] 4713 	lcall	_write
      0015B0 D0 00            [24] 4714 	pop	ar0
                                   4715 ;	check.c:55: asciiToHex(fetched);
      0015B2 88 82            [24] 4716 	mov	dpl,r0
      0015B4 12r0ErF1         [24] 4717 	lcall	_asciiToHex
                                   4718 ;	check.c:56: write(' ');
      0015B7 75 82 20         [24] 4719 	mov	dpl,#0x20
      0015BA 12r0Cr02         [24] 4720 	lcall	_write
      0015BD D0 02            [24] 4721 	pop	ar2
      0015BF D0 03            [24] 4722 	pop	ar3
                                   4723 ;	check.c:57: asciiToHex(*ramAddress);
      0015C1 8A 82            [24] 4724 	mov	dpl,r2
      0015C3 8B 83            [24] 4725 	mov	dph,r3
      0015C5 E0               [24] 4726 	movx	a,@dptr
      0015C6 F5 82            [12] 4727 	mov	dpl,a
      0015C8 12r0ErF1         [24] 4728 	lcall	_asciiToHex
                                   4729 ;	check.c:58: write('\n');
      0015CB 75 82 0A         [24] 4730 	mov	dpl,#0x0a
      0015CE 12r0Cr02         [24] 4731 	lcall	_write
                                   4732 ;	check.c:59: LCD_string_write("Memory check failed\n");
      0015D1 90r06r20         [24] 4733 	mov	dptr,#___str_20
      0015D4 75 F0 80         [24] 4734 	mov	b,#0x80
      0015D7 12r0Cr70         [24] 4735 	lcall	_LCD_string_write
                                   4736 ;	check.c:60: error = 1;
      0015DA 7F 01            [12] 4737 	mov	r7,#0x01
                                   4738 ;	check.c:61: break;
      0015DC 80 15            [24] 4739 	sjmp	00106$
      0015DE                       4740 00113$:
                                   4741 ;	check.c:28: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0015DE 0C               [12] 4742 	inc	r4
      0015DF BC 00 01         [24] 4743 	cjne	r4,#0x00,00143$
      0015E2 0D               [12] 4744 	inc	r5
      0015E3                       4745 00143$:
      0015E3 8C 02            [24] 4746 	mov	ar2,r4
      0015E5 8D 03            [24] 4747 	mov	ar3,r5
      0015E7 C3               [12] 4748 	clr	c
      0015E8 EA               [12] 4749 	mov	a,r2
      0015E9 94 FF            [12] 4750 	subb	a,#0xff
      0015EB EB               [12] 4751 	mov	a,r3
      0015EC 94 FF            [12] 4752 	subb	a,#0xff
      0015EE 50 03            [24] 4753 	jnc	00144$
      0015F0 02r15r2C         [24] 4754 	ljmp	00112$
      0015F3                       4755 00144$:
      0015F3                       4756 00106$:
                                   4757 ;	check.c:69: if (error == 0) {
      0015F3 EF               [12] 4758 	mov	a,r7
      0015F4 70 09            [24] 4759 	jnz	00108$
                                   4760 ;	check.c:70: LCD_string_write("Success!\n");
      0015F6 90r06r35         [24] 4761 	mov	dptr,#___str_21
      0015F9 75 F0 80         [24] 4762 	mov	b,#0x80
      0015FC 12r0Cr70         [24] 4763 	lcall	_LCD_string_write
      0015FF                       4764 00108$:
                                   4765 ;	check.c:74: LCD_string_write("Press 1 for menu\n");
      0015FF 90r05rE9         [24] 4766 	mov	dptr,#___str_17
      001602 75 F0 80         [24] 4767 	mov	b,#0x80
      001605 12r0Cr70         [24] 4768 	lcall	_LCD_string_write
                                   4769 ;	check.c:76: do {
      001608                       4770 00109$:
                                   4771 ;	check.c:77: checker = keyDetect();
      001608 12r0Dr0F         [24] 4772 	lcall	_keyDetect
      00160B AF 82            [24] 4773 	mov	r7,dpl
                                   4774 ;	check.c:78: } while (checker != '1');
      00160D BF 31 F8         [24] 4775 	cjne	r7,#0x31,00109$
                                   4776 ;	check.c:79: }
      001610 22               [24] 4777 	ret
                                   4778 ;------------------------------------------------------------
                                   4779 ;Allocation info for local variables in function 'basic'
                                   4780 ;------------------------------------------------------------
                                   4781 ;ramAddress                Allocated to registers 
                                   4782 ;val                       Allocated with name '_basic_val_65537_274'
                                   4783 ;fetched                   Allocated with name '_basic_fetched_65537_274'
                                   4784 ;add                       Allocated with name '_basic_add_65537_274'
                                   4785 ;------------------------------------------------------------
                                   4786 ;	check.c:85: void basic (void) {
                                   4787 ;	-----------------------------------------
                                   4788 ;	 function basic
                                   4789 ;	-----------------------------------------
      001611                       4790 _basic:
                                   4791 ;	check.c:87: fillScreen(GRAY);
      001611 90 D6 BA         [24] 4792 	mov	dptr,#0xd6ba
      001614 12r08r69         [24] 4793 	lcall	_fillScreen
                                   4794 ;	check.c:88: setCursor(0, 0);
      001617 E4               [12] 4795 	clr	a
      001618 F5*00            [12] 4796 	mov	_setCursor_PARM_2,a
      00161A F5*01            [12] 4797 	mov	(_setCursor_PARM_2 + 1),a
      00161C 90 00 00         [24] 4798 	mov	dptr,#0x0000
      00161F 12r00rDB         [24] 4799 	lcall	_setCursor
                                   4800 ;	check.c:89: setTextSize(2);
      001622 75 82 02         [24] 4801 	mov	dpl,#0x02
      001625 12r00rF5         [24] 4802 	lcall	_setTextSize
                                   4803 ;	check.c:98: LCD_string_write("Enter byte\n");
      001628 90r06r3F         [24] 4804 	mov	dptr,#___str_22
      00162B 75 F0 80         [24] 4805 	mov	b,#0x80
      00162E 12r0Cr70         [24] 4806 	lcall	_LCD_string_write
                                   4807 ;	check.c:99: val = getByte();
      001631 12r10rD1         [24] 4808 	lcall	_getByte
      001634 AF 82            [24] 4809 	mov	r7,dpl
                                   4810 ;	check.c:100: write('\n');
      001636 75 82 0A         [24] 4811 	mov	dpl,#0x0a
      001639 C0 07            [24] 4812 	push	ar7
      00163B 12r0Cr02         [24] 4813 	lcall	_write
                                   4814 ;	check.c:103: LCD_string_write("Enter address\n");
      00163E 90r06r4B         [24] 4815 	mov	dptr,#___str_23
      001641 75 F0 80         [24] 4816 	mov	b,#0x80
      001644 12r0Cr70         [24] 4817 	lcall	_LCD_string_write
                                   4818 ;	check.c:104: add = getAddress();
      001647 12r10r6A         [24] 4819 	lcall	_getAddress
      00164A AD 82            [24] 4820 	mov	r5,dpl
      00164C AE 83            [24] 4821 	mov	r6,dph
                                   4822 ;	check.c:105: write('\n');
      00164E 75 82 0A         [24] 4823 	mov	dpl,#0x0a
      001651 C0 06            [24] 4824 	push	ar6
      001653 C0 05            [24] 4825 	push	ar5
      001655 12r0Cr02         [24] 4826 	lcall	_write
                                   4827 ;	check.c:106: LCD_string_write("In progress\n");
      001658 90r06r5A         [24] 4828 	mov	dptr,#___str_24
      00165B 75 F0 80         [24] 4829 	mov	b,#0x80
      00165E 12r0Cr70         [24] 4830 	lcall	_LCD_string_write
      001661 D0 05            [24] 4831 	pop	ar5
      001663 D0 06            [24] 4832 	pop	ar6
      001665 D0 07            [24] 4833 	pop	ar7
                                   4834 ;	check.c:108: IOM = 0;
                                   4835 ;	assignBit
      001667 C2 B4            [12] 4836 	clr	_P3_4
                                   4837 ;	check.c:111: ramAddress = (uint16_t __xdata*)(add);
      001669 8D 82            [24] 4838 	mov	dpl,r5
      00166B 8E 83            [24] 4839 	mov	dph,r6
                                   4840 ;	check.c:112: *ramAddress = val;
      00166D 8F 05            [24] 4841 	mov	ar5,r7
      00166F 7E 00            [12] 4842 	mov	r6,#0x00
      001671 ED               [12] 4843 	mov	a,r5
      001672 F0               [24] 4844 	movx	@dptr,a
      001673 EE               [12] 4845 	mov	a,r6
      001674 A3               [24] 4846 	inc	dptr
      001675 F0               [24] 4847 	movx	@dptr,a
                                   4848 ;	check.c:115: fetched = *ramAddress;
                                   4849 ;	check.c:117: IOM = 1;
                                   4850 ;	assignBit
      001676 D2 B4            [12] 4851 	setb	_P3_4
                                   4852 ;	check.c:120: if (fetched == val) {
      001678 ED               [12] 4853 	mov	a,r5
      001679 B5 07 10         [24] 4854 	cjne	a,ar7,00102$
                                   4855 ;	check.c:121: asciiToHex(fetched);
      00167C 8D 82            [24] 4856 	mov	dpl,r5
      00167E 12r0ErF1         [24] 4857 	lcall	_asciiToHex
                                   4858 ;	check.c:122: LCD_string_write(" fetched!\nSuccess!\n");
      001681 90r06r67         [24] 4859 	mov	dptr,#___str_25
      001684 75 F0 80         [24] 4860 	mov	b,#0x80
      001687 12r0Cr70         [24] 4861 	lcall	_LCD_string_write
      00168A 80 09            [24] 4862 	sjmp	00103$
      00168C                       4863 00102$:
                                   4864 ;	check.c:124: LCD_string_write("Check failed\n");
      00168C 90r06r7B         [24] 4865 	mov	dptr,#___str_26
      00168F 75 F0 80         [24] 4866 	mov	b,#0x80
      001692 12r0Cr70         [24] 4867 	lcall	_LCD_string_write
      001695                       4868 00103$:
                                   4869 ;	check.c:127: LCD_string_write("Press 1 for menu\n");
      001695 90r05rE9         [24] 4870 	mov	dptr,#___str_17
      001698 75 F0 80         [24] 4871 	mov	b,#0x80
      00169B 12r0Cr70         [24] 4872 	lcall	_LCD_string_write
                                   4873 ;	check.c:129: do {
      00169E                       4874 00104$:
                                   4875 ;	check.c:130: fetched = keyDetect();
      00169E 12r0Dr0F         [24] 4876 	lcall	_keyDetect
      0016A1 AF 82            [24] 4877 	mov	r7,dpl
                                   4878 ;	check.c:131: } while (fetched != '1');
      0016A3 BF 31 F8         [24] 4879 	cjne	r7,#0x31,00104$
                                   4880 ;	check.c:132: }
      0016A6 22               [24] 4881 	ret
                                   4882 ;------------------------------------------------------------
                                   4883 ;Allocation info for local variables in function 'move'
                                   4884 ;------------------------------------------------------------
                                   4885 ;origin                    Allocated to registers 
                                   4886 ;target                    Allocated with name '_move_target_65537_280'
                                   4887 ;sloc0                     Allocated with name '_move_sloc0_1_0'
                                   4888 ;sloc1                     Allocated with name '_move_sloc1_1_0'
                                   4889 ;startAdd                  Allocated with name '_move_startAdd_65537_280'
                                   4890 ;targetAdd                 Allocated with name '_move_targetAdd_65537_280'
                                   4891 ;i                         Allocated with name '_move_i_65537_280'
                                   4892 ;size                      Allocated with name '_move_size_65537_280'
                                   4893 ;o                         Allocated with name '_move_o_65537_280'
                                   4894 ;------------------------------------------------------------
                                   4895 ;	move.c:5: void move(void) {
                                   4896 ;	-----------------------------------------
                                   4897 ;	 function move
                                   4898 ;	-----------------------------------------
      0016A7                       4899 _move:
                                   4900 ;	move.c:7: fillScreen(GRAY);
      0016A7 90 D6 BA         [24] 4901 	mov	dptr,#0xd6ba
      0016AA 12r08r69         [24] 4902 	lcall	_fillScreen
                                   4903 ;	move.c:8: setCursor(0, 0);
      0016AD E4               [12] 4904 	clr	a
      0016AE F5*00            [12] 4905 	mov	_setCursor_PARM_2,a
      0016B0 F5*01            [12] 4906 	mov	(_setCursor_PARM_2 + 1),a
      0016B2 90 00 00         [24] 4907 	mov	dptr,#0x0000
      0016B5 12r00rDB         [24] 4908 	lcall	_setCursor
                                   4909 ;	move.c:18: setTextSize(2);
      0016B8 75 82 02         [24] 4910 	mov	dpl,#0x02
      0016BB 12r00rF5         [24] 4911 	lcall	_setTextSize
                                   4912 ;	move.c:19: LCD_string_write("Enter start address:\n");
      0016BE 90r05r4E         [24] 4913 	mov	dptr,#___str_7
      0016C1 75 F0 80         [24] 4914 	mov	b,#0x80
      0016C4 12r0Cr70         [24] 4915 	lcall	_LCD_string_write
                                   4916 ;	move.c:20: startAdd = getAddress();
      0016C7 12r10r6A         [24] 4917 	lcall	_getAddress
      0016CA AE 82            [24] 4918 	mov	r6,dpl
      0016CC AF 83            [24] 4919 	mov	r7,dph
                                   4920 ;	move.c:21: write('\n');
      0016CE 75 82 0A         [24] 4921 	mov	dpl,#0x0a
      0016D1 C0 07            [24] 4922 	push	ar7
      0016D3 C0 06            [24] 4923 	push	ar6
      0016D5 12r0Cr02         [24] 4924 	lcall	_write
                                   4925 ;	move.c:24: LCD_string_write("Enter target address:\n");
      0016D8 90r06r89         [24] 4926 	mov	dptr,#___str_27
      0016DB 75 F0 80         [24] 4927 	mov	b,#0x80
      0016DE 12r0Cr70         [24] 4928 	lcall	_LCD_string_write
                                   4929 ;	move.c:25: targetAdd = getAddress();
      0016E1 12r10r6A         [24] 4930 	lcall	_getAddress
      0016E4 AC 82            [24] 4931 	mov	r4,dpl
      0016E6 AD 83            [24] 4932 	mov	r5,dph
                                   4933 ;	move.c:26: write('\n');
      0016E8 75 82 0A         [24] 4934 	mov	dpl,#0x0a
      0016EB C0 05            [24] 4935 	push	ar5
      0016ED C0 04            [24] 4936 	push	ar4
      0016EF 12r0Cr02         [24] 4937 	lcall	_write
                                   4938 ;	move.c:29: LCD_string_write("Enter size:\n");
      0016F2 90r06rA0         [24] 4939 	mov	dptr,#___str_28
      0016F5 75 F0 80         [24] 4940 	mov	b,#0x80
      0016F8 12r0Cr70         [24] 4941 	lcall	_LCD_string_write
                                   4942 ;	move.c:30: size = getByte();
      0016FB 12r10rD1         [24] 4943 	lcall	_getByte
      0016FE AB 82            [24] 4944 	mov	r3,dpl
                                   4945 ;	move.c:31: write('\n');
      001700 75 82 0A         [24] 4946 	mov	dpl,#0x0a
      001703 C0 03            [24] 4947 	push	ar3
      001705 12r0Cr02         [24] 4948 	lcall	_write
                                   4949 ;	move.c:34: LCD_string_write("Move in progress...\n");
      001708 90r06rAD         [24] 4950 	mov	dptr,#___str_29
      00170B 75 F0 80         [24] 4951 	mov	b,#0x80
      00170E 12r0Cr70         [24] 4952 	lcall	_LCD_string_write
      001711 D0 03            [24] 4953 	pop	ar3
      001713 D0 04            [24] 4954 	pop	ar4
      001715 D0 05            [24] 4955 	pop	ar5
      001717 D0 06            [24] 4956 	pop	ar6
      001719 D0 07            [24] 4957 	pop	ar7
                                   4958 ;	move.c:37: for (i = 0; i < size; i++) {
      00171B 7A 00            [12] 4959 	mov	r2,#0x00
      00171D                       4960 00109$:
      00171D C3               [12] 4961 	clr	c
      00171E EA               [12] 4962 	mov	a,r2
      00171F 9B               [12] 4963 	subb	a,r3
      001720 50 6D            [24] 4964 	jnc	00104$
                                   4965 ;	move.c:39: if ((i + startAdd == __END_RAM__) || (i + targetAdd == __END_RAM__)) break;
      001722 C0 03            [24] 4966 	push	ar3
      001724 8A*56            [24] 4967 	mov	_move_sloc1_1_0,r2
      001726 75*57 00         [24] 4968 	mov	(_move_sloc1_1_0 + 1),#0x00
      001729 85*56*54         [24] 4969 	mov	_move_sloc0_1_0,_move_sloc1_1_0
      00172C 85*57*55         [24] 4970 	mov	(_move_sloc0_1_0 + 1),(_move_sloc1_1_0 + 1)
      00172F EE               [12] 4971 	mov	a,r6
      001730 25*54            [12] 4972 	add	a,_move_sloc0_1_0
      001732 F9               [12] 4973 	mov	r1,a
      001733 EF               [12] 4974 	mov	a,r7
      001734 35*55            [12] 4975 	addc	a,(_move_sloc0_1_0 + 1)
      001736 FB               [12] 4976 	mov	r3,a
      001737 B9 FF 07         [24] 4977 	cjne	r1,#0xff,00135$
      00173A BB FF 04         [24] 4978 	cjne	r3,#0xff,00135$
      00173D D0 03            [24] 4979 	pop	ar3
      00173F 80 4E            [24] 4980 	sjmp	00104$
      001741                       4981 00135$:
      001741 D0 03            [24] 4982 	pop	ar3
      001743 EC               [12] 4983 	mov	a,r4
      001744 25*54            [12] 4984 	add	a,_move_sloc0_1_0
      001746 F8               [12] 4985 	mov	r0,a
      001747 ED               [12] 4986 	mov	a,r5
      001748 35*55            [12] 4987 	addc	a,(_move_sloc0_1_0 + 1)
      00174A F9               [12] 4988 	mov	r1,a
      00174B B8 FF 05         [24] 4989 	cjne	r0,#0xff,00136$
      00174E B9 FF 02         [24] 4990 	cjne	r1,#0xff,00136$
      001751 80 3C            [24] 4991 	sjmp	00104$
      001753                       4992 00136$:
                                   4993 ;	move.c:44: IOM = 0;
      001753 C0 03            [24] 4994 	push	ar3
                                   4995 ;	assignBit
      001755 C2 B4            [12] 4996 	clr	_P3_4
                                   4997 ;	move.c:45: origin = (uint16_t __xdata*)(startAdd + i);
      001757 8E*54            [24] 4998 	mov	_move_sloc0_1_0,r6
      001759 8F*55            [24] 4999 	mov	(_move_sloc0_1_0 + 1),r7
      00175B E5*56            [12] 5000 	mov	a,_move_sloc1_1_0
      00175D 25*54            [12] 5001 	add	a,_move_sloc0_1_0
      00175F F8               [12] 5002 	mov	r0,a
      001760 E5*57            [12] 5003 	mov	a,(_move_sloc1_1_0 + 1)
      001762 35*55            [12] 5004 	addc	a,(_move_sloc0_1_0 + 1)
      001764 FB               [12] 5005 	mov	r3,a
      001765 88 82            [24] 5006 	mov	dpl,r0
      001767 8B 83            [24] 5007 	mov	dph,r3
                                   5008 ;	move.c:46: target = (uint16_t __xdata*)(targetAdd + i);
      001769 8C 01            [24] 5009 	mov	ar1,r4
      00176B 8D 03            [24] 5010 	mov	ar3,r5
      00176D E5*56            [12] 5011 	mov	a,_move_sloc1_1_0
      00176F 29               [12] 5012 	add	a,r1
      001770 F9               [12] 5013 	mov	r1,a
      001771 E5*57            [12] 5014 	mov	a,(_move_sloc1_1_0 + 1)
      001773 3B               [12] 5015 	addc	a,r3
      001774 FB               [12] 5016 	mov	r3,a
      001775 89*52            [24] 5017 	mov	_move_target_65537_280,r1
      001777 8B*53            [24] 5018 	mov	(_move_target_65537_280 + 1),r3
                                   5019 ;	move.c:47: o = *origin;
      001779 E0               [24] 5020 	movx	a,@dptr
      00177A F8               [12] 5021 	mov	r0,a
                                   5022 ;	move.c:48: *target = o;
      00177B 7B 00            [12] 5023 	mov	r3,#0x00
      00177D 85*52 82         [24] 5024 	mov	dpl,_move_target_65537_280
      001780 85*53 83         [24] 5025 	mov	dph,(_move_target_65537_280 + 1)
      001783 E8               [12] 5026 	mov	a,r0
      001784 F0               [24] 5027 	movx	@dptr,a
      001785 EB               [12] 5028 	mov	a,r3
      001786 A3               [24] 5029 	inc	dptr
      001787 F0               [24] 5030 	movx	@dptr,a
                                   5031 ;	move.c:49: IOM = 1;
                                   5032 ;	assignBit
      001788 D2 B4            [12] 5033 	setb	_P3_4
                                   5034 ;	move.c:37: for (i = 0; i < size; i++) {
      00178A 0A               [12] 5035 	inc	r2
      00178B D0 03            [24] 5036 	pop	ar3
      00178D 80 8E            [24] 5037 	sjmp	00109$
      00178F                       5038 00104$:
                                   5039 ;	move.c:56: LCD_string_write("Done!\n");
      00178F 90r06rC2         [24] 5040 	mov	dptr,#___str_30
      001792 75 F0 80         [24] 5041 	mov	b,#0x80
      001795 12r0Cr70         [24] 5042 	lcall	_LCD_string_write
                                   5043 ;	move.c:57: LCD_string_write("Press 1 for menu\n");
      001798 90r05rE9         [24] 5044 	mov	dptr,#___str_17
      00179B 75 F0 80         [24] 5045 	mov	b,#0x80
      00179E 12r0Cr70         [24] 5046 	lcall	_LCD_string_write
                                   5047 ;	move.c:59: do {
      0017A1                       5048 00105$:
                                   5049 ;	move.c:60: size = keyDetect();
      0017A1 12r0Dr0F         [24] 5050 	lcall	_keyDetect
      0017A4 AF 82            [24] 5051 	mov	r7,dpl
                                   5052 ;	move.c:61: } while (size != '1');
      0017A6 BF 31 F8         [24] 5053 	cjne	r7,#0x31,00105$
                                   5054 ;	move.c:62: }
      0017A9 22               [24] 5055 	ret
                                   5056 ;------------------------------------------------------------
                                   5057 ;Allocation info for local variables in function 'editByte'
                                   5058 ;------------------------------------------------------------
                                   5059 ;ramAddress                Allocated to registers r6 r7 
                                   5060 ;add                       Allocated with name '_editByte_add_65536_284'
                                   5061 ;val                       Allocated with name '_editByte_val_65536_285'
                                   5062 ;new                       Allocated with name '_editByte_new_65536_285'
                                   5063 ;high                      Allocated with name '_editByte_high_65536_285'
                                   5064 ;low                       Allocated with name '_editByte_low_65536_285'
                                   5065 ;------------------------------------------------------------
                                   5066 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   5067 ;	-----------------------------------------
                                   5068 ;	 function editByte
                                   5069 ;	-----------------------------------------
      0017AA                       5070 _editByte:
      0017AA AF 83            [24] 5071 	mov	r7,dph
      0017AC E5 82            [12] 5072 	mov	a,dpl
      0017AE 90r00r1F         [24] 5073 	mov	dptr,#_editByte_add_65536_284
      0017B1 F0               [24] 5074 	movx	@dptr,a
      0017B2 EF               [12] 5075 	mov	a,r7
      0017B3 A3               [24] 5076 	inc	dptr
      0017B4 F0               [24] 5077 	movx	@dptr,a
                                   5078 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      0017B5 90r00r1F         [24] 5079 	mov	dptr,#_editByte_add_65536_284
      0017B8 E0               [24] 5080 	movx	a,@dptr
      0017B9 FE               [12] 5081 	mov	r6,a
      0017BA A3               [24] 5082 	inc	dptr
      0017BB E0               [24] 5083 	movx	a,@dptr
      0017BC FF               [12] 5084 	mov	r7,a
      0017BD FC               [12] 5085 	mov	r4,a
                                   5086 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      0017BE 8E 05            [24] 5087 	mov	ar5,r6
                                   5088 ;	edit.c:16: asciiToHex(high);
      0017C0 8C 82            [24] 5089 	mov	dpl,r4
      0017C2 C0 07            [24] 5090 	push	ar7
      0017C4 C0 06            [24] 5091 	push	ar6
      0017C6 C0 05            [24] 5092 	push	ar5
      0017C8 C0 04            [24] 5093 	push	ar4
      0017CA 12r0ErF1         [24] 5094 	lcall	_asciiToHex
      0017CD D0 04            [24] 5095 	pop	ar4
      0017CF D0 05            [24] 5096 	pop	ar5
                                   5097 ;	edit.c:17: asciiToHex(low);
      0017D1 8D 82            [24] 5098 	mov	dpl,r5
      0017D3 C0 05            [24] 5099 	push	ar5
      0017D5 C0 04            [24] 5100 	push	ar4
      0017D7 12r0ErF1         [24] 5101 	lcall	_asciiToHex
                                   5102 ;	edit.c:19: LCD_string_write(": ");
      0017DA 90r05r4B         [24] 5103 	mov	dptr,#___str_6
      0017DD 75 F0 80         [24] 5104 	mov	b,#0x80
      0017E0 12r0Cr70         [24] 5105 	lcall	_LCD_string_write
      0017E3 D0 04            [24] 5106 	pop	ar4
      0017E5 D0 05            [24] 5107 	pop	ar5
      0017E7 D0 06            [24] 5108 	pop	ar6
      0017E9 D0 07            [24] 5109 	pop	ar7
                                   5110 ;	edit.c:22: IOM = 0;
                                   5111 ;	assignBit
      0017EB C2 B4            [12] 5112 	clr	_P3_4
                                   5113 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   5114 ;	edit.c:24: val = *ramAddress;
      0017ED 8E 82            [24] 5115 	mov	dpl,r6
      0017EF 8F 83            [24] 5116 	mov	dph,r7
      0017F1 E0               [24] 5117 	movx	a,@dptr
      0017F2 FB               [12] 5118 	mov	r3,a
                                   5119 ;	edit.c:25: IOM = 1;
                                   5120 ;	assignBit
      0017F3 D2 B4            [12] 5121 	setb	_P3_4
                                   5122 ;	edit.c:28: asciiToHex(val);
      0017F5 8B 82            [24] 5123 	mov	dpl,r3
      0017F7 C0 07            [24] 5124 	push	ar7
      0017F9 C0 06            [24] 5125 	push	ar6
      0017FB C0 05            [24] 5126 	push	ar5
      0017FD C0 04            [24] 5127 	push	ar4
      0017FF 12r0ErF1         [24] 5128 	lcall	_asciiToHex
                                   5129 ;	edit.c:31: write('\n');
      001802 75 82 0A         [24] 5130 	mov	dpl,#0x0a
      001805 12r0Cr02         [24] 5131 	lcall	_write
                                   5132 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      001808 90r06rC9         [24] 5133 	mov	dptr,#___str_31
      00180B 75 F0 80         [24] 5134 	mov	b,#0x80
      00180E 12r0Cr70         [24] 5135 	lcall	_LCD_string_write
                                   5136 ;	edit.c:33: new = getByte();
      001811 12r10rD1         [24] 5137 	lcall	_getByte
      001814 AB 82            [24] 5138 	mov	r3,dpl
                                   5139 ;	edit.c:34: write('\n');
      001816 75 82 0A         [24] 5140 	mov	dpl,#0x0a
      001819 C0 03            [24] 5141 	push	ar3
      00181B 12r0Cr02         [24] 5142 	lcall	_write
      00181E D0 03            [24] 5143 	pop	ar3
      001820 D0 04            [24] 5144 	pop	ar4
      001822 D0 05            [24] 5145 	pop	ar5
      001824 D0 06            [24] 5146 	pop	ar6
      001826 D0 07            [24] 5147 	pop	ar7
                                   5148 ;	edit.c:37: IOM = 0;
                                   5149 ;	assignBit
      001828 C2 B4            [12] 5150 	clr	_P3_4
                                   5151 ;	edit.c:38: *ramAddress = new;
      00182A 7A 00            [12] 5152 	mov	r2,#0x00
      00182C 8E 82            [24] 5153 	mov	dpl,r6
      00182E 8F 83            [24] 5154 	mov	dph,r7
      001830 EB               [12] 5155 	mov	a,r3
      001831 F0               [24] 5156 	movx	@dptr,a
      001832 EA               [12] 5157 	mov	a,r2
      001833 A3               [24] 5158 	inc	dptr
      001834 F0               [24] 5159 	movx	@dptr,a
                                   5160 ;	edit.c:39: val = *ramAddress;
                                   5161 ;	edit.c:40: IOM = 1;
                                   5162 ;	assignBit
      001835 D2 B4            [12] 5163 	setb	_P3_4
                                   5164 ;	edit.c:43: asciiToHex(high);
      001837 8C 82            [24] 5165 	mov	dpl,r4
      001839 C0 05            [24] 5166 	push	ar5
      00183B C0 03            [24] 5167 	push	ar3
      00183D 12r0ErF1         [24] 5168 	lcall	_asciiToHex
      001840 D0 03            [24] 5169 	pop	ar3
      001842 D0 05            [24] 5170 	pop	ar5
                                   5171 ;	edit.c:44: asciiToHex(low);
      001844 8D 82            [24] 5172 	mov	dpl,r5
      001846 C0 03            [24] 5173 	push	ar3
      001848 12r0ErF1         [24] 5174 	lcall	_asciiToHex
                                   5175 ;	edit.c:45: LCD_string_write(": ");
      00184B 90r05r4B         [24] 5176 	mov	dptr,#___str_6
      00184E 75 F0 80         [24] 5177 	mov	b,#0x80
      001851 12r0Cr70         [24] 5178 	lcall	_LCD_string_write
      001854 D0 03            [24] 5179 	pop	ar3
                                   5180 ;	edit.c:46: asciiToHex(val);
      001856 8B 82            [24] 5181 	mov	dpl,r3
      001858 12r0ErF1         [24] 5182 	lcall	_asciiToHex
                                   5183 ;	edit.c:47: write('\n');
      00185B 75 82 0A         [24] 5184 	mov	dpl,#0x0a
                                   5185 ;	edit.c:49: }
      00185E 02r0Cr02         [24] 5186 	ljmp	_write
                                   5187 ;------------------------------------------------------------
                                   5188 ;Allocation info for local variables in function 'edit'
                                   5189 ;------------------------------------------------------------
                                   5190 ;input                     Allocated with name '_edit_input_65537_288'
                                   5191 ;add                       Allocated with name '_edit_add_65537_288'
                                   5192 ;------------------------------------------------------------
                                   5193 ;	edit.c:55: void edit(void) {
                                   5194 ;	-----------------------------------------
                                   5195 ;	 function edit
                                   5196 ;	-----------------------------------------
      001861                       5197 _edit:
                                   5198 ;	edit.c:57: fillScreen(GRAY);
      001861 90 D6 BA         [24] 5199 	mov	dptr,#0xd6ba
      001864 12r08r69         [24] 5200 	lcall	_fillScreen
                                   5201 ;	edit.c:58: setCursor(0, 0);
      001867 E4               [12] 5202 	clr	a
      001868 F5*00            [12] 5203 	mov	_setCursor_PARM_2,a
      00186A F5*01            [12] 5204 	mov	(_setCursor_PARM_2 + 1),a
      00186C 90 00 00         [24] 5205 	mov	dptr,#0x0000
      00186F 12r00rDB         [24] 5206 	lcall	_setCursor
                                   5207 ;	edit.c:59: setTextSize(2);
      001872 75 82 02         [24] 5208 	mov	dpl,#0x02
      001875 12r00rF5         [24] 5209 	lcall	_setTextSize
                                   5210 ;	edit.c:66: LCD_string_write("Enter address:\n");
      001878 90r06rDA         [24] 5211 	mov	dptr,#___str_32
      00187B 75 F0 80         [24] 5212 	mov	b,#0x80
      00187E 12r0Cr70         [24] 5213 	lcall	_LCD_string_write
                                   5214 ;	edit.c:67: add = getAddress();
      001881 12r10r6A         [24] 5215 	lcall	_getAddress
      001884 AE 82            [24] 5216 	mov	r6,dpl
      001886 AF 83            [24] 5217 	mov	r7,dph
                                   5218 ;	edit.c:68: write('\n');
      001888 75 82 0A         [24] 5219 	mov	dpl,#0x0a
      00188B C0 07            [24] 5220 	push	ar7
      00188D C0 06            [24] 5221 	push	ar6
      00188F 12r0Cr02         [24] 5222 	lcall	_write
      001892 D0 06            [24] 5223 	pop	ar6
      001894 D0 07            [24] 5224 	pop	ar7
                                   5225 ;	edit.c:71: editByte(add);
      001896 8E 82            [24] 5226 	mov	dpl,r6
      001898 8F 83            [24] 5227 	mov	dph,r7
      00189A C0 07            [24] 5228 	push	ar7
      00189C C0 06            [24] 5229 	push	ar6
      00189E 12r17rAA         [24] 5230 	lcall	_editByte
      0018A1 D0 06            [24] 5231 	pop	ar6
      0018A3 D0 07            [24] 5232 	pop	ar7
                                   5233 ;	edit.c:74: do {
      0018A5                       5234 00111$:
                                   5235 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      0018A5 90r05rE9         [24] 5236 	mov	dptr,#___str_17
      0018A8 75 F0 80         [24] 5237 	mov	b,#0x80
      0018AB C0 07            [24] 5238 	push	ar7
      0018AD C0 06            [24] 5239 	push	ar6
      0018AF 12r0Cr70         [24] 5240 	lcall	_LCD_string_write
                                   5241 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      0018B2 90r06rEA         [24] 5242 	mov	dptr,#___str_33
      0018B5 75 F0 80         [24] 5243 	mov	b,#0x80
      0018B8 12r0Cr70         [24] 5244 	lcall	_LCD_string_write
                                   5245 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      0018BB 90r07r01         [24] 5246 	mov	dptr,#___str_34
      0018BE 75 F0 80         [24] 5247 	mov	b,#0x80
      0018C1 12r0Cr70         [24] 5248 	lcall	_LCD_string_write
                                   5249 ;	edit.c:78: input = keyDetect();
      0018C4 12r0Dr0F         [24] 5250 	lcall	_keyDetect
      0018C7 AD 82            [24] 5251 	mov	r5,dpl
      0018C9 D0 06            [24] 5252 	pop	ar6
      0018CB D0 07            [24] 5253 	pop	ar7
      0018CD 90r00r21         [24] 5254 	mov	dptr,#_edit_input_65537_288
      0018D0 ED               [12] 5255 	mov	a,r5
      0018D1 F0               [24] 5256 	movx	@dptr,a
                                   5257 ;	edit.c:80: if (input == '1') {
      0018D2 BD 31 01         [24] 5258 	cjne	r5,#0x31,00141$
      0018D5 22               [24] 5259 	ret
      0018D6                       5260 00141$:
                                   5261 ;	edit.c:82: } else if (input =='2') {
      0018D6 BD 32 2F         [24] 5262 	cjne	r5,#0x32,00104$
                                   5263 ;	edit.c:83: fillScreen(GRAY);
      0018D9 90 D6 BA         [24] 5264 	mov	dptr,#0xd6ba
      0018DC C0 07            [24] 5265 	push	ar7
      0018DE C0 06            [24] 5266 	push	ar6
      0018E0 12r08r69         [24] 5267 	lcall	_fillScreen
                                   5268 ;	edit.c:84: setCursor(0, 0);
      0018E3 E4               [12] 5269 	clr	a
      0018E4 F5*00            [12] 5270 	mov	_setCursor_PARM_2,a
      0018E6 F5*01            [12] 5271 	mov	(_setCursor_PARM_2 + 1),a
      0018E8 90 00 00         [24] 5272 	mov	dptr,#0x0000
      0018EB 12r00rDB         [24] 5273 	lcall	_setCursor
      0018EE D0 06            [24] 5274 	pop	ar6
      0018F0 D0 07            [24] 5275 	pop	ar7
                                   5276 ;	edit.c:86: editByte(add);
      0018F2 8E 82            [24] 5277 	mov	dpl,r6
      0018F4 8F 83            [24] 5278 	mov	dph,r7
      0018F6 C0 07            [24] 5279 	push	ar7
      0018F8 C0 06            [24] 5280 	push	ar6
      0018FA 12r17rAA         [24] 5281 	lcall	_editByte
      0018FD D0 06            [24] 5282 	pop	ar6
      0018FF D0 07            [24] 5283 	pop	ar7
                                   5284 ;	edit.c:88: input = 0;
      001901 90r00r21         [24] 5285 	mov	dptr,#_edit_input_65537_288
      001904 E4               [12] 5286 	clr	a
      001905 F0               [24] 5287 	movx	@dptr,a
      001906 80 35            [24] 5288 	sjmp	00112$
      001908                       5289 00104$:
                                   5290 ;	edit.c:89: } else if (input == '3') {
      001908 BD 33 32         [24] 5291 	cjne	r5,#0x33,00112$
                                   5292 ;	edit.c:90: fillScreen(GRAY);
      00190B 90 D6 BA         [24] 5293 	mov	dptr,#0xd6ba
      00190E C0 07            [24] 5294 	push	ar7
      001910 C0 06            [24] 5295 	push	ar6
      001912 12r08r69         [24] 5296 	lcall	_fillScreen
                                   5297 ;	edit.c:91: setCursor(0, 0);
      001915 E4               [12] 5298 	clr	a
      001916 F5*00            [12] 5299 	mov	_setCursor_PARM_2,a
      001918 F5*01            [12] 5300 	mov	(_setCursor_PARM_2 + 1),a
      00191A 90 00 00         [24] 5301 	mov	dptr,#0x0000
      00191D 12r00rDB         [24] 5302 	lcall	_setCursor
      001920 D0 06            [24] 5303 	pop	ar6
      001922 D0 07            [24] 5304 	pop	ar7
                                   5305 ;	edit.c:93: editByte(++add);
      001924 0E               [12] 5306 	inc	r6
      001925 BE 00 01         [24] 5307 	cjne	r6,#0x00,00146$
      001928 0F               [12] 5308 	inc	r7
      001929                       5309 00146$:
      001929 8E 82            [24] 5310 	mov	dpl,r6
      00192B 8F 83            [24] 5311 	mov	dph,r7
      00192D C0 07            [24] 5312 	push	ar7
      00192F C0 06            [24] 5313 	push	ar6
      001931 12r17rAA         [24] 5314 	lcall	_editByte
      001934 D0 06            [24] 5315 	pop	ar6
      001936 D0 07            [24] 5316 	pop	ar7
                                   5317 ;	edit.c:95: input = 0;
      001938 90r00r21         [24] 5318 	mov	dptr,#_edit_input_65537_288
      00193B E4               [12] 5319 	clr	a
      00193C F0               [24] 5320 	movx	@dptr,a
      00193D                       5321 00112$:
                                   5322 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      00193D 90r00r21         [24] 5323 	mov	dptr,#_edit_input_65537_288
      001940 E0               [24] 5324 	movx	a,@dptr
      001941 FD               [12] 5325 	mov	r5,a
      001942 BD 31 01         [24] 5326 	cjne	r5,#0x31,00147$
      001945 22               [24] 5327 	ret
      001946                       5328 00147$:
      001946 BD 32 01         [24] 5329 	cjne	r5,#0x32,00148$
      001949 22               [24] 5330 	ret
      00194A                       5331 00148$:
      00194A BD 33 01         [24] 5332 	cjne	r5,#0x33,00149$
      00194D 22               [24] 5333 	ret
      00194E                       5334 00149$:
      00194E 02r18rA5         [24] 5335 	ljmp	00111$
                                   5336 ;	edit.c:99: }
      001951 22               [24] 5337 	ret
                                   5338 ;------------------------------------------------------------
                                   5339 ;Allocation info for local variables in function 'printCount'
                                   5340 ;------------------------------------------------------------
                                   5341 ;key                       Allocated with name '_printCount_PARM_2'
                                   5342 ;index                     Allocated with name '_printCount_PARM_3'
                                   5343 ;count                     Allocated with name '_printCount_PARM_4'
                                   5344 ;start                     Allocated to registers r6 r7 
                                   5345 ;i                         Allocated to registers r4 
                                   5346 ;found                     Allocated to registers r3 
                                   5347 ;high                      Allocated to registers r2 
                                   5348 ;low                       Allocated to registers r1 
                                   5349 ;ramAddress                Allocated to registers 
                                   5350 ;------------------------------------------------------------
                                   5351 ;	count3.c:1: void printCount(uint16_t start, uint8_t key, uint8_t index, uint8_t count) {
                                   5352 ;	-----------------------------------------
                                   5353 ;	 function printCount
                                   5354 ;	-----------------------------------------
      001952                       5355 _printCount:
      001952 AE 82            [24] 5356 	mov	r6,dpl
      001954 AF 83            [24] 5357 	mov	r7,dph
                                   5358 ;	count3.c:3: fillScreen(GRAY);
      001956 90 D6 BA         [24] 5359 	mov	dptr,#0xd6ba
      001959 C0 07            [24] 5360 	push	ar7
      00195B C0 06            [24] 5361 	push	ar6
      00195D 12r08r69         [24] 5362 	lcall	_fillScreen
                                   5363 ;	count3.c:4: setCursor(0, 0);
      001960 E4               [12] 5364 	clr	a
      001961 F5*00            [12] 5365 	mov	_setCursor_PARM_2,a
      001963 F5*01            [12] 5366 	mov	(_setCursor_PARM_2 + 1),a
      001965 90 00 00         [24] 5367 	mov	dptr,#0x0000
      001968 12r00rDB         [24] 5368 	lcall	_setCursor
                                   5369 ;	count3.c:5: setTextSize(2);
      00196B 75 82 02         [24] 5370 	mov	dpl,#0x02
      00196E 12r00rF5         [24] 5371 	lcall	_setTextSize
      001971 D0 06            [24] 5372 	pop	ar6
      001973 D0 07            [24] 5373 	pop	ar7
                                   5374 ;	count3.c:14: if (count == 0) {
      001975 E5*5A            [12] 5375 	mov	a,_printCount_PARM_4
      001977 70 13            [24] 5376 	jnz	00102$
                                   5377 ;	count3.c:15: LCD_string_write("No matches found\n");
      001979 90r07r1F         [24] 5378 	mov	dptr,#___str_35
      00197C 75 F0 80         [24] 5379 	mov	b,#0x80
      00197F C0 07            [24] 5380 	push	ar7
      001981 C0 06            [24] 5381 	push	ar6
      001983 12r0Cr70         [24] 5382 	lcall	_LCD_string_write
      001986 D0 06            [24] 5383 	pop	ar6
      001988 D0 07            [24] 5384 	pop	ar7
      00198A 80 17            [24] 5385 	sjmp	00113$
      00198C                       5386 00102$:
                                   5387 ;	count3.c:17: asciiToHex(count);
      00198C 85*5A 82         [24] 5388 	mov	dpl,_printCount_PARM_4
      00198F C0 07            [24] 5389 	push	ar7
      001991 C0 06            [24] 5390 	push	ar6
      001993 12r0ErF1         [24] 5391 	lcall	_asciiToHex
                                   5392 ;	count3.c:18: LCD_string_write(" matches found\n");
      001996 90r07r31         [24] 5393 	mov	dptr,#___str_36
      001999 75 F0 80         [24] 5394 	mov	b,#0x80
      00199C 12r0Cr70         [24] 5395 	lcall	_LCD_string_write
      00199F D0 06            [24] 5396 	pop	ar6
      0019A1 D0 07            [24] 5397 	pop	ar7
                                   5398 ;	count3.c:22: for (i = 0; i < NUM; i++) {
      0019A3                       5399 00113$:
      0019A3 AD*59            [24] 5400 	mov	r5,_printCount_PARM_3
      0019A5 7C 00            [12] 5401 	mov	r4,#0x00
      0019A7                       5402 00107$:
                                   5403 ;	count3.c:25: IOM = 0;
                                   5404 ;	assignBit
      0019A7 C2 B4            [12] 5405 	clr	_P3_4
                                   5406 ;	count3.c:26: ramAddress = (uint16_t __xdata*)(start + i);
      0019A9 8C 02            [24] 5407 	mov	ar2,r4
      0019AB 7B 00            [12] 5408 	mov	r3,#0x00
      0019AD 8E 00            [24] 5409 	mov	ar0,r6
      0019AF 8F 01            [24] 5410 	mov	ar1,r7
      0019B1 EA               [12] 5411 	mov	a,r2
      0019B2 28               [12] 5412 	add	a,r0
      0019B3 F8               [12] 5413 	mov	r0,a
      0019B4 EB               [12] 5414 	mov	a,r3
      0019B5 39               [12] 5415 	addc	a,r1
      0019B6 F9               [12] 5416 	mov	r1,a
      0019B7 88 82            [24] 5417 	mov	dpl,r0
      0019B9 89 83            [24] 5418 	mov	dph,r1
                                   5419 ;	count3.c:27: found = *ramAddress;
      0019BB E0               [24] 5420 	movx	a,@dptr
      0019BC FB               [12] 5421 	mov	r3,a
                                   5422 ;	count3.c:30: high = HIGHBYTE(start + i);
      0019BD 89 02            [24] 5423 	mov	ar2,r1
                                   5424 ;	count3.c:31: low = LOWBYTE(start + i);
      0019BF 8E 01            [24] 5425 	mov	ar1,r6
      0019C1 EC               [12] 5426 	mov	a,r4
      0019C2 29               [12] 5427 	add	a,r1
      0019C3 F9               [12] 5428 	mov	r1,a
                                   5429 ;	count3.c:33: if (found == key) {
      0019C4 EB               [12] 5430 	mov	a,r3
      0019C5 B5*58 3B         [24] 5431 	cjne	a,_printCount_PARM_2,00108$
                                   5432 ;	count3.c:35: asciiToHex(index++);
      0019C8 8D 82            [24] 5433 	mov	dpl,r5
      0019CA 0D               [12] 5434 	inc	r5
      0019CB C0 07            [24] 5435 	push	ar7
      0019CD C0 06            [24] 5436 	push	ar6
      0019CF C0 05            [24] 5437 	push	ar5
      0019D1 C0 04            [24] 5438 	push	ar4
      0019D3 C0 02            [24] 5439 	push	ar2
      0019D5 C0 01            [24] 5440 	push	ar1
      0019D7 12r0ErF1         [24] 5441 	lcall	_asciiToHex
                                   5442 ;	count3.c:36: LCD_string_write(": ");
      0019DA 90r05r4B         [24] 5443 	mov	dptr,#___str_6
      0019DD 75 F0 80         [24] 5444 	mov	b,#0x80
      0019E0 12r0Cr70         [24] 5445 	lcall	_LCD_string_write
      0019E3 D0 01            [24] 5446 	pop	ar1
      0019E5 D0 02            [24] 5447 	pop	ar2
                                   5448 ;	count3.c:39: asciiToHex(high);
      0019E7 8A 82            [24] 5449 	mov	dpl,r2
      0019E9 C0 01            [24] 5450 	push	ar1
      0019EB 12r0ErF1         [24] 5451 	lcall	_asciiToHex
      0019EE D0 01            [24] 5452 	pop	ar1
                                   5453 ;	count3.c:40: asciiToHex(low);
      0019F0 89 82            [24] 5454 	mov	dpl,r1
      0019F2 12r0ErF1         [24] 5455 	lcall	_asciiToHex
                                   5456 ;	count3.c:41: write('\n');
      0019F5 75 82 0A         [24] 5457 	mov	dpl,#0x0a
      0019F8 12r0Cr02         [24] 5458 	lcall	_write
      0019FB D0 04            [24] 5459 	pop	ar4
      0019FD D0 05            [24] 5460 	pop	ar5
      0019FF D0 06            [24] 5461 	pop	ar6
      001A01 D0 07            [24] 5462 	pop	ar7
      001A03                       5463 00108$:
                                   5464 ;	count3.c:22: for (i = 0; i < NUM; i++) {
      001A03 0C               [12] 5465 	inc	r4
      001A04 BC 0F 00         [24] 5466 	cjne	r4,#0x0f,00127$
      001A07                       5467 00127$:
      001A07 40 9E            [24] 5468 	jc	00107$
                                   5469 ;	count3.c:44: }
      001A09 22               [24] 5470 	ret
                                   5471 ;------------------------------------------------------------
                                   5472 ;Allocation info for local variables in function 'count'
                                   5473 ;------------------------------------------------------------
                                   5474 ;key                       Allocated with name '_count_key_65537_302'
                                   5475 ;found                     Allocated to registers r0 
                                   5476 ;ramAddress                Allocated to registers 
                                   5477 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                   5478 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                   5479 ;sloc2                     Allocated with name '_count_sloc2_1_0'
                                   5480 ;i                         Allocated with name '_count_i_65537_302'
                                   5481 ;n                         Allocated with name '_count_n_65537_302'
                                   5482 ;size                      Allocated with name '_count_size_65537_302'
                                   5483 ;page                      Allocated with name '_count_page_65537_302'
                                   5484 ;index                     Allocated with name '_count_index_65537_302'
                                   5485 ;pages                     Allocated with name '_count_pages_65537_302'
                                   5486 ;address                   Allocated with name '_count_address_65537_302'
                                   5487 ;------------------------------------------------------------
                                   5488 ;	count3.c:46: void count() {
                                   5489 ;	-----------------------------------------
                                   5490 ;	 function count
                                   5491 ;	-----------------------------------------
      001A0A                       5492 _count:
                                   5493 ;	count3.c:48: fillScreen(GRAY);
      001A0A 90 D6 BA         [24] 5494 	mov	dptr,#0xd6ba
      001A0D 12r08r69         [24] 5495 	lcall	_fillScreen
                                   5496 ;	count3.c:49: setCursor(0, 0);
      001A10 E4               [12] 5497 	clr	a
      001A11 F5*00            [12] 5498 	mov	_setCursor_PARM_2,a
      001A13 F5*01            [12] 5499 	mov	(_setCursor_PARM_2 + 1),a
      001A15 90 00 00         [24] 5500 	mov	dptr,#0x0000
      001A18 12r00rDB         [24] 5501 	lcall	_setCursor
                                   5502 ;	count3.c:50: setTextSize(2);
      001A1B 75 82 02         [24] 5503 	mov	dpl,#0x02
      001A1E 12r00rF5         [24] 5504 	lcall	_setTextSize
                                   5505 ;	count3.c:58: __xdata uint8_t page = 1;
      001A21 90r00r22         [24] 5506 	mov	dptr,#_count_page_65537_302
      001A24 74 01            [12] 5507 	mov	a,#0x01
      001A26 F0               [24] 5508 	movx	@dptr,a
                                   5509 ;	count3.c:65: LCD_string_write("Enter byte to count:\n");
      001A27 90r07r41         [24] 5510 	mov	dptr,#___str_37
      001A2A 75 F0 80         [24] 5511 	mov	b,#0x80
      001A2D 12r0Cr70         [24] 5512 	lcall	_LCD_string_write
                                   5513 ;	count3.c:66: key = getByte();
      001A30 12r10rD1         [24] 5514 	lcall	_getByte
      001A33 85 82*5B         [24] 5515 	mov	_count_key_65537_302,dpl
                                   5516 ;	count3.c:67: write('\n');
      001A36 75 82 0A         [24] 5517 	mov	dpl,#0x0a
      001A39 12r0Cr02         [24] 5518 	lcall	_write
                                   5519 ;	count3.c:70: LCD_string_write("Enter start address:\n");
      001A3C 90r05r4E         [24] 5520 	mov	dptr,#___str_7
      001A3F 75 F0 80         [24] 5521 	mov	b,#0x80
      001A42 12r0Cr70         [24] 5522 	lcall	_LCD_string_write
                                   5523 ;	count3.c:71: address = getAddress();
      001A45 12r10r6A         [24] 5524 	lcall	_getAddress
      001A48 AD 82            [24] 5525 	mov	r5,dpl
      001A4A AE 83            [24] 5526 	mov	r6,dph
      001A4C 90r00r24         [24] 5527 	mov	dptr,#_count_address_65537_302
      001A4F ED               [12] 5528 	mov	a,r5
      001A50 F0               [24] 5529 	movx	@dptr,a
      001A51 EE               [12] 5530 	mov	a,r6
      001A52 A3               [24] 5531 	inc	dptr
      001A53 F0               [24] 5532 	movx	@dptr,a
                                   5533 ;	count3.c:72: write('\n');
      001A54 75 82 0A         [24] 5534 	mov	dpl,#0x0a
      001A57 C0 06            [24] 5535 	push	ar6
      001A59 C0 05            [24] 5536 	push	ar5
      001A5B 12r0Cr02         [24] 5537 	lcall	_write
                                   5538 ;	count3.c:75: LCD_string_write("Enter block size:\n");
      001A5E 90r05rAE         [24] 5539 	mov	dptr,#___str_14
      001A61 75 F0 80         [24] 5540 	mov	b,#0x80
      001A64 12r0Cr70         [24] 5541 	lcall	_LCD_string_write
                                   5542 ;	count3.c:76: size = getByte();
      001A67 12r10rD1         [24] 5543 	lcall	_getByte
      001A6A AC 82            [24] 5544 	mov	r4,dpl
                                   5545 ;	count3.c:77: write('\n');
      001A6C 75 82 0A         [24] 5546 	mov	dpl,#0x0a
      001A6F C0 04            [24] 5547 	push	ar4
      001A71 12r0Cr02         [24] 5548 	lcall	_write
      001A74 D0 04            [24] 5549 	pop	ar4
      001A76 D0 05            [24] 5550 	pop	ar5
      001A78 D0 06            [24] 5551 	pop	ar6
                                   5552 ;	count3.c:80: for (i = 0; i < size; i++) {
      001A7A 7B 00            [12] 5553 	mov	r3,#0x00
      001A7C 7A 00            [12] 5554 	mov	r2,#0x00
      001A7E                       5555 00132$:
      001A7E C3               [12] 5556 	clr	c
      001A7F EA               [12] 5557 	mov	a,r2
      001A80 9C               [12] 5558 	subb	a,r4
      001A81 50 2A            [24] 5559 	jnc	00103$
                                   5560 ;	count3.c:81: IOM = 0;
      001A83 C0 04            [24] 5561 	push	ar4
                                   5562 ;	assignBit
      001A85 C2 B4            [12] 5563 	clr	_P3_4
                                   5564 ;	count3.c:82: ramAddress = (uint16_t __xdata*)(address + i);
      001A87 8A 00            [24] 5565 	mov	ar0,r2
      001A89 79 00            [12] 5566 	mov	r1,#0x00
      001A8B 8D 04            [24] 5567 	mov	ar4,r5
      001A8D 8E 07            [24] 5568 	mov	ar7,r6
      001A8F E8               [12] 5569 	mov	a,r0
      001A90 2C               [12] 5570 	add	a,r4
      001A91 FC               [12] 5571 	mov	r4,a
      001A92 E9               [12] 5572 	mov	a,r1
      001A93 3F               [12] 5573 	addc	a,r7
      001A94 FF               [12] 5574 	mov	r7,a
      001A95 8C 82            [24] 5575 	mov	dpl,r4
      001A97 8F 83            [24] 5576 	mov	dph,r7
                                   5577 ;	count3.c:83: found = *ramAddress;
      001A99 E0               [24] 5578 	movx	a,@dptr
      001A9A FF               [12] 5579 	mov	r7,a
                                   5580 ;	count3.c:84: IOM = 1;
                                   5581 ;	assignBit
      001A9B D2 B4            [12] 5582 	setb	_P3_4
                                   5583 ;	count3.c:86: if (found == key) n++;
      001A9D EF               [12] 5584 	mov	a,r7
      001A9E B5*5B 02         [24] 5585 	cjne	a,_count_key_65537_302,00228$
      001AA1 80 04            [24] 5586 	sjmp	00229$
      001AA3                       5587 00228$:
      001AA3 D0 04            [24] 5588 	pop	ar4
      001AA5 80 03            [24] 5589 	sjmp	00133$
      001AA7                       5590 00229$:
      001AA7 D0 04            [24] 5591 	pop	ar4
      001AA9 0B               [12] 5592 	inc	r3
      001AAA                       5593 00133$:
                                   5594 ;	count3.c:80: for (i = 0; i < size; i++) {
      001AAA 0A               [12] 5595 	inc	r2
      001AAB 80 D1            [24] 5596 	sjmp	00132$
      001AAD                       5597 00103$:
                                   5598 ;	count3.c:91: printCount(address, key, index, n);
      001AAD 85*5B*58         [24] 5599 	mov	_printCount_PARM_2,_count_key_65537_302
      001AB0 75*59 00         [24] 5600 	mov	_printCount_PARM_3,#0x00
      001AB3 8B*5A            [24] 5601 	mov	_printCount_PARM_4,r3
      001AB5 8D 82            [24] 5602 	mov	dpl,r5
      001AB7 8E 83            [24] 5603 	mov	dph,r6
      001AB9 C0 04            [24] 5604 	push	ar4
      001ABB C0 03            [24] 5605 	push	ar3
      001ABD 12r19r52         [24] 5606 	lcall	_printCount
      001AC0 D0 03            [24] 5607 	pop	ar3
      001AC2 D0 04            [24] 5608 	pop	ar4
                                   5609 ;	count3.c:92: index += NUM;
      001AC4 90r00r23         [24] 5610 	mov	dptr,#_count_index_65537_302
      001AC7 74 0F            [12] 5611 	mov	a,#0x0f
      001AC9 F0               [24] 5612 	movx	@dptr,a
                                   5613 ;	count3.c:98: pages = size / NUM;
      001ACA 7F 00            [12] 5614 	mov	r7,#0x00
                                   5615 ;	1-genFromRTrack replaced	mov	__divsint_PARM_2,#0x0f
      001ACC F5*00            [12] 5616 	mov	__divsint_PARM_2,a
                                   5617 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001ACE 8F*01            [24] 5618 	mov	(__divsint_PARM_2 + 1),r7
      001AD0 8C 82            [24] 5619 	mov	dpl,r4
      001AD2 8F 83            [24] 5620 	mov	dph,r7
      001AD4 C0 03            [24] 5621 	push	ar3
      001AD6 12r00r00         [24] 5622 	lcall	__divsint
      001AD9 AE 82            [24] 5623 	mov	r6,dpl
      001ADB D0 03            [24] 5624 	pop	ar3
                                   5625 ;	count3.c:101: do {
      001ADD C3               [12] 5626 	clr	c
      001ADE 74 0F            [12] 5627 	mov	a,#0x0f
      001AE0 9B               [12] 5628 	subb	a,r3
      001AE1 E4               [12] 5629 	clr	a
      001AE2 33               [12] 5630 	rlc	a
      001AE3 FF               [12] 5631 	mov	r7,a
      001AE4 FD               [12] 5632 	mov	r5,a
      001AE5 8F 04            [24] 5633 	mov	ar4,r7
      001AE7 8B 02            [24] 5634 	mov	ar2,r3
      001AE9 8F*5E            [24] 5635 	mov	_count_sloc2_1_0,r7
      001AEB 8F*5D            [24] 5636 	mov	_count_sloc1_1_0,r7
      001AED                       5637 00128$:
                                   5638 ;	count3.c:103: if (page != 1 && page != pages && n > NUM) {
      001AED 90r00r22         [24] 5639 	mov	dptr,#_count_page_65537_302
      001AF0 E0               [24] 5640 	movx	a,@dptr
      001AF1 F5*5C            [12] 5641 	mov	_count_sloc0_1_0,a
      001AF3 74 01            [12] 5642 	mov	a,#0x01
      001AF5 B5*5C 02         [24] 5643 	cjne	a,_count_sloc0_1_0,00230$
      001AF8 80 35            [24] 5644 	sjmp	00112$
      001AFA                       5645 00230$:
      001AFA EE               [12] 5646 	mov	a,r6
      001AFB B5*5C 02         [24] 5647 	cjne	a,_count_sloc0_1_0,00231$
      001AFE 80 2F            [24] 5648 	sjmp	00112$
      001B00                       5649 00231$:
      001B00 EF               [12] 5650 	mov	a,r7
      001B01 60 2C            [24] 5651 	jz	00112$
                                   5652 ;	count3.c:104: LCD_string_write("Press A for previous\n");
      001B03 90r05rC1         [24] 5653 	mov	dptr,#___str_15
      001B06 75 F0 80         [24] 5654 	mov	b,#0x80
      001B09 C0 07            [24] 5655 	push	ar7
      001B0B C0 06            [24] 5656 	push	ar6
      001B0D C0 05            [24] 5657 	push	ar5
      001B0F C0 04            [24] 5658 	push	ar4
      001B11 C0 03            [24] 5659 	push	ar3
      001B13 C0 02            [24] 5660 	push	ar2
      001B15 12r0Cr70         [24] 5661 	lcall	_LCD_string_write
                                   5662 ;	count3.c:105: LCD_string_write("Press B for next\n");
      001B18 90r05rD7         [24] 5663 	mov	dptr,#___str_16
      001B1B 75 F0 80         [24] 5664 	mov	b,#0x80
      001B1E 12r0Cr70         [24] 5665 	lcall	_LCD_string_write
      001B21 D0 02            [24] 5666 	pop	ar2
      001B23 D0 03            [24] 5667 	pop	ar3
      001B25 D0 04            [24] 5668 	pop	ar4
      001B27 D0 05            [24] 5669 	pop	ar5
      001B29 D0 06            [24] 5670 	pop	ar6
      001B2B D0 07            [24] 5671 	pop	ar7
      001B2D 80 5D            [24] 5672 	sjmp	00113$
      001B2F                       5673 00112$:
                                   5674 ;	count3.c:106: } else if (page != pages && n > NUM) {
      001B2F 90r00r22         [24] 5675 	mov	dptr,#_count_page_65537_302
      001B32 E0               [24] 5676 	movx	a,@dptr
      001B33 B5 06 02         [24] 5677 	cjne	a,ar6,00233$
      001B36 80 26            [24] 5678 	sjmp	00108$
      001B38                       5679 00233$:
      001B38 ED               [12] 5680 	mov	a,r5
      001B39 60 23            [24] 5681 	jz	00108$
                                   5682 ;	count3.c:107: LCD_string_write("Press B for next\n");
      001B3B 90r05rD7         [24] 5683 	mov	dptr,#___str_16
      001B3E 75 F0 80         [24] 5684 	mov	b,#0x80
      001B41 C0 07            [24] 5685 	push	ar7
      001B43 C0 06            [24] 5686 	push	ar6
      001B45 C0 05            [24] 5687 	push	ar5
      001B47 C0 04            [24] 5688 	push	ar4
      001B49 C0 03            [24] 5689 	push	ar3
      001B4B C0 02            [24] 5690 	push	ar2
      001B4D 12r0Cr70         [24] 5691 	lcall	_LCD_string_write
      001B50 D0 02            [24] 5692 	pop	ar2
      001B52 D0 03            [24] 5693 	pop	ar3
      001B54 D0 04            [24] 5694 	pop	ar4
      001B56 D0 05            [24] 5695 	pop	ar5
      001B58 D0 06            [24] 5696 	pop	ar6
      001B5A D0 07            [24] 5697 	pop	ar7
      001B5C 80 2E            [24] 5698 	sjmp	00113$
      001B5E                       5699 00108$:
                                   5700 ;	count3.c:108: } else if (page != 1 && n > NUM) {
      001B5E 90r00r22         [24] 5701 	mov	dptr,#_count_page_65537_302
      001B61 E0               [24] 5702 	movx	a,@dptr
      001B62 F8               [12] 5703 	mov	r0,a
      001B63 B8 01 02         [24] 5704 	cjne	r0,#0x01,00235$
      001B66 80 24            [24] 5705 	sjmp	00113$
      001B68                       5706 00235$:
      001B68 EC               [12] 5707 	mov	a,r4
      001B69 60 21            [24] 5708 	jz	00113$
                                   5709 ;	count3.c:109: LCD_string_write("Press A for previous\n");
      001B6B 90r05rC1         [24] 5710 	mov	dptr,#___str_15
      001B6E 75 F0 80         [24] 5711 	mov	b,#0x80
      001B71 C0 07            [24] 5712 	push	ar7
      001B73 C0 06            [24] 5713 	push	ar6
      001B75 C0 05            [24] 5714 	push	ar5
      001B77 C0 04            [24] 5715 	push	ar4
      001B79 C0 03            [24] 5716 	push	ar3
      001B7B C0 02            [24] 5717 	push	ar2
      001B7D 12r0Cr70         [24] 5718 	lcall	_LCD_string_write
      001B80 D0 02            [24] 5719 	pop	ar2
      001B82 D0 03            [24] 5720 	pop	ar3
      001B84 D0 04            [24] 5721 	pop	ar4
      001B86 D0 05            [24] 5722 	pop	ar5
      001B88 D0 06            [24] 5723 	pop	ar6
      001B8A D0 07            [24] 5724 	pop	ar7
      001B8C                       5725 00113$:
                                   5726 ;	count3.c:113: LCD_string_write("Press 1 for menu\n");
      001B8C 90r05rE9         [24] 5727 	mov	dptr,#___str_17
      001B8F 75 F0 80         [24] 5728 	mov	b,#0x80
      001B92 C0 07            [24] 5729 	push	ar7
      001B94 C0 06            [24] 5730 	push	ar6
      001B96 C0 05            [24] 5731 	push	ar5
      001B98 C0 04            [24] 5732 	push	ar4
      001B9A C0 03            [24] 5733 	push	ar3
      001B9C C0 02            [24] 5734 	push	ar2
      001B9E 12r0Cr70         [24] 5735 	lcall	_LCD_string_write
                                   5736 ;	count3.c:116: found = keyDetect();
      001BA1 12r0Dr0F         [24] 5737 	lcall	_keyDetect
      001BA4 A8 82            [24] 5738 	mov	r0,dpl
      001BA6 D0 02            [24] 5739 	pop	ar2
      001BA8 D0 03            [24] 5740 	pop	ar3
      001BAA D0 04            [24] 5741 	pop	ar4
      001BAC D0 05            [24] 5742 	pop	ar5
      001BAE D0 06            [24] 5743 	pop	ar6
      001BB0 D0 07            [24] 5744 	pop	ar7
                                   5745 ;	count3.c:119: if (found == '1') {
      001BB2 B8 31 01         [24] 5746 	cjne	r0,#0x31,00237$
      001BB5 22               [24] 5747 	ret
      001BB6                       5748 00237$:
                                   5749 ;	count3.c:121: } else if (found == 'B' && page != pages && n > NUM) {
      001BB6 B8 42 6E         [24] 5750 	cjne	r0,#0x42,00121$
      001BB9 90r00r22         [24] 5751 	mov	dptr,#_count_page_65537_302
      001BBC E0               [24] 5752 	movx	a,@dptr
      001BBD F5*5C            [12] 5753 	mov	_count_sloc0_1_0,a
      001BBF EE               [12] 5754 	mov	a,r6
      001BC0 B5*5C 02         [24] 5755 	cjne	a,_count_sloc0_1_0,00240$
      001BC3 80 62            [24] 5756 	sjmp	00121$
      001BC5                       5757 00240$:
      001BC5 E5*5E            [12] 5758 	mov	a,_count_sloc2_1_0
      001BC7 60 5E            [24] 5759 	jz	00121$
                                   5760 ;	count3.c:122: index += NUM;
      001BC9 C0 03            [24] 5761 	push	ar3
      001BCB 90r00r23         [24] 5762 	mov	dptr,#_count_index_65537_302
      001BCE E0               [24] 5763 	movx	a,@dptr
      001BCF 24 0F            [12] 5764 	add	a,#0x0f
      001BD1 F0               [24] 5765 	movx	@dptr,a
                                   5766 ;	count3.c:123: address += NUM;
      001BD2 90r00r24         [24] 5767 	mov	dptr,#_count_address_65537_302
      001BD5 E0               [24] 5768 	movx	a,@dptr
      001BD6 F9               [12] 5769 	mov	r1,a
      001BD7 A3               [24] 5770 	inc	dptr
      001BD8 E0               [24] 5771 	movx	a,@dptr
      001BD9 FB               [12] 5772 	mov	r3,a
      001BDA 74 0F            [12] 5773 	mov	a,#0x0f
      001BDC 29               [12] 5774 	add	a,r1
      001BDD F9               [12] 5775 	mov	r1,a
      001BDE E4               [12] 5776 	clr	a
      001BDF 3B               [12] 5777 	addc	a,r3
      001BE0 FB               [12] 5778 	mov	r3,a
      001BE1 90r00r24         [24] 5779 	mov	dptr,#_count_address_65537_302
      001BE4 E9               [12] 5780 	mov	a,r1
      001BE5 F0               [24] 5781 	movx	@dptr,a
      001BE6 EB               [12] 5782 	mov	a,r3
      001BE7 A3               [24] 5783 	inc	dptr
      001BE8 F0               [24] 5784 	movx	@dptr,a
                                   5785 ;	count3.c:124: printCount(address, key, index, n);
      001BE9 90r00r24         [24] 5786 	mov	dptr,#_count_address_65537_302
      001BEC E0               [24] 5787 	movx	a,@dptr
      001BED F9               [12] 5788 	mov	r1,a
      001BEE A3               [24] 5789 	inc	dptr
      001BEF E0               [24] 5790 	movx	a,@dptr
      001BF0 FB               [12] 5791 	mov	r3,a
      001BF1 90r00r23         [24] 5792 	mov	dptr,#_count_index_65537_302
      001BF4 E0               [24] 5793 	movx	a,@dptr
      001BF5 F5*59            [12] 5794 	mov	_printCount_PARM_3,a
      001BF7 85*5B*58         [24] 5795 	mov	_printCount_PARM_2,_count_key_65537_302
      001BFA 8A*5A            [24] 5796 	mov	_printCount_PARM_4,r2
      001BFC 89 82            [24] 5797 	mov	dpl,r1
      001BFE 8B 83            [24] 5798 	mov	dph,r3
      001C00 C0 07            [24] 5799 	push	ar7
      001C02 C0 06            [24] 5800 	push	ar6
      001C04 C0 05            [24] 5801 	push	ar5
      001C06 C0 04            [24] 5802 	push	ar4
      001C08 C0 03            [24] 5803 	push	ar3
      001C0A C0 02            [24] 5804 	push	ar2
      001C0C 12r19r52         [24] 5805 	lcall	_printCount
      001C0F D0 02            [24] 5806 	pop	ar2
      001C11 D0 03            [24] 5807 	pop	ar3
      001C13 D0 04            [24] 5808 	pop	ar4
      001C15 D0 05            [24] 5809 	pop	ar5
      001C17 D0 06            [24] 5810 	pop	ar6
      001C19 D0 07            [24] 5811 	pop	ar7
                                   5812 ;	count3.c:125: page++;
      001C1B 90r00r22         [24] 5813 	mov	dptr,#_count_page_65537_302
      001C1E E5*5C            [12] 5814 	mov	a,_count_sloc0_1_0
      001C20 04               [12] 5815 	inc	a
      001C21 F0               [24] 5816 	movx	@dptr,a
      001C22 D0 03            [24] 5817 	pop	ar3
      001C24 02r1ArED         [24] 5818 	ljmp	00128$
      001C27                       5819 00121$:
                                   5820 ;	count3.c:126: } else if (found == 'A' && page != 1 && n > NUM) {
      001C27 B8 41 02         [24] 5821 	cjne	r0,#0x41,00242$
      001C2A 80 03            [24] 5822 	sjmp	00243$
      001C2C                       5823 00242$:
      001C2C 02r1ArED         [24] 5824 	ljmp	00128$
      001C2F                       5825 00243$:
      001C2F 90r00r22         [24] 5826 	mov	dptr,#_count_page_65537_302
      001C32 E0               [24] 5827 	movx	a,@dptr
      001C33 F9               [12] 5828 	mov	r1,a
      001C34 B9 01 03         [24] 5829 	cjne	r1,#0x01,00244$
      001C37 02r1ArED         [24] 5830 	ljmp	00128$
      001C3A                       5831 00244$:
      001C3A E5*5D            [12] 5832 	mov	a,_count_sloc1_1_0
      001C3C 70 03            [24] 5833 	jnz	00245$
      001C3E 02r1ArED         [24] 5834 	ljmp	00128$
      001C41                       5835 00245$:
                                   5836 ;	count3.c:127: index -= NUM;
      001C41 C0 02            [24] 5837 	push	ar2
      001C43 90r00r23         [24] 5838 	mov	dptr,#_count_index_65537_302
      001C46 E0               [24] 5839 	movx	a,@dptr
      001C47 24 F1            [12] 5840 	add	a,#0xf1
      001C49 F0               [24] 5841 	movx	@dptr,a
                                   5842 ;	count3.c:128: address -= NUM;
      001C4A 90r00r24         [24] 5843 	mov	dptr,#_count_address_65537_302
      001C4D E0               [24] 5844 	movx	a,@dptr
      001C4E F8               [12] 5845 	mov	r0,a
      001C4F A3               [24] 5846 	inc	dptr
      001C50 E0               [24] 5847 	movx	a,@dptr
      001C51 FA               [12] 5848 	mov	r2,a
      001C52 E8               [12] 5849 	mov	a,r0
      001C53 24 F1            [12] 5850 	add	a,#0xf1
      001C55 F8               [12] 5851 	mov	r0,a
      001C56 EA               [12] 5852 	mov	a,r2
      001C57 34 FF            [12] 5853 	addc	a,#0xff
      001C59 FA               [12] 5854 	mov	r2,a
      001C5A 90r00r24         [24] 5855 	mov	dptr,#_count_address_65537_302
      001C5D E8               [12] 5856 	mov	a,r0
      001C5E F0               [24] 5857 	movx	@dptr,a
      001C5F EA               [12] 5858 	mov	a,r2
      001C60 A3               [24] 5859 	inc	dptr
      001C61 F0               [24] 5860 	movx	@dptr,a
                                   5861 ;	count3.c:129: printCount(address, key, index, n);
      001C62 90r00r24         [24] 5862 	mov	dptr,#_count_address_65537_302
      001C65 E0               [24] 5863 	movx	a,@dptr
      001C66 F8               [12] 5864 	mov	r0,a
      001C67 A3               [24] 5865 	inc	dptr
      001C68 E0               [24] 5866 	movx	a,@dptr
      001C69 FA               [12] 5867 	mov	r2,a
      001C6A 90r00r23         [24] 5868 	mov	dptr,#_count_index_65537_302
      001C6D E0               [24] 5869 	movx	a,@dptr
      001C6E F5*59            [12] 5870 	mov	_printCount_PARM_3,a
      001C70 85*5B*58         [24] 5871 	mov	_printCount_PARM_2,_count_key_65537_302
      001C73 8B*5A            [24] 5872 	mov	_printCount_PARM_4,r3
      001C75 88 82            [24] 5873 	mov	dpl,r0
      001C77 8A 83            [24] 5874 	mov	dph,r2
      001C79 C0 07            [24] 5875 	push	ar7
      001C7B C0 06            [24] 5876 	push	ar6
      001C7D C0 05            [24] 5877 	push	ar5
      001C7F C0 04            [24] 5878 	push	ar4
      001C81 C0 03            [24] 5879 	push	ar3
      001C83 C0 02            [24] 5880 	push	ar2
      001C85 C0 01            [24] 5881 	push	ar1
      001C87 12r19r52         [24] 5882 	lcall	_printCount
      001C8A D0 01            [24] 5883 	pop	ar1
      001C8C D0 02            [24] 5884 	pop	ar2
      001C8E D0 03            [24] 5885 	pop	ar3
      001C90 D0 04            [24] 5886 	pop	ar4
      001C92 D0 05            [24] 5887 	pop	ar5
      001C94 D0 06            [24] 5888 	pop	ar6
      001C96 D0 07            [24] 5889 	pop	ar7
                                   5890 ;	count3.c:130: page--;
      001C98 E9               [12] 5891 	mov	a,r1
      001C99 14               [12] 5892 	dec	a
      001C9A 90r00r22         [24] 5893 	mov	dptr,#_count_page_65537_302
      001C9D F0               [24] 5894 	movx	@dptr,a
                                   5895 ;	count3.c:132: } while (1);
      001C9E D0 02            [24] 5896 	pop	ar2
                                   5897 ;	count3.c:133: }
      001CA0 02r1ArED         [24] 5898 	ljmp	00128$
                                   5899 ;------------------------------------------------------------
                                   5900 ;Allocation info for local variables in function 'displayTemp'
                                   5901 ;------------------------------------------------------------
                                   5902 ;t                         Allocated to registers r7 
                                   5903 ;------------------------------------------------------------
                                   5904 ;	analog.c:6: void displayTemp(uint8_t t) {
                                   5905 ;	-----------------------------------------
                                   5906 ;	 function displayTemp
                                   5907 ;	-----------------------------------------
      001CA3                       5908 _displayTemp:
      001CA3 AF 82            [24] 5909 	mov	r7,dpl
                                   5910 ;	analog.c:8: fillScreen(GRAY);
      001CA5 90 D6 BA         [24] 5911 	mov	dptr,#0xd6ba
      001CA8 C0 07            [24] 5912 	push	ar7
      001CAA 12r08r69         [24] 5913 	lcall	_fillScreen
                                   5914 ;	analog.c:9: setCursor(0, 0);
      001CAD E4               [12] 5915 	clr	a
      001CAE F5*00            [12] 5916 	mov	_setCursor_PARM_2,a
      001CB0 F5*01            [12] 5917 	mov	(_setCursor_PARM_2 + 1),a
      001CB2 90 00 00         [24] 5918 	mov	dptr,#0x0000
      001CB5 12r00rDB         [24] 5919 	lcall	_setCursor
                                   5920 ;	analog.c:11: LCD_string_write("Temperature: ");
      001CB8 90r07r57         [24] 5921 	mov	dptr,#___str_38
      001CBB 75 F0 80         [24] 5922 	mov	b,#0x80
      001CBE 12r0Cr70         [24] 5923 	lcall	_LCD_string_write
      001CC1 D0 07            [24] 5924 	pop	ar7
                                   5925 ;	analog.c:13: asciiToHex(t);
      001CC3 8F 82            [24] 5926 	mov	dpl,r7
      001CC5 12r0ErF1         [24] 5927 	lcall	_asciiToHex
                                   5928 ;	analog.c:15: write('\n');
      001CC8 75 82 0A         [24] 5929 	mov	dpl,#0x0a
      001CCB 12r0Cr02         [24] 5930 	lcall	_write
                                   5931 ;	analog.c:16: LCD_string_write("Press 1 for menu\n");
      001CCE 90r05rE9         [24] 5932 	mov	dptr,#___str_17
      001CD1 75 F0 80         [24] 5933 	mov	b,#0x80
      001CD4 12r0Cr70         [24] 5934 	lcall	_LCD_string_write
                                   5935 ;	analog.c:17: LCD_string_write("Press key to refresh\n");
      001CD7 90r07r65         [24] 5936 	mov	dptr,#___str_39
      001CDA 75 F0 80         [24] 5937 	mov	b,#0x80
                                   5938 ;	analog.c:18: }
      001CDD 02r0Cr70         [24] 5939 	ljmp	_LCD_string_write
                                   5940 ;------------------------------------------------------------
                                   5941 ;Allocation info for local variables in function 'displayLight'
                                   5942 ;------------------------------------------------------------
                                   5943 ;l                         Allocated to registers r7 
                                   5944 ;------------------------------------------------------------
                                   5945 ;	analog.c:25: void displayLight(uint8_t l) {
                                   5946 ;	-----------------------------------------
                                   5947 ;	 function displayLight
                                   5948 ;	-----------------------------------------
      001CE0                       5949 _displayLight:
      001CE0 AF 82            [24] 5950 	mov	r7,dpl
                                   5951 ;	analog.c:27: fillScreen(GRAY);
      001CE2 90 D6 BA         [24] 5952 	mov	dptr,#0xd6ba
      001CE5 C0 07            [24] 5953 	push	ar7
      001CE7 12r08r69         [24] 5954 	lcall	_fillScreen
                                   5955 ;	analog.c:28: setCursor(0, 0);
      001CEA E4               [12] 5956 	clr	a
      001CEB F5*00            [12] 5957 	mov	_setCursor_PARM_2,a
      001CED F5*01            [12] 5958 	mov	(_setCursor_PARM_2 + 1),a
      001CEF 90 00 00         [24] 5959 	mov	dptr,#0x0000
      001CF2 12r00rDB         [24] 5960 	lcall	_setCursor
                                   5961 ;	analog.c:30: LCD_string_write("Light level: ");
      001CF5 90r07r7B         [24] 5962 	mov	dptr,#___str_40
      001CF8 75 F0 80         [24] 5963 	mov	b,#0x80
      001CFB 12r0Cr70         [24] 5964 	lcall	_LCD_string_write
      001CFE D0 07            [24] 5965 	pop	ar7
                                   5966 ;	analog.c:32: asciiToHex(l);
      001D00 8F 82            [24] 5967 	mov	dpl,r7
      001D02 12r0ErF1         [24] 5968 	lcall	_asciiToHex
                                   5969 ;	analog.c:34: write('\n');
      001D05 75 82 0A         [24] 5970 	mov	dpl,#0x0a
      001D08 12r0Cr02         [24] 5971 	lcall	_write
                                   5972 ;	analog.c:35: LCD_string_write("Press 1 for menu\n");
      001D0B 90r05rE9         [24] 5973 	mov	dptr,#___str_17
      001D0E 75 F0 80         [24] 5974 	mov	b,#0x80
      001D11 12r0Cr70         [24] 5975 	lcall	_LCD_string_write
                                   5976 ;	analog.c:36: LCD_string_write("Press key to refresh\n");
      001D14 90r07r65         [24] 5977 	mov	dptr,#___str_39
      001D17 75 F0 80         [24] 5978 	mov	b,#0x80
                                   5979 ;	analog.c:37: }
      001D1A 02r0Cr70         [24] 5980 	ljmp	_LCD_string_write
                                   5981 ;------------------------------------------------------------
                                   5982 ;Allocation info for local variables in function 'temperature'
                                   5983 ;------------------------------------------------------------
                                   5984 ;temp                      Allocated to registers r7 
                                   5985 ;------------------------------------------------------------
                                   5986 ;	analog.c:44: void temperature(void) {
                                   5987 ;	-----------------------------------------
                                   5988 ;	 function temperature
                                   5989 ;	-----------------------------------------
      001D1D                       5990 _temperature:
                                   5991 ;	analog.c:46: fillScreen(GRAY);
      001D1D 90 D6 BA         [24] 5992 	mov	dptr,#0xd6ba
      001D20 12r08r69         [24] 5993 	lcall	_fillScreen
                                   5994 ;	analog.c:47: setCursor(0, 0);
      001D23 E4               [12] 5995 	clr	a
      001D24 F5*00            [12] 5996 	mov	_setCursor_PARM_2,a
      001D26 F5*01            [12] 5997 	mov	(_setCursor_PARM_2 + 1),a
      001D28 90 00 00         [24] 5998 	mov	dptr,#0x0000
      001D2B 12r00rDB         [24] 5999 	lcall	_setCursor
                                   6000 ;	analog.c:48: setTextSize(2);
      001D2E 75 82 02         [24] 6001 	mov	dpl,#0x02
      001D31 12r00rF5         [24] 6002 	lcall	_setTextSize
                                   6003 ;	analog.c:56: temp = ioread8(temp_address);
      001D34 85*08 82         [24] 6004 	mov	dpl,_temp_address
      001D37 85*09 83         [24] 6005 	mov	dph,(_temp_address + 1)
      001D3A 12r00r35         [24] 6006 	lcall	_ioread8
                                   6007 ;	analog.c:58: displayTemp(temp);
      001D3D 12r1CrA3         [24] 6008 	lcall	_displayTemp
                                   6009 ;	analog.c:61: while (1) {
      001D40                       6010 00104$:
                                   6011 ;	analog.c:62: temp = keyDetect();
      001D40 12r0Dr0F         [24] 6012 	lcall	_keyDetect
      001D43 AF 82            [24] 6013 	mov	r7,dpl
                                   6014 ;	analog.c:64: if (temp == '1') break;
      001D45 BF 31 01         [24] 6015 	cjne	r7,#0x31,00118$
      001D48 22               [24] 6016 	ret
      001D49                       6017 00118$:
                                   6018 ;	analog.c:68: temp = ioread8(temp_address);
      001D49 85*08 82         [24] 6019 	mov	dpl,_temp_address
      001D4C 85*09 83         [24] 6020 	mov	dph,(_temp_address + 1)
      001D4F 12r00r35         [24] 6021 	lcall	_ioread8
                                   6022 ;	analog.c:69: displayTemp(temp);
      001D52 12r1CrA3         [24] 6023 	lcall	_displayTemp
                                   6024 ;	analog.c:71: }
      001D55 80 E9            [24] 6025 	sjmp	00104$
                                   6026 ;------------------------------------------------------------
                                   6027 ;Allocation info for local variables in function 'light'
                                   6028 ;------------------------------------------------------------
                                   6029 ;light                     Allocated to registers r7 
                                   6030 ;------------------------------------------------------------
                                   6031 ;	analog.c:78: void light(void) {
                                   6032 ;	-----------------------------------------
                                   6033 ;	 function light
                                   6034 ;	-----------------------------------------
      001D57                       6035 _light:
                                   6036 ;	analog.c:80: fillScreen(GRAY);
      001D57 90 D6 BA         [24] 6037 	mov	dptr,#0xd6ba
      001D5A 12r08r69         [24] 6038 	lcall	_fillScreen
                                   6039 ;	analog.c:81: setCursor(0, 0);
      001D5D E4               [12] 6040 	clr	a
      001D5E F5*00            [12] 6041 	mov	_setCursor_PARM_2,a
      001D60 F5*01            [12] 6042 	mov	(_setCursor_PARM_2 + 1),a
      001D62 90 00 00         [24] 6043 	mov	dptr,#0x0000
      001D65 12r00rDB         [24] 6044 	lcall	_setCursor
                                   6045 ;	analog.c:82: setTextSize(2);
      001D68 75 82 02         [24] 6046 	mov	dpl,#0x02
      001D6B 12r00rF5         [24] 6047 	lcall	_setTextSize
                                   6048 ;	analog.c:90: light = ioread8(light_address);
      001D6E 85*0A 82         [24] 6049 	mov	dpl,_light_address
      001D71 85*0B 83         [24] 6050 	mov	dph,(_light_address + 1)
      001D74 12r00r35         [24] 6051 	lcall	_ioread8
                                   6052 ;	analog.c:92: displayLight(light);
      001D77 12r1CrE0         [24] 6053 	lcall	_displayLight
                                   6054 ;	analog.c:95: while (1) {
      001D7A                       6055 00104$:
                                   6056 ;	analog.c:96: light = keyDetect();
      001D7A 12r0Dr0F         [24] 6057 	lcall	_keyDetect
      001D7D AF 82            [24] 6058 	mov	r7,dpl
                                   6059 ;	analog.c:98: if (light == '1') break;
      001D7F BF 31 01         [24] 6060 	cjne	r7,#0x31,00118$
      001D82 22               [24] 6061 	ret
      001D83                       6062 00118$:
                                   6063 ;	analog.c:102: light = ioread8(light_address);
      001D83 85*0A 82         [24] 6064 	mov	dpl,_light_address
      001D86 85*0B 83         [24] 6065 	mov	dph,(_light_address + 1)
      001D89 12r00r35         [24] 6066 	lcall	_ioread8
                                   6067 ;	analog.c:103: displayLight(light);
      001D8C 12r1CrE0         [24] 6068 	lcall	_displayLight
                                   6069 ;	analog.c:105: }
      001D8F 80 E9            [24] 6070 	sjmp	00104$
                                   6071 ;------------------------------------------------------------
                                   6072 ;Allocation info for local variables in function 'UART_free_type'
                                   6073 ;------------------------------------------------------------
                                   6074 ;	UART_freetype.c:1: void UART_free_type() {
                                   6075 ;	-----------------------------------------
                                   6076 ;	 function UART_free_type
                                   6077 ;	-----------------------------------------
      001D91                       6078 _UART_free_type:
                                   6079 ;	UART_freetype.c:2: LCD_string_write("UART Free type, 0 for menu:\n");
      001D91 90r07r89         [24] 6080 	mov	dptr,#___str_41
      001D94 75 F0 80         [24] 6081 	mov	b,#0x80
      001D97 12r0Cr70         [24] 6082 	lcall	_LCD_string_write
                                   6083 ;	UART_freetype.c:3: while (1) {
      001D9A                       6084 00107$:
                                   6085 ;	UART_freetype.c:4: if (recieved_flag == 1) {
      001D9A 74 01            [12] 6086 	mov	a,#0x01
      001D9C B5*01 FB         [24] 6087 	cjne	a,_recieved_flag,00107$
                                   6088 ;	UART_freetype.c:5: if (received_byte == '0') {
      001D9F 74 30            [12] 6089 	mov	a,#0x30
      001DA1 B5*00 01         [24] 6090 	cjne	a,_received_byte,00125$
      001DA4 22               [24] 6091 	ret
      001DA5                       6092 00125$:
                                   6093 ;	UART_freetype.c:9: write(received_byte);
      001DA5 85*00 82         [24] 6094 	mov	dpl,_received_byte
      001DA8 12r0Cr02         [24] 6095 	lcall	_write
                                   6096 ;	UART_freetype.c:10: write('\n');
      001DAB 75 82 0A         [24] 6097 	mov	dpl,#0x0a
      001DAE 12r0Cr02         [24] 6098 	lcall	_write
                                   6099 ;	UART_freetype.c:11: recieved_flag = 0;
      001DB1 75*01 00         [24] 6100 	mov	_recieved_flag,#0x00
                                   6101 ;	UART_freetype.c:15: }
      001DB4 80 E4            [24] 6102 	sjmp	00107$
                                   6103 ;------------------------------------------------------------
                                   6104 ;Allocation info for local variables in function 'menu'
                                   6105 ;------------------------------------------------------------
                                   6106 ;	main.c:33: void menu(void) {
                                   6107 ;	-----------------------------------------
                                   6108 ;	 function menu
                                   6109 ;	-----------------------------------------
      001DB6                       6110 _menu:
                                   6111 ;	main.c:35: setRotation(2);
      001DB6 75 82 02         [24] 6112 	mov	dpl,#0x02
      001DB9 12r01r0D         [24] 6113 	lcall	_setRotation
                                   6114 ;	main.c:36: setTextSize(3);
      001DBC 75 82 03         [24] 6115 	mov	dpl,#0x03
      001DBF 12r00rF5         [24] 6116 	lcall	_setTextSize
                                   6117 ;	main.c:37: fillScreen(GRAY);
      001DC2 90 D6 BA         [24] 6118 	mov	dptr,#0xd6ba
      001DC5 12r08r69         [24] 6119 	lcall	_fillScreen
                                   6120 ;	main.c:38: setTextColor(BLACK, GRAY);
      001DC8 75*00 BA         [24] 6121 	mov	_setTextColor_PARM_2,#0xba
      001DCB 75*01 D6         [24] 6122 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      001DCE 90 00 00         [24] 6123 	mov	dptr,#0x0000
      001DD1 12r00rE8         [24] 6124 	lcall	_setTextColor
                                   6125 ;	main.c:39: setCursor(0, 0);
      001DD4 E4               [12] 6126 	clr	a
      001DD5 F5*00            [12] 6127 	mov	_setCursor_PARM_2,a
      001DD7 F5*01            [12] 6128 	mov	(_setCursor_PARM_2 + 1),a
      001DD9 90 00 00         [24] 6129 	mov	dptr,#0x0000
      001DDC 12r00rDB         [24] 6130 	lcall	_setCursor
                                   6131 ;	main.c:42: LCD_string_write("Brandon Cline\n");
      001DDF 90r07rA6         [24] 6132 	mov	dptr,#___str_42
      001DE2 75 F0 80         [24] 6133 	mov	b,#0x80
      001DE5 12r0Cr70         [24] 6134 	lcall	_LCD_string_write
                                   6135 ;	main.c:43: LCD_string_write("ECEN 4330\n");
      001DE8 90r07rB5         [24] 6136 	mov	dptr,#___str_43
      001DEB 75 F0 80         [24] 6137 	mov	b,#0x80
      001DEE 12r0Cr70         [24] 6138 	lcall	_LCD_string_write
                                   6139 ;	main.c:45: setTextSize(2);
      001DF1 75 82 02         [24] 6140 	mov	dpl,#0x02
      001DF4 12r00rF5         [24] 6141 	lcall	_setTextSize
                                   6142 ;	main.c:49: LCD_string_write("1: Basic check\n");
      001DF7 90r07rC0         [24] 6143 	mov	dptr,#___str_44
      001DFA 75 F0 80         [24] 6144 	mov	b,#0x80
      001DFD 12r0Cr70         [24] 6145 	lcall	_LCD_string_write
                                   6146 ;	main.c:51: LCD_string_write("2: Dump\n");
      001E00 90r07rD0         [24] 6147 	mov	dptr,#___str_45
      001E03 75 F0 80         [24] 6148 	mov	b,#0x80
      001E06 12r0Cr70         [24] 6149 	lcall	_LCD_string_write
                                   6150 ;	main.c:53: LCD_string_write("3: Check\n");
      001E09 90r07rD9         [24] 6151 	mov	dptr,#___str_46
      001E0C 75 F0 80         [24] 6152 	mov	b,#0x80
      001E0F 12r0Cr70         [24] 6153 	lcall	_LCD_string_write
                                   6154 ;	main.c:55: LCD_string_write("A: Move\n");
      001E12 90r07rE3         [24] 6155 	mov	dptr,#___str_47
      001E15 75 F0 80         [24] 6156 	mov	b,#0x80
      001E18 12r0Cr70         [24] 6157 	lcall	_LCD_string_write
                                   6158 ;	main.c:57: LCD_string_write("4: Edit\n");
      001E1B 90r07rEC         [24] 6159 	mov	dptr,#___str_48
      001E1E 75 F0 80         [24] 6160 	mov	b,#0x80
      001E21 12r0Cr70         [24] 6161 	lcall	_LCD_string_write
                                   6162 ;	main.c:59: LCD_string_write("5: Find\n");
      001E24 90r07rF5         [24] 6163 	mov	dptr,#___str_49
      001E27 75 F0 80         [24] 6164 	mov	b,#0x80
      001E2A 12r0Cr70         [24] 6165 	lcall	_LCD_string_write
                                   6166 ;	main.c:61: LCD_string_write("6: Count\n");
      001E2D 90r07rFE         [24] 6167 	mov	dptr,#___str_50
      001E30 75 F0 80         [24] 6168 	mov	b,#0x80
      001E33 12r0Cr70         [24] 6169 	lcall	_LCD_string_write
                                   6170 ;	main.c:64: LCD_string_write("B: Temperature\n");
      001E36 90r08r08         [24] 6171 	mov	dptr,#___str_51
      001E39 75 F0 80         [24] 6172 	mov	b,#0x80
      001E3C 12r0Cr70         [24] 6173 	lcall	_LCD_string_write
                                   6174 ;	main.c:66: LCD_string_write("7: Light\n");
      001E3F 90r08r18         [24] 6175 	mov	dptr,#___str_52
      001E42 75 F0 80         [24] 6176 	mov	b,#0x80
      001E45 12r0Cr70         [24] 6177 	lcall	_LCD_string_write
                                   6178 ;	main.c:69: LCD_string_write("8: UART free type\n");
      001E48 90r08r22         [24] 6179 	mov	dptr,#___str_53
      001E4B 75 F0 80         [24] 6180 	mov	b,#0x80
                                   6181 ;	main.c:70: }
      001E4E 02r0Cr70         [24] 6182 	ljmp	_LCD_string_write
                                   6183 ;------------------------------------------------------------
                                   6184 ;Allocation info for local variables in function 'main'
                                   6185 ;------------------------------------------------------------
                                   6186 ;input                     Allocated with name '_main_input_65536_332'
                                   6187 ;------------------------------------------------------------
                                   6188 ;	main.c:72: void main(void) {
                                   6189 ;	-----------------------------------------
                                   6190 ;	 function main
                                   6191 ;	-----------------------------------------
      001E51                       6192 _main:
                                   6193 ;	main.c:77: iowrite8(seg7_address, 0x00);
      001E51 75*00 00         [24] 6194 	mov	_iowrite8_PARM_2,#0x00
      001E54 85*06 82         [24] 6195 	mov	dpl,_seg7_address
      001E57 85*07 83         [24] 6196 	mov	dph,(_seg7_address + 1)
      001E5A 12r00r25         [24] 6197 	lcall	_iowrite8
                                   6198 ;	main.c:80: TFT_LCD_INIT();
      001E5D 12r02r36         [24] 6199 	lcall	_TFT_LCD_INIT
                                   6200 ;	main.c:81: fillScreen(BLACK);
      001E60 90 00 00         [24] 6201 	mov	dptr,#0x0000
      001E63 12r08r69         [24] 6202 	lcall	_fillScreen
                                   6203 ;	main.c:82: setRotation(0);
      001E66 75 82 00         [24] 6204 	mov	dpl,#0x00
      001E69 12r01r0D         [24] 6205 	lcall	_setRotation
                                   6206 ;	main.c:83: testCircles(20, BLUE);
      001E6C 75*2E 1F         [24] 6207 	mov	_testCircles_PARM_2,#0x1f
      001E6F 75*2F 00         [24] 6208 	mov	(_testCircles_PARM_2 + 1),#0x00
      001E72 75 82 14         [24] 6209 	mov	dpl,#0x14
      001E75 12r06rC2         [24] 6210 	lcall	_testCircles
                                   6211 ;	main.c:84: UART_init();
      001E78 12r00r0C         [24] 6212 	lcall	_UART_init
                                   6213 ;	main.c:86: while (1) {
      001E7B                       6214 00114$:
                                   6215 ;	main.c:88: menu();
      001E7B 12r1DrB6         [24] 6216 	lcall	_menu
                                   6217 ;	main.c:91: input = keyDetect();
      001E7E 12r0Dr0F         [24] 6218 	lcall	_keyDetect
      001E81 AF 82            [24] 6219 	mov	r7,dpl
                                   6220 ;	main.c:95: switch(input) {
      001E83 BF 31 02         [24] 6221 	cjne	r7,#0x31,00162$
      001E86 80 2D            [24] 6222 	sjmp	00101$
      001E88                       6223 00162$:
      001E88 BF 32 02         [24] 6224 	cjne	r7,#0x32,00163$
      001E8B 80 2D            [24] 6225 	sjmp	00102$
      001E8D                       6226 00163$:
      001E8D BF 33 02         [24] 6227 	cjne	r7,#0x33,00164$
      001E90 80 2D            [24] 6228 	sjmp	00103$
      001E92                       6229 00164$:
      001E92 BF 34 02         [24] 6230 	cjne	r7,#0x34,00165$
      001E95 80 32            [24] 6231 	sjmp	00105$
      001E97                       6232 00165$:
      001E97 BF 35 02         [24] 6233 	cjne	r7,#0x35,00166$
      001E9A 80 32            [24] 6234 	sjmp	00106$
      001E9C                       6235 00166$:
      001E9C BF 36 02         [24] 6236 	cjne	r7,#0x36,00167$
      001E9F 80 32            [24] 6237 	sjmp	00107$
      001EA1                       6238 00167$:
      001EA1 BF 37 02         [24] 6239 	cjne	r7,#0x37,00168$
      001EA4 80 37            [24] 6240 	sjmp	00109$
      001EA6                       6241 00168$:
      001EA6 BF 38 02         [24] 6242 	cjne	r7,#0x38,00169$
      001EA9 80 37            [24] 6243 	sjmp	00110$
      001EAB                       6244 00169$:
      001EAB BF 41 02         [24] 6245 	cjne	r7,#0x41,00170$
      001EAE 80 14            [24] 6246 	sjmp	00104$
      001EB0                       6247 00170$:
                                   6248 ;	main.c:96: case '1': basic(); break;
      001EB0 BF 42 C8         [24] 6249 	cjne	r7,#0x42,00114$
      001EB3 80 23            [24] 6250 	sjmp	00108$
      001EB5                       6251 00101$:
      001EB5 12r16r11         [24] 6252 	lcall	_basic
                                   6253 ;	main.c:97: case '2': dump(); break;
      001EB8 80 C1            [24] 6254 	sjmp	00114$
      001EBA                       6255 00102$:
      001EBA 12r12r5D         [24] 6256 	lcall	_dump
                                   6257 ;	main.c:98: case '3': check(); break;
      001EBD 80 BC            [24] 6258 	sjmp	00114$
      001EBF                       6259 00103$:
      001EBF 12r14rEA         [24] 6260 	lcall	_check
                                   6261 ;	main.c:99: case 'A': move(); break;
      001EC2 80 B7            [24] 6262 	sjmp	00114$
      001EC4                       6263 00104$:
      001EC4 12r16rA7         [24] 6264 	lcall	_move
                                   6265 ;	main.c:100: case '4': edit(); break;
      001EC7 80 B2            [24] 6266 	sjmp	00114$
      001EC9                       6267 00105$:
      001EC9 12r18r61         [24] 6268 	lcall	_edit
                                   6269 ;	main.c:101: case '5': count(); break;
      001ECC 80 AD            [24] 6270 	sjmp	00114$
      001ECE                       6271 00106$:
      001ECE 12r1Ar0A         [24] 6272 	lcall	_count
                                   6273 ;	main.c:102: case '6': count(); break;
      001ED1 80 A8            [24] 6274 	sjmp	00114$
      001ED3                       6275 00107$:
      001ED3 12r1Ar0A         [24] 6276 	lcall	_count
                                   6277 ;	main.c:103: case 'B': temperature(); break;
      001ED6 80 A3            [24] 6278 	sjmp	00114$
      001ED8                       6279 00108$:
      001ED8 12r1Dr1D         [24] 6280 	lcall	_temperature
                                   6281 ;	main.c:104: case '7': light(); break;
      001EDB 80 9E            [24] 6282 	sjmp	00114$
      001EDD                       6283 00109$:
      001EDD 12r1Dr57         [24] 6284 	lcall	_light
                                   6285 ;	main.c:105: case '8': UART_free_type(); break;
      001EE0 80 99            [24] 6286 	sjmp	00114$
      001EE2                       6287 00110$:
      001EE2 12r1Dr91         [24] 6288 	lcall	_UART_free_type
                                   6289 ;	main.c:107: }
                                   6290 ;	main.c:109: }
      001EE5 80 94            [24] 6291 	sjmp	00114$
                                   6292 	.area CSEG    (CODE)
                                   6293 	.area CONST   (CODE)
      000000                       6294 _font:
      000000 00                    6295 	.db #0x00	; 0
      000001 00                    6296 	.db #0x00	; 0
      000002 00                    6297 	.db #0x00	; 0
      000003 00                    6298 	.db #0x00	; 0
      000004 00                    6299 	.db #0x00	; 0
      000005 3E                    6300 	.db #0x3e	; 62
      000006 5B                    6301 	.db #0x5b	; 91
      000007 4F                    6302 	.db #0x4f	; 79	'O'
      000008 5B                    6303 	.db #0x5b	; 91
      000009 3E                    6304 	.db #0x3e	; 62
      00000A 3E                    6305 	.db #0x3e	; 62
      00000B 6B                    6306 	.db #0x6b	; 107	'k'
      00000C 4F                    6307 	.db #0x4f	; 79	'O'
      00000D 6B                    6308 	.db #0x6b	; 107	'k'
      00000E 3E                    6309 	.db #0x3e	; 62
      00000F 1C                    6310 	.db #0x1c	; 28
      000010 3E                    6311 	.db #0x3e	; 62
      000011 7C                    6312 	.db #0x7c	; 124
      000012 3E                    6313 	.db #0x3e	; 62
      000013 1C                    6314 	.db #0x1c	; 28
      000014 18                    6315 	.db #0x18	; 24
      000015 3C                    6316 	.db #0x3c	; 60
      000016 7E                    6317 	.db #0x7e	; 126
      000017 3C                    6318 	.db #0x3c	; 60
      000018 18                    6319 	.db #0x18	; 24
      000019 1C                    6320 	.db #0x1c	; 28
      00001A 57                    6321 	.db #0x57	; 87	'W'
      00001B 7D                    6322 	.db #0x7d	; 125
      00001C 57                    6323 	.db #0x57	; 87	'W'
      00001D 1C                    6324 	.db #0x1c	; 28
      00001E 1C                    6325 	.db #0x1c	; 28
      00001F 5E                    6326 	.db #0x5e	; 94
      000020 7F                    6327 	.db #0x7f	; 127
      000021 5E                    6328 	.db #0x5e	; 94
      000022 1C                    6329 	.db #0x1c	; 28
      000023 00                    6330 	.db #0x00	; 0
      000024 18                    6331 	.db #0x18	; 24
      000025 3C                    6332 	.db #0x3c	; 60
      000026 18                    6333 	.db #0x18	; 24
      000027 00                    6334 	.db #0x00	; 0
      000028 FF                    6335 	.db #0xff	; 255
      000029 E7                    6336 	.db #0xe7	; 231
      00002A C3                    6337 	.db #0xc3	; 195
      00002B E7                    6338 	.db #0xe7	; 231
      00002C FF                    6339 	.db #0xff	; 255
      00002D 00                    6340 	.db #0x00	; 0
      00002E 18                    6341 	.db #0x18	; 24
      00002F 24                    6342 	.db #0x24	; 36
      000030 18                    6343 	.db #0x18	; 24
      000031 00                    6344 	.db #0x00	; 0
      000032 FF                    6345 	.db #0xff	; 255
      000033 E7                    6346 	.db #0xe7	; 231
      000034 DB                    6347 	.db #0xdb	; 219
      000035 E7                    6348 	.db #0xe7	; 231
      000036 FF                    6349 	.db #0xff	; 255
      000037 30                    6350 	.db #0x30	; 48	'0'
      000038 48                    6351 	.db #0x48	; 72	'H'
      000039 3A                    6352 	.db #0x3a	; 58
      00003A 06                    6353 	.db #0x06	; 6
      00003B 0E                    6354 	.db #0x0e	; 14
      00003C 26                    6355 	.db #0x26	; 38
      00003D 29                    6356 	.db #0x29	; 41
      00003E 79                    6357 	.db #0x79	; 121	'y'
      00003F 29                    6358 	.db #0x29	; 41
      000040 26                    6359 	.db #0x26	; 38
      000041 40                    6360 	.db #0x40	; 64
      000042 7F                    6361 	.db #0x7f	; 127
      000043 05                    6362 	.db #0x05	; 5
      000044 05                    6363 	.db #0x05	; 5
      000045 07                    6364 	.db #0x07	; 7
      000046 40                    6365 	.db #0x40	; 64
      000047 7F                    6366 	.db #0x7f	; 127
      000048 05                    6367 	.db #0x05	; 5
      000049 25                    6368 	.db #0x25	; 37
      00004A 3F                    6369 	.db #0x3f	; 63
      00004B 5A                    6370 	.db #0x5a	; 90	'Z'
      00004C 3C                    6371 	.db #0x3c	; 60
      00004D E7                    6372 	.db #0xe7	; 231
      00004E 3C                    6373 	.db #0x3c	; 60
      00004F 5A                    6374 	.db #0x5a	; 90	'Z'
      000050 7F                    6375 	.db #0x7f	; 127
      000051 3E                    6376 	.db #0x3e	; 62
      000052 1C                    6377 	.db #0x1c	; 28
      000053 1C                    6378 	.db #0x1c	; 28
      000054 08                    6379 	.db #0x08	; 8
      000055 08                    6380 	.db #0x08	; 8
      000056 1C                    6381 	.db #0x1c	; 28
      000057 1C                    6382 	.db #0x1c	; 28
      000058 3E                    6383 	.db #0x3e	; 62
      000059 7F                    6384 	.db #0x7f	; 127
      00005A 14                    6385 	.db #0x14	; 20
      00005B 22                    6386 	.db #0x22	; 34
      00005C 7F                    6387 	.db #0x7f	; 127
      00005D 22                    6388 	.db #0x22	; 34
      00005E 14                    6389 	.db #0x14	; 20
      00005F 5F                    6390 	.db #0x5f	; 95
      000060 5F                    6391 	.db #0x5f	; 95
      000061 00                    6392 	.db #0x00	; 0
      000062 5F                    6393 	.db #0x5f	; 95
      000063 5F                    6394 	.db #0x5f	; 95
      000064 06                    6395 	.db #0x06	; 6
      000065 09                    6396 	.db #0x09	; 9
      000066 7F                    6397 	.db #0x7f	; 127
      000067 01                    6398 	.db #0x01	; 1
      000068 7F                    6399 	.db #0x7f	; 127
      000069 00                    6400 	.db #0x00	; 0
      00006A 66                    6401 	.db #0x66	; 102	'f'
      00006B 89                    6402 	.db #0x89	; 137
      00006C 95                    6403 	.db #0x95	; 149
      00006D 6A                    6404 	.db #0x6a	; 106	'j'
      00006E 60                    6405 	.db #0x60	; 96
      00006F 60                    6406 	.db #0x60	; 96
      000070 60                    6407 	.db #0x60	; 96
      000071 60                    6408 	.db #0x60	; 96
      000072 60                    6409 	.db #0x60	; 96
      000073 94                    6410 	.db #0x94	; 148
      000074 A2                    6411 	.db #0xa2	; 162
      000075 FF                    6412 	.db #0xff	; 255
      000076 A2                    6413 	.db #0xa2	; 162
      000077 94                    6414 	.db #0x94	; 148
      000078 08                    6415 	.db #0x08	; 8
      000079 04                    6416 	.db #0x04	; 4
      00007A 7E                    6417 	.db #0x7e	; 126
      00007B 04                    6418 	.db #0x04	; 4
      00007C 08                    6419 	.db #0x08	; 8
      00007D 10                    6420 	.db #0x10	; 16
      00007E 20                    6421 	.db #0x20	; 32
      00007F 7E                    6422 	.db #0x7e	; 126
      000080 20                    6423 	.db #0x20	; 32
      000081 10                    6424 	.db #0x10	; 16
      000082 08                    6425 	.db #0x08	; 8
      000083 08                    6426 	.db #0x08	; 8
      000084 2A                    6427 	.db #0x2a	; 42
      000085 1C                    6428 	.db #0x1c	; 28
      000086 08                    6429 	.db #0x08	; 8
      000087 08                    6430 	.db #0x08	; 8
      000088 1C                    6431 	.db #0x1c	; 28
      000089 2A                    6432 	.db #0x2a	; 42
      00008A 08                    6433 	.db #0x08	; 8
      00008B 08                    6434 	.db #0x08	; 8
      00008C 1E                    6435 	.db #0x1e	; 30
      00008D 10                    6436 	.db #0x10	; 16
      00008E 10                    6437 	.db #0x10	; 16
      00008F 10                    6438 	.db #0x10	; 16
      000090 10                    6439 	.db #0x10	; 16
      000091 0C                    6440 	.db #0x0c	; 12
      000092 1E                    6441 	.db #0x1e	; 30
      000093 0C                    6442 	.db #0x0c	; 12
      000094 1E                    6443 	.db #0x1e	; 30
      000095 0C                    6444 	.db #0x0c	; 12
      000096 30                    6445 	.db #0x30	; 48	'0'
      000097 38                    6446 	.db #0x38	; 56	'8'
      000098 3E                    6447 	.db #0x3e	; 62
      000099 38                    6448 	.db #0x38	; 56	'8'
      00009A 30                    6449 	.db #0x30	; 48	'0'
      00009B 06                    6450 	.db #0x06	; 6
      00009C 0E                    6451 	.db #0x0e	; 14
      00009D 3E                    6452 	.db #0x3e	; 62
      00009E 0E                    6453 	.db #0x0e	; 14
      00009F 06                    6454 	.db #0x06	; 6
      0000A0 00                    6455 	.db #0x00	; 0
      0000A1 00                    6456 	.db #0x00	; 0
      0000A2 00                    6457 	.db #0x00	; 0
      0000A3 00                    6458 	.db #0x00	; 0
      0000A4 00                    6459 	.db #0x00	; 0
      0000A5 00                    6460 	.db #0x00	; 0
      0000A6 00                    6461 	.db #0x00	; 0
      0000A7 5F                    6462 	.db #0x5f	; 95
      0000A8 00                    6463 	.db #0x00	; 0
      0000A9 00                    6464 	.db #0x00	; 0
      0000AA 00                    6465 	.db #0x00	; 0
      0000AB 07                    6466 	.db #0x07	; 7
      0000AC 00                    6467 	.db #0x00	; 0
      0000AD 07                    6468 	.db #0x07	; 7
      0000AE 00                    6469 	.db #0x00	; 0
      0000AF 14                    6470 	.db #0x14	; 20
      0000B0 7F                    6471 	.db #0x7f	; 127
      0000B1 14                    6472 	.db #0x14	; 20
      0000B2 7F                    6473 	.db #0x7f	; 127
      0000B3 14                    6474 	.db #0x14	; 20
      0000B4 24                    6475 	.db #0x24	; 36
      0000B5 2A                    6476 	.db #0x2a	; 42
      0000B6 7F                    6477 	.db #0x7f	; 127
      0000B7 2A                    6478 	.db #0x2a	; 42
      0000B8 12                    6479 	.db #0x12	; 18
      0000B9 23                    6480 	.db #0x23	; 35
      0000BA 13                    6481 	.db #0x13	; 19
      0000BB 08                    6482 	.db #0x08	; 8
      0000BC 64                    6483 	.db #0x64	; 100	'd'
      0000BD 62                    6484 	.db #0x62	; 98	'b'
      0000BE 36                    6485 	.db #0x36	; 54	'6'
      0000BF 49                    6486 	.db #0x49	; 73	'I'
      0000C0 56                    6487 	.db #0x56	; 86	'V'
      0000C1 20                    6488 	.db #0x20	; 32
      0000C2 50                    6489 	.db #0x50	; 80	'P'
      0000C3 00                    6490 	.db #0x00	; 0
      0000C4 08                    6491 	.db #0x08	; 8
      0000C5 07                    6492 	.db #0x07	; 7
      0000C6 03                    6493 	.db #0x03	; 3
      0000C7 00                    6494 	.db #0x00	; 0
      0000C8 00                    6495 	.db #0x00	; 0
      0000C9 1C                    6496 	.db #0x1c	; 28
      0000CA 22                    6497 	.db #0x22	; 34
      0000CB 41                    6498 	.db #0x41	; 65	'A'
      0000CC 00                    6499 	.db #0x00	; 0
      0000CD 00                    6500 	.db #0x00	; 0
      0000CE 41                    6501 	.db #0x41	; 65	'A'
      0000CF 22                    6502 	.db #0x22	; 34
      0000D0 1C                    6503 	.db #0x1c	; 28
      0000D1 00                    6504 	.db #0x00	; 0
      0000D2 2A                    6505 	.db #0x2a	; 42
      0000D3 1C                    6506 	.db #0x1c	; 28
      0000D4 7F                    6507 	.db #0x7f	; 127
      0000D5 1C                    6508 	.db #0x1c	; 28
      0000D6 2A                    6509 	.db #0x2a	; 42
      0000D7 08                    6510 	.db #0x08	; 8
      0000D8 08                    6511 	.db #0x08	; 8
      0000D9 3E                    6512 	.db #0x3e	; 62
      0000DA 08                    6513 	.db #0x08	; 8
      0000DB 08                    6514 	.db #0x08	; 8
      0000DC 00                    6515 	.db #0x00	; 0
      0000DD 80                    6516 	.db #0x80	; 128
      0000DE 70                    6517 	.db #0x70	; 112	'p'
      0000DF 30                    6518 	.db #0x30	; 48	'0'
      0000E0 00                    6519 	.db #0x00	; 0
      0000E1 08                    6520 	.db #0x08	; 8
      0000E2 08                    6521 	.db #0x08	; 8
      0000E3 08                    6522 	.db #0x08	; 8
      0000E4 08                    6523 	.db #0x08	; 8
      0000E5 08                    6524 	.db #0x08	; 8
      0000E6 00                    6525 	.db #0x00	; 0
      0000E7 00                    6526 	.db #0x00	; 0
      0000E8 60                    6527 	.db #0x60	; 96
      0000E9 60                    6528 	.db #0x60	; 96
      0000EA 00                    6529 	.db #0x00	; 0
      0000EB 20                    6530 	.db #0x20	; 32
      0000EC 10                    6531 	.db #0x10	; 16
      0000ED 08                    6532 	.db #0x08	; 8
      0000EE 04                    6533 	.db #0x04	; 4
      0000EF 02                    6534 	.db #0x02	; 2
      0000F0 3E                    6535 	.db #0x3e	; 62
      0000F1 51                    6536 	.db #0x51	; 81	'Q'
      0000F2 49                    6537 	.db #0x49	; 73	'I'
      0000F3 45                    6538 	.db #0x45	; 69	'E'
      0000F4 3E                    6539 	.db #0x3e	; 62
      0000F5 00                    6540 	.db #0x00	; 0
      0000F6 42                    6541 	.db #0x42	; 66	'B'
      0000F7 7F                    6542 	.db #0x7f	; 127
      0000F8 40                    6543 	.db #0x40	; 64
      0000F9 00                    6544 	.db #0x00	; 0
      0000FA 72                    6545 	.db #0x72	; 114	'r'
      0000FB 49                    6546 	.db #0x49	; 73	'I'
      0000FC 49                    6547 	.db #0x49	; 73	'I'
      0000FD 49                    6548 	.db #0x49	; 73	'I'
      0000FE 46                    6549 	.db #0x46	; 70	'F'
      0000FF 21                    6550 	.db #0x21	; 33
      000100 41                    6551 	.db #0x41	; 65	'A'
      000101 49                    6552 	.db #0x49	; 73	'I'
      000102 4D                    6553 	.db #0x4d	; 77	'M'
      000103 33                    6554 	.db #0x33	; 51	'3'
      000104 18                    6555 	.db #0x18	; 24
      000105 14                    6556 	.db #0x14	; 20
      000106 12                    6557 	.db #0x12	; 18
      000107 7F                    6558 	.db #0x7f	; 127
      000108 10                    6559 	.db #0x10	; 16
      000109 27                    6560 	.db #0x27	; 39
      00010A 45                    6561 	.db #0x45	; 69	'E'
      00010B 45                    6562 	.db #0x45	; 69	'E'
      00010C 45                    6563 	.db #0x45	; 69	'E'
      00010D 39                    6564 	.db #0x39	; 57	'9'
      00010E 3C                    6565 	.db #0x3c	; 60
      00010F 4A                    6566 	.db #0x4a	; 74	'J'
      000110 49                    6567 	.db #0x49	; 73	'I'
      000111 49                    6568 	.db #0x49	; 73	'I'
      000112 31                    6569 	.db #0x31	; 49	'1'
      000113 41                    6570 	.db #0x41	; 65	'A'
      000114 21                    6571 	.db #0x21	; 33
      000115 11                    6572 	.db #0x11	; 17
      000116 09                    6573 	.db #0x09	; 9
      000117 07                    6574 	.db #0x07	; 7
      000118 36                    6575 	.db #0x36	; 54	'6'
      000119 49                    6576 	.db #0x49	; 73	'I'
      00011A 49                    6577 	.db #0x49	; 73	'I'
      00011B 49                    6578 	.db #0x49	; 73	'I'
      00011C 36                    6579 	.db #0x36	; 54	'6'
      00011D 46                    6580 	.db #0x46	; 70	'F'
      00011E 49                    6581 	.db #0x49	; 73	'I'
      00011F 49                    6582 	.db #0x49	; 73	'I'
      000120 29                    6583 	.db #0x29	; 41
      000121 1E                    6584 	.db #0x1e	; 30
      000122 00                    6585 	.db #0x00	; 0
      000123 00                    6586 	.db #0x00	; 0
      000124 14                    6587 	.db #0x14	; 20
      000125 00                    6588 	.db #0x00	; 0
      000126 00                    6589 	.db #0x00	; 0
      000127 00                    6590 	.db #0x00	; 0
      000128 40                    6591 	.db #0x40	; 64
      000129 34                    6592 	.db #0x34	; 52	'4'
      00012A 00                    6593 	.db #0x00	; 0
      00012B 00                    6594 	.db #0x00	; 0
      00012C 00                    6595 	.db #0x00	; 0
      00012D 08                    6596 	.db #0x08	; 8
      00012E 14                    6597 	.db #0x14	; 20
      00012F 22                    6598 	.db #0x22	; 34
      000130 41                    6599 	.db #0x41	; 65	'A'
      000131 14                    6600 	.db #0x14	; 20
      000132 14                    6601 	.db #0x14	; 20
      000133 14                    6602 	.db #0x14	; 20
      000134 14                    6603 	.db #0x14	; 20
      000135 14                    6604 	.db #0x14	; 20
      000136 00                    6605 	.db #0x00	; 0
      000137 41                    6606 	.db #0x41	; 65	'A'
      000138 22                    6607 	.db #0x22	; 34
      000139 14                    6608 	.db #0x14	; 20
      00013A 08                    6609 	.db #0x08	; 8
      00013B 02                    6610 	.db #0x02	; 2
      00013C 01                    6611 	.db #0x01	; 1
      00013D 59                    6612 	.db #0x59	; 89	'Y'
      00013E 09                    6613 	.db #0x09	; 9
      00013F 06                    6614 	.db #0x06	; 6
      000140 3E                    6615 	.db #0x3e	; 62
      000141 41                    6616 	.db #0x41	; 65	'A'
      000142 5D                    6617 	.db #0x5d	; 93
      000143 59                    6618 	.db #0x59	; 89	'Y'
      000144 4E                    6619 	.db #0x4e	; 78	'N'
      000145 7C                    6620 	.db #0x7c	; 124
      000146 12                    6621 	.db #0x12	; 18
      000147 11                    6622 	.db #0x11	; 17
      000148 12                    6623 	.db #0x12	; 18
      000149 7C                    6624 	.db #0x7c	; 124
      00014A 7F                    6625 	.db #0x7f	; 127
      00014B 49                    6626 	.db #0x49	; 73	'I'
      00014C 49                    6627 	.db #0x49	; 73	'I'
      00014D 49                    6628 	.db #0x49	; 73	'I'
      00014E 36                    6629 	.db #0x36	; 54	'6'
      00014F 3E                    6630 	.db #0x3e	; 62
      000150 41                    6631 	.db #0x41	; 65	'A'
      000151 41                    6632 	.db #0x41	; 65	'A'
      000152 41                    6633 	.db #0x41	; 65	'A'
      000153 22                    6634 	.db #0x22	; 34
      000154 7F                    6635 	.db #0x7f	; 127
      000155 41                    6636 	.db #0x41	; 65	'A'
      000156 41                    6637 	.db #0x41	; 65	'A'
      000157 41                    6638 	.db #0x41	; 65	'A'
      000158 3E                    6639 	.db #0x3e	; 62
      000159 7F                    6640 	.db #0x7f	; 127
      00015A 49                    6641 	.db #0x49	; 73	'I'
      00015B 49                    6642 	.db #0x49	; 73	'I'
      00015C 49                    6643 	.db #0x49	; 73	'I'
      00015D 41                    6644 	.db #0x41	; 65	'A'
      00015E 7F                    6645 	.db #0x7f	; 127
      00015F 09                    6646 	.db #0x09	; 9
      000160 09                    6647 	.db #0x09	; 9
      000161 09                    6648 	.db #0x09	; 9
      000162 01                    6649 	.db #0x01	; 1
      000163 3E                    6650 	.db #0x3e	; 62
      000164 41                    6651 	.db #0x41	; 65	'A'
      000165 41                    6652 	.db #0x41	; 65	'A'
      000166 51                    6653 	.db #0x51	; 81	'Q'
      000167 73                    6654 	.db #0x73	; 115	's'
      000168 7F                    6655 	.db #0x7f	; 127
      000169 08                    6656 	.db #0x08	; 8
      00016A 08                    6657 	.db #0x08	; 8
      00016B 08                    6658 	.db #0x08	; 8
      00016C 7F                    6659 	.db #0x7f	; 127
      00016D 00                    6660 	.db #0x00	; 0
      00016E 41                    6661 	.db #0x41	; 65	'A'
      00016F 7F                    6662 	.db #0x7f	; 127
      000170 41                    6663 	.db #0x41	; 65	'A'
      000171 00                    6664 	.db #0x00	; 0
      000172 20                    6665 	.db #0x20	; 32
      000173 40                    6666 	.db #0x40	; 64
      000174 41                    6667 	.db #0x41	; 65	'A'
      000175 3F                    6668 	.db #0x3f	; 63
      000176 01                    6669 	.db #0x01	; 1
      000177 7F                    6670 	.db #0x7f	; 127
      000178 08                    6671 	.db #0x08	; 8
      000179 14                    6672 	.db #0x14	; 20
      00017A 22                    6673 	.db #0x22	; 34
      00017B 41                    6674 	.db #0x41	; 65	'A'
      00017C 7F                    6675 	.db #0x7f	; 127
      00017D 40                    6676 	.db #0x40	; 64
      00017E 40                    6677 	.db #0x40	; 64
      00017F 40                    6678 	.db #0x40	; 64
      000180 40                    6679 	.db #0x40	; 64
      000181 7F                    6680 	.db #0x7f	; 127
      000182 02                    6681 	.db #0x02	; 2
      000183 1C                    6682 	.db #0x1c	; 28
      000184 02                    6683 	.db #0x02	; 2
      000185 7F                    6684 	.db #0x7f	; 127
      000186 7F                    6685 	.db #0x7f	; 127
      000187 04                    6686 	.db #0x04	; 4
      000188 08                    6687 	.db #0x08	; 8
      000189 10                    6688 	.db #0x10	; 16
      00018A 7F                    6689 	.db #0x7f	; 127
      00018B 3E                    6690 	.db #0x3e	; 62
      00018C 41                    6691 	.db #0x41	; 65	'A'
      00018D 41                    6692 	.db #0x41	; 65	'A'
      00018E 41                    6693 	.db #0x41	; 65	'A'
      00018F 3E                    6694 	.db #0x3e	; 62
      000190 7F                    6695 	.db #0x7f	; 127
      000191 09                    6696 	.db #0x09	; 9
      000192 09                    6697 	.db #0x09	; 9
      000193 09                    6698 	.db #0x09	; 9
      000194 06                    6699 	.db #0x06	; 6
      000195 3E                    6700 	.db #0x3e	; 62
      000196 41                    6701 	.db #0x41	; 65	'A'
      000197 51                    6702 	.db #0x51	; 81	'Q'
      000198 21                    6703 	.db #0x21	; 33
      000199 5E                    6704 	.db #0x5e	; 94
      00019A 7F                    6705 	.db #0x7f	; 127
      00019B 09                    6706 	.db #0x09	; 9
      00019C 19                    6707 	.db #0x19	; 25
      00019D 29                    6708 	.db #0x29	; 41
      00019E 46                    6709 	.db #0x46	; 70	'F'
      00019F 26                    6710 	.db #0x26	; 38
      0001A0 49                    6711 	.db #0x49	; 73	'I'
      0001A1 49                    6712 	.db #0x49	; 73	'I'
      0001A2 49                    6713 	.db #0x49	; 73	'I'
      0001A3 32                    6714 	.db #0x32	; 50	'2'
      0001A4 03                    6715 	.db #0x03	; 3
      0001A5 01                    6716 	.db #0x01	; 1
      0001A6 7F                    6717 	.db #0x7f	; 127
      0001A7 01                    6718 	.db #0x01	; 1
      0001A8 03                    6719 	.db #0x03	; 3
      0001A9 3F                    6720 	.db #0x3f	; 63
      0001AA 40                    6721 	.db #0x40	; 64
      0001AB 40                    6722 	.db #0x40	; 64
      0001AC 40                    6723 	.db #0x40	; 64
      0001AD 3F                    6724 	.db #0x3f	; 63
      0001AE 1F                    6725 	.db #0x1f	; 31
      0001AF 20                    6726 	.db #0x20	; 32
      0001B0 40                    6727 	.db #0x40	; 64
      0001B1 20                    6728 	.db #0x20	; 32
      0001B2 1F                    6729 	.db #0x1f	; 31
      0001B3 3F                    6730 	.db #0x3f	; 63
      0001B4 40                    6731 	.db #0x40	; 64
      0001B5 38                    6732 	.db #0x38	; 56	'8'
      0001B6 40                    6733 	.db #0x40	; 64
      0001B7 3F                    6734 	.db #0x3f	; 63
      0001B8 63                    6735 	.db #0x63	; 99	'c'
      0001B9 14                    6736 	.db #0x14	; 20
      0001BA 08                    6737 	.db #0x08	; 8
      0001BB 14                    6738 	.db #0x14	; 20
      0001BC 63                    6739 	.db #0x63	; 99	'c'
      0001BD 03                    6740 	.db #0x03	; 3
      0001BE 04                    6741 	.db #0x04	; 4
      0001BF 78                    6742 	.db #0x78	; 120	'x'
      0001C0 04                    6743 	.db #0x04	; 4
      0001C1 03                    6744 	.db #0x03	; 3
      0001C2 61                    6745 	.db #0x61	; 97	'a'
      0001C3 59                    6746 	.db #0x59	; 89	'Y'
      0001C4 49                    6747 	.db #0x49	; 73	'I'
      0001C5 4D                    6748 	.db #0x4d	; 77	'M'
      0001C6 43                    6749 	.db #0x43	; 67	'C'
      0001C7 00                    6750 	.db #0x00	; 0
      0001C8 7F                    6751 	.db #0x7f	; 127
      0001C9 41                    6752 	.db #0x41	; 65	'A'
      0001CA 41                    6753 	.db #0x41	; 65	'A'
      0001CB 41                    6754 	.db #0x41	; 65	'A'
      0001CC 02                    6755 	.db #0x02	; 2
      0001CD 04                    6756 	.db #0x04	; 4
      0001CE 08                    6757 	.db #0x08	; 8
      0001CF 10                    6758 	.db #0x10	; 16
      0001D0 20                    6759 	.db #0x20	; 32
      0001D1 00                    6760 	.db #0x00	; 0
      0001D2 41                    6761 	.db #0x41	; 65	'A'
      0001D3 41                    6762 	.db #0x41	; 65	'A'
      0001D4 41                    6763 	.db #0x41	; 65	'A'
      0001D5 7F                    6764 	.db #0x7f	; 127
      0001D6 04                    6765 	.db #0x04	; 4
      0001D7 02                    6766 	.db #0x02	; 2
      0001D8 01                    6767 	.db #0x01	; 1
      0001D9 02                    6768 	.db #0x02	; 2
      0001DA 04                    6769 	.db #0x04	; 4
      0001DB 40                    6770 	.db #0x40	; 64
      0001DC 40                    6771 	.db #0x40	; 64
      0001DD 40                    6772 	.db #0x40	; 64
      0001DE 40                    6773 	.db #0x40	; 64
      0001DF 40                    6774 	.db #0x40	; 64
      0001E0 00                    6775 	.db #0x00	; 0
      0001E1 03                    6776 	.db #0x03	; 3
      0001E2 07                    6777 	.db #0x07	; 7
      0001E3 08                    6778 	.db #0x08	; 8
      0001E4 00                    6779 	.db #0x00	; 0
      0001E5 20                    6780 	.db #0x20	; 32
      0001E6 54                    6781 	.db #0x54	; 84	'T'
      0001E7 54                    6782 	.db #0x54	; 84	'T'
      0001E8 78                    6783 	.db #0x78	; 120	'x'
      0001E9 40                    6784 	.db #0x40	; 64
      0001EA 7F                    6785 	.db #0x7f	; 127
      0001EB 28                    6786 	.db #0x28	; 40
      0001EC 44                    6787 	.db #0x44	; 68	'D'
      0001ED 44                    6788 	.db #0x44	; 68	'D'
      0001EE 38                    6789 	.db #0x38	; 56	'8'
      0001EF 38                    6790 	.db #0x38	; 56	'8'
      0001F0 44                    6791 	.db #0x44	; 68	'D'
      0001F1 44                    6792 	.db #0x44	; 68	'D'
      0001F2 44                    6793 	.db #0x44	; 68	'D'
      0001F3 28                    6794 	.db #0x28	; 40
      0001F4 38                    6795 	.db #0x38	; 56	'8'
      0001F5 44                    6796 	.db #0x44	; 68	'D'
      0001F6 44                    6797 	.db #0x44	; 68	'D'
      0001F7 28                    6798 	.db #0x28	; 40
      0001F8 7F                    6799 	.db #0x7f	; 127
      0001F9 38                    6800 	.db #0x38	; 56	'8'
      0001FA 54                    6801 	.db #0x54	; 84	'T'
      0001FB 54                    6802 	.db #0x54	; 84	'T'
      0001FC 54                    6803 	.db #0x54	; 84	'T'
      0001FD 18                    6804 	.db #0x18	; 24
      0001FE 00                    6805 	.db #0x00	; 0
      0001FF 08                    6806 	.db #0x08	; 8
      000200 7E                    6807 	.db #0x7e	; 126
      000201 09                    6808 	.db #0x09	; 9
      000202 02                    6809 	.db #0x02	; 2
      000203 18                    6810 	.db #0x18	; 24
      000204 A4                    6811 	.db #0xa4	; 164
      000205 A4                    6812 	.db #0xa4	; 164
      000206 9C                    6813 	.db #0x9c	; 156
      000207 78                    6814 	.db #0x78	; 120	'x'
      000208 7F                    6815 	.db #0x7f	; 127
      000209 08                    6816 	.db #0x08	; 8
      00020A 04                    6817 	.db #0x04	; 4
      00020B 04                    6818 	.db #0x04	; 4
      00020C 78                    6819 	.db #0x78	; 120	'x'
      00020D 00                    6820 	.db #0x00	; 0
      00020E 44                    6821 	.db #0x44	; 68	'D'
      00020F 7D                    6822 	.db #0x7d	; 125
      000210 40                    6823 	.db #0x40	; 64
      000211 00                    6824 	.db #0x00	; 0
      000212 20                    6825 	.db #0x20	; 32
      000213 40                    6826 	.db #0x40	; 64
      000214 40                    6827 	.db #0x40	; 64
      000215 3D                    6828 	.db #0x3d	; 61
      000216 00                    6829 	.db #0x00	; 0
      000217 7F                    6830 	.db #0x7f	; 127
      000218 10                    6831 	.db #0x10	; 16
      000219 28                    6832 	.db #0x28	; 40
      00021A 44                    6833 	.db #0x44	; 68	'D'
      00021B 00                    6834 	.db #0x00	; 0
      00021C 00                    6835 	.db #0x00	; 0
      00021D 41                    6836 	.db #0x41	; 65	'A'
      00021E 7F                    6837 	.db #0x7f	; 127
      00021F 40                    6838 	.db #0x40	; 64
      000220 00                    6839 	.db #0x00	; 0
      000221 7C                    6840 	.db #0x7c	; 124
      000222 04                    6841 	.db #0x04	; 4
      000223 78                    6842 	.db #0x78	; 120	'x'
      000224 04                    6843 	.db #0x04	; 4
      000225 78                    6844 	.db #0x78	; 120	'x'
      000226 7C                    6845 	.db #0x7c	; 124
      000227 08                    6846 	.db #0x08	; 8
      000228 04                    6847 	.db #0x04	; 4
      000229 04                    6848 	.db #0x04	; 4
      00022A 78                    6849 	.db #0x78	; 120	'x'
      00022B 38                    6850 	.db #0x38	; 56	'8'
      00022C 44                    6851 	.db #0x44	; 68	'D'
      00022D 44                    6852 	.db #0x44	; 68	'D'
      00022E 44                    6853 	.db #0x44	; 68	'D'
      00022F 38                    6854 	.db #0x38	; 56	'8'
      000230 FC                    6855 	.db #0xfc	; 252
      000231 18                    6856 	.db #0x18	; 24
      000232 24                    6857 	.db #0x24	; 36
      000233 24                    6858 	.db #0x24	; 36
      000234 18                    6859 	.db #0x18	; 24
      000235 18                    6860 	.db #0x18	; 24
      000236 24                    6861 	.db #0x24	; 36
      000237 24                    6862 	.db #0x24	; 36
      000238 18                    6863 	.db #0x18	; 24
      000239 FC                    6864 	.db #0xfc	; 252
      00023A 7C                    6865 	.db #0x7c	; 124
      00023B 08                    6866 	.db #0x08	; 8
      00023C 04                    6867 	.db #0x04	; 4
      00023D 04                    6868 	.db #0x04	; 4
      00023E 08                    6869 	.db #0x08	; 8
      00023F 48                    6870 	.db #0x48	; 72	'H'
      000240 54                    6871 	.db #0x54	; 84	'T'
      000241 54                    6872 	.db #0x54	; 84	'T'
      000242 54                    6873 	.db #0x54	; 84	'T'
      000243 24                    6874 	.db #0x24	; 36
      000244 04                    6875 	.db #0x04	; 4
      000245 04                    6876 	.db #0x04	; 4
      000246 3F                    6877 	.db #0x3f	; 63
      000247 44                    6878 	.db #0x44	; 68	'D'
      000248 24                    6879 	.db #0x24	; 36
      000249 3C                    6880 	.db #0x3c	; 60
      00024A 40                    6881 	.db #0x40	; 64
      00024B 40                    6882 	.db #0x40	; 64
      00024C 20                    6883 	.db #0x20	; 32
      00024D 7C                    6884 	.db #0x7c	; 124
      00024E 1C                    6885 	.db #0x1c	; 28
      00024F 20                    6886 	.db #0x20	; 32
      000250 40                    6887 	.db #0x40	; 64
      000251 20                    6888 	.db #0x20	; 32
      000252 1C                    6889 	.db #0x1c	; 28
      000253 3C                    6890 	.db #0x3c	; 60
      000254 40                    6891 	.db #0x40	; 64
      000255 30                    6892 	.db #0x30	; 48	'0'
      000256 40                    6893 	.db #0x40	; 64
      000257 3C                    6894 	.db #0x3c	; 60
      000258 44                    6895 	.db #0x44	; 68	'D'
      000259 28                    6896 	.db #0x28	; 40
      00025A 10                    6897 	.db #0x10	; 16
      00025B 28                    6898 	.db #0x28	; 40
      00025C 44                    6899 	.db #0x44	; 68	'D'
      00025D 4C                    6900 	.db #0x4c	; 76	'L'
      00025E 90                    6901 	.db #0x90	; 144
      00025F 90                    6902 	.db #0x90	; 144
      000260 90                    6903 	.db #0x90	; 144
      000261 7C                    6904 	.db #0x7c	; 124
      000262 44                    6905 	.db #0x44	; 68	'D'
      000263 64                    6906 	.db #0x64	; 100	'd'
      000264 54                    6907 	.db #0x54	; 84	'T'
      000265 4C                    6908 	.db #0x4c	; 76	'L'
      000266 44                    6909 	.db #0x44	; 68	'D'
      000267 00                    6910 	.db #0x00	; 0
      000268 08                    6911 	.db #0x08	; 8
      000269 36                    6912 	.db #0x36	; 54	'6'
      00026A 41                    6913 	.db #0x41	; 65	'A'
      00026B 00                    6914 	.db #0x00	; 0
      00026C 00                    6915 	.db #0x00	; 0
      00026D 00                    6916 	.db #0x00	; 0
      00026E 77                    6917 	.db #0x77	; 119	'w'
      00026F 00                    6918 	.db #0x00	; 0
      000270 00                    6919 	.db #0x00	; 0
      000271 00                    6920 	.db #0x00	; 0
      000272 41                    6921 	.db #0x41	; 65	'A'
      000273 36                    6922 	.db #0x36	; 54	'6'
      000274 08                    6923 	.db #0x08	; 8
      000275 00                    6924 	.db #0x00	; 0
      000276 02                    6925 	.db #0x02	; 2
      000277 01                    6926 	.db #0x01	; 1
      000278 02                    6927 	.db #0x02	; 2
      000279 04                    6928 	.db #0x04	; 4
      00027A 02                    6929 	.db #0x02	; 2
      00027B 3C                    6930 	.db #0x3c	; 60
      00027C 26                    6931 	.db #0x26	; 38
      00027D 23                    6932 	.db #0x23	; 35
      00027E 26                    6933 	.db #0x26	; 38
      00027F 3C                    6934 	.db #0x3c	; 60
      000280 1E                    6935 	.db #0x1e	; 30
      000281 A1                    6936 	.db #0xa1	; 161
      000282 A1                    6937 	.db #0xa1	; 161
      000283 61                    6938 	.db #0x61	; 97	'a'
      000284 12                    6939 	.db #0x12	; 18
      000285 3A                    6940 	.db #0x3a	; 58
      000286 40                    6941 	.db #0x40	; 64
      000287 40                    6942 	.db #0x40	; 64
      000288 20                    6943 	.db #0x20	; 32
      000289 7A                    6944 	.db #0x7a	; 122	'z'
      00028A 38                    6945 	.db #0x38	; 56	'8'
      00028B 54                    6946 	.db #0x54	; 84	'T'
      00028C 54                    6947 	.db #0x54	; 84	'T'
      00028D 55                    6948 	.db #0x55	; 85	'U'
      00028E 59                    6949 	.db #0x59	; 89	'Y'
      00028F 21                    6950 	.db #0x21	; 33
      000290 55                    6951 	.db #0x55	; 85	'U'
      000291 55                    6952 	.db #0x55	; 85	'U'
      000292 79                    6953 	.db #0x79	; 121	'y'
      000293 41                    6954 	.db #0x41	; 65	'A'
      000294 22                    6955 	.db #0x22	; 34
      000295 54                    6956 	.db #0x54	; 84	'T'
      000296 54                    6957 	.db #0x54	; 84	'T'
      000297 78                    6958 	.db #0x78	; 120	'x'
      000298 42                    6959 	.db #0x42	; 66	'B'
      000299 21                    6960 	.db #0x21	; 33
      00029A 55                    6961 	.db #0x55	; 85	'U'
      00029B 54                    6962 	.db #0x54	; 84	'T'
      00029C 78                    6963 	.db #0x78	; 120	'x'
      00029D 40                    6964 	.db #0x40	; 64
      00029E 20                    6965 	.db #0x20	; 32
      00029F 54                    6966 	.db #0x54	; 84	'T'
      0002A0 55                    6967 	.db #0x55	; 85	'U'
      0002A1 79                    6968 	.db #0x79	; 121	'y'
      0002A2 40                    6969 	.db #0x40	; 64
      0002A3 0C                    6970 	.db #0x0c	; 12
      0002A4 1E                    6971 	.db #0x1e	; 30
      0002A5 52                    6972 	.db #0x52	; 82	'R'
      0002A6 72                    6973 	.db #0x72	; 114	'r'
      0002A7 12                    6974 	.db #0x12	; 18
      0002A8 39                    6975 	.db #0x39	; 57	'9'
      0002A9 55                    6976 	.db #0x55	; 85	'U'
      0002AA 55                    6977 	.db #0x55	; 85	'U'
      0002AB 55                    6978 	.db #0x55	; 85	'U'
      0002AC 59                    6979 	.db #0x59	; 89	'Y'
      0002AD 39                    6980 	.db #0x39	; 57	'9'
      0002AE 54                    6981 	.db #0x54	; 84	'T'
      0002AF 54                    6982 	.db #0x54	; 84	'T'
      0002B0 54                    6983 	.db #0x54	; 84	'T'
      0002B1 59                    6984 	.db #0x59	; 89	'Y'
      0002B2 39                    6985 	.db #0x39	; 57	'9'
      0002B3 55                    6986 	.db #0x55	; 85	'U'
      0002B4 54                    6987 	.db #0x54	; 84	'T'
      0002B5 54                    6988 	.db #0x54	; 84	'T'
      0002B6 58                    6989 	.db #0x58	; 88	'X'
      0002B7 00                    6990 	.db #0x00	; 0
      0002B8 00                    6991 	.db #0x00	; 0
      0002B9 45                    6992 	.db #0x45	; 69	'E'
      0002BA 7C                    6993 	.db #0x7c	; 124
      0002BB 41                    6994 	.db #0x41	; 65	'A'
      0002BC 00                    6995 	.db #0x00	; 0
      0002BD 02                    6996 	.db #0x02	; 2
      0002BE 45                    6997 	.db #0x45	; 69	'E'
      0002BF 7D                    6998 	.db #0x7d	; 125
      0002C0 42                    6999 	.db #0x42	; 66	'B'
      0002C1 00                    7000 	.db #0x00	; 0
      0002C2 01                    7001 	.db #0x01	; 1
      0002C3 45                    7002 	.db #0x45	; 69	'E'
      0002C4 7C                    7003 	.db #0x7c	; 124
      0002C5 40                    7004 	.db #0x40	; 64
      0002C6 7D                    7005 	.db #0x7d	; 125
      0002C7 12                    7006 	.db #0x12	; 18
      0002C8 11                    7007 	.db #0x11	; 17
      0002C9 12                    7008 	.db #0x12	; 18
      0002CA 7D                    7009 	.db #0x7d	; 125
      0002CB F0                    7010 	.db #0xf0	; 240
      0002CC 28                    7011 	.db #0x28	; 40
      0002CD 25                    7012 	.db #0x25	; 37
      0002CE 28                    7013 	.db #0x28	; 40
      0002CF F0                    7014 	.db #0xf0	; 240
      0002D0 7C                    7015 	.db #0x7c	; 124
      0002D1 54                    7016 	.db #0x54	; 84	'T'
      0002D2 55                    7017 	.db #0x55	; 85	'U'
      0002D3 45                    7018 	.db #0x45	; 69	'E'
      0002D4 00                    7019 	.db #0x00	; 0
      0002D5 20                    7020 	.db #0x20	; 32
      0002D6 54                    7021 	.db #0x54	; 84	'T'
      0002D7 54                    7022 	.db #0x54	; 84	'T'
      0002D8 7C                    7023 	.db #0x7c	; 124
      0002D9 54                    7024 	.db #0x54	; 84	'T'
      0002DA 7C                    7025 	.db #0x7c	; 124
      0002DB 0A                    7026 	.db #0x0a	; 10
      0002DC 09                    7027 	.db #0x09	; 9
      0002DD 7F                    7028 	.db #0x7f	; 127
      0002DE 49                    7029 	.db #0x49	; 73	'I'
      0002DF 32                    7030 	.db #0x32	; 50	'2'
      0002E0 49                    7031 	.db #0x49	; 73	'I'
      0002E1 49                    7032 	.db #0x49	; 73	'I'
      0002E2 49                    7033 	.db #0x49	; 73	'I'
      0002E3 32                    7034 	.db #0x32	; 50	'2'
      0002E4 3A                    7035 	.db #0x3a	; 58
      0002E5 44                    7036 	.db #0x44	; 68	'D'
      0002E6 44                    7037 	.db #0x44	; 68	'D'
      0002E7 44                    7038 	.db #0x44	; 68	'D'
      0002E8 3A                    7039 	.db #0x3a	; 58
      0002E9 32                    7040 	.db #0x32	; 50	'2'
      0002EA 4A                    7041 	.db #0x4a	; 74	'J'
      0002EB 48                    7042 	.db #0x48	; 72	'H'
      0002EC 48                    7043 	.db #0x48	; 72	'H'
      0002ED 30                    7044 	.db #0x30	; 48	'0'
      0002EE 3A                    7045 	.db #0x3a	; 58
      0002EF 41                    7046 	.db #0x41	; 65	'A'
      0002F0 41                    7047 	.db #0x41	; 65	'A'
      0002F1 21                    7048 	.db #0x21	; 33
      0002F2 7A                    7049 	.db #0x7a	; 122	'z'
      0002F3 3A                    7050 	.db #0x3a	; 58
      0002F4 42                    7051 	.db #0x42	; 66	'B'
      0002F5 40                    7052 	.db #0x40	; 64
      0002F6 20                    7053 	.db #0x20	; 32
      0002F7 78                    7054 	.db #0x78	; 120	'x'
      0002F8 00                    7055 	.db #0x00	; 0
      0002F9 9D                    7056 	.db #0x9d	; 157
      0002FA A0                    7057 	.db #0xa0	; 160
      0002FB A0                    7058 	.db #0xa0	; 160
      0002FC 7D                    7059 	.db #0x7d	; 125
      0002FD 3D                    7060 	.db #0x3d	; 61
      0002FE 42                    7061 	.db #0x42	; 66	'B'
      0002FF 42                    7062 	.db #0x42	; 66	'B'
      000300 42                    7063 	.db #0x42	; 66	'B'
      000301 3D                    7064 	.db #0x3d	; 61
      000302 3D                    7065 	.db #0x3d	; 61
      000303 40                    7066 	.db #0x40	; 64
      000304 40                    7067 	.db #0x40	; 64
      000305 40                    7068 	.db #0x40	; 64
      000306 3D                    7069 	.db #0x3d	; 61
      000307 3C                    7070 	.db #0x3c	; 60
      000308 24                    7071 	.db #0x24	; 36
      000309 FF                    7072 	.db #0xff	; 255
      00030A 24                    7073 	.db #0x24	; 36
      00030B 24                    7074 	.db #0x24	; 36
      00030C 48                    7075 	.db #0x48	; 72	'H'
      00030D 7E                    7076 	.db #0x7e	; 126
      00030E 49                    7077 	.db #0x49	; 73	'I'
      00030F 43                    7078 	.db #0x43	; 67	'C'
      000310 66                    7079 	.db #0x66	; 102	'f'
      000311 2B                    7080 	.db #0x2b	; 43
      000312 2F                    7081 	.db #0x2f	; 47
      000313 FC                    7082 	.db #0xfc	; 252
      000314 2F                    7083 	.db #0x2f	; 47
      000315 2B                    7084 	.db #0x2b	; 43
      000316 FF                    7085 	.db #0xff	; 255
      000317 09                    7086 	.db #0x09	; 9
      000318 29                    7087 	.db #0x29	; 41
      000319 F6                    7088 	.db #0xf6	; 246
      00031A 20                    7089 	.db #0x20	; 32
      00031B C0                    7090 	.db #0xc0	; 192
      00031C 88                    7091 	.db #0x88	; 136
      00031D 7E                    7092 	.db #0x7e	; 126
      00031E 09                    7093 	.db #0x09	; 9
      00031F 03                    7094 	.db #0x03	; 3
      000320 20                    7095 	.db #0x20	; 32
      000321 54                    7096 	.db #0x54	; 84	'T'
      000322 54                    7097 	.db #0x54	; 84	'T'
      000323 79                    7098 	.db #0x79	; 121	'y'
      000324 41                    7099 	.db #0x41	; 65	'A'
      000325 00                    7100 	.db #0x00	; 0
      000326 00                    7101 	.db #0x00	; 0
      000327 44                    7102 	.db #0x44	; 68	'D'
      000328 7D                    7103 	.db #0x7d	; 125
      000329 41                    7104 	.db #0x41	; 65	'A'
      00032A 30                    7105 	.db #0x30	; 48	'0'
      00032B 48                    7106 	.db #0x48	; 72	'H'
      00032C 48                    7107 	.db #0x48	; 72	'H'
      00032D 4A                    7108 	.db #0x4a	; 74	'J'
      00032E 32                    7109 	.db #0x32	; 50	'2'
      00032F 38                    7110 	.db #0x38	; 56	'8'
      000330 40                    7111 	.db #0x40	; 64
      000331 40                    7112 	.db #0x40	; 64
      000332 22                    7113 	.db #0x22	; 34
      000333 7A                    7114 	.db #0x7a	; 122	'z'
      000334 00                    7115 	.db #0x00	; 0
      000335 7A                    7116 	.db #0x7a	; 122	'z'
      000336 0A                    7117 	.db #0x0a	; 10
      000337 0A                    7118 	.db #0x0a	; 10
      000338 72                    7119 	.db #0x72	; 114	'r'
      000339 7D                    7120 	.db #0x7d	; 125
      00033A 0D                    7121 	.db #0x0d	; 13
      00033B 19                    7122 	.db #0x19	; 25
      00033C 31                    7123 	.db #0x31	; 49	'1'
      00033D 7D                    7124 	.db #0x7d	; 125
      00033E 26                    7125 	.db #0x26	; 38
      00033F 29                    7126 	.db #0x29	; 41
      000340 29                    7127 	.db #0x29	; 41
      000341 2F                    7128 	.db #0x2f	; 47
      000342 28                    7129 	.db #0x28	; 40
      000343 26                    7130 	.db #0x26	; 38
      000344 29                    7131 	.db #0x29	; 41
      000345 29                    7132 	.db #0x29	; 41
      000346 29                    7133 	.db #0x29	; 41
      000347 26                    7134 	.db #0x26	; 38
      000348 30                    7135 	.db #0x30	; 48	'0'
      000349 48                    7136 	.db #0x48	; 72	'H'
      00034A 4D                    7137 	.db #0x4d	; 77	'M'
      00034B 40                    7138 	.db #0x40	; 64
      00034C 20                    7139 	.db #0x20	; 32
      00034D 38                    7140 	.db #0x38	; 56	'8'
      00034E 08                    7141 	.db #0x08	; 8
      00034F 08                    7142 	.db #0x08	; 8
      000350 08                    7143 	.db #0x08	; 8
      000351 08                    7144 	.db #0x08	; 8
      000352 08                    7145 	.db #0x08	; 8
      000353 08                    7146 	.db #0x08	; 8
      000354 08                    7147 	.db #0x08	; 8
      000355 08                    7148 	.db #0x08	; 8
      000356 38                    7149 	.db #0x38	; 56	'8'
      000357 2F                    7150 	.db #0x2f	; 47
      000358 10                    7151 	.db #0x10	; 16
      000359 C8                    7152 	.db #0xc8	; 200
      00035A AC                    7153 	.db #0xac	; 172
      00035B BA                    7154 	.db #0xba	; 186
      00035C 2F                    7155 	.db #0x2f	; 47
      00035D 10                    7156 	.db #0x10	; 16
      00035E 28                    7157 	.db #0x28	; 40
      00035F 34                    7158 	.db #0x34	; 52	'4'
      000360 FA                    7159 	.db #0xfa	; 250
      000361 00                    7160 	.db #0x00	; 0
      000362 00                    7161 	.db #0x00	; 0
      000363 7B                    7162 	.db #0x7b	; 123
      000364 00                    7163 	.db #0x00	; 0
      000365 00                    7164 	.db #0x00	; 0
      000366 08                    7165 	.db #0x08	; 8
      000367 14                    7166 	.db #0x14	; 20
      000368 2A                    7167 	.db #0x2a	; 42
      000369 14                    7168 	.db #0x14	; 20
      00036A 22                    7169 	.db #0x22	; 34
      00036B 22                    7170 	.db #0x22	; 34
      00036C 14                    7171 	.db #0x14	; 20
      00036D 2A                    7172 	.db #0x2a	; 42
      00036E 14                    7173 	.db #0x14	; 20
      00036F 08                    7174 	.db #0x08	; 8
      000370 AA                    7175 	.db #0xaa	; 170
      000371 00                    7176 	.db #0x00	; 0
      000372 55                    7177 	.db #0x55	; 85	'U'
      000373 00                    7178 	.db #0x00	; 0
      000374 AA                    7179 	.db #0xaa	; 170
      000375 AA                    7180 	.db #0xaa	; 170
      000376 55                    7181 	.db #0x55	; 85	'U'
      000377 AA                    7182 	.db #0xaa	; 170
      000378 55                    7183 	.db #0x55	; 85	'U'
      000379 AA                    7184 	.db #0xaa	; 170
      00037A 00                    7185 	.db #0x00	; 0
      00037B 00                    7186 	.db #0x00	; 0
      00037C 00                    7187 	.db #0x00	; 0
      00037D FF                    7188 	.db #0xff	; 255
      00037E 00                    7189 	.db #0x00	; 0
      00037F 10                    7190 	.db #0x10	; 16
      000380 10                    7191 	.db #0x10	; 16
      000381 10                    7192 	.db #0x10	; 16
      000382 FF                    7193 	.db #0xff	; 255
      000383 00                    7194 	.db #0x00	; 0
      000384 14                    7195 	.db #0x14	; 20
      000385 14                    7196 	.db #0x14	; 20
      000386 14                    7197 	.db #0x14	; 20
      000387 FF                    7198 	.db #0xff	; 255
      000388 00                    7199 	.db #0x00	; 0
      000389 10                    7200 	.db #0x10	; 16
      00038A 10                    7201 	.db #0x10	; 16
      00038B FF                    7202 	.db #0xff	; 255
      00038C 00                    7203 	.db #0x00	; 0
      00038D FF                    7204 	.db #0xff	; 255
      00038E 10                    7205 	.db #0x10	; 16
      00038F 10                    7206 	.db #0x10	; 16
      000390 F0                    7207 	.db #0xf0	; 240
      000391 10                    7208 	.db #0x10	; 16
      000392 F0                    7209 	.db #0xf0	; 240
      000393 14                    7210 	.db #0x14	; 20
      000394 14                    7211 	.db #0x14	; 20
      000395 14                    7212 	.db #0x14	; 20
      000396 FC                    7213 	.db #0xfc	; 252
      000397 00                    7214 	.db #0x00	; 0
      000398 14                    7215 	.db #0x14	; 20
      000399 14                    7216 	.db #0x14	; 20
      00039A F7                    7217 	.db #0xf7	; 247
      00039B 00                    7218 	.db #0x00	; 0
      00039C FF                    7219 	.db #0xff	; 255
      00039D 00                    7220 	.db #0x00	; 0
      00039E 00                    7221 	.db #0x00	; 0
      00039F FF                    7222 	.db #0xff	; 255
      0003A0 00                    7223 	.db #0x00	; 0
      0003A1 FF                    7224 	.db #0xff	; 255
      0003A2 14                    7225 	.db #0x14	; 20
      0003A3 14                    7226 	.db #0x14	; 20
      0003A4 F4                    7227 	.db #0xf4	; 244
      0003A5 04                    7228 	.db #0x04	; 4
      0003A6 FC                    7229 	.db #0xfc	; 252
      0003A7 14                    7230 	.db #0x14	; 20
      0003A8 14                    7231 	.db #0x14	; 20
      0003A9 17                    7232 	.db #0x17	; 23
      0003AA 10                    7233 	.db #0x10	; 16
      0003AB 1F                    7234 	.db #0x1f	; 31
      0003AC 10                    7235 	.db #0x10	; 16
      0003AD 10                    7236 	.db #0x10	; 16
      0003AE 1F                    7237 	.db #0x1f	; 31
      0003AF 10                    7238 	.db #0x10	; 16
      0003B0 1F                    7239 	.db #0x1f	; 31
      0003B1 14                    7240 	.db #0x14	; 20
      0003B2 14                    7241 	.db #0x14	; 20
      0003B3 14                    7242 	.db #0x14	; 20
      0003B4 1F                    7243 	.db #0x1f	; 31
      0003B5 00                    7244 	.db #0x00	; 0
      0003B6 10                    7245 	.db #0x10	; 16
      0003B7 10                    7246 	.db #0x10	; 16
      0003B8 10                    7247 	.db #0x10	; 16
      0003B9 F0                    7248 	.db #0xf0	; 240
      0003BA 00                    7249 	.db #0x00	; 0
      0003BB 00                    7250 	.db #0x00	; 0
      0003BC 00                    7251 	.db #0x00	; 0
      0003BD 00                    7252 	.db #0x00	; 0
      0003BE 1F                    7253 	.db #0x1f	; 31
      0003BF 10                    7254 	.db #0x10	; 16
      0003C0 10                    7255 	.db #0x10	; 16
      0003C1 10                    7256 	.db #0x10	; 16
      0003C2 10                    7257 	.db #0x10	; 16
      0003C3 1F                    7258 	.db #0x1f	; 31
      0003C4 10                    7259 	.db #0x10	; 16
      0003C5 10                    7260 	.db #0x10	; 16
      0003C6 10                    7261 	.db #0x10	; 16
      0003C7 10                    7262 	.db #0x10	; 16
      0003C8 F0                    7263 	.db #0xf0	; 240
      0003C9 10                    7264 	.db #0x10	; 16
      0003CA 00                    7265 	.db #0x00	; 0
      0003CB 00                    7266 	.db #0x00	; 0
      0003CC 00                    7267 	.db #0x00	; 0
      0003CD FF                    7268 	.db #0xff	; 255
      0003CE 10                    7269 	.db #0x10	; 16
      0003CF 10                    7270 	.db #0x10	; 16
      0003D0 10                    7271 	.db #0x10	; 16
      0003D1 10                    7272 	.db #0x10	; 16
      0003D2 10                    7273 	.db #0x10	; 16
      0003D3 10                    7274 	.db #0x10	; 16
      0003D4 10                    7275 	.db #0x10	; 16
      0003D5 10                    7276 	.db #0x10	; 16
      0003D6 10                    7277 	.db #0x10	; 16
      0003D7 FF                    7278 	.db #0xff	; 255
      0003D8 10                    7279 	.db #0x10	; 16
      0003D9 00                    7280 	.db #0x00	; 0
      0003DA 00                    7281 	.db #0x00	; 0
      0003DB 00                    7282 	.db #0x00	; 0
      0003DC FF                    7283 	.db #0xff	; 255
      0003DD 14                    7284 	.db #0x14	; 20
      0003DE 00                    7285 	.db #0x00	; 0
      0003DF 00                    7286 	.db #0x00	; 0
      0003E0 FF                    7287 	.db #0xff	; 255
      0003E1 00                    7288 	.db #0x00	; 0
      0003E2 FF                    7289 	.db #0xff	; 255
      0003E3 00                    7290 	.db #0x00	; 0
      0003E4 00                    7291 	.db #0x00	; 0
      0003E5 1F                    7292 	.db #0x1f	; 31
      0003E6 10                    7293 	.db #0x10	; 16
      0003E7 17                    7294 	.db #0x17	; 23
      0003E8 00                    7295 	.db #0x00	; 0
      0003E9 00                    7296 	.db #0x00	; 0
      0003EA FC                    7297 	.db #0xfc	; 252
      0003EB 04                    7298 	.db #0x04	; 4
      0003EC F4                    7299 	.db #0xf4	; 244
      0003ED 14                    7300 	.db #0x14	; 20
      0003EE 14                    7301 	.db #0x14	; 20
      0003EF 17                    7302 	.db #0x17	; 23
      0003F0 10                    7303 	.db #0x10	; 16
      0003F1 17                    7304 	.db #0x17	; 23
      0003F2 14                    7305 	.db #0x14	; 20
      0003F3 14                    7306 	.db #0x14	; 20
      0003F4 F4                    7307 	.db #0xf4	; 244
      0003F5 04                    7308 	.db #0x04	; 4
      0003F6 F4                    7309 	.db #0xf4	; 244
      0003F7 00                    7310 	.db #0x00	; 0
      0003F8 00                    7311 	.db #0x00	; 0
      0003F9 FF                    7312 	.db #0xff	; 255
      0003FA 00                    7313 	.db #0x00	; 0
      0003FB F7                    7314 	.db #0xf7	; 247
      0003FC 14                    7315 	.db #0x14	; 20
      0003FD 14                    7316 	.db #0x14	; 20
      0003FE 14                    7317 	.db #0x14	; 20
      0003FF 14                    7318 	.db #0x14	; 20
      000400 14                    7319 	.db #0x14	; 20
      000401 14                    7320 	.db #0x14	; 20
      000402 14                    7321 	.db #0x14	; 20
      000403 F7                    7322 	.db #0xf7	; 247
      000404 00                    7323 	.db #0x00	; 0
      000405 F7                    7324 	.db #0xf7	; 247
      000406 14                    7325 	.db #0x14	; 20
      000407 14                    7326 	.db #0x14	; 20
      000408 14                    7327 	.db #0x14	; 20
      000409 17                    7328 	.db #0x17	; 23
      00040A 14                    7329 	.db #0x14	; 20
      00040B 10                    7330 	.db #0x10	; 16
      00040C 10                    7331 	.db #0x10	; 16
      00040D 1F                    7332 	.db #0x1f	; 31
      00040E 10                    7333 	.db #0x10	; 16
      00040F 1F                    7334 	.db #0x1f	; 31
      000410 14                    7335 	.db #0x14	; 20
      000411 14                    7336 	.db #0x14	; 20
      000412 14                    7337 	.db #0x14	; 20
      000413 F4                    7338 	.db #0xf4	; 244
      000414 14                    7339 	.db #0x14	; 20
      000415 10                    7340 	.db #0x10	; 16
      000416 10                    7341 	.db #0x10	; 16
      000417 F0                    7342 	.db #0xf0	; 240
      000418 10                    7343 	.db #0x10	; 16
      000419 F0                    7344 	.db #0xf0	; 240
      00041A 00                    7345 	.db #0x00	; 0
      00041B 00                    7346 	.db #0x00	; 0
      00041C 1F                    7347 	.db #0x1f	; 31
      00041D 10                    7348 	.db #0x10	; 16
      00041E 1F                    7349 	.db #0x1f	; 31
      00041F 00                    7350 	.db #0x00	; 0
      000420 00                    7351 	.db #0x00	; 0
      000421 00                    7352 	.db #0x00	; 0
      000422 1F                    7353 	.db #0x1f	; 31
      000423 14                    7354 	.db #0x14	; 20
      000424 00                    7355 	.db #0x00	; 0
      000425 00                    7356 	.db #0x00	; 0
      000426 00                    7357 	.db #0x00	; 0
      000427 FC                    7358 	.db #0xfc	; 252
      000428 14                    7359 	.db #0x14	; 20
      000429 00                    7360 	.db #0x00	; 0
      00042A 00                    7361 	.db #0x00	; 0
      00042B F0                    7362 	.db #0xf0	; 240
      00042C 10                    7363 	.db #0x10	; 16
      00042D F0                    7364 	.db #0xf0	; 240
      00042E 10                    7365 	.db #0x10	; 16
      00042F 10                    7366 	.db #0x10	; 16
      000430 FF                    7367 	.db #0xff	; 255
      000431 10                    7368 	.db #0x10	; 16
      000432 FF                    7369 	.db #0xff	; 255
      000433 14                    7370 	.db #0x14	; 20
      000434 14                    7371 	.db #0x14	; 20
      000435 14                    7372 	.db #0x14	; 20
      000436 FF                    7373 	.db #0xff	; 255
      000437 14                    7374 	.db #0x14	; 20
      000438 10                    7375 	.db #0x10	; 16
      000439 10                    7376 	.db #0x10	; 16
      00043A 10                    7377 	.db #0x10	; 16
      00043B 1F                    7378 	.db #0x1f	; 31
      00043C 00                    7379 	.db #0x00	; 0
      00043D 00                    7380 	.db #0x00	; 0
      00043E 00                    7381 	.db #0x00	; 0
      00043F 00                    7382 	.db #0x00	; 0
      000440 F0                    7383 	.db #0xf0	; 240
      000441 10                    7384 	.db #0x10	; 16
      000442 FF                    7385 	.db #0xff	; 255
      000443 FF                    7386 	.db #0xff	; 255
      000444 FF                    7387 	.db #0xff	; 255
      000445 FF                    7388 	.db #0xff	; 255
      000446 FF                    7389 	.db #0xff	; 255
      000447 F0                    7390 	.db #0xf0	; 240
      000448 F0                    7391 	.db #0xf0	; 240
      000449 F0                    7392 	.db #0xf0	; 240
      00044A F0                    7393 	.db #0xf0	; 240
      00044B F0                    7394 	.db #0xf0	; 240
      00044C FF                    7395 	.db #0xff	; 255
      00044D FF                    7396 	.db #0xff	; 255
      00044E FF                    7397 	.db #0xff	; 255
      00044F 00                    7398 	.db #0x00	; 0
      000450 00                    7399 	.db #0x00	; 0
      000451 00                    7400 	.db #0x00	; 0
      000452 00                    7401 	.db #0x00	; 0
      000453 00                    7402 	.db #0x00	; 0
      000454 FF                    7403 	.db #0xff	; 255
      000455 FF                    7404 	.db #0xff	; 255
      000456 0F                    7405 	.db #0x0f	; 15
      000457 0F                    7406 	.db #0x0f	; 15
      000458 0F                    7407 	.db #0x0f	; 15
      000459 0F                    7408 	.db #0x0f	; 15
      00045A 0F                    7409 	.db #0x0f	; 15
      00045B 38                    7410 	.db #0x38	; 56	'8'
      00045C 44                    7411 	.db #0x44	; 68	'D'
      00045D 44                    7412 	.db #0x44	; 68	'D'
      00045E 38                    7413 	.db #0x38	; 56	'8'
      00045F 44                    7414 	.db #0x44	; 68	'D'
      000460 FC                    7415 	.db #0xfc	; 252
      000461 4A                    7416 	.db #0x4a	; 74	'J'
      000462 4A                    7417 	.db #0x4a	; 74	'J'
      000463 4A                    7418 	.db #0x4a	; 74	'J'
      000464 34                    7419 	.db #0x34	; 52	'4'
      000465 7E                    7420 	.db #0x7e	; 126
      000466 02                    7421 	.db #0x02	; 2
      000467 02                    7422 	.db #0x02	; 2
      000468 06                    7423 	.db #0x06	; 6
      000469 06                    7424 	.db #0x06	; 6
      00046A 02                    7425 	.db #0x02	; 2
      00046B 7E                    7426 	.db #0x7e	; 126
      00046C 02                    7427 	.db #0x02	; 2
      00046D 7E                    7428 	.db #0x7e	; 126
      00046E 02                    7429 	.db #0x02	; 2
      00046F 63                    7430 	.db #0x63	; 99	'c'
      000470 55                    7431 	.db #0x55	; 85	'U'
      000471 49                    7432 	.db #0x49	; 73	'I'
      000472 41                    7433 	.db #0x41	; 65	'A'
      000473 63                    7434 	.db #0x63	; 99	'c'
      000474 38                    7435 	.db #0x38	; 56	'8'
      000475 44                    7436 	.db #0x44	; 68	'D'
      000476 44                    7437 	.db #0x44	; 68	'D'
      000477 3C                    7438 	.db #0x3c	; 60
      000478 04                    7439 	.db #0x04	; 4
      000479 40                    7440 	.db #0x40	; 64
      00047A 7E                    7441 	.db #0x7e	; 126
      00047B 20                    7442 	.db #0x20	; 32
      00047C 1E                    7443 	.db #0x1e	; 30
      00047D 20                    7444 	.db #0x20	; 32
      00047E 06                    7445 	.db #0x06	; 6
      00047F 02                    7446 	.db #0x02	; 2
      000480 7E                    7447 	.db #0x7e	; 126
      000481 02                    7448 	.db #0x02	; 2
      000482 02                    7449 	.db #0x02	; 2
      000483 99                    7450 	.db #0x99	; 153
      000484 A5                    7451 	.db #0xa5	; 165
      000485 E7                    7452 	.db #0xe7	; 231
      000486 A5                    7453 	.db #0xa5	; 165
      000487 99                    7454 	.db #0x99	; 153
      000488 1C                    7455 	.db #0x1c	; 28
      000489 2A                    7456 	.db #0x2a	; 42
      00048A 49                    7457 	.db #0x49	; 73	'I'
      00048B 2A                    7458 	.db #0x2a	; 42
      00048C 1C                    7459 	.db #0x1c	; 28
      00048D 4C                    7460 	.db #0x4c	; 76	'L'
      00048E 72                    7461 	.db #0x72	; 114	'r'
      00048F 01                    7462 	.db #0x01	; 1
      000490 72                    7463 	.db #0x72	; 114	'r'
      000491 4C                    7464 	.db #0x4c	; 76	'L'
      000492 30                    7465 	.db #0x30	; 48	'0'
      000493 4A                    7466 	.db #0x4a	; 74	'J'
      000494 4D                    7467 	.db #0x4d	; 77	'M'
      000495 4D                    7468 	.db #0x4d	; 77	'M'
      000496 30                    7469 	.db #0x30	; 48	'0'
      000497 30                    7470 	.db #0x30	; 48	'0'
      000498 48                    7471 	.db #0x48	; 72	'H'
      000499 78                    7472 	.db #0x78	; 120	'x'
      00049A 48                    7473 	.db #0x48	; 72	'H'
      00049B 30                    7474 	.db #0x30	; 48	'0'
      00049C BC                    7475 	.db #0xbc	; 188
      00049D 62                    7476 	.db #0x62	; 98	'b'
      00049E 5A                    7477 	.db #0x5a	; 90	'Z'
      00049F 46                    7478 	.db #0x46	; 70	'F'
      0004A0 3D                    7479 	.db #0x3d	; 61
      0004A1 3E                    7480 	.db #0x3e	; 62
      0004A2 49                    7481 	.db #0x49	; 73	'I'
      0004A3 49                    7482 	.db #0x49	; 73	'I'
      0004A4 49                    7483 	.db #0x49	; 73	'I'
      0004A5 00                    7484 	.db #0x00	; 0
      0004A6 7E                    7485 	.db #0x7e	; 126
      0004A7 01                    7486 	.db #0x01	; 1
      0004A8 01                    7487 	.db #0x01	; 1
      0004A9 01                    7488 	.db #0x01	; 1
      0004AA 7E                    7489 	.db #0x7e	; 126
      0004AB 2A                    7490 	.db #0x2a	; 42
      0004AC 2A                    7491 	.db #0x2a	; 42
      0004AD 2A                    7492 	.db #0x2a	; 42
      0004AE 2A                    7493 	.db #0x2a	; 42
      0004AF 2A                    7494 	.db #0x2a	; 42
      0004B0 44                    7495 	.db #0x44	; 68	'D'
      0004B1 44                    7496 	.db #0x44	; 68	'D'
      0004B2 5F                    7497 	.db #0x5f	; 95
      0004B3 44                    7498 	.db #0x44	; 68	'D'
      0004B4 44                    7499 	.db #0x44	; 68	'D'
      0004B5 40                    7500 	.db #0x40	; 64
      0004B6 51                    7501 	.db #0x51	; 81	'Q'
      0004B7 4A                    7502 	.db #0x4a	; 74	'J'
      0004B8 44                    7503 	.db #0x44	; 68	'D'
      0004B9 40                    7504 	.db #0x40	; 64
      0004BA 40                    7505 	.db #0x40	; 64
      0004BB 44                    7506 	.db #0x44	; 68	'D'
      0004BC 4A                    7507 	.db #0x4a	; 74	'J'
      0004BD 51                    7508 	.db #0x51	; 81	'Q'
      0004BE 40                    7509 	.db #0x40	; 64
      0004BF 00                    7510 	.db #0x00	; 0
      0004C0 00                    7511 	.db #0x00	; 0
      0004C1 FF                    7512 	.db #0xff	; 255
      0004C2 01                    7513 	.db #0x01	; 1
      0004C3 03                    7514 	.db #0x03	; 3
      0004C4 E0                    7515 	.db #0xe0	; 224
      0004C5 80                    7516 	.db #0x80	; 128
      0004C6 FF                    7517 	.db #0xff	; 255
      0004C7 00                    7518 	.db #0x00	; 0
      0004C8 00                    7519 	.db #0x00	; 0
      0004C9 08                    7520 	.db #0x08	; 8
      0004CA 08                    7521 	.db #0x08	; 8
      0004CB 6B                    7522 	.db #0x6b	; 107	'k'
      0004CC 6B                    7523 	.db #0x6b	; 107	'k'
      0004CD 08                    7524 	.db #0x08	; 8
      0004CE 36                    7525 	.db #0x36	; 54	'6'
      0004CF 12                    7526 	.db #0x12	; 18
      0004D0 36                    7527 	.db #0x36	; 54	'6'
      0004D1 24                    7528 	.db #0x24	; 36
      0004D2 36                    7529 	.db #0x36	; 54	'6'
      0004D3 06                    7530 	.db #0x06	; 6
      0004D4 0F                    7531 	.db #0x0f	; 15
      0004D5 09                    7532 	.db #0x09	; 9
      0004D6 0F                    7533 	.db #0x0f	; 15
      0004D7 06                    7534 	.db #0x06	; 6
      0004D8 00                    7535 	.db #0x00	; 0
      0004D9 00                    7536 	.db #0x00	; 0
      0004DA 18                    7537 	.db #0x18	; 24
      0004DB 18                    7538 	.db #0x18	; 24
      0004DC 00                    7539 	.db #0x00	; 0
      0004DD 00                    7540 	.db #0x00	; 0
      0004DE 00                    7541 	.db #0x00	; 0
      0004DF 10                    7542 	.db #0x10	; 16
      0004E0 10                    7543 	.db #0x10	; 16
      0004E1 00                    7544 	.db #0x00	; 0
      0004E2 30                    7545 	.db #0x30	; 48	'0'
      0004E3 40                    7546 	.db #0x40	; 64
      0004E4 FF                    7547 	.db #0xff	; 255
      0004E5 01                    7548 	.db #0x01	; 1
      0004E6 01                    7549 	.db #0x01	; 1
      0004E7 00                    7550 	.db #0x00	; 0
      0004E8 1F                    7551 	.db #0x1f	; 31
      0004E9 01                    7552 	.db #0x01	; 1
      0004EA 01                    7553 	.db #0x01	; 1
      0004EB 1E                    7554 	.db #0x1e	; 30
      0004EC 00                    7555 	.db #0x00	; 0
      0004ED 19                    7556 	.db #0x19	; 25
      0004EE 1D                    7557 	.db #0x1d	; 29
      0004EF 17                    7558 	.db #0x17	; 23
      0004F0 12                    7559 	.db #0x12	; 18
      0004F1 00                    7560 	.db #0x00	; 0
      0004F2 3C                    7561 	.db #0x3c	; 60
      0004F3 3C                    7562 	.db #0x3c	; 60
      0004F4 3C                    7563 	.db #0x3c	; 60
      0004F5 3C                    7564 	.db #0x3c	; 60
      0004F6 00                    7565 	.db #0x00	; 0
      0004F7 00                    7566 	.db #0x00	; 0
      0004F8 00                    7567 	.db #0x00	; 0
      0004F9 00                    7568 	.db #0x00	; 0
      0004FA 00                    7569 	.db #0x00	; 0
      0004FB                       7570 _keypad:
      0004FB 31                    7571 	.db #0x31	; 49	'1'
      0004FC 34                    7572 	.db #0x34	; 52	'4'
      0004FD 37                    7573 	.db #0x37	; 55	'7'
      0004FE 46                    7574 	.db #0x46	; 70	'F'
      0004FF 32                    7575 	.db #0x32	; 50	'2'
      000500 35                    7576 	.db #0x35	; 53	'5'
      000501 38                    7577 	.db #0x38	; 56	'8'
      000502 30                    7578 	.db #0x30	; 48	'0'
      000503 33                    7579 	.db #0x33	; 51	'3'
      000504 36                    7580 	.db #0x36	; 54	'6'
      000505 39                    7581 	.db #0x39	; 57	'9'
      000506 45                    7582 	.db #0x45	; 69	'E'
      000507 41                    7583 	.db #0x41	; 65	'A'
      000508 42                    7584 	.db #0x42	; 66	'B'
      000509 43                    7585 	.db #0x43	; 67	'C'
      00050A 44                    7586 	.db #0x44	; 68	'D'
                                   7587 	.area CONST   (CODE)
      00050B                       7588 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  7589 	.ascii "Welcome"
      000512 0A                    7590 	.db 0x0a
      000513 00                    7591 	.db 0x00
                                   7592 	.area CSEG    (CODE)
                                   7593 	.area CONST   (CODE)
      000514                       7594 ___str_1:
      000514 45 43 45 4E 2D 34 33  7595 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    7596 	.db 0x0a
      00051E 00                    7597 	.db 0x00
                                   7598 	.area CSEG    (CODE)
                                   7599 	.area CONST   (CODE)
      00051F                       7600 ___str_2:
      00051F 52 6F 74 61 74 69 6F  7601 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    7602 	.db 0x00
                                   7603 	.area CSEG    (CODE)
                                   7604 	.area CONST   (CODE)
      00052A                       7605 ___str_3:
      00052A 52 6F 74 61 74 69 6F  7606 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    7607 	.db 0x00
                                   7608 	.area CSEG    (CODE)
                                   7609 	.area CONST   (CODE)
      000535                       7610 ___str_4:
      000535 52 6F 74 61 74 69 6F  7611 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    7612 	.db 0x00
                                   7613 	.area CSEG    (CODE)
                                   7614 	.area CONST   (CODE)
      000540                       7615 ___str_5:
      000540 52 6F 74 61 74 69 6F  7616 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    7617 	.db 0x00
                                   7618 	.area CSEG    (CODE)
                                   7619 	.area CONST   (CODE)
      00054B                       7620 ___str_6:
      00054B 3A 20                 7621 	.ascii ": "
      00054D 00                    7622 	.db 0x00
                                   7623 	.area CSEG    (CODE)
                                   7624 	.area CONST   (CODE)
      00054E                       7625 ___str_7:
      00054E 45 6E 74 65 72 20 73  7626 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      000562 0A                    7627 	.db 0x0a
      000563 00                    7628 	.db 0x00
                                   7629 	.area CSEG    (CODE)
                                   7630 	.area CONST   (CODE)
      000564                       7631 ___str_8:
      000564 45 6E 74 65 72 20 64  7632 	.ascii "Enter data type"
             61 74 61 20 74 79 70
             65
      000573 0A                    7633 	.db 0x0a
      000574 00                    7634 	.db 0x00
                                   7635 	.area CSEG    (CODE)
                                   7636 	.area CONST   (CODE)
      000575                       7637 ___str_9:
      000575 42 2D 42 79 74 65 2C  7638 	.ascii "B-Byte, A-Word,"
             20 41 2D 57 6F 72 64
             2C
      000584 0A                    7639 	.db 0x0a
      000585 00                    7640 	.db 0x00
                                   7641 	.area CSEG    (CODE)
                                   7642 	.area CONST   (CODE)
      000586                       7643 ___str_10:
      000586 44 2D 44 6F 75 62 6C  7644 	.ascii "D-Double word"
             65 20 77 6F 72 64
      000593 0A                    7645 	.db 0x0a
      000594 00                    7646 	.db 0x00
                                   7647 	.area CSEG    (CODE)
                                   7648 	.area CONST   (CODE)
      000595                       7649 ___str_11:
      000595 42 79 74 65           7650 	.ascii "Byte"
      000599 0A                    7651 	.db 0x0a
      00059A 00                    7652 	.db 0x00
                                   7653 	.area CSEG    (CODE)
                                   7654 	.area CONST   (CODE)
      00059B                       7655 ___str_12:
      00059B 57 6F 72 64           7656 	.ascii "Word"
      00059F 0A                    7657 	.db 0x0a
      0005A0 00                    7658 	.db 0x00
                                   7659 	.area CSEG    (CODE)
                                   7660 	.area CONST   (CODE)
      0005A1                       7661 ___str_13:
      0005A1 44 6F 75 62 6C 65 20  7662 	.ascii "Double word"
             77 6F 72 64
      0005AC 0A                    7663 	.db 0x0a
      0005AD 00                    7664 	.db 0x00
                                   7665 	.area CSEG    (CODE)
                                   7666 	.area CONST   (CODE)
      0005AE                       7667 ___str_14:
      0005AE 45 6E 74 65 72 20 62  7668 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0005BF 0A                    7669 	.db 0x0a
      0005C0 00                    7670 	.db 0x00
                                   7671 	.area CSEG    (CODE)
                                   7672 	.area CONST   (CODE)
      0005C1                       7673 ___str_15:
      0005C1 50 72 65 73 73 20 41  7674 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0005D5 0A                    7675 	.db 0x0a
      0005D6 00                    7676 	.db 0x00
                                   7677 	.area CSEG    (CODE)
                                   7678 	.area CONST   (CODE)
      0005D7                       7679 ___str_16:
      0005D7 50 72 65 73 73 20 42  7680 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0005E7 0A                    7681 	.db 0x0a
      0005E8 00                    7682 	.db 0x00
                                   7683 	.area CSEG    (CODE)
                                   7684 	.area CONST   (CODE)
      0005E9                       7685 ___str_17:
      0005E9 50 72 65 73 73 20 31  7686 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0005F9 0A                    7687 	.db 0x0a
      0005FA 00                    7688 	.db 0x00
                                   7689 	.area CSEG    (CODE)
                                   7690 	.area CONST   (CODE)
      0005FB                       7691 ___str_18:
      0005FB 45 6E 74 65 72 20 62  7692 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00060E 0A                    7693 	.db 0x0a
      00060F 00                    7694 	.db 0x00
                                   7695 	.area CSEG    (CODE)
                                   7696 	.area CONST   (CODE)
      000610                       7697 ___str_19:
      000610 49 6E 20 70 72 6F 67  7698 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00061E 0A                    7699 	.db 0x0a
      00061F 00                    7700 	.db 0x00
                                   7701 	.area CSEG    (CODE)
                                   7702 	.area CONST   (CODE)
      000620                       7703 ___str_20:
      000620 4D 65 6D 6F 72 79 20  7704 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000633 0A                    7705 	.db 0x0a
      000634 00                    7706 	.db 0x00
                                   7707 	.area CSEG    (CODE)
                                   7708 	.area CONST   (CODE)
      000635                       7709 ___str_21:
      000635 53 75 63 63 65 73 73  7710 	.ascii "Success!"
             21
      00063D 0A                    7711 	.db 0x0a
      00063E 00                    7712 	.db 0x00
                                   7713 	.area CSEG    (CODE)
                                   7714 	.area CONST   (CODE)
      00063F                       7715 ___str_22:
      00063F 45 6E 74 65 72 20 62  7716 	.ascii "Enter byte"
             79 74 65
      000649 0A                    7717 	.db 0x0a
      00064A 00                    7718 	.db 0x00
                                   7719 	.area CSEG    (CODE)
                                   7720 	.area CONST   (CODE)
      00064B                       7721 ___str_23:
      00064B 45 6E 74 65 72 20 61  7722 	.ascii "Enter address"
             64 64 72 65 73 73
      000658 0A                    7723 	.db 0x0a
      000659 00                    7724 	.db 0x00
                                   7725 	.area CSEG    (CODE)
                                   7726 	.area CONST   (CODE)
      00065A                       7727 ___str_24:
      00065A 49 6E 20 70 72 6F 67  7728 	.ascii "In progress"
             72 65 73 73
      000665 0A                    7729 	.db 0x0a
      000666 00                    7730 	.db 0x00
                                   7731 	.area CSEG    (CODE)
                                   7732 	.area CONST   (CODE)
      000667                       7733 ___str_25:
      000667 20 66 65 74 63 68 65  7734 	.ascii " fetched!"
             64 21
      000670 0A                    7735 	.db 0x0a
      000671 53 75 63 63 65 73 73  7736 	.ascii "Success!"
             21
      000679 0A                    7737 	.db 0x0a
      00067A 00                    7738 	.db 0x00
                                   7739 	.area CSEG    (CODE)
                                   7740 	.area CONST   (CODE)
      00067B                       7741 ___str_26:
      00067B 43 68 65 63 6B 20 66  7742 	.ascii "Check failed"
             61 69 6C 65 64
      000687 0A                    7743 	.db 0x0a
      000688 00                    7744 	.db 0x00
                                   7745 	.area CSEG    (CODE)
                                   7746 	.area CONST   (CODE)
      000689                       7747 ___str_27:
      000689 45 6E 74 65 72 20 74  7748 	.ascii "Enter target address:"
             61 72 67 65 74 20 61
             64 64 72 65 73 73 3A
      00069E 0A                    7749 	.db 0x0a
      00069F 00                    7750 	.db 0x00
                                   7751 	.area CSEG    (CODE)
                                   7752 	.area CONST   (CODE)
      0006A0                       7753 ___str_28:
      0006A0 45 6E 74 65 72 20 73  7754 	.ascii "Enter size:"
             69 7A 65 3A
      0006AB 0A                    7755 	.db 0x0a
      0006AC 00                    7756 	.db 0x00
                                   7757 	.area CSEG    (CODE)
                                   7758 	.area CONST   (CODE)
      0006AD                       7759 ___str_29:
      0006AD 4D 6F 76 65 20 69 6E  7760 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      0006C0 0A                    7761 	.db 0x0a
      0006C1 00                    7762 	.db 0x00
                                   7763 	.area CSEG    (CODE)
                                   7764 	.area CONST   (CODE)
      0006C2                       7765 ___str_30:
      0006C2 44 6F 6E 65 21        7766 	.ascii "Done!"
      0006C7 0A                    7767 	.db 0x0a
      0006C8 00                    7768 	.db 0x00
                                   7769 	.area CSEG    (CODE)
                                   7770 	.area CONST   (CODE)
      0006C9                       7771 ___str_31:
      0006C9 45 6E 74 65 72 20 6E  7772 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      0006D8 0A                    7773 	.db 0x0a
      0006D9 00                    7774 	.db 0x00
                                   7775 	.area CSEG    (CODE)
                                   7776 	.area CONST   (CODE)
      0006DA                       7777 ___str_32:
      0006DA 45 6E 74 65 72 20 61  7778 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      0006E8 0A                    7779 	.db 0x0a
      0006E9 00                    7780 	.db 0x00
                                   7781 	.area CSEG    (CODE)
                                   7782 	.area CONST   (CODE)
      0006EA                       7783 ___str_33:
      0006EA 50 72 65 73 73 20 32  7784 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      0006FF 0A                    7785 	.db 0x0a
      000700 00                    7786 	.db 0x00
                                   7787 	.area CSEG    (CODE)
                                   7788 	.area CONST   (CODE)
      000701                       7789 ___str_34:
      000701 50 72 65 73 73 20 33  7790 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      00071D 0A                    7791 	.db 0x0a
      00071E 00                    7792 	.db 0x00
                                   7793 	.area CSEG    (CODE)
                                   7794 	.area CONST   (CODE)
      00071F                       7795 ___str_35:
      00071F 4E 6F 20 6D 61 74 63  7796 	.ascii "No matches found"
             68 65 73 20 66 6F 75
             6E 64
      00072F 0A                    7797 	.db 0x0a
      000730 00                    7798 	.db 0x00
                                   7799 	.area CSEG    (CODE)
                                   7800 	.area CONST   (CODE)
      000731                       7801 ___str_36:
      000731 20 6D 61 74 63 68 65  7802 	.ascii " matches found"
             73 20 66 6F 75 6E 64
      00073F 0A                    7803 	.db 0x0a
      000740 00                    7804 	.db 0x00
                                   7805 	.area CSEG    (CODE)
                                   7806 	.area CONST   (CODE)
      000741                       7807 ___str_37:
      000741 45 6E 74 65 72 20 62  7808 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      000755 0A                    7809 	.db 0x0a
      000756 00                    7810 	.db 0x00
                                   7811 	.area CSEG    (CODE)
                                   7812 	.area CONST   (CODE)
      000757                       7813 ___str_38:
      000757 54 65 6D 70 65 72 61  7814 	.ascii "Temperature: "
             74 75 72 65 3A 20
      000764 00                    7815 	.db 0x00
                                   7816 	.area CSEG    (CODE)
                                   7817 	.area CONST   (CODE)
      000765                       7818 ___str_39:
      000765 50 72 65 73 73 20 6B  7819 	.ascii "Press key to refresh"
             65 79 20 74 6F 20 72
             65 66 72 65 73 68
      000779 0A                    7820 	.db 0x0a
      00077A 00                    7821 	.db 0x00
                                   7822 	.area CSEG    (CODE)
                                   7823 	.area CONST   (CODE)
      00077B                       7824 ___str_40:
      00077B 4C 69 67 68 74 20 6C  7825 	.ascii "Light level: "
             65 76 65 6C 3A 20
      000788 00                    7826 	.db 0x00
                                   7827 	.area CSEG    (CODE)
                                   7828 	.area CONST   (CODE)
      000789                       7829 ___str_41:
      000789 55 41 52 54 20 46 72  7830 	.ascii "UART Free type, 0 for menu:"
             65 65 20 74 79 70 65
             2C 20 30 20 66 6F 72
             20 6D 65 6E 75 3A
      0007A4 0A                    7831 	.db 0x0a
      0007A5 00                    7832 	.db 0x00
                                   7833 	.area CSEG    (CODE)
                                   7834 	.area CONST   (CODE)
      0007A6                       7835 ___str_42:
      0007A6 42 72 61 6E 64 6F 6E  7836 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      0007B3 0A                    7837 	.db 0x0a
      0007B4 00                    7838 	.db 0x00
                                   7839 	.area CSEG    (CODE)
                                   7840 	.area CONST   (CODE)
      0007B5                       7841 ___str_43:
      0007B5 45 43 45 4E 20 34 33  7842 	.ascii "ECEN 4330"
             33 30
      0007BE 0A                    7843 	.db 0x0a
      0007BF 00                    7844 	.db 0x00
                                   7845 	.area CSEG    (CODE)
                                   7846 	.area CONST   (CODE)
      0007C0                       7847 ___str_44:
      0007C0 31 3A 20 42 61 73 69  7848 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      0007CE 0A                    7849 	.db 0x0a
      0007CF 00                    7850 	.db 0x00
                                   7851 	.area CSEG    (CODE)
                                   7852 	.area CONST   (CODE)
      0007D0                       7853 ___str_45:
      0007D0 32 3A 20 44 75 6D 70  7854 	.ascii "2: Dump"
      0007D7 0A                    7855 	.db 0x0a
      0007D8 00                    7856 	.db 0x00
                                   7857 	.area CSEG    (CODE)
                                   7858 	.area CONST   (CODE)
      0007D9                       7859 ___str_46:
      0007D9 33 3A 20 43 68 65 63  7860 	.ascii "3: Check"
             6B
      0007E1 0A                    7861 	.db 0x0a
      0007E2 00                    7862 	.db 0x00
                                   7863 	.area CSEG    (CODE)
                                   7864 	.area CONST   (CODE)
      0007E3                       7865 ___str_47:
      0007E3 41 3A 20 4D 6F 76 65  7866 	.ascii "A: Move"
      0007EA 0A                    7867 	.db 0x0a
      0007EB 00                    7868 	.db 0x00
                                   7869 	.area CSEG    (CODE)
                                   7870 	.area CONST   (CODE)
      0007EC                       7871 ___str_48:
      0007EC 34 3A 20 45 64 69 74  7872 	.ascii "4: Edit"
      0007F3 0A                    7873 	.db 0x0a
      0007F4 00                    7874 	.db 0x00
                                   7875 	.area CSEG    (CODE)
                                   7876 	.area CONST   (CODE)
      0007F5                       7877 ___str_49:
      0007F5 35 3A 20 46 69 6E 64  7878 	.ascii "5: Find"
      0007FC 0A                    7879 	.db 0x0a
      0007FD 00                    7880 	.db 0x00
                                   7881 	.area CSEG    (CODE)
                                   7882 	.area CONST   (CODE)
      0007FE                       7883 ___str_50:
      0007FE 36 3A 20 43 6F 75 6E  7884 	.ascii "6: Count"
             74
      000806 0A                    7885 	.db 0x0a
      000807 00                    7886 	.db 0x00
                                   7887 	.area CSEG    (CODE)
                                   7888 	.area CONST   (CODE)
      000808                       7889 ___str_51:
      000808 42 3A 20 54 65 6D 70  7890 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      000816 0A                    7891 	.db 0x0a
      000817 00                    7892 	.db 0x00
                                   7893 	.area CSEG    (CODE)
                                   7894 	.area CONST   (CODE)
      000818                       7895 ___str_52:
      000818 37 3A 20 4C 69 67 68  7896 	.ascii "7: Light"
             74
      000820 0A                    7897 	.db 0x0a
      000821 00                    7898 	.db 0x00
                                   7899 	.area CSEG    (CODE)
                                   7900 	.area CONST   (CODE)
      000822                       7901 ___str_53:
      000822 38 3A 20 55 41 52 54  7902 	.ascii "8: UART free type"
             20 66 72 65 65 20 74
             79 70 65
      000833 0A                    7903 	.db 0x0a
      000834 00                    7904 	.db 0x00
                                   7905 	.area CSEG    (CODE)
                                   7906 	.area XINIT   (CODE)
                                   7907 	.area CABS    (ABS,CODE)
