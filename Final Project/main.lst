                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _basic
                                     23 	.globl _writeSomeLines
                                     24 	.globl _convertAsciiHex
                                     25 	.globl _write
                                     26 	.globl _drawChar
                                     27 	.globl _setRotation
                                     28 	.globl _iowrite8
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _PS
                                     38 	.globl _PT1
                                     39 	.globl _PX1
                                     40 	.globl _PT0
                                     41 	.globl _PX0
                                     42 	.globl _RD
                                     43 	.globl _WR
                                     44 	.globl _T1
                                     45 	.globl _T0
                                     46 	.globl _INT1
                                     47 	.globl _INT0
                                     48 	.globl _TXD
                                     49 	.globl _RXD
                                     50 	.globl _P3_7
                                     51 	.globl _P3_6
                                     52 	.globl _P3_5
                                     53 	.globl _P3_4
                                     54 	.globl _P3_3
                                     55 	.globl _P3_2
                                     56 	.globl _P3_1
                                     57 	.globl _P3_0
                                     58 	.globl _EA
                                     59 	.globl _ES
                                     60 	.globl _ET1
                                     61 	.globl _EX1
                                     62 	.globl _ET0
                                     63 	.globl _EX0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _SM0
                                     73 	.globl _SM1
                                     74 	.globl _SM2
                                     75 	.globl _REN
                                     76 	.globl _TB8
                                     77 	.globl _RB8
                                     78 	.globl _TI
                                     79 	.globl _RI
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _TF1
                                     89 	.globl _TR1
                                     90 	.globl _TF0
                                     91 	.globl _TR0
                                     92 	.globl _IE1
                                     93 	.globl _IT1
                                     94 	.globl _IE0
                                     95 	.globl _IT0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _B
                                    105 	.globl _ACC
                                    106 	.globl _PSW
                                    107 	.globl _IP
                                    108 	.globl _P3
                                    109 	.globl _IE
                                    110 	.globl _P2
                                    111 	.globl _SBUF
                                    112 	.globl _SCON
                                    113 	.globl _P1
                                    114 	.globl _TH1
                                    115 	.globl _TH0
                                    116 	.globl _TL1
                                    117 	.globl _TL0
                                    118 	.globl _TMOD
                                    119 	.globl _TCON
                                    120 	.globl _PCON
                                    121 	.globl _DPH
                                    122 	.globl _DPL
                                    123 	.globl _SP
                                    124 	.globl _P0
                                    125 	.globl _printFind_PARM_4
                                    126 	.globl _printFind_PARM_3
                                    127 	.globl _printFind_PARM_2
                                    128 	.globl _dumpPage_PARM_3
                                    129 	.globl _dumpPage_PARM_2
                                    130 	.globl _drawChar_PARM_6
                                    131 	.globl _drawChar_PARM_5
                                    132 	.globl _drawChar_PARM_4
                                    133 	.globl _drawChar_PARM_3
                                    134 	.globl _drawChar_PARM_2
                                    135 	.globl _fillRect_PARM_5
                                    136 	.globl _fillRect_PARM_4
                                    137 	.globl _fillRect_PARM_3
                                    138 	.globl _fillRect_PARM_2
                                    139 	.globl _testCircles_PARM_2
                                    140 	.globl _drawCircle_PARM_4
                                    141 	.globl _drawCircle_PARM_3
                                    142 	.globl _drawCircle_PARM_2
                                    143 	.globl _drawPixel_PARM_3
                                    144 	.globl _drawPixel_PARM_2
                                    145 	.globl __height
                                    146 	.globl __width
                                    147 	.globl _textbgcolor
                                    148 	.globl _textcolor
                                    149 	.globl _rotation
                                    150 	.globl _textsize
                                    151 	.globl _cursor_y
                                    152 	.globl _cursor_x
                                    153 	.globl _read_ram_address
                                    154 	.globl _light_address
                                    155 	.globl _temp_address
                                    156 	.globl _seg7_address
                                    157 	.globl _lcd_address
                                    158 	.globl _rowloc
                                    159 	.globl _colloc
                                    160 	.globl _delay
                                    161 	.globl _writeRegister8
                                    162 	.globl _writeRegister16
                                    163 	.globl _setCursor
                                    164 	.globl _setTextColor
                                    165 	.globl _setTextSize
                                    166 	.globl _setAddress
                                    167 	.globl _TFT_LCD_INIT
                                    168 	.globl _drawPixel
                                    169 	.globl _drawCircle
                                    170 	.globl _testCircles
                                    171 	.globl _fillRect
                                    172 	.globl _fillScreen
                                    173 	.globl _LCD_string_write
                                    174 	.globl _testRAM
                                    175 	.globl _freeType
                                    176 	.globl _keyDetect
                                    177 	.globl _reverse
                                    178 	.globl _asciiToDec
                                    179 	.globl _asciiToHex
                                    180 	.globl _getAddress
                                    181 	.globl _getByte
                                    182 	.globl _dumpPage
                                    183 	.globl _dump
                                    184 	.globl _check
                                    185 	.globl _move
                                    186 	.globl _editByte
                                    187 	.globl _edit
                                    188 	.globl _printFind
                                    189 	.globl _find
                                    190 	.globl _count
                                    191 	.globl _readTemp
                                    192 	.globl _readLight
                                    193 	.globl _displayTemp
                                    194 	.globl _displayLight
                                    195 	.globl _temperature
                                    196 	.globl _light
                                    197 ;--------------------------------------------------------
                                    198 ; special function registers
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _P0	=	0x0080
                           000081   203 _SP	=	0x0081
                           000082   204 _DPL	=	0x0082
                           000083   205 _DPH	=	0x0083
                           000087   206 _PCON	=	0x0087
                           000088   207 _TCON	=	0x0088
                           000089   208 _TMOD	=	0x0089
                           00008A   209 _TL0	=	0x008a
                           00008B   210 _TL1	=	0x008b
                           00008C   211 _TH0	=	0x008c
                           00008D   212 _TH1	=	0x008d
                           000090   213 _P1	=	0x0090
                           000098   214 _SCON	=	0x0098
                           000099   215 _SBUF	=	0x0099
                           0000A0   216 _P2	=	0x00a0
                           0000A8   217 _IE	=	0x00a8
                           0000B0   218 _P3	=	0x00b0
                           0000B8   219 _IP	=	0x00b8
                           0000D0   220 _PSW	=	0x00d0
                           0000E0   221 _ACC	=	0x00e0
                           0000F0   222 _B	=	0x00f0
                                    223 ;--------------------------------------------------------
                                    224 ; special function bits
                                    225 ;--------------------------------------------------------
                                    226 	.area RSEG    (ABS,DATA)
      000000                        227 	.org 0x0000
                           000080   228 _P0_0	=	0x0080
                           000081   229 _P0_1	=	0x0081
                           000082   230 _P0_2	=	0x0082
                           000083   231 _P0_3	=	0x0083
                           000084   232 _P0_4	=	0x0084
                           000085   233 _P0_5	=	0x0085
                           000086   234 _P0_6	=	0x0086
                           000087   235 _P0_7	=	0x0087
                           000088   236 _IT0	=	0x0088
                           000089   237 _IE0	=	0x0089
                           00008A   238 _IT1	=	0x008a
                           00008B   239 _IE1	=	0x008b
                           00008C   240 _TR0	=	0x008c
                           00008D   241 _TF0	=	0x008d
                           00008E   242 _TR1	=	0x008e
                           00008F   243 _TF1	=	0x008f
                           000090   244 _P1_0	=	0x0090
                           000091   245 _P1_1	=	0x0091
                           000092   246 _P1_2	=	0x0092
                           000093   247 _P1_3	=	0x0093
                           000094   248 _P1_4	=	0x0094
                           000095   249 _P1_5	=	0x0095
                           000096   250 _P1_6	=	0x0096
                           000097   251 _P1_7	=	0x0097
                           000098   252 _RI	=	0x0098
                           000099   253 _TI	=	0x0099
                           00009A   254 _RB8	=	0x009a
                           00009B   255 _TB8	=	0x009b
                           00009C   256 _REN	=	0x009c
                           00009D   257 _SM2	=	0x009d
                           00009E   258 _SM1	=	0x009e
                           00009F   259 _SM0	=	0x009f
                           0000A0   260 _P2_0	=	0x00a0
                           0000A1   261 _P2_1	=	0x00a1
                           0000A2   262 _P2_2	=	0x00a2
                           0000A3   263 _P2_3	=	0x00a3
                           0000A4   264 _P2_4	=	0x00a4
                           0000A5   265 _P2_5	=	0x00a5
                           0000A6   266 _P2_6	=	0x00a6
                           0000A7   267 _P2_7	=	0x00a7
                           0000A8   268 _EX0	=	0x00a8
                           0000A9   269 _ET0	=	0x00a9
                           0000AA   270 _EX1	=	0x00aa
                           0000AB   271 _ET1	=	0x00ab
                           0000AC   272 _ES	=	0x00ac
                           0000AF   273 _EA	=	0x00af
                           0000B0   274 _P3_0	=	0x00b0
                           0000B1   275 _P3_1	=	0x00b1
                           0000B2   276 _P3_2	=	0x00b2
                           0000B3   277 _P3_3	=	0x00b3
                           0000B4   278 _P3_4	=	0x00b4
                           0000B5   279 _P3_5	=	0x00b5
                           0000B6   280 _P3_6	=	0x00b6
                           0000B7   281 _P3_7	=	0x00b7
                           0000B0   282 _RXD	=	0x00b0
                           0000B1   283 _TXD	=	0x00b1
                           0000B2   284 _INT0	=	0x00b2
                           0000B3   285 _INT1	=	0x00b3
                           0000B4   286 _T0	=	0x00b4
                           0000B5   287 _T1	=	0x00b5
                           0000B6   288 _WR	=	0x00b6
                           0000B7   289 _RD	=	0x00b7
                           0000B8   290 _PX0	=	0x00b8
                           0000B9   291 _PT0	=	0x00b9
                           0000BA   292 _PX1	=	0x00ba
                           0000BB   293 _PT1	=	0x00bb
                           0000BC   294 _PS	=	0x00bc
                           0000D0   295 _P	=	0x00d0
                           0000D1   296 _F1	=	0x00d1
                           0000D2   297 _OV	=	0x00d2
                           0000D3   298 _RS0	=	0x00d3
                           0000D4   299 _RS1	=	0x00d4
                           0000D5   300 _F0	=	0x00d5
                           0000D6   301 _AC	=	0x00d6
                           0000D7   302 _CY	=	0x00d7
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable register banks
                                    305 ;--------------------------------------------------------
                                    306 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        307 	.ds 8
                                    308 ;--------------------------------------------------------
                                    309 ; internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area DSEG    (DATA)
      000000                        312 _colloc::
      000000                        313 	.ds 1
      000001                        314 _rowloc::
      000001                        315 	.ds 1
      000002                        316 _lcd_address::
      000002                        317 	.ds 2
      000004                        318 _seg7_address::
      000004                        319 	.ds 2
      000006                        320 _temp_address::
      000006                        321 	.ds 2
      000008                        322 _light_address::
      000008                        323 	.ds 2
      00000A                        324 _read_ram_address::
      00000A                        325 	.ds 2
      00000C                        326 _cursor_x::
      00000C                        327 	.ds 2
      00000E                        328 _cursor_y::
      00000E                        329 	.ds 2
      000010                        330 _textsize::
      000010                        331 	.ds 1
      000011                        332 _rotation::
      000011                        333 	.ds 1
      000012                        334 _textcolor::
      000012                        335 	.ds 2
      000014                        336 _textbgcolor::
      000014                        337 	.ds 2
      000016                        338 __width::
      000016                        339 	.ds 2
      000018                        340 __height::
      000018                        341 	.ds 2
      00001A                        342 _drawPixel_PARM_2:
      00001A                        343 	.ds 2
      00001C                        344 _drawPixel_PARM_3:
      00001C                        345 	.ds 2
      00001E                        346 _drawCircle_PARM_2:
      00001E                        347 	.ds 2
      000020                        348 _drawCircle_PARM_3:
      000020                        349 	.ds 2
      000022                        350 _drawCircle_PARM_4:
      000022                        351 	.ds 2
      000024                        352 _drawCircle_x0_65536_103:
      000024                        353 	.ds 2
      000026                        354 _drawCircle_sloc0_1_0:
      000026                        355 	.ds 2
      000028                        356 _drawCircle_sloc1_1_0:
      000028                        357 	.ds 2
      00002A                        358 _drawCircle_sloc2_1_0:
      00002A                        359 	.ds 2
      00002C                        360 _drawCircle_sloc3_1_0:
      00002C                        361 	.ds 2
      00002E                        362 _drawCircle_sloc4_1_0:
      00002E                        363 	.ds 2
      000030                        364 _testCircles_PARM_2:
      000030                        365 	.ds 2
      000032                        366 _testCircles_radius_65536_107:
      000032                        367 	.ds 1
      000033                        368 _testCircles_sloc0_1_0:
      000033                        369 	.ds 2
      000035                        370 _fillRect_PARM_2:
      000035                        371 	.ds 2
      000037                        372 _fillRect_PARM_3:
      000037                        373 	.ds 2
      000039                        374 _fillRect_PARM_4:
      000039                        375 	.ds 2
      00003B                        376 _fillRect_PARM_5:
      00003B                        377 	.ds 2
      00003D                        378 _drawChar_PARM_2:
      00003D                        379 	.ds 2
      00003F                        380 _drawChar_PARM_3:
      00003F                        381 	.ds 1
      000040                        382 _drawChar_PARM_4:
      000040                        383 	.ds 2
      000042                        384 _drawChar_PARM_5:
      000042                        385 	.ds 2
      000044                        386 _drawChar_PARM_6:
      000044                        387 	.ds 1
      000045                        388 _drawChar_sloc1_1_0:
      000045                        389 	.ds 2
      000047                        390 _drawChar_sloc2_1_0:
      000047                        391 	.ds 2
      000049                        392 _drawChar_sloc3_1_0:
      000049                        393 	.ds 1
      00004A                        394 _drawChar_sloc4_1_0:
      00004A                        395 	.ds 1
      00004B                        396 _drawChar_sloc5_1_0:
      00004B                        397 	.ds 1
      00004C                        398 _dumpPage_ramAddress_65537_233:
      00004C                        399 	.ds 2
      00004E                        400 _dumpPage_sloc0_1_0:
      00004E                        401 	.ds 2
      000050                        402 _dumpPage_sloc1_1_0:
      000050                        403 	.ds 1
      000051                        404 _dump_sloc0_1_0:
      000051                        405 	.ds 1
      000052                        406 _dump_sloc1_1_0:
      000052                        407 	.ds 2
      000054                        408 _move_target_65537_269:
      000054                        409 	.ds 2
      000056                        410 _find_sloc0_1_0:
      000056                        411 	.ds 2
      000058                        412 _find_sloc1_1_0:
      000058                        413 	.ds 2
      00005A                        414 _find_sloc2_1_0:
      00005A                        415 	.ds 1
      00005B                        416 _count_sloc0_1_0:
      00005B                        417 	.ds 1
      00005C                        418 _count_sloc1_1_0:
      00005C                        419 	.ds 1
      00005D                        420 _count_sloc2_1_0:
      00005D                        421 	.ds 1
                                    422 ;--------------------------------------------------------
                                    423 ; overlayable items in internal ram
                                    424 ;--------------------------------------------------------
                                    425 	.area	OSEG    (OVR,DATA)
      000000                        426 _iowrite8_PARM_2:
      000000                        427 	.ds 1
                                    428 	.area	OSEG    (OVR,DATA)
                                    429 	.area	OSEG    (OVR,DATA)
      000000                        430 _writeRegister8_PARM_2:
      000000                        431 	.ds 1
                                    432 	.area	OSEG    (OVR,DATA)
      000000                        433 _writeRegister16_PARM_2:
      000000                        434 	.ds 2
                                    435 	.area	OSEG    (OVR,DATA)
      000000                        436 _setCursor_PARM_2:
      000000                        437 	.ds 2
                                    438 	.area	OSEG    (OVR,DATA)
      000000                        439 _setTextColor_PARM_2:
      000000                        440 	.ds 2
                                    441 	.area	OSEG    (OVR,DATA)
                                    442 	.area	OSEG    (OVR,DATA)
      000000                        443 _setAddress_PARM_2:
      000000                        444 	.ds 2
      000002                        445 _setAddress_PARM_3:
      000002                        446 	.ds 2
      000004                        447 _setAddress_PARM_4:
      000004                        448 	.ds 2
                                    449 	.area	OSEG    (OVR,DATA)
                                    450 	.area	OSEG    (OVR,DATA)
                                    451 	.area	OSEG    (OVR,DATA)
                                    452 	.area	OSEG    (OVR,DATA)
                                    453 ;--------------------------------------------------------
                                    454 ; Stack segment in internal ram
                                    455 ;--------------------------------------------------------
                                    456 	.area	SSEG
      000000                        457 __start__stack:
      000000                        458 	.ds	1
                                    459 
                                    460 ;--------------------------------------------------------
                                    461 ; indirectly addressable internal ram data
                                    462 ;--------------------------------------------------------
                                    463 	.area ISEG    (DATA)
                                    464 ;--------------------------------------------------------
                                    465 ; absolute internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area IABS    (ABS,DATA)
                                    468 	.area IABS    (ABS,DATA)
                                    469 ;--------------------------------------------------------
                                    470 ; bit data
                                    471 ;--------------------------------------------------------
                                    472 	.area BSEG    (BIT)
      000000                        473 _drawChar_sloc0_1_0:
      000000                        474 	.ds 1
      000001                        475 _convertAsciiHex_sloc0_1_0:
      000001                        476 	.ds 1
                                    477 ;--------------------------------------------------------
                                    478 ; paged external ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area PSEG    (PAG,XDATA)
                                    481 ;--------------------------------------------------------
                                    482 ; external ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area XSEG    (XDATA)
      000000                        485 _drawCircle_f_65536_104:
      000000                        486 	.ds 2
      000002                        487 _testCircles_x_65536_108:
      000002                        488 	.ds 2
      000004                        489 _testCircles_y_65536_108:
      000004                        490 	.ds 2
      000006                        491 _drawChar_line_196609_151:
      000006                        492 	.ds 1
      000007                        493 _freeType_count_65536_176:
      000007                        494 	.ds 1
      000008                        495 _reverse_rev_65536_194:
      000008                        496 	.ds 2
      00000A                        497 _reverse_val_65536_194:
      00000A                        498 	.ds 2
      00000C                        499 _asciiToDec_val_65536_197:
      00000C                        500 	.ds 1
      00000D                        501 _asciiToDec_id_65536_197:
      00000D                        502 	.ds 2
      00000F                        503 _asciiToHex_val_65536_200:
      00000F                        504 	.ds 1
      000010                        505 _asciiToHex_store_65536_200:
      000010                        506 	.ds 2
      000012                        507 _getAddress_address_65536_225:
      000012                        508 	.ds 2
      000014                        509 _getByte_byte_65536_228:
      000014                        510 	.ds 1
      000015                        511 _dumpPage_PARM_2:
      000015                        512 	.ds 1
      000016                        513 _dumpPage_PARM_3:
      000016                        514 	.ds 1
      000017                        515 _dumpPage_start_65536_231:
      000017                        516 	.ds 2
      000019                        517 _dumpPage_i_65537_233:
      000019                        518 	.ds 2
      00001B                        519 _dumpPage_data_65537_233:
      00001B                        520 	.ds 1
      00001C                        521 _dump_type_65537_239:
      00001C                        522 	.ds 1
      00001D                        523 _dump_page_65537_239:
      00001D                        524 	.ds 1
      00001E                        525 _dump_address_65537_239:
      00001E                        526 	.ds 2
      000020                        527 _check_checker_65537_255:
      000020                        528 	.ds 1
      000021                        529 _check_error_65537_255:
      000021                        530 	.ds 1
      000022                        531 _editByte_add_65536_273:
      000022                        532 	.ds 2
      000024                        533 _edit_input_65537_276:
      000024                        534 	.ds 1
      000025                        535 _printFind_PARM_2:
      000025                        536 	.ds 1
      000026                        537 _printFind_PARM_3:
      000026                        538 	.ds 1
      000027                        539 _printFind_PARM_4:
      000027                        540 	.ds 1
      000028                        541 _printFind_start_65536_281:
      000028                        542 	.ds 2
      00002A                        543 _find_page_65537_288:
      00002A                        544 	.ds 1
      00002B                        545 _find_index_65537_288:
      00002B                        546 	.ds 1
      00002C                        547 _find_address_65537_288:
      00002C                        548 	.ds 2
      00002E                        549 _count_address_65537_302:
      00002E                        550 	.ds 2
      000030                        551 _count_index_65537_302:
      000030                        552 	.ds 1
      000031                        553 _count_page_65537_302:
      000031                        554 	.ds 1
                                    555 ;--------------------------------------------------------
                                    556 ; absolute external ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area XABS    (ABS,XDATA)
                                    559 ;--------------------------------------------------------
                                    560 ; external initialized ram data
                                    561 ;--------------------------------------------------------
                                    562 	.area XISEG   (XDATA)
                                    563 	.area HOME    (CODE)
                                    564 	.area GSINIT0 (CODE)
                                    565 	.area GSINIT1 (CODE)
                                    566 	.area GSINIT2 (CODE)
                                    567 	.area GSINIT3 (CODE)
                                    568 	.area GSINIT4 (CODE)
                                    569 	.area GSINIT5 (CODE)
                                    570 	.area GSINIT  (CODE)
                                    571 	.area GSFINAL (CODE)
                                    572 	.area CSEG    (CODE)
                                    573 ;--------------------------------------------------------
                                    574 ; interrupt vector
                                    575 ;--------------------------------------------------------
                                    576 	.area HOME    (CODE)
      000000                        577 __interrupt_vect:
      000000 02r00r00         [24]  578 	ljmp	__sdcc_gsinit_startup
                                    579 ;--------------------------------------------------------
                                    580 ; global & static initialisations
                                    581 ;--------------------------------------------------------
                                    582 	.area HOME    (CODE)
                                    583 	.area GSINIT  (CODE)
                                    584 	.area GSFINAL (CODE)
                                    585 	.area GSINIT  (CODE)
                                    586 	.globl __sdcc_gsinit_startup
                                    587 	.globl __sdcc_program_startup
                                    588 	.globl __start__stack
                                    589 	.globl __mcs51_genXINIT
                                    590 	.globl __mcs51_genXRAMCLEAR
                                    591 	.globl __mcs51_genRAMCLEAR
                                    592 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  593 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  594 	mov	(_lcd_address + 1),#0x40
                                    595 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  596 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  597 	mov	(_seg7_address + 1),#0x80
                                    598 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  599 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  600 	mov	(_temp_address + 1),#0xc0
                                    601 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  602 	clr	a
      000013 F5*08            [12]  603 	mov	_light_address,a
      000015 F5*09            [12]  604 	mov	(_light_address + 1),a
                                    605 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  606 	ljmp	__sdcc_program_startup
                                    607 ;--------------------------------------------------------
                                    608 ; Home
                                    609 ;--------------------------------------------------------
                                    610 	.area HOME    (CODE)
                                    611 	.area HOME    (CODE)
      000003                        612 __sdcc_program_startup:
      000003 02r21rAB         [24]  613 	ljmp	_main
                                    614 ;	return from main will return to caller
                                    615 ;--------------------------------------------------------
                                    616 ; code
                                    617 ;--------------------------------------------------------
                                    618 	.area CSEG    (CODE)
                                    619 ;------------------------------------------------------------
                                    620 ;Allocation info for local variables in function 'iowrite8'
                                    621 ;------------------------------------------------------------
                                    622 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    623 ;map_address               Allocated to registers r6 r7 
                                    624 ;------------------------------------------------------------
                                    625 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    626 ;	-----------------------------------------
                                    627 ;	 function iowrite8
                                    628 ;	-----------------------------------------
      000000                        629 _iowrite8:
                           000007   630 	ar7 = 0x07
                           000006   631 	ar6 = 0x06
                           000005   632 	ar5 = 0x05
                           000004   633 	ar4 = 0x04
                           000003   634 	ar3 = 0x03
                           000002   635 	ar2 = 0x02
                           000001   636 	ar1 = 0x01
                           000000   637 	ar0 = 0x00
      000000 AE 82            [24]  638 	mov	r6,dpl
      000002 AF 83            [24]  639 	mov	r7,dph
                                    640 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    641 ;	assignBit
      000004 D2 B4            [12]  642 	setb	_P3_4
                                    643 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  644 	mov	dpl,r6
      000008 8F 83            [24]  645 	mov	dph,r7
      00000A E5*00            [12]  646 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  647 	movx	@dptr,a
                                    648 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    649 ;	assignBit
      00000D C2 B4            [12]  650 	clr	_P3_4
                                    651 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  652 	ret
                                    653 ;------------------------------------------------------------
                                    654 ;Allocation info for local variables in function 'delay'
                                    655 ;------------------------------------------------------------
                                    656 ;i                         Allocated with name '_delay_i_65536_27'
                                    657 ;j                         Allocated with name '_delay_j_65536_27'
                                    658 ;d                         Allocated to registers r6 r7 
                                    659 ;------------------------------------------------------------
                                    660 ;	ecen4330_lcd_v3.c:58: void delay (int16_t d)
                                    661 ;	-----------------------------------------
                                    662 ;	 function delay
                                    663 ;	-----------------------------------------
      000010                        664 _delay:
      000010 AE 82            [24]  665 	mov	r6,dpl
      000012 AF 83            [24]  666 	mov	r7,dph
                                    667 ;	ecen4330_lcd_v3.c:61: for (i=0;i<d;i++)
      000014 7C 00            [12]  668 	mov	r4,#0x00
      000016 7D 00            [12]  669 	mov	r5,#0x00
      000018                        670 00107$:
      000018 8C 02            [24]  671 	mov	ar2,r4
      00001A 8D 03            [24]  672 	mov	ar3,r5
      00001C C3               [12]  673 	clr	c
      00001D EA               [12]  674 	mov	a,r2
      00001E 9E               [12]  675 	subb	a,r6
      00001F EB               [12]  676 	mov	a,r3
      000020 64 80            [12]  677 	xrl	a,#0x80
      000022 8F F0            [24]  678 	mov	b,r7
      000024 63 F0 80         [24]  679 	xrl	b,#0x80
      000027 95 F0            [12]  680 	subb	a,b
      000029 50 14            [24]  681 	jnc	00109$
                                    682 ;	ecen4330_lcd_v3.c:63: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  683 	mov	r2,#0xe8
      00002D 7B 03            [12]  684 	mov	r3,#0x03
      00002F                        685 00105$:
      00002F 1A               [12]  686 	dec	r2
      000030 BA FF 01         [24]  687 	cjne	r2,#0xff,00130$
      000033 1B               [12]  688 	dec	r3
      000034                        689 00130$:
      000034 EA               [12]  690 	mov	a,r2
      000035 4B               [12]  691 	orl	a,r3
      000036 70 F7            [24]  692 	jnz	00105$
                                    693 ;	ecen4330_lcd_v3.c:61: for (i=0;i<d;i++)
      000038 0C               [12]  694 	inc	r4
      000039 BC 00 DC         [24]  695 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  696 	inc	r5
      00003D 80 D9            [24]  697 	sjmp	00107$
      00003F                        698 00109$:
                                    699 ;	ecen4330_lcd_v3.c:65: }
      00003F 22               [24]  700 	ret
                                    701 ;------------------------------------------------------------
                                    702 ;Allocation info for local variables in function 'writeRegister8'
                                    703 ;------------------------------------------------------------
                                    704 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    705 ;a                         Allocated to registers r7 
                                    706 ;------------------------------------------------------------
                                    707 ;	ecen4330_lcd_v3.c:75: void writeRegister8 (uint8_t a, uint8_t d) {
                                    708 ;	-----------------------------------------
                                    709 ;	 function writeRegister8
                                    710 ;	-----------------------------------------
      000040                        711 _writeRegister8:
      000040 AF 82            [24]  712 	mov	r7,dpl
                                    713 ;	ecen4330_lcd_v3.c:76: CD = __CMD__;
                                    714 ;	assignBit
      000042 C2 B5            [12]  715 	clr	_P3_5
                                    716 ;	ecen4330_lcd_v3.c:77: write8(a);
                                    717 ;	assignBit
      000044 D2 B4            [12]  718 	setb	_P3_4
      000046 85*02 82         [24]  719 	mov	dpl,_lcd_address
      000049 85*03 83         [24]  720 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  721 	mov	a,r7
      00004D F0               [24]  722 	movx	@dptr,a
                                    723 ;	assignBit
      00004E C2 B4            [12]  724 	clr	_P3_4
                                    725 ;	ecen4330_lcd_v3.c:78: CD = __DATA__;
                                    726 ;	assignBit
      000050 D2 B5            [12]  727 	setb	_P3_5
                                    728 ;	ecen4330_lcd_v3.c:79: write8(d);
                                    729 ;	assignBit
      000052 D2 B4            [12]  730 	setb	_P3_4
      000054 85*02 82         [24]  731 	mov	dpl,_lcd_address
      000057 85*03 83         [24]  732 	mov	dph,(_lcd_address + 1)
      00005A E5*00            [12]  733 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  734 	movx	@dptr,a
                                    735 ;	assignBit
      00005D C2 B4            [12]  736 	clr	_P3_4
                                    737 ;	ecen4330_lcd_v3.c:80: }
      00005F 22               [24]  738 	ret
                                    739 ;------------------------------------------------------------
                                    740 ;Allocation info for local variables in function 'writeRegister16'
                                    741 ;------------------------------------------------------------
                                    742 ;hi                        Allocated with name '_writeRegister16_hi_65536_36'
                                    743 ;lo                        Allocated with name '_writeRegister16_lo_65536_36'
                                    744 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    745 ;a                         Allocated to registers r6 r7 
                                    746 ;------------------------------------------------------------
                                    747 ;	ecen4330_lcd_v3.c:84: void writeRegister16 (uint16_t a, uint16_t d) {
                                    748 ;	-----------------------------------------
                                    749 ;	 function writeRegister16
                                    750 ;	-----------------------------------------
      000060                        751 _writeRegister16:
      000060 AE 82            [24]  752 	mov	r6,dpl
      000062 AF 83            [24]  753 	mov	r7,dph
                                    754 ;	ecen4330_lcd_v3.c:86: hi = (a) >> 8;
      000064 8F 05            [24]  755 	mov	ar5,r7
                                    756 ;	ecen4330_lcd_v3.c:87: lo = (a);
                                    757 ;	ecen4330_lcd_v3.c:88: write8Reg(hi);
                                    758 ;	assignBit
      000066 C2 B5            [12]  759 	clr	_P3_5
                                    760 ;	assignBit
      000068 D2 B4            [12]  761 	setb	_P3_4
      00006A 85*02 82         [24]  762 	mov	dpl,_lcd_address
      00006D 85*03 83         [24]  763 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  764 	mov	a,r5
      000071 F0               [24]  765 	movx	@dptr,a
                                    766 ;	assignBit
      000072 C2 B4            [12]  767 	clr	_P3_4
                                    768 ;	ecen4330_lcd_v3.c:89: write8Reg(lo);
                                    769 ;	assignBit
      000074 C2 B5            [12]  770 	clr	_P3_5
                                    771 ;	assignBit
      000076 D2 B4            [12]  772 	setb	_P3_4
      000078 85*02 82         [24]  773 	mov	dpl,_lcd_address
      00007B 85*03 83         [24]  774 	mov	dph,(_lcd_address + 1)
      00007E EE               [12]  775 	mov	a,r6
      00007F F0               [24]  776 	movx	@dptr,a
                                    777 ;	assignBit
      000080 C2 B4            [12]  778 	clr	_P3_4
                                    779 ;	ecen4330_lcd_v3.c:90: hi = (d) >> 8;
      000082 AF*01            [24]  780 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    781 ;	ecen4330_lcd_v3.c:91: lo = (d);
      000084 AE*00            [24]  782 	mov	r6,_writeRegister16_PARM_2
                                    783 ;	ecen4330_lcd_v3.c:92: CD = 1 ;
                                    784 ;	assignBit
      000086 D2 B5            [12]  785 	setb	_P3_5
                                    786 ;	ecen4330_lcd_v3.c:93: write8Data(hi);
                                    787 ;	assignBit
      000088 D2 B5            [12]  788 	setb	_P3_5
                                    789 ;	assignBit
      00008A D2 B4            [12]  790 	setb	_P3_4
      00008C 85*02 82         [24]  791 	mov	dpl,_lcd_address
      00008F 85*03 83         [24]  792 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  793 	mov	a,r7
      000093 F0               [24]  794 	movx	@dptr,a
                                    795 ;	assignBit
      000094 C2 B4            [12]  796 	clr	_P3_4
                                    797 ;	ecen4330_lcd_v3.c:94: write8Data(lo);
                                    798 ;	assignBit
      000096 D2 B5            [12]  799 	setb	_P3_5
                                    800 ;	assignBit
      000098 D2 B4            [12]  801 	setb	_P3_4
      00009A 85*02 82         [24]  802 	mov	dpl,_lcd_address
      00009D 85*03 83         [24]  803 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  804 	mov	a,r6
      0000A1 F0               [24]  805 	movx	@dptr,a
                                    806 ;	assignBit
      0000A2 C2 B4            [12]  807 	clr	_P3_4
                                    808 ;	ecen4330_lcd_v3.c:95: }
      0000A4 22               [24]  809 	ret
                                    810 ;------------------------------------------------------------
                                    811 ;Allocation info for local variables in function 'setCursor'
                                    812 ;------------------------------------------------------------
                                    813 ;y                         Allocated with name '_setCursor_PARM_2'
                                    814 ;x                         Allocated to registers 
                                    815 ;------------------------------------------------------------
                                    816 ;	ecen4330_lcd_v3.c:103: void setCursor (uint16_t x, uint16_t y) {
                                    817 ;	-----------------------------------------
                                    818 ;	 function setCursor
                                    819 ;	-----------------------------------------
      0000A5                        820 _setCursor:
      0000A5 85 82*0C         [24]  821 	mov	_cursor_x,dpl
      0000A8 85 83*0D         [24]  822 	mov	(_cursor_x + 1),dph
                                    823 ;	ecen4330_lcd_v3.c:105: cursor_y = y;
      0000AB 85*00*0E         [24]  824 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85*01*0F         [24]  825 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    826 ;	ecen4330_lcd_v3.c:106: }
      0000B1 22               [24]  827 	ret
                                    828 ;------------------------------------------------------------
                                    829 ;Allocation info for local variables in function 'setTextColor'
                                    830 ;------------------------------------------------------------
                                    831 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    832 ;x                         Allocated to registers 
                                    833 ;------------------------------------------------------------
                                    834 ;	ecen4330_lcd_v3.c:113: void setTextColor (uint16_t x, uint16_t y) {
                                    835 ;	-----------------------------------------
                                    836 ;	 function setTextColor
                                    837 ;	-----------------------------------------
      0000B2                        838 _setTextColor:
      0000B2 85 82*12         [24]  839 	mov	_textcolor,dpl
      0000B5 85 83*13         [24]  840 	mov	(_textcolor + 1),dph
                                    841 ;	ecen4330_lcd_v3.c:115: textbgcolor = y;
      0000B8 85*00*14         [24]  842 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85*01*15         [24]  843 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    844 ;	ecen4330_lcd_v3.c:116: }
      0000BE 22               [24]  845 	ret
                                    846 ;------------------------------------------------------------
                                    847 ;Allocation info for local variables in function 'setTextSize'
                                    848 ;------------------------------------------------------------
                                    849 ;s                         Allocated to registers r7 
                                    850 ;------------------------------------------------------------
                                    851 ;	ecen4330_lcd_v3.c:123: void setTextSize (uint8_t s) {
                                    852 ;	-----------------------------------------
                                    853 ;	 function setTextSize
                                    854 ;	-----------------------------------------
      0000BF                        855 _setTextSize:
                                    856 ;	ecen4330_lcd_v3.c:124: if (s > 8) return;
      0000BF E5 82            [12]  857 	mov	a,dpl
      0000C1 FF               [12]  858 	mov	r7,a
      0000C2 24 F7            [12]  859 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  860 	jnc	00102$
      0000C6 22               [24]  861 	ret
      0000C7                        862 00102$:
                                    863 ;	ecen4330_lcd_v3.c:125: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  864 	mov	a,r7
      0000C8 60 06            [24]  865 	jz	00105$
      0000CA 8F 06            [24]  866 	mov	ar6,r7
      0000CC 7F 00            [12]  867 	mov	r7,#0x00
      0000CE 80 04            [24]  868 	sjmp	00106$
      0000D0                        869 00105$:
      0000D0 7E 01            [12]  870 	mov	r6,#0x01
      0000D2 7F 00            [12]  871 	mov	r7,#0x00
      0000D4                        872 00106$:
      0000D4 8E*10            [24]  873 	mov	_textsize,r6
                                    874 ;	ecen4330_lcd_v3.c:126: }
      0000D6 22               [24]  875 	ret
                                    876 ;------------------------------------------------------------
                                    877 ;Allocation info for local variables in function 'setRotation'
                                    878 ;------------------------------------------------------------
                                    879 ;flag                      Allocated to registers r7 
                                    880 ;------------------------------------------------------------
                                    881 ;	ecen4330_lcd_v3.c:138: void setRotation (uint8_t flag) {
                                    882 ;	-----------------------------------------
                                    883 ;	 function setRotation
                                    884 ;	-----------------------------------------
      0000D7                        885 _setRotation:
                                    886 ;	ecen4330_lcd_v3.c:139: switch(flag) {
      0000D7 E5 82            [12]  887 	mov	a,dpl
      0000D9 FF               [12]  888 	mov	r7,a
      0000DA 24 FC            [12]  889 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  890 	jc	00105$
      0000DE EF               [12]  891 	mov	a,r7
      0000DF 2F               [12]  892 	add	a,r7
                                    893 ;	ecen4330_lcd_v3.c:140: case 0:
      0000E0 90r00rE4         [24]  894 	mov	dptr,#00115$
      0000E3 73               [24]  895 	jmp	@a+dptr
      0000E4                        896 00115$:
      0000E4 80 06            [24]  897 	sjmp	00101$
      0000E6 80 14            [24]  898 	sjmp	00102$
      0000E8 80 22            [24]  899 	sjmp	00103$
      0000EA 80 30            [24]  900 	sjmp	00104$
      0000EC                        901 00101$:
                                    902 ;	ecen4330_lcd_v3.c:141: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  903 	mov	r7,#0x48
                                    904 ;	ecen4330_lcd_v3.c:142: _width = TFTWIDTH;
      0000EE 75*16 F0         [24]  905 	mov	__width,#0xf0
      0000F1 75*17 00         [24]  906 	mov	(__width + 1),#0x00
                                    907 ;	ecen4330_lcd_v3.c:143: _height = TFTHEIGHT;
      0000F4 75*18 40         [24]  908 	mov	__height,#0x40
      0000F7 75*19 01         [24]  909 	mov	(__height + 1),#0x01
                                    910 ;	ecen4330_lcd_v3.c:144: break;
                                    911 ;	ecen4330_lcd_v3.c:145: case 1:
      0000FA 80 3E            [24]  912 	sjmp	00106$
      0000FC                        913 00102$:
                                    914 ;	ecen4330_lcd_v3.c:146: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  915 	mov	r7,#0x28
                                    916 ;	ecen4330_lcd_v3.c:147: _width = TFTHEIGHT;
      0000FE 75*16 40         [24]  917 	mov	__width,#0x40
      000101 75*17 01         [24]  918 	mov	(__width + 1),#0x01
                                    919 ;	ecen4330_lcd_v3.c:148: _height = TFTWIDTH;
      000104 75*18 F0         [24]  920 	mov	__height,#0xf0
      000107 75*19 00         [24]  921 	mov	(__height + 1),#0x00
                                    922 ;	ecen4330_lcd_v3.c:149: break;
                                    923 ;	ecen4330_lcd_v3.c:150: case 2:
      00010A 80 2E            [24]  924 	sjmp	00106$
      00010C                        925 00103$:
                                    926 ;	ecen4330_lcd_v3.c:151: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  927 	mov	r7,#0x88
                                    928 ;	ecen4330_lcd_v3.c:152: _width = TFTWIDTH;
      00010E 75*16 F0         [24]  929 	mov	__width,#0xf0
      000111 75*17 00         [24]  930 	mov	(__width + 1),#0x00
                                    931 ;	ecen4330_lcd_v3.c:153: _height = TFTHEIGHT;
      000114 75*18 40         [24]  932 	mov	__height,#0x40
      000117 75*19 01         [24]  933 	mov	(__height + 1),#0x01
                                    934 ;	ecen4330_lcd_v3.c:154: break;
                                    935 ;	ecen4330_lcd_v3.c:155: case 3:
      00011A 80 1E            [24]  936 	sjmp	00106$
      00011C                        937 00104$:
                                    938 ;	ecen4330_lcd_v3.c:156: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  939 	mov	r7,#0xe8
                                    940 ;	ecen4330_lcd_v3.c:157: _width = TFTHEIGHT;
      00011E 75*16 40         [24]  941 	mov	__width,#0x40
      000121 75*17 01         [24]  942 	mov	(__width + 1),#0x01
                                    943 ;	ecen4330_lcd_v3.c:158: _height = TFTWIDTH;
      000124 75*18 F0         [24]  944 	mov	__height,#0xf0
      000127 75*19 00         [24]  945 	mov	(__height + 1),#0x00
                                    946 ;	ecen4330_lcd_v3.c:159: break;
                                    947 ;	ecen4330_lcd_v3.c:160: default:
      00012A 80 0E            [24]  948 	sjmp	00106$
      00012C                        949 00105$:
                                    950 ;	ecen4330_lcd_v3.c:161: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  951 	mov	r7,#0x48
                                    952 ;	ecen4330_lcd_v3.c:162: _width = TFTWIDTH;
      00012E 75*16 F0         [24]  953 	mov	__width,#0xf0
      000131 75*17 00         [24]  954 	mov	(__width + 1),#0x00
                                    955 ;	ecen4330_lcd_v3.c:163: _height = TFTHEIGHT;
      000134 75*18 40         [24]  956 	mov	__height,#0x40
      000137 75*19 01         [24]  957 	mov	(__height + 1),#0x01
                                    958 ;	ecen4330_lcd_v3.c:165: }
      00013A                        959 00106$:
                                    960 ;	ecen4330_lcd_v3.c:166: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F*00            [24]  961 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  962 	mov	dpl,#0x36
                                    963 ;	ecen4330_lcd_v3.c:167: }
      00013F 02r00r40         [24]  964 	ljmp	_writeRegister8
                                    965 ;------------------------------------------------------------
                                    966 ;Allocation info for local variables in function 'setAddress'
                                    967 ;------------------------------------------------------------
                                    968 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    969 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    970 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    971 ;x1                        Allocated to registers r6 r7 
                                    972 ;------------------------------------------------------------
                                    973 ;	ecen4330_lcd_v3.c:169: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    974 ;	-----------------------------------------
                                    975 ;	 function setAddress
                                    976 ;	-----------------------------------------
      000142                        977 _setAddress:
      000142 AE 82            [24]  978 	mov	r6,dpl
      000144 AF 83            [24]  979 	mov	r7,dph
                                    980 ;	ecen4330_lcd_v3.c:170: write8Reg(0x2A);
                                    981 ;	assignBit
      000146 C2 B5            [12]  982 	clr	_P3_5
                                    983 ;	assignBit
      000148 D2 B4            [12]  984 	setb	_P3_4
      00014A 85*02 82         [24]  985 	mov	dpl,_lcd_address
      00014D 85*03 83         [24]  986 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  987 	mov	a,#0x2a
      000152 F0               [24]  988 	movx	@dptr,a
                                    989 ;	assignBit
      000153 C2 B4            [12]  990 	clr	_P3_4
                                    991 ;	ecen4330_lcd_v3.c:171: write8Data(x1 >> 8);
                                    992 ;	assignBit
      000155 D2 B5            [12]  993 	setb	_P3_5
                                    994 ;	assignBit
      000157 D2 B4            [12]  995 	setb	_P3_4
      000159 85*02 82         [24]  996 	mov	dpl,_lcd_address
      00015C 85*03 83         [24]  997 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  998 	mov	ar5,r7
      000161 ED               [12]  999 	mov	a,r5
      000162 F0               [24] 1000 	movx	@dptr,a
                                   1001 ;	assignBit
      000163 C2 B4            [12] 1002 	clr	_P3_4
                                   1003 ;	ecen4330_lcd_v3.c:172: write8Data(x1);
                                   1004 ;	assignBit
      000165 D2 B5            [12] 1005 	setb	_P3_5
                                   1006 ;	assignBit
      000167 D2 B4            [12] 1007 	setb	_P3_4
      000169 85*02 82         [24] 1008 	mov	dpl,_lcd_address
      00016C 85*03 83         [24] 1009 	mov	dph,(_lcd_address + 1)
      00016F EE               [12] 1010 	mov	a,r6
      000170 F0               [24] 1011 	movx	@dptr,a
                                   1012 ;	assignBit
      000171 C2 B4            [12] 1013 	clr	_P3_4
                                   1014 ;	ecen4330_lcd_v3.c:173: write8Data(x2 >> 8);
                                   1015 ;	assignBit
      000173 D2 B5            [12] 1016 	setb	_P3_5
                                   1017 ;	assignBit
      000175 D2 B4            [12] 1018 	setb	_P3_4
      000177 85*02 82         [24] 1019 	mov	dpl,_lcd_address
      00017A 85*03 83         [24] 1020 	mov	dph,(_lcd_address + 1)
      00017D E5*03            [12] 1021 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24] 1022 	movx	@dptr,a
                                   1023 ;	assignBit
      000180 C2 B4            [12] 1024 	clr	_P3_4
                                   1025 ;	ecen4330_lcd_v3.c:174: write8Data(x2);
                                   1026 ;	assignBit
      000182 D2 B5            [12] 1027 	setb	_P3_5
                                   1028 ;	assignBit
      000184 D2 B4            [12] 1029 	setb	_P3_4
      000186 85*02 82         [24] 1030 	mov	dpl,_lcd_address
      000189 85*03 83         [24] 1031 	mov	dph,(_lcd_address + 1)
      00018C E5*02            [12] 1032 	mov	a,_setAddress_PARM_3
      00018E F0               [24] 1033 	movx	@dptr,a
                                   1034 ;	assignBit
      00018F C2 B4            [12] 1035 	clr	_P3_4
                                   1036 ;	ecen4330_lcd_v3.c:176: write8Reg(0x2B);
                                   1037 ;	assignBit
      000191 C2 B5            [12] 1038 	clr	_P3_5
                                   1039 ;	assignBit
      000193 D2 B4            [12] 1040 	setb	_P3_4
      000195 85*02 82         [24] 1041 	mov	dpl,_lcd_address
      000198 85*03 83         [24] 1042 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12] 1043 	mov	a,#0x2b
      00019D F0               [24] 1044 	movx	@dptr,a
                                   1045 ;	assignBit
      00019E C2 B4            [12] 1046 	clr	_P3_4
                                   1047 ;	ecen4330_lcd_v3.c:177: write8Data(y1 >> 8);
                                   1048 ;	assignBit
      0001A0 D2 B5            [12] 1049 	setb	_P3_5
                                   1050 ;	assignBit
      0001A2 D2 B4            [12] 1051 	setb	_P3_4
      0001A4 85*02 82         [24] 1052 	mov	dpl,_lcd_address
      0001A7 85*03 83         [24] 1053 	mov	dph,(_lcd_address + 1)
      0001AA E5*01            [12] 1054 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24] 1055 	movx	@dptr,a
                                   1056 ;	assignBit
      0001AD C2 B4            [12] 1057 	clr	_P3_4
                                   1058 ;	ecen4330_lcd_v3.c:178: write8Data(y1);
                                   1059 ;	assignBit
      0001AF D2 B5            [12] 1060 	setb	_P3_5
                                   1061 ;	assignBit
      0001B1 D2 B4            [12] 1062 	setb	_P3_4
      0001B3 85*02 82         [24] 1063 	mov	dpl,_lcd_address
      0001B6 85*03 83         [24] 1064 	mov	dph,(_lcd_address + 1)
      0001B9 E5*00            [12] 1065 	mov	a,_setAddress_PARM_2
      0001BB F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	assignBit
      0001BC C2 B4            [12] 1068 	clr	_P3_4
                                   1069 ;	ecen4330_lcd_v3.c:179: write8Data(y2 >> 8);
                                   1070 ;	assignBit
      0001BE D2 B5            [12] 1071 	setb	_P3_5
                                   1072 ;	assignBit
      0001C0 D2 B4            [12] 1073 	setb	_P3_4
      0001C2 85*02 82         [24] 1074 	mov	dpl,_lcd_address
      0001C5 85*03 83         [24] 1075 	mov	dph,(_lcd_address + 1)
      0001C8 E5*05            [12] 1076 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24] 1077 	movx	@dptr,a
                                   1078 ;	assignBit
      0001CB C2 B4            [12] 1079 	clr	_P3_4
                                   1080 ;	ecen4330_lcd_v3.c:180: write8Data(y2);
                                   1081 ;	assignBit
      0001CD D2 B5            [12] 1082 	setb	_P3_5
                                   1083 ;	assignBit
      0001CF D2 B4            [12] 1084 	setb	_P3_4
      0001D1 85*02 82         [24] 1085 	mov	dpl,_lcd_address
      0001D4 85*03 83         [24] 1086 	mov	dph,(_lcd_address + 1)
      0001D7 E5*04            [12] 1087 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24] 1088 	movx	@dptr,a
                                   1089 ;	assignBit
      0001DA C2 B4            [12] 1090 	clr	_P3_4
                                   1091 ;	ecen4330_lcd_v3.c:181: }
      0001DC 22               [24] 1092 	ret
                                   1093 ;------------------------------------------------------------
                                   1094 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1095 ;------------------------------------------------------------
                                   1096 ;	ecen4330_lcd_v3.c:187: void TFT_LCD_INIT (void) {
                                   1097 ;	-----------------------------------------
                                   1098 ;	 function TFT_LCD_INIT
                                   1099 ;	-----------------------------------------
      0001DD                       1100 _TFT_LCD_INIT:
                                   1101 ;	ecen4330_lcd_v3.c:188: _width = TFTWIDTH;
      0001DD 75*16 F0         [24] 1102 	mov	__width,#0xf0
      0001E0 75*17 00         [24] 1103 	mov	(__width + 1),#0x00
                                   1104 ;	ecen4330_lcd_v3.c:189: _height = TFTHEIGHT;
      0001E3 75*18 40         [24] 1105 	mov	__height,#0x40
      0001E6 75*19 01         [24] 1106 	mov	(__height + 1),#0x01
                                   1107 ;	ecen4330_lcd_v3.c:191: IOM = 0;
                                   1108 ;	assignBit
      0001E9 C2 B4            [12] 1109 	clr	_P3_4
                                   1110 ;	ecen4330_lcd_v3.c:192: CD = 1;
                                   1111 ;	assignBit
      0001EB D2 B5            [12] 1112 	setb	_P3_5
                                   1113 ;	ecen4330_lcd_v3.c:194: write8Reg(0x00);
                                   1114 ;	assignBit
      0001ED C2 B5            [12] 1115 	clr	_P3_5
                                   1116 ;	assignBit
      0001EF D2 B4            [12] 1117 	setb	_P3_4
      0001F1 85*02 82         [24] 1118 	mov	dpl,_lcd_address
      0001F4 85*03 83         [24] 1119 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1120 	clr	a
      0001F8 F0               [24] 1121 	movx	@dptr,a
                                   1122 ;	assignBit
      0001F9 C2 B4            [12] 1123 	clr	_P3_4
                                   1124 ;	ecen4330_lcd_v3.c:195: write8Data(0x00);
                                   1125 ;	assignBit
      0001FB D2 B5            [12] 1126 	setb	_P3_5
                                   1127 ;	assignBit
      0001FD D2 B4            [12] 1128 	setb	_P3_4
      0001FF 85*02 82         [24] 1129 	mov	dpl,_lcd_address
      000202 85*03 83         [24] 1130 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1131 	clr	a
      000206 F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	assignBit
      000207 C2 B4            [12] 1134 	clr	_P3_4
                                   1135 ;	ecen4330_lcd_v3.c:196: write8Data(0x00);
                                   1136 ;	assignBit
      000209 D2 B5            [12] 1137 	setb	_P3_5
                                   1138 ;	assignBit
      00020B D2 B4            [12] 1139 	setb	_P3_4
      00020D 85*02 82         [24] 1140 	mov	dpl,_lcd_address
      000210 85*03 83         [24] 1141 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1142 	clr	a
      000214 F0               [24] 1143 	movx	@dptr,a
                                   1144 ;	assignBit
      000215 C2 B4            [12] 1145 	clr	_P3_4
                                   1146 ;	ecen4330_lcd_v3.c:197: write8Data(0x00);
                                   1147 ;	assignBit
      000217 D2 B5            [12] 1148 	setb	_P3_5
                                   1149 ;	assignBit
      000219 D2 B4            [12] 1150 	setb	_P3_4
      00021B 85*02 82         [24] 1151 	mov	dpl,_lcd_address
      00021E 85*03 83         [24] 1152 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1153 	clr	a
      000222 F0               [24] 1154 	movx	@dptr,a
                                   1155 ;	assignBit
      000223 C2 B4            [12] 1156 	clr	_P3_4
                                   1157 ;	ecen4330_lcd_v3.c:198: delay(200);
      000225 90 00 C8         [24] 1158 	mov	dptr,#0x00c8
      000228 12r00r10         [24] 1159 	lcall	_delay
                                   1160 ;	ecen4330_lcd_v3.c:200: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75*00 00         [24] 1161 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1162 	mov	dpl,#0x01
      000231 12r00r40         [24] 1163 	lcall	_writeRegister8
                                   1164 ;	ecen4330_lcd_v3.c:201: delay(50);
      000234 90 00 32         [24] 1165 	mov	dptr,#0x0032
      000237 12r00r10         [24] 1166 	lcall	_delay
                                   1167 ;	ecen4330_lcd_v3.c:202: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75*00 00         [24] 1168 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1169 	mov	dpl,#0x28
      000240 12r00r40         [24] 1170 	lcall	_writeRegister8
                                   1171 ;	ecen4330_lcd_v3.c:203: delay(10);
      000243 90 00 0A         [24] 1172 	mov	dptr,#0x000a
      000246 12r00r10         [24] 1173 	lcall	_delay
                                   1174 ;	ecen4330_lcd_v3.c:205: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75*00 23         [24] 1175 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1176 	mov	dpl,#0xc0
      00024F 12r00r40         [24] 1177 	lcall	_writeRegister8
                                   1178 ;	ecen4330_lcd_v3.c:206: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75*00 11         [24] 1179 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1180 	mov	dpl,#0xc1
      000258 12r00r40         [24] 1181 	lcall	_writeRegister8
                                   1182 ;	ecen4330_lcd_v3.c:207: write8Reg(ILI9341_VCOMCONTROL1);
                                   1183 ;	assignBit
      00025B C2 B5            [12] 1184 	clr	_P3_5
                                   1185 ;	assignBit
      00025D D2 B4            [12] 1186 	setb	_P3_4
      00025F 85*02 82         [24] 1187 	mov	dpl,_lcd_address
      000262 85*03 83         [24] 1188 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1189 	mov	a,#0xc5
      000267 F0               [24] 1190 	movx	@dptr,a
                                   1191 ;	assignBit
      000268 C2 B4            [12] 1192 	clr	_P3_4
                                   1193 ;	ecen4330_lcd_v3.c:208: write8Data(0x3d);
                                   1194 ;	assignBit
      00026A D2 B5            [12] 1195 	setb	_P3_5
                                   1196 ;	assignBit
      00026C D2 B4            [12] 1197 	setb	_P3_4
      00026E 85*02 82         [24] 1198 	mov	dpl,_lcd_address
      000271 85*03 83         [24] 1199 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1200 	mov	a,#0x3d
      000276 F0               [24] 1201 	movx	@dptr,a
                                   1202 ;	assignBit
      000277 C2 B4            [12] 1203 	clr	_P3_4
                                   1204 ;	ecen4330_lcd_v3.c:209: write8Data(0x30);
                                   1205 ;	assignBit
      000279 D2 B5            [12] 1206 	setb	_P3_5
                                   1207 ;	assignBit
      00027B D2 B4            [12] 1208 	setb	_P3_4
      00027D 85*02 82         [24] 1209 	mov	dpl,_lcd_address
      000280 85*03 83         [24] 1210 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1211 	mov	a,#0x30
      000285 F0               [24] 1212 	movx	@dptr,a
                                   1213 ;	assignBit
      000286 C2 B4            [12] 1214 	clr	_P3_4
                                   1215 ;	ecen4330_lcd_v3.c:210: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75*00 AA         [24] 1216 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1217 	mov	dpl,#0xc7
      00028E 12r00r40         [24] 1218 	lcall	_writeRegister8
                                   1219 ;	ecen4330_lcd_v3.c:211: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75*00 88         [24] 1220 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1221 	mov	dpl,#0x36
      000297 12r00r40         [24] 1222 	lcall	_writeRegister8
                                   1223 ;	ecen4330_lcd_v3.c:212: write8Reg(ILI9341_PIXELFORMAT);
                                   1224 ;	assignBit
      00029A C2 B5            [12] 1225 	clr	_P3_5
                                   1226 ;	assignBit
      00029C D2 B4            [12] 1227 	setb	_P3_4
      00029E 85*02 82         [24] 1228 	mov	dpl,_lcd_address
      0002A1 85*03 83         [24] 1229 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1230 	mov	a,#0x3a
      0002A6 F0               [24] 1231 	movx	@dptr,a
                                   1232 ;	assignBit
      0002A7 C2 B4            [12] 1233 	clr	_P3_4
                                   1234 ;	ecen4330_lcd_v3.c:213: write8Data(0x55);write8Data(0x00);
                                   1235 ;	assignBit
      0002A9 D2 B5            [12] 1236 	setb	_P3_5
                                   1237 ;	assignBit
      0002AB D2 B4            [12] 1238 	setb	_P3_4
      0002AD 85*02 82         [24] 1239 	mov	dpl,_lcd_address
      0002B0 85*03 83         [24] 1240 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1241 	mov	a,#0x55
      0002B5 F0               [24] 1242 	movx	@dptr,a
                                   1243 ;	assignBit
      0002B6 C2 B4            [12] 1244 	clr	_P3_4
                                   1245 ;	assignBit
      0002B8 D2 B5            [12] 1246 	setb	_P3_5
                                   1247 ;	assignBit
      0002BA D2 B4            [12] 1248 	setb	_P3_4
      0002BC 85*02 82         [24] 1249 	mov	dpl,_lcd_address
      0002BF 85*03 83         [24] 1250 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1251 	clr	a
      0002C3 F0               [24] 1252 	movx	@dptr,a
                                   1253 ;	assignBit
      0002C4 C2 B4            [12] 1254 	clr	_P3_4
                                   1255 ;	ecen4330_lcd_v3.c:214: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75*00 1B         [24] 1256 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75*01 00         [24] 1257 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1258 	mov	dptr,#0x00b1
      0002CF 12r00r60         [24] 1259 	lcall	_writeRegister16
                                   1260 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75*00 07         [24] 1261 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1262 	mov	dpl,#0xb7
      0002D8 12r00r40         [24] 1263 	lcall	_writeRegister8
                                   1264 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75*00 00         [24] 1265 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1266 	mov	dpl,#0x11
      0002E1 12r00r40         [24] 1267 	lcall	_writeRegister8
                                   1268 ;	ecen4330_lcd_v3.c:219: delay(150);
      0002E4 90 00 96         [24] 1269 	mov	dptr,#0x0096
      0002E7 12r00r10         [24] 1270 	lcall	_delay
                                   1271 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75*00 00         [24] 1272 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1273 	mov	dpl,#0x29
      0002F0 12r00r40         [24] 1274 	lcall	_writeRegister8
                                   1275 ;	ecen4330_lcd_v3.c:221: delay(500);
      0002F3 90 01 F4         [24] 1276 	mov	dptr,#0x01f4
      0002F6 12r00r10         [24] 1277 	lcall	_delay
                                   1278 ;	ecen4330_lcd_v3.c:222: setAddress(0,0,_width-1,_height-1);
      0002F9 AE*16            [24] 1279 	mov	r6,__width
      0002FB AF*17            [24] 1280 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1281 	dec	r6
      0002FE BE FF 01         [24] 1282 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1283 	dec	r7
      000302                       1284 00103$:
      000302 8E*02            [24] 1285 	mov	_setAddress_PARM_3,r6
      000304 8F*03            [24] 1286 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE*18            [24] 1287 	mov	r6,__height
      000308 AF*19            [24] 1288 	mov	r7,(__height + 1)
      00030A 1E               [12] 1289 	dec	r6
      00030B BE FF 01         [24] 1290 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1291 	dec	r7
      00030F                       1292 00104$:
      00030F 8E*04            [24] 1293 	mov	_setAddress_PARM_4,r6
      000311 8F*05            [24] 1294 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1295 	clr	a
      000314 F5*00            [12] 1296 	mov	_setAddress_PARM_2,a
      000316 F5*01            [12] 1297 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1298 	mov	dptr,#0x0000
                                   1299 ;	ecen4330_lcd_v3.c:223: }
      00031B 02r01r42         [24] 1300 	ljmp	_setAddress
                                   1301 ;------------------------------------------------------------
                                   1302 ;Allocation info for local variables in function 'drawPixel'
                                   1303 ;------------------------------------------------------------
                                   1304 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1305 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1306 ;x3                        Allocated to registers r6 r7 
                                   1307 ;------------------------------------------------------------
                                   1308 ;	ecen4330_lcd_v3.c:232: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1309 ;	-----------------------------------------
                                   1310 ;	 function drawPixel
                                   1311 ;	-----------------------------------------
      00031E                       1312 _drawPixel:
      00031E AE 82            [24] 1313 	mov	r6,dpl
      000320 AF 83            [24] 1314 	mov	r7,dph
                                   1315 ;	ecen4330_lcd_v3.c:234: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1316 	mov	ar4,r6
      000324 8F 05            [24] 1317 	mov	ar5,r7
      000326 0C               [12] 1318 	inc	r4
      000327 BC 00 01         [24] 1319 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1320 	inc	r5
      00032B                       1321 00103$:
      00032B 8C*02            [24] 1322 	mov	_setAddress_PARM_3,r4
      00032D 8D*03            [24] 1323 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC*1A            [24] 1324 	mov	r4,_drawPixel_PARM_2
      000331 AD*1B            [24] 1325 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1326 	inc	r4
      000334 BC 00 01         [24] 1327 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1328 	inc	r5
      000338                       1329 00104$:
      000338 8C*04            [24] 1330 	mov	_setAddress_PARM_4,r4
      00033A 8D*05            [24] 1331 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85*1A*00         [24] 1332 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85*1B*01         [24] 1333 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1334 	mov	dpl,r6
      000344 8F 83            [24] 1335 	mov	dph,r7
      000346 12r01r42         [24] 1336 	lcall	_setAddress
                                   1337 ;	ecen4330_lcd_v3.c:236: CD=0; write8(0x2C);
                                   1338 ;	assignBit
      000349 C2 B5            [12] 1339 	clr	_P3_5
                                   1340 ;	assignBit
      00034B D2 B4            [12] 1341 	setb	_P3_4
      00034D 85*02 82         [24] 1342 	mov	dpl,_lcd_address
      000350 85*03 83         [24] 1343 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1344 	mov	a,#0x2c
      000355 F0               [24] 1345 	movx	@dptr,a
                                   1346 ;	assignBit
      000356 C2 B4            [12] 1347 	clr	_P3_4
                                   1348 ;	ecen4330_lcd_v3.c:238: CD = 1;
                                   1349 ;	assignBit
      000358 D2 B5            [12] 1350 	setb	_P3_5
                                   1351 ;	ecen4330_lcd_v3.c:239: write8(color1>>8);write8(color1);
                                   1352 ;	assignBit
      00035A D2 B4            [12] 1353 	setb	_P3_4
      00035C 85*02 82         [24] 1354 	mov	dpl,_lcd_address
      00035F 85*03 83         [24] 1355 	mov	dph,(_lcd_address + 1)
      000362 E5*1D            [12] 1356 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1357 	movx	@dptr,a
                                   1358 ;	assignBit
      000365 C2 B4            [12] 1359 	clr	_P3_4
                                   1360 ;	assignBit
      000367 D2 B4            [12] 1361 	setb	_P3_4
      000369 85*02 82         [24] 1362 	mov	dpl,_lcd_address
      00036C 85*03 83         [24] 1363 	mov	dph,(_lcd_address + 1)
      00036F E5*1C            [12] 1364 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1365 	movx	@dptr,a
                                   1366 ;	assignBit
      000372 C2 B4            [12] 1367 	clr	_P3_4
                                   1368 ;	ecen4330_lcd_v3.c:240: }
      000374 22               [24] 1369 	ret
                                   1370 ;------------------------------------------------------------
                                   1371 ;Allocation info for local variables in function 'drawCircle'
                                   1372 ;------------------------------------------------------------
                                   1373 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1374 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1375 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1376 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1377 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1378 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1379 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1380 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1381 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1382 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1383 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1384 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_104'
                                   1385 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1386 ;y                         Allocated with name '_drawCircle_y_65536_104'
                                   1387 ;------------------------------------------------------------
                                   1388 ;	ecen4330_lcd_v3.c:250: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1389 ;	-----------------------------------------
                                   1390 ;	 function drawCircle
                                   1391 ;	-----------------------------------------
      000375                       1392 _drawCircle:
      000375 85 82*24         [24] 1393 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83*25         [24] 1394 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1395 ;	ecen4330_lcd_v3.c:251: __xdata int f = 1 - r;
      00037B 74 01            [12] 1396 	mov	a,#0x01
      00037D C3               [12] 1397 	clr	c
      00037E 95*20            [12] 1398 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1399 	mov	r4,a
      000381 E4               [12] 1400 	clr	a
      000382 95*21            [12] 1401 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1402 	mov	r5,a
      000385 90r00r00         [24] 1403 	mov	dptr,#_drawCircle_f_65536_104
      000388 EC               [12] 1404 	mov	a,r4
      000389 F0               [24] 1405 	movx	@dptr,a
      00038A ED               [12] 1406 	mov	a,r5
      00038B A3               [24] 1407 	inc	dptr
      00038C F0               [24] 1408 	movx	@dptr,a
                                   1409 ;	ecen4330_lcd_v3.c:253: __xdata int ddF_y = -2 * r;
      00038D 85*20*00         [24] 1410 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      000390 85*21*01         [24] 1411 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      000393 90 FF FE         [24] 1412 	mov	dptr,#0xfffe
      000396 12r00r00         [24] 1413 	lcall	__mulint
      000399 AC 82            [24] 1414 	mov	r4,dpl
      00039B AD 83            [24] 1415 	mov	r5,dph
                                   1416 ;	ecen4330_lcd_v3.c:255: __xdata int y = r;
      00039D AA*20            [24] 1417 	mov	r2,_drawCircle_PARM_3
      00039F AB*21            [24] 1418 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1419 ;	ecen4330_lcd_v3.c:257: drawPixel(x0  , y0+r, color);
      0003A1 E5*20            [12] 1420 	mov	a,_drawCircle_PARM_3
      0003A3 25*1E            [12] 1421 	add	a,_drawCircle_PARM_2
      0003A5 F5*1A            [12] 1422 	mov	_drawPixel_PARM_2,a
      0003A7 E5*21            [12] 1423 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A9 35*1F            [12] 1424 	addc	a,(_drawCircle_PARM_2 + 1)
      0003AB F5*1B            [12] 1425 	mov	(_drawPixel_PARM_2 + 1),a
      0003AD 85*22*1C         [24] 1426 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003B0 85*23*1D         [24] 1427 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003B3 85*24 82         [24] 1428 	mov	dpl,_drawCircle_x0_65536_103
      0003B6 85*25 83         [24] 1429 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B9 C0 05            [24] 1430 	push	ar5
      0003BB C0 04            [24] 1431 	push	ar4
      0003BD C0 03            [24] 1432 	push	ar3
      0003BF C0 02            [24] 1433 	push	ar2
      0003C1 12r03r1E         [24] 1434 	lcall	_drawPixel
                                   1435 ;	ecen4330_lcd_v3.c:258: drawPixel(x0  , y0-r, color);
      0003C4 E5*1E            [12] 1436 	mov	a,_drawCircle_PARM_2
      0003C6 C3               [12] 1437 	clr	c
      0003C7 95*20            [12] 1438 	subb	a,_drawCircle_PARM_3
      0003C9 F5*1A            [12] 1439 	mov	_drawPixel_PARM_2,a
      0003CB E5*1F            [12] 1440 	mov	a,(_drawCircle_PARM_2 + 1)
      0003CD 95*21            [12] 1441 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CF F5*1B            [12] 1442 	mov	(_drawPixel_PARM_2 + 1),a
      0003D1 85*22*1C         [24] 1443 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D4 85*23*1D         [24] 1444 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D7 85*24 82         [24] 1445 	mov	dpl,_drawCircle_x0_65536_103
      0003DA 85*25 83         [24] 1446 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003DD 12r03r1E         [24] 1447 	lcall	_drawPixel
                                   1448 ;	ecen4330_lcd_v3.c:259: drawPixel(x0+r, y0  , color);
      0003E0 E5*20            [12] 1449 	mov	a,_drawCircle_PARM_3
      0003E2 25*24            [12] 1450 	add	a,_drawCircle_x0_65536_103
      0003E4 F5 82            [12] 1451 	mov	dpl,a
      0003E6 E5*21            [12] 1452 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E8 35*25            [12] 1453 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003EA F5 83            [12] 1454 	mov	dph,a
      0003EC 85*1E*1A         [24] 1455 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EF 85*1F*1B         [24] 1456 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003F2 85*22*1C         [24] 1457 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F5 85*23*1D         [24] 1458 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F8 12r03r1E         [24] 1459 	lcall	_drawPixel
                                   1460 ;	ecen4330_lcd_v3.c:260: drawPixel(x0-r, y0  , color);
      0003FB E5*24            [12] 1461 	mov	a,_drawCircle_x0_65536_103
      0003FD C3               [12] 1462 	clr	c
      0003FE 95*20            [12] 1463 	subb	a,_drawCircle_PARM_3
      000400 F5 82            [12] 1464 	mov	dpl,a
      000402 E5*25            [12] 1465 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000404 95*21            [12] 1466 	subb	a,(_drawCircle_PARM_3 + 1)
      000406 F5 83            [12] 1467 	mov	dph,a
      000408 85*1E*1A         [24] 1468 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00040B 85*1F*1B         [24] 1469 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040E 85*22*1C         [24] 1470 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000411 85*23*1D         [24] 1471 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000414 12r03r1E         [24] 1472 	lcall	_drawPixel
      000417 D0 02            [24] 1473 	pop	ar2
      000419 D0 03            [24] 1474 	pop	ar3
      00041B D0 04            [24] 1475 	pop	ar4
      00041D D0 05            [24] 1476 	pop	ar5
                                   1477 ;	ecen4330_lcd_v3.c:262: while (x<y) {
      00041F 78 00            [12] 1478 	mov	r0,#0x00
      000421 79 00            [12] 1479 	mov	r1,#0x00
      000423 75*26 01         [24] 1480 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1481 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000426 89*27            [24] 1482 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      000428                       1483 00103$:
      000428 C3               [12] 1484 	clr	c
      000429 E8               [12] 1485 	mov	a,r0
      00042A 9A               [12] 1486 	subb	a,r2
      00042B E9               [12] 1487 	mov	a,r1
      00042C 64 80            [12] 1488 	xrl	a,#0x80
      00042E 8B F0            [24] 1489 	mov	b,r3
      000430 63 F0 80         [24] 1490 	xrl	b,#0x80
      000433 95 F0            [12] 1491 	subb	a,b
      000435 40 01            [24] 1492 	jc	00121$
      000437 22               [24] 1493 	ret
      000438                       1494 00121$:
                                   1495 ;	ecen4330_lcd_v3.c:263: if (f >= 0) {
      000438 90r00r00         [24] 1496 	mov	dptr,#_drawCircle_f_65536_104
      00043B E0               [24] 1497 	movx	a,@dptr
      00043C F5*28            [12] 1498 	mov	_drawCircle_sloc1_1_0,a
      00043E A3               [24] 1499 	inc	dptr
      00043F E0               [24] 1500 	movx	a,@dptr
      000440 F5*29            [12] 1501 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000442 20 E7 18         [24] 1502 	jb	acc.7,00102$
                                   1503 ;	ecen4330_lcd_v3.c:264: y--;
      000445 1A               [12] 1504 	dec	r2
      000446 BA FF 01         [24] 1505 	cjne	r2,#0xff,00123$
      000449 1B               [12] 1506 	dec	r3
      00044A                       1507 00123$:
                                   1508 ;	ecen4330_lcd_v3.c:265: ddF_y += 2;
      00044A 74 02            [12] 1509 	mov	a,#0x02
      00044C 2C               [12] 1510 	add	a,r4
      00044D FC               [12] 1511 	mov	r4,a
      00044E E4               [12] 1512 	clr	a
      00044F 3D               [12] 1513 	addc	a,r5
      000450 FD               [12] 1514 	mov	r5,a
                                   1515 ;	ecen4330_lcd_v3.c:266: f += ddF_y;
      000451 90r00r00         [24] 1516 	mov	dptr,#_drawCircle_f_65536_104
      000454 EC               [12] 1517 	mov	a,r4
      000455 25*28            [12] 1518 	add	a,_drawCircle_sloc1_1_0
      000457 F0               [24] 1519 	movx	@dptr,a
      000458 ED               [12] 1520 	mov	a,r5
      000459 35*29            [12] 1521 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00045B A3               [24] 1522 	inc	dptr
      00045C F0               [24] 1523 	movx	@dptr,a
      00045D                       1524 00102$:
                                   1525 ;	ecen4330_lcd_v3.c:268: x++;
      00045D C0 04            [24] 1526 	push	ar4
      00045F C0 05            [24] 1527 	push	ar5
      000461 08               [12] 1528 	inc	r0
      000462 B8 00 01         [24] 1529 	cjne	r0,#0x00,00124$
      000465 09               [12] 1530 	inc	r1
      000466                       1531 00124$:
                                   1532 ;	ecen4330_lcd_v3.c:269: ddF_x += 2;
      000466 74 02            [12] 1533 	mov	a,#0x02
      000468 25*26            [12] 1534 	add	a,_drawCircle_sloc0_1_0
      00046A F5*26            [12] 1535 	mov	_drawCircle_sloc0_1_0,a
      00046C E4               [12] 1536 	clr	a
      00046D 35*27            [12] 1537 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      00046F F5*27            [12] 1538 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1539 ;	ecen4330_lcd_v3.c:270: f += ddF_x;
      000471 90r00r00         [24] 1540 	mov	dptr,#_drawCircle_f_65536_104
      000474 E0               [24] 1541 	movx	a,@dptr
      000475 FE               [12] 1542 	mov	r6,a
      000476 A3               [24] 1543 	inc	dptr
      000477 E0               [24] 1544 	movx	a,@dptr
      000478 FF               [12] 1545 	mov	r7,a
      000479 90r00r00         [24] 1546 	mov	dptr,#_drawCircle_f_65536_104
      00047C E5*26            [12] 1547 	mov	a,_drawCircle_sloc0_1_0
      00047E 2E               [12] 1548 	add	a,r6
      00047F F0               [24] 1549 	movx	@dptr,a
      000480 E5*27            [12] 1550 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      000482 3F               [12] 1551 	addc	a,r7
      000483 A3               [24] 1552 	inc	dptr
      000484 F0               [24] 1553 	movx	@dptr,a
                                   1554 ;	ecen4330_lcd_v3.c:272: drawPixel(x0 + x, y0 + y, color);
      000485 AE*24            [24] 1555 	mov	r6,_drawCircle_x0_65536_103
      000487 AF*25            [24] 1556 	mov	r7,(_drawCircle_x0_65536_103 + 1)
      000489 E8               [12] 1557 	mov	a,r0
      00048A 2E               [12] 1558 	add	a,r6
      00048B FC               [12] 1559 	mov	r4,a
      00048C E9               [12] 1560 	mov	a,r1
      00048D 3F               [12] 1561 	addc	a,r7
      00048E FD               [12] 1562 	mov	r5,a
      00048F 8C*28            [24] 1563 	mov	_drawCircle_sloc1_1_0,r4
      000491 8D*29            [24] 1564 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      000493 85*1E*2A         [24] 1565 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      000496 85*1F*2B         [24] 1566 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      000499 EA               [12] 1567 	mov	a,r2
      00049A 25*2A            [12] 1568 	add	a,_drawCircle_sloc2_1_0
      00049C FC               [12] 1569 	mov	r4,a
      00049D EB               [12] 1570 	mov	a,r3
      00049E 35*2B            [12] 1571 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004A0 FD               [12] 1572 	mov	r5,a
      0004A1 8C*2C            [24] 1573 	mov	_drawCircle_sloc3_1_0,r4
      0004A3 8D*2D            [24] 1574 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004A5 85*2C*1A         [24] 1575 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004A8 85*2D*1B         [24] 1576 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004AB 85*22*1C         [24] 1577 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004AE 85*23*1D         [24] 1578 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004B1 85*28 82         [24] 1579 	mov	dpl,_drawCircle_sloc1_1_0
      0004B4 85*29 83         [24] 1580 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004B7 C0 07            [24] 1581 	push	ar7
      0004B9 C0 06            [24] 1582 	push	ar6
      0004BB C0 05            [24] 1583 	push	ar5
      0004BD C0 04            [24] 1584 	push	ar4
      0004BF C0 03            [24] 1585 	push	ar3
      0004C1 C0 02            [24] 1586 	push	ar2
      0004C3 C0 01            [24] 1587 	push	ar1
      0004C5 C0 00            [24] 1588 	push	ar0
      0004C7 12r03r1E         [24] 1589 	lcall	_drawPixel
      0004CA D0 00            [24] 1590 	pop	ar0
      0004CC D0 01            [24] 1591 	pop	ar1
      0004CE D0 02            [24] 1592 	pop	ar2
      0004D0 D0 03            [24] 1593 	pop	ar3
      0004D2 D0 04            [24] 1594 	pop	ar4
      0004D4 D0 05            [24] 1595 	pop	ar5
      0004D6 D0 06            [24] 1596 	pop	ar6
      0004D8 D0 07            [24] 1597 	pop	ar7
                                   1598 ;	ecen4330_lcd_v3.c:273: drawPixel(x0 - x, y0 + y, color);
      0004DA EE               [12] 1599 	mov	a,r6
      0004DB C3               [12] 1600 	clr	c
      0004DC 98               [12] 1601 	subb	a,r0
      0004DD FC               [12] 1602 	mov	r4,a
      0004DE EF               [12] 1603 	mov	a,r7
      0004DF 99               [12] 1604 	subb	a,r1
      0004E0 FD               [12] 1605 	mov	r5,a
      0004E1 8C*2E            [24] 1606 	mov	_drawCircle_sloc4_1_0,r4
      0004E3 8D*2F            [24] 1607 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0004E5 85*2C*1A         [24] 1608 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004E8 85*2D*1B         [24] 1609 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EB 85*22*1C         [24] 1610 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004EE 85*23*1D         [24] 1611 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F1 85*2E 82         [24] 1612 	mov	dpl,_drawCircle_sloc4_1_0
      0004F4 85*2F 83         [24] 1613 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0004F7 C0 07            [24] 1614 	push	ar7
      0004F9 C0 06            [24] 1615 	push	ar6
      0004FB C0 05            [24] 1616 	push	ar5
      0004FD C0 04            [24] 1617 	push	ar4
      0004FF C0 03            [24] 1618 	push	ar3
      000501 C0 02            [24] 1619 	push	ar2
      000503 C0 01            [24] 1620 	push	ar1
      000505 C0 00            [24] 1621 	push	ar0
      000507 12r03r1E         [24] 1622 	lcall	_drawPixel
      00050A D0 00            [24] 1623 	pop	ar0
      00050C D0 01            [24] 1624 	pop	ar1
      00050E D0 02            [24] 1625 	pop	ar2
      000510 D0 03            [24] 1626 	pop	ar3
      000512 D0 04            [24] 1627 	pop	ar4
      000514 D0 05            [24] 1628 	pop	ar5
                                   1629 ;	ecen4330_lcd_v3.c:274: drawPixel(x0 + x, y0 - y, color);
      000516 E5*2A            [12] 1630 	mov	a,_drawCircle_sloc2_1_0
      000518 C3               [12] 1631 	clr	c
      000519 9A               [12] 1632 	subb	a,r2
      00051A FC               [12] 1633 	mov	r4,a
      00051B E5*2B            [12] 1634 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00051D 9B               [12] 1635 	subb	a,r3
      00051E FD               [12] 1636 	mov	r5,a
      00051F 8C*1A            [24] 1637 	mov	_drawPixel_PARM_2,r4
      000521 8D*1B            [24] 1638 	mov	(_drawPixel_PARM_2 + 1),r5
      000523 85*22*1C         [24] 1639 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000526 85*23*1D         [24] 1640 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000529 85*28 82         [24] 1641 	mov	dpl,_drawCircle_sloc1_1_0
      00052C 85*29 83         [24] 1642 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      00052F C0 05            [24] 1643 	push	ar5
      000531 C0 04            [24] 1644 	push	ar4
      000533 C0 03            [24] 1645 	push	ar3
      000535 C0 02            [24] 1646 	push	ar2
      000537 C0 01            [24] 1647 	push	ar1
      000539 C0 00            [24] 1648 	push	ar0
      00053B 12r03r1E         [24] 1649 	lcall	_drawPixel
      00053E D0 00            [24] 1650 	pop	ar0
      000540 D0 01            [24] 1651 	pop	ar1
      000542 D0 02            [24] 1652 	pop	ar2
      000544 D0 03            [24] 1653 	pop	ar3
      000546 D0 04            [24] 1654 	pop	ar4
      000548 D0 05            [24] 1655 	pop	ar5
                                   1656 ;	ecen4330_lcd_v3.c:275: drawPixel(x0 - x, y0 - y, color);
      00054A 8C*1A            [24] 1657 	mov	_drawPixel_PARM_2,r4
      00054C 8D*1B            [24] 1658 	mov	(_drawPixel_PARM_2 + 1),r5
      00054E 85*22*1C         [24] 1659 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000551 85*23*1D         [24] 1660 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000554 85*2E 82         [24] 1661 	mov	dpl,_drawCircle_sloc4_1_0
      000557 85*2F 83         [24] 1662 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00055A C0 05            [24] 1663 	push	ar5
      00055C C0 04            [24] 1664 	push	ar4
      00055E C0 03            [24] 1665 	push	ar3
      000560 C0 02            [24] 1666 	push	ar2
      000562 C0 01            [24] 1667 	push	ar1
      000564 C0 00            [24] 1668 	push	ar0
      000566 12r03r1E         [24] 1669 	lcall	_drawPixel
      000569 D0 00            [24] 1670 	pop	ar0
      00056B D0 01            [24] 1671 	pop	ar1
      00056D D0 02            [24] 1672 	pop	ar2
      00056F D0 03            [24] 1673 	pop	ar3
      000571 D0 04            [24] 1674 	pop	ar4
      000573 D0 05            [24] 1675 	pop	ar5
      000575 D0 06            [24] 1676 	pop	ar6
      000577 D0 07            [24] 1677 	pop	ar7
                                   1678 ;	ecen4330_lcd_v3.c:276: drawPixel(x0 + y, y0 + x, color);
      000579 EA               [12] 1679 	mov	a,r2
      00057A 2E               [12] 1680 	add	a,r6
      00057B FC               [12] 1681 	mov	r4,a
      00057C EB               [12] 1682 	mov	a,r3
      00057D 3F               [12] 1683 	addc	a,r7
      00057E FD               [12] 1684 	mov	r5,a
      00057F 8C*2E            [24] 1685 	mov	_drawCircle_sloc4_1_0,r4
      000581 8D*2F            [24] 1686 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000583 E8               [12] 1687 	mov	a,r0
      000584 25*2A            [12] 1688 	add	a,_drawCircle_sloc2_1_0
      000586 FC               [12] 1689 	mov	r4,a
      000587 E9               [12] 1690 	mov	a,r1
      000588 35*2B            [12] 1691 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      00058A FD               [12] 1692 	mov	r5,a
      00058B 8C*1A            [24] 1693 	mov	_drawPixel_PARM_2,r4
      00058D 8D*1B            [24] 1694 	mov	(_drawPixel_PARM_2 + 1),r5
      00058F 85*22*1C         [24] 1695 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000592 85*23*1D         [24] 1696 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000595 85*2E 82         [24] 1697 	mov	dpl,_drawCircle_sloc4_1_0
      000598 85*2F 83         [24] 1698 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059B C0 07            [24] 1699 	push	ar7
      00059D C0 06            [24] 1700 	push	ar6
      00059F C0 05            [24] 1701 	push	ar5
      0005A1 C0 04            [24] 1702 	push	ar4
      0005A3 C0 03            [24] 1703 	push	ar3
      0005A5 C0 02            [24] 1704 	push	ar2
      0005A7 C0 01            [24] 1705 	push	ar1
      0005A9 C0 00            [24] 1706 	push	ar0
      0005AB 12r03r1E         [24] 1707 	lcall	_drawPixel
      0005AE D0 00            [24] 1708 	pop	ar0
      0005B0 D0 01            [24] 1709 	pop	ar1
      0005B2 D0 02            [24] 1710 	pop	ar2
      0005B4 D0 03            [24] 1711 	pop	ar3
      0005B6 D0 04            [24] 1712 	pop	ar4
      0005B8 D0 05            [24] 1713 	pop	ar5
      0005BA D0 06            [24] 1714 	pop	ar6
      0005BC D0 07            [24] 1715 	pop	ar7
                                   1716 ;	ecen4330_lcd_v3.c:277: drawPixel(x0 - y, y0 + x, color);
      0005BE EE               [12] 1717 	mov	a,r6
      0005BF C3               [12] 1718 	clr	c
      0005C0 9A               [12] 1719 	subb	a,r2
      0005C1 FE               [12] 1720 	mov	r6,a
      0005C2 EF               [12] 1721 	mov	a,r7
      0005C3 9B               [12] 1722 	subb	a,r3
      0005C4 FF               [12] 1723 	mov	r7,a
      0005C5 8C*1A            [24] 1724 	mov	_drawPixel_PARM_2,r4
      0005C7 8D*1B            [24] 1725 	mov	(_drawPixel_PARM_2 + 1),r5
      0005C9 85*22*1C         [24] 1726 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005CC 85*23*1D         [24] 1727 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005CF 8E 82            [24] 1728 	mov	dpl,r6
      0005D1 8F 83            [24] 1729 	mov	dph,r7
      0005D3 C0 07            [24] 1730 	push	ar7
      0005D5 C0 06            [24] 1731 	push	ar6
      0005D7 C0 05            [24] 1732 	push	ar5
      0005D9 C0 04            [24] 1733 	push	ar4
      0005DB C0 03            [24] 1734 	push	ar3
      0005DD C0 02            [24] 1735 	push	ar2
      0005DF C0 01            [24] 1736 	push	ar1
      0005E1 C0 00            [24] 1737 	push	ar0
      0005E3 12r03r1E         [24] 1738 	lcall	_drawPixel
      0005E6 D0 00            [24] 1739 	pop	ar0
      0005E8 D0 01            [24] 1740 	pop	ar1
      0005EA D0 02            [24] 1741 	pop	ar2
      0005EC D0 03            [24] 1742 	pop	ar3
      0005EE D0 04            [24] 1743 	pop	ar4
      0005F0 D0 05            [24] 1744 	pop	ar5
                                   1745 ;	ecen4330_lcd_v3.c:278: drawPixel(x0 + y, y0 - x, color);
      0005F2 E5*2A            [12] 1746 	mov	a,_drawCircle_sloc2_1_0
      0005F4 C3               [12] 1747 	clr	c
      0005F5 98               [12] 1748 	subb	a,r0
      0005F6 FC               [12] 1749 	mov	r4,a
      0005F7 E5*2B            [12] 1750 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      0005F9 99               [12] 1751 	subb	a,r1
      0005FA FD               [12] 1752 	mov	r5,a
      0005FB 8C*1A            [24] 1753 	mov	_drawPixel_PARM_2,r4
      0005FD 8D*1B            [24] 1754 	mov	(_drawPixel_PARM_2 + 1),r5
      0005FF 85*22*1C         [24] 1755 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000602 85*23*1D         [24] 1756 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000605 85*2E 82         [24] 1757 	mov	dpl,_drawCircle_sloc4_1_0
      000608 85*2F 83         [24] 1758 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00060B C0 05            [24] 1759 	push	ar5
      00060D C0 04            [24] 1760 	push	ar4
      00060F C0 03            [24] 1761 	push	ar3
      000611 C0 02            [24] 1762 	push	ar2
      000613 C0 01            [24] 1763 	push	ar1
      000615 C0 00            [24] 1764 	push	ar0
      000617 12r03r1E         [24] 1765 	lcall	_drawPixel
      00061A D0 00            [24] 1766 	pop	ar0
      00061C D0 01            [24] 1767 	pop	ar1
      00061E D0 02            [24] 1768 	pop	ar2
      000620 D0 03            [24] 1769 	pop	ar3
      000622 D0 04            [24] 1770 	pop	ar4
      000624 D0 05            [24] 1771 	pop	ar5
      000626 D0 06            [24] 1772 	pop	ar6
      000628 D0 07            [24] 1773 	pop	ar7
                                   1774 ;	ecen4330_lcd_v3.c:279: drawPixel(x0 - y, y0 - x, color);
      00062A 8C*1A            [24] 1775 	mov	_drawPixel_PARM_2,r4
      00062C 8D*1B            [24] 1776 	mov	(_drawPixel_PARM_2 + 1),r5
      00062E 85*22*1C         [24] 1777 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000631 85*23*1D         [24] 1778 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000634 8E 82            [24] 1779 	mov	dpl,r6
      000636 8F 83            [24] 1780 	mov	dph,r7
      000638 C0 05            [24] 1781 	push	ar5
      00063A C0 04            [24] 1782 	push	ar4
      00063C C0 03            [24] 1783 	push	ar3
      00063E C0 02            [24] 1784 	push	ar2
      000640 C0 01            [24] 1785 	push	ar1
      000642 C0 00            [24] 1786 	push	ar0
      000644 12r03r1E         [24] 1787 	lcall	_drawPixel
      000647 D0 00            [24] 1788 	pop	ar0
      000649 D0 01            [24] 1789 	pop	ar1
      00064B D0 02            [24] 1790 	pop	ar2
      00064D D0 03            [24] 1791 	pop	ar3
      00064F D0 04            [24] 1792 	pop	ar4
      000651 D0 05            [24] 1793 	pop	ar5
      000653 D0 05            [24] 1794 	pop	ar5
      000655 D0 04            [24] 1795 	pop	ar4
                                   1796 ;	ecen4330_lcd_v3.c:281: }
      000657 02r04r28         [24] 1797 	ljmp	00103$
                                   1798 ;------------------------------------------------------------
                                   1799 ;Allocation info for local variables in function 'testCircles'
                                   1800 ;------------------------------------------------------------
                                   1801 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1802 ;radius                    Allocated with name '_testCircles_radius_65536_107'
                                   1803 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1804 ;x                         Allocated with name '_testCircles_x_65536_108'
                                   1805 ;y                         Allocated with name '_testCircles_y_65536_108'
                                   1806 ;r2                        Allocated with name '_testCircles_r2_65536_108'
                                   1807 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1808 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1809 ;------------------------------------------------------------
                                   1810 ;	ecen4330_lcd_v3.c:289: void testCircles (uint8_t radius, uint16_t color) {
                                   1811 ;	-----------------------------------------
                                   1812 ;	 function testCircles
                                   1813 ;	-----------------------------------------
      00065A                       1814 _testCircles:
      00065A 85 82*32         [24] 1815 	mov	_testCircles_radius_65536_107,dpl
                                   1816 ;	ecen4330_lcd_v3.c:290: __xdata int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00065D AD*32            [24] 1817 	mov	r5,_testCircles_radius_65536_107
      00065F 7E 00            [12] 1818 	mov	r6,#0x00
      000661 ED               [12] 1819 	mov	a,r5
      000662 2D               [12] 1820 	add	a,r5
      000663 FB               [12] 1821 	mov	r3,a
      000664 EE               [12] 1822 	mov	a,r6
      000665 33               [12] 1823 	rlc	a
      000666 FC               [12] 1824 	mov	r4,a
      000667 A9*16            [24] 1825 	mov	r1,__width
      000669 AA*17            [24] 1826 	mov	r2,(__width + 1)
      00066B ED               [12] 1827 	mov	a,r5
      00066C 29               [12] 1828 	add	a,r1
      00066D F9               [12] 1829 	mov	r1,a
      00066E EE               [12] 1830 	mov	a,r6
      00066F 3A               [12] 1831 	addc	a,r2
      000670 FA               [12] 1832 	mov	r2,a
      000671 AF*18            [24] 1833 	mov	r7,__height
      000673 A8*19            [24] 1834 	mov	r0,(__height + 1)
      000675 ED               [12] 1835 	mov	a,r5
      000676 2F               [12] 1836 	add	a,r7
      000677 FF               [12] 1837 	mov	r7,a
      000678 EE               [12] 1838 	mov	a,r6
      000679 38               [12] 1839 	addc	a,r0
      00067A FE               [12] 1840 	mov	r6,a
                                   1841 ;	ecen4330_lcd_v3.c:292: for(x=0; x<w; x+=r2) {
      00067B 90r00r02         [24] 1842 	mov	dptr,#_testCircles_x_65536_108
      00067E E4               [12] 1843 	clr	a
      00067F F0               [24] 1844 	movx	@dptr,a
      000680 A3               [24] 1845 	inc	dptr
      000681 F0               [24] 1846 	movx	@dptr,a
      000682                       1847 00107$:
      000682 90r00r02         [24] 1848 	mov	dptr,#_testCircles_x_65536_108
      000685 E0               [24] 1849 	movx	a,@dptr
      000686 F8               [12] 1850 	mov	r0,a
      000687 A3               [24] 1851 	inc	dptr
      000688 E0               [24] 1852 	movx	a,@dptr
      000689 FD               [12] 1853 	mov	r5,a
      00068A C3               [12] 1854 	clr	c
      00068B E8               [12] 1855 	mov	a,r0
      00068C 99               [12] 1856 	subb	a,r1
      00068D ED               [12] 1857 	mov	a,r5
      00068E 64 80            [12] 1858 	xrl	a,#0x80
      000690 8A F0            [24] 1859 	mov	b,r2
      000692 63 F0 80         [24] 1860 	xrl	b,#0x80
      000695 95 F0            [12] 1861 	subb	a,b
      000697 40 01            [24] 1862 	jc	00127$
      000699 22               [24] 1863 	ret
      00069A                       1864 00127$:
                                   1865 ;	ecen4330_lcd_v3.c:293: for(y=0; y<h; y+=r2) {
      00069A 90r00r04         [24] 1866 	mov	dptr,#_testCircles_y_65536_108
      00069D E4               [12] 1867 	clr	a
      00069E F0               [24] 1868 	movx	@dptr,a
      00069F A3               [24] 1869 	inc	dptr
      0006A0 F0               [24] 1870 	movx	@dptr,a
      0006A1                       1871 00104$:
      0006A1 90r00r04         [24] 1872 	mov	dptr,#_testCircles_y_65536_108
      0006A4 E0               [24] 1873 	movx	a,@dptr
      0006A5 F5*33            [12] 1874 	mov	_testCircles_sloc0_1_0,a
      0006A7 A3               [24] 1875 	inc	dptr
      0006A8 E0               [24] 1876 	movx	a,@dptr
      0006A9 F5*34            [12] 1877 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006AB C3               [12] 1878 	clr	c
      0006AC E5*33            [12] 1879 	mov	a,_testCircles_sloc0_1_0
      0006AE 9F               [12] 1880 	subb	a,r7
      0006AF E5*34            [12] 1881 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006B1 64 80            [12] 1882 	xrl	a,#0x80
      0006B3 8E F0            [24] 1883 	mov	b,r6
      0006B5 63 F0 80         [24] 1884 	xrl	b,#0x80
      0006B8 95 F0            [12] 1885 	subb	a,b
      0006BA 50 47            [24] 1886 	jnc	00108$
                                   1887 ;	ecen4330_lcd_v3.c:294: drawCircle(x, y, radius, color);
      0006BC 88 82            [24] 1888 	mov	dpl,r0
      0006BE 8D 83            [24] 1889 	mov	dph,r5
      0006C0 85*33*1E         [24] 1890 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      0006C3 85*34*1F         [24] 1891 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      0006C6 85*32*20         [24] 1892 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_107
      0006C9 75*21 00         [24] 1893 	mov	(_drawCircle_PARM_3 + 1),#0x00
      0006CC 85*30*22         [24] 1894 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      0006CF 85*31*23         [24] 1895 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      0006D2 C0 07            [24] 1896 	push	ar7
      0006D4 C0 06            [24] 1897 	push	ar6
      0006D6 C0 05            [24] 1898 	push	ar5
      0006D8 C0 04            [24] 1899 	push	ar4
      0006DA C0 03            [24] 1900 	push	ar3
      0006DC C0 02            [24] 1901 	push	ar2
      0006DE C0 01            [24] 1902 	push	ar1
      0006E0 C0 00            [24] 1903 	push	ar0
      0006E2 12r03r75         [24] 1904 	lcall	_drawCircle
      0006E5 D0 00            [24] 1905 	pop	ar0
      0006E7 D0 01            [24] 1906 	pop	ar1
      0006E9 D0 02            [24] 1907 	pop	ar2
      0006EB D0 03            [24] 1908 	pop	ar3
      0006ED D0 04            [24] 1909 	pop	ar4
      0006EF D0 05            [24] 1910 	pop	ar5
      0006F1 D0 06            [24] 1911 	pop	ar6
      0006F3 D0 07            [24] 1912 	pop	ar7
                                   1913 ;	ecen4330_lcd_v3.c:293: for(y=0; y<h; y+=r2) {
      0006F5 90r00r04         [24] 1914 	mov	dptr,#_testCircles_y_65536_108
      0006F8 EB               [12] 1915 	mov	a,r3
      0006F9 25*33            [12] 1916 	add	a,_testCircles_sloc0_1_0
      0006FB F0               [24] 1917 	movx	@dptr,a
      0006FC EC               [12] 1918 	mov	a,r4
      0006FD 35*34            [12] 1919 	addc	a,(_testCircles_sloc0_1_0 + 1)
      0006FF A3               [24] 1920 	inc	dptr
      000700 F0               [24] 1921 	movx	@dptr,a
      000701 80 9E            [24] 1922 	sjmp	00104$
      000703                       1923 00108$:
                                   1924 ;	ecen4330_lcd_v3.c:292: for(x=0; x<w; x+=r2) {
      000703 90r00r02         [24] 1925 	mov	dptr,#_testCircles_x_65536_108
      000706 E0               [24] 1926 	movx	a,@dptr
      000707 F8               [12] 1927 	mov	r0,a
      000708 A3               [24] 1928 	inc	dptr
      000709 E0               [24] 1929 	movx	a,@dptr
      00070A FD               [12] 1930 	mov	r5,a
      00070B 90r00r02         [24] 1931 	mov	dptr,#_testCircles_x_65536_108
      00070E EB               [12] 1932 	mov	a,r3
      00070F 28               [12] 1933 	add	a,r0
      000710 F0               [24] 1934 	movx	@dptr,a
      000711 EC               [12] 1935 	mov	a,r4
      000712 3D               [12] 1936 	addc	a,r5
      000713 A3               [24] 1937 	inc	dptr
      000714 F0               [24] 1938 	movx	@dptr,a
                                   1939 ;	ecen4330_lcd_v3.c:297: }
      000715 02r06r82         [24] 1940 	ljmp	00107$
                                   1941 ;------------------------------------------------------------
                                   1942 ;Allocation info for local variables in function 'fillRect'
                                   1943 ;------------------------------------------------------------
                                   1944 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1945 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1946 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1947 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1948 ;x                         Allocated to registers 
                                   1949 ;------------------------------------------------------------
                                   1950 ;	ecen4330_lcd_v3.c:299: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1951 ;	-----------------------------------------
                                   1952 ;	 function fillRect
                                   1953 ;	-----------------------------------------
      000718                       1954 _fillRect:
      000718 AE 82            [24] 1955 	mov	r6,dpl
      00071A AF 83            [24] 1956 	mov	r7,dph
                                   1957 ;	ecen4330_lcd_v3.c:300: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      00071C 8E 04            [24] 1958 	mov	ar4,r6
      00071E 8F 05            [24] 1959 	mov	ar5,r7
      000720 C3               [12] 1960 	clr	c
      000721 EC               [12] 1961 	mov	a,r4
      000722 94 F0            [12] 1962 	subb	a,#0xf0
      000724 ED               [12] 1963 	mov	a,r5
      000725 94 00            [12] 1964 	subb	a,#0x00
      000727 50 0D            [24] 1965 	jnc	00101$
      000729 AC*35            [24] 1966 	mov	r4,_fillRect_PARM_2
      00072B AD*36            [24] 1967 	mov	r5,(_fillRect_PARM_2 + 1)
      00072D C3               [12] 1968 	clr	c
      00072E EC               [12] 1969 	mov	a,r4
      00072F 94 40            [12] 1970 	subb	a,#0x40
      000731 ED               [12] 1971 	mov	a,r5
      000732 94 01            [12] 1972 	subb	a,#0x01
      000734 40 01            [24] 1973 	jc	00102$
      000736                       1974 00101$:
                                   1975 ;	ecen4330_lcd_v3.c:302: return;
      000736 22               [24] 1976 	ret
      000737                       1977 00102$:
                                   1978 ;	ecen4330_lcd_v3.c:305: if ((x+w-1) >= TFTWIDTH)
      000737 E5*37            [12] 1979 	mov	a,_fillRect_PARM_3
      000739 2E               [12] 1980 	add	a,r6
      00073A FC               [12] 1981 	mov	r4,a
      00073B E5*38            [12] 1982 	mov	a,(_fillRect_PARM_3 + 1)
      00073D 3F               [12] 1983 	addc	a,r7
      00073E FD               [12] 1984 	mov	r5,a
      00073F 1C               [12] 1985 	dec	r4
      000740 BC FF 01         [24] 1986 	cjne	r4,#0xff,00161$
      000743 1D               [12] 1987 	dec	r5
      000744                       1988 00161$:
      000744 C3               [12] 1989 	clr	c
      000745 EC               [12] 1990 	mov	a,r4
      000746 94 F0            [12] 1991 	subb	a,#0xf0
      000748 ED               [12] 1992 	mov	a,r5
      000749 94 00            [12] 1993 	subb	a,#0x00
      00074B 40 0A            [24] 1994 	jc	00105$
                                   1995 ;	ecen4330_lcd_v3.c:307: w = TFTWIDTH-x;
      00074D 74 F0            [12] 1996 	mov	a,#0xf0
      00074F C3               [12] 1997 	clr	c
      000750 9E               [12] 1998 	subb	a,r6
      000751 F5*37            [12] 1999 	mov	_fillRect_PARM_3,a
      000753 E4               [12] 2000 	clr	a
      000754 9F               [12] 2001 	subb	a,r7
      000755 F5*38            [12] 2002 	mov	(_fillRect_PARM_3 + 1),a
      000757                       2003 00105$:
                                   2004 ;	ecen4330_lcd_v3.c:310: if ((y+h-1) >= TFTHEIGHT)
      000757 E5*39            [12] 2005 	mov	a,_fillRect_PARM_4
      000759 25*35            [12] 2006 	add	a,_fillRect_PARM_2
      00075B FC               [12] 2007 	mov	r4,a
      00075C E5*3A            [12] 2008 	mov	a,(_fillRect_PARM_4 + 1)
      00075E 35*36            [12] 2009 	addc	a,(_fillRect_PARM_2 + 1)
      000760 FD               [12] 2010 	mov	r5,a
      000761 1C               [12] 2011 	dec	r4
      000762 BC FF 01         [24] 2012 	cjne	r4,#0xff,00163$
      000765 1D               [12] 2013 	dec	r5
      000766                       2014 00163$:
      000766 C3               [12] 2015 	clr	c
      000767 EC               [12] 2016 	mov	a,r4
      000768 94 40            [12] 2017 	subb	a,#0x40
      00076A ED               [12] 2018 	mov	a,r5
      00076B 94 01            [12] 2019 	subb	a,#0x01
      00076D 40 0D            [24] 2020 	jc	00107$
                                   2021 ;	ecen4330_lcd_v3.c:312: h = TFTHEIGHT-y;
      00076F 74 40            [12] 2022 	mov	a,#0x40
      000771 C3               [12] 2023 	clr	c
      000772 95*35            [12] 2024 	subb	a,_fillRect_PARM_2
      000774 F5*39            [12] 2025 	mov	_fillRect_PARM_4,a
      000776 74 01            [12] 2026 	mov	a,#0x01
      000778 95*36            [12] 2027 	subb	a,(_fillRect_PARM_2 + 1)
      00077A F5*3A            [12] 2028 	mov	(_fillRect_PARM_4 + 1),a
      00077C                       2029 00107$:
                                   2030 ;	ecen4330_lcd_v3.c:315: setAddress(x, y, x+w-1, y+h-1);
      00077C E5*37            [12] 2031 	mov	a,_fillRect_PARM_3
      00077E 2E               [12] 2032 	add	a,r6
      00077F FC               [12] 2033 	mov	r4,a
      000780 E5*38            [12] 2034 	mov	a,(_fillRect_PARM_3 + 1)
      000782 3F               [12] 2035 	addc	a,r7
      000783 FD               [12] 2036 	mov	r5,a
      000784 1C               [12] 2037 	dec	r4
      000785 BC FF 01         [24] 2038 	cjne	r4,#0xff,00165$
      000788 1D               [12] 2039 	dec	r5
      000789                       2040 00165$:
      000789 8C*02            [24] 2041 	mov	_setAddress_PARM_3,r4
      00078B 8D*03            [24] 2042 	mov	(_setAddress_PARM_3 + 1),r5
      00078D E5*39            [12] 2043 	mov	a,_fillRect_PARM_4
      00078F 25*35            [12] 2044 	add	a,_fillRect_PARM_2
      000791 FC               [12] 2045 	mov	r4,a
      000792 E5*3A            [12] 2046 	mov	a,(_fillRect_PARM_4 + 1)
      000794 35*36            [12] 2047 	addc	a,(_fillRect_PARM_2 + 1)
      000796 FD               [12] 2048 	mov	r5,a
      000797 1C               [12] 2049 	dec	r4
      000798 BC FF 01         [24] 2050 	cjne	r4,#0xff,00166$
      00079B 1D               [12] 2051 	dec	r5
      00079C                       2052 00166$:
      00079C 8C*04            [24] 2053 	mov	_setAddress_PARM_4,r4
      00079E 8D*05            [24] 2054 	mov	(_setAddress_PARM_4 + 1),r5
      0007A0 85*35*00         [24] 2055 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007A3 85*36*01         [24] 2056 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007A6 8E 82            [24] 2057 	mov	dpl,r6
      0007A8 8F 83            [24] 2058 	mov	dph,r7
      0007AA 12r01r42         [24] 2059 	lcall	_setAddress
                                   2060 ;	ecen4330_lcd_v3.c:318: write8Reg(0x2C);
                                   2061 ;	assignBit
      0007AD C2 B5            [12] 2062 	clr	_P3_5
                                   2063 ;	assignBit
      0007AF D2 B4            [12] 2064 	setb	_P3_4
      0007B1 85*02 82         [24] 2065 	mov	dpl,_lcd_address
      0007B4 85*03 83         [24] 2066 	mov	dph,(_lcd_address + 1)
      0007B7 74 2C            [12] 2067 	mov	a,#0x2c
      0007B9 F0               [24] 2068 	movx	@dptr,a
                                   2069 ;	assignBit
      0007BA C2 B4            [12] 2070 	clr	_P3_4
                                   2071 ;	ecen4330_lcd_v3.c:319: CD = 1;
                                   2072 ;	assignBit
      0007BC D2 B5            [12] 2073 	setb	_P3_5
                                   2074 ;	ecen4330_lcd_v3.c:320: for(y=h; y>0; y--)
      0007BE AF*3C            [24] 2075 	mov	r7,(_fillRect_PARM_5 + 1)
      0007C0 AD*39            [24] 2076 	mov	r5,_fillRect_PARM_4
      0007C2 AE*3A            [24] 2077 	mov	r6,(_fillRect_PARM_4 + 1)
      0007C4                       2078 00114$:
      0007C4 ED               [12] 2079 	mov	a,r5
      0007C5 4E               [12] 2080 	orl	a,r6
      0007C6 60 30            [24] 2081 	jz	00116$
                                   2082 ;	ecen4330_lcd_v3.c:322: for(x=w; x>0; x--)
      0007C8 AB*37            [24] 2083 	mov	r3,_fillRect_PARM_3
      0007CA AC*38            [24] 2084 	mov	r4,(_fillRect_PARM_3 + 1)
      0007CC                       2085 00111$:
      0007CC EB               [12] 2086 	mov	a,r3
      0007CD 4C               [12] 2087 	orl	a,r4
      0007CE 60 21            [24] 2088 	jz	00115$
                                   2089 ;	ecen4330_lcd_v3.c:325: write8(color>>8); write8(color);
                                   2090 ;	assignBit
      0007D0 D2 B4            [12] 2091 	setb	_P3_4
      0007D2 85*02 82         [24] 2092 	mov	dpl,_lcd_address
      0007D5 85*03 83         [24] 2093 	mov	dph,(_lcd_address + 1)
      0007D8 EF               [12] 2094 	mov	a,r7
      0007D9 F0               [24] 2095 	movx	@dptr,a
                                   2096 ;	assignBit
      0007DA C2 B4            [12] 2097 	clr	_P3_4
                                   2098 ;	assignBit
      0007DC D2 B4            [12] 2099 	setb	_P3_4
      0007DE 85*02 82         [24] 2100 	mov	dpl,_lcd_address
      0007E1 85*03 83         [24] 2101 	mov	dph,(_lcd_address + 1)
      0007E4 E5*3B            [12] 2102 	mov	a,_fillRect_PARM_5
      0007E6 FA               [12] 2103 	mov	r2,a
      0007E7 F0               [24] 2104 	movx	@dptr,a
                                   2105 ;	assignBit
      0007E8 C2 B4            [12] 2106 	clr	_P3_4
                                   2107 ;	ecen4330_lcd_v3.c:322: for(x=w; x>0; x--)
      0007EA 1B               [12] 2108 	dec	r3
      0007EB BB FF 01         [24] 2109 	cjne	r3,#0xff,00169$
      0007EE 1C               [12] 2110 	dec	r4
      0007EF                       2111 00169$:
      0007EF 80 DB            [24] 2112 	sjmp	00111$
      0007F1                       2113 00115$:
                                   2114 ;	ecen4330_lcd_v3.c:320: for(y=h; y>0; y--)
      0007F1 1D               [12] 2115 	dec	r5
      0007F2 BD FF 01         [24] 2116 	cjne	r5,#0xff,00170$
      0007F5 1E               [12] 2117 	dec	r6
      0007F6                       2118 00170$:
      0007F6 80 CC            [24] 2119 	sjmp	00114$
      0007F8                       2120 00116$:
                                   2121 ;	ecen4330_lcd_v3.c:329: }
      0007F8 22               [24] 2122 	ret
                                   2123 ;------------------------------------------------------------
                                   2124 ;Allocation info for local variables in function 'fillScreen'
                                   2125 ;------------------------------------------------------------
                                   2126 ;Color                     Allocated to registers r6 r7 
                                   2127 ;len                       Allocated with name '_fillScreen_len_65536_127'
                                   2128 ;blocks                    Allocated with name '_fillScreen_blocks_65536_127'
                                   2129 ;i                         Allocated with name '_fillScreen_i_65536_127'
                                   2130 ;hi                        Allocated with name '_fillScreen_hi_65536_127'
                                   2131 ;lo                        Allocated with name '_fillScreen_lo_65536_127'
                                   2132 ;------------------------------------------------------------
                                   2133 ;	ecen4330_lcd_v3.c:336: void fillScreen (uint16_t Color) {
                                   2134 ;	-----------------------------------------
                                   2135 ;	 function fillScreen
                                   2136 ;	-----------------------------------------
      0007F9                       2137 _fillScreen:
      0007F9 AE 82            [24] 2138 	mov	r6,dpl
      0007FB AF 83            [24] 2139 	mov	r7,dph
                                   2140 ;	ecen4330_lcd_v3.c:341: __xdata uint8_t  i, hi = Color >> 8,
      0007FD 8F 05            [24] 2141 	mov	ar5,r7
                                   2142 ;	ecen4330_lcd_v3.c:342: lo = Color;
                                   2143 ;	ecen4330_lcd_v3.c:345: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007FF E4               [12] 2144 	clr	a
      000800 F5*00            [12] 2145 	mov	_setAddress_PARM_2,a
      000802 F5*01            [12] 2146 	mov	(_setAddress_PARM_2 + 1),a
      000804 75*02 EF         [24] 2147 	mov	_setAddress_PARM_3,#0xef
                                   2148 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000807 F5*03            [12] 2149 	mov	(_setAddress_PARM_3 + 1),a
      000809 75*04 3F         [24] 2150 	mov	_setAddress_PARM_4,#0x3f
      00080C 75*05 01         [24] 2151 	mov	(_setAddress_PARM_4 + 1),#0x01
      00080F 90 00 00         [24] 2152 	mov	dptr,#0x0000
      000812 C0 06            [24] 2153 	push	ar6
      000814 C0 05            [24] 2154 	push	ar5
      000816 12r01r42         [24] 2155 	lcall	_setAddress
      000819 D0 05            [24] 2156 	pop	ar5
      00081B D0 06            [24] 2157 	pop	ar6
                                   2158 ;	ecen4330_lcd_v3.c:347: write8Reg(0x2C);
                                   2159 ;	assignBit
      00081D C2 B5            [12] 2160 	clr	_P3_5
                                   2161 ;	assignBit
      00081F D2 B4            [12] 2162 	setb	_P3_4
      000821 85*02 82         [24] 2163 	mov	dpl,_lcd_address
      000824 85*03 83         [24] 2164 	mov	dph,(_lcd_address + 1)
      000827 74 2C            [12] 2165 	mov	a,#0x2c
      000829 F0               [24] 2166 	movx	@dptr,a
                                   2167 ;	assignBit
      00082A C2 B4            [12] 2168 	clr	_P3_4
                                   2169 ;	ecen4330_lcd_v3.c:348: CD = 1;
                                   2170 ;	assignBit
      00082C D2 B5            [12] 2171 	setb	_P3_5
                                   2172 ;	ecen4330_lcd_v3.c:349: write8(hi); write8(lo);
                                   2173 ;	assignBit
      00082E D2 B4            [12] 2174 	setb	_P3_4
      000830 85*02 82         [24] 2175 	mov	dpl,_lcd_address
      000833 85*03 83         [24] 2176 	mov	dph,(_lcd_address + 1)
      000836 ED               [12] 2177 	mov	a,r5
      000837 F0               [24] 2178 	movx	@dptr,a
                                   2179 ;	assignBit
      000838 C2 B4            [12] 2180 	clr	_P3_4
                                   2181 ;	assignBit
      00083A D2 B4            [12] 2182 	setb	_P3_4
      00083C 85*02 82         [24] 2183 	mov	dpl,_lcd_address
      00083F 85*03 83         [24] 2184 	mov	dph,(_lcd_address + 1)
      000842 EE               [12] 2185 	mov	a,r6
      000843 F0               [24] 2186 	movx	@dptr,a
                                   2187 ;	assignBit
      000844 C2 B4            [12] 2188 	clr	_P3_4
                                   2189 ;	ecen4330_lcd_v3.c:352: while (blocks--) {
      000846 7C B0            [12] 2190 	mov	r4,#0xb0
      000848 7F 04            [12] 2191 	mov	r7,#0x04
      00084A                       2192 00104$:
      00084A 8C 02            [24] 2193 	mov	ar2,r4
      00084C 8F 03            [24] 2194 	mov	ar3,r7
      00084E 1C               [12] 2195 	dec	r4
      00084F BC FF 01         [24] 2196 	cjne	r4,#0xff,00140$
      000852 1F               [12] 2197 	dec	r7
      000853                       2198 00140$:
      000853 EA               [12] 2199 	mov	a,r2
      000854 4B               [12] 2200 	orl	a,r3
      000855 60 66            [24] 2201 	jz	00106$
                                   2202 ;	ecen4330_lcd_v3.c:354: do {
      000857 7B 10            [12] 2203 	mov	r3,#0x10
      000859                       2204 00101$:
                                   2205 ;	ecen4330_lcd_v3.c:356: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2206 ;	assignBit
      000859 D2 B4            [12] 2207 	setb	_P3_4
      00085B 85*02 82         [24] 2208 	mov	dpl,_lcd_address
      00085E 85*03 83         [24] 2209 	mov	dph,(_lcd_address + 1)
      000861 ED               [12] 2210 	mov	a,r5
      000862 F0               [24] 2211 	movx	@dptr,a
                                   2212 ;	assignBit
      000863 C2 B4            [12] 2213 	clr	_P3_4
                                   2214 ;	assignBit
      000865 D2 B4            [12] 2215 	setb	_P3_4
      000867 85*02 82         [24] 2216 	mov	dpl,_lcd_address
      00086A 85*03 83         [24] 2217 	mov	dph,(_lcd_address + 1)
      00086D EE               [12] 2218 	mov	a,r6
      00086E F0               [24] 2219 	movx	@dptr,a
                                   2220 ;	assignBit
      00086F C2 B4            [12] 2221 	clr	_P3_4
                                   2222 ;	assignBit
      000871 D2 B4            [12] 2223 	setb	_P3_4
      000873 85*02 82         [24] 2224 	mov	dpl,_lcd_address
      000876 85*03 83         [24] 2225 	mov	dph,(_lcd_address + 1)
      000879 ED               [12] 2226 	mov	a,r5
      00087A F0               [24] 2227 	movx	@dptr,a
                                   2228 ;	assignBit
      00087B C2 B4            [12] 2229 	clr	_P3_4
                                   2230 ;	assignBit
      00087D D2 B4            [12] 2231 	setb	_P3_4
      00087F 85*02 82         [24] 2232 	mov	dpl,_lcd_address
      000882 85*03 83         [24] 2233 	mov	dph,(_lcd_address + 1)
      000885 EE               [12] 2234 	mov	a,r6
      000886 F0               [24] 2235 	movx	@dptr,a
                                   2236 ;	assignBit
      000887 C2 B4            [12] 2237 	clr	_P3_4
                                   2238 ;	ecen4330_lcd_v3.c:357: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2239 ;	assignBit
      000889 D2 B4            [12] 2240 	setb	_P3_4
      00088B 85*02 82         [24] 2241 	mov	dpl,_lcd_address
      00088E 85*03 83         [24] 2242 	mov	dph,(_lcd_address + 1)
      000891 ED               [12] 2243 	mov	a,r5
      000892 F0               [24] 2244 	movx	@dptr,a
                                   2245 ;	assignBit
      000893 C2 B4            [12] 2246 	clr	_P3_4
                                   2247 ;	assignBit
      000895 D2 B4            [12] 2248 	setb	_P3_4
      000897 85*02 82         [24] 2249 	mov	dpl,_lcd_address
      00089A 85*03 83         [24] 2250 	mov	dph,(_lcd_address + 1)
      00089D EE               [12] 2251 	mov	a,r6
      00089E F0               [24] 2252 	movx	@dptr,a
                                   2253 ;	assignBit
      00089F C2 B4            [12] 2254 	clr	_P3_4
                                   2255 ;	assignBit
      0008A1 D2 B4            [12] 2256 	setb	_P3_4
      0008A3 85*02 82         [24] 2257 	mov	dpl,_lcd_address
      0008A6 85*03 83         [24] 2258 	mov	dph,(_lcd_address + 1)
      0008A9 ED               [12] 2259 	mov	a,r5
      0008AA F0               [24] 2260 	movx	@dptr,a
                                   2261 ;	assignBit
      0008AB C2 B4            [12] 2262 	clr	_P3_4
                                   2263 ;	assignBit
      0008AD D2 B4            [12] 2264 	setb	_P3_4
      0008AF 85*02 82         [24] 2265 	mov	dpl,_lcd_address
      0008B2 85*03 83         [24] 2266 	mov	dph,(_lcd_address + 1)
      0008B5 EE               [12] 2267 	mov	a,r6
      0008B6 F0               [24] 2268 	movx	@dptr,a
                                   2269 ;	assignBit
      0008B7 C2 B4            [12] 2270 	clr	_P3_4
                                   2271 ;	ecen4330_lcd_v3.c:358: } while(--i);
      0008B9 DB 9E            [24] 2272 	djnz	r3,00101$
      0008BB 80 8D            [24] 2273 	sjmp	00104$
      0008BD                       2274 00106$:
                                   2275 ;	ecen4330_lcd_v3.c:360: for (i = (char)len & 63; i--; ) {
      0008BD 7F 3F            [12] 2276 	mov	r7,#0x3f
      0008BF                       2277 00109$:
      0008BF 8F 04            [24] 2278 	mov	ar4,r7
      0008C1 1F               [12] 2279 	dec	r7
      0008C2 EC               [12] 2280 	mov	a,r4
      0008C3 60 1A            [24] 2281 	jz	00111$
                                   2282 ;	ecen4330_lcd_v3.c:362: write8(hi); write8(lo);
                                   2283 ;	assignBit
      0008C5 D2 B4            [12] 2284 	setb	_P3_4
      0008C7 85*02 82         [24] 2285 	mov	dpl,_lcd_address
      0008CA 85*03 83         [24] 2286 	mov	dph,(_lcd_address + 1)
      0008CD ED               [12] 2287 	mov	a,r5
      0008CE F0               [24] 2288 	movx	@dptr,a
                                   2289 ;	assignBit
      0008CF C2 B4            [12] 2290 	clr	_P3_4
                                   2291 ;	assignBit
      0008D1 D2 B4            [12] 2292 	setb	_P3_4
      0008D3 85*02 82         [24] 2293 	mov	dpl,_lcd_address
      0008D6 85*03 83         [24] 2294 	mov	dph,(_lcd_address + 1)
      0008D9 EE               [12] 2295 	mov	a,r6
      0008DA F0               [24] 2296 	movx	@dptr,a
                                   2297 ;	assignBit
      0008DB C2 B4            [12] 2298 	clr	_P3_4
      0008DD 80 E0            [24] 2299 	sjmp	00109$
      0008DF                       2300 00111$:
                                   2301 ;	ecen4330_lcd_v3.c:365: }
      0008DF 22               [24] 2302 	ret
                                   2303 ;------------------------------------------------------------
                                   2304 ;Allocation info for local variables in function 'drawChar'
                                   2305 ;------------------------------------------------------------
                                   2306 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2307 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2308 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2309 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2310 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2311 ;x                         Allocated to registers r6 r7 
                                   2312 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2313 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2314 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2315 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2316 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2317 ;i                         Allocated with name '_drawChar_i_65537_149'
                                   2318 ;line                      Allocated with name '_drawChar_line_196609_151'
                                   2319 ;j                         Allocated with name '_drawChar_j_196610_154'
                                   2320 ;------------------------------------------------------------
                                   2321 ;	ecen4330_lcd_v3.c:376: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2322 ;	-----------------------------------------
                                   2323 ;	 function drawChar
                                   2324 ;	-----------------------------------------
      0008E0                       2325 _drawChar:
      0008E0 AE 82            [24] 2326 	mov	r6,dpl
      0008E2 AF 83            [24] 2327 	mov	r7,dph
                                   2328 ;	ecen4330_lcd_v3.c:377: if ((x >=TFTWIDTH) ||
      0008E4 C3               [12] 2329 	clr	c
      0008E5 EE               [12] 2330 	mov	a,r6
      0008E6 94 F0            [12] 2331 	subb	a,#0xf0
      0008E8 EF               [12] 2332 	mov	a,r7
      0008E9 64 80            [12] 2333 	xrl	a,#0x80
      0008EB 94 80            [12] 2334 	subb	a,#0x80
      0008ED 50 67            [24] 2335 	jnc	00101$
                                   2336 ;	ecen4330_lcd_v3.c:378: (y >=TFTHEIGHT)           ||
      0008EF AC*3D            [24] 2337 	mov	r4,_drawChar_PARM_2
      0008F1 AD*3E            [24] 2338 	mov	r5,(_drawChar_PARM_2 + 1)
      0008F3 C3               [12] 2339 	clr	c
      0008F4 EC               [12] 2340 	mov	a,r4
      0008F5 94 40            [12] 2341 	subb	a,#0x40
      0008F7 ED               [12] 2342 	mov	a,r5
      0008F8 64 80            [12] 2343 	xrl	a,#0x80
      0008FA 94 81            [12] 2344 	subb	a,#0x81
      0008FC 50 58            [24] 2345 	jnc	00101$
                                   2346 ;	ecen4330_lcd_v3.c:379: ((x + 6 * size - 1) < 0) ||
      0008FE AA*44            [24] 2347 	mov	r2,_drawChar_PARM_6
      000900 7B 00            [12] 2348 	mov	r3,#0x00
      000902 8A*00            [24] 2349 	mov	__mulint_PARM_2,r2
      000904 8B*01            [24] 2350 	mov	(__mulint_PARM_2 + 1),r3
      000906 90 00 06         [24] 2351 	mov	dptr,#0x0006
      000909 C0 07            [24] 2352 	push	ar7
      00090B C0 06            [24] 2353 	push	ar6
      00090D C0 05            [24] 2354 	push	ar5
      00090F C0 04            [24] 2355 	push	ar4
      000911 C0 03            [24] 2356 	push	ar3
      000913 C0 02            [24] 2357 	push	ar2
      000915 12r00r00         [24] 2358 	lcall	__mulint
      000918 A8 82            [24] 2359 	mov	r0,dpl
      00091A A9 83            [24] 2360 	mov	r1,dph
      00091C D0 02            [24] 2361 	pop	ar2
      00091E D0 03            [24] 2362 	pop	ar3
      000920 D0 04            [24] 2363 	pop	ar4
      000922 D0 05            [24] 2364 	pop	ar5
      000924 D0 06            [24] 2365 	pop	ar6
      000926 D0 07            [24] 2366 	pop	ar7
      000928 E8               [12] 2367 	mov	a,r0
      000929 2E               [12] 2368 	add	a,r6
      00092A F8               [12] 2369 	mov	r0,a
      00092B E9               [12] 2370 	mov	a,r1
      00092C 3F               [12] 2371 	addc	a,r7
      00092D F9               [12] 2372 	mov	r1,a
      00092E 18               [12] 2373 	dec	r0
      00092F B8 FF 01         [24] 2374 	cjne	r0,#0xff,00176$
      000932 19               [12] 2375 	dec	r1
      000933                       2376 00176$:
      000933 E9               [12] 2377 	mov	a,r1
      000934 20 E7 1F         [24] 2378 	jb	acc.7,00101$
                                   2379 ;	ecen4330_lcd_v3.c:380: ((y + 8 * size - 1) < 0))
      000937 EB               [12] 2380 	mov	a,r3
      000938 C4               [12] 2381 	swap	a
      000939 03               [12] 2382 	rr	a
      00093A 54 F8            [12] 2383 	anl	a,#0xf8
      00093C CA               [12] 2384 	xch	a,r2
      00093D C4               [12] 2385 	swap	a
      00093E 03               [12] 2386 	rr	a
      00093F CA               [12] 2387 	xch	a,r2
      000940 6A               [12] 2388 	xrl	a,r2
      000941 CA               [12] 2389 	xch	a,r2
      000942 54 F8            [12] 2390 	anl	a,#0xf8
      000944 CA               [12] 2391 	xch	a,r2
      000945 6A               [12] 2392 	xrl	a,r2
      000946 FB               [12] 2393 	mov	r3,a
      000947 EA               [12] 2394 	mov	a,r2
      000948 2C               [12] 2395 	add	a,r4
      000949 FA               [12] 2396 	mov	r2,a
      00094A EB               [12] 2397 	mov	a,r3
      00094B 3D               [12] 2398 	addc	a,r5
      00094C FB               [12] 2399 	mov	r3,a
      00094D 1A               [12] 2400 	dec	r2
      00094E BA FF 01         [24] 2401 	cjne	r2,#0xff,00178$
      000951 1B               [12] 2402 	dec	r3
      000952                       2403 00178$:
      000952 EB               [12] 2404 	mov	a,r3
      000953 30 E7 01         [24] 2405 	jnb	acc.7,00138$
      000956                       2406 00101$:
                                   2407 ;	ecen4330_lcd_v3.c:382: return;
      000956 22               [24] 2408 	ret
                                   2409 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000957                       2410 00138$:
      000957 74 01            [12] 2411 	mov	a,#0x01
      000959 B5*44 04         [24] 2412 	cjne	a,_drawChar_PARM_6,00180$
      00095C 74 01            [12] 2413 	mov	a,#0x01
      00095E 80 01            [24] 2414 	sjmp	00181$
      000960                       2415 00180$:
      000960 E4               [12] 2416 	clr	a
      000961                       2417 00181$:
      000961 FB               [12] 2418 	mov	r3,a
      000962 8B*4B            [24] 2419 	mov	_drawChar_sloc5_1_0,r3
      000964 E5*40            [12] 2420 	mov	a,_drawChar_PARM_4
      000966 B5*42 08         [24] 2421 	cjne	a,_drawChar_PARM_5,00182$
      000969 E5*41            [12] 2422 	mov	a,(_drawChar_PARM_4 + 1)
      00096B B5*43 03         [24] 2423 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      00096E D3               [12] 2424 	setb	c
      00096F 80 01            [24] 2425 	sjmp	00183$
      000971                       2426 00182$:
      000971 C3               [12] 2427 	clr	c
      000972                       2428 00183$:
      000972 92*00            [24] 2429 	mov	_drawChar_sloc0_1_0,c
      000974 79 00            [12] 2430 	mov	r1,#0x00
      000976                       2431 00124$:
                                   2432 ;	ecen4330_lcd_v3.c:391: if (i == 5)
      000976 B9 05 07         [24] 2433 	cjne	r1,#0x05,00107$
                                   2434 ;	ecen4330_lcd_v3.c:393: line = 0x0;
      000979 90r00r06         [24] 2435 	mov	dptr,#_drawChar_line_196609_151
      00097C E4               [12] 2436 	clr	a
      00097D F0               [24] 2437 	movx	@dptr,a
      00097E 80 49            [24] 2438 	sjmp	00136$
      000980                       2439 00107$:
                                   2440 ;	ecen4330_lcd_v3.c:397: line = pgm_read_byte(font+(c*5)+i);
      000980 85*3F*00         [24] 2441 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000983 75*01 00         [24] 2442 	mov	(__mulint_PARM_2 + 1),#0x00
      000986 90 00 05         [24] 2443 	mov	dptr,#0x0005
      000989 C0 07            [24] 2444 	push	ar7
      00098B C0 06            [24] 2445 	push	ar6
      00098D C0 05            [24] 2446 	push	ar5
      00098F C0 04            [24] 2447 	push	ar4
      000991 C0 03            [24] 2448 	push	ar3
      000993 C0 01            [24] 2449 	push	ar1
      000995 12r00r00         [24] 2450 	lcall	__mulint
      000998 A8 82            [24] 2451 	mov	r0,dpl
      00099A AA 83            [24] 2452 	mov	r2,dph
      00099C D0 01            [24] 2453 	pop	ar1
      00099E D0 03            [24] 2454 	pop	ar3
      0009A0 D0 04            [24] 2455 	pop	ar4
      0009A2 D0 05            [24] 2456 	pop	ar5
      0009A4 D0 06            [24] 2457 	pop	ar6
      0009A6 D0 07            [24] 2458 	pop	ar7
      0009A8 E8               [12] 2459 	mov	a,r0
      0009A9 24r00            [12] 2460 	add	a,#_font
      0009AB F5*45            [12] 2461 	mov	_drawChar_sloc1_1_0,a
      0009AD EA               [12] 2462 	mov	a,r2
      0009AE 34s00            [12] 2463 	addc	a,#(_font >> 8)
      0009B0 F5*46            [12] 2464 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009B2 E9               [12] 2465 	mov	a,r1
      0009B3 F8               [12] 2466 	mov	r0,a
      0009B4 33               [12] 2467 	rlc	a
      0009B5 95 E0            [12] 2468 	subb	a,acc
      0009B7 FA               [12] 2469 	mov	r2,a
      0009B8 E8               [12] 2470 	mov	a,r0
      0009B9 25*45            [12] 2471 	add	a,_drawChar_sloc1_1_0
      0009BB F5 82            [12] 2472 	mov	dpl,a
      0009BD EA               [12] 2473 	mov	a,r2
      0009BE 35*46            [12] 2474 	addc	a,(_drawChar_sloc1_1_0 + 1)
      0009C0 F5 83            [12] 2475 	mov	dph,a
      0009C2 E4               [12] 2476 	clr	a
      0009C3 93               [24] 2477 	movc	a,@a+dptr
      0009C4 FA               [12] 2478 	mov	r2,a
      0009C5 90r00r06         [24] 2479 	mov	dptr,#_drawChar_line_196609_151
      0009C8 F0               [24] 2480 	movx	@dptr,a
                                   2481 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
                                   2482 ;	ecen4330_lcd_v3.c:402: for (j = 0; j<8; j++)
      0009C9                       2483 00136$:
      0009C9 C2 D5            [12] 2484 	clr	F0
      0009CB 85*44 F0         [24] 2485 	mov	b,_drawChar_PARM_6
      0009CE E9               [12] 2486 	mov	a,r1
      0009CF 30 E7 04         [24] 2487 	jnb	acc.7,00186$
      0009D2 B2 D5            [12] 2488 	cpl	F0
      0009D4 F4               [12] 2489 	cpl	a
      0009D5 04               [12] 2490 	inc	a
      0009D6                       2491 00186$:
      0009D6 A4               [48] 2492 	mul	ab
      0009D7 30 D5 0A         [24] 2493 	jnb	F0,00187$
      0009DA F4               [12] 2494 	cpl	a
      0009DB 24 01            [12] 2495 	add	a,#0x01
      0009DD C5 F0            [12] 2496 	xch	a,b
      0009DF F4               [12] 2497 	cpl	a
      0009E0 34 00            [12] 2498 	addc	a,#0x00
      0009E2 C5 F0            [12] 2499 	xch	a,b
      0009E4                       2500 00187$:
      0009E4 2E               [12] 2501 	add	a,r6
      0009E5 F5*45            [12] 2502 	mov	_drawChar_sloc1_1_0,a
      0009E7 EF               [12] 2503 	mov	a,r7
      0009E8 35 F0            [12] 2504 	addc	a,b
      0009EA F5*46            [12] 2505 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009EC 89 00            [24] 2506 	mov	ar0,r1
      0009EE 85*45*47         [24] 2507 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      0009F1 85*46*48         [24] 2508 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      0009F4 89*49            [24] 2509 	mov	_drawChar_sloc3_1_0,r1
      0009F6 75*4A 00         [24] 2510 	mov	_drawChar_sloc4_1_0,#0x00
      0009F9                       2511 00122$:
                                   2512 ;	ecen4330_lcd_v3.c:404: if (line & 0x1)
      0009F9 90r00r06         [24] 2513 	mov	dptr,#_drawChar_line_196609_151
      0009FC E0               [24] 2514 	movx	a,@dptr
      0009FD 20 E0 03         [24] 2515 	jb	acc.0,00188$
      000A00 02r0ArB8         [24] 2516 	ljmp	00118$
      000A03                       2517 00188$:
                                   2518 ;	ecen4330_lcd_v3.c:406: if (size == 1)
      000A03 EB               [12] 2519 	mov	a,r3
      000A04 60 4E            [24] 2520 	jz	00110$
                                   2521 ;	ecen4330_lcd_v3.c:408: drawPixel(x+i, y+j, color);
      000A06 C0 00            [24] 2522 	push	ar0
      000A08 E5*49            [12] 2523 	mov	a,_drawChar_sloc3_1_0
      000A0A F8               [12] 2524 	mov	r0,a
      000A0B 33               [12] 2525 	rlc	a
      000A0C 95 E0            [12] 2526 	subb	a,acc
      000A0E FA               [12] 2527 	mov	r2,a
      000A0F E8               [12] 2528 	mov	a,r0
      000A10 2E               [12] 2529 	add	a,r6
      000A11 F8               [12] 2530 	mov	r0,a
      000A12 EA               [12] 2531 	mov	a,r2
      000A13 3F               [12] 2532 	addc	a,r7
      000A14 FA               [12] 2533 	mov	r2,a
      000A15 88 82            [24] 2534 	mov	dpl,r0
      000A17 8A 83            [24] 2535 	mov	dph,r2
      000A19 E5*4A            [12] 2536 	mov	a,_drawChar_sloc4_1_0
      000A1B F8               [12] 2537 	mov	r0,a
      000A1C 33               [12] 2538 	rlc	a
      000A1D 95 E0            [12] 2539 	subb	a,acc
      000A1F FA               [12] 2540 	mov	r2,a
      000A20 E8               [12] 2541 	mov	a,r0
      000A21 2C               [12] 2542 	add	a,r4
      000A22 F8               [12] 2543 	mov	r0,a
      000A23 EA               [12] 2544 	mov	a,r2
      000A24 3D               [12] 2545 	addc	a,r5
      000A25 FA               [12] 2546 	mov	r2,a
      000A26 88*1A            [24] 2547 	mov	_drawPixel_PARM_2,r0
      000A28 8A*1B            [24] 2548 	mov	(_drawPixel_PARM_2 + 1),r2
      000A2A 85*40*1C         [24] 2549 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A2D 85*41*1D         [24] 2550 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A30 C0 07            [24] 2551 	push	ar7
      000A32 C0 06            [24] 2552 	push	ar6
      000A34 C0 05            [24] 2553 	push	ar5
      000A36 C0 04            [24] 2554 	push	ar4
      000A38 C0 03            [24] 2555 	push	ar3
      000A3A C0 01            [24] 2556 	push	ar1
      000A3C C0 00            [24] 2557 	push	ar0
      000A3E 12r03r1E         [24] 2558 	lcall	_drawPixel
      000A41 D0 00            [24] 2559 	pop	ar0
      000A43 D0 01            [24] 2560 	pop	ar1
      000A45 D0 03            [24] 2561 	pop	ar3
      000A47 D0 04            [24] 2562 	pop	ar4
      000A49 D0 05            [24] 2563 	pop	ar5
      000A4B D0 06            [24] 2564 	pop	ar6
      000A4D D0 07            [24] 2565 	pop	ar7
      000A4F D0 00            [24] 2566 	pop	ar0
      000A51 02r0Br6F         [24] 2567 	ljmp	00119$
      000A54                       2568 00110$:
                                   2569 ;	ecen4330_lcd_v3.c:411: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A54 C0 00            [24] 2570 	push	ar0
      000A56 85*47 82         [24] 2571 	mov	dpl,_drawChar_sloc2_1_0
      000A59 85*48 83         [24] 2572 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000A5C C2 D5            [12] 2573 	clr	F0
      000A5E 85*44 F0         [24] 2574 	mov	b,_drawChar_PARM_6
      000A61 E5*4A            [12] 2575 	mov	a,_drawChar_sloc4_1_0
      000A63 30 E7 04         [24] 2576 	jnb	acc.7,00190$
      000A66 B2 D5            [12] 2577 	cpl	F0
      000A68 F4               [12] 2578 	cpl	a
      000A69 04               [12] 2579 	inc	a
      000A6A                       2580 00190$:
      000A6A A4               [48] 2581 	mul	ab
      000A6B 30 D5 0A         [24] 2582 	jnb	F0,00191$
      000A6E F4               [12] 2583 	cpl	a
      000A6F 24 01            [12] 2584 	add	a,#0x01
      000A71 C5 F0            [12] 2585 	xch	a,b
      000A73 F4               [12] 2586 	cpl	a
      000A74 34 00            [12] 2587 	addc	a,#0x00
      000A76 C5 F0            [12] 2588 	xch	a,b
      000A78                       2589 00191$:
      000A78 2C               [12] 2590 	add	a,r4
      000A79 F8               [12] 2591 	mov	r0,a
      000A7A ED               [12] 2592 	mov	a,r5
      000A7B 35 F0            [12] 2593 	addc	a,b
      000A7D FA               [12] 2594 	mov	r2,a
      000A7E 88*35            [24] 2595 	mov	_fillRect_PARM_2,r0
      000A80 8A*36            [24] 2596 	mov	(_fillRect_PARM_2 + 1),r2
      000A82 A8*44            [24] 2597 	mov	r0,_drawChar_PARM_6
      000A84 7A 00            [12] 2598 	mov	r2,#0x00
      000A86 88*37            [24] 2599 	mov	_fillRect_PARM_3,r0
      000A88 8A*38            [24] 2600 	mov	(_fillRect_PARM_3 + 1),r2
      000A8A 88*39            [24] 2601 	mov	_fillRect_PARM_4,r0
      000A8C 8A*3A            [24] 2602 	mov	(_fillRect_PARM_4 + 1),r2
      000A8E 85*40*3B         [24] 2603 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A91 85*41*3C         [24] 2604 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A94 C0 07            [24] 2605 	push	ar7
      000A96 C0 06            [24] 2606 	push	ar6
      000A98 C0 05            [24] 2607 	push	ar5
      000A9A C0 04            [24] 2608 	push	ar4
      000A9C C0 03            [24] 2609 	push	ar3
      000A9E C0 01            [24] 2610 	push	ar1
      000AA0 C0 00            [24] 2611 	push	ar0
      000AA2 12r07r18         [24] 2612 	lcall	_fillRect
      000AA5 D0 00            [24] 2613 	pop	ar0
      000AA7 D0 01            [24] 2614 	pop	ar1
      000AA9 D0 03            [24] 2615 	pop	ar3
      000AAB D0 04            [24] 2616 	pop	ar4
      000AAD D0 05            [24] 2617 	pop	ar5
      000AAF D0 06            [24] 2618 	pop	ar6
      000AB1 D0 07            [24] 2619 	pop	ar7
      000AB3 D0 00            [24] 2620 	pop	ar0
      000AB5 02r0Br6F         [24] 2621 	ljmp	00119$
      000AB8                       2622 00118$:
                                   2623 ;	ecen4330_lcd_v3.c:413: } else if (bg != color)
      000AB8 30*00 03         [24] 2624 	jnb	_drawChar_sloc0_1_0,00192$
      000ABB 02r0Br6F         [24] 2625 	ljmp	00119$
      000ABE                       2626 00192$:
                                   2627 ;	ecen4330_lcd_v3.c:415: if (size == 1)
      000ABE E5*4B            [12] 2628 	mov	a,_drawChar_sloc5_1_0
      000AC0 60 4C            [24] 2629 	jz	00113$
                                   2630 ;	ecen4330_lcd_v3.c:417: drawPixel(x+i, y+j, bg);
      000AC2 C0 03            [24] 2631 	push	ar3
      000AC4 E8               [12] 2632 	mov	a,r0
      000AC5 FA               [12] 2633 	mov	r2,a
      000AC6 33               [12] 2634 	rlc	a
      000AC7 95 E0            [12] 2635 	subb	a,acc
      000AC9 FB               [12] 2636 	mov	r3,a
      000ACA EA               [12] 2637 	mov	a,r2
      000ACB 2E               [12] 2638 	add	a,r6
      000ACC FA               [12] 2639 	mov	r2,a
      000ACD EB               [12] 2640 	mov	a,r3
      000ACE 3F               [12] 2641 	addc	a,r7
      000ACF FB               [12] 2642 	mov	r3,a
      000AD0 8A 82            [24] 2643 	mov	dpl,r2
      000AD2 8B 83            [24] 2644 	mov	dph,r3
      000AD4 E5*4A            [12] 2645 	mov	a,_drawChar_sloc4_1_0
      000AD6 FA               [12] 2646 	mov	r2,a
      000AD7 33               [12] 2647 	rlc	a
      000AD8 95 E0            [12] 2648 	subb	a,acc
      000ADA FB               [12] 2649 	mov	r3,a
      000ADB EA               [12] 2650 	mov	a,r2
      000ADC 2C               [12] 2651 	add	a,r4
      000ADD FA               [12] 2652 	mov	r2,a
      000ADE EB               [12] 2653 	mov	a,r3
      000ADF 3D               [12] 2654 	addc	a,r5
      000AE0 FB               [12] 2655 	mov	r3,a
      000AE1 8A*1A            [24] 2656 	mov	_drawPixel_PARM_2,r2
      000AE3 8B*1B            [24] 2657 	mov	(_drawPixel_PARM_2 + 1),r3
      000AE5 85*42*1C         [24] 2658 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000AE8 85*43*1D         [24] 2659 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000AEB C0 07            [24] 2660 	push	ar7
      000AED C0 06            [24] 2661 	push	ar6
      000AEF C0 05            [24] 2662 	push	ar5
      000AF1 C0 04            [24] 2663 	push	ar4
      000AF3 C0 03            [24] 2664 	push	ar3
      000AF5 C0 01            [24] 2665 	push	ar1
      000AF7 C0 00            [24] 2666 	push	ar0
      000AF9 12r03r1E         [24] 2667 	lcall	_drawPixel
      000AFC D0 00            [24] 2668 	pop	ar0
      000AFE D0 01            [24] 2669 	pop	ar1
      000B00 D0 03            [24] 2670 	pop	ar3
      000B02 D0 04            [24] 2671 	pop	ar4
      000B04 D0 05            [24] 2672 	pop	ar5
      000B06 D0 06            [24] 2673 	pop	ar6
      000B08 D0 07            [24] 2674 	pop	ar7
      000B0A D0 03            [24] 2675 	pop	ar3
      000B0C 80 61            [24] 2676 	sjmp	00119$
      000B0E                       2677 00113$:
                                   2678 ;	ecen4330_lcd_v3.c:421: fillRect(x+i*size, y+j*size, size, size, bg);
      000B0E C0 00            [24] 2679 	push	ar0
      000B10 85*45 82         [24] 2680 	mov	dpl,_drawChar_sloc1_1_0
      000B13 85*46 83         [24] 2681 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B16 C2 D5            [12] 2682 	clr	F0
      000B18 85*44 F0         [24] 2683 	mov	b,_drawChar_PARM_6
      000B1B E5*4A            [12] 2684 	mov	a,_drawChar_sloc4_1_0
      000B1D 30 E7 04         [24] 2685 	jnb	acc.7,00194$
      000B20 B2 D5            [12] 2686 	cpl	F0
      000B22 F4               [12] 2687 	cpl	a
      000B23 04               [12] 2688 	inc	a
      000B24                       2689 00194$:
      000B24 A4               [48] 2690 	mul	ab
      000B25 30 D5 0A         [24] 2691 	jnb	F0,00195$
      000B28 F4               [12] 2692 	cpl	a
      000B29 24 01            [12] 2693 	add	a,#0x01
      000B2B C5 F0            [12] 2694 	xch	a,b
      000B2D F4               [12] 2695 	cpl	a
      000B2E 34 00            [12] 2696 	addc	a,#0x00
      000B30 C5 F0            [12] 2697 	xch	a,b
      000B32                       2698 00195$:
      000B32 2C               [12] 2699 	add	a,r4
      000B33 F8               [12] 2700 	mov	r0,a
      000B34 ED               [12] 2701 	mov	a,r5
      000B35 35 F0            [12] 2702 	addc	a,b
      000B37 FA               [12] 2703 	mov	r2,a
      000B38 88*35            [24] 2704 	mov	_fillRect_PARM_2,r0
      000B3A 8A*36            [24] 2705 	mov	(_fillRect_PARM_2 + 1),r2
      000B3C A8*44            [24] 2706 	mov	r0,_drawChar_PARM_6
      000B3E 7A 00            [12] 2707 	mov	r2,#0x00
      000B40 88*37            [24] 2708 	mov	_fillRect_PARM_3,r0
      000B42 8A*38            [24] 2709 	mov	(_fillRect_PARM_3 + 1),r2
      000B44 88*39            [24] 2710 	mov	_fillRect_PARM_4,r0
      000B46 8A*3A            [24] 2711 	mov	(_fillRect_PARM_4 + 1),r2
      000B48 85*42*3B         [24] 2712 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B4B 85*43*3C         [24] 2713 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B4E C0 07            [24] 2714 	push	ar7
      000B50 C0 06            [24] 2715 	push	ar6
      000B52 C0 05            [24] 2716 	push	ar5
      000B54 C0 04            [24] 2717 	push	ar4
      000B56 C0 03            [24] 2718 	push	ar3
      000B58 C0 01            [24] 2719 	push	ar1
      000B5A C0 00            [24] 2720 	push	ar0
      000B5C 12r07r18         [24] 2721 	lcall	_fillRect
      000B5F D0 00            [24] 2722 	pop	ar0
      000B61 D0 01            [24] 2723 	pop	ar1
      000B63 D0 03            [24] 2724 	pop	ar3
      000B65 D0 04            [24] 2725 	pop	ar4
      000B67 D0 05            [24] 2726 	pop	ar5
      000B69 D0 06            [24] 2727 	pop	ar6
      000B6B D0 07            [24] 2728 	pop	ar7
                                   2729 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000B6D D0 00            [24] 2730 	pop	ar0
                                   2731 ;	ecen4330_lcd_v3.c:421: fillRect(x+i*size, y+j*size, size, size, bg);
      000B6F                       2732 00119$:
                                   2733 ;	ecen4330_lcd_v3.c:425: line >>= 1;
      000B6F 90r00r06         [24] 2734 	mov	dptr,#_drawChar_line_196609_151
      000B72 E0               [24] 2735 	movx	a,@dptr
      000B73 C3               [12] 2736 	clr	c
      000B74 13               [12] 2737 	rrc	a
      000B75 FA               [12] 2738 	mov	r2,a
      000B76 F0               [24] 2739 	movx	@dptr,a
                                   2740 ;	ecen4330_lcd_v3.c:402: for (j = 0; j<8; j++)
      000B77 05*4A            [12] 2741 	inc	_drawChar_sloc4_1_0
      000B79 C3               [12] 2742 	clr	c
      000B7A E5*4A            [12] 2743 	mov	a,_drawChar_sloc4_1_0
      000B7C 64 80            [12] 2744 	xrl	a,#0x80
      000B7E 94 88            [12] 2745 	subb	a,#0x88
      000B80 50 03            [24] 2746 	jnc	00196$
      000B82 02r09rF9         [24] 2747 	ljmp	00122$
      000B85                       2748 00196$:
                                   2749 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000B85 09               [12] 2750 	inc	r1
      000B86 C3               [12] 2751 	clr	c
      000B87 E9               [12] 2752 	mov	a,r1
      000B88 64 80            [12] 2753 	xrl	a,#0x80
      000B8A 94 86            [12] 2754 	subb	a,#0x86
      000B8C 50 03            [24] 2755 	jnc	00197$
      000B8E 02r09r76         [24] 2756 	ljmp	00124$
      000B91                       2757 00197$:
                                   2758 ;	ecen4330_lcd_v3.c:429: }
      000B91 22               [24] 2759 	ret
                                   2760 ;------------------------------------------------------------
                                   2761 ;Allocation info for local variables in function 'write'
                                   2762 ;------------------------------------------------------------
                                   2763 ;c                         Allocated to registers r7 
                                   2764 ;------------------------------------------------------------
                                   2765 ;	ecen4330_lcd_v3.c:436: void write (uint8_t c)
                                   2766 ;	-----------------------------------------
                                   2767 ;	 function write
                                   2768 ;	-----------------------------------------
      000B92                       2769 _write:
      000B92 AF 82            [24] 2770 	mov	r7,dpl
                                   2771 ;	ecen4330_lcd_v3.c:438: if (c == '\n')
      000B94 BF 0A 26         [24] 2772 	cjne	r7,#0x0a,00105$
                                   2773 ;	ecen4330_lcd_v3.c:440: cursor_y += textsize*8;
      000B97 AD*10            [24] 2774 	mov	r5,_textsize
      000B99 E4               [12] 2775 	clr	a
      000B9A C4               [12] 2776 	swap	a
      000B9B 03               [12] 2777 	rr	a
      000B9C 54 F8            [12] 2778 	anl	a,#0xf8
      000B9E CD               [12] 2779 	xch	a,r5
      000B9F C4               [12] 2780 	swap	a
      000BA0 03               [12] 2781 	rr	a
      000BA1 CD               [12] 2782 	xch	a,r5
      000BA2 6D               [12] 2783 	xrl	a,r5
      000BA3 CD               [12] 2784 	xch	a,r5
      000BA4 54 F8            [12] 2785 	anl	a,#0xf8
      000BA6 CD               [12] 2786 	xch	a,r5
      000BA7 6D               [12] 2787 	xrl	a,r5
      000BA8 FE               [12] 2788 	mov	r6,a
      000BA9 AB*0E            [24] 2789 	mov	r3,_cursor_y
      000BAB AC*0F            [24] 2790 	mov	r4,(_cursor_y + 1)
      000BAD ED               [12] 2791 	mov	a,r5
      000BAE 2B               [12] 2792 	add	a,r3
      000BAF FB               [12] 2793 	mov	r3,a
      000BB0 EE               [12] 2794 	mov	a,r6
      000BB1 3C               [12] 2795 	addc	a,r4
      000BB2 FC               [12] 2796 	mov	r4,a
      000BB3 8B*0E            [24] 2797 	mov	_cursor_y,r3
      000BB5 8C*0F            [24] 2798 	mov	(_cursor_y + 1),r4
                                   2799 ;	ecen4330_lcd_v3.c:441: cursor_x  = 0;
      000BB7 E4               [12] 2800 	clr	a
      000BB8 F5*0C            [12] 2801 	mov	_cursor_x,a
      000BBA F5*0D            [12] 2802 	mov	(_cursor_x + 1),a
      000BBC 22               [24] 2803 	ret
      000BBD                       2804 00105$:
                                   2805 ;	ecen4330_lcd_v3.c:443: else if (c == '\r')
      000BBD BF 0D 01         [24] 2806 	cjne	r7,#0x0d,00119$
      000BC0 22               [24] 2807 	ret
      000BC1                       2808 00119$:
                                   2809 ;	ecen4330_lcd_v3.c:448: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000BC1 85*0E*3D         [24] 2810 	mov	_drawChar_PARM_2,_cursor_y
      000BC4 85*0F*3E         [24] 2811 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000BC7 8F*3F            [24] 2812 	mov	_drawChar_PARM_3,r7
      000BC9 85*12*40         [24] 2813 	mov	_drawChar_PARM_4,_textcolor
      000BCC 85*13*41         [24] 2814 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000BCF 85*14*42         [24] 2815 	mov	_drawChar_PARM_5,_textbgcolor
      000BD2 85*15*43         [24] 2816 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000BD5 85*10*44         [24] 2817 	mov	_drawChar_PARM_6,_textsize
      000BD8 85*0C 82         [24] 2818 	mov	dpl,_cursor_x
      000BDB 85*0D 83         [24] 2819 	mov	dph,(_cursor_x + 1)
      000BDE 12r08rE0         [24] 2820 	lcall	_drawChar
                                   2821 ;	ecen4330_lcd_v3.c:449: cursor_x += textsize*6;
      000BE1 85*10*00         [24] 2822 	mov	__mulint_PARM_2,_textsize
      000BE4 75*01 00         [24] 2823 	mov	(__mulint_PARM_2 + 1),#0x00
      000BE7 90 00 06         [24] 2824 	mov	dptr,#0x0006
      000BEA 12r00r00         [24] 2825 	lcall	__mulint
      000BED AE 82            [24] 2826 	mov	r6,dpl
      000BEF AF 83            [24] 2827 	mov	r7,dph
      000BF1 AC*0C            [24] 2828 	mov	r4,_cursor_x
      000BF3 AD*0D            [24] 2829 	mov	r5,(_cursor_x + 1)
      000BF5 EE               [12] 2830 	mov	a,r6
      000BF6 2C               [12] 2831 	add	a,r4
      000BF7 FC               [12] 2832 	mov	r4,a
      000BF8 EF               [12] 2833 	mov	a,r7
      000BF9 3D               [12] 2834 	addc	a,r5
      000BFA FD               [12] 2835 	mov	r5,a
      000BFB 8C*0C            [24] 2836 	mov	_cursor_x,r4
      000BFD 8D*0D            [24] 2837 	mov	(_cursor_x + 1),r5
                                   2838 ;	ecen4330_lcd_v3.c:451: }
      000BFF 22               [24] 2839 	ret
                                   2840 ;------------------------------------------------------------
                                   2841 ;Allocation info for local variables in function 'LCD_string_write'
                                   2842 ;------------------------------------------------------------
                                   2843 ;str                       Allocated to registers r5 r6 r7 
                                   2844 ;i                         Allocated with name '_LCD_string_write_i_65536_169'
                                   2845 ;------------------------------------------------------------
                                   2846 ;	ecen4330_lcd_v3.c:458: void LCD_string_write (int8_t *str)
                                   2847 ;	-----------------------------------------
                                   2848 ;	 function LCD_string_write
                                   2849 ;	-----------------------------------------
      000C00                       2850 _LCD_string_write:
      000C00 AD 82            [24] 2851 	mov	r5,dpl
      000C02 AE 83            [24] 2852 	mov	r6,dph
      000C04 AF F0            [24] 2853 	mov	r7,b
                                   2854 ;	ecen4330_lcd_v3.c:461: for (i=0;str[i]!=0;i++)
      000C06 7B 00            [12] 2855 	mov	r3,#0x00
      000C08 7C 00            [12] 2856 	mov	r4,#0x00
      000C0A                       2857 00103$:
      000C0A EB               [12] 2858 	mov	a,r3
      000C0B 2D               [12] 2859 	add	a,r5
      000C0C F8               [12] 2860 	mov	r0,a
      000C0D EC               [12] 2861 	mov	a,r4
      000C0E 3E               [12] 2862 	addc	a,r6
      000C0F F9               [12] 2863 	mov	r1,a
      000C10 8F 02            [24] 2864 	mov	ar2,r7
      000C12 88 82            [24] 2865 	mov	dpl,r0
      000C14 89 83            [24] 2866 	mov	dph,r1
      000C16 8A F0            [24] 2867 	mov	b,r2
      000C18 12r00r00         [24] 2868 	lcall	__gptrget
      000C1B FA               [12] 2869 	mov	r2,a
      000C1C 60 20            [24] 2870 	jz	00105$
                                   2871 ;	ecen4330_lcd_v3.c:463: write(str[i]);
      000C1E 8A 82            [24] 2872 	mov	dpl,r2
      000C20 C0 07            [24] 2873 	push	ar7
      000C22 C0 06            [24] 2874 	push	ar6
      000C24 C0 05            [24] 2875 	push	ar5
      000C26 C0 04            [24] 2876 	push	ar4
      000C28 C0 03            [24] 2877 	push	ar3
      000C2A 12r0Br92         [24] 2878 	lcall	_write
      000C2D D0 03            [24] 2879 	pop	ar3
      000C2F D0 04            [24] 2880 	pop	ar4
      000C31 D0 05            [24] 2881 	pop	ar5
      000C33 D0 06            [24] 2882 	pop	ar6
      000C35 D0 07            [24] 2883 	pop	ar7
                                   2884 ;	ecen4330_lcd_v3.c:461: for (i=0;str[i]!=0;i++)
      000C37 0B               [12] 2885 	inc	r3
      000C38 BB 00 CF         [24] 2886 	cjne	r3,#0x00,00103$
      000C3B 0C               [12] 2887 	inc	r4
      000C3C 80 CC            [24] 2888 	sjmp	00103$
      000C3E                       2889 00105$:
                                   2890 ;	ecen4330_lcd_v3.c:465: }
      000C3E 22               [24] 2891 	ret
                                   2892 ;------------------------------------------------------------
                                   2893 ;Allocation info for local variables in function 'testRAM'
                                   2894 ;------------------------------------------------------------
                                   2895 ;i                         Allocated with name '_testRAM_i_65536_173'
                                   2896 ;d                         Allocated to registers r7 
                                   2897 ;ram_address               Allocated to registers 
                                   2898 ;------------------------------------------------------------
                                   2899 ;	ecen4330_lcd_v3.c:472: void testRAM (uint8_t d) {
                                   2900 ;	-----------------------------------------
                                   2901 ;	 function testRAM
                                   2902 ;	-----------------------------------------
      000C3F                       2903 _testRAM:
      000C3F AF 82            [24] 2904 	mov	r7,dpl
                                   2905 ;	ecen4330_lcd_v3.c:476: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C41 7B 00            [12] 2906 	mov	r3,#0x00
      000C43 7C 00            [12] 2907 	mov	r4,#0x00
      000C45 7D 00            [12] 2908 	mov	r5,#0x00
      000C47 7E 00            [12] 2909 	mov	r6,#0x00
      000C49                       2910 00102$:
                                   2911 ;	ecen4330_lcd_v3.c:477: IOM = 0;
                                   2912 ;	assignBit
      000C49 C2 B4            [12] 2913 	clr	_P3_4
                                   2914 ;	ecen4330_lcd_v3.c:478: ram_address = (uint8_t __xdata*)(i);
      000C4B 8B 82            [24] 2915 	mov	dpl,r3
      000C4D 8C 83            [24] 2916 	mov	dph,r4
                                   2917 ;	ecen4330_lcd_v3.c:479: *ram_address = d;
      000C4F EF               [12] 2918 	mov	a,r7
      000C50 F0               [24] 2919 	movx	@dptr,a
                                   2920 ;	ecen4330_lcd_v3.c:480: IOM = 1;
                                   2921 ;	assignBit
      000C51 D2 B4            [12] 2922 	setb	_P3_4
                                   2923 ;	ecen4330_lcd_v3.c:476: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C53 0B               [12] 2924 	inc	r3
      000C54 BB 00 09         [24] 2925 	cjne	r3,#0x00,00111$
      000C57 0C               [12] 2926 	inc	r4
      000C58 BC 00 05         [24] 2927 	cjne	r4,#0x00,00111$
      000C5B 0D               [12] 2928 	inc	r5
      000C5C BD 00 01         [24] 2929 	cjne	r5,#0x00,00111$
      000C5F 0E               [12] 2930 	inc	r6
      000C60                       2931 00111$:
      000C60 C3               [12] 2932 	clr	c
      000C61 EB               [12] 2933 	mov	a,r3
      000C62 94 FF            [12] 2934 	subb	a,#0xff
      000C64 EC               [12] 2935 	mov	a,r4
      000C65 94 FF            [12] 2936 	subb	a,#0xff
      000C67 ED               [12] 2937 	mov	a,r5
      000C68 94 00            [12] 2938 	subb	a,#0x00
      000C6A EE               [12] 2939 	mov	a,r6
      000C6B 94 00            [12] 2940 	subb	a,#0x00
      000C6D 40 DA            [24] 2941 	jc	00102$
                                   2942 ;	ecen4330_lcd_v3.c:482: }
      000C6F 22               [24] 2943 	ret
                                   2944 ;------------------------------------------------------------
                                   2945 ;Allocation info for local variables in function 'freeType'
                                   2946 ;------------------------------------------------------------
                                   2947 ;count                     Allocated with name '_freeType_count_65536_176'
                                   2948 ;d                         Allocated with name '_freeType_d_65536_176'
                                   2949 ;------------------------------------------------------------
                                   2950 ;	ecen4330_lcd_v3.c:488: void freeType () {
                                   2951 ;	-----------------------------------------
                                   2952 ;	 function freeType
                                   2953 ;	-----------------------------------------
      000C70                       2954 _freeType:
                                   2955 ;	ecen4330_lcd_v3.c:489: __xdata uint8_t count = 0;
      000C70 90r00r07         [24] 2956 	mov	dptr,#_freeType_count_65536_176
      000C73 E4               [12] 2957 	clr	a
      000C74 F0               [24] 2958 	movx	@dptr,a
                                   2959 ;	ecen4330_lcd_v3.c:491: while (1) {
      000C75                       2960 00105$:
                                   2961 ;	ecen4330_lcd_v3.c:494: if (count == 8) {
      000C75 90r00r07         [24] 2962 	mov	dptr,#_freeType_count_65536_176
      000C78 E0               [24] 2963 	movx	a,@dptr
      000C79 FF               [12] 2964 	mov	r7,a
      000C7A BF 08 0D         [24] 2965 	cjne	r7,#0x08,00102$
                                   2966 ;	ecen4330_lcd_v3.c:496: count = 0;
      000C7D 90r00r07         [24] 2967 	mov	dptr,#_freeType_count_65536_176
      000C80 E4               [12] 2968 	clr	a
      000C81 F0               [24] 2969 	movx	@dptr,a
                                   2970 ;	ecen4330_lcd_v3.c:497: write(d);
      000C82 75 82 0A         [24] 2971 	mov	dpl,#0x0a
      000C85 12r0Br92         [24] 2972 	lcall	_write
      000C88 80 06            [24] 2973 	sjmp	00103$
      000C8A                       2974 00102$:
                                   2975 ;	ecen4330_lcd_v3.c:500: d = keyDetect();
      000C8A 12r0Cr99         [24] 2976 	lcall	_keyDetect
                                   2977 ;	ecen4330_lcd_v3.c:501: write(d);
      000C8D 12r0Br92         [24] 2978 	lcall	_write
      000C90                       2979 00103$:
                                   2980 ;	ecen4330_lcd_v3.c:504: count++;
      000C90 90r00r07         [24] 2981 	mov	dptr,#_freeType_count_65536_176
      000C93 E0               [24] 2982 	movx	a,@dptr
      000C94 24 01            [12] 2983 	add	a,#0x01
      000C96 F0               [24] 2984 	movx	@dptr,a
                                   2985 ;	ecen4330_lcd_v3.c:506: }
      000C97 80 DC            [24] 2986 	sjmp	00105$
                                   2987 ;------------------------------------------------------------
                                   2988 ;Allocation info for local variables in function 'keyDetect'
                                   2989 ;------------------------------------------------------------
                                   2990 ;	ecen4330_lcd_v3.c:513: uint8_t keyDetect () {
                                   2991 ;	-----------------------------------------
                                   2992 ;	 function keyDetect
                                   2993 ;	-----------------------------------------
      000C99                       2994 _keyDetect:
                                   2995 ;	ecen4330_lcd_v3.c:514: __KEYPAD_PORT__ = 0xF0;
      000C99 75 90 F0         [24] 2996 	mov	_P1,#0xf0
                                   2997 ;	ecen4330_lcd_v3.c:515: do
      000C9C                       2998 00101$:
                                   2999 ;	ecen4330_lcd_v3.c:517: __KEYPAD_PORT__ = 0xF0;
      000C9C 75 90 F0         [24] 3000 	mov	_P1,#0xf0
                                   3001 ;	ecen4330_lcd_v3.c:518: colloc = __KEYPAD_PORT__;
      000C9F 85 90*00         [24] 3002 	mov	_colloc,_P1
                                   3003 ;	ecen4330_lcd_v3.c:519: colloc&= 0xF0;
      000CA2 53*00 F0         [24] 3004 	anl	_colloc,#0xf0
                                   3005 ;	ecen4330_lcd_v3.c:520: } while (colloc != 0xF0);
      000CA5 74 F0            [12] 3006 	mov	a,#0xf0
      000CA7 B5*00 F2         [24] 3007 	cjne	a,_colloc,00101$
                                   3008 ;	ecen4330_lcd_v3.c:524: do
      000CAA                       3009 00104$:
                                   3010 ;	ecen4330_lcd_v3.c:526: delay(20);
      000CAA 90 00 14         [24] 3011 	mov	dptr,#0x0014
      000CAD 12r00r10         [24] 3012 	lcall	_delay
                                   3013 ;	ecen4330_lcd_v3.c:527: colloc = (__KEYPAD_PORT__ & 0xF0);
      000CB0 E5 90            [12] 3014 	mov	a,_P1
      000CB2 54 F0            [12] 3015 	anl	a,#0xf0
      000CB4 F5*00            [12] 3016 	mov	_colloc,a
                                   3017 ;	ecen4330_lcd_v3.c:528: } while (colloc == 0xF0);
      000CB6 74 F0            [12] 3018 	mov	a,#0xf0
      000CB8 B5*00 02         [24] 3019 	cjne	a,_colloc,00178$
      000CBB 80 ED            [24] 3020 	sjmp	00104$
      000CBD                       3021 00178$:
                                   3022 ;	ecen4330_lcd_v3.c:530: delay(1);
      000CBD 90 00 01         [24] 3023 	mov	dptr,#0x0001
      000CC0 12r00r10         [24] 3024 	lcall	_delay
                                   3025 ;	ecen4330_lcd_v3.c:531: colloc = (__KEYPAD_PORT__ & 0xF0);
      000CC3 E5 90            [12] 3026 	mov	a,_P1
      000CC5 54 F0            [12] 3027 	anl	a,#0xf0
      000CC7 F5*00            [12] 3028 	mov	_colloc,a
                                   3029 ;	ecen4330_lcd_v3.c:532: } while (colloc == 0xF0);
      000CC9 74 F0            [12] 3030 	mov	a,#0xf0
      000CCB B5*00 02         [24] 3031 	cjne	a,_colloc,00179$
      000CCE 80 DA            [24] 3032 	sjmp	00104$
      000CD0                       3033 00179$:
                                   3034 ;	ecen4330_lcd_v3.c:534: while (1)
      000CD0                       3035 00119$:
                                   3036 ;	ecen4330_lcd_v3.c:536: __KEYPAD_PORT__= 0xFE;
      000CD0 75 90 FE         [24] 3037 	mov	_P1,#0xfe
                                   3038 ;	ecen4330_lcd_v3.c:537: colloc = (__KEYPAD_PORT__ & 0xF0);
      000CD3 E5 90            [12] 3039 	mov	a,_P1
      000CD5 54 F0            [12] 3040 	anl	a,#0xf0
      000CD7 F5*00            [12] 3041 	mov	_colloc,a
                                   3042 ;	ecen4330_lcd_v3.c:538: if (colloc != 0xF0)
      000CD9 74 F0            [12] 3043 	mov	a,#0xf0
      000CDB B5*00 02         [24] 3044 	cjne	a,_colloc,00180$
      000CDE 80 05            [24] 3045 	sjmp	00111$
      000CE0                       3046 00180$:
                                   3047 ;	ecen4330_lcd_v3.c:540: rowloc = 0;
      000CE0 75*01 00         [24] 3048 	mov	_rowloc,#0x00
                                   3049 ;	ecen4330_lcd_v3.c:541: break;
      000CE3 80 3D            [24] 3050 	sjmp	00120$
      000CE5                       3051 00111$:
                                   3052 ;	ecen4330_lcd_v3.c:544: __KEYPAD_PORT__ = 0xFD;
      000CE5 75 90 FD         [24] 3053 	mov	_P1,#0xfd
                                   3054 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000CE8 E5 90            [12] 3055 	mov	a,_P1
      000CEA 54 F0            [12] 3056 	anl	a,#0xf0
      000CEC F5*00            [12] 3057 	mov	_colloc,a
                                   3058 ;	ecen4330_lcd_v3.c:546: if (colloc != 0xF0)
      000CEE 74 F0            [12] 3059 	mov	a,#0xf0
      000CF0 B5*00 02         [24] 3060 	cjne	a,_colloc,00181$
      000CF3 80 05            [24] 3061 	sjmp	00113$
      000CF5                       3062 00181$:
                                   3063 ;	ecen4330_lcd_v3.c:548: rowloc = 1;
      000CF5 75*01 01         [24] 3064 	mov	_rowloc,#0x01
                                   3065 ;	ecen4330_lcd_v3.c:549: break;
      000CF8 80 28            [24] 3066 	sjmp	00120$
      000CFA                       3067 00113$:
                                   3068 ;	ecen4330_lcd_v3.c:552: __KEYPAD_PORT__ = 0xFB;
      000CFA 75 90 FB         [24] 3069 	mov	_P1,#0xfb
                                   3070 ;	ecen4330_lcd_v3.c:553: colloc = (__KEYPAD_PORT__ & 0xF0);
      000CFD E5 90            [12] 3071 	mov	a,_P1
      000CFF 54 F0            [12] 3072 	anl	a,#0xf0
      000D01 F5*00            [12] 3073 	mov	_colloc,a
                                   3074 ;	ecen4330_lcd_v3.c:554: if (colloc != 0xF0)
      000D03 74 F0            [12] 3075 	mov	a,#0xf0
      000D05 B5*00 02         [24] 3076 	cjne	a,_colloc,00182$
      000D08 80 05            [24] 3077 	sjmp	00115$
      000D0A                       3078 00182$:
                                   3079 ;	ecen4330_lcd_v3.c:556: rowloc = 2;
      000D0A 75*01 02         [24] 3080 	mov	_rowloc,#0x02
                                   3081 ;	ecen4330_lcd_v3.c:557: break;
      000D0D 80 13            [24] 3082 	sjmp	00120$
      000D0F                       3083 00115$:
                                   3084 ;	ecen4330_lcd_v3.c:560: __KEYPAD_PORT__ = 0xF7;
      000D0F 75 90 F7         [24] 3085 	mov	_P1,#0xf7
                                   3086 ;	ecen4330_lcd_v3.c:561: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D12 E5 90            [12] 3087 	mov	a,_P1
      000D14 54 F0            [12] 3088 	anl	a,#0xf0
      000D16 F5*00            [12] 3089 	mov	_colloc,a
                                   3090 ;	ecen4330_lcd_v3.c:562: if (colloc != 0xF0)
      000D18 74 F0            [12] 3091 	mov	a,#0xf0
      000D1A B5*00 02         [24] 3092 	cjne	a,_colloc,00183$
      000D1D 80 B1            [24] 3093 	sjmp	00119$
      000D1F                       3094 00183$:
                                   3095 ;	ecen4330_lcd_v3.c:564: rowloc = 3;
      000D1F 75*01 03         [24] 3096 	mov	_rowloc,#0x03
                                   3097 ;	ecen4330_lcd_v3.c:565: break;
      000D22                       3098 00120$:
                                   3099 ;	ecen4330_lcd_v3.c:569: if (colloc == 0xE0)
      000D22 74 E0            [12] 3100 	mov	a,#0xe0
      000D24 B5*00 15         [24] 3101 	cjne	a,_colloc,00128$
                                   3102 ;	ecen4330_lcd_v3.c:571: return (keypad[rowloc][0]);
      000D27 E5*01            [12] 3103 	mov	a,_rowloc
      000D29 75 F0 04         [24] 3104 	mov	b,#0x04
      000D2C A4               [48] 3105 	mul	ab
      000D2D 24rFB            [12] 3106 	add	a,#_keypad
      000D2F F5 82            [12] 3107 	mov	dpl,a
      000D31 74s04            [12] 3108 	mov	a,#(_keypad >> 8)
      000D33 35 F0            [12] 3109 	addc	a,b
      000D35 F5 83            [12] 3110 	mov	dph,a
      000D37 E4               [12] 3111 	clr	a
      000D38 93               [24] 3112 	movc	a,@a+dptr
      000D39 F5 82            [12] 3113 	mov	dpl,a
      000D3B 22               [24] 3114 	ret
      000D3C                       3115 00128$:
                                   3116 ;	ecen4330_lcd_v3.c:573: else if (colloc == 0xD0)
      000D3C 74 D0            [12] 3117 	mov	a,#0xd0
      000D3E B5*00 18         [24] 3118 	cjne	a,_colloc,00125$
                                   3119 ;	ecen4330_lcd_v3.c:575: return (keypad[rowloc][1]);
      000D41 E5*01            [12] 3120 	mov	a,_rowloc
      000D43 75 F0 04         [24] 3121 	mov	b,#0x04
      000D46 A4               [48] 3122 	mul	ab
      000D47 24rFB            [12] 3123 	add	a,#_keypad
      000D49 FE               [12] 3124 	mov	r6,a
      000D4A 74s04            [12] 3125 	mov	a,#(_keypad >> 8)
      000D4C 35 F0            [12] 3126 	addc	a,b
      000D4E FF               [12] 3127 	mov	r7,a
      000D4F 8E 82            [24] 3128 	mov	dpl,r6
      000D51 8F 83            [24] 3129 	mov	dph,r7
      000D53 A3               [24] 3130 	inc	dptr
      000D54 E4               [12] 3131 	clr	a
      000D55 93               [24] 3132 	movc	a,@a+dptr
      000D56 F5 82            [12] 3133 	mov	dpl,a
      000D58 22               [24] 3134 	ret
      000D59                       3135 00125$:
                                   3136 ;	ecen4330_lcd_v3.c:577: else if (colloc == 0xB0)
      000D59 74 B0            [12] 3137 	mov	a,#0xb0
      000D5B B5*00 19         [24] 3138 	cjne	a,_colloc,00122$
                                   3139 ;	ecen4330_lcd_v3.c:579: return (keypad[rowloc][2]);
      000D5E E5*01            [12] 3140 	mov	a,_rowloc
      000D60 75 F0 04         [24] 3141 	mov	b,#0x04
      000D63 A4               [48] 3142 	mul	ab
      000D64 24rFB            [12] 3143 	add	a,#_keypad
      000D66 FE               [12] 3144 	mov	r6,a
      000D67 74s04            [12] 3145 	mov	a,#(_keypad >> 8)
      000D69 35 F0            [12] 3146 	addc	a,b
      000D6B FF               [12] 3147 	mov	r7,a
      000D6C 8E 82            [24] 3148 	mov	dpl,r6
      000D6E 8F 83            [24] 3149 	mov	dph,r7
      000D70 A3               [24] 3150 	inc	dptr
      000D71 A3               [24] 3151 	inc	dptr
      000D72 E4               [12] 3152 	clr	a
      000D73 93               [24] 3153 	movc	a,@a+dptr
      000D74 F5 82            [12] 3154 	mov	dpl,a
      000D76 22               [24] 3155 	ret
      000D77                       3156 00122$:
                                   3157 ;	ecen4330_lcd_v3.c:583: return (keypad[rowloc][3]);
      000D77 E5*01            [12] 3158 	mov	a,_rowloc
      000D79 75 F0 04         [24] 3159 	mov	b,#0x04
      000D7C A4               [48] 3160 	mul	ab
      000D7D 24rFB            [12] 3161 	add	a,#_keypad
      000D7F FE               [12] 3162 	mov	r6,a
      000D80 74s04            [12] 3163 	mov	a,#(_keypad >> 8)
      000D82 35 F0            [12] 3164 	addc	a,b
      000D84 FF               [12] 3165 	mov	r7,a
      000D85 8E 82            [24] 3166 	mov	dpl,r6
      000D87 8F 83            [24] 3167 	mov	dph,r7
      000D89 A3               [24] 3168 	inc	dptr
      000D8A A3               [24] 3169 	inc	dptr
      000D8B A3               [24] 3170 	inc	dptr
      000D8C E4               [12] 3171 	clr	a
      000D8D 93               [24] 3172 	movc	a,@a+dptr
                                   3173 ;	ecen4330_lcd_v3.c:585: }
      000D8E F5 82            [12] 3174 	mov	dpl,a
      000D90 22               [24] 3175 	ret
                                   3176 ;------------------------------------------------------------
                                   3177 ;Allocation info for local variables in function 'reverse'
                                   3178 ;------------------------------------------------------------
                                   3179 ;d                         Allocated to registers r7 
                                   3180 ;rev                       Allocated with name '_reverse_rev_65536_194'
                                   3181 ;val                       Allocated with name '_reverse_val_65536_194'
                                   3182 ;------------------------------------------------------------
                                   3183 ;	ecen4330_lcd_v3.c:587: uint16_t reverse (uint8_t d) {
                                   3184 ;	-----------------------------------------
                                   3185 ;	 function reverse
                                   3186 ;	-----------------------------------------
      000D91                       3187 _reverse:
      000D91 AF 82            [24] 3188 	mov	r7,dpl
                                   3189 ;	ecen4330_lcd_v3.c:588: __xdata uint16_t rev = 0;
      000D93 90r00r08         [24] 3190 	mov	dptr,#_reverse_rev_65536_194
      000D96 E4               [12] 3191 	clr	a
      000D97 F0               [24] 3192 	movx	@dptr,a
      000D98 A3               [24] 3193 	inc	dptr
      000D99 F0               [24] 3194 	movx	@dptr,a
                                   3195 ;	ecen4330_lcd_v3.c:590: while (d >= 1) {
      000D9A                       3196 00101$:
      000D9A BF 01 00         [24] 3197 	cjne	r7,#0x01,00114$
      000D9D                       3198 00114$:
      000D9D 40 63            [24] 3199 	jc	00103$
                                   3200 ;	ecen4330_lcd_v3.c:592: val = d%10;
      000D9F 8F 05            [24] 3201 	mov	ar5,r7
      000DA1 7E 00            [12] 3202 	mov	r6,#0x00
      000DA3 75*00 0A         [24] 3203 	mov	__modsint_PARM_2,#0x0a
                                   3204 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DA6 8E*01            [24] 3205 	mov	(__modsint_PARM_2 + 1),r6
      000DA8 8D 82            [24] 3206 	mov	dpl,r5
      000DAA 8E 83            [24] 3207 	mov	dph,r6
      000DAC C0 06            [24] 3208 	push	ar6
      000DAE C0 05            [24] 3209 	push	ar5
      000DB0 12r00r00         [24] 3210 	lcall	__modsint
      000DB3 AB 82            [24] 3211 	mov	r3,dpl
      000DB5 AC 83            [24] 3212 	mov	r4,dph
      000DB7 D0 05            [24] 3213 	pop	ar5
      000DB9 D0 06            [24] 3214 	pop	ar6
      000DBB 90r00r0A         [24] 3215 	mov	dptr,#_reverse_val_65536_194
      000DBE EB               [12] 3216 	mov	a,r3
      000DBF F0               [24] 3217 	movx	@dptr,a
      000DC0 EC               [12] 3218 	mov	a,r4
      000DC1 A3               [24] 3219 	inc	dptr
      000DC2 F0               [24] 3220 	movx	@dptr,a
                                   3221 ;	ecen4330_lcd_v3.c:593: d = d/10;
      000DC3 75*00 0A         [24] 3222 	mov	__divsint_PARM_2,#0x0a
      000DC6 75*01 00         [24] 3223 	mov	(__divsint_PARM_2 + 1),#0x00
      000DC9 8D 82            [24] 3224 	mov	dpl,r5
      000DCB 8E 83            [24] 3225 	mov	dph,r6
      000DCD 12r00r00         [24] 3226 	lcall	__divsint
      000DD0 AD 82            [24] 3227 	mov	r5,dpl
      000DD2 8D 07            [24] 3228 	mov	ar7,r5
                                   3229 ;	ecen4330_lcd_v3.c:594: rev = rev * 10 + val;
      000DD4 90r00r08         [24] 3230 	mov	dptr,#_reverse_rev_65536_194
      000DD7 E0               [24] 3231 	movx	a,@dptr
      000DD8 FD               [12] 3232 	mov	r5,a
      000DD9 A3               [24] 3233 	inc	dptr
      000DDA E0               [24] 3234 	movx	a,@dptr
      000DDB FE               [12] 3235 	mov	r6,a
      000DDC 8D*00            [24] 3236 	mov	__mulint_PARM_2,r5
      000DDE 8E*01            [24] 3237 	mov	(__mulint_PARM_2 + 1),r6
      000DE0 90 00 0A         [24] 3238 	mov	dptr,#0x000a
      000DE3 C0 07            [24] 3239 	push	ar7
      000DE5 12r00r00         [24] 3240 	lcall	__mulint
      000DE8 AD 82            [24] 3241 	mov	r5,dpl
      000DEA AE 83            [24] 3242 	mov	r6,dph
      000DEC D0 07            [24] 3243 	pop	ar7
      000DEE 90r00r0A         [24] 3244 	mov	dptr,#_reverse_val_65536_194
      000DF1 E0               [24] 3245 	movx	a,@dptr
      000DF2 FB               [12] 3246 	mov	r3,a
      000DF3 A3               [24] 3247 	inc	dptr
      000DF4 E0               [24] 3248 	movx	a,@dptr
      000DF5 FC               [12] 3249 	mov	r4,a
      000DF6 90r00r08         [24] 3250 	mov	dptr,#_reverse_rev_65536_194
      000DF9 EB               [12] 3251 	mov	a,r3
      000DFA 2D               [12] 3252 	add	a,r5
      000DFB F0               [24] 3253 	movx	@dptr,a
      000DFC EC               [12] 3254 	mov	a,r4
      000DFD 3E               [12] 3255 	addc	a,r6
      000DFE A3               [24] 3256 	inc	dptr
      000DFF F0               [24] 3257 	movx	@dptr,a
      000E00 80 98            [24] 3258 	sjmp	00101$
      000E02                       3259 00103$:
                                   3260 ;	ecen4330_lcd_v3.c:596: return rev;
      000E02 90r00r08         [24] 3261 	mov	dptr,#_reverse_rev_65536_194
      000E05 E0               [24] 3262 	movx	a,@dptr
      000E06 FE               [12] 3263 	mov	r6,a
      000E07 A3               [24] 3264 	inc	dptr
      000E08 E0               [24] 3265 	movx	a,@dptr
                                   3266 ;	ecen4330_lcd_v3.c:597: }
      000E09 8E 82            [24] 3267 	mov	dpl,r6
      000E0B F5 83            [12] 3268 	mov	dph,a
      000E0D 22               [24] 3269 	ret
                                   3270 ;------------------------------------------------------------
                                   3271 ;Allocation info for local variables in function 'asciiToDec'
                                   3272 ;------------------------------------------------------------
                                   3273 ;d                         Allocated to registers 
                                   3274 ;val                       Allocated with name '_asciiToDec_val_65536_197'
                                   3275 ;id                        Allocated with name '_asciiToDec_id_65536_197'
                                   3276 ;------------------------------------------------------------
                                   3277 ;	ecen4330_lcd_v3.c:604: void asciiToDec (uint8_t d) {
                                   3278 ;	-----------------------------------------
                                   3279 ;	 function asciiToDec
                                   3280 ;	-----------------------------------------
      000E0E                       3281 _asciiToDec:
                                   3282 ;	ecen4330_lcd_v3.c:607: id = reverse(d);
      000E0E 12r0Dr91         [24] 3283 	lcall	_reverse
      000E11 E5 82            [12] 3284 	mov	a,dpl
      000E13 85 83 F0         [24] 3285 	mov	b,dph
      000E16 90r00r0D         [24] 3286 	mov	dptr,#_asciiToDec_id_65536_197
      000E19 F0               [24] 3287 	movx	@dptr,a
      000E1A E5 F0            [12] 3288 	mov	a,b
      000E1C A3               [24] 3289 	inc	dptr
      000E1D F0               [24] 3290 	movx	@dptr,a
                                   3291 ;	ecen4330_lcd_v3.c:608: while (id >= 1){
      000E1E                       3292 00101$:
      000E1E 90r00r0D         [24] 3293 	mov	dptr,#_asciiToDec_id_65536_197
      000E21 E0               [24] 3294 	movx	a,@dptr
      000E22 FE               [12] 3295 	mov	r6,a
      000E23 A3               [24] 3296 	inc	dptr
      000E24 E0               [24] 3297 	movx	a,@dptr
      000E25 FF               [12] 3298 	mov	r7,a
      000E26 C3               [12] 3299 	clr	c
      000E27 EE               [12] 3300 	mov	a,r6
      000E28 94 01            [12] 3301 	subb	a,#0x01
      000E2A EF               [12] 3302 	mov	a,r7
      000E2B 94 00            [12] 3303 	subb	a,#0x00
      000E2D 40 42            [24] 3304 	jc	00103$
                                   3305 ;	ecen4330_lcd_v3.c:610: val = id % 10;
      000E2F 75*00 0A         [24] 3306 	mov	__moduint_PARM_2,#0x0a
      000E32 75*01 00         [24] 3307 	mov	(__moduint_PARM_2 + 1),#0x00
      000E35 8E 82            [24] 3308 	mov	dpl,r6
      000E37 8F 83            [24] 3309 	mov	dph,r7
      000E39 C0 07            [24] 3310 	push	ar7
      000E3B C0 06            [24] 3311 	push	ar6
      000E3D 12r00r00         [24] 3312 	lcall	__moduint
      000E40 AC 82            [24] 3313 	mov	r4,dpl
      000E42 D0 06            [24] 3314 	pop	ar6
      000E44 D0 07            [24] 3315 	pop	ar7
      000E46 90r00r0C         [24] 3316 	mov	dptr,#_asciiToDec_val_65536_197
      000E49 EC               [12] 3317 	mov	a,r4
      000E4A F0               [24] 3318 	movx	@dptr,a
                                   3319 ;	ecen4330_lcd_v3.c:611: id = id/10;
      000E4B 75*00 0A         [24] 3320 	mov	__divuint_PARM_2,#0x0a
      000E4E 75*01 00         [24] 3321 	mov	(__divuint_PARM_2 + 1),#0x00
      000E51 8E 82            [24] 3322 	mov	dpl,r6
      000E53 8F 83            [24] 3323 	mov	dph,r7
      000E55 12r00r00         [24] 3324 	lcall	__divuint
      000E58 AE 82            [24] 3325 	mov	r6,dpl
      000E5A AF 83            [24] 3326 	mov	r7,dph
      000E5C 90r00r0D         [24] 3327 	mov	dptr,#_asciiToDec_id_65536_197
      000E5F EE               [12] 3328 	mov	a,r6
      000E60 F0               [24] 3329 	movx	@dptr,a
      000E61 EF               [12] 3330 	mov	a,r7
      000E62 A3               [24] 3331 	inc	dptr
      000E63 F0               [24] 3332 	movx	@dptr,a
                                   3333 ;	ecen4330_lcd_v3.c:612: write(val + '0');
      000E64 90r00r0C         [24] 3334 	mov	dptr,#_asciiToDec_val_65536_197
      000E67 E0               [24] 3335 	movx	a,@dptr
      000E68 24 30            [12] 3336 	add	a,#0x30
      000E6A F5 82            [12] 3337 	mov	dpl,a
      000E6C 12r0Br92         [24] 3338 	lcall	_write
      000E6F 80 AD            [24] 3339 	sjmp	00101$
      000E71                       3340 00103$:
                                   3341 ;	ecen4330_lcd_v3.c:614: write('\n');
      000E71 75 82 0A         [24] 3342 	mov	dpl,#0x0a
                                   3343 ;	ecen4330_lcd_v3.c:615: }
      000E74 02r0Br92         [24] 3344 	ljmp	_write
                                   3345 ;------------------------------------------------------------
                                   3346 ;Allocation info for local variables in function 'asciiToHex'
                                   3347 ;------------------------------------------------------------
                                   3348 ;d                         Allocated to registers r7 
                                   3349 ;val                       Allocated with name '_asciiToHex_val_65536_200'
                                   3350 ;store                     Allocated with name '_asciiToHex_store_65536_200'
                                   3351 ;i                         Allocated with name '_asciiToHex_i_65536_200'
                                   3352 ;------------------------------------------------------------
                                   3353 ;	ecen4330_lcd_v3.c:622: void asciiToHex (uint8_t d) {
                                   3354 ;	-----------------------------------------
                                   3355 ;	 function asciiToHex
                                   3356 ;	-----------------------------------------
      000E77                       3357 _asciiToHex:
      000E77 AF 82            [24] 3358 	mov	r7,dpl
                                   3359 ;	ecen4330_lcd_v3.c:626: store[0] = 0;
      000E79 90r00r10         [24] 3360 	mov	dptr,#_asciiToHex_store_65536_200
      000E7C E4               [12] 3361 	clr	a
      000E7D F0               [24] 3362 	movx	@dptr,a
                                   3363 ;	ecen4330_lcd_v3.c:627: store[1] = 0;
      000E7E 90r00r11         [24] 3364 	mov	dptr,#(_asciiToHex_store_65536_200 + 0x0001)
      000E81 F0               [24] 3365 	movx	@dptr,a
                                   3366 ;	ecen4330_lcd_v3.c:628: while (d >= 1) {
      000E82 7E 00            [12] 3367 	mov	r6,#0x00
      000E84                       3368 00104$:
      000E84 BF 01 00         [24] 3369 	cjne	r7,#0x01,00122$
      000E87                       3370 00122$:
      000E87 50 03            [24] 3371 	jnc	00123$
      000E89 02r0Fr02         [24] 3372 	ljmp	00106$
      000E8C                       3373 00123$:
                                   3374 ;	ecen4330_lcd_v3.c:630: val = d % 16;
      000E8C 8F 04            [24] 3375 	mov	ar4,r7
      000E8E 7D 00            [12] 3376 	mov	r5,#0x00
      000E90 74 0F            [12] 3377 	mov	a,#0x0f
      000E92 5C               [12] 3378 	anl	a,r4
      000E93 FA               [12] 3379 	mov	r2,a
      000E94 90r00r0F         [24] 3380 	mov	dptr,#_asciiToHex_val_65536_200
      000E97 EA               [12] 3381 	mov	a,r2
      000E98 F0               [24] 3382 	movx	@dptr,a
                                   3383 ;	ecen4330_lcd_v3.c:631: d = d/16;
      000E99 75*00 10         [24] 3384 	mov	__divsint_PARM_2,#0x10
                                   3385 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000E9C 8D*01            [24] 3386 	mov	(__divsint_PARM_2 + 1),r5
      000E9E 8C 82            [24] 3387 	mov	dpl,r4
      000EA0 8D 83            [24] 3388 	mov	dph,r5
      000EA2 C0 06            [24] 3389 	push	ar6
      000EA4 12r00r00         [24] 3390 	lcall	__divsint
      000EA7 AC 82            [24] 3391 	mov	r4,dpl
      000EA9 AD 83            [24] 3392 	mov	r5,dph
      000EAB D0 06            [24] 3393 	pop	ar6
      000EAD 8C 07            [24] 3394 	mov	ar7,r4
                                   3395 ;	ecen4330_lcd_v3.c:632: if (val <= 9) {
      000EAF 90r00r0F         [24] 3396 	mov	dptr,#_asciiToHex_val_65536_200
      000EB2 E0               [24] 3397 	movx	a,@dptr
      000EB3 FD               [12] 3398 	mov  r5,a
      000EB4 24 F6            [12] 3399 	add	a,#0xff - 0x09
      000EB6 40 13            [24] 3400 	jc	00102$
                                   3401 ;	ecen4330_lcd_v3.c:634: store[i] = val + '0';
      000EB8 EE               [12] 3402 	mov	a,r6
      000EB9 24r10            [12] 3403 	add	a,#_asciiToHex_store_65536_200
      000EBB F5 82            [12] 3404 	mov	dpl,a
      000EBD E4               [12] 3405 	clr	a
      000EBE 34s00            [12] 3406 	addc	a,#(_asciiToHex_store_65536_200 >> 8)
      000EC0 F5 83            [12] 3407 	mov	dph,a
      000EC2 8D 04            [24] 3408 	mov	ar4,r5
      000EC4 74 30            [12] 3409 	mov	a,#0x30
      000EC6 2C               [12] 3410 	add	a,r4
      000EC7 FC               [12] 3411 	mov	r4,a
      000EC8 F0               [24] 3412 	movx	@dptr,a
      000EC9 80 33            [24] 3413 	sjmp	00103$
      000ECB                       3414 00102$:
                                   3415 ;	ecen4330_lcd_v3.c:637: store[i] = (val%10) + 'A';
      000ECB EE               [12] 3416 	mov	a,r6
      000ECC 24r10            [12] 3417 	add	a,#_asciiToHex_store_65536_200
      000ECE FB               [12] 3418 	mov	r3,a
      000ECF E4               [12] 3419 	clr	a
      000ED0 34s00            [12] 3420 	addc	a,#(_asciiToHex_store_65536_200 >> 8)
      000ED2 FC               [12] 3421 	mov	r4,a
      000ED3 7A 00            [12] 3422 	mov	r2,#0x00
      000ED5 75*00 0A         [24] 3423 	mov	__modsint_PARM_2,#0x0a
                                   3424 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000ED8 8A*01            [24] 3425 	mov	(__modsint_PARM_2 + 1),r2
      000EDA 8D 82            [24] 3426 	mov	dpl,r5
      000EDC 8A 83            [24] 3427 	mov	dph,r2
      000EDE C0 07            [24] 3428 	push	ar7
      000EE0 C0 06            [24] 3429 	push	ar6
      000EE2 C0 04            [24] 3430 	push	ar4
      000EE4 C0 03            [24] 3431 	push	ar3
      000EE6 12r00r00         [24] 3432 	lcall	__modsint
      000EE9 AA 82            [24] 3433 	mov	r2,dpl
      000EEB AD 83            [24] 3434 	mov	r5,dph
      000EED D0 03            [24] 3435 	pop	ar3
      000EEF D0 04            [24] 3436 	pop	ar4
      000EF1 D0 06            [24] 3437 	pop	ar6
      000EF3 D0 07            [24] 3438 	pop	ar7
      000EF5 74 41            [12] 3439 	mov	a,#0x41
      000EF7 2A               [12] 3440 	add	a,r2
      000EF8 FA               [12] 3441 	mov	r2,a
      000EF9 8B 82            [24] 3442 	mov	dpl,r3
      000EFB 8C 83            [24] 3443 	mov	dph,r4
      000EFD F0               [24] 3444 	movx	@dptr,a
      000EFE                       3445 00103$:
                                   3446 ;	ecen4330_lcd_v3.c:639: i++;
      000EFE 0E               [12] 3447 	inc	r6
      000EFF 02r0Er84         [24] 3448 	ljmp	00104$
      000F02                       3449 00106$:
                                   3450 ;	ecen4330_lcd_v3.c:641: write(store[1]);
      000F02 90r00r11         [24] 3451 	mov	dptr,#(_asciiToHex_store_65536_200 + 0x0001)
      000F05 E0               [24] 3452 	movx	a,@dptr
      000F06 F5 82            [12] 3453 	mov	dpl,a
      000F08 12r0Br92         [24] 3454 	lcall	_write
                                   3455 ;	ecen4330_lcd_v3.c:642: write(store[0]);
      000F0B 90r00r10         [24] 3456 	mov	dptr,#_asciiToHex_store_65536_200
      000F0E E0               [24] 3457 	movx	a,@dptr
      000F0F F5 82            [12] 3458 	mov	dpl,a
                                   3459 ;	ecen4330_lcd_v3.c:643: }
      000F11 02r0Br92         [24] 3460 	ljmp	_write
                                   3461 ;------------------------------------------------------------
                                   3462 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3463 ;------------------------------------------------------------
                                   3464 ;d                         Allocated to registers r7 
                                   3465 ;------------------------------------------------------------
                                   3466 ;	ecen4330_lcd_v3.c:651: uint8_t convertAsciiHex(uint8_t d) {
                                   3467 ;	-----------------------------------------
                                   3468 ;	 function convertAsciiHex
                                   3469 ;	-----------------------------------------
      000F14                       3470 _convertAsciiHex:
                                   3471 ;	ecen4330_lcd_v3.c:652: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F14 E5 82            [12] 3472 	mov	a,dpl
      000F16 FF               [12] 3473 	mov	r7,a
      000F17 24 C6            [12] 3474 	add	a,#0xff - 0x39
      000F19 92*01            [24] 3475 	mov	_convertAsciiHex_sloc0_1_0,c
      000F1B 40 08            [24] 3476 	jc	00103$
      000F1D 8F 06            [24] 3477 	mov	ar6,r7
      000F1F EE               [12] 3478 	mov	a,r6
      000F20 24 D0            [12] 3479 	add	a,#0xd0
      000F22 FE               [12] 3480 	mov	r6,a
      000F23 80 04            [24] 3481 	sjmp	00104$
      000F25                       3482 00103$:
      000F25 74 C9            [12] 3483 	mov	a,#0xc9
      000F27 2F               [12] 3484 	add	a,r7
      000F28 FE               [12] 3485 	mov	r6,a
      000F29                       3486 00104$:
      000F29 8E 82            [24] 3487 	mov	dpl,r6
                                   3488 ;	ecen4330_lcd_v3.c:653: }
      000F2B 22               [24] 3489 	ret
                                   3490 ;------------------------------------------------------------
                                   3491 ;Allocation info for local variables in function 'writeSomeLines'
                                   3492 ;------------------------------------------------------------
                                   3493 ;	ecen4330_lcd_v3.c:659: void writeSomeLines () {
                                   3494 ;	-----------------------------------------
                                   3495 ;	 function writeSomeLines
                                   3496 ;	-----------------------------------------
      000F2C                       3497 _writeSomeLines:
                                   3498 ;	ecen4330_lcd_v3.c:660: fillScreen(RED);
      000F2C 90 F8 00         [24] 3499 	mov	dptr,#0xf800
      000F2F 12r07rF9         [24] 3500 	lcall	_fillScreen
                                   3501 ;	ecen4330_lcd_v3.c:662: delay(20);
      000F32 90 00 14         [24] 3502 	mov	dptr,#0x0014
      000F35 12r00r10         [24] 3503 	lcall	_delay
                                   3504 ;	ecen4330_lcd_v3.c:663: fillScreen(GREEN);
      000F38 90 07 E0         [24] 3505 	mov	dptr,#0x07e0
      000F3B 12r07rF9         [24] 3506 	lcall	_fillScreen
                                   3507 ;	ecen4330_lcd_v3.c:665: delay(20);
      000F3E 90 00 14         [24] 3508 	mov	dptr,#0x0014
      000F41 12r00r10         [24] 3509 	lcall	_delay
                                   3510 ;	ecen4330_lcd_v3.c:667: setRotation(0);
      000F44 75 82 00         [24] 3511 	mov	dpl,#0x00
      000F47 12r00rD7         [24] 3512 	lcall	_setRotation
                                   3513 ;	ecen4330_lcd_v3.c:668: fillScreen(BLACK);
      000F4A 90 00 00         [24] 3514 	mov	dptr,#0x0000
      000F4D 12r07rF9         [24] 3515 	lcall	_fillScreen
                                   3516 ;	ecen4330_lcd_v3.c:669: testCircles(20, RED);
      000F50 75*30 00         [24] 3517 	mov	_testCircles_PARM_2,#0x00
      000F53 75*31 F8         [24] 3518 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F56 75 82 14         [24] 3519 	mov	dpl,#0x14
      000F59 12r06r5A         [24] 3520 	lcall	_testCircles
                                   3521 ;	ecen4330_lcd_v3.c:670: delay(100);
      000F5C 90 00 64         [24] 3522 	mov	dptr,#0x0064
      000F5F 12r00r10         [24] 3523 	lcall	_delay
                                   3524 ;	ecen4330_lcd_v3.c:671: fillScreen(BLACK);
      000F62 90 00 00         [24] 3525 	mov	dptr,#0x0000
      000F65 12r07rF9         [24] 3526 	lcall	_fillScreen
                                   3527 ;	ecen4330_lcd_v3.c:672: setTextSize(5);
      000F68 75 82 05         [24] 3528 	mov	dpl,#0x05
      000F6B 12r00rBF         [24] 3529 	lcall	_setTextSize
                                   3530 ;	ecen4330_lcd_v3.c:673: setTextColor(CYAN, BLACK);
      000F6E E4               [12] 3531 	clr	a
      000F6F F5*00            [12] 3532 	mov	_setTextColor_PARM_2,a
      000F71 F5*01            [12] 3533 	mov	(_setTextColor_PARM_2 + 1),a
      000F73 90 07 FF         [24] 3534 	mov	dptr,#0x07ff
      000F76 12r00rB2         [24] 3535 	lcall	_setTextColor
                                   3536 ;	ecen4330_lcd_v3.c:674: LCD_string_write("Welcome\n");
      000F79 90r05r0B         [24] 3537 	mov	dptr,#___str_0
      000F7C 75 F0 80         [24] 3538 	mov	b,#0x80
      000F7F 12r0Cr00         [24] 3539 	lcall	_LCD_string_write
                                   3540 ;	ecen4330_lcd_v3.c:675: setTextSize(3);
      000F82 75 82 03         [24] 3541 	mov	dpl,#0x03
      000F85 12r00rBF         [24] 3542 	lcall	_setTextSize
                                   3543 ;	ecen4330_lcd_v3.c:676: LCD_string_write("ECEN-4330\n");
      000F88 90r05r14         [24] 3544 	mov	dptr,#___str_1
      000F8B 75 F0 80         [24] 3545 	mov	b,#0x80
      000F8E 12r0Cr00         [24] 3546 	lcall	_LCD_string_write
                                   3547 ;	ecen4330_lcd_v3.c:677: LCD_string_write("Rotation 0");
      000F91 90r05r1F         [24] 3548 	mov	dptr,#___str_2
      000F94 75 F0 80         [24] 3549 	mov	b,#0x80
      000F97 12r0Cr00         [24] 3550 	lcall	_LCD_string_write
                                   3551 ;	ecen4330_lcd_v3.c:678: delay(200);
      000F9A 90 00 C8         [24] 3552 	mov	dptr,#0x00c8
      000F9D 12r00r10         [24] 3553 	lcall	_delay
                                   3554 ;	ecen4330_lcd_v3.c:679: fillScreen(BLACK);
      000FA0 90 00 00         [24] 3555 	mov	dptr,#0x0000
      000FA3 12r07rF9         [24] 3556 	lcall	_fillScreen
                                   3557 ;	ecen4330_lcd_v3.c:680: setRotation(1);
      000FA6 75 82 01         [24] 3558 	mov	dpl,#0x01
      000FA9 12r00rD7         [24] 3559 	lcall	_setRotation
                                   3560 ;	ecen4330_lcd_v3.c:681: setCursor(0,0);
      000FAC E4               [12] 3561 	clr	a
      000FAD F5*00            [12] 3562 	mov	_setCursor_PARM_2,a
      000FAF F5*01            [12] 3563 	mov	(_setCursor_PARM_2 + 1),a
      000FB1 90 00 00         [24] 3564 	mov	dptr,#0x0000
      000FB4 12r00rA5         [24] 3565 	lcall	_setCursor
                                   3566 ;	ecen4330_lcd_v3.c:682: LCD_string_write("Rotation 1");
      000FB7 90r05r2A         [24] 3567 	mov	dptr,#___str_3
      000FBA 75 F0 80         [24] 3568 	mov	b,#0x80
      000FBD 12r0Cr00         [24] 3569 	lcall	_LCD_string_write
                                   3570 ;	ecen4330_lcd_v3.c:683: delay(500);
      000FC0 90 01 F4         [24] 3571 	mov	dptr,#0x01f4
      000FC3 12r00r10         [24] 3572 	lcall	_delay
                                   3573 ;	ecen4330_lcd_v3.c:684: fillScreen(BLACK);
      000FC6 90 00 00         [24] 3574 	mov	dptr,#0x0000
      000FC9 12r07rF9         [24] 3575 	lcall	_fillScreen
                                   3576 ;	ecen4330_lcd_v3.c:685: setRotation(2);
      000FCC 75 82 02         [24] 3577 	mov	dpl,#0x02
      000FCF 12r00rD7         [24] 3578 	lcall	_setRotation
                                   3579 ;	ecen4330_lcd_v3.c:686: setCursor(0,0);
      000FD2 E4               [12] 3580 	clr	a
      000FD3 F5*00            [12] 3581 	mov	_setCursor_PARM_2,a
      000FD5 F5*01            [12] 3582 	mov	(_setCursor_PARM_2 + 1),a
      000FD7 90 00 00         [24] 3583 	mov	dptr,#0x0000
      000FDA 12r00rA5         [24] 3584 	lcall	_setCursor
                                   3585 ;	ecen4330_lcd_v3.c:687: LCD_string_write("Rotation 2");
      000FDD 90r05r35         [24] 3586 	mov	dptr,#___str_4
      000FE0 75 F0 80         [24] 3587 	mov	b,#0x80
      000FE3 12r0Cr00         [24] 3588 	lcall	_LCD_string_write
                                   3589 ;	ecen4330_lcd_v3.c:688: delay(500);
      000FE6 90 01 F4         [24] 3590 	mov	dptr,#0x01f4
      000FE9 12r00r10         [24] 3591 	lcall	_delay
                                   3592 ;	ecen4330_lcd_v3.c:689: fillScreen(BLACK);
      000FEC 90 00 00         [24] 3593 	mov	dptr,#0x0000
      000FEF 12r07rF9         [24] 3594 	lcall	_fillScreen
                                   3595 ;	ecen4330_lcd_v3.c:690: setRotation(3);
      000FF2 75 82 03         [24] 3596 	mov	dpl,#0x03
      000FF5 12r00rD7         [24] 3597 	lcall	_setRotation
                                   3598 ;	ecen4330_lcd_v3.c:691: setCursor(0,0);
      000FF8 E4               [12] 3599 	clr	a
      000FF9 F5*00            [12] 3600 	mov	_setCursor_PARM_2,a
      000FFB F5*01            [12] 3601 	mov	(_setCursor_PARM_2 + 1),a
      000FFD 90 00 00         [24] 3602 	mov	dptr,#0x0000
      001000 12r00rA5         [24] 3603 	lcall	_setCursor
                                   3604 ;	ecen4330_lcd_v3.c:692: delay(200);
      001003 90 00 C8         [24] 3605 	mov	dptr,#0x00c8
      001006 12r00r10         [24] 3606 	lcall	_delay
                                   3607 ;	ecen4330_lcd_v3.c:693: LCD_string_write("Rotation 3");
      001009 90r05r40         [24] 3608 	mov	dptr,#___str_5
      00100C 75 F0 80         [24] 3609 	mov	b,#0x80
      00100F 12r0Cr00         [24] 3610 	lcall	_LCD_string_write
                                   3611 ;	ecen4330_lcd_v3.c:694: delay(200);
      001012 90 00 C8         [24] 3612 	mov	dptr,#0x00c8
                                   3613 ;	ecen4330_lcd_v3.c:695: }
      001015 02r00r10         [24] 3614 	ljmp	_delay
                                   3615 ;------------------------------------------------------------
                                   3616 ;Allocation info for local variables in function 'getAddress'
                                   3617 ;------------------------------------------------------------
                                   3618 ;input                     Allocated with name '_getAddress_input_65536_225'
                                   3619 ;hex                       Allocated with name '_getAddress_hex_65536_225'
                                   3620 ;i                         Allocated with name '_getAddress_i_65536_225'
                                   3621 ;address                   Allocated with name '_getAddress_address_65536_225'
                                   3622 ;------------------------------------------------------------
                                   3623 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3624 ;	-----------------------------------------
                                   3625 ;	 function getAddress
                                   3626 ;	-----------------------------------------
      001018                       3627 _getAddress:
                                   3628 ;	getFunctions.c:16: address = 0;
      001018 90r00r12         [24] 3629 	mov	dptr,#_getAddress_address_65536_225
      00101B E4               [12] 3630 	clr	a
      00101C F0               [24] 3631 	movx	@dptr,a
      00101D A3               [24] 3632 	inc	dptr
      00101E F0               [24] 3633 	movx	@dptr,a
                                   3634 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00101F 7F 00            [12] 3635 	mov	r7,#0x00
      001021                       3636 00104$:
                                   3637 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      001021 C0 07            [24] 3638 	push	ar7
      001023 12r0Cr99         [24] 3639 	lcall	_keyDetect
                                   3640 ;	getFunctions.c:21: write(input);						// display nibble to user
      001026 AE 82            [24] 3641 	mov  r6,dpl
      001028 C0 06            [24] 3642 	push	ar6
      00102A 12r0Br92         [24] 3643 	lcall	_write
      00102D D0 06            [24] 3644 	pop	ar6
                                   3645 ;	getFunctions.c:22: hex = convertAsciiHex(input);			// convert ascii char to hex
      00102F 8E 82            [24] 3646 	mov	dpl,r6
      001031 12r0Fr14         [24] 3647 	lcall	_convertAsciiHex
      001034 AE 82            [24] 3648 	mov	r6,dpl
      001036 D0 07            [24] 3649 	pop	ar7
                                   3650 ;	getFunctions.c:25: address = address | hex;
      001038 90r00r12         [24] 3651 	mov	dptr,#_getAddress_address_65536_225
      00103B E0               [24] 3652 	movx	a,@dptr
      00103C FC               [12] 3653 	mov	r4,a
      00103D A3               [24] 3654 	inc	dptr
      00103E E0               [24] 3655 	movx	a,@dptr
      00103F FD               [12] 3656 	mov	r5,a
      001040 7B 00            [12] 3657 	mov	r3,#0x00
      001042 90r00r12         [24] 3658 	mov	dptr,#_getAddress_address_65536_225
      001045 EE               [12] 3659 	mov	a,r6
      001046 4C               [12] 3660 	orl	a,r4
      001047 F0               [24] 3661 	movx	@dptr,a
      001048 EB               [12] 3662 	mov	a,r3
      001049 4D               [12] 3663 	orl	a,r5
      00104A A3               [24] 3664 	inc	dptr
      00104B F0               [24] 3665 	movx	@dptr,a
                                   3666 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      00104C BF 03 02         [24] 3667 	cjne	r7,#0x03,00121$
      00104F 80 1C            [24] 3668 	sjmp	00105$
      001051                       3669 00121$:
      001051 90r00r12         [24] 3670 	mov	dptr,#_getAddress_address_65536_225
      001054 E0               [24] 3671 	movx	a,@dptr
      001055 FD               [12] 3672 	mov	r5,a
      001056 A3               [24] 3673 	inc	dptr
      001057 E0               [24] 3674 	movx	a,@dptr
      001058 C4               [12] 3675 	swap	a
      001059 54 F0            [12] 3676 	anl	a,#0xf0
      00105B CD               [12] 3677 	xch	a,r5
      00105C C4               [12] 3678 	swap	a
      00105D CD               [12] 3679 	xch	a,r5
      00105E 6D               [12] 3680 	xrl	a,r5
      00105F CD               [12] 3681 	xch	a,r5
      001060 54 F0            [12] 3682 	anl	a,#0xf0
      001062 CD               [12] 3683 	xch	a,r5
      001063 6D               [12] 3684 	xrl	a,r5
      001064 FE               [12] 3685 	mov	r6,a
      001065 90r00r12         [24] 3686 	mov	dptr,#_getAddress_address_65536_225
      001068 ED               [12] 3687 	mov	a,r5
      001069 F0               [24] 3688 	movx	@dptr,a
      00106A EE               [12] 3689 	mov	a,r6
      00106B A3               [24] 3690 	inc	dptr
      00106C F0               [24] 3691 	movx	@dptr,a
      00106D                       3692 00105$:
                                   3693 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00106D 0F               [12] 3694 	inc	r7
      00106E BF 04 00         [24] 3695 	cjne	r7,#0x04,00122$
      001071                       3696 00122$:
      001071 40 AE            [24] 3697 	jc	00104$
                                   3698 ;	getFunctions.c:28: return address;
      001073 90r00r12         [24] 3699 	mov	dptr,#_getAddress_address_65536_225
      001076 E0               [24] 3700 	movx	a,@dptr
      001077 FE               [12] 3701 	mov	r6,a
      001078 A3               [24] 3702 	inc	dptr
      001079 E0               [24] 3703 	movx	a,@dptr
                                   3704 ;	getFunctions.c:29: }
      00107A 8E 82            [24] 3705 	mov	dpl,r6
      00107C F5 83            [12] 3706 	mov	dph,a
      00107E 22               [24] 3707 	ret
                                   3708 ;------------------------------------------------------------
                                   3709 ;Allocation info for local variables in function 'getByte'
                                   3710 ;------------------------------------------------------------
                                   3711 ;input                     Allocated with name '_getByte_input_65536_228'
                                   3712 ;hex                       Allocated with name '_getByte_hex_65536_228'
                                   3713 ;byte                      Allocated with name '_getByte_byte_65536_228'
                                   3714 ;i                         Allocated with name '_getByte_i_65536_228'
                                   3715 ;------------------------------------------------------------
                                   3716 ;	getFunctions.c:36: uint8_t getByte() {
                                   3717 ;	-----------------------------------------
                                   3718 ;	 function getByte
                                   3719 ;	-----------------------------------------
      00107F                       3720 _getByte:
                                   3721 ;	getFunctions.c:40: byte = 0;
      00107F 90r00r14         [24] 3722 	mov	dptr,#_getByte_byte_65536_228
      001082 E4               [12] 3723 	clr	a
      001083 F0               [24] 3724 	movx	@dptr,a
                                   3725 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      001084 7F 00            [12] 3726 	mov	r7,#0x00
      001086                       3727 00104$:
                                   3728 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      001086 C0 07            [24] 3729 	push	ar7
      001088 12r0Cr99         [24] 3730 	lcall	_keyDetect
                                   3731 ;	getFunctions.c:45: write(input);						// display nibble to user
      00108B AE 82            [24] 3732 	mov  r6,dpl
      00108D C0 06            [24] 3733 	push	ar6
      00108F 12r0Br92         [24] 3734 	lcall	_write
      001092 D0 06            [24] 3735 	pop	ar6
                                   3736 ;	getFunctions.c:46: hex = convertAsciiHex(input);			// convert ascii char to hex
      001094 8E 82            [24] 3737 	mov	dpl,r6
      001096 12r0Fr14         [24] 3738 	lcall	_convertAsciiHex
      001099 AE 82            [24] 3739 	mov	r6,dpl
      00109B D0 07            [24] 3740 	pop	ar7
                                   3741 ;	getFunctions.c:49: byte = byte | hex;
      00109D 90r00r14         [24] 3742 	mov	dptr,#_getByte_byte_65536_228
      0010A0 E0               [24] 3743 	movx	a,@dptr
      0010A1 4E               [12] 3744 	orl	a,r6
      0010A2 F0               [24] 3745 	movx	@dptr,a
                                   3746 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      0010A3 BF 01 02         [24] 3747 	cjne	r7,#0x01,00121$
      0010A6 80 09            [24] 3748 	sjmp	00105$
      0010A8                       3749 00121$:
      0010A8 90r00r14         [24] 3750 	mov	dptr,#_getByte_byte_65536_228
      0010AB E0               [24] 3751 	movx	a,@dptr
      0010AC C4               [12] 3752 	swap	a
      0010AD 54 F0            [12] 3753 	anl	a,#0xf0
      0010AF FE               [12] 3754 	mov	r6,a
      0010B0 F0               [24] 3755 	movx	@dptr,a
      0010B1                       3756 00105$:
                                   3757 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      0010B1 0F               [12] 3758 	inc	r7
      0010B2 BF 02 00         [24] 3759 	cjne	r7,#0x02,00122$
      0010B5                       3760 00122$:
      0010B5 40 CF            [24] 3761 	jc	00104$
                                   3762 ;	getFunctions.c:52: return byte;
      0010B7 90r00r14         [24] 3763 	mov	dptr,#_getByte_byte_65536_228
      0010BA E0               [24] 3764 	movx	a,@dptr
                                   3765 ;	getFunctions.c:53: }
      0010BB F5 82            [12] 3766 	mov	dpl,a
      0010BD 22               [24] 3767 	ret
                                   3768 ;------------------------------------------------------------
                                   3769 ;Allocation info for local variables in function 'dumpPage'
                                   3770 ;------------------------------------------------------------
                                   3771 ;ramAddress                Allocated with name '_dumpPage_ramAddress_65537_233'
                                   3772 ;sloc0                     Allocated with name '_dumpPage_sloc0_1_0'
                                   3773 ;sloc1                     Allocated with name '_dumpPage_sloc1_1_0'
                                   3774 ;n                         Allocated with name '_dumpPage_PARM_2'
                                   3775 ;type                      Allocated with name '_dumpPage_PARM_3'
                                   3776 ;start                     Allocated with name '_dumpPage_start_65536_231'
                                   3777 ;i                         Allocated with name '_dumpPage_i_65537_233'
                                   3778 ;data                      Allocated with name '_dumpPage_data_65537_233'
                                   3779 ;j                         Allocated with name '_dumpPage_j_65537_233'
                                   3780 ;high                      Allocated with name '_dumpPage_high_65537_233'
                                   3781 ;low                       Allocated with name '_dumpPage_low_65537_233'
                                   3782 ;------------------------------------------------------------
                                   3783 ;	dump2.c:8: void dumpPage(__xdata uint16_t start, __xdata uint8_t n, __xdata uint8_t type/*, uint8_t page, bool direction*/) {
                                   3784 ;	-----------------------------------------
                                   3785 ;	 function dumpPage
                                   3786 ;	-----------------------------------------
      0010BE                       3787 _dumpPage:
      0010BE AF 83            [24] 3788 	mov	r7,dph
      0010C0 E5 82            [12] 3789 	mov	a,dpl
      0010C2 90r00r17         [24] 3790 	mov	dptr,#_dumpPage_start_65536_231
      0010C5 F0               [24] 3791 	movx	@dptr,a
      0010C6 EF               [12] 3792 	mov	a,r7
      0010C7 A3               [24] 3793 	inc	dptr
      0010C8 F0               [24] 3794 	movx	@dptr,a
                                   3795 ;	dump2.c:10: fillScreen(GRAY);
      0010C9 90 D6 BA         [24] 3796 	mov	dptr,#0xd6ba
      0010CC 12r07rF9         [24] 3797 	lcall	_fillScreen
                                   3798 ;	dump2.c:11: setCursor(0, 0);
      0010CF E4               [12] 3799 	clr	a
      0010D0 F5*00            [12] 3800 	mov	_setCursor_PARM_2,a
      0010D2 F5*01            [12] 3801 	mov	(_setCursor_PARM_2 + 1),a
      0010D4 90 00 00         [24] 3802 	mov	dptr,#0x0000
      0010D7 12r00rA5         [24] 3803 	lcall	_setCursor
                                   3804 ;	dump2.c:12: setTextSize(2);
      0010DA 75 82 02         [24] 3805 	mov	dpl,#0x02
      0010DD 12r00rBF         [24] 3806 	lcall	_setTextSize
                                   3807 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      0010E0 90r00r19         [24] 3808 	mov	dptr,#_dumpPage_i_65537_233
      0010E3 E4               [12] 3809 	clr	a
      0010E4 F0               [24] 3810 	movx	@dptr,a
      0010E5 A3               [24] 3811 	inc	dptr
      0010E6 F0               [24] 3812 	movx	@dptr,a
      0010E7 90r00r17         [24] 3813 	mov	dptr,#_dumpPage_start_65536_231
      0010EA E0               [24] 3814 	movx	a,@dptr
      0010EB FE               [12] 3815 	mov	r6,a
      0010EC A3               [24] 3816 	inc	dptr
      0010ED E0               [24] 3817 	movx	a,@dptr
      0010EE FF               [12] 3818 	mov	r7,a
      0010EF 90r00r16         [24] 3819 	mov	dptr,#_dumpPage_PARM_3
      0010F2 E0               [24] 3820 	movx	a,@dptr
      0010F3 FD               [12] 3821 	mov	r5,a
      0010F4 90r00r15         [24] 3822 	mov	dptr,#_dumpPage_PARM_2
      0010F7 E0               [24] 3823 	movx	a,@dptr
      0010F8 F5 F0            [12] 3824 	mov	b,a
      0010FA ED               [12] 3825 	mov	a,r5
      0010FB A4               [48] 3826 	mul	ab
      0010FC FB               [12] 3827 	mov	r3,a
      0010FD AC F0            [24] 3828 	mov	r4,b
      0010FF                       3829 00109$:
      0010FF C0 06            [24] 3830 	push	ar6
      001101 C0 07            [24] 3831 	push	ar7
      001103 90r00r19         [24] 3832 	mov	dptr,#_dumpPage_i_65537_233
      001106 E0               [24] 3833 	movx	a,@dptr
      001107 F9               [12] 3834 	mov	r1,a
      001108 A3               [24] 3835 	inc	dptr
      001109 E0               [24] 3836 	movx	a,@dptr
      00110A FA               [12] 3837 	mov	r2,a
      00110B 89*4E            [24] 3838 	mov	_dumpPage_sloc0_1_0,r1
      00110D 8A*4F            [24] 3839 	mov	(_dumpPage_sloc0_1_0 + 1),r2
      00110F 8B 00            [24] 3840 	mov	ar0,r3
      001111 8C 07            [24] 3841 	mov	ar7,r4
      001113 C3               [12] 3842 	clr	c
      001114 E5*4E            [12] 3843 	mov	a,_dumpPage_sloc0_1_0
      001116 98               [12] 3844 	subb	a,r0
      001117 E5*4F            [12] 3845 	mov	a,(_dumpPage_sloc0_1_0 + 1)
      001119 9F               [12] 3846 	subb	a,r7
      00111A D0 07            [24] 3847 	pop	ar7
      00111C D0 06            [24] 3848 	pop	ar6
      00111E 40 01            [24] 3849 	jc	00134$
      001120 22               [24] 3850 	ret
      001121                       3851 00134$:
                                   3852 ;	dump2.c:25: if (i == __END_RAM__) break;
      001121 74 FF            [12] 3853 	mov	a,#0xff
      001123 B5*4E 04         [24] 3854 	cjne	a,_dumpPage_sloc0_1_0,00135$
      001126 B5*4F 01         [24] 3855 	cjne	a,(_dumpPage_sloc0_1_0 + 1),00135$
      001129 22               [24] 3856 	ret
      00112A                       3857 00135$:
                                   3858 ;	dump2.c:28: IOM = 0;
      00112A C0 03            [24] 3859 	push	ar3
      00112C C0 04            [24] 3860 	push	ar4
                                   3861 ;	assignBit
      00112E C2 B4            [12] 3862 	clr	_P3_4
                                   3863 ;	dump2.c:29: ramAddress = (uint16_t __xdata*)(i * type + start);
      001130 8D*00            [24] 3864 	mov	__mulint_PARM_2,r5
      001132 75*01 00         [24] 3865 	mov	(__mulint_PARM_2 + 1),#0x00
      001135 89 82            [24] 3866 	mov	dpl,r1
      001137 8A 83            [24] 3867 	mov	dph,r2
      001139 C0 07            [24] 3868 	push	ar7
      00113B C0 06            [24] 3869 	push	ar6
      00113D C0 05            [24] 3870 	push	ar5
      00113F C0 04            [24] 3871 	push	ar4
      001141 C0 03            [24] 3872 	push	ar3
      001143 C0 02            [24] 3873 	push	ar2
      001145 C0 01            [24] 3874 	push	ar1
      001147 12r00r00         [24] 3875 	lcall	__mulint
      00114A E5 82            [12] 3876 	mov	a,dpl
      00114C 85 83 F0         [24] 3877 	mov	b,dph
      00114F D0 01            [24] 3878 	pop	ar1
      001151 D0 02            [24] 3879 	pop	ar2
      001153 D0 03            [24] 3880 	pop	ar3
      001155 D0 04            [24] 3881 	pop	ar4
      001157 D0 05            [24] 3882 	pop	ar5
      001159 D0 06            [24] 3883 	pop	ar6
      00115B D0 07            [24] 3884 	pop	ar7
      00115D 2E               [12] 3885 	add	a,r6
      00115E F8               [12] 3886 	mov	r0,a
      00115F EF               [12] 3887 	mov	a,r7
      001160 35 F0            [12] 3888 	addc	a,b
      001162 FC               [12] 3889 	mov	r4,a
      001163 88*4C            [24] 3890 	mov	_dumpPage_ramAddress_65537_233,r0
      001165 8C*4D            [24] 3891 	mov	(_dumpPage_ramAddress_65537_233 + 1),r4
                                   3892 ;	dump2.c:30: IOM = 1;
                                   3893 ;	assignBit
      001167 D2 B4            [12] 3894 	setb	_P3_4
                                   3895 ;	dump2.c:32: high = HIGHBYTE(start + i);
      001169 E9               [12] 3896 	mov	a,r1
      00116A 2E               [12] 3897 	add	a,r6
      00116B FB               [12] 3898 	mov	r3,a
      00116C EA               [12] 3899 	mov	a,r2
      00116D 3F               [12] 3900 	addc	a,r7
      00116E F5 82            [12] 3901 	mov	dpl,a
                                   3902 ;	dump2.c:33: low = LOWBYTE(start + i);
      001170 8E 04            [24] 3903 	mov	ar4,r6
      001172 E9               [12] 3904 	mov	a,r1
      001173 2C               [12] 3905 	add	a,r4
      001174 FC               [12] 3906 	mov	r4,a
                                   3907 ;	dump2.c:36: asciiToHex(high);
      001175 C0 07            [24] 3908 	push	ar7
      001177 C0 06            [24] 3909 	push	ar6
      001179 C0 05            [24] 3910 	push	ar5
      00117B C0 04            [24] 3911 	push	ar4
      00117D C0 03            [24] 3912 	push	ar3
      00117F 12r0Er77         [24] 3913 	lcall	_asciiToHex
      001182 D0 03            [24] 3914 	pop	ar3
      001184 D0 04            [24] 3915 	pop	ar4
                                   3916 ;	dump2.c:37: asciiToHex(low);
      001186 8C 82            [24] 3917 	mov	dpl,r4
      001188 C0 04            [24] 3918 	push	ar4
      00118A C0 03            [24] 3919 	push	ar3
      00118C 12r0Er77         [24] 3920 	lcall	_asciiToHex
                                   3921 ;	dump2.c:39: LCD_string_write(": ");
      00118F 90r05r4B         [24] 3922 	mov	dptr,#___str_6
      001192 75 F0 80         [24] 3923 	mov	b,#0x80
      001195 12r0Cr00         [24] 3924 	lcall	_LCD_string_write
      001198 D0 03            [24] 3925 	pop	ar3
      00119A D0 04            [24] 3926 	pop	ar4
      00119C D0 05            [24] 3927 	pop	ar5
      00119E D0 06            [24] 3928 	pop	ar6
      0011A0 D0 07            [24] 3929 	pop	ar7
                                   3930 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011A2 85*4C*4E         [24] 3931 	mov	_dumpPage_sloc0_1_0,_dumpPage_ramAddress_65537_233
      0011A5 85*4D*4F         [24] 3932 	mov	(_dumpPage_sloc0_1_0 + 1),(_dumpPage_ramAddress_65537_233 + 1)
      0011A8 75*50 00         [24] 3933 	mov	_dumpPage_sloc1_1_0,#0x00
                                   3934 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      0011AB D0 04            [24] 3935 	pop	ar4
      0011AD D0 03            [24] 3936 	pop	ar3
                                   3937 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011AF                       3938 00106$:
      0011AF C3               [12] 3939 	clr	c
      0011B0 E5*50            [12] 3940 	mov	a,_dumpPage_sloc1_1_0
      0011B2 9D               [12] 3941 	subb	a,r5
      0011B3 50 3B            [24] 3942 	jnc	00103$
                                   3943 ;	dump2.c:44: IOM = 0;
                                   3944 ;	assignBit
      0011B5 C2 B4            [12] 3945 	clr	_P3_4
                                   3946 ;	dump2.c:45: data = *ramAddress;
      0011B7 85*4E 82         [24] 3947 	mov	dpl,_dumpPage_sloc0_1_0
      0011BA 85*4F 83         [24] 3948 	mov	dph,(_dumpPage_sloc0_1_0 + 1)
      0011BD E0               [24] 3949 	movx	a,@dptr
      0011BE 90r00r1B         [24] 3950 	mov	dptr,#_dumpPage_data_65537_233
      0011C1 F0               [24] 3951 	movx	@dptr,a
                                   3952 ;	dump2.c:46: &ramAddress++;
      0011C2 74 02            [12] 3953 	mov	a,#0x02
      0011C4 25*4E            [12] 3954 	add	a,_dumpPage_sloc0_1_0
      0011C6 F5*4E            [12] 3955 	mov	_dumpPage_sloc0_1_0,a
      0011C8 E4               [12] 3956 	clr	a
      0011C9 35*4F            [12] 3957 	addc	a,(_dumpPage_sloc0_1_0 + 1)
      0011CB F5*4F            [12] 3958 	mov	(_dumpPage_sloc0_1_0 + 1),a
                                   3959 ;	dump2.c:47: IOM = 1;
                                   3960 ;	assignBit
      0011CD D2 B4            [12] 3961 	setb	_P3_4
                                   3962 ;	dump2.c:49: asciiToHex(data);
      0011CF 90r00r1B         [24] 3963 	mov	dptr,#_dumpPage_data_65537_233
      0011D2 E0               [24] 3964 	movx	a,@dptr
      0011D3 F5 82            [12] 3965 	mov	dpl,a
      0011D5 C0 07            [24] 3966 	push	ar7
      0011D7 C0 06            [24] 3967 	push	ar6
      0011D9 C0 05            [24] 3968 	push	ar5
      0011DB C0 04            [24] 3969 	push	ar4
      0011DD C0 03            [24] 3970 	push	ar3
      0011DF 12r0Er77         [24] 3971 	lcall	_asciiToHex
      0011E2 D0 03            [24] 3972 	pop	ar3
      0011E4 D0 04            [24] 3973 	pop	ar4
      0011E6 D0 05            [24] 3974 	pop	ar5
      0011E8 D0 06            [24] 3975 	pop	ar6
      0011EA D0 07            [24] 3976 	pop	ar7
                                   3977 ;	dump2.c:41: for (j = 0; j < type; j++) {
      0011EC 05*50            [12] 3978 	inc	_dumpPage_sloc1_1_0
      0011EE 80 BF            [24] 3979 	sjmp	00106$
      0011F0                       3980 00103$:
                                   3981 ;	dump2.c:52: write('\n');
      0011F0 C0 03            [24] 3982 	push	ar3
      0011F2 C0 04            [24] 3983 	push	ar4
      0011F4 75 82 0A         [24] 3984 	mov	dpl,#0x0a
      0011F7 C0 07            [24] 3985 	push	ar7
      0011F9 C0 06            [24] 3986 	push	ar6
      0011FB C0 05            [24] 3987 	push	ar5
      0011FD C0 04            [24] 3988 	push	ar4
      0011FF C0 03            [24] 3989 	push	ar3
      001201 12r0Br92         [24] 3990 	lcall	_write
      001204 D0 03            [24] 3991 	pop	ar3
      001206 D0 04            [24] 3992 	pop	ar4
      001208 D0 05            [24] 3993 	pop	ar5
      00120A D0 06            [24] 3994 	pop	ar6
      00120C D0 07            [24] 3995 	pop	ar7
                                   3996 ;	dump2.c:23: for (i = 0; i < n * type; i += type) {
      00120E 8D 01            [24] 3997 	mov	ar1,r5
      001210 7A 00            [12] 3998 	mov	r2,#0x00
      001212 90r00r19         [24] 3999 	mov	dptr,#_dumpPage_i_65537_233
      001215 E0               [24] 4000 	movx	a,@dptr
      001216 F8               [12] 4001 	mov	r0,a
      001217 A3               [24] 4002 	inc	dptr
      001218 E0               [24] 4003 	movx	a,@dptr
      001219 FC               [12] 4004 	mov	r4,a
      00121A E9               [12] 4005 	mov	a,r1
      00121B 28               [12] 4006 	add	a,r0
      00121C F8               [12] 4007 	mov	r0,a
      00121D EA               [12] 4008 	mov	a,r2
      00121E 3C               [12] 4009 	addc	a,r4
      00121F FC               [12] 4010 	mov	r4,a
      001220 90r00r19         [24] 4011 	mov	dptr,#_dumpPage_i_65537_233
      001223 E8               [12] 4012 	mov	a,r0
      001224 F0               [24] 4013 	movx	@dptr,a
      001225 EC               [12] 4014 	mov	a,r4
      001226 A3               [24] 4015 	inc	dptr
      001227 F0               [24] 4016 	movx	@dptr,a
      001228 D0 04            [24] 4017 	pop	ar4
      00122A D0 03            [24] 4018 	pop	ar3
                                   4019 ;	dump2.c:60: }
      00122C 02r10rFF         [24] 4020 	ljmp	00109$
                                   4021 ;------------------------------------------------------------
                                   4022 ;Allocation info for local variables in function 'dump'
                                   4023 ;------------------------------------------------------------
                                   4024 ;sloc0                     Allocated with name '_dump_sloc0_1_0'
                                   4025 ;sloc1                     Allocated with name '_dump_sloc1_1_0'
                                   4026 ;type                      Allocated with name '_dump_type_65537_239'
                                   4027 ;size                      Allocated with name '_dump_size_65537_239'
                                   4028 ;page                      Allocated with name '_dump_page_65537_239'
                                   4029 ;input                     Allocated with name '_dump_input_65537_239'
                                   4030 ;address                   Allocated with name '_dump_address_65537_239'
                                   4031 ;------------------------------------------------------------
                                   4032 ;	dump2.c:66: void dump() {
                                   4033 ;	-----------------------------------------
                                   4034 ;	 function dump
                                   4035 ;	-----------------------------------------
      00122F                       4036 _dump:
                                   4037 ;	dump2.c:68: fillScreen(GRAY);
      00122F 90 D6 BA         [24] 4038 	mov	dptr,#0xd6ba
      001232 12r07rF9         [24] 4039 	lcall	_fillScreen
                                   4040 ;	dump2.c:69: setCursor(0, 0);
      001235 E4               [12] 4041 	clr	a
      001236 F5*00            [12] 4042 	mov	_setCursor_PARM_2,a
      001238 F5*01            [12] 4043 	mov	(_setCursor_PARM_2 + 1),a
      00123A 90 00 00         [24] 4044 	mov	dptr,#0x0000
      00123D 12r00rA5         [24] 4045 	lcall	_setCursor
                                   4046 ;	dump2.c:70: setTextSize(2);
      001240 75 82 02         [24] 4047 	mov	dpl,#0x02
      001243 12r00rBF         [24] 4048 	lcall	_setTextSize
                                   4049 ;	dump2.c:79: page = 1;
      001246 90r00r1D         [24] 4050 	mov	dptr,#_dump_page_65537_239
      001249 74 01            [12] 4051 	mov	a,#0x01
      00124B F0               [24] 4052 	movx	@dptr,a
                                   4053 ;	dump2.c:82: LCD_string_write("Enter start address:\n");
      00124C 90r05r4E         [24] 4054 	mov	dptr,#___str_7
      00124F 75 F0 80         [24] 4055 	mov	b,#0x80
      001252 12r0Cr00         [24] 4056 	lcall	_LCD_string_write
                                   4057 ;	dump2.c:83: address = getAddress();
      001255 12r10r18         [24] 4058 	lcall	_getAddress
      001258 AE 82            [24] 4059 	mov	r6,dpl
      00125A AF 83            [24] 4060 	mov	r7,dph
      00125C 90r00r1E         [24] 4061 	mov	dptr,#_dump_address_65537_239
      00125F EE               [12] 4062 	mov	a,r6
      001260 F0               [24] 4063 	movx	@dptr,a
      001261 EF               [12] 4064 	mov	a,r7
      001262 A3               [24] 4065 	inc	dptr
      001263 F0               [24] 4066 	movx	@dptr,a
                                   4067 ;	dump2.c:84: write('\n');
      001264 75 82 0A         [24] 4068 	mov	dpl,#0x0a
      001267 C0 07            [24] 4069 	push	ar7
      001269 C0 06            [24] 4070 	push	ar6
      00126B 12r0Br92         [24] 4071 	lcall	_write
                                   4072 ;	dump2.c:88: LCD_string_write("Enter data type\n");
      00126E 90r05r64         [24] 4073 	mov	dptr,#___str_8
      001271 75 F0 80         [24] 4074 	mov	b,#0x80
      001274 12r0Cr00         [24] 4075 	lcall	_LCD_string_write
                                   4076 ;	dump2.c:89: LCD_string_write("B-Byte, A-Word,\n");
      001277 90r05r75         [24] 4077 	mov	dptr,#___str_9
      00127A 75 F0 80         [24] 4078 	mov	b,#0x80
      00127D 12r0Cr00         [24] 4079 	lcall	_LCD_string_write
                                   4080 ;	dump2.c:90: LCD_string_write("D-Double word\n");
      001280 90r05r86         [24] 4081 	mov	dptr,#___str_10
      001283 75 F0 80         [24] 4082 	mov	b,#0x80
      001286 12r0Cr00         [24] 4083 	lcall	_LCD_string_write
      001289 D0 06            [24] 4084 	pop	ar6
      00128B D0 07            [24] 4085 	pop	ar7
                                   4086 ;	dump2.c:93: do {
      00128D                       4087 00108$:
                                   4088 ;	dump2.c:94: type = keyDetect();
      00128D C0 07            [24] 4089 	push	ar7
      00128F C0 06            [24] 4090 	push	ar6
      001291 12r0Cr99         [24] 4091 	lcall	_keyDetect
      001294 AD 82            [24] 4092 	mov	r5,dpl
      001296 D0 06            [24] 4093 	pop	ar6
      001298 D0 07            [24] 4094 	pop	ar7
      00129A 90r00r1C         [24] 4095 	mov	dptr,#_dump_type_65537_239
      00129D ED               [12] 4096 	mov	a,r5
      00129E F0               [24] 4097 	movx	@dptr,a
                                   4098 ;	dump2.c:95: switch(type) {
      00129F BD 41 02         [24] 4099 	cjne	r5,#0x41,00201$
      0012A2 80 23            [24] 4100 	sjmp	00102$
      0012A4                       4101 00201$:
      0012A4 BD 42 02         [24] 4102 	cjne	r5,#0x42,00202$
      0012A7 80 05            [24] 4103 	sjmp	00101$
      0012A9                       4104 00202$:
                                   4105 ;	dump2.c:96: case 'B': {
      0012A9 BD 44 4B         [24] 4106 	cjne	r5,#0x44,00109$
      0012AC 80 32            [24] 4107 	sjmp	00103$
      0012AE                       4108 00101$:
                                   4109 ;	dump2.c:97: type = 1;
      0012AE 90r00r1C         [24] 4110 	mov	dptr,#_dump_type_65537_239
      0012B1 74 01            [12] 4111 	mov	a,#0x01
      0012B3 F0               [24] 4112 	movx	@dptr,a
                                   4113 ;	dump2.c:98: LCD_string_write("Byte\n");
      0012B4 90r05r95         [24] 4114 	mov	dptr,#___str_11
      0012B7 75 F0 80         [24] 4115 	mov	b,#0x80
      0012BA C0 07            [24] 4116 	push	ar7
      0012BC C0 06            [24] 4117 	push	ar6
      0012BE 12r0Cr00         [24] 4118 	lcall	_LCD_string_write
      0012C1 D0 06            [24] 4119 	pop	ar6
      0012C3 D0 07            [24] 4120 	pop	ar7
                                   4121 ;	dump2.c:99: break;
                                   4122 ;	dump2.c:101: case 'A': {
      0012C5 80 30            [24] 4123 	sjmp	00109$
      0012C7                       4124 00102$:
                                   4125 ;	dump2.c:102: type = 2; 
      0012C7 90r00r1C         [24] 4126 	mov	dptr,#_dump_type_65537_239
      0012CA 74 02            [12] 4127 	mov	a,#0x02
      0012CC F0               [24] 4128 	movx	@dptr,a
                                   4129 ;	dump2.c:103: LCD_string_write("Word\n");
      0012CD 90r05r9B         [24] 4130 	mov	dptr,#___str_12
      0012D0 75 F0 80         [24] 4131 	mov	b,#0x80
      0012D3 C0 07            [24] 4132 	push	ar7
      0012D5 C0 06            [24] 4133 	push	ar6
      0012D7 12r0Cr00         [24] 4134 	lcall	_LCD_string_write
      0012DA D0 06            [24] 4135 	pop	ar6
      0012DC D0 07            [24] 4136 	pop	ar7
                                   4137 ;	dump2.c:104: break;
                                   4138 ;	dump2.c:106: case 'D': {
      0012DE 80 17            [24] 4139 	sjmp	00109$
      0012E0                       4140 00103$:
                                   4141 ;	dump2.c:107: type = 4;
      0012E0 90r00r1C         [24] 4142 	mov	dptr,#_dump_type_65537_239
      0012E3 74 04            [12] 4143 	mov	a,#0x04
      0012E5 F0               [24] 4144 	movx	@dptr,a
                                   4145 ;	dump2.c:108: LCD_string_write("Double word\n");
      0012E6 90r05rA1         [24] 4146 	mov	dptr,#___str_13
      0012E9 75 F0 80         [24] 4147 	mov	b,#0x80
      0012EC C0 07            [24] 4148 	push	ar7
      0012EE C0 06            [24] 4149 	push	ar6
      0012F0 12r0Cr00         [24] 4150 	lcall	_LCD_string_write
      0012F3 D0 06            [24] 4151 	pop	ar6
      0012F5 D0 07            [24] 4152 	pop	ar7
                                   4153 ;	dump2.c:112: }
      0012F7                       4154 00109$:
                                   4155 ;	dump2.c:113: } while(type != 1 && type != 2 && type != 4);
      0012F7 90r00r1C         [24] 4156 	mov	dptr,#_dump_type_65537_239
      0012FA E0               [24] 4157 	movx	a,@dptr
      0012FB FD               [12] 4158 	mov	r5,a
      0012FC BD 01 02         [24] 4159 	cjne	r5,#0x01,00204$
      0012FF 80 0D            [24] 4160 	sjmp	00110$
      001301                       4161 00204$:
      001301 BD 02 02         [24] 4162 	cjne	r5,#0x02,00205$
      001304 80 08            [24] 4163 	sjmp	00110$
      001306                       4164 00205$:
      001306 BD 04 02         [24] 4165 	cjne	r5,#0x04,00206$
      001309 80 03            [24] 4166 	sjmp	00207$
      00130B                       4167 00206$:
      00130B 02r12r8D         [24] 4168 	ljmp	00108$
      00130E                       4169 00207$:
      00130E                       4170 00110$:
                                   4171 ;	dump2.c:116: LCD_string_write("Enter block size:\n");
      00130E 90r05rAE         [24] 4172 	mov	dptr,#___str_14
      001311 75 F0 80         [24] 4173 	mov	b,#0x80
      001314 C0 07            [24] 4174 	push	ar7
      001316 C0 06            [24] 4175 	push	ar6
      001318 12r0Cr00         [24] 4176 	lcall	_LCD_string_write
                                   4177 ;	dump2.c:117: size = getByte();
      00131B 12r10r7F         [24] 4178 	lcall	_getByte
      00131E AD 82            [24] 4179 	mov	r5,dpl
                                   4180 ;	dump2.c:118: write('\n');
      001320 75 82 0A         [24] 4181 	mov	dpl,#0x0a
      001323 C0 05            [24] 4182 	push	ar5
      001325 12r0Br92         [24] 4183 	lcall	_write
      001328 D0 05            [24] 4184 	pop	ar5
      00132A D0 06            [24] 4185 	pop	ar6
      00132C D0 07            [24] 4186 	pop	ar7
                                   4187 ;	dump2.c:123: if (size < NUM) {
      00132E BD 0F 00         [24] 4188 	cjne	r5,#0x0f,00208$
      001331                       4189 00208$:
      001331 50 1C            [24] 4190 	jnc	00112$
                                   4191 ;	dump2.c:124: dumpPage(address, size, type);
      001333 90r00r1C         [24] 4192 	mov	dptr,#_dump_type_65537_239
      001336 E0               [24] 4193 	movx	a,@dptr
      001337 FC               [12] 4194 	mov	r4,a
      001338 90r00r15         [24] 4195 	mov	dptr,#_dumpPage_PARM_2
      00133B ED               [12] 4196 	mov	a,r5
      00133C F0               [24] 4197 	movx	@dptr,a
      00133D 90r00r16         [24] 4198 	mov	dptr,#_dumpPage_PARM_3
      001340 EC               [12] 4199 	mov	a,r4
      001341 F0               [24] 4200 	movx	@dptr,a
      001342 8E 82            [24] 4201 	mov	dpl,r6
      001344 8F 83            [24] 4202 	mov	dph,r7
      001346 C0 05            [24] 4203 	push	ar5
      001348 12r10rBE         [24] 4204 	lcall	_dumpPage
      00134B D0 05            [24] 4205 	pop	ar5
      00134D 80 1B            [24] 4206 	sjmp	00150$
      00134F                       4207 00112$:
                                   4208 ;	dump2.c:126: dumpPage(address, NUM, type);
      00134F 90r00r1C         [24] 4209 	mov	dptr,#_dump_type_65537_239
      001352 E0               [24] 4210 	movx	a,@dptr
      001353 FC               [12] 4211 	mov	r4,a
      001354 90r00r15         [24] 4212 	mov	dptr,#_dumpPage_PARM_2
      001357 74 0F            [12] 4213 	mov	a,#0x0f
      001359 F0               [24] 4214 	movx	@dptr,a
      00135A 90r00r16         [24] 4215 	mov	dptr,#_dumpPage_PARM_3
      00135D EC               [12] 4216 	mov	a,r4
      00135E F0               [24] 4217 	movx	@dptr,a
      00135F 8E 82            [24] 4218 	mov	dpl,r6
      001361 8F 83            [24] 4219 	mov	dph,r7
      001363 C0 05            [24] 4220 	push	ar5
      001365 12r10rBE         [24] 4221 	lcall	_dumpPage
      001368 D0 05            [24] 4222 	pop	ar5
                                   4223 ;	dump2.c:129: do {
      00136A                       4224 00150$:
      00136A C3               [12] 4225 	clr	c
      00136B 74 0F            [12] 4226 	mov	a,#0x0f
      00136D 9D               [12] 4227 	subb	a,r5
      00136E E4               [12] 4228 	clr	a
      00136F 33               [12] 4229 	rlc	a
      001370 FF               [12] 4230 	mov	r7,a
      001371 8F*51            [24] 4231 	mov	_dump_sloc0_1_0,r7
      001373 90r00r1C         [24] 4232 	mov	dptr,#_dump_type_65537_239
      001376 E0               [24] 4233 	movx	a,@dptr
      001377 FC               [12] 4234 	mov	r4,a
      001378 FB               [12] 4235 	mov	r3,a
      001379                       4236 00132$:
                                   4237 ;	dump2.c:131: if (page != ((size / NUM) + 1) && size > NUM) {
      001379 C0 03            [24] 4238 	push	ar3
      00137B 8D 01            [24] 4239 	mov	ar1,r5
      00137D 7A 00            [12] 4240 	mov	r2,#0x00
      00137F 75*00 0F         [24] 4241 	mov	__divsint_PARM_2,#0x0f
                                   4242 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001382 8A*01            [24] 4243 	mov	(__divsint_PARM_2 + 1),r2
      001384 89 82            [24] 4244 	mov	dpl,r1
      001386 8A 83            [24] 4245 	mov	dph,r2
      001388 C0 07            [24] 4246 	push	ar7
      00138A C0 05            [24] 4247 	push	ar5
      00138C C0 04            [24] 4248 	push	ar4
      00138E C0 03            [24] 4249 	push	ar3
      001390 12r00r00         [24] 4250 	lcall	__divsint
      001393 A9 82            [24] 4251 	mov	r1,dpl
      001395 AA 83            [24] 4252 	mov	r2,dph
      001397 D0 03            [24] 4253 	pop	ar3
      001399 D0 04            [24] 4254 	pop	ar4
      00139B D0 05            [24] 4255 	pop	ar5
      00139D D0 07            [24] 4256 	pop	ar7
      00139F 74 01            [12] 4257 	mov	a,#0x01
      0013A1 29               [12] 4258 	add	a,r1
      0013A2 F5*52            [12] 4259 	mov	_dump_sloc1_1_0,a
      0013A4 E4               [12] 4260 	clr	a
      0013A5 3A               [12] 4261 	addc	a,r2
      0013A6 F5*53            [12] 4262 	mov	(_dump_sloc1_1_0 + 1),a
      0013A8 90r00r1D         [24] 4263 	mov	dptr,#_dump_page_65537_239
      0013AB E0               [24] 4264 	movx	a,@dptr
      0013AC 7E 00            [12] 4265 	mov	r6,#0x00
      0013AE B5*52 08         [24] 4266 	cjne	a,_dump_sloc1_1_0,00210$
      0013B1 EE               [12] 4267 	mov	a,r6
      0013B2 B5*53 04         [24] 4268 	cjne	a,(_dump_sloc1_1_0 + 1),00210$
      0013B5 D0 03            [24] 4269 	pop	ar3
      0013B7 80 28            [24] 4270 	sjmp	00119$
      0013B9                       4271 00210$:
      0013B9 D0 03            [24] 4272 	pop	ar3
      0013BB EF               [12] 4273 	mov	a,r7
      0013BC 60 23            [24] 4274 	jz	00119$
                                   4275 ;	dump2.c:132: LCD_string_write("Press B for next\n");
      0013BE 90r05rC1         [24] 4276 	mov	dptr,#___str_15
      0013C1 75 F0 80         [24] 4277 	mov	b,#0x80
      0013C4 C0 07            [24] 4278 	push	ar7
      0013C6 C0 05            [24] 4279 	push	ar5
      0013C8 C0 04            [24] 4280 	push	ar4
      0013CA C0 03            [24] 4281 	push	ar3
      0013CC C0 02            [24] 4282 	push	ar2
      0013CE C0 01            [24] 4283 	push	ar1
      0013D0 12r0Cr00         [24] 4284 	lcall	_LCD_string_write
      0013D3 D0 01            [24] 4285 	pop	ar1
      0013D5 D0 02            [24] 4286 	pop	ar2
      0013D7 D0 03            [24] 4287 	pop	ar3
      0013D9 D0 04            [24] 4288 	pop	ar4
      0013DB D0 05            [24] 4289 	pop	ar5
      0013DD D0 07            [24] 4290 	pop	ar7
      0013DF 80 52            [24] 4291 	sjmp	00120$
      0013E1                       4292 00119$:
                                   4293 ;	dump2.c:133: } else if (page != 1 && size > NUM) {
      0013E1 90r00r1D         [24] 4294 	mov	dptr,#_dump_page_65537_239
      0013E4 E0               [24] 4295 	movx	a,@dptr
      0013E5 FE               [12] 4296 	mov	r6,a
      0013E6 BE 01 02         [24] 4297 	cjne	r6,#0x01,00212$
      0013E9 80 27            [24] 4298 	sjmp	00115$
      0013EB                       4299 00212$:
      0013EB E5*51            [12] 4300 	mov	a,_dump_sloc0_1_0
      0013ED 60 23            [24] 4301 	jz	00115$
                                   4302 ;	dump2.c:134: LCD_string_write("Press A for previous\n");
      0013EF 90r05rD3         [24] 4303 	mov	dptr,#___str_16
      0013F2 75 F0 80         [24] 4304 	mov	b,#0x80
      0013F5 C0 07            [24] 4305 	push	ar7
      0013F7 C0 05            [24] 4306 	push	ar5
      0013F9 C0 04            [24] 4307 	push	ar4
      0013FB C0 03            [24] 4308 	push	ar3
      0013FD C0 02            [24] 4309 	push	ar2
      0013FF C0 01            [24] 4310 	push	ar1
      001401 12r0Cr00         [24] 4311 	lcall	_LCD_string_write
      001404 D0 01            [24] 4312 	pop	ar1
      001406 D0 02            [24] 4313 	pop	ar2
      001408 D0 03            [24] 4314 	pop	ar3
      00140A D0 04            [24] 4315 	pop	ar4
      00140C D0 05            [24] 4316 	pop	ar5
      00140E D0 07            [24] 4317 	pop	ar7
      001410 80 21            [24] 4318 	sjmp	00120$
      001412                       4319 00115$:
                                   4320 ;	dump2.c:136: LCD_string_write("Press A for previous, B for next\n");
      001412 90r05rE9         [24] 4321 	mov	dptr,#___str_17
      001415 75 F0 80         [24] 4322 	mov	b,#0x80
      001418 C0 07            [24] 4323 	push	ar7
      00141A C0 05            [24] 4324 	push	ar5
      00141C C0 04            [24] 4325 	push	ar4
      00141E C0 03            [24] 4326 	push	ar3
      001420 C0 02            [24] 4327 	push	ar2
      001422 C0 01            [24] 4328 	push	ar1
      001424 12r0Cr00         [24] 4329 	lcall	_LCD_string_write
      001427 D0 01            [24] 4330 	pop	ar1
      001429 D0 02            [24] 4331 	pop	ar2
      00142B D0 03            [24] 4332 	pop	ar3
      00142D D0 04            [24] 4333 	pop	ar4
      00142F D0 05            [24] 4334 	pop	ar5
      001431 D0 07            [24] 4335 	pop	ar7
      001433                       4336 00120$:
                                   4337 ;	dump2.c:139: LCD_string_write("Press 1 for menu\n");
      001433 90r06r0B         [24] 4338 	mov	dptr,#___str_18
      001436 75 F0 80         [24] 4339 	mov	b,#0x80
      001439 C0 07            [24] 4340 	push	ar7
      00143B C0 05            [24] 4341 	push	ar5
      00143D C0 04            [24] 4342 	push	ar4
      00143F C0 03            [24] 4343 	push	ar3
      001441 C0 02            [24] 4344 	push	ar2
      001443 C0 01            [24] 4345 	push	ar1
      001445 12r0Cr00         [24] 4346 	lcall	_LCD_string_write
                                   4347 ;	dump2.c:141: input = keyDetect();
      001448 12r0Cr99         [24] 4348 	lcall	_keyDetect
      00144B AE 82            [24] 4349 	mov	r6,dpl
      00144D D0 01            [24] 4350 	pop	ar1
      00144F D0 02            [24] 4351 	pop	ar2
      001451 D0 03            [24] 4352 	pop	ar3
      001453 D0 04            [24] 4353 	pop	ar4
      001455 D0 05            [24] 4354 	pop	ar5
      001457 D0 07            [24] 4355 	pop	ar7
                                   4356 ;	dump2.c:146: if (input == 'B' && page != ((size / NUM) + 1)) {	// next
      001459 BE 42 6E         [24] 4357 	cjne	r6,#0x42,00129$
      00145C C0 03            [24] 4358 	push	ar3
      00145E 74 01            [12] 4359 	mov	a,#0x01
      001460 29               [12] 4360 	add	a,r1
      001461 F5*52            [12] 4361 	mov	_dump_sloc1_1_0,a
      001463 E4               [12] 4362 	clr	a
      001464 3A               [12] 4363 	addc	a,r2
      001465 F5*53            [12] 4364 	mov	(_dump_sloc1_1_0 + 1),a
      001467 90r00r1D         [24] 4365 	mov	dptr,#_dump_page_65537_239
      00146A E0               [24] 4366 	movx	a,@dptr
      00146B F8               [12] 4367 	mov	r0,a
      00146C FA               [12] 4368 	mov	r2,a
      00146D 7B 00            [12] 4369 	mov	r3,#0x00
      00146F B5*52 08         [24] 4370 	cjne	a,_dump_sloc1_1_0,00216$
      001472 EB               [12] 4371 	mov	a,r3
      001473 B5*53 04         [24] 4372 	cjne	a,(_dump_sloc1_1_0 + 1),00216$
      001476 D0 03            [24] 4373 	pop	ar3
      001478 80 50            [24] 4374 	sjmp	00129$
      00147A                       4375 00216$:
      00147A D0 03            [24] 4376 	pop	ar3
                                   4377 ;	dump2.c:147: address += NUM;
      00147C 90r00r1E         [24] 4378 	mov	dptr,#_dump_address_65537_239
      00147F E0               [24] 4379 	movx	a,@dptr
      001480 F9               [12] 4380 	mov	r1,a
      001481 A3               [24] 4381 	inc	dptr
      001482 E0               [24] 4382 	movx	a,@dptr
      001483 FA               [12] 4383 	mov	r2,a
      001484 74 0F            [12] 4384 	mov	a,#0x0f
      001486 29               [12] 4385 	add	a,r1
      001487 F9               [12] 4386 	mov	r1,a
      001488 E4               [12] 4387 	clr	a
      001489 3A               [12] 4388 	addc	a,r2
      00148A FA               [12] 4389 	mov	r2,a
      00148B 90r00r1E         [24] 4390 	mov	dptr,#_dump_address_65537_239
      00148E E9               [12] 4391 	mov	a,r1
      00148F F0               [24] 4392 	movx	@dptr,a
      001490 EA               [12] 4393 	mov	a,r2
      001491 A3               [24] 4394 	inc	dptr
      001492 F0               [24] 4395 	movx	@dptr,a
                                   4396 ;	dump2.c:148: dumpPage(address, NUM, type);
      001493 90r00r1E         [24] 4397 	mov	dptr,#_dump_address_65537_239
      001496 E0               [24] 4398 	movx	a,@dptr
      001497 F9               [12] 4399 	mov	r1,a
      001498 A3               [24] 4400 	inc	dptr
      001499 E0               [24] 4401 	movx	a,@dptr
      00149A FA               [12] 4402 	mov	r2,a
      00149B 90r00r15         [24] 4403 	mov	dptr,#_dumpPage_PARM_2
      00149E 74 0F            [12] 4404 	mov	a,#0x0f
      0014A0 F0               [24] 4405 	movx	@dptr,a
      0014A1 90r00r16         [24] 4406 	mov	dptr,#_dumpPage_PARM_3
      0014A4 EC               [12] 4407 	mov	a,r4
      0014A5 F0               [24] 4408 	movx	@dptr,a
      0014A6 89 82            [24] 4409 	mov	dpl,r1
      0014A8 8A 83            [24] 4410 	mov	dph,r2
      0014AA C0 07            [24] 4411 	push	ar7
      0014AC C0 05            [24] 4412 	push	ar5
      0014AE C0 04            [24] 4413 	push	ar4
      0014B0 C0 03            [24] 4414 	push	ar3
      0014B2 C0 00            [24] 4415 	push	ar0
      0014B4 12r10rBE         [24] 4416 	lcall	_dumpPage
      0014B7 D0 00            [24] 4417 	pop	ar0
      0014B9 D0 03            [24] 4418 	pop	ar3
      0014BB D0 04            [24] 4419 	pop	ar4
      0014BD D0 05            [24] 4420 	pop	ar5
      0014BF D0 07            [24] 4421 	pop	ar7
                                   4422 ;	dump2.c:149: page++;
      0014C1 90r00r1D         [24] 4423 	mov	dptr,#_dump_page_65537_239
      0014C4 E8               [12] 4424 	mov	a,r0
      0014C5 04               [12] 4425 	inc	a
      0014C6 F0               [24] 4426 	movx	@dptr,a
      0014C7 02r13r79         [24] 4427 	ljmp	00132$
      0014CA                       4428 00129$:
                                   4429 ;	dump2.c:150: } else if (input == 'A' && page != 1) {				// previous
      0014CA BE 41 59         [24] 4430 	cjne	r6,#0x41,00125$
      0014CD 90r00r1D         [24] 4431 	mov	dptr,#_dump_page_65537_239
      0014D0 E0               [24] 4432 	movx	a,@dptr
      0014D1 FA               [12] 4433 	mov	r2,a
      0014D2 BA 01 02         [24] 4434 	cjne	r2,#0x01,00219$
      0014D5 80 4F            [24] 4435 	sjmp	00125$
      0014D7                       4436 00219$:
                                   4437 ;	dump2.c:151: address -= NUM;
      0014D7 90r00r1E         [24] 4438 	mov	dptr,#_dump_address_65537_239
      0014DA E0               [24] 4439 	movx	a,@dptr
      0014DB F8               [12] 4440 	mov	r0,a
      0014DC A3               [24] 4441 	inc	dptr
      0014DD E0               [24] 4442 	movx	a,@dptr
      0014DE F9               [12] 4443 	mov	r1,a
      0014DF E8               [12] 4444 	mov	a,r0
      0014E0 24 F1            [12] 4445 	add	a,#0xf1
      0014E2 F8               [12] 4446 	mov	r0,a
      0014E3 E9               [12] 4447 	mov	a,r1
      0014E4 34 FF            [12] 4448 	addc	a,#0xff
      0014E6 F9               [12] 4449 	mov	r1,a
      0014E7 90r00r1E         [24] 4450 	mov	dptr,#_dump_address_65537_239
      0014EA E8               [12] 4451 	mov	a,r0
      0014EB F0               [24] 4452 	movx	@dptr,a
      0014EC E9               [12] 4453 	mov	a,r1
      0014ED A3               [24] 4454 	inc	dptr
      0014EE F0               [24] 4455 	movx	@dptr,a
                                   4456 ;	dump2.c:152: dumpPage(address, NUM, type);
      0014EF 90r00r1E         [24] 4457 	mov	dptr,#_dump_address_65537_239
      0014F2 E0               [24] 4458 	movx	a,@dptr
      0014F3 F8               [12] 4459 	mov	r0,a
      0014F4 A3               [24] 4460 	inc	dptr
      0014F5 E0               [24] 4461 	movx	a,@dptr
      0014F6 F9               [12] 4462 	mov	r1,a
      0014F7 90r00r15         [24] 4463 	mov	dptr,#_dumpPage_PARM_2
      0014FA 74 0F            [12] 4464 	mov	a,#0x0f
      0014FC F0               [24] 4465 	movx	@dptr,a
      0014FD 90r00r16         [24] 4466 	mov	dptr,#_dumpPage_PARM_3
      001500 EB               [12] 4467 	mov	a,r3
      001501 F0               [24] 4468 	movx	@dptr,a
      001502 88 82            [24] 4469 	mov	dpl,r0
      001504 89 83            [24] 4470 	mov	dph,r1
      001506 C0 07            [24] 4471 	push	ar7
      001508 C0 05            [24] 4472 	push	ar5
      00150A C0 04            [24] 4473 	push	ar4
      00150C C0 03            [24] 4474 	push	ar3
      00150E C0 02            [24] 4475 	push	ar2
      001510 12r10rBE         [24] 4476 	lcall	_dumpPage
      001513 D0 02            [24] 4477 	pop	ar2
      001515 D0 03            [24] 4478 	pop	ar3
      001517 D0 04            [24] 4479 	pop	ar4
      001519 D0 05            [24] 4480 	pop	ar5
      00151B D0 07            [24] 4481 	pop	ar7
                                   4482 ;	dump2.c:153: page--;
      00151D EA               [12] 4483 	mov	a,r2
      00151E 14               [12] 4484 	dec	a
      00151F 90r00r1D         [24] 4485 	mov	dptr,#_dump_page_65537_239
      001522 F0               [24] 4486 	movx	@dptr,a
      001523 02r13r79         [24] 4487 	ljmp	00132$
      001526                       4488 00125$:
                                   4489 ;	dump2.c:154: } else if (input == '1') {							// main menu
      001526 BE 31 01         [24] 4490 	cjne	r6,#0x31,00220$
      001529 22               [24] 4491 	ret
      00152A                       4492 00220$:
      00152A 02r13r79         [24] 4493 	ljmp	00132$
                                   4494 ;	dump2.c:158: } while (1);
                                   4495 ;	dump2.c:160: }
      00152D 22               [24] 4496 	ret
                                   4497 ;------------------------------------------------------------
                                   4498 ;Allocation info for local variables in function 'check'
                                   4499 ;------------------------------------------------------------
                                   4500 ;ramAddress                Allocated to registers r4 r5 
                                   4501 ;checker                   Allocated with name '_check_checker_65537_255'
                                   4502 ;input                     Allocated with name '_check_input_65537_255'
                                   4503 ;fetched                   Allocated with name '_check_fetched_65537_255'
                                   4504 ;i                         Allocated with name '_check_i_65537_255'
                                   4505 ;error                     Allocated with name '_check_error_65537_255'
                                   4506 ;------------------------------------------------------------
                                   4507 ;	check.c:6: void check() {
                                   4508 ;	-----------------------------------------
                                   4509 ;	 function check
                                   4510 ;	-----------------------------------------
      00152E                       4511 _check:
                                   4512 ;	check.c:8: fillScreen(GRAY);
      00152E 90 D6 BA         [24] 4513 	mov	dptr,#0xd6ba
      001531 12r07rF9         [24] 4514 	lcall	_fillScreen
                                   4515 ;	check.c:9: setCursor(0, 0);
      001534 E4               [12] 4516 	clr	a
      001535 F5*00            [12] 4517 	mov	_setCursor_PARM_2,a
      001537 F5*01            [12] 4518 	mov	(_setCursor_PARM_2 + 1),a
      001539 90 00 00         [24] 4519 	mov	dptr,#0x0000
      00153C 12r00rA5         [24] 4520 	lcall	_setCursor
                                   4521 ;	check.c:10: setTextSize(2);
      00153F 75 82 02         [24] 4522 	mov	dpl,#0x02
      001542 12r00rBF         [24] 4523 	lcall	_setTextSize
                                   4524 ;	check.c:17: __xdata bool error = false;
      001545 90r00r21         [24] 4525 	mov	dptr,#_check_error_65537_255
      001548 E4               [12] 4526 	clr	a
      001549 F0               [24] 4527 	movx	@dptr,a
                                   4528 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      00154A 90r06r1D         [24] 4529 	mov	dptr,#___str_19
      00154D 75 F0 80         [24] 4530 	mov	b,#0x80
      001550 12r0Cr00         [24] 4531 	lcall	_LCD_string_write
                                   4532 ;	check.c:22: checker = getByte();
      001553 12r10r7F         [24] 4533 	lcall	_getByte
      001556 E5 82            [12] 4534 	mov	a,dpl
      001558 90r00r20         [24] 4535 	mov	dptr,#_check_checker_65537_255
      00155B F0               [24] 4536 	movx	@dptr,a
                                   4537 ;	check.c:23: write('\n');
      00155C 75 82 0A         [24] 4538 	mov	dpl,#0x0a
      00155F 12r0Br92         [24] 4539 	lcall	_write
                                   4540 ;	check.c:24: LCD_string_write("In progress...\n");
      001562 90r06r32         [24] 4541 	mov	dptr,#___str_20
      001565 75 F0 80         [24] 4542 	mov	b,#0x80
      001568 12r0Cr00         [24] 4543 	lcall	_LCD_string_write
                                   4544 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      00156B 7E 00            [12] 4545 	mov	r6,#0x00
      00156D 7F 00            [12] 4546 	mov	r7,#0x00
      00156F                       4547 00112$:
                                   4548 ;	check.c:30: IOM = 0;
                                   4549 ;	assignBit
      00156F C2 B4            [12] 4550 	clr	_P3_4
                                   4551 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      001571 8E 04            [24] 4552 	mov	ar4,r6
      001573 8F 05            [24] 4553 	mov	ar5,r7
                                   4554 ;	check.c:32: *ramAddress = checker;
      001575 90r00r20         [24] 4555 	mov	dptr,#_check_checker_65537_255
      001578 E0               [24] 4556 	movx	a,@dptr
      001579 FB               [12] 4557 	mov	r3,a
      00157A F9               [12] 4558 	mov	r1,a
      00157B 7A 00            [12] 4559 	mov	r2,#0x00
      00157D 8C 82            [24] 4560 	mov	dpl,r4
      00157F 8D 83            [24] 4561 	mov	dph,r5
      001581 E9               [12] 4562 	mov	a,r1
      001582 F0               [24] 4563 	movx	@dptr,a
      001583 EA               [12] 4564 	mov	a,r2
      001584 A3               [24] 4565 	inc	dptr
      001585 F0               [24] 4566 	movx	@dptr,a
                                   4567 ;	check.c:33: fetched = *ramAddress;
                                   4568 ;	check.c:34: IOM = 1;
                                   4569 ;	assignBit
      001586 D2 B4            [12] 4570 	setb	_P3_4
                                   4571 ;	check.c:35: if (fetched != checker) {
      001588 E9               [12] 4572 	mov	a,r1
      001589 B5 03 02         [24] 4573 	cjne	a,ar3,00136$
      00158C 80 43            [24] 4574 	sjmp	00104$
      00158E                       4575 00136$:
                                   4576 ;	check.c:36: asciiToHex(checker);
      00158E 8B 82            [24] 4577 	mov	dpl,r3
      001590 C0 05            [24] 4578 	push	ar5
      001592 C0 04            [24] 4579 	push	ar4
      001594 C0 01            [24] 4580 	push	ar1
      001596 12r0Er77         [24] 4581 	lcall	_asciiToHex
                                   4582 ;	check.c:37: write(' ');
      001599 75 82 20         [24] 4583 	mov	dpl,#0x20
      00159C 12r0Br92         [24] 4584 	lcall	_write
      00159F D0 01            [24] 4585 	pop	ar1
                                   4586 ;	check.c:38: asciiToHex(fetched);
      0015A1 89 82            [24] 4587 	mov	dpl,r1
      0015A3 12r0Er77         [24] 4588 	lcall	_asciiToHex
                                   4589 ;	check.c:39: write(' ');
      0015A6 75 82 20         [24] 4590 	mov	dpl,#0x20
      0015A9 12r0Br92         [24] 4591 	lcall	_write
      0015AC D0 04            [24] 4592 	pop	ar4
      0015AE D0 05            [24] 4593 	pop	ar5
                                   4594 ;	check.c:40: asciiToHex(*ramAddress);
      0015B0 8C 82            [24] 4595 	mov	dpl,r4
      0015B2 8D 83            [24] 4596 	mov	dph,r5
      0015B4 E0               [24] 4597 	movx	a,@dptr
      0015B5 F5 82            [12] 4598 	mov	dpl,a
      0015B7 12r0Er77         [24] 4599 	lcall	_asciiToHex
                                   4600 ;	check.c:41: write('\n');
      0015BA 75 82 0A         [24] 4601 	mov	dpl,#0x0a
      0015BD 12r0Br92         [24] 4602 	lcall	_write
                                   4603 ;	check.c:42: LCD_string_write("Memory check failed\n");
      0015C0 90r06r42         [24] 4604 	mov	dptr,#___str_21
      0015C3 75 F0 80         [24] 4605 	mov	b,#0x80
      0015C6 12r0Cr00         [24] 4606 	lcall	_LCD_string_write
                                   4607 ;	check.c:43: error = true;
      0015C9 90r00r21         [24] 4608 	mov	dptr,#_check_error_65537_255
      0015CC 74 01            [12] 4609 	mov	a,#0x01
      0015CE F0               [24] 4610 	movx	@dptr,a
                                   4611 ;	check.c:44: break;
      0015CF 80 78            [24] 4612 	sjmp	00106$
      0015D1                       4613 00104$:
                                   4614 ;	check.c:46: IOM = 0;
                                   4615 ;	assignBit
      0015D1 C2 B4            [12] 4616 	clr	_P3_4
                                   4617 ;	check.c:47: checker = ~checker;
      0015D3 90r00r20         [24] 4618 	mov	dptr,#_check_checker_65537_255
      0015D6 EB               [12] 4619 	mov	a,r3
      0015D7 F4               [12] 4620 	cpl	a
      0015D8 F0               [24] 4621 	movx	@dptr,a
                                   4622 ;	check.c:48: *ramAddress = checker;
      0015D9 E0               [24] 4623 	movx	a,@dptr
      0015DA FB               [12] 4624 	mov	r3,a
      0015DB F9               [12] 4625 	mov	r1,a
      0015DC 7A 00            [12] 4626 	mov	r2,#0x00
      0015DE 8C 82            [24] 4627 	mov	dpl,r4
      0015E0 8D 83            [24] 4628 	mov	dph,r5
      0015E2 E9               [12] 4629 	mov	a,r1
      0015E3 F0               [24] 4630 	movx	@dptr,a
      0015E4 EA               [12] 4631 	mov	a,r2
      0015E5 A3               [24] 4632 	inc	dptr
      0015E6 F0               [24] 4633 	movx	@dptr,a
                                   4634 ;	check.c:49: fetched = *ramAddress;
                                   4635 ;	check.c:50: IOM = 1;
                                   4636 ;	assignBit
      0015E7 D2 B4            [12] 4637 	setb	_P3_4
                                   4638 ;	check.c:51: if (fetched != checker) {
      0015E9 E9               [12] 4639 	mov	a,r1
      0015EA B5 03 02         [24] 4640 	cjne	a,ar3,00137$
      0015ED 80 45            [24] 4641 	sjmp	00113$
      0015EF                       4642 00137$:
                                   4643 ;	check.c:52: asciiToHex(~checker);
      0015EF EB               [12] 4644 	mov	a,r3
      0015F0 F4               [12] 4645 	cpl	a
      0015F1 F5 82            [12] 4646 	mov	dpl,a
      0015F3 C0 05            [24] 4647 	push	ar5
      0015F5 C0 04            [24] 4648 	push	ar4
      0015F7 C0 01            [24] 4649 	push	ar1
      0015F9 12r0Er77         [24] 4650 	lcall	_asciiToHex
                                   4651 ;	check.c:53: write(' ');
      0015FC 75 82 20         [24] 4652 	mov	dpl,#0x20
      0015FF 12r0Br92         [24] 4653 	lcall	_write
      001602 D0 01            [24] 4654 	pop	ar1
                                   4655 ;	check.c:54: asciiToHex(fetched);
      001604 89 82            [24] 4656 	mov	dpl,r1
      001606 12r0Er77         [24] 4657 	lcall	_asciiToHex
                                   4658 ;	check.c:55: write(' ');
      001609 75 82 20         [24] 4659 	mov	dpl,#0x20
      00160C 12r0Br92         [24] 4660 	lcall	_write
      00160F D0 04            [24] 4661 	pop	ar4
      001611 D0 05            [24] 4662 	pop	ar5
                                   4663 ;	check.c:56: asciiToHex(*ramAddress);
      001613 8C 82            [24] 4664 	mov	dpl,r4
      001615 8D 83            [24] 4665 	mov	dph,r5
      001617 E0               [24] 4666 	movx	a,@dptr
      001618 F5 82            [12] 4667 	mov	dpl,a
      00161A 12r0Er77         [24] 4668 	lcall	_asciiToHex
                                   4669 ;	check.c:57: write('\n');
      00161D 75 82 0A         [24] 4670 	mov	dpl,#0x0a
      001620 12r0Br92         [24] 4671 	lcall	_write
                                   4672 ;	check.c:58: LCD_string_write("Memory check failed\n");
      001623 90r06r42         [24] 4673 	mov	dptr,#___str_21
      001626 75 F0 80         [24] 4674 	mov	b,#0x80
      001629 12r0Cr00         [24] 4675 	lcall	_LCD_string_write
                                   4676 ;	check.c:59: error = true;
      00162C 90r00r21         [24] 4677 	mov	dptr,#_check_error_65537_255
      00162F 74 01            [12] 4678 	mov	a,#0x01
      001631 F0               [24] 4679 	movx	@dptr,a
                                   4680 ;	check.c:60: break;
      001632 80 15            [24] 4681 	sjmp	00106$
      001634                       4682 00113$:
                                   4683 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001634 0E               [12] 4684 	inc	r6
      001635 BE 00 01         [24] 4685 	cjne	r6,#0x00,00138$
      001638 0F               [12] 4686 	inc	r7
      001639                       4687 00138$:
      001639 8E 04            [24] 4688 	mov	ar4,r6
      00163B 8F 05            [24] 4689 	mov	ar5,r7
      00163D C3               [12] 4690 	clr	c
      00163E EC               [12] 4691 	mov	a,r4
      00163F 94 FF            [12] 4692 	subb	a,#0xff
      001641 ED               [12] 4693 	mov	a,r5
      001642 94 FF            [12] 4694 	subb	a,#0xff
      001644 50 03            [24] 4695 	jnc	00139$
      001646 02r15r6F         [24] 4696 	ljmp	00112$
      001649                       4697 00139$:
      001649                       4698 00106$:
                                   4699 ;	check.c:68: if (error != false) {
      001649 90r00r21         [24] 4700 	mov	dptr,#_check_error_65537_255
      00164C E0               [24] 4701 	movx	a,@dptr
      00164D 60 09            [24] 4702 	jz	00108$
                                   4703 ;	check.c:69: LCD_string_write("Success!\n");
      00164F 90r06r57         [24] 4704 	mov	dptr,#___str_22
      001652 75 F0 80         [24] 4705 	mov	b,#0x80
      001655 12r0Cr00         [24] 4706 	lcall	_LCD_string_write
      001658                       4707 00108$:
                                   4708 ;	check.c:73: LCD_string_write("Press 1 for menu");
      001658 90r06r61         [24] 4709 	mov	dptr,#___str_23
      00165B 75 F0 80         [24] 4710 	mov	b,#0x80
      00165E 12r0Cr00         [24] 4711 	lcall	_LCD_string_write
                                   4712 ;	check.c:75: do {
      001661                       4713 00109$:
                                   4714 ;	check.c:76: input = keyDetect();
      001661 12r0Cr99         [24] 4715 	lcall	_keyDetect
      001664 AF 82            [24] 4716 	mov	r7,dpl
                                   4717 ;	check.c:77: } while (input != '1');
      001666 BF 31 F8         [24] 4718 	cjne	r7,#0x31,00109$
                                   4719 ;	check.c:78: }
      001669 22               [24] 4720 	ret
                                   4721 ;------------------------------------------------------------
                                   4722 ;Allocation info for local variables in function 'basic'
                                   4723 ;------------------------------------------------------------
                                   4724 ;val                       Allocated to registers r7 
                                   4725 ;fetched                   Allocated to registers r7 
                                   4726 ;add                       Allocated to registers r5 r6 
                                   4727 ;ramAddress                Allocated to registers 
                                   4728 ;------------------------------------------------------------
                                   4729 ;	check.c:84: void basic() {
                                   4730 ;	-----------------------------------------
                                   4731 ;	 function basic
                                   4732 ;	-----------------------------------------
      00166A                       4733 _basic:
                                   4734 ;	check.c:86: fillScreen(GRAY);
      00166A 90 D6 BA         [24] 4735 	mov	dptr,#0xd6ba
      00166D 12r07rF9         [24] 4736 	lcall	_fillScreen
                                   4737 ;	check.c:87: setCursor(0, 0);
      001670 E4               [12] 4738 	clr	a
      001671 F5*00            [12] 4739 	mov	_setCursor_PARM_2,a
      001673 F5*01            [12] 4740 	mov	(_setCursor_PARM_2 + 1),a
      001675 90 00 00         [24] 4741 	mov	dptr,#0x0000
      001678 12r00rA5         [24] 4742 	lcall	_setCursor
                                   4743 ;	check.c:88: setTextSize(2);
      00167B 75 82 02         [24] 4744 	mov	dpl,#0x02
      00167E 12r00rBF         [24] 4745 	lcall	_setTextSize
                                   4746 ;	check.c:97: LCD_string_write("Enter byte\n");
      001681 90r06r72         [24] 4747 	mov	dptr,#___str_24
      001684 75 F0 80         [24] 4748 	mov	b,#0x80
      001687 12r0Cr00         [24] 4749 	lcall	_LCD_string_write
                                   4750 ;	check.c:98: val = getByte();
      00168A 12r10r7F         [24] 4751 	lcall	_getByte
      00168D AF 82            [24] 4752 	mov	r7,dpl
                                   4753 ;	check.c:99: write('\n');
      00168F 75 82 0A         [24] 4754 	mov	dpl,#0x0a
      001692 C0 07            [24] 4755 	push	ar7
      001694 12r0Br92         [24] 4756 	lcall	_write
                                   4757 ;	check.c:102: LCD_string_write("Enter address\n");
      001697 90r06r7E         [24] 4758 	mov	dptr,#___str_25
      00169A 75 F0 80         [24] 4759 	mov	b,#0x80
      00169D 12r0Cr00         [24] 4760 	lcall	_LCD_string_write
                                   4761 ;	check.c:103: add = getAddress();
      0016A0 12r10r18         [24] 4762 	lcall	_getAddress
      0016A3 AD 82            [24] 4763 	mov	r5,dpl
      0016A5 AE 83            [24] 4764 	mov	r6,dph
                                   4765 ;	check.c:104: write('\n');
      0016A7 75 82 0A         [24] 4766 	mov	dpl,#0x0a
      0016AA C0 06            [24] 4767 	push	ar6
      0016AC C0 05            [24] 4768 	push	ar5
      0016AE 12r0Br92         [24] 4769 	lcall	_write
                                   4770 ;	check.c:105: LCD_string_write("In progress\n");
      0016B1 90r06r8D         [24] 4771 	mov	dptr,#___str_26
      0016B4 75 F0 80         [24] 4772 	mov	b,#0x80
      0016B7 12r0Cr00         [24] 4773 	lcall	_LCD_string_write
      0016BA D0 05            [24] 4774 	pop	ar5
      0016BC D0 06            [24] 4775 	pop	ar6
      0016BE D0 07            [24] 4776 	pop	ar7
                                   4777 ;	check.c:107: IOM = 0;
                                   4778 ;	assignBit
      0016C0 C2 B4            [12] 4779 	clr	_P3_4
                                   4780 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      0016C2 8D 82            [24] 4781 	mov	dpl,r5
      0016C4 8E 83            [24] 4782 	mov	dph,r6
                                   4783 ;	check.c:111: *ramAddress = val;
      0016C6 8F 05            [24] 4784 	mov	ar5,r7
      0016C8 7E 00            [12] 4785 	mov	r6,#0x00
      0016CA ED               [12] 4786 	mov	a,r5
      0016CB F0               [24] 4787 	movx	@dptr,a
      0016CC EE               [12] 4788 	mov	a,r6
      0016CD A3               [24] 4789 	inc	dptr
      0016CE F0               [24] 4790 	movx	@dptr,a
                                   4791 ;	check.c:114: fetched = *ramAddress;
                                   4792 ;	check.c:116: IOM = 1;
                                   4793 ;	assignBit
      0016CF D2 B4            [12] 4794 	setb	_P3_4
                                   4795 ;	check.c:119: if (fetched == val) {
      0016D1 ED               [12] 4796 	mov	a,r5
      0016D2 B5 07 10         [24] 4797 	cjne	a,ar7,00102$
                                   4798 ;	check.c:120: asciiToHex(fetched);
      0016D5 8D 82            [24] 4799 	mov	dpl,r5
      0016D7 12r0Er77         [24] 4800 	lcall	_asciiToHex
                                   4801 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      0016DA 90r06r9A         [24] 4802 	mov	dptr,#___str_27
      0016DD 75 F0 80         [24] 4803 	mov	b,#0x80
      0016E0 12r0Cr00         [24] 4804 	lcall	_LCD_string_write
      0016E3 80 09            [24] 4805 	sjmp	00103$
      0016E5                       4806 00102$:
                                   4807 ;	check.c:123: LCD_string_write("Check failed\n");
      0016E5 90r06rAE         [24] 4808 	mov	dptr,#___str_28
      0016E8 75 F0 80         [24] 4809 	mov	b,#0x80
      0016EB 12r0Cr00         [24] 4810 	lcall	_LCD_string_write
      0016EE                       4811 00103$:
                                   4812 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      0016EE 90r06r0B         [24] 4813 	mov	dptr,#___str_18
      0016F1 75 F0 80         [24] 4814 	mov	b,#0x80
      0016F4 12r0Cr00         [24] 4815 	lcall	_LCD_string_write
                                   4816 ;	check.c:128: do {
      0016F7                       4817 00104$:
                                   4818 ;	check.c:129: fetched = keyDetect();
      0016F7 12r0Cr99         [24] 4819 	lcall	_keyDetect
      0016FA AF 82            [24] 4820 	mov	r7,dpl
                                   4821 ;	check.c:130: } while (fetched != '1');
      0016FC BF 31 F8         [24] 4822 	cjne	r7,#0x31,00104$
                                   4823 ;	check.c:131: }
      0016FF 22               [24] 4824 	ret
                                   4825 ;------------------------------------------------------------
                                   4826 ;Allocation info for local variables in function 'move'
                                   4827 ;------------------------------------------------------------
                                   4828 ;origin                    Allocated to registers 
                                   4829 ;target                    Allocated with name '_move_target_65537_269'
                                   4830 ;startAdd                  Allocated with name '_move_startAdd_65537_269'
                                   4831 ;targetAdd                 Allocated with name '_move_targetAdd_65537_269'
                                   4832 ;i                         Allocated with name '_move_i_65537_269'
                                   4833 ;size                      Allocated with name '_move_size_65537_269'
                                   4834 ;------------------------------------------------------------
                                   4835 ;	move.c:5: void move() {
                                   4836 ;	-----------------------------------------
                                   4837 ;	 function move
                                   4838 ;	-----------------------------------------
      001700                       4839 _move:
                                   4840 ;	move.c:7: fillScreen(GRAY);
      001700 90 D6 BA         [24] 4841 	mov	dptr,#0xd6ba
      001703 12r07rF9         [24] 4842 	lcall	_fillScreen
                                   4843 ;	move.c:8: setCursor(0, 0);
      001706 E4               [12] 4844 	clr	a
      001707 F5*00            [12] 4845 	mov	_setCursor_PARM_2,a
      001709 F5*01            [12] 4846 	mov	(_setCursor_PARM_2 + 1),a
      00170B 90 00 00         [24] 4847 	mov	dptr,#0x0000
      00170E 12r00rA5         [24] 4848 	lcall	_setCursor
                                   4849 ;	move.c:19: setTextSize(2);
      001711 75 82 02         [24] 4850 	mov	dpl,#0x02
      001714 12r00rBF         [24] 4851 	lcall	_setTextSize
                                   4852 ;	move.c:20: LCD_string_write("Enter start add.\n");
      001717 90r06rBC         [24] 4853 	mov	dptr,#___str_29
      00171A 75 F0 80         [24] 4854 	mov	b,#0x80
      00171D 12r0Cr00         [24] 4855 	lcall	_LCD_string_write
                                   4856 ;	move.c:21: startAdd = getAddress();
      001720 12r10r18         [24] 4857 	lcall	_getAddress
      001723 AE 82            [24] 4858 	mov	r6,dpl
      001725 AF 83            [24] 4859 	mov	r7,dph
                                   4860 ;	move.c:22: write('\n');
      001727 75 82 0A         [24] 4861 	mov	dpl,#0x0a
      00172A C0 07            [24] 4862 	push	ar7
      00172C C0 06            [24] 4863 	push	ar6
      00172E 12r0Br92         [24] 4864 	lcall	_write
                                   4865 ;	move.c:25: LCD_string_write("Enter size\n");
      001731 90r06rCE         [24] 4866 	mov	dptr,#___str_30
      001734 75 F0 80         [24] 4867 	mov	b,#0x80
      001737 12r0Cr00         [24] 4868 	lcall	_LCD_string_write
                                   4869 ;	move.c:26: size = getByte();
      00173A 12r10r7F         [24] 4870 	lcall	_getByte
      00173D AD 82            [24] 4871 	mov	r5,dpl
                                   4872 ;	move.c:27: write('\n');
      00173F 75 82 0A         [24] 4873 	mov	dpl,#0x0a
      001742 C0 05            [24] 4874 	push	ar5
      001744 12r0Br92         [24] 4875 	lcall	_write
                                   4876 ;	move.c:30: LCD_string_write("Enter target add.\n");
      001747 90r06rDA         [24] 4877 	mov	dptr,#___str_31
      00174A 75 F0 80         [24] 4878 	mov	b,#0x80
      00174D 12r0Cr00         [24] 4879 	lcall	_LCD_string_write
                                   4880 ;	move.c:31: targetAdd = getAddress();
      001750 12r10r18         [24] 4881 	lcall	_getAddress
      001753 AB 82            [24] 4882 	mov	r3,dpl
      001755 AC 83            [24] 4883 	mov	r4,dph
                                   4884 ;	move.c:32: write('\n');
      001757 75 82 0A         [24] 4885 	mov	dpl,#0x0a
      00175A C0 04            [24] 4886 	push	ar4
      00175C C0 03            [24] 4887 	push	ar3
      00175E 12r0Br92         [24] 4888 	lcall	_write
                                   4889 ;	move.c:35: LCD_string_write("Move in progress...\n");
      001761 90r06rED         [24] 4890 	mov	dptr,#___str_32
      001764 75 F0 80         [24] 4891 	mov	b,#0x80
      001767 12r0Cr00         [24] 4892 	lcall	_LCD_string_write
      00176A D0 03            [24] 4893 	pop	ar3
      00176C D0 04            [24] 4894 	pop	ar4
      00176E D0 05            [24] 4895 	pop	ar5
      001770 D0 06            [24] 4896 	pop	ar6
      001772 D0 07            [24] 4897 	pop	ar7
                                   4898 ;	move.c:38: for (i = 0; i < size; i++) {
      001774 79 00            [12] 4899 	mov	r1,#0x00
      001776 7A 00            [12] 4900 	mov	r2,#0x00
      001778                       4901 00106$:
      001778 C0 03            [24] 4902 	push	ar3
      00177A C0 04            [24] 4903 	push	ar4
      00177C 8D 00            [24] 4904 	mov	ar0,r5
      00177E 7C 00            [12] 4905 	mov	r4,#0x00
      001780 C3               [12] 4906 	clr	c
      001781 E9               [12] 4907 	mov	a,r1
      001782 98               [12] 4908 	subb	a,r0
      001783 EA               [12] 4909 	mov	a,r2
      001784 9C               [12] 4910 	subb	a,r4
      001785 D0 04            [24] 4911 	pop	ar4
      001787 D0 03            [24] 4912 	pop	ar3
      001789 50 31            [24] 4913 	jnc	00101$
                                   4914 ;	move.c:42: IOM = 0;
      00178B C0 05            [24] 4915 	push	ar5
                                   4916 ;	assignBit
      00178D C2 B4            [12] 4917 	clr	_P3_4
                                   4918 ;	move.c:43: origin = (uint16_t __xdata*)(startAdd);
      00178F 8E 82            [24] 4919 	mov	dpl,r6
      001791 8F 83            [24] 4920 	mov	dph,r7
                                   4921 ;	move.c:44: target = (uint16_t __xdata*)(targetAdd);
      001793 8B*54            [24] 4922 	mov	_move_target_65537_269,r3
      001795 8C*55            [24] 4923 	mov	(_move_target_65537_269 + 1),r4
                                   4924 ;	move.c:45: *target = *origin;
      001797 E0               [24] 4925 	movx	a,@dptr
      001798 F8               [12] 4926 	mov	r0,a
      001799 A3               [24] 4927 	inc	dptr
      00179A E0               [24] 4928 	movx	a,@dptr
      00179B FD               [12] 4929 	mov	r5,a
      00179C 85*54 82         [24] 4930 	mov	dpl,_move_target_65537_269
      00179F 85*55 83         [24] 4931 	mov	dph,(_move_target_65537_269 + 1)
      0017A2 E8               [12] 4932 	mov	a,r0
      0017A3 F0               [24] 4933 	movx	@dptr,a
      0017A4 ED               [12] 4934 	mov	a,r5
      0017A5 A3               [24] 4935 	inc	dptr
      0017A6 F0               [24] 4936 	movx	@dptr,a
                                   4937 ;	move.c:46: IOM = 1;
                                   4938 ;	assignBit
      0017A7 D2 B4            [12] 4939 	setb	_P3_4
                                   4940 ;	move.c:49: startAdd++;
      0017A9 0E               [12] 4941 	inc	r6
      0017AA BE 00 01         [24] 4942 	cjne	r6,#0x00,00124$
      0017AD 0F               [12] 4943 	inc	r7
      0017AE                       4944 00124$:
                                   4945 ;	move.c:50: targetAdd++;
      0017AE 0B               [12] 4946 	inc	r3
      0017AF BB 00 01         [24] 4947 	cjne	r3,#0x00,00125$
      0017B2 0C               [12] 4948 	inc	r4
      0017B3                       4949 00125$:
                                   4950 ;	move.c:38: for (i = 0; i < size; i++) {
      0017B3 09               [12] 4951 	inc	r1
      0017B4 B9 00 01         [24] 4952 	cjne	r1,#0x00,00126$
      0017B7 0A               [12] 4953 	inc	r2
      0017B8                       4954 00126$:
      0017B8 D0 05            [24] 4955 	pop	ar5
      0017BA 80 BC            [24] 4956 	sjmp	00106$
      0017BC                       4957 00101$:
                                   4958 ;	move.c:53: LCD_string_write("Done!\n");
      0017BC 90r07r02         [24] 4959 	mov	dptr,#___str_33
      0017BF 75 F0 80         [24] 4960 	mov	b,#0x80
      0017C2 12r0Cr00         [24] 4961 	lcall	_LCD_string_write
                                   4962 ;	move.c:54: LCD_string_write("Press 1 for menu\n");
      0017C5 90r06r0B         [24] 4963 	mov	dptr,#___str_18
      0017C8 75 F0 80         [24] 4964 	mov	b,#0x80
      0017CB 12r0Cr00         [24] 4965 	lcall	_LCD_string_write
                                   4966 ;	move.c:56: do {
      0017CE                       4967 00102$:
                                   4968 ;	move.c:57: size = keyDetect();
      0017CE 12r0Cr99         [24] 4969 	lcall	_keyDetect
      0017D1 AF 82            [24] 4970 	mov	r7,dpl
                                   4971 ;	move.c:58: } while (size != '1');
      0017D3 BF 31 F8         [24] 4972 	cjne	r7,#0x31,00102$
                                   4973 ;	move.c:59: }
      0017D6 22               [24] 4974 	ret
                                   4975 ;------------------------------------------------------------
                                   4976 ;Allocation info for local variables in function 'editByte'
                                   4977 ;------------------------------------------------------------
                                   4978 ;ramAddress                Allocated to registers r6 r7 
                                   4979 ;add                       Allocated with name '_editByte_add_65536_273'
                                   4980 ;val                       Allocated with name '_editByte_val_65536_274'
                                   4981 ;new                       Allocated with name '_editByte_new_65536_274'
                                   4982 ;high                      Allocated with name '_editByte_high_65536_274'
                                   4983 ;low                       Allocated with name '_editByte_low_65536_274'
                                   4984 ;------------------------------------------------------------
                                   4985 ;	edit.c:6: void editByte(__xdata uint16_t add) {
                                   4986 ;	-----------------------------------------
                                   4987 ;	 function editByte
                                   4988 ;	-----------------------------------------
      0017D7                       4989 _editByte:
      0017D7 AF 83            [24] 4990 	mov	r7,dph
      0017D9 E5 82            [12] 4991 	mov	a,dpl
      0017DB 90r00r22         [24] 4992 	mov	dptr,#_editByte_add_65536_273
      0017DE F0               [24] 4993 	movx	@dptr,a
      0017DF EF               [12] 4994 	mov	a,r7
      0017E0 A3               [24] 4995 	inc	dptr
      0017E1 F0               [24] 4996 	movx	@dptr,a
                                   4997 ;	edit.c:12: __xdata uint8_t high = HIGHBYTE(add);
      0017E2 90r00r22         [24] 4998 	mov	dptr,#_editByte_add_65536_273
      0017E5 E0               [24] 4999 	movx	a,@dptr
      0017E6 FE               [12] 5000 	mov	r6,a
      0017E7 A3               [24] 5001 	inc	dptr
      0017E8 E0               [24] 5002 	movx	a,@dptr
      0017E9 FF               [12] 5003 	mov	r7,a
      0017EA FC               [12] 5004 	mov	r4,a
                                   5005 ;	edit.c:13: __xdata uint8_t low = LOWBYTE(add);
      0017EB 8E 05            [24] 5006 	mov	ar5,r6
                                   5007 ;	edit.c:16: asciiToHex(high);
      0017ED 8C 82            [24] 5008 	mov	dpl,r4
      0017EF C0 07            [24] 5009 	push	ar7
      0017F1 C0 06            [24] 5010 	push	ar6
      0017F3 C0 05            [24] 5011 	push	ar5
      0017F5 C0 04            [24] 5012 	push	ar4
      0017F7 12r0Er77         [24] 5013 	lcall	_asciiToHex
      0017FA D0 04            [24] 5014 	pop	ar4
      0017FC D0 05            [24] 5015 	pop	ar5
                                   5016 ;	edit.c:17: asciiToHex(low);
      0017FE 8D 82            [24] 5017 	mov	dpl,r5
      001800 C0 05            [24] 5018 	push	ar5
      001802 C0 04            [24] 5019 	push	ar4
      001804 12r0Er77         [24] 5020 	lcall	_asciiToHex
                                   5021 ;	edit.c:19: LCD_string_write(": ");
      001807 90r05r4B         [24] 5022 	mov	dptr,#___str_6
      00180A 75 F0 80         [24] 5023 	mov	b,#0x80
      00180D 12r0Cr00         [24] 5024 	lcall	_LCD_string_write
      001810 D0 04            [24] 5025 	pop	ar4
      001812 D0 05            [24] 5026 	pop	ar5
      001814 D0 06            [24] 5027 	pop	ar6
      001816 D0 07            [24] 5028 	pop	ar7
                                   5029 ;	edit.c:22: IOM = 0;
                                   5030 ;	assignBit
      001818 C2 B4            [12] 5031 	clr	_P3_4
                                   5032 ;	edit.c:23: ramAddress = (uint16_t __xdata*)(add);
                                   5033 ;	edit.c:24: val = *ramAddress;
      00181A 8E 82            [24] 5034 	mov	dpl,r6
      00181C 8F 83            [24] 5035 	mov	dph,r7
      00181E E0               [24] 5036 	movx	a,@dptr
      00181F FB               [12] 5037 	mov	r3,a
                                   5038 ;	edit.c:25: IOM = 1;
                                   5039 ;	assignBit
      001820 D2 B4            [12] 5040 	setb	_P3_4
                                   5041 ;	edit.c:28: asciiToHex(val);
      001822 8B 82            [24] 5042 	mov	dpl,r3
      001824 C0 07            [24] 5043 	push	ar7
      001826 C0 06            [24] 5044 	push	ar6
      001828 C0 05            [24] 5045 	push	ar5
      00182A C0 04            [24] 5046 	push	ar4
      00182C 12r0Er77         [24] 5047 	lcall	_asciiToHex
                                   5048 ;	edit.c:31: write('\n');
      00182F 75 82 0A         [24] 5049 	mov	dpl,#0x0a
      001832 12r0Br92         [24] 5050 	lcall	_write
                                   5051 ;	edit.c:32: LCD_string_write("Enter new byte:\n");
      001835 90r07r09         [24] 5052 	mov	dptr,#___str_34
      001838 75 F0 80         [24] 5053 	mov	b,#0x80
      00183B 12r0Cr00         [24] 5054 	lcall	_LCD_string_write
                                   5055 ;	edit.c:33: new = getByte();
      00183E 12r10r7F         [24] 5056 	lcall	_getByte
      001841 AB 82            [24] 5057 	mov	r3,dpl
                                   5058 ;	edit.c:34: write('\n');
      001843 75 82 0A         [24] 5059 	mov	dpl,#0x0a
      001846 C0 03            [24] 5060 	push	ar3
      001848 12r0Br92         [24] 5061 	lcall	_write
      00184B D0 03            [24] 5062 	pop	ar3
      00184D D0 04            [24] 5063 	pop	ar4
      00184F D0 05            [24] 5064 	pop	ar5
      001851 D0 06            [24] 5065 	pop	ar6
      001853 D0 07            [24] 5066 	pop	ar7
                                   5067 ;	edit.c:37: IOM = 0;
                                   5068 ;	assignBit
      001855 C2 B4            [12] 5069 	clr	_P3_4
                                   5070 ;	edit.c:38: *ramAddress = new;
      001857 7A 00            [12] 5071 	mov	r2,#0x00
      001859 8E 82            [24] 5072 	mov	dpl,r6
      00185B 8F 83            [24] 5073 	mov	dph,r7
      00185D EB               [12] 5074 	mov	a,r3
      00185E F0               [24] 5075 	movx	@dptr,a
      00185F EA               [12] 5076 	mov	a,r2
      001860 A3               [24] 5077 	inc	dptr
      001861 F0               [24] 5078 	movx	@dptr,a
                                   5079 ;	edit.c:39: val = *ramAddress;
                                   5080 ;	edit.c:40: IOM = 1;
                                   5081 ;	assignBit
      001862 D2 B4            [12] 5082 	setb	_P3_4
                                   5083 ;	edit.c:43: asciiToHex(high);
      001864 8C 82            [24] 5084 	mov	dpl,r4
      001866 C0 05            [24] 5085 	push	ar5
      001868 C0 03            [24] 5086 	push	ar3
      00186A 12r0Er77         [24] 5087 	lcall	_asciiToHex
      00186D D0 03            [24] 5088 	pop	ar3
      00186F D0 05            [24] 5089 	pop	ar5
                                   5090 ;	edit.c:44: asciiToHex(low);
      001871 8D 82            [24] 5091 	mov	dpl,r5
      001873 C0 03            [24] 5092 	push	ar3
      001875 12r0Er77         [24] 5093 	lcall	_asciiToHex
                                   5094 ;	edit.c:45: LCD_string_write(": ");
      001878 90r05r4B         [24] 5095 	mov	dptr,#___str_6
      00187B 75 F0 80         [24] 5096 	mov	b,#0x80
      00187E 12r0Cr00         [24] 5097 	lcall	_LCD_string_write
      001881 D0 03            [24] 5098 	pop	ar3
                                   5099 ;	edit.c:46: asciiToHex(val);
      001883 8B 82            [24] 5100 	mov	dpl,r3
      001885 12r0Er77         [24] 5101 	lcall	_asciiToHex
                                   5102 ;	edit.c:47: write('\n');
      001888 75 82 0A         [24] 5103 	mov	dpl,#0x0a
                                   5104 ;	edit.c:49: }
      00188B 02r0Br92         [24] 5105 	ljmp	_write
                                   5106 ;------------------------------------------------------------
                                   5107 ;Allocation info for local variables in function 'edit'
                                   5108 ;------------------------------------------------------------
                                   5109 ;input                     Allocated with name '_edit_input_65537_276'
                                   5110 ;add                       Allocated with name '_edit_add_65537_276'
                                   5111 ;------------------------------------------------------------
                                   5112 ;	edit.c:55: void edit() {
                                   5113 ;	-----------------------------------------
                                   5114 ;	 function edit
                                   5115 ;	-----------------------------------------
      00188E                       5116 _edit:
                                   5117 ;	edit.c:57: fillScreen(GRAY);
      00188E 90 D6 BA         [24] 5118 	mov	dptr,#0xd6ba
      001891 12r07rF9         [24] 5119 	lcall	_fillScreen
                                   5120 ;	edit.c:58: setCursor(0, 0);
      001894 E4               [12] 5121 	clr	a
      001895 F5*00            [12] 5122 	mov	_setCursor_PARM_2,a
      001897 F5*01            [12] 5123 	mov	(_setCursor_PARM_2 + 1),a
      001899 90 00 00         [24] 5124 	mov	dptr,#0x0000
      00189C 12r00rA5         [24] 5125 	lcall	_setCursor
                                   5126 ;	edit.c:59: setTextSize(2);
      00189F 75 82 02         [24] 5127 	mov	dpl,#0x02
      0018A2 12r00rBF         [24] 5128 	lcall	_setTextSize
                                   5129 ;	edit.c:66: LCD_string_write("Enter address:\n");
      0018A5 90r07r1A         [24] 5130 	mov	dptr,#___str_35
      0018A8 75 F0 80         [24] 5131 	mov	b,#0x80
      0018AB 12r0Cr00         [24] 5132 	lcall	_LCD_string_write
                                   5133 ;	edit.c:67: add = getAddress();
      0018AE 12r10r18         [24] 5134 	lcall	_getAddress
      0018B1 AE 82            [24] 5135 	mov	r6,dpl
      0018B3 AF 83            [24] 5136 	mov	r7,dph
                                   5137 ;	edit.c:68: write('\n');
      0018B5 75 82 0A         [24] 5138 	mov	dpl,#0x0a
      0018B8 C0 07            [24] 5139 	push	ar7
      0018BA C0 06            [24] 5140 	push	ar6
      0018BC 12r0Br92         [24] 5141 	lcall	_write
      0018BF D0 06            [24] 5142 	pop	ar6
      0018C1 D0 07            [24] 5143 	pop	ar7
                                   5144 ;	edit.c:71: editByte(add);
      0018C3 8E 82            [24] 5145 	mov	dpl,r6
      0018C5 8F 83            [24] 5146 	mov	dph,r7
      0018C7 C0 07            [24] 5147 	push	ar7
      0018C9 C0 06            [24] 5148 	push	ar6
      0018CB 12r17rD7         [24] 5149 	lcall	_editByte
      0018CE D0 06            [24] 5150 	pop	ar6
      0018D0 D0 07            [24] 5151 	pop	ar7
                                   5152 ;	edit.c:74: do {
      0018D2                       5153 00111$:
                                   5154 ;	edit.c:75: LCD_string_write("Press 1 for menu\n");
      0018D2 90r06r0B         [24] 5155 	mov	dptr,#___str_18
      0018D5 75 F0 80         [24] 5156 	mov	b,#0x80
      0018D8 C0 07            [24] 5157 	push	ar7
      0018DA C0 06            [24] 5158 	push	ar6
      0018DC 12r0Cr00         [24] 5159 	lcall	_LCD_string_write
                                   5160 ;	edit.c:76: LCD_string_write("Press 2 to edit again\n");
      0018DF 90r07r2A         [24] 5161 	mov	dptr,#___str_36
      0018E2 75 F0 80         [24] 5162 	mov	b,#0x80
      0018E5 12r0Cr00         [24] 5163 	lcall	_LCD_string_write
                                   5164 ;	edit.c:77: LCD_string_write("Press 3 to edit next address\n");
      0018E8 90r07r41         [24] 5165 	mov	dptr,#___str_37
      0018EB 75 F0 80         [24] 5166 	mov	b,#0x80
      0018EE 12r0Cr00         [24] 5167 	lcall	_LCD_string_write
                                   5168 ;	edit.c:78: input = keyDetect();
      0018F1 12r0Cr99         [24] 5169 	lcall	_keyDetect
      0018F4 AD 82            [24] 5170 	mov	r5,dpl
      0018F6 D0 06            [24] 5171 	pop	ar6
      0018F8 D0 07            [24] 5172 	pop	ar7
      0018FA 90r00r24         [24] 5173 	mov	dptr,#_edit_input_65537_276
      0018FD ED               [12] 5174 	mov	a,r5
      0018FE F0               [24] 5175 	movx	@dptr,a
                                   5176 ;	edit.c:80: if (input == '1') {
      0018FF BD 31 01         [24] 5177 	cjne	r5,#0x31,00141$
      001902 22               [24] 5178 	ret
      001903                       5179 00141$:
                                   5180 ;	edit.c:82: } else if (input =='2') {
      001903 BD 32 2F         [24] 5181 	cjne	r5,#0x32,00104$
                                   5182 ;	edit.c:83: fillScreen(GRAY);
      001906 90 D6 BA         [24] 5183 	mov	dptr,#0xd6ba
      001909 C0 07            [24] 5184 	push	ar7
      00190B C0 06            [24] 5185 	push	ar6
      00190D 12r07rF9         [24] 5186 	lcall	_fillScreen
                                   5187 ;	edit.c:84: setCursor(0, 0);
      001910 E4               [12] 5188 	clr	a
      001911 F5*00            [12] 5189 	mov	_setCursor_PARM_2,a
      001913 F5*01            [12] 5190 	mov	(_setCursor_PARM_2 + 1),a
      001915 90 00 00         [24] 5191 	mov	dptr,#0x0000
      001918 12r00rA5         [24] 5192 	lcall	_setCursor
      00191B D0 06            [24] 5193 	pop	ar6
      00191D D0 07            [24] 5194 	pop	ar7
                                   5195 ;	edit.c:86: editByte(add);
      00191F 8E 82            [24] 5196 	mov	dpl,r6
      001921 8F 83            [24] 5197 	mov	dph,r7
      001923 C0 07            [24] 5198 	push	ar7
      001925 C0 06            [24] 5199 	push	ar6
      001927 12r17rD7         [24] 5200 	lcall	_editByte
      00192A D0 06            [24] 5201 	pop	ar6
      00192C D0 07            [24] 5202 	pop	ar7
                                   5203 ;	edit.c:88: input = 0;
      00192E 90r00r24         [24] 5204 	mov	dptr,#_edit_input_65537_276
      001931 E4               [12] 5205 	clr	a
      001932 F0               [24] 5206 	movx	@dptr,a
      001933 80 35            [24] 5207 	sjmp	00112$
      001935                       5208 00104$:
                                   5209 ;	edit.c:89: } else if (input == '3') {
      001935 BD 33 32         [24] 5210 	cjne	r5,#0x33,00112$
                                   5211 ;	edit.c:90: fillScreen(GRAY);
      001938 90 D6 BA         [24] 5212 	mov	dptr,#0xd6ba
      00193B C0 07            [24] 5213 	push	ar7
      00193D C0 06            [24] 5214 	push	ar6
      00193F 12r07rF9         [24] 5215 	lcall	_fillScreen
                                   5216 ;	edit.c:91: setCursor(0, 0);
      001942 E4               [12] 5217 	clr	a
      001943 F5*00            [12] 5218 	mov	_setCursor_PARM_2,a
      001945 F5*01            [12] 5219 	mov	(_setCursor_PARM_2 + 1),a
      001947 90 00 00         [24] 5220 	mov	dptr,#0x0000
      00194A 12r00rA5         [24] 5221 	lcall	_setCursor
      00194D D0 06            [24] 5222 	pop	ar6
      00194F D0 07            [24] 5223 	pop	ar7
                                   5224 ;	edit.c:93: editByte(++add);
      001951 0E               [12] 5225 	inc	r6
      001952 BE 00 01         [24] 5226 	cjne	r6,#0x00,00146$
      001955 0F               [12] 5227 	inc	r7
      001956                       5228 00146$:
      001956 8E 82            [24] 5229 	mov	dpl,r6
      001958 8F 83            [24] 5230 	mov	dph,r7
      00195A C0 07            [24] 5231 	push	ar7
      00195C C0 06            [24] 5232 	push	ar6
      00195E 12r17rD7         [24] 5233 	lcall	_editByte
      001961 D0 06            [24] 5234 	pop	ar6
      001963 D0 07            [24] 5235 	pop	ar7
                                   5236 ;	edit.c:95: input = 0;
      001965 90r00r24         [24] 5237 	mov	dptr,#_edit_input_65537_276
      001968 E4               [12] 5238 	clr	a
      001969 F0               [24] 5239 	movx	@dptr,a
      00196A                       5240 00112$:
                                   5241 ;	edit.c:97: } while (input != '1' && input != '2' && input != '3');
      00196A 90r00r24         [24] 5242 	mov	dptr,#_edit_input_65537_276
      00196D E0               [24] 5243 	movx	a,@dptr
      00196E FD               [12] 5244 	mov	r5,a
      00196F BD 31 01         [24] 5245 	cjne	r5,#0x31,00147$
      001972 22               [24] 5246 	ret
      001973                       5247 00147$:
      001973 BD 32 01         [24] 5248 	cjne	r5,#0x32,00148$
      001976 22               [24] 5249 	ret
      001977                       5250 00148$:
      001977 BD 33 01         [24] 5251 	cjne	r5,#0x33,00149$
      00197A 22               [24] 5252 	ret
      00197B                       5253 00149$:
      00197B 02r18rD2         [24] 5254 	ljmp	00111$
                                   5255 ;	edit.c:99: }
      00197E 22               [24] 5256 	ret
                                   5257 ;------------------------------------------------------------
                                   5258 ;Allocation info for local variables in function 'printFind'
                                   5259 ;------------------------------------------------------------
                                   5260 ;ramAddress                Allocated to registers 
                                   5261 ;n                         Allocated with name '_printFind_PARM_2'
                                   5262 ;key                       Allocated with name '_printFind_PARM_3'
                                   5263 ;index                     Allocated with name '_printFind_PARM_4'
                                   5264 ;start                     Allocated with name '_printFind_start_65536_281'
                                   5265 ;i                         Allocated with name '_printFind_i_65537_283'
                                   5266 ;found                     Allocated with name '_printFind_found_65537_283'
                                   5267 ;high                      Allocated with name '_printFind_high_65537_283'
                                   5268 ;low                       Allocated with name '_printFind_low_65537_283'
                                   5269 ;------------------------------------------------------------
                                   5270 ;	find2.c:9: void printFind(__xdata uint16_t start, __xdata uint8_t n, __xdata uint8_t key, __xdata uint8_t index) {
                                   5271 ;	-----------------------------------------
                                   5272 ;	 function printFind
                                   5273 ;	-----------------------------------------
      00197F                       5274 _printFind:
      00197F AF 83            [24] 5275 	mov	r7,dph
      001981 E5 82            [12] 5276 	mov	a,dpl
      001983 90r00r28         [24] 5277 	mov	dptr,#_printFind_start_65536_281
      001986 F0               [24] 5278 	movx	@dptr,a
      001987 EF               [12] 5279 	mov	a,r7
      001988 A3               [24] 5280 	inc	dptr
      001989 F0               [24] 5281 	movx	@dptr,a
                                   5282 ;	find2.c:11: fillScreen(GRAY);
      00198A 90 D6 BA         [24] 5283 	mov	dptr,#0xd6ba
      00198D 12r07rF9         [24] 5284 	lcall	_fillScreen
                                   5285 ;	find2.c:12: setCursor(0, 0);
      001990 E4               [12] 5286 	clr	a
      001991 F5*00            [12] 5287 	mov	_setCursor_PARM_2,a
      001993 F5*01            [12] 5288 	mov	(_setCursor_PARM_2 + 1),a
      001995 90 00 00         [24] 5289 	mov	dptr,#0x0000
      001998 12r00rA5         [24] 5290 	lcall	_setCursor
                                   5291 ;	find2.c:13: setTextSize(2);
      00199B 75 82 02         [24] 5292 	mov	dpl,#0x02
      00199E 12r00rBF         [24] 5293 	lcall	_setTextSize
                                   5294 ;	find2.c:24: for (i = 0; i < n; i++) {
      0019A1 90r00r28         [24] 5295 	mov	dptr,#_printFind_start_65536_281
      0019A4 E0               [24] 5296 	movx	a,@dptr
      0019A5 FE               [12] 5297 	mov	r6,a
      0019A6 A3               [24] 5298 	inc	dptr
      0019A7 E0               [24] 5299 	movx	a,@dptr
      0019A8 FF               [12] 5300 	mov	r7,a
      0019A9 90r00r26         [24] 5301 	mov	dptr,#_printFind_PARM_3
      0019AC E0               [24] 5302 	movx	a,@dptr
      0019AD FD               [12] 5303 	mov	r5,a
      0019AE 90r00r25         [24] 5304 	mov	dptr,#_printFind_PARM_2
      0019B1 E0               [24] 5305 	movx	a,@dptr
      0019B2 FC               [12] 5306 	mov	r4,a
      0019B3 90r00r27         [24] 5307 	mov	dptr,#_printFind_PARM_4
      0019B6 E0               [24] 5308 	movx	a,@dptr
      0019B7 FB               [12] 5309 	mov	r3,a
      0019B8 79 00            [12] 5310 	mov	r1,#0x00
      0019BA 7A 00            [12] 5311 	mov	r2,#0x00
      0019BC                       5312 00105$:
      0019BC C0 05            [24] 5313 	push	ar5
      0019BE 8C 00            [24] 5314 	mov	ar0,r4
      0019C0 7D 00            [12] 5315 	mov	r5,#0x00
      0019C2 C3               [12] 5316 	clr	c
      0019C3 E9               [12] 5317 	mov	a,r1
      0019C4 98               [12] 5318 	subb	a,r0
      0019C5 EA               [12] 5319 	mov	a,r2
      0019C6 9D               [12] 5320 	subb	a,r5
      0019C7 D0 05            [24] 5321 	pop	ar5
      0019C9 40 01            [24] 5322 	jc	00122$
      0019CB 22               [24] 5323 	ret
      0019CC                       5324 00122$:
                                   5325 ;	find2.c:26: IOM = 0;
      0019CC C0 04            [24] 5326 	push	ar4
                                   5327 ;	assignBit
      0019CE C2 B4            [12] 5328 	clr	_P3_4
                                   5329 ;	find2.c:27: ramAddress = (uint16_t __xdata*)(start + i);
      0019D0 E9               [12] 5330 	mov	a,r1
      0019D1 2E               [12] 5331 	add	a,r6
      0019D2 F8               [12] 5332 	mov	r0,a
      0019D3 EA               [12] 5333 	mov	a,r2
      0019D4 3F               [12] 5334 	addc	a,r7
      0019D5 FC               [12] 5335 	mov	r4,a
      0019D6 88 82            [24] 5336 	mov	dpl,r0
      0019D8 8C 83            [24] 5337 	mov	dph,r4
                                   5338 ;	find2.c:28: found = *ramAddress;
      0019DA E0               [24] 5339 	movx	a,@dptr
      0019DB FC               [12] 5340 	mov	r4,a
                                   5341 ;	find2.c:29: IOM = 1;
                                   5342 ;	assignBit
      0019DC D2 B4            [12] 5343 	setb	_P3_4
                                   5344 ;	find2.c:32: if (found == key) {
      0019DE EC               [12] 5345 	mov	a,r4
      0019DF B5 05 02         [24] 5346 	cjne	a,ar5,00123$
      0019E2 80 04            [24] 5347 	sjmp	00124$
      0019E4                       5348 00123$:
      0019E4 D0 04            [24] 5349 	pop	ar4
      0019E6 80 76            [24] 5350 	sjmp	00106$
      0019E8                       5351 00124$:
      0019E8 D0 04            [24] 5352 	pop	ar4
                                   5353 ;	find2.c:34: asciiToHex(index++);
      0019EA C0 05            [24] 5354 	push	ar5
      0019EC 8B 82            [24] 5355 	mov	dpl,r3
      0019EE 0B               [12] 5356 	inc	r3
      0019EF C0 07            [24] 5357 	push	ar7
      0019F1 C0 06            [24] 5358 	push	ar6
      0019F3 C0 05            [24] 5359 	push	ar5
      0019F5 C0 04            [24] 5360 	push	ar4
      0019F7 C0 03            [24] 5361 	push	ar3
      0019F9 C0 02            [24] 5362 	push	ar2
      0019FB C0 01            [24] 5363 	push	ar1
      0019FD 12r0Er77         [24] 5364 	lcall	_asciiToHex
                                   5365 ;	find2.c:35: LCD_string_write(": ");
      001A00 90r05r4B         [24] 5366 	mov	dptr,#___str_6
      001A03 75 F0 80         [24] 5367 	mov	b,#0x80
      001A06 12r0Cr00         [24] 5368 	lcall	_LCD_string_write
      001A09 D0 01            [24] 5369 	pop	ar1
      001A0B D0 02            [24] 5370 	pop	ar2
      001A0D D0 03            [24] 5371 	pop	ar3
      001A0F D0 04            [24] 5372 	pop	ar4
      001A11 D0 05            [24] 5373 	pop	ar5
      001A13 D0 06            [24] 5374 	pop	ar6
      001A15 D0 07            [24] 5375 	pop	ar7
                                   5376 ;	find2.c:37: high = HIGHBYTE(start + i);
      001A17 E9               [12] 5377 	mov	a,r1
      001A18 2E               [12] 5378 	add	a,r6
      001A19 EA               [12] 5379 	mov	a,r2
      001A1A 3F               [12] 5380 	addc	a,r7
      001A1B F5 82            [12] 5381 	mov	dpl,a
                                   5382 ;	find2.c:38: low = LOWBYTE(start + i);
      001A1D 8E 05            [24] 5383 	mov	ar5,r6
      001A1F 89 00            [24] 5384 	mov	ar0,r1
      001A21 E8               [12] 5385 	mov	a,r0
      001A22 2D               [12] 5386 	add	a,r5
      001A23 FD               [12] 5387 	mov	r5,a
                                   5388 ;	find2.c:41: asciiToHex(high);
      001A24 C0 07            [24] 5389 	push	ar7
      001A26 C0 06            [24] 5390 	push	ar6
      001A28 C0 05            [24] 5391 	push	ar5
      001A2A C0 04            [24] 5392 	push	ar4
      001A2C C0 03            [24] 5393 	push	ar3
      001A2E C0 02            [24] 5394 	push	ar2
      001A30 C0 01            [24] 5395 	push	ar1
      001A32 12r0Er77         [24] 5396 	lcall	_asciiToHex
      001A35 D0 01            [24] 5397 	pop	ar1
      001A37 D0 02            [24] 5398 	pop	ar2
      001A39 D0 03            [24] 5399 	pop	ar3
      001A3B D0 04            [24] 5400 	pop	ar4
      001A3D D0 05            [24] 5401 	pop	ar5
                                   5402 ;	find2.c:42: asciiToHex(low);
      001A3F 8D 82            [24] 5403 	mov	dpl,r5
      001A41 C0 05            [24] 5404 	push	ar5
      001A43 C0 04            [24] 5405 	push	ar4
      001A45 C0 03            [24] 5406 	push	ar3
      001A47 C0 02            [24] 5407 	push	ar2
      001A49 C0 01            [24] 5408 	push	ar1
      001A4B 12r0Er77         [24] 5409 	lcall	_asciiToHex
      001A4E D0 01            [24] 5410 	pop	ar1
      001A50 D0 02            [24] 5411 	pop	ar2
      001A52 D0 03            [24] 5412 	pop	ar3
      001A54 D0 04            [24] 5413 	pop	ar4
      001A56 D0 05            [24] 5414 	pop	ar5
      001A58 D0 06            [24] 5415 	pop	ar6
      001A5A D0 07            [24] 5416 	pop	ar7
                                   5417 ;	find2.c:24: for (i = 0; i < n; i++) {
      001A5C D0 05            [24] 5418 	pop	ar5
                                   5419 ;	find2.c:42: asciiToHex(low);
      001A5E                       5420 00106$:
                                   5421 ;	find2.c:24: for (i = 0; i < n; i++) {
      001A5E 09               [12] 5422 	inc	r1
      001A5F B9 00 01         [24] 5423 	cjne	r1,#0x00,00125$
      001A62 0A               [12] 5424 	inc	r2
      001A63                       5425 00125$:
                                   5426 ;	find2.c:48: }
      001A63 02r19rBC         [24] 5427 	ljmp	00105$
                                   5428 ;------------------------------------------------------------
                                   5429 ;Allocation info for local variables in function 'find'
                                   5430 ;------------------------------------------------------------
                                   5431 ;ramAddress                Allocated to registers 
                                   5432 ;sloc0                     Allocated with name '_find_sloc0_1_0'
                                   5433 ;sloc1                     Allocated with name '_find_sloc1_1_0'
                                   5434 ;sloc2                     Allocated with name '_find_sloc2_1_0'
                                   5435 ;key                       Allocated with name '_find_key_65537_288'
                                   5436 ;size                      Allocated with name '_find_size_65537_288'
                                   5437 ;input                     Allocated with name '_find_input_65537_288'
                                   5438 ;page                      Allocated with name '_find_page_65537_288'
                                   5439 ;index                     Allocated with name '_find_index_65537_288'
                                   5440 ;i                         Allocated with name '_find_i_65537_288'
                                   5441 ;n                         Allocated with name '_find_n_65537_288'
                                   5442 ;found                     Allocated with name '_find_found_65537_288'
                                   5443 ;address                   Allocated with name '_find_address_65537_288'
                                   5444 ;------------------------------------------------------------
                                   5445 ;	find2.c:54: void find() {
                                   5446 ;	-----------------------------------------
                                   5447 ;	 function find
                                   5448 ;	-----------------------------------------
      001A66                       5449 _find:
                                   5450 ;	find2.c:56: fillScreen(GRAY);
      001A66 90 D6 BA         [24] 5451 	mov	dptr,#0xd6ba
      001A69 12r07rF9         [24] 5452 	lcall	_fillScreen
                                   5453 ;	find2.c:57: setCursor(0, 0);
      001A6C E4               [12] 5454 	clr	a
      001A6D F5*00            [12] 5455 	mov	_setCursor_PARM_2,a
      001A6F F5*01            [12] 5456 	mov	(_setCursor_PARM_2 + 1),a
      001A71 90 00 00         [24] 5457 	mov	dptr,#0x0000
      001A74 12r00rA5         [24] 5458 	lcall	_setCursor
                                   5459 ;	find2.c:58: setTextSize(2);
      001A77 75 82 02         [24] 5460 	mov	dpl,#0x02
      001A7A 12r00rBF         [24] 5461 	lcall	_setTextSize
                                   5462 ;	find2.c:73: page = 1;
      001A7D 90r00r2A         [24] 5463 	mov	dptr,#_find_page_65537_288
      001A80 74 01            [12] 5464 	mov	a,#0x01
      001A82 F0               [24] 5465 	movx	@dptr,a
                                   5466 ;	find2.c:74: index = 0;
      001A83 90r00r2B         [24] 5467 	mov	dptr,#_find_index_65537_288
      001A86 E4               [12] 5468 	clr	a
      001A87 F0               [24] 5469 	movx	@dptr,a
                                   5470 ;	find2.c:78: LCD_string_write("Enter byte:\n");
      001A88 90r07r5F         [24] 5471 	mov	dptr,#___str_38
      001A8B 75 F0 80         [24] 5472 	mov	b,#0x80
      001A8E 12r0Cr00         [24] 5473 	lcall	_LCD_string_write
                                   5474 ;	find2.c:79: key = getByte();
      001A91 12r10r7F         [24] 5475 	lcall	_getByte
      001A94 AF 82            [24] 5476 	mov	r7,dpl
                                   5477 ;	find2.c:80: write('\n');								// newline for next read
      001A96 75 82 0A         [24] 5478 	mov	dpl,#0x0a
      001A99 C0 07            [24] 5479 	push	ar7
      001A9B 12r0Br92         [24] 5480 	lcall	_write
                                   5481 ;	find2.c:83: LCD_string_write("Enter start address:\n");
      001A9E 90r05r4E         [24] 5482 	mov	dptr,#___str_7
      001AA1 75 F0 80         [24] 5483 	mov	b,#0x80
      001AA4 12r0Cr00         [24] 5484 	lcall	_LCD_string_write
                                   5485 ;	find2.c:84: address = getAddress();
      001AA7 12r10r18         [24] 5486 	lcall	_getAddress
      001AAA AD 82            [24] 5487 	mov	r5,dpl
      001AAC AE 83            [24] 5488 	mov	r6,dph
      001AAE 90r00r2C         [24] 5489 	mov	dptr,#_find_address_65537_288
      001AB1 ED               [12] 5490 	mov	a,r5
      001AB2 F0               [24] 5491 	movx	@dptr,a
      001AB3 EE               [12] 5492 	mov	a,r6
      001AB4 A3               [24] 5493 	inc	dptr
      001AB5 F0               [24] 5494 	movx	@dptr,a
                                   5495 ;	find2.c:85: write('\n');								// newline for next read
      001AB6 75 82 0A         [24] 5496 	mov	dpl,#0x0a
      001AB9 C0 06            [24] 5497 	push	ar6
      001ABB C0 05            [24] 5498 	push	ar5
      001ABD 12r0Br92         [24] 5499 	lcall	_write
                                   5500 ;	find2.c:88: LCD_string_write("Enter block size:\n");
      001AC0 90r05rAE         [24] 5501 	mov	dptr,#___str_14
      001AC3 75 F0 80         [24] 5502 	mov	b,#0x80
      001AC6 12r0Cr00         [24] 5503 	lcall	_LCD_string_write
                                   5504 ;	find2.c:89: size = getByte();
      001AC9 12r10r7F         [24] 5505 	lcall	_getByte
      001ACC AC 82            [24] 5506 	mov	r4,dpl
                                   5507 ;	find2.c:90: write('\n');
      001ACE 75 82 0A         [24] 5508 	mov	dpl,#0x0a
      001AD1 C0 04            [24] 5509 	push	ar4
      001AD3 12r0Br92         [24] 5510 	lcall	_write
      001AD6 D0 04            [24] 5511 	pop	ar4
      001AD8 D0 05            [24] 5512 	pop	ar5
      001ADA D0 06            [24] 5513 	pop	ar6
      001ADC D0 07            [24] 5514 	pop	ar7
                                   5515 ;	find2.c:93: for (i = 0; i < size; i++) {
      001ADE 7B 00            [12] 5516 	mov	r3,#0x00
      001AE0 7A 00            [12] 5517 	mov	r2,#0x00
      001AE2                       5518 00129$:
      001AE2 C3               [12] 5519 	clr	c
      001AE3 EA               [12] 5520 	mov	a,r2
      001AE4 9C               [12] 5521 	subb	a,r4
      001AE5 50 31            [24] 5522 	jnc	00103$
                                   5523 ;	find2.c:94: IOM = 0;
      001AE7 C0 04            [24] 5524 	push	ar4
                                   5525 ;	assignBit
      001AE9 C2 B4            [12] 5526 	clr	_P3_4
                                   5527 ;	find2.c:95: ramAddress = (uint16_t __xdata*)(address + i);
      001AEB 8A*56            [24] 5528 	mov	_find_sloc0_1_0,r2
      001AED 75*57 00         [24] 5529 	mov	(_find_sloc0_1_0 + 1),#0x00
      001AF0 8D*58            [24] 5530 	mov	_find_sloc1_1_0,r5
      001AF2 8E*59            [24] 5531 	mov	(_find_sloc1_1_0 + 1),r6
      001AF4 A8*56            [24] 5532 	mov	r0,_find_sloc0_1_0
      001AF6 AC*57            [24] 5533 	mov	r4,(_find_sloc0_1_0 + 1)
      001AF8 E8               [12] 5534 	mov	a,r0
      001AF9 25*58            [12] 5535 	add	a,_find_sloc1_1_0
      001AFB F8               [12] 5536 	mov	r0,a
      001AFC EC               [12] 5537 	mov	a,r4
      001AFD 35*59            [12] 5538 	addc	a,(_find_sloc1_1_0 + 1)
      001AFF FC               [12] 5539 	mov	r4,a
      001B00 88 82            [24] 5540 	mov	dpl,r0
      001B02 8C 83            [24] 5541 	mov	dph,r4
                                   5542 ;	find2.c:96: found = *ramAddress;
      001B04 E0               [24] 5543 	movx	a,@dptr
      001B05 FC               [12] 5544 	mov	r4,a
                                   5545 ;	find2.c:97: IOM = 1;
                                   5546 ;	assignBit
      001B06 D2 B4            [12] 5547 	setb	_P3_4
                                   5548 ;	find2.c:99: if (found == key) {
      001B08 EC               [12] 5549 	mov	a,r4
      001B09 B5 07 02         [24] 5550 	cjne	a,ar7,00187$
      001B0C 80 04            [24] 5551 	sjmp	00188$
      001B0E                       5552 00187$:
      001B0E D0 04            [24] 5553 	pop	ar4
      001B10 80 03            [24] 5554 	sjmp	00130$
      001B12                       5555 00188$:
      001B12 D0 04            [24] 5556 	pop	ar4
                                   5557 ;	find2.c:100: n++;
      001B14 0B               [12] 5558 	inc	r3
      001B15                       5559 00130$:
                                   5560 ;	find2.c:93: for (i = 0; i < size; i++) {
      001B15 0A               [12] 5561 	inc	r2
      001B16 80 CA            [24] 5562 	sjmp	00129$
      001B18                       5563 00103$:
                                   5564 ;	find2.c:105: if (n < NUM) {
      001B18 BB 0F 00         [24] 5565 	cjne	r3,#0x0f,00189$
      001B1B                       5566 00189$:
      001B1B 50 24            [24] 5567 	jnc	00105$
                                   5568 ;	find2.c:106: printFind(address, n, key, index);
      001B1D 90r00r25         [24] 5569 	mov	dptr,#_printFind_PARM_2
      001B20 EB               [12] 5570 	mov	a,r3
      001B21 F0               [24] 5571 	movx	@dptr,a
      001B22 90r00r26         [24] 5572 	mov	dptr,#_printFind_PARM_3
      001B25 EF               [12] 5573 	mov	a,r7
      001B26 F0               [24] 5574 	movx	@dptr,a
      001B27 90r00r27         [24] 5575 	mov	dptr,#_printFind_PARM_4
      001B2A E4               [12] 5576 	clr	a
      001B2B F0               [24] 5577 	movx	@dptr,a
      001B2C 8D 82            [24] 5578 	mov	dpl,r5
      001B2E 8E 83            [24] 5579 	mov	dph,r6
      001B30 C0 07            [24] 5580 	push	ar7
      001B32 C0 04            [24] 5581 	push	ar4
      001B34 C0 03            [24] 5582 	push	ar3
      001B36 12r19r7F         [24] 5583 	lcall	_printFind
      001B39 D0 03            [24] 5584 	pop	ar3
      001B3B D0 04            [24] 5585 	pop	ar4
      001B3D D0 07            [24] 5586 	pop	ar7
      001B3F 80 29            [24] 5587 	sjmp	00143$
      001B41                       5588 00105$:
                                   5589 ;	find2.c:108: printFind(address, NUM, key, index);
      001B41 90r00r25         [24] 5590 	mov	dptr,#_printFind_PARM_2
      001B44 74 0F            [12] 5591 	mov	a,#0x0f
      001B46 F0               [24] 5592 	movx	@dptr,a
      001B47 90r00r26         [24] 5593 	mov	dptr,#_printFind_PARM_3
      001B4A EF               [12] 5594 	mov	a,r7
      001B4B F0               [24] 5595 	movx	@dptr,a
      001B4C 90r00r27         [24] 5596 	mov	dptr,#_printFind_PARM_4
      001B4F E4               [12] 5597 	clr	a
      001B50 F0               [24] 5598 	movx	@dptr,a
      001B51 8D 82            [24] 5599 	mov	dpl,r5
      001B53 8E 83            [24] 5600 	mov	dph,r6
      001B55 C0 07            [24] 5601 	push	ar7
      001B57 C0 04            [24] 5602 	push	ar4
      001B59 C0 03            [24] 5603 	push	ar3
      001B5B 12r19r7F         [24] 5604 	lcall	_printFind
      001B5E D0 03            [24] 5605 	pop	ar3
      001B60 D0 04            [24] 5606 	pop	ar4
      001B62 D0 07            [24] 5607 	pop	ar7
                                   5608 ;	find2.c:109: index += NUM;
      001B64 90r00r2B         [24] 5609 	mov	dptr,#_find_index_65537_288
      001B67 74 0F            [12] 5610 	mov	a,#0x0f
      001B69 F0               [24] 5611 	movx	@dptr,a
                                   5612 ;	find2.c:112: do {
      001B6A                       5613 00143$:
      001B6A C3               [12] 5614 	clr	c
      001B6B 74 0F            [12] 5615 	mov	a,#0x0f
      001B6D 9B               [12] 5616 	subb	a,r3
      001B6E E4               [12] 5617 	clr	a
      001B6F 33               [12] 5618 	rlc	a
      001B70 F5*5A            [12] 5619 	mov	_find_sloc2_1_0,a
      001B72 8B F0            [24] 5620 	mov	b,r3
      001B74 EC               [12] 5621 	mov	a,r4
      001B75 84               [48] 5622 	div	ab
      001B76 F5*58            [12] 5623 	mov	_find_sloc1_1_0,a
      001B78 90r00r2B         [24] 5624 	mov	dptr,#_find_index_65537_288
      001B7B E0               [24] 5625 	movx	a,@dptr
      001B7C FC               [12] 5626 	mov	r4,a
      001B7D FA               [12] 5627 	mov	r2,a
      001B7E                       5628 00125$:
                                   5629 ;	find2.c:113: if (page != ((n / NUM) + 1) && n > NUM) {
      001B7E C0 02            [24] 5630 	push	ar2
      001B80 8B 00            [24] 5631 	mov	ar0,r3
      001B82 79 00            [12] 5632 	mov	r1,#0x00
      001B84 75*00 0F         [24] 5633 	mov	__divsint_PARM_2,#0x0f
                                   5634 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001B87 89*01            [24] 5635 	mov	(__divsint_PARM_2 + 1),r1
      001B89 88 82            [24] 5636 	mov	dpl,r0
      001B8B 89 83            [24] 5637 	mov	dph,r1
      001B8D C0 07            [24] 5638 	push	ar7
      001B8F C0 04            [24] 5639 	push	ar4
      001B91 C0 03            [24] 5640 	push	ar3
      001B93 C0 02            [24] 5641 	push	ar2
      001B95 12r00r00         [24] 5642 	lcall	__divsint
      001B98 E5 82            [12] 5643 	mov	a,dpl
      001B9A 85 83 F0         [24] 5644 	mov	b,dph
      001B9D D0 02            [24] 5645 	pop	ar2
      001B9F D0 03            [24] 5646 	pop	ar3
      001BA1 D0 04            [24] 5647 	pop	ar4
      001BA3 D0 07            [24] 5648 	pop	ar7
      001BA5 24 01            [12] 5649 	add	a,#0x01
      001BA7 F8               [12] 5650 	mov	r0,a
      001BA8 E4               [12] 5651 	clr	a
      001BA9 35 F0            [12] 5652 	addc	a,b
      001BAB F9               [12] 5653 	mov	r1,a
      001BAC 90r00r2A         [24] 5654 	mov	dptr,#_find_page_65537_288
      001BAF E0               [24] 5655 	movx	a,@dptr
      001BB0 7D 00            [12] 5656 	mov	r5,#0x00
      001BB2 B5 00 08         [24] 5657 	cjne	a,ar0,00191$
      001BB5 ED               [12] 5658 	mov	a,r5
      001BB6 B5 01 04         [24] 5659 	cjne	a,ar1,00191$
      001BB9 D0 02            [24] 5660 	pop	ar2
      001BBB 80 22            [24] 5661 	sjmp	00112$
      001BBD                       5662 00191$:
      001BBD D0 02            [24] 5663 	pop	ar2
      001BBF EB               [12] 5664 	mov	a,r3
      001BC0 24 F0            [12] 5665 	add	a,#0xff - 0x0f
      001BC2 50 1B            [24] 5666 	jnc	00112$
                                   5667 ;	find2.c:114: LCD_string_write("Press B for next\n");
      001BC4 90r05rC1         [24] 5668 	mov	dptr,#___str_15
      001BC7 75 F0 80         [24] 5669 	mov	b,#0x80
      001BCA C0 07            [24] 5670 	push	ar7
      001BCC C0 04            [24] 5671 	push	ar4
      001BCE C0 03            [24] 5672 	push	ar3
      001BD0 C0 02            [24] 5673 	push	ar2
      001BD2 12r0Cr00         [24] 5674 	lcall	_LCD_string_write
      001BD5 D0 02            [24] 5675 	pop	ar2
      001BD7 D0 03            [24] 5676 	pop	ar3
      001BD9 D0 04            [24] 5677 	pop	ar4
      001BDB D0 07            [24] 5678 	pop	ar7
      001BDD 80 42            [24] 5679 	sjmp	00113$
      001BDF                       5680 00112$:
                                   5681 ;	find2.c:115: } else if (page != 1 && n > NUM) {
      001BDF 90r00r2A         [24] 5682 	mov	dptr,#_find_page_65537_288
      001BE2 E0               [24] 5683 	movx	a,@dptr
      001BE3 FD               [12] 5684 	mov	r5,a
      001BE4 BD 01 02         [24] 5685 	cjne	r5,#0x01,00193$
      001BE7 80 1F            [24] 5686 	sjmp	00108$
      001BE9                       5687 00193$:
      001BE9 E5*5A            [12] 5688 	mov	a,_find_sloc2_1_0
      001BEB 60 1B            [24] 5689 	jz	00108$
                                   5690 ;	find2.c:116: LCD_string_write("Press A for previous\n");
      001BED 90r05rD3         [24] 5691 	mov	dptr,#___str_16
      001BF0 75 F0 80         [24] 5692 	mov	b,#0x80
      001BF3 C0 07            [24] 5693 	push	ar7
      001BF5 C0 04            [24] 5694 	push	ar4
      001BF7 C0 03            [24] 5695 	push	ar3
      001BF9 C0 02            [24] 5696 	push	ar2
      001BFB 12r0Cr00         [24] 5697 	lcall	_LCD_string_write
      001BFE D0 02            [24] 5698 	pop	ar2
      001C00 D0 03            [24] 5699 	pop	ar3
      001C02 D0 04            [24] 5700 	pop	ar4
      001C04 D0 07            [24] 5701 	pop	ar7
      001C06 80 19            [24] 5702 	sjmp	00113$
      001C08                       5703 00108$:
                                   5704 ;	find2.c:118: LCD_string_write("Press A for previous, B for next\n");
      001C08 90r05rE9         [24] 5705 	mov	dptr,#___str_17
      001C0B 75 F0 80         [24] 5706 	mov	b,#0x80
      001C0E C0 07            [24] 5707 	push	ar7
      001C10 C0 04            [24] 5708 	push	ar4
      001C12 C0 03            [24] 5709 	push	ar3
      001C14 C0 02            [24] 5710 	push	ar2
      001C16 12r0Cr00         [24] 5711 	lcall	_LCD_string_write
      001C19 D0 02            [24] 5712 	pop	ar2
      001C1B D0 03            [24] 5713 	pop	ar3
      001C1D D0 04            [24] 5714 	pop	ar4
      001C1F D0 07            [24] 5715 	pop	ar7
      001C21                       5716 00113$:
                                   5717 ;	find2.c:121: LCD_string_write("Press 1 for menu\n");
      001C21 90r06r0B         [24] 5718 	mov	dptr,#___str_18
      001C24 75 F0 80         [24] 5719 	mov	b,#0x80
      001C27 C0 07            [24] 5720 	push	ar7
      001C29 C0 04            [24] 5721 	push	ar4
      001C2B C0 03            [24] 5722 	push	ar3
      001C2D C0 02            [24] 5723 	push	ar2
      001C2F 12r0Cr00         [24] 5724 	lcall	_LCD_string_write
                                   5725 ;	find2.c:123: input = keyDetect();
      001C32 12r0Cr99         [24] 5726 	lcall	_keyDetect
      001C35 AD 82            [24] 5727 	mov	r5,dpl
      001C37 D0 02            [24] 5728 	pop	ar2
      001C39 D0 03            [24] 5729 	pop	ar3
      001C3B D0 04            [24] 5730 	pop	ar4
      001C3D D0 07            [24] 5731 	pop	ar7
                                   5732 ;	find2.c:126: if (input == 'B' && page != ((size / n) + 1)) {		// next
      001C3F BD 42 73         [24] 5733 	cjne	r5,#0x42,00122$
      001C42 C0 02            [24] 5734 	push	ar2
      001C44 A8*58            [24] 5735 	mov	r0,_find_sloc1_1_0
      001C46 79 00            [12] 5736 	mov	r1,#0x00
      001C48 08               [12] 5737 	inc	r0
      001C49 B8 00 01         [24] 5738 	cjne	r0,#0x00,00197$
      001C4C 09               [12] 5739 	inc	r1
      001C4D                       5740 00197$:
      001C4D 90r00r2A         [24] 5741 	mov	dptr,#_find_page_65537_288
      001C50 E0               [24] 5742 	movx	a,@dptr
      001C51 F5*56            [12] 5743 	mov	_find_sloc0_1_0,a
      001C53 AA*56            [24] 5744 	mov	r2,_find_sloc0_1_0
      001C55 7E 00            [12] 5745 	mov	r6,#0x00
      001C57 EA               [12] 5746 	mov	a,r2
      001C58 B5 00 08         [24] 5747 	cjne	a,ar0,00198$
      001C5B EE               [12] 5748 	mov	a,r6
      001C5C B5 01 04         [24] 5749 	cjne	a,ar1,00198$
      001C5F D0 02            [24] 5750 	pop	ar2
      001C61 80 52            [24] 5751 	sjmp	00122$
      001C63                       5752 00198$:
      001C63 D0 02            [24] 5753 	pop	ar2
                                   5754 ;	find2.c:127: address += NUM;
      001C65 90r00r2C         [24] 5755 	mov	dptr,#_find_address_65537_288
      001C68 E0               [24] 5756 	movx	a,@dptr
      001C69 F9               [12] 5757 	mov	r1,a
      001C6A A3               [24] 5758 	inc	dptr
      001C6B E0               [24] 5759 	movx	a,@dptr
      001C6C FE               [12] 5760 	mov	r6,a
      001C6D 74 0F            [12] 5761 	mov	a,#0x0f
      001C6F 29               [12] 5762 	add	a,r1
      001C70 F9               [12] 5763 	mov	r1,a
      001C71 E4               [12] 5764 	clr	a
      001C72 3E               [12] 5765 	addc	a,r6
      001C73 FE               [12] 5766 	mov	r6,a
      001C74 90r00r2C         [24] 5767 	mov	dptr,#_find_address_65537_288
      001C77 E9               [12] 5768 	mov	a,r1
      001C78 F0               [24] 5769 	movx	@dptr,a
      001C79 EE               [12] 5770 	mov	a,r6
      001C7A A3               [24] 5771 	inc	dptr
      001C7B F0               [24] 5772 	movx	@dptr,a
                                   5773 ;	find2.c:128: printFind(address, NUM, key, index);
      001C7C 90r00r2C         [24] 5774 	mov	dptr,#_find_address_65537_288
      001C7F E0               [24] 5775 	movx	a,@dptr
      001C80 F9               [12] 5776 	mov	r1,a
      001C81 A3               [24] 5777 	inc	dptr
      001C82 E0               [24] 5778 	movx	a,@dptr
      001C83 FE               [12] 5779 	mov	r6,a
      001C84 90r00r25         [24] 5780 	mov	dptr,#_printFind_PARM_2
      001C87 74 0F            [12] 5781 	mov	a,#0x0f
      001C89 F0               [24] 5782 	movx	@dptr,a
      001C8A 90r00r26         [24] 5783 	mov	dptr,#_printFind_PARM_3
      001C8D EF               [12] 5784 	mov	a,r7
      001C8E F0               [24] 5785 	movx	@dptr,a
      001C8F 90r00r27         [24] 5786 	mov	dptr,#_printFind_PARM_4
      001C92 EC               [12] 5787 	mov	a,r4
      001C93 F0               [24] 5788 	movx	@dptr,a
      001C94 89 82            [24] 5789 	mov	dpl,r1
      001C96 8E 83            [24] 5790 	mov	dph,r6
      001C98 C0 07            [24] 5791 	push	ar7
      001C9A C0 04            [24] 5792 	push	ar4
      001C9C C0 03            [24] 5793 	push	ar3
      001C9E C0 02            [24] 5794 	push	ar2
      001CA0 12r19r7F         [24] 5795 	lcall	_printFind
      001CA3 D0 02            [24] 5796 	pop	ar2
      001CA5 D0 03            [24] 5797 	pop	ar3
      001CA7 D0 04            [24] 5798 	pop	ar4
      001CA9 D0 07            [24] 5799 	pop	ar7
                                   5800 ;	find2.c:129: page++;
      001CAB 90r00r2A         [24] 5801 	mov	dptr,#_find_page_65537_288
      001CAE E5*56            [12] 5802 	mov	a,_find_sloc0_1_0
      001CB0 04               [12] 5803 	inc	a
      001CB1 F0               [24] 5804 	movx	@dptr,a
      001CB2 02r1Br7E         [24] 5805 	ljmp	00125$
      001CB5                       5806 00122$:
                                   5807 ;	find2.c:130: } else if (input == 'A' && page != 1) {				// previous
      001CB5 BD 41 5E         [24] 5808 	cjne	r5,#0x41,00118$
      001CB8 90r00r2A         [24] 5809 	mov	dptr,#_find_page_65537_288
      001CBB E0               [24] 5810 	movx	a,@dptr
      001CBC FE               [12] 5811 	mov	r6,a
      001CBD BE 01 02         [24] 5812 	cjne	r6,#0x01,00201$
      001CC0 80 54            [24] 5813 	sjmp	00118$
      001CC2                       5814 00201$:
                                   5815 ;	find2.c:131: address -= NUM;
      001CC2 90r00r2C         [24] 5816 	mov	dptr,#_find_address_65537_288
      001CC5 E0               [24] 5817 	movx	a,@dptr
      001CC6 F8               [12] 5818 	mov	r0,a
      001CC7 A3               [24] 5819 	inc	dptr
      001CC8 E0               [24] 5820 	movx	a,@dptr
      001CC9 F9               [12] 5821 	mov	r1,a
      001CCA E8               [12] 5822 	mov	a,r0
      001CCB 24 F1            [12] 5823 	add	a,#0xf1
      001CCD F8               [12] 5824 	mov	r0,a
      001CCE E9               [12] 5825 	mov	a,r1
      001CCF 34 FF            [12] 5826 	addc	a,#0xff
      001CD1 F9               [12] 5827 	mov	r1,a
      001CD2 90r00r2C         [24] 5828 	mov	dptr,#_find_address_65537_288
      001CD5 E8               [12] 5829 	mov	a,r0
      001CD6 F0               [24] 5830 	movx	@dptr,a
      001CD7 E9               [12] 5831 	mov	a,r1
      001CD8 A3               [24] 5832 	inc	dptr
      001CD9 F0               [24] 5833 	movx	@dptr,a
                                   5834 ;	find2.c:132: printFind(address, NUM, key, index);
      001CDA 90r00r2C         [24] 5835 	mov	dptr,#_find_address_65537_288
      001CDD E0               [24] 5836 	movx	a,@dptr
      001CDE F8               [12] 5837 	mov	r0,a
      001CDF A3               [24] 5838 	inc	dptr
      001CE0 E0               [24] 5839 	movx	a,@dptr
      001CE1 F9               [12] 5840 	mov	r1,a
      001CE2 90r00r25         [24] 5841 	mov	dptr,#_printFind_PARM_2
      001CE5 74 0F            [12] 5842 	mov	a,#0x0f
      001CE7 F0               [24] 5843 	movx	@dptr,a
      001CE8 90r00r26         [24] 5844 	mov	dptr,#_printFind_PARM_3
      001CEB EF               [12] 5845 	mov	a,r7
      001CEC F0               [24] 5846 	movx	@dptr,a
      001CED 90r00r27         [24] 5847 	mov	dptr,#_printFind_PARM_4
      001CF0 EA               [12] 5848 	mov	a,r2
      001CF1 F0               [24] 5849 	movx	@dptr,a
      001CF2 88 82            [24] 5850 	mov	dpl,r0
      001CF4 89 83            [24] 5851 	mov	dph,r1
      001CF6 C0 07            [24] 5852 	push	ar7
      001CF8 C0 06            [24] 5853 	push	ar6
      001CFA C0 04            [24] 5854 	push	ar4
      001CFC C0 03            [24] 5855 	push	ar3
      001CFE C0 02            [24] 5856 	push	ar2
      001D00 12r19r7F         [24] 5857 	lcall	_printFind
      001D03 D0 02            [24] 5858 	pop	ar2
      001D05 D0 03            [24] 5859 	pop	ar3
      001D07 D0 04            [24] 5860 	pop	ar4
      001D09 D0 06            [24] 5861 	pop	ar6
      001D0B D0 07            [24] 5862 	pop	ar7
                                   5863 ;	find2.c:133: page--;
      001D0D EE               [12] 5864 	mov	a,r6
      001D0E 14               [12] 5865 	dec	a
      001D0F 90r00r2A         [24] 5866 	mov	dptr,#_find_page_65537_288
      001D12 F0               [24] 5867 	movx	@dptr,a
      001D13 02r1Br7E         [24] 5868 	ljmp	00125$
      001D16                       5869 00118$:
                                   5870 ;	find2.c:134: } else if (input == '1') {							// main menu
      001D16 BD 31 01         [24] 5871 	cjne	r5,#0x31,00202$
      001D19 22               [24] 5872 	ret
      001D1A                       5873 00202$:
      001D1A 02r1Br7E         [24] 5874 	ljmp	00125$
                                   5875 ;	find2.c:140: } while(1);
                                   5876 ;	find2.c:142: }
      001D1D 22               [24] 5877 	ret
                                   5878 ;------------------------------------------------------------
                                   5879 ;Allocation info for local variables in function 'count'
                                   5880 ;------------------------------------------------------------
                                   5881 ;ramAddress                Allocated to registers 
                                   5882 ;sloc0                     Allocated with name '_count_sloc0_1_0'
                                   5883 ;sloc1                     Allocated with name '_count_sloc1_1_0'
                                   5884 ;sloc2                     Allocated with name '_count_sloc2_1_0'
                                   5885 ;address                   Allocated with name '_count_address_65537_302'
                                   5886 ;i                         Allocated with name '_count_i_65537_302'
                                   5887 ;size                      Allocated with name '_count_size_65537_302'
                                   5888 ;key                       Allocated with name '_count_key_65537_302'
                                   5889 ;count                     Allocated with name '_count_count_65537_302'
                                   5890 ;found                     Allocated with name '_count_found_65537_302'
                                   5891 ;n                         Allocated with name '_count_n_65537_302'
                                   5892 ;index                     Allocated with name '_count_index_65537_302'
                                   5893 ;input                     Allocated with name '_count_input_65537_302'
                                   5894 ;page                      Allocated with name '_count_page_65537_302'
                                   5895 ;------------------------------------------------------------
                                   5896 ;	count.c:5: void count() {
                                   5897 ;	-----------------------------------------
                                   5898 ;	 function count
                                   5899 ;	-----------------------------------------
      001D1E                       5900 _count:
                                   5901 ;	count.c:7: fillScreen(GRAY);
      001D1E 90 D6 BA         [24] 5902 	mov	dptr,#0xd6ba
      001D21 12r07rF9         [24] 5903 	lcall	_fillScreen
                                   5904 ;	count.c:8: setCursor(0, 0);
      001D24 E4               [12] 5905 	clr	a
      001D25 F5*00            [12] 5906 	mov	_setCursor_PARM_2,a
      001D27 F5*01            [12] 5907 	mov	(_setCursor_PARM_2 + 1),a
      001D29 90 00 00         [24] 5908 	mov	dptr,#0x0000
      001D2C 12r00rA5         [24] 5909 	lcall	_setCursor
                                   5910 ;	count.c:9: setTextSize(2);
      001D2F 75 82 02         [24] 5911 	mov	dpl,#0x02
      001D32 12r00rBF         [24] 5912 	lcall	_setTextSize
                                   5913 ;	count.c:24: page = 1;
      001D35 90r00r31         [24] 5914 	mov	dptr,#_count_page_65537_302
      001D38 74 01            [12] 5915 	mov	a,#0x01
      001D3A F0               [24] 5916 	movx	@dptr,a
                                   5917 ;	count.c:25: index = 0;
      001D3B 90r00r30         [24] 5918 	mov	dptr,#_count_index_65537_302
      001D3E E4               [12] 5919 	clr	a
      001D3F F0               [24] 5920 	movx	@dptr,a
                                   5921 ;	count.c:29: LCD_string_write("Enter address:\n");
      001D40 90r07r1A         [24] 5922 	mov	dptr,#___str_35
      001D43 75 F0 80         [24] 5923 	mov	b,#0x80
      001D46 12r0Cr00         [24] 5924 	lcall	_LCD_string_write
                                   5925 ;	count.c:30: address = getAddress();
      001D49 12r10r18         [24] 5926 	lcall	_getAddress
      001D4C AE 82            [24] 5927 	mov	r6,dpl
      001D4E AF 83            [24] 5928 	mov	r7,dph
      001D50 90r00r2E         [24] 5929 	mov	dptr,#_count_address_65537_302
      001D53 EE               [12] 5930 	mov	a,r6
      001D54 F0               [24] 5931 	movx	@dptr,a
      001D55 EF               [12] 5932 	mov	a,r7
      001D56 A3               [24] 5933 	inc	dptr
      001D57 F0               [24] 5934 	movx	@dptr,a
                                   5935 ;	count.c:31: write('\n');
      001D58 75 82 0A         [24] 5936 	mov	dpl,#0x0a
      001D5B C0 07            [24] 5937 	push	ar7
      001D5D C0 06            [24] 5938 	push	ar6
      001D5F 12r0Br92         [24] 5939 	lcall	_write
                                   5940 ;	count.c:34: LCD_string_write("Enter block size:\n");
      001D62 90r05rAE         [24] 5941 	mov	dptr,#___str_14
      001D65 75 F0 80         [24] 5942 	mov	b,#0x80
      001D68 12r0Cr00         [24] 5943 	lcall	_LCD_string_write
                                   5944 ;	count.c:35: size = getByte();
      001D6B 12r10r7F         [24] 5945 	lcall	_getByte
      001D6E AD 82            [24] 5946 	mov	r5,dpl
                                   5947 ;	count.c:36: write('\n');
      001D70 75 82 0A         [24] 5948 	mov	dpl,#0x0a
      001D73 C0 05            [24] 5949 	push	ar5
      001D75 12r0Br92         [24] 5950 	lcall	_write
                                   5951 ;	count.c:39: LCD_string_write("Enter byte to count:\n");
      001D78 90r07r6C         [24] 5952 	mov	dptr,#___str_39
      001D7B 75 F0 80         [24] 5953 	mov	b,#0x80
      001D7E 12r0Cr00         [24] 5954 	lcall	_LCD_string_write
                                   5955 ;	count.c:40: key = getByte();
      001D81 12r10r7F         [24] 5956 	lcall	_getByte
      001D84 AC 82            [24] 5957 	mov	r4,dpl
      001D86 D0 05            [24] 5958 	pop	ar5
      001D88 D0 06            [24] 5959 	pop	ar6
      001D8A D0 07            [24] 5960 	pop	ar7
                                   5961 ;	count.c:43: for (i = 0; i < size; i++) {
      001D8C 7B 00            [12] 5962 	mov	r3,#0x00
      001D8E 79 00            [12] 5963 	mov	r1,#0x00
      001D90 7A 00            [12] 5964 	mov	r2,#0x00
      001D92                       5965 00129$:
      001D92 C0 06            [24] 5966 	push	ar6
      001D94 C0 07            [24] 5967 	push	ar7
      001D96 8D 00            [24] 5968 	mov	ar0,r5
      001D98 7F 00            [12] 5969 	mov	r7,#0x00
      001D9A C3               [12] 5970 	clr	c
      001D9B E9               [12] 5971 	mov	a,r1
      001D9C 98               [12] 5972 	subb	a,r0
      001D9D EA               [12] 5973 	mov	a,r2
      001D9E 9F               [12] 5974 	subb	a,r7
      001D9F D0 07            [24] 5975 	pop	ar7
      001DA1 D0 06            [24] 5976 	pop	ar6
      001DA3 50 26            [24] 5977 	jnc	00103$
                                   5978 ;	count.c:44: IOM = 0;
      001DA5 C0 05            [24] 5979 	push	ar5
                                   5980 ;	assignBit
      001DA7 C2 B4            [12] 5981 	clr	_P3_4
                                   5982 ;	count.c:45: ramAddress = (uint16_t __xdata*)(address + i);
      001DA9 E9               [12] 5983 	mov	a,r1
      001DAA 2E               [12] 5984 	add	a,r6
      001DAB F8               [12] 5985 	mov	r0,a
      001DAC EA               [12] 5986 	mov	a,r2
      001DAD 3F               [12] 5987 	addc	a,r7
      001DAE FD               [12] 5988 	mov	r5,a
      001DAF 88 82            [24] 5989 	mov	dpl,r0
      001DB1 8D 83            [24] 5990 	mov	dph,r5
                                   5991 ;	count.c:46: found = *ramAddress;
      001DB3 E0               [24] 5992 	movx	a,@dptr
      001DB4 FD               [12] 5993 	mov	r5,a
                                   5994 ;	count.c:47: IOM = 1;
                                   5995 ;	assignBit
      001DB5 D2 B4            [12] 5996 	setb	_P3_4
                                   5997 ;	count.c:49: if (found == key) {
      001DB7 ED               [12] 5998 	mov	a,r5
      001DB8 B5 04 02         [24] 5999 	cjne	a,ar4,00187$
      001DBB 80 04            [24] 6000 	sjmp	00188$
      001DBD                       6001 00187$:
      001DBD D0 05            [24] 6002 	pop	ar5
      001DBF 80 03            [24] 6003 	sjmp	00130$
      001DC1                       6004 00188$:
      001DC1 D0 05            [24] 6005 	pop	ar5
                                   6006 ;	count.c:50: n++;
      001DC3 0B               [12] 6007 	inc	r3
      001DC4                       6008 00130$:
                                   6009 ;	count.c:43: for (i = 0; i < size; i++) {
      001DC4 09               [12] 6010 	inc	r1
      001DC5 B9 00 CA         [24] 6011 	cjne	r1,#0x00,00129$
      001DC8 0A               [12] 6012 	inc	r2
      001DC9 80 C7            [24] 6013 	sjmp	00129$
      001DCB                       6014 00103$:
                                   6015 ;	count.c:55: if (n < NUM) {
      001DCB BB 0F 00         [24] 6016 	cjne	r3,#0x0f,00190$
      001DCE                       6017 00190$:
      001DCE 50 24            [24] 6018 	jnc	00105$
                                   6019 ;	count.c:56: printFind(address, n, key, index);
      001DD0 90r00r25         [24] 6020 	mov	dptr,#_printFind_PARM_2
      001DD3 EB               [12] 6021 	mov	a,r3
      001DD4 F0               [24] 6022 	movx	@dptr,a
      001DD5 90r00r26         [24] 6023 	mov	dptr,#_printFind_PARM_3
      001DD8 EC               [12] 6024 	mov	a,r4
      001DD9 F0               [24] 6025 	movx	@dptr,a
      001DDA 90r00r27         [24] 6026 	mov	dptr,#_printFind_PARM_4
      001DDD E4               [12] 6027 	clr	a
      001DDE F0               [24] 6028 	movx	@dptr,a
      001DDF 8E 82            [24] 6029 	mov	dpl,r6
      001DE1 8F 83            [24] 6030 	mov	dph,r7
      001DE3 C0 05            [24] 6031 	push	ar5
      001DE5 C0 04            [24] 6032 	push	ar4
      001DE7 C0 03            [24] 6033 	push	ar3
      001DE9 12r19r7F         [24] 6034 	lcall	_printFind
      001DEC D0 03            [24] 6035 	pop	ar3
      001DEE D0 04            [24] 6036 	pop	ar4
      001DF0 D0 05            [24] 6037 	pop	ar5
      001DF2 80 29            [24] 6038 	sjmp	00143$
      001DF4                       6039 00105$:
                                   6040 ;	count.c:58: printFind(address, NUM, key, index);
      001DF4 90r00r25         [24] 6041 	mov	dptr,#_printFind_PARM_2
      001DF7 74 0F            [12] 6042 	mov	a,#0x0f
      001DF9 F0               [24] 6043 	movx	@dptr,a
      001DFA 90r00r26         [24] 6044 	mov	dptr,#_printFind_PARM_3
      001DFD EC               [12] 6045 	mov	a,r4
      001DFE F0               [24] 6046 	movx	@dptr,a
      001DFF 90r00r27         [24] 6047 	mov	dptr,#_printFind_PARM_4
      001E02 E4               [12] 6048 	clr	a
      001E03 F0               [24] 6049 	movx	@dptr,a
      001E04 8E 82            [24] 6050 	mov	dpl,r6
      001E06 8F 83            [24] 6051 	mov	dph,r7
      001E08 C0 05            [24] 6052 	push	ar5
      001E0A C0 04            [24] 6053 	push	ar4
      001E0C C0 03            [24] 6054 	push	ar3
      001E0E 12r19r7F         [24] 6055 	lcall	_printFind
      001E11 D0 03            [24] 6056 	pop	ar3
      001E13 D0 04            [24] 6057 	pop	ar4
      001E15 D0 05            [24] 6058 	pop	ar5
                                   6059 ;	count.c:59: index += NUM;
      001E17 90r00r30         [24] 6060 	mov	dptr,#_count_index_65537_302
      001E1A 74 0F            [12] 6061 	mov	a,#0x0f
      001E1C F0               [24] 6062 	movx	@dptr,a
                                   6063 ;	count.c:62: do {
      001E1D                       6064 00143$:
      001E1D C3               [12] 6065 	clr	c
      001E1E 74 0F            [12] 6066 	mov	a,#0x0f
      001E20 9B               [12] 6067 	subb	a,r3
      001E21 E4               [12] 6068 	clr	a
      001E22 33               [12] 6069 	rlc	a
      001E23 F5*5D            [12] 6070 	mov	_count_sloc2_1_0,a
      001E25 8B F0            [24] 6071 	mov	b,r3
      001E27 ED               [12] 6072 	mov	a,r5
      001E28 84               [48] 6073 	div	ab
      001E29 F5*5B            [12] 6074 	mov	_count_sloc0_1_0,a
      001E2B 90r00r30         [24] 6075 	mov	dptr,#_count_index_65537_302
      001E2E E0               [24] 6076 	movx	a,@dptr
      001E2F FD               [12] 6077 	mov	r5,a
      001E30 FA               [12] 6078 	mov	r2,a
      001E31                       6079 00125$:
                                   6080 ;	count.c:63: if (page != ((n / NUM) + 1) && n > NUM) {
      001E31 C0 02            [24] 6081 	push	ar2
      001E33 8B 00            [24] 6082 	mov	ar0,r3
      001E35 79 00            [12] 6083 	mov	r1,#0x00
      001E37 75*00 0F         [24] 6084 	mov	__divsint_PARM_2,#0x0f
                                   6085 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      001E3A 89*01            [24] 6086 	mov	(__divsint_PARM_2 + 1),r1
      001E3C 88 82            [24] 6087 	mov	dpl,r0
      001E3E 89 83            [24] 6088 	mov	dph,r1
      001E40 C0 05            [24] 6089 	push	ar5
      001E42 C0 04            [24] 6090 	push	ar4
      001E44 C0 03            [24] 6091 	push	ar3
      001E46 C0 02            [24] 6092 	push	ar2
      001E48 12r00r00         [24] 6093 	lcall	__divsint
      001E4B E5 82            [12] 6094 	mov	a,dpl
      001E4D 85 83 F0         [24] 6095 	mov	b,dph
      001E50 D0 02            [24] 6096 	pop	ar2
      001E52 D0 03            [24] 6097 	pop	ar3
      001E54 D0 04            [24] 6098 	pop	ar4
      001E56 D0 05            [24] 6099 	pop	ar5
      001E58 24 01            [12] 6100 	add	a,#0x01
      001E5A F8               [12] 6101 	mov	r0,a
      001E5B E4               [12] 6102 	clr	a
      001E5C 35 F0            [12] 6103 	addc	a,b
      001E5E F9               [12] 6104 	mov	r1,a
      001E5F 90r00r31         [24] 6105 	mov	dptr,#_count_page_65537_302
      001E62 E0               [24] 6106 	movx	a,@dptr
      001E63 7E 00            [12] 6107 	mov	r6,#0x00
      001E65 B5 00 08         [24] 6108 	cjne	a,ar0,00192$
      001E68 EE               [12] 6109 	mov	a,r6
      001E69 B5 01 04         [24] 6110 	cjne	a,ar1,00192$
      001E6C D0 02            [24] 6111 	pop	ar2
      001E6E 80 22            [24] 6112 	sjmp	00112$
      001E70                       6113 00192$:
      001E70 D0 02            [24] 6114 	pop	ar2
      001E72 EB               [12] 6115 	mov	a,r3
      001E73 24 F0            [12] 6116 	add	a,#0xff - 0x0f
      001E75 50 1B            [24] 6117 	jnc	00112$
                                   6118 ;	count.c:64: LCD_string_write("Press B for next\n");
      001E77 90r05rC1         [24] 6119 	mov	dptr,#___str_15
      001E7A 75 F0 80         [24] 6120 	mov	b,#0x80
      001E7D C0 05            [24] 6121 	push	ar5
      001E7F C0 04            [24] 6122 	push	ar4
      001E81 C0 03            [24] 6123 	push	ar3
      001E83 C0 02            [24] 6124 	push	ar2
      001E85 12r0Cr00         [24] 6125 	lcall	_LCD_string_write
      001E88 D0 02            [24] 6126 	pop	ar2
      001E8A D0 03            [24] 6127 	pop	ar3
      001E8C D0 04            [24] 6128 	pop	ar4
      001E8E D0 05            [24] 6129 	pop	ar5
      001E90 80 42            [24] 6130 	sjmp	00113$
      001E92                       6131 00112$:
                                   6132 ;	count.c:65: } else if (page != 1 && n > NUM) {
      001E92 90r00r31         [24] 6133 	mov	dptr,#_count_page_65537_302
      001E95 E0               [24] 6134 	movx	a,@dptr
      001E96 FE               [12] 6135 	mov	r6,a
      001E97 BE 01 02         [24] 6136 	cjne	r6,#0x01,00194$
      001E9A 80 1F            [24] 6137 	sjmp	00108$
      001E9C                       6138 00194$:
      001E9C E5*5D            [12] 6139 	mov	a,_count_sloc2_1_0
      001E9E 60 1B            [24] 6140 	jz	00108$
                                   6141 ;	count.c:66: LCD_string_write("Press A for previous\n");
      001EA0 90r05rD3         [24] 6142 	mov	dptr,#___str_16
      001EA3 75 F0 80         [24] 6143 	mov	b,#0x80
      001EA6 C0 05            [24] 6144 	push	ar5
      001EA8 C0 04            [24] 6145 	push	ar4
      001EAA C0 03            [24] 6146 	push	ar3
      001EAC C0 02            [24] 6147 	push	ar2
      001EAE 12r0Cr00         [24] 6148 	lcall	_LCD_string_write
      001EB1 D0 02            [24] 6149 	pop	ar2
      001EB3 D0 03            [24] 6150 	pop	ar3
      001EB5 D0 04            [24] 6151 	pop	ar4
      001EB7 D0 05            [24] 6152 	pop	ar5
      001EB9 80 19            [24] 6153 	sjmp	00113$
      001EBB                       6154 00108$:
                                   6155 ;	count.c:68: LCD_string_write("Press A for previous, B for next\n");
      001EBB 90r05rE9         [24] 6156 	mov	dptr,#___str_17
      001EBE 75 F0 80         [24] 6157 	mov	b,#0x80
      001EC1 C0 05            [24] 6158 	push	ar5
      001EC3 C0 04            [24] 6159 	push	ar4
      001EC5 C0 03            [24] 6160 	push	ar3
      001EC7 C0 02            [24] 6161 	push	ar2
      001EC9 12r0Cr00         [24] 6162 	lcall	_LCD_string_write
      001ECC D0 02            [24] 6163 	pop	ar2
      001ECE D0 03            [24] 6164 	pop	ar3
      001ED0 D0 04            [24] 6165 	pop	ar4
      001ED2 D0 05            [24] 6166 	pop	ar5
      001ED4                       6167 00113$:
                                   6168 ;	count.c:71: LCD_string_write("Press 1 for menu\n");
      001ED4 90r06r0B         [24] 6169 	mov	dptr,#___str_18
      001ED7 75 F0 80         [24] 6170 	mov	b,#0x80
      001EDA C0 05            [24] 6171 	push	ar5
      001EDC C0 04            [24] 6172 	push	ar4
      001EDE C0 03            [24] 6173 	push	ar3
      001EE0 C0 02            [24] 6174 	push	ar2
      001EE2 12r0Cr00         [24] 6175 	lcall	_LCD_string_write
                                   6176 ;	count.c:73: input = keyDetect();
      001EE5 12r0Cr99         [24] 6177 	lcall	_keyDetect
      001EE8 AE 82            [24] 6178 	mov	r6,dpl
      001EEA D0 02            [24] 6179 	pop	ar2
      001EEC D0 03            [24] 6180 	pop	ar3
      001EEE D0 04            [24] 6181 	pop	ar4
      001EF0 D0 05            [24] 6182 	pop	ar5
                                   6183 ;	count.c:76: if (input == 'B' && page != ((size / n) + 1)) {		// next
      001EF2 BE 42 73         [24] 6184 	cjne	r6,#0x42,00122$
      001EF5 C0 02            [24] 6185 	push	ar2
      001EF7 A8*5B            [24] 6186 	mov	r0,_count_sloc0_1_0
      001EF9 79 00            [12] 6187 	mov	r1,#0x00
      001EFB 08               [12] 6188 	inc	r0
      001EFC B8 00 01         [24] 6189 	cjne	r0,#0x00,00198$
      001EFF 09               [12] 6190 	inc	r1
      001F00                       6191 00198$:
      001F00 90r00r31         [24] 6192 	mov	dptr,#_count_page_65537_302
      001F03 E0               [24] 6193 	movx	a,@dptr
      001F04 F5*5C            [12] 6194 	mov	_count_sloc1_1_0,a
      001F06 AA*5C            [24] 6195 	mov	r2,_count_sloc1_1_0
      001F08 7F 00            [12] 6196 	mov	r7,#0x00
      001F0A EA               [12] 6197 	mov	a,r2
      001F0B B5 00 08         [24] 6198 	cjne	a,ar0,00199$
      001F0E EF               [12] 6199 	mov	a,r7
      001F0F B5 01 04         [24] 6200 	cjne	a,ar1,00199$
      001F12 D0 02            [24] 6201 	pop	ar2
      001F14 80 52            [24] 6202 	sjmp	00122$
      001F16                       6203 00199$:
      001F16 D0 02            [24] 6204 	pop	ar2
                                   6205 ;	count.c:77: address += NUM;
      001F18 90r00r2E         [24] 6206 	mov	dptr,#_count_address_65537_302
      001F1B E0               [24] 6207 	movx	a,@dptr
      001F1C F9               [12] 6208 	mov	r1,a
      001F1D A3               [24] 6209 	inc	dptr
      001F1E E0               [24] 6210 	movx	a,@dptr
      001F1F FF               [12] 6211 	mov	r7,a
      001F20 74 0F            [12] 6212 	mov	a,#0x0f
      001F22 29               [12] 6213 	add	a,r1
      001F23 F9               [12] 6214 	mov	r1,a
      001F24 E4               [12] 6215 	clr	a
      001F25 3F               [12] 6216 	addc	a,r7
      001F26 FF               [12] 6217 	mov	r7,a
      001F27 90r00r2E         [24] 6218 	mov	dptr,#_count_address_65537_302
      001F2A E9               [12] 6219 	mov	a,r1
      001F2B F0               [24] 6220 	movx	@dptr,a
      001F2C EF               [12] 6221 	mov	a,r7
      001F2D A3               [24] 6222 	inc	dptr
      001F2E F0               [24] 6223 	movx	@dptr,a
                                   6224 ;	count.c:78: printFind(address, NUM, key, index);
      001F2F 90r00r2E         [24] 6225 	mov	dptr,#_count_address_65537_302
      001F32 E0               [24] 6226 	movx	a,@dptr
      001F33 F9               [12] 6227 	mov	r1,a
      001F34 A3               [24] 6228 	inc	dptr
      001F35 E0               [24] 6229 	movx	a,@dptr
      001F36 FF               [12] 6230 	mov	r7,a
      001F37 90r00r25         [24] 6231 	mov	dptr,#_printFind_PARM_2
      001F3A 74 0F            [12] 6232 	mov	a,#0x0f
      001F3C F0               [24] 6233 	movx	@dptr,a
      001F3D 90r00r26         [24] 6234 	mov	dptr,#_printFind_PARM_3
      001F40 EC               [12] 6235 	mov	a,r4
      001F41 F0               [24] 6236 	movx	@dptr,a
      001F42 90r00r27         [24] 6237 	mov	dptr,#_printFind_PARM_4
      001F45 ED               [12] 6238 	mov	a,r5
      001F46 F0               [24] 6239 	movx	@dptr,a
      001F47 89 82            [24] 6240 	mov	dpl,r1
      001F49 8F 83            [24] 6241 	mov	dph,r7
      001F4B C0 05            [24] 6242 	push	ar5
      001F4D C0 04            [24] 6243 	push	ar4
      001F4F C0 03            [24] 6244 	push	ar3
      001F51 C0 02            [24] 6245 	push	ar2
      001F53 12r19r7F         [24] 6246 	lcall	_printFind
      001F56 D0 02            [24] 6247 	pop	ar2
      001F58 D0 03            [24] 6248 	pop	ar3
      001F5A D0 04            [24] 6249 	pop	ar4
      001F5C D0 05            [24] 6250 	pop	ar5
                                   6251 ;	count.c:79: page++;
      001F5E 90r00r31         [24] 6252 	mov	dptr,#_count_page_65537_302
      001F61 E5*5C            [12] 6253 	mov	a,_count_sloc1_1_0
      001F63 04               [12] 6254 	inc	a
      001F64 F0               [24] 6255 	movx	@dptr,a
      001F65 02r1Er31         [24] 6256 	ljmp	00125$
      001F68                       6257 00122$:
                                   6258 ;	count.c:80: } else if (input == 'A' && page != 1) {				// previous
      001F68 BE 41 5E         [24] 6259 	cjne	r6,#0x41,00118$
      001F6B 90r00r31         [24] 6260 	mov	dptr,#_count_page_65537_302
      001F6E E0               [24] 6261 	movx	a,@dptr
      001F6F FF               [12] 6262 	mov	r7,a
      001F70 BF 01 02         [24] 6263 	cjne	r7,#0x01,00202$
      001F73 80 54            [24] 6264 	sjmp	00118$
      001F75                       6265 00202$:
                                   6266 ;	count.c:81: address -= NUM;
      001F75 90r00r2E         [24] 6267 	mov	dptr,#_count_address_65537_302
      001F78 E0               [24] 6268 	movx	a,@dptr
      001F79 F8               [12] 6269 	mov	r0,a
      001F7A A3               [24] 6270 	inc	dptr
      001F7B E0               [24] 6271 	movx	a,@dptr
      001F7C F9               [12] 6272 	mov	r1,a
      001F7D E8               [12] 6273 	mov	a,r0
      001F7E 24 F1            [12] 6274 	add	a,#0xf1
      001F80 F8               [12] 6275 	mov	r0,a
      001F81 E9               [12] 6276 	mov	a,r1
      001F82 34 FF            [12] 6277 	addc	a,#0xff
      001F84 F9               [12] 6278 	mov	r1,a
      001F85 90r00r2E         [24] 6279 	mov	dptr,#_count_address_65537_302
      001F88 E8               [12] 6280 	mov	a,r0
      001F89 F0               [24] 6281 	movx	@dptr,a
      001F8A E9               [12] 6282 	mov	a,r1
      001F8B A3               [24] 6283 	inc	dptr
      001F8C F0               [24] 6284 	movx	@dptr,a
                                   6285 ;	count.c:82: printFind(address, NUM, key, index);
      001F8D 90r00r2E         [24] 6286 	mov	dptr,#_count_address_65537_302
      001F90 E0               [24] 6287 	movx	a,@dptr
      001F91 F8               [12] 6288 	mov	r0,a
      001F92 A3               [24] 6289 	inc	dptr
      001F93 E0               [24] 6290 	movx	a,@dptr
      001F94 F9               [12] 6291 	mov	r1,a
      001F95 90r00r25         [24] 6292 	mov	dptr,#_printFind_PARM_2
      001F98 74 0F            [12] 6293 	mov	a,#0x0f
      001F9A F0               [24] 6294 	movx	@dptr,a
      001F9B 90r00r26         [24] 6295 	mov	dptr,#_printFind_PARM_3
      001F9E EC               [12] 6296 	mov	a,r4
      001F9F F0               [24] 6297 	movx	@dptr,a
      001FA0 90r00r27         [24] 6298 	mov	dptr,#_printFind_PARM_4
      001FA3 EA               [12] 6299 	mov	a,r2
      001FA4 F0               [24] 6300 	movx	@dptr,a
      001FA5 88 82            [24] 6301 	mov	dpl,r0
      001FA7 89 83            [24] 6302 	mov	dph,r1
      001FA9 C0 07            [24] 6303 	push	ar7
      001FAB C0 05            [24] 6304 	push	ar5
      001FAD C0 04            [24] 6305 	push	ar4
      001FAF C0 03            [24] 6306 	push	ar3
      001FB1 C0 02            [24] 6307 	push	ar2
      001FB3 12r19r7F         [24] 6308 	lcall	_printFind
      001FB6 D0 02            [24] 6309 	pop	ar2
      001FB8 D0 03            [24] 6310 	pop	ar3
      001FBA D0 04            [24] 6311 	pop	ar4
      001FBC D0 05            [24] 6312 	pop	ar5
      001FBE D0 07            [24] 6313 	pop	ar7
                                   6314 ;	count.c:83: page--;
      001FC0 EF               [12] 6315 	mov	a,r7
      001FC1 14               [12] 6316 	dec	a
      001FC2 90r00r31         [24] 6317 	mov	dptr,#_count_page_65537_302
      001FC5 F0               [24] 6318 	movx	@dptr,a
      001FC6 02r1Er31         [24] 6319 	ljmp	00125$
      001FC9                       6320 00118$:
                                   6321 ;	count.c:84: } else if (input == '1') {							// main menu
      001FC9 BE 31 01         [24] 6322 	cjne	r6,#0x31,00203$
      001FCC 22               [24] 6323 	ret
      001FCD                       6324 00203$:
      001FCD 02r1Er31         [24] 6325 	ljmp	00125$
                                   6326 ;	count.c:90: } while(1);
                                   6327 ;	count.c:92: }
      001FD0 22               [24] 6328 	ret
                                   6329 ;------------------------------------------------------------
                                   6330 ;Allocation info for local variables in function 'readTemp'
                                   6331 ;------------------------------------------------------------
                                   6332 ;val                       Allocated with name '_readTemp_val_65536_315'
                                   6333 ;address                   Allocated to registers 
                                   6334 ;------------------------------------------------------------
                                   6335 ;	analog.c:6: uint8_t readTemp() {
                                   6336 ;	-----------------------------------------
                                   6337 ;	 function readTemp
                                   6338 ;	-----------------------------------------
      001FD1                       6339 _readTemp:
                                   6340 ;	analog.c:9: IOM = 1;
                                   6341 ;	assignBit
      001FD1 D2 B4            [12] 6342 	setb	_P3_4
                                   6343 ;	analog.c:10: address = (uint16_t __xdata*)(temp_address);
      001FD3 85*06 82         [24] 6344 	mov	dpl,_temp_address
      001FD6 85*07 83         [24] 6345 	mov	dph,(_temp_address + 1)
                                   6346 ;	analog.c:11: val = *address;
      001FD9 E0               [24] 6347 	movx	a,@dptr
      001FDA FF               [12] 6348 	mov	r7,a
                                   6349 ;	analog.c:12: IOM = 0;
                                   6350 ;	assignBit
      001FDB C2 B4            [12] 6351 	clr	_P3_4
                                   6352 ;	analog.c:13: return val;
      001FDD 8F 82            [24] 6353 	mov	dpl,r7
                                   6354 ;	analog.c:14: }
      001FDF 22               [24] 6355 	ret
                                   6356 ;------------------------------------------------------------
                                   6357 ;Allocation info for local variables in function 'readLight'
                                   6358 ;------------------------------------------------------------
                                   6359 ;val                       Allocated with name '_readLight_val_65536_316'
                                   6360 ;address                   Allocated to registers 
                                   6361 ;------------------------------------------------------------
                                   6362 ;	analog.c:21: uint8_t readLight() {
                                   6363 ;	-----------------------------------------
                                   6364 ;	 function readLight
                                   6365 ;	-----------------------------------------
      001FE0                       6366 _readLight:
                                   6367 ;	analog.c:24: IOM = 1;
                                   6368 ;	assignBit
      001FE0 D2 B4            [12] 6369 	setb	_P3_4
                                   6370 ;	analog.c:25: address = (uint16_t __xdata*)(light_address);
      001FE2 85*08 82         [24] 6371 	mov	dpl,_light_address
      001FE5 85*09 83         [24] 6372 	mov	dph,(_light_address + 1)
                                   6373 ;	analog.c:26: val = *address;
      001FE8 E0               [24] 6374 	movx	a,@dptr
      001FE9 FF               [12] 6375 	mov	r7,a
                                   6376 ;	analog.c:27: IOM = 0;
                                   6377 ;	assignBit
      001FEA C2 B4            [12] 6378 	clr	_P3_4
                                   6379 ;	analog.c:28: return val;
      001FEC 8F 82            [24] 6380 	mov	dpl,r7
                                   6381 ;	analog.c:29: }
      001FEE 22               [24] 6382 	ret
                                   6383 ;------------------------------------------------------------
                                   6384 ;Allocation info for local variables in function 'displayTemp'
                                   6385 ;------------------------------------------------------------
                                   6386 ;t                         Allocated to registers r7 
                                   6387 ;------------------------------------------------------------
                                   6388 ;	analog.c:36: void displayTemp(uint8_t t) {
                                   6389 ;	-----------------------------------------
                                   6390 ;	 function displayTemp
                                   6391 ;	-----------------------------------------
      001FEF                       6392 _displayTemp:
      001FEF AF 82            [24] 6393 	mov	r7,dpl
                                   6394 ;	analog.c:38: fillScreen(GRAY);
      001FF1 90 D6 BA         [24] 6395 	mov	dptr,#0xd6ba
      001FF4 C0 07            [24] 6396 	push	ar7
      001FF6 12r07rF9         [24] 6397 	lcall	_fillScreen
                                   6398 ;	analog.c:39: setCursor(0, 0);
      001FF9 E4               [12] 6399 	clr	a
      001FFA F5*00            [12] 6400 	mov	_setCursor_PARM_2,a
      001FFC F5*01            [12] 6401 	mov	(_setCursor_PARM_2 + 1),a
      001FFE 90 00 00         [24] 6402 	mov	dptr,#0x0000
      002001 12r00rA5         [24] 6403 	lcall	_setCursor
                                   6404 ;	analog.c:40: setTextSize(2);
      002004 75 82 02         [24] 6405 	mov	dpl,#0x02
      002007 12r00rBF         [24] 6406 	lcall	_setTextSize
                                   6407 ;	analog.c:42: LCD_string_write("Temperature: ");
      00200A 90r07r82         [24] 6408 	mov	dptr,#___str_40
      00200D 75 F0 80         [24] 6409 	mov	b,#0x80
      002010 12r0Cr00         [24] 6410 	lcall	_LCD_string_write
      002013 D0 07            [24] 6411 	pop	ar7
                                   6412 ;	analog.c:44: asciiToHex(t);
      002015 8F 82            [24] 6413 	mov	dpl,r7
      002017 12r0Er77         [24] 6414 	lcall	_asciiToHex
                                   6415 ;	analog.c:46: write('\n');
      00201A 75 82 0A         [24] 6416 	mov	dpl,#0x0a
      00201D 12r0Br92         [24] 6417 	lcall	_write
                                   6418 ;	analog.c:47: LCD_string_write("Press 0 for menu\n");
      002020 90r07r90         [24] 6419 	mov	dptr,#___str_41
      002023 75 F0 80         [24] 6420 	mov	b,#0x80
      002026 12r0Cr00         [24] 6421 	lcall	_LCD_string_write
                                   6422 ;	analog.c:48: LCD_string_write("Press any key to refresh\n");
      002029 90r07rA2         [24] 6423 	mov	dptr,#___str_42
      00202C 75 F0 80         [24] 6424 	mov	b,#0x80
                                   6425 ;	analog.c:49: }
      00202F 02r0Cr00         [24] 6426 	ljmp	_LCD_string_write
                                   6427 ;------------------------------------------------------------
                                   6428 ;Allocation info for local variables in function 'displayLight'
                                   6429 ;------------------------------------------------------------
                                   6430 ;l                         Allocated to registers r7 
                                   6431 ;------------------------------------------------------------
                                   6432 ;	analog.c:56: void displayLight(uint8_t l) {
                                   6433 ;	-----------------------------------------
                                   6434 ;	 function displayLight
                                   6435 ;	-----------------------------------------
      002032                       6436 _displayLight:
      002032 AF 82            [24] 6437 	mov	r7,dpl
                                   6438 ;	analog.c:58: fillScreen(GRAY);
      002034 90 D6 BA         [24] 6439 	mov	dptr,#0xd6ba
      002037 C0 07            [24] 6440 	push	ar7
      002039 12r07rF9         [24] 6441 	lcall	_fillScreen
                                   6442 ;	analog.c:59: setCursor(0, 0);
      00203C E4               [12] 6443 	clr	a
      00203D F5*00            [12] 6444 	mov	_setCursor_PARM_2,a
      00203F F5*01            [12] 6445 	mov	(_setCursor_PARM_2 + 1),a
      002041 90 00 00         [24] 6446 	mov	dptr,#0x0000
      002044 12r00rA5         [24] 6447 	lcall	_setCursor
                                   6448 ;	analog.c:60: setTextSize(2);
      002047 75 82 02         [24] 6449 	mov	dpl,#0x02
      00204A 12r00rBF         [24] 6450 	lcall	_setTextSize
                                   6451 ;	analog.c:62: LCD_string_write("Light level: ");
      00204D 90r07rBC         [24] 6452 	mov	dptr,#___str_43
      002050 75 F0 80         [24] 6453 	mov	b,#0x80
      002053 12r0Cr00         [24] 6454 	lcall	_LCD_string_write
      002056 D0 07            [24] 6455 	pop	ar7
                                   6456 ;	analog.c:64: asciiToHex(l);
      002058 8F 82            [24] 6457 	mov	dpl,r7
      00205A 12r0Er77         [24] 6458 	lcall	_asciiToHex
                                   6459 ;	analog.c:66: write('\n');
      00205D 75 82 0A         [24] 6460 	mov	dpl,#0x0a
      002060 12r0Br92         [24] 6461 	lcall	_write
                                   6462 ;	analog.c:67: LCD_string_write("Press 0 for menu\n");
      002063 90r07r90         [24] 6463 	mov	dptr,#___str_41
      002066 75 F0 80         [24] 6464 	mov	b,#0x80
      002069 12r0Cr00         [24] 6465 	lcall	_LCD_string_write
                                   6466 ;	analog.c:68: LCD_string_write("Press any key to refresh\n");
      00206C 90r07rA2         [24] 6467 	mov	dptr,#___str_42
      00206F 75 F0 80         [24] 6468 	mov	b,#0x80
                                   6469 ;	analog.c:69: }
      002072 02r0Cr00         [24] 6470 	ljmp	_LCD_string_write
                                   6471 ;------------------------------------------------------------
                                   6472 ;Allocation info for local variables in function 'temperature'
                                   6473 ;------------------------------------------------------------
                                   6474 ;temp                      Allocated with name '_temperature_temp_65537_322'
                                   6475 ;input                     Allocated with name '_temperature_input_65537_322'
                                   6476 ;------------------------------------------------------------
                                   6477 ;	analog.c:76: void temperature() {
                                   6478 ;	-----------------------------------------
                                   6479 ;	 function temperature
                                   6480 ;	-----------------------------------------
      002075                       6481 _temperature:
                                   6482 ;	analog.c:78: fillScreen(GRAY);
      002075 90 D6 BA         [24] 6483 	mov	dptr,#0xd6ba
      002078 12r07rF9         [24] 6484 	lcall	_fillScreen
                                   6485 ;	analog.c:79: setCursor(0, 0);
      00207B E4               [12] 6486 	clr	a
      00207C F5*00            [12] 6487 	mov	_setCursor_PARM_2,a
      00207E F5*01            [12] 6488 	mov	(_setCursor_PARM_2 + 1),a
      002080 90 00 00         [24] 6489 	mov	dptr,#0x0000
      002083 12r00rA5         [24] 6490 	lcall	_setCursor
                                   6491 ;	analog.c:80: setTextSize(2);
      002086 75 82 02         [24] 6492 	mov	dpl,#0x02
      002089 12r00rBF         [24] 6493 	lcall	_setTextSize
                                   6494 ;	analog.c:82: LCD_string_write("Temperature: ");
      00208C 90r07r82         [24] 6495 	mov	dptr,#___str_40
      00208F 75 F0 80         [24] 6496 	mov	b,#0x80
      002092 12r0Cr00         [24] 6497 	lcall	_LCD_string_write
                                   6498 ;	analog.c:88: temp = readTemp();
      002095 12r1FrD1         [24] 6499 	lcall	_readTemp
                                   6500 ;	analog.c:91: asciiToHex(temp);
      002098 12r0Er77         [24] 6501 	lcall	_asciiToHex
                                   6502 ;	analog.c:94: write('\n');
      00209B 75 82 0A         [24] 6503 	mov	dpl,#0x0a
      00209E 12r0Br92         [24] 6504 	lcall	_write
                                   6505 ;	analog.c:95: LCD_string_write("Press 0 for menu\n");
      0020A1 90r07r90         [24] 6506 	mov	dptr,#___str_41
      0020A4 75 F0 80         [24] 6507 	mov	b,#0x80
      0020A7 12r0Cr00         [24] 6508 	lcall	_LCD_string_write
                                   6509 ;	analog.c:96: LCD_string_write("Press any key to refresh\n");
      0020AA 90r07rA2         [24] 6510 	mov	dptr,#___str_42
      0020AD 75 F0 80         [24] 6511 	mov	b,#0x80
      0020B0 12r0Cr00         [24] 6512 	lcall	_LCD_string_write
                                   6513 ;	analog.c:99: while (1) {
      0020B3                       6514 00104$:
                                   6515 ;	analog.c:100: input = keyDetect();
      0020B3 12r0Cr99         [24] 6516 	lcall	_keyDetect
      0020B6 AF 82            [24] 6517 	mov	r7,dpl
                                   6518 ;	analog.c:102: if (input == '0') break;
      0020B8 BF 30 01         [24] 6519 	cjne	r7,#0x30,00116$
      0020BB 22               [24] 6520 	ret
      0020BC                       6521 00116$:
                                   6522 ;	analog.c:104: delay(500);
      0020BC 90 01 F4         [24] 6523 	mov	dptr,#0x01f4
      0020BF 12r00r10         [24] 6524 	lcall	_delay
                                   6525 ;	analog.c:105: temp = readTemp();
      0020C2 12r1FrD1         [24] 6526 	lcall	_readTemp
                                   6527 ;	analog.c:106: displayTemp(temp);
      0020C5 12r1FrEF         [24] 6528 	lcall	_displayTemp
                                   6529 ;	analog.c:108: }
      0020C8 80 E9            [24] 6530 	sjmp	00104$
                                   6531 ;------------------------------------------------------------
                                   6532 ;Allocation info for local variables in function 'light'
                                   6533 ;------------------------------------------------------------
                                   6534 ;light                     Allocated with name '_light_light_65537_325'
                                   6535 ;input                     Allocated with name '_light_input_65537_325'
                                   6536 ;------------------------------------------------------------
                                   6537 ;	analog.c:115: void light() {
                                   6538 ;	-----------------------------------------
                                   6539 ;	 function light
                                   6540 ;	-----------------------------------------
      0020CA                       6541 _light:
                                   6542 ;	analog.c:117: fillScreen(GRAY);
      0020CA 90 D6 BA         [24] 6543 	mov	dptr,#0xd6ba
      0020CD 12r07rF9         [24] 6544 	lcall	_fillScreen
                                   6545 ;	analog.c:118: setCursor(0, 0);
      0020D0 E4               [12] 6546 	clr	a
      0020D1 F5*00            [12] 6547 	mov	_setCursor_PARM_2,a
      0020D3 F5*01            [12] 6548 	mov	(_setCursor_PARM_2 + 1),a
      0020D5 90 00 00         [24] 6549 	mov	dptr,#0x0000
      0020D8 12r00rA5         [24] 6550 	lcall	_setCursor
                                   6551 ;	analog.c:119: setTextSize(2);
      0020DB 75 82 02         [24] 6552 	mov	dpl,#0x02
      0020DE 12r00rBF         [24] 6553 	lcall	_setTextSize
                                   6554 ;	analog.c:121: LCD_string_write("Light level: ");
      0020E1 90r07rBC         [24] 6555 	mov	dptr,#___str_43
      0020E4 75 F0 80         [24] 6556 	mov	b,#0x80
      0020E7 12r0Cr00         [24] 6557 	lcall	_LCD_string_write
                                   6558 ;	analog.c:127: light = readLight();
      0020EA 12r1FrE0         [24] 6559 	lcall	_readLight
                                   6560 ;	analog.c:130: asciiToHex(light);
      0020ED 12r0Er77         [24] 6561 	lcall	_asciiToHex
                                   6562 ;	analog.c:133: write('\n');
      0020F0 75 82 0A         [24] 6563 	mov	dpl,#0x0a
      0020F3 12r0Br92         [24] 6564 	lcall	_write
                                   6565 ;	analog.c:134: LCD_string_write("Press 0 for menu\n");
      0020F6 90r07r90         [24] 6566 	mov	dptr,#___str_41
      0020F9 75 F0 80         [24] 6567 	mov	b,#0x80
      0020FC 12r0Cr00         [24] 6568 	lcall	_LCD_string_write
                                   6569 ;	analog.c:135: LCD_string_write("Press any key to refresh\n");
      0020FF 90r07rA2         [24] 6570 	mov	dptr,#___str_42
      002102 75 F0 80         [24] 6571 	mov	b,#0x80
      002105 12r0Cr00         [24] 6572 	lcall	_LCD_string_write
                                   6573 ;	analog.c:138: while (1) {
      002108                       6574 00104$:
                                   6575 ;	analog.c:139: input = keyDetect();
      002108 12r0Cr99         [24] 6576 	lcall	_keyDetect
      00210B AF 82            [24] 6577 	mov	r7,dpl
                                   6578 ;	analog.c:141: if (input == '0') break;
      00210D BF 30 01         [24] 6579 	cjne	r7,#0x30,00116$
      002110 22               [24] 6580 	ret
      002111                       6581 00116$:
                                   6582 ;	analog.c:143: delay(500);
      002111 90 01 F4         [24] 6583 	mov	dptr,#0x01f4
      002114 12r00r10         [24] 6584 	lcall	_delay
                                   6585 ;	analog.c:144: light = readLight();
      002117 12r1FrE0         [24] 6586 	lcall	_readLight
                                   6587 ;	analog.c:145: displayLight(light);
      00211A 12r20r32         [24] 6588 	lcall	_displayLight
                                   6589 ;	analog.c:147: }
      00211D 80 E9            [24] 6590 	sjmp	00104$
                                   6591 ;------------------------------------------------------------
                                   6592 ;Allocation info for local variables in function 'menu'
                                   6593 ;------------------------------------------------------------
                                   6594 ;	main.c:30: void menu(void) {
                                   6595 ;	-----------------------------------------
                                   6596 ;	 function menu
                                   6597 ;	-----------------------------------------
      00211F                       6598 _menu:
                                   6599 ;	main.c:32: setRotation(2);
      00211F 75 82 02         [24] 6600 	mov	dpl,#0x02
      002122 12r00rD7         [24] 6601 	lcall	_setRotation
                                   6602 ;	main.c:33: setTextSize(3);
      002125 75 82 03         [24] 6603 	mov	dpl,#0x03
      002128 12r00rBF         [24] 6604 	lcall	_setTextSize
                                   6605 ;	main.c:34: fillScreen(GRAY);
      00212B 90 D6 BA         [24] 6606 	mov	dptr,#0xd6ba
      00212E 12r07rF9         [24] 6607 	lcall	_fillScreen
                                   6608 ;	main.c:35: setTextColor(BLACK, GRAY);
      002131 75*00 BA         [24] 6609 	mov	_setTextColor_PARM_2,#0xba
      002134 75*01 D6         [24] 6610 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      002137 90 00 00         [24] 6611 	mov	dptr,#0x0000
      00213A 12r00rB2         [24] 6612 	lcall	_setTextColor
                                   6613 ;	main.c:36: setCursor(0, 0);
      00213D E4               [12] 6614 	clr	a
      00213E F5*00            [12] 6615 	mov	_setCursor_PARM_2,a
      002140 F5*01            [12] 6616 	mov	(_setCursor_PARM_2 + 1),a
      002142 90 00 00         [24] 6617 	mov	dptr,#0x0000
      002145 12r00rA5         [24] 6618 	lcall	_setCursor
                                   6619 ;	main.c:39: LCD_string_write("Brandon Cline\n");
      002148 90r07rCA         [24] 6620 	mov	dptr,#___str_44
      00214B 75 F0 80         [24] 6621 	mov	b,#0x80
      00214E 12r0Cr00         [24] 6622 	lcall	_LCD_string_write
                                   6623 ;	main.c:40: LCD_string_write("ECEN 4330\n");
      002151 90r07rD9         [24] 6624 	mov	dptr,#___str_45
      002154 75 F0 80         [24] 6625 	mov	b,#0x80
      002157 12r0Cr00         [24] 6626 	lcall	_LCD_string_write
                                   6627 ;	main.c:44: LCD_string_write("1: Basic check\n");
      00215A 90r07rE4         [24] 6628 	mov	dptr,#___str_46
      00215D 75 F0 80         [24] 6629 	mov	b,#0x80
      002160 12r0Cr00         [24] 6630 	lcall	_LCD_string_write
                                   6631 ;	main.c:46: LCD_string_write("2: Dump\n");
      002163 90r07rF4         [24] 6632 	mov	dptr,#___str_47
      002166 75 F0 80         [24] 6633 	mov	b,#0x80
      002169 12r0Cr00         [24] 6634 	lcall	_LCD_string_write
                                   6635 ;	main.c:48: LCD_string_write("3: Check\n");
      00216C 90r07rFD         [24] 6636 	mov	dptr,#___str_48
      00216F 75 F0 80         [24] 6637 	mov	b,#0x80
      002172 12r0Cr00         [24] 6638 	lcall	_LCD_string_write
                                   6639 ;	main.c:50: LCD_string_write("A: Move\n");
      002175 90r08r07         [24] 6640 	mov	dptr,#___str_49
      002178 75 F0 80         [24] 6641 	mov	b,#0x80
      00217B 12r0Cr00         [24] 6642 	lcall	_LCD_string_write
                                   6643 ;	main.c:52: LCD_string_write("4: Edit\n");
      00217E 90r08r10         [24] 6644 	mov	dptr,#___str_50
      002181 75 F0 80         [24] 6645 	mov	b,#0x80
      002184 12r0Cr00         [24] 6646 	lcall	_LCD_string_write
                                   6647 ;	main.c:54: LCD_string_write("5: Find\n");
      002187 90r08r19         [24] 6648 	mov	dptr,#___str_51
      00218A 75 F0 80         [24] 6649 	mov	b,#0x80
      00218D 12r0Cr00         [24] 6650 	lcall	_LCD_string_write
                                   6651 ;	main.c:56: LCD_string_write("6: Count\n");
      002190 90r08r22         [24] 6652 	mov	dptr,#___str_52
      002193 75 F0 80         [24] 6653 	mov	b,#0x80
      002196 12r0Cr00         [24] 6654 	lcall	_LCD_string_write
                                   6655 ;	main.c:59: LCD_string_write("B: Temperature\n");
      002199 90r08r2C         [24] 6656 	mov	dptr,#___str_53
      00219C 75 F0 80         [24] 6657 	mov	b,#0x80
      00219F 12r0Cr00         [24] 6658 	lcall	_LCD_string_write
                                   6659 ;	main.c:61: LCD_string_write("7: Light\n");
      0021A2 90r08r3C         [24] 6660 	mov	dptr,#___str_54
      0021A5 75 F0 80         [24] 6661 	mov	b,#0x80
                                   6662 ;	main.c:62: }
      0021A8 02r0Cr00         [24] 6663 	ljmp	_LCD_string_write
                                   6664 ;------------------------------------------------------------
                                   6665 ;Allocation info for local variables in function 'main'
                                   6666 ;------------------------------------------------------------
                                   6667 ;input                     Allocated with name '_main_input_65536_330'
                                   6668 ;------------------------------------------------------------
                                   6669 ;	main.c:64: void main(void) {
                                   6670 ;	-----------------------------------------
                                   6671 ;	 function main
                                   6672 ;	-----------------------------------------
      0021AB                       6673 _main:
                                   6674 ;	main.c:69: iowrite8(seg7_address, 0x00);
      0021AB 75*00 00         [24] 6675 	mov	_iowrite8_PARM_2,#0x00
      0021AE 85*04 82         [24] 6676 	mov	dpl,_seg7_address
      0021B1 85*05 83         [24] 6677 	mov	dph,(_seg7_address + 1)
      0021B4 12r00r00         [24] 6678 	lcall	_iowrite8
                                   6679 ;	main.c:72: TFT_LCD_INIT();
      0021B7 12r01rDD         [24] 6680 	lcall	_TFT_LCD_INIT
                                   6681 ;	main.c:74: fillScreen(BLACK);
      0021BA 90 00 00         [24] 6682 	mov	dptr,#0x0000
      0021BD 12r07rF9         [24] 6683 	lcall	_fillScreen
                                   6684 ;	main.c:75: setRotation(0);
      0021C0 75 82 00         [24] 6685 	mov	dpl,#0x00
      0021C3 12r00rD7         [24] 6686 	lcall	_setRotation
                                   6687 ;	main.c:76: testCircles(20, BLUE);
      0021C6 75*30 1F         [24] 6688 	mov	_testCircles_PARM_2,#0x1f
      0021C9 75*31 00         [24] 6689 	mov	(_testCircles_PARM_2 + 1),#0x00
      0021CC 75 82 14         [24] 6690 	mov	dpl,#0x14
      0021CF 12r06r5A         [24] 6691 	lcall	_testCircles
                                   6692 ;	main.c:80: while (1) {
      0021D2                       6693 00113$:
                                   6694 ;	main.c:82: menu();
      0021D2 12r21r1F         [24] 6695 	lcall	_menu
                                   6696 ;	main.c:85: input = keyDetect();
      0021D5 12r0Cr99         [24] 6697 	lcall	_keyDetect
                                   6698 ;	main.c:86: asciiToHex(input);
      0021D8 AF 82            [24] 6699 	mov  r7,dpl
      0021DA C0 07            [24] 6700 	push	ar7
      0021DC 12r0Er77         [24] 6701 	lcall	_asciiToHex
      0021DF D0 07            [24] 6702 	pop	ar7
                                   6703 ;	main.c:89: switch(input) {
      0021E1 BF 31 02         [24] 6704 	cjne	r7,#0x31,00157$
      0021E4 80 28            [24] 6705 	sjmp	00101$
      0021E6                       6706 00157$:
      0021E6 BF 32 02         [24] 6707 	cjne	r7,#0x32,00158$
      0021E9 80 28            [24] 6708 	sjmp	00102$
      0021EB                       6709 00158$:
      0021EB BF 33 02         [24] 6710 	cjne	r7,#0x33,00159$
      0021EE 80 28            [24] 6711 	sjmp	00103$
      0021F0                       6712 00159$:
      0021F0 BF 34 02         [24] 6713 	cjne	r7,#0x34,00160$
      0021F3 80 2D            [24] 6714 	sjmp	00105$
      0021F5                       6715 00160$:
      0021F5 BF 35 02         [24] 6716 	cjne	r7,#0x35,00161$
      0021F8 80 2D            [24] 6717 	sjmp	00106$
      0021FA                       6718 00161$:
      0021FA BF 36 02         [24] 6719 	cjne	r7,#0x36,00162$
      0021FD 80 2D            [24] 6720 	sjmp	00107$
      0021FF                       6721 00162$:
      0021FF BF 37 02         [24] 6722 	cjne	r7,#0x37,00163$
      002202 80 32            [24] 6723 	sjmp	00109$
      002204                       6724 00163$:
      002204 BF 41 02         [24] 6725 	cjne	r7,#0x41,00164$
      002207 80 14            [24] 6726 	sjmp	00104$
      002209                       6727 00164$:
                                   6728 ;	main.c:90: case '1': basic(); break;
      002209 BF 42 C6         [24] 6729 	cjne	r7,#0x42,00113$
      00220C 80 23            [24] 6730 	sjmp	00108$
      00220E                       6731 00101$:
      00220E 12r16r6A         [24] 6732 	lcall	_basic
                                   6733 ;	main.c:91: case '2': dump(); break;
      002211 80 BF            [24] 6734 	sjmp	00113$
      002213                       6735 00102$:
      002213 12r12r2F         [24] 6736 	lcall	_dump
                                   6737 ;	main.c:92: case '3': check(); break;
      002216 80 BA            [24] 6738 	sjmp	00113$
      002218                       6739 00103$:
      002218 12r15r2E         [24] 6740 	lcall	_check
                                   6741 ;	main.c:93: case 'A': move(); break;
      00221B 80 B5            [24] 6742 	sjmp	00113$
      00221D                       6743 00104$:
      00221D 12r17r00         [24] 6744 	lcall	_move
                                   6745 ;	main.c:94: case '4': edit(); break;
      002220 80 B0            [24] 6746 	sjmp	00113$
      002222                       6747 00105$:
      002222 12r18r8E         [24] 6748 	lcall	_edit
                                   6749 ;	main.c:95: case '5': find(); break;
      002225 80 AB            [24] 6750 	sjmp	00113$
      002227                       6751 00106$:
      002227 12r1Ar66         [24] 6752 	lcall	_find
                                   6753 ;	main.c:96: case '6': count(); break;
      00222A 80 A6            [24] 6754 	sjmp	00113$
      00222C                       6755 00107$:
      00222C 12r1Dr1E         [24] 6756 	lcall	_count
                                   6757 ;	main.c:97: case 'B': temperature(); break;
      00222F 80 A1            [24] 6758 	sjmp	00113$
      002231                       6759 00108$:
      002231 12r20r75         [24] 6760 	lcall	_temperature
                                   6761 ;	main.c:98: case '7': light(); break;
      002234 80 9C            [24] 6762 	sjmp	00113$
      002236                       6763 00109$:
      002236 12r20rCA         [24] 6764 	lcall	_light
                                   6765 ;	main.c:100: }
                                   6766 ;	main.c:102: }
      002239 80 97            [24] 6767 	sjmp	00113$
                                   6768 	.area CSEG    (CODE)
                                   6769 	.area CONST   (CODE)
      000000                       6770 _font:
      000000 00                    6771 	.db #0x00	; 0
      000001 00                    6772 	.db #0x00	; 0
      000002 00                    6773 	.db #0x00	; 0
      000003 00                    6774 	.db #0x00	; 0
      000004 00                    6775 	.db #0x00	; 0
      000005 3E                    6776 	.db #0x3e	; 62
      000006 5B                    6777 	.db #0x5b	; 91
      000007 4F                    6778 	.db #0x4f	; 79	'O'
      000008 5B                    6779 	.db #0x5b	; 91
      000009 3E                    6780 	.db #0x3e	; 62
      00000A 3E                    6781 	.db #0x3e	; 62
      00000B 6B                    6782 	.db #0x6b	; 107	'k'
      00000C 4F                    6783 	.db #0x4f	; 79	'O'
      00000D 6B                    6784 	.db #0x6b	; 107	'k'
      00000E 3E                    6785 	.db #0x3e	; 62
      00000F 1C                    6786 	.db #0x1c	; 28
      000010 3E                    6787 	.db #0x3e	; 62
      000011 7C                    6788 	.db #0x7c	; 124
      000012 3E                    6789 	.db #0x3e	; 62
      000013 1C                    6790 	.db #0x1c	; 28
      000014 18                    6791 	.db #0x18	; 24
      000015 3C                    6792 	.db #0x3c	; 60
      000016 7E                    6793 	.db #0x7e	; 126
      000017 3C                    6794 	.db #0x3c	; 60
      000018 18                    6795 	.db #0x18	; 24
      000019 1C                    6796 	.db #0x1c	; 28
      00001A 57                    6797 	.db #0x57	; 87	'W'
      00001B 7D                    6798 	.db #0x7d	; 125
      00001C 57                    6799 	.db #0x57	; 87	'W'
      00001D 1C                    6800 	.db #0x1c	; 28
      00001E 1C                    6801 	.db #0x1c	; 28
      00001F 5E                    6802 	.db #0x5e	; 94
      000020 7F                    6803 	.db #0x7f	; 127
      000021 5E                    6804 	.db #0x5e	; 94
      000022 1C                    6805 	.db #0x1c	; 28
      000023 00                    6806 	.db #0x00	; 0
      000024 18                    6807 	.db #0x18	; 24
      000025 3C                    6808 	.db #0x3c	; 60
      000026 18                    6809 	.db #0x18	; 24
      000027 00                    6810 	.db #0x00	; 0
      000028 FF                    6811 	.db #0xff	; 255
      000029 E7                    6812 	.db #0xe7	; 231
      00002A C3                    6813 	.db #0xc3	; 195
      00002B E7                    6814 	.db #0xe7	; 231
      00002C FF                    6815 	.db #0xff	; 255
      00002D 00                    6816 	.db #0x00	; 0
      00002E 18                    6817 	.db #0x18	; 24
      00002F 24                    6818 	.db #0x24	; 36
      000030 18                    6819 	.db #0x18	; 24
      000031 00                    6820 	.db #0x00	; 0
      000032 FF                    6821 	.db #0xff	; 255
      000033 E7                    6822 	.db #0xe7	; 231
      000034 DB                    6823 	.db #0xdb	; 219
      000035 E7                    6824 	.db #0xe7	; 231
      000036 FF                    6825 	.db #0xff	; 255
      000037 30                    6826 	.db #0x30	; 48	'0'
      000038 48                    6827 	.db #0x48	; 72	'H'
      000039 3A                    6828 	.db #0x3a	; 58
      00003A 06                    6829 	.db #0x06	; 6
      00003B 0E                    6830 	.db #0x0e	; 14
      00003C 26                    6831 	.db #0x26	; 38
      00003D 29                    6832 	.db #0x29	; 41
      00003E 79                    6833 	.db #0x79	; 121	'y'
      00003F 29                    6834 	.db #0x29	; 41
      000040 26                    6835 	.db #0x26	; 38
      000041 40                    6836 	.db #0x40	; 64
      000042 7F                    6837 	.db #0x7f	; 127
      000043 05                    6838 	.db #0x05	; 5
      000044 05                    6839 	.db #0x05	; 5
      000045 07                    6840 	.db #0x07	; 7
      000046 40                    6841 	.db #0x40	; 64
      000047 7F                    6842 	.db #0x7f	; 127
      000048 05                    6843 	.db #0x05	; 5
      000049 25                    6844 	.db #0x25	; 37
      00004A 3F                    6845 	.db #0x3f	; 63
      00004B 5A                    6846 	.db #0x5a	; 90	'Z'
      00004C 3C                    6847 	.db #0x3c	; 60
      00004D E7                    6848 	.db #0xe7	; 231
      00004E 3C                    6849 	.db #0x3c	; 60
      00004F 5A                    6850 	.db #0x5a	; 90	'Z'
      000050 7F                    6851 	.db #0x7f	; 127
      000051 3E                    6852 	.db #0x3e	; 62
      000052 1C                    6853 	.db #0x1c	; 28
      000053 1C                    6854 	.db #0x1c	; 28
      000054 08                    6855 	.db #0x08	; 8
      000055 08                    6856 	.db #0x08	; 8
      000056 1C                    6857 	.db #0x1c	; 28
      000057 1C                    6858 	.db #0x1c	; 28
      000058 3E                    6859 	.db #0x3e	; 62
      000059 7F                    6860 	.db #0x7f	; 127
      00005A 14                    6861 	.db #0x14	; 20
      00005B 22                    6862 	.db #0x22	; 34
      00005C 7F                    6863 	.db #0x7f	; 127
      00005D 22                    6864 	.db #0x22	; 34
      00005E 14                    6865 	.db #0x14	; 20
      00005F 5F                    6866 	.db #0x5f	; 95
      000060 5F                    6867 	.db #0x5f	; 95
      000061 00                    6868 	.db #0x00	; 0
      000062 5F                    6869 	.db #0x5f	; 95
      000063 5F                    6870 	.db #0x5f	; 95
      000064 06                    6871 	.db #0x06	; 6
      000065 09                    6872 	.db #0x09	; 9
      000066 7F                    6873 	.db #0x7f	; 127
      000067 01                    6874 	.db #0x01	; 1
      000068 7F                    6875 	.db #0x7f	; 127
      000069 00                    6876 	.db #0x00	; 0
      00006A 66                    6877 	.db #0x66	; 102	'f'
      00006B 89                    6878 	.db #0x89	; 137
      00006C 95                    6879 	.db #0x95	; 149
      00006D 6A                    6880 	.db #0x6a	; 106	'j'
      00006E 60                    6881 	.db #0x60	; 96
      00006F 60                    6882 	.db #0x60	; 96
      000070 60                    6883 	.db #0x60	; 96
      000071 60                    6884 	.db #0x60	; 96
      000072 60                    6885 	.db #0x60	; 96
      000073 94                    6886 	.db #0x94	; 148
      000074 A2                    6887 	.db #0xa2	; 162
      000075 FF                    6888 	.db #0xff	; 255
      000076 A2                    6889 	.db #0xa2	; 162
      000077 94                    6890 	.db #0x94	; 148
      000078 08                    6891 	.db #0x08	; 8
      000079 04                    6892 	.db #0x04	; 4
      00007A 7E                    6893 	.db #0x7e	; 126
      00007B 04                    6894 	.db #0x04	; 4
      00007C 08                    6895 	.db #0x08	; 8
      00007D 10                    6896 	.db #0x10	; 16
      00007E 20                    6897 	.db #0x20	; 32
      00007F 7E                    6898 	.db #0x7e	; 126
      000080 20                    6899 	.db #0x20	; 32
      000081 10                    6900 	.db #0x10	; 16
      000082 08                    6901 	.db #0x08	; 8
      000083 08                    6902 	.db #0x08	; 8
      000084 2A                    6903 	.db #0x2a	; 42
      000085 1C                    6904 	.db #0x1c	; 28
      000086 08                    6905 	.db #0x08	; 8
      000087 08                    6906 	.db #0x08	; 8
      000088 1C                    6907 	.db #0x1c	; 28
      000089 2A                    6908 	.db #0x2a	; 42
      00008A 08                    6909 	.db #0x08	; 8
      00008B 08                    6910 	.db #0x08	; 8
      00008C 1E                    6911 	.db #0x1e	; 30
      00008D 10                    6912 	.db #0x10	; 16
      00008E 10                    6913 	.db #0x10	; 16
      00008F 10                    6914 	.db #0x10	; 16
      000090 10                    6915 	.db #0x10	; 16
      000091 0C                    6916 	.db #0x0c	; 12
      000092 1E                    6917 	.db #0x1e	; 30
      000093 0C                    6918 	.db #0x0c	; 12
      000094 1E                    6919 	.db #0x1e	; 30
      000095 0C                    6920 	.db #0x0c	; 12
      000096 30                    6921 	.db #0x30	; 48	'0'
      000097 38                    6922 	.db #0x38	; 56	'8'
      000098 3E                    6923 	.db #0x3e	; 62
      000099 38                    6924 	.db #0x38	; 56	'8'
      00009A 30                    6925 	.db #0x30	; 48	'0'
      00009B 06                    6926 	.db #0x06	; 6
      00009C 0E                    6927 	.db #0x0e	; 14
      00009D 3E                    6928 	.db #0x3e	; 62
      00009E 0E                    6929 	.db #0x0e	; 14
      00009F 06                    6930 	.db #0x06	; 6
      0000A0 00                    6931 	.db #0x00	; 0
      0000A1 00                    6932 	.db #0x00	; 0
      0000A2 00                    6933 	.db #0x00	; 0
      0000A3 00                    6934 	.db #0x00	; 0
      0000A4 00                    6935 	.db #0x00	; 0
      0000A5 00                    6936 	.db #0x00	; 0
      0000A6 00                    6937 	.db #0x00	; 0
      0000A7 5F                    6938 	.db #0x5f	; 95
      0000A8 00                    6939 	.db #0x00	; 0
      0000A9 00                    6940 	.db #0x00	; 0
      0000AA 00                    6941 	.db #0x00	; 0
      0000AB 07                    6942 	.db #0x07	; 7
      0000AC 00                    6943 	.db #0x00	; 0
      0000AD 07                    6944 	.db #0x07	; 7
      0000AE 00                    6945 	.db #0x00	; 0
      0000AF 14                    6946 	.db #0x14	; 20
      0000B0 7F                    6947 	.db #0x7f	; 127
      0000B1 14                    6948 	.db #0x14	; 20
      0000B2 7F                    6949 	.db #0x7f	; 127
      0000B3 14                    6950 	.db #0x14	; 20
      0000B4 24                    6951 	.db #0x24	; 36
      0000B5 2A                    6952 	.db #0x2a	; 42
      0000B6 7F                    6953 	.db #0x7f	; 127
      0000B7 2A                    6954 	.db #0x2a	; 42
      0000B8 12                    6955 	.db #0x12	; 18
      0000B9 23                    6956 	.db #0x23	; 35
      0000BA 13                    6957 	.db #0x13	; 19
      0000BB 08                    6958 	.db #0x08	; 8
      0000BC 64                    6959 	.db #0x64	; 100	'd'
      0000BD 62                    6960 	.db #0x62	; 98	'b'
      0000BE 36                    6961 	.db #0x36	; 54	'6'
      0000BF 49                    6962 	.db #0x49	; 73	'I'
      0000C0 56                    6963 	.db #0x56	; 86	'V'
      0000C1 20                    6964 	.db #0x20	; 32
      0000C2 50                    6965 	.db #0x50	; 80	'P'
      0000C3 00                    6966 	.db #0x00	; 0
      0000C4 08                    6967 	.db #0x08	; 8
      0000C5 07                    6968 	.db #0x07	; 7
      0000C6 03                    6969 	.db #0x03	; 3
      0000C7 00                    6970 	.db #0x00	; 0
      0000C8 00                    6971 	.db #0x00	; 0
      0000C9 1C                    6972 	.db #0x1c	; 28
      0000CA 22                    6973 	.db #0x22	; 34
      0000CB 41                    6974 	.db #0x41	; 65	'A'
      0000CC 00                    6975 	.db #0x00	; 0
      0000CD 00                    6976 	.db #0x00	; 0
      0000CE 41                    6977 	.db #0x41	; 65	'A'
      0000CF 22                    6978 	.db #0x22	; 34
      0000D0 1C                    6979 	.db #0x1c	; 28
      0000D1 00                    6980 	.db #0x00	; 0
      0000D2 2A                    6981 	.db #0x2a	; 42
      0000D3 1C                    6982 	.db #0x1c	; 28
      0000D4 7F                    6983 	.db #0x7f	; 127
      0000D5 1C                    6984 	.db #0x1c	; 28
      0000D6 2A                    6985 	.db #0x2a	; 42
      0000D7 08                    6986 	.db #0x08	; 8
      0000D8 08                    6987 	.db #0x08	; 8
      0000D9 3E                    6988 	.db #0x3e	; 62
      0000DA 08                    6989 	.db #0x08	; 8
      0000DB 08                    6990 	.db #0x08	; 8
      0000DC 00                    6991 	.db #0x00	; 0
      0000DD 80                    6992 	.db #0x80	; 128
      0000DE 70                    6993 	.db #0x70	; 112	'p'
      0000DF 30                    6994 	.db #0x30	; 48	'0'
      0000E0 00                    6995 	.db #0x00	; 0
      0000E1 08                    6996 	.db #0x08	; 8
      0000E2 08                    6997 	.db #0x08	; 8
      0000E3 08                    6998 	.db #0x08	; 8
      0000E4 08                    6999 	.db #0x08	; 8
      0000E5 08                    7000 	.db #0x08	; 8
      0000E6 00                    7001 	.db #0x00	; 0
      0000E7 00                    7002 	.db #0x00	; 0
      0000E8 60                    7003 	.db #0x60	; 96
      0000E9 60                    7004 	.db #0x60	; 96
      0000EA 00                    7005 	.db #0x00	; 0
      0000EB 20                    7006 	.db #0x20	; 32
      0000EC 10                    7007 	.db #0x10	; 16
      0000ED 08                    7008 	.db #0x08	; 8
      0000EE 04                    7009 	.db #0x04	; 4
      0000EF 02                    7010 	.db #0x02	; 2
      0000F0 3E                    7011 	.db #0x3e	; 62
      0000F1 51                    7012 	.db #0x51	; 81	'Q'
      0000F2 49                    7013 	.db #0x49	; 73	'I'
      0000F3 45                    7014 	.db #0x45	; 69	'E'
      0000F4 3E                    7015 	.db #0x3e	; 62
      0000F5 00                    7016 	.db #0x00	; 0
      0000F6 42                    7017 	.db #0x42	; 66	'B'
      0000F7 7F                    7018 	.db #0x7f	; 127
      0000F8 40                    7019 	.db #0x40	; 64
      0000F9 00                    7020 	.db #0x00	; 0
      0000FA 72                    7021 	.db #0x72	; 114	'r'
      0000FB 49                    7022 	.db #0x49	; 73	'I'
      0000FC 49                    7023 	.db #0x49	; 73	'I'
      0000FD 49                    7024 	.db #0x49	; 73	'I'
      0000FE 46                    7025 	.db #0x46	; 70	'F'
      0000FF 21                    7026 	.db #0x21	; 33
      000100 41                    7027 	.db #0x41	; 65	'A'
      000101 49                    7028 	.db #0x49	; 73	'I'
      000102 4D                    7029 	.db #0x4d	; 77	'M'
      000103 33                    7030 	.db #0x33	; 51	'3'
      000104 18                    7031 	.db #0x18	; 24
      000105 14                    7032 	.db #0x14	; 20
      000106 12                    7033 	.db #0x12	; 18
      000107 7F                    7034 	.db #0x7f	; 127
      000108 10                    7035 	.db #0x10	; 16
      000109 27                    7036 	.db #0x27	; 39
      00010A 45                    7037 	.db #0x45	; 69	'E'
      00010B 45                    7038 	.db #0x45	; 69	'E'
      00010C 45                    7039 	.db #0x45	; 69	'E'
      00010D 39                    7040 	.db #0x39	; 57	'9'
      00010E 3C                    7041 	.db #0x3c	; 60
      00010F 4A                    7042 	.db #0x4a	; 74	'J'
      000110 49                    7043 	.db #0x49	; 73	'I'
      000111 49                    7044 	.db #0x49	; 73	'I'
      000112 31                    7045 	.db #0x31	; 49	'1'
      000113 41                    7046 	.db #0x41	; 65	'A'
      000114 21                    7047 	.db #0x21	; 33
      000115 11                    7048 	.db #0x11	; 17
      000116 09                    7049 	.db #0x09	; 9
      000117 07                    7050 	.db #0x07	; 7
      000118 36                    7051 	.db #0x36	; 54	'6'
      000119 49                    7052 	.db #0x49	; 73	'I'
      00011A 49                    7053 	.db #0x49	; 73	'I'
      00011B 49                    7054 	.db #0x49	; 73	'I'
      00011C 36                    7055 	.db #0x36	; 54	'6'
      00011D 46                    7056 	.db #0x46	; 70	'F'
      00011E 49                    7057 	.db #0x49	; 73	'I'
      00011F 49                    7058 	.db #0x49	; 73	'I'
      000120 29                    7059 	.db #0x29	; 41
      000121 1E                    7060 	.db #0x1e	; 30
      000122 00                    7061 	.db #0x00	; 0
      000123 00                    7062 	.db #0x00	; 0
      000124 14                    7063 	.db #0x14	; 20
      000125 00                    7064 	.db #0x00	; 0
      000126 00                    7065 	.db #0x00	; 0
      000127 00                    7066 	.db #0x00	; 0
      000128 40                    7067 	.db #0x40	; 64
      000129 34                    7068 	.db #0x34	; 52	'4'
      00012A 00                    7069 	.db #0x00	; 0
      00012B 00                    7070 	.db #0x00	; 0
      00012C 00                    7071 	.db #0x00	; 0
      00012D 08                    7072 	.db #0x08	; 8
      00012E 14                    7073 	.db #0x14	; 20
      00012F 22                    7074 	.db #0x22	; 34
      000130 41                    7075 	.db #0x41	; 65	'A'
      000131 14                    7076 	.db #0x14	; 20
      000132 14                    7077 	.db #0x14	; 20
      000133 14                    7078 	.db #0x14	; 20
      000134 14                    7079 	.db #0x14	; 20
      000135 14                    7080 	.db #0x14	; 20
      000136 00                    7081 	.db #0x00	; 0
      000137 41                    7082 	.db #0x41	; 65	'A'
      000138 22                    7083 	.db #0x22	; 34
      000139 14                    7084 	.db #0x14	; 20
      00013A 08                    7085 	.db #0x08	; 8
      00013B 02                    7086 	.db #0x02	; 2
      00013C 01                    7087 	.db #0x01	; 1
      00013D 59                    7088 	.db #0x59	; 89	'Y'
      00013E 09                    7089 	.db #0x09	; 9
      00013F 06                    7090 	.db #0x06	; 6
      000140 3E                    7091 	.db #0x3e	; 62
      000141 41                    7092 	.db #0x41	; 65	'A'
      000142 5D                    7093 	.db #0x5d	; 93
      000143 59                    7094 	.db #0x59	; 89	'Y'
      000144 4E                    7095 	.db #0x4e	; 78	'N'
      000145 7C                    7096 	.db #0x7c	; 124
      000146 12                    7097 	.db #0x12	; 18
      000147 11                    7098 	.db #0x11	; 17
      000148 12                    7099 	.db #0x12	; 18
      000149 7C                    7100 	.db #0x7c	; 124
      00014A 7F                    7101 	.db #0x7f	; 127
      00014B 49                    7102 	.db #0x49	; 73	'I'
      00014C 49                    7103 	.db #0x49	; 73	'I'
      00014D 49                    7104 	.db #0x49	; 73	'I'
      00014E 36                    7105 	.db #0x36	; 54	'6'
      00014F 3E                    7106 	.db #0x3e	; 62
      000150 41                    7107 	.db #0x41	; 65	'A'
      000151 41                    7108 	.db #0x41	; 65	'A'
      000152 41                    7109 	.db #0x41	; 65	'A'
      000153 22                    7110 	.db #0x22	; 34
      000154 7F                    7111 	.db #0x7f	; 127
      000155 41                    7112 	.db #0x41	; 65	'A'
      000156 41                    7113 	.db #0x41	; 65	'A'
      000157 41                    7114 	.db #0x41	; 65	'A'
      000158 3E                    7115 	.db #0x3e	; 62
      000159 7F                    7116 	.db #0x7f	; 127
      00015A 49                    7117 	.db #0x49	; 73	'I'
      00015B 49                    7118 	.db #0x49	; 73	'I'
      00015C 49                    7119 	.db #0x49	; 73	'I'
      00015D 41                    7120 	.db #0x41	; 65	'A'
      00015E 7F                    7121 	.db #0x7f	; 127
      00015F 09                    7122 	.db #0x09	; 9
      000160 09                    7123 	.db #0x09	; 9
      000161 09                    7124 	.db #0x09	; 9
      000162 01                    7125 	.db #0x01	; 1
      000163 3E                    7126 	.db #0x3e	; 62
      000164 41                    7127 	.db #0x41	; 65	'A'
      000165 41                    7128 	.db #0x41	; 65	'A'
      000166 51                    7129 	.db #0x51	; 81	'Q'
      000167 73                    7130 	.db #0x73	; 115	's'
      000168 7F                    7131 	.db #0x7f	; 127
      000169 08                    7132 	.db #0x08	; 8
      00016A 08                    7133 	.db #0x08	; 8
      00016B 08                    7134 	.db #0x08	; 8
      00016C 7F                    7135 	.db #0x7f	; 127
      00016D 00                    7136 	.db #0x00	; 0
      00016E 41                    7137 	.db #0x41	; 65	'A'
      00016F 7F                    7138 	.db #0x7f	; 127
      000170 41                    7139 	.db #0x41	; 65	'A'
      000171 00                    7140 	.db #0x00	; 0
      000172 20                    7141 	.db #0x20	; 32
      000173 40                    7142 	.db #0x40	; 64
      000174 41                    7143 	.db #0x41	; 65	'A'
      000175 3F                    7144 	.db #0x3f	; 63
      000176 01                    7145 	.db #0x01	; 1
      000177 7F                    7146 	.db #0x7f	; 127
      000178 08                    7147 	.db #0x08	; 8
      000179 14                    7148 	.db #0x14	; 20
      00017A 22                    7149 	.db #0x22	; 34
      00017B 41                    7150 	.db #0x41	; 65	'A'
      00017C 7F                    7151 	.db #0x7f	; 127
      00017D 40                    7152 	.db #0x40	; 64
      00017E 40                    7153 	.db #0x40	; 64
      00017F 40                    7154 	.db #0x40	; 64
      000180 40                    7155 	.db #0x40	; 64
      000181 7F                    7156 	.db #0x7f	; 127
      000182 02                    7157 	.db #0x02	; 2
      000183 1C                    7158 	.db #0x1c	; 28
      000184 02                    7159 	.db #0x02	; 2
      000185 7F                    7160 	.db #0x7f	; 127
      000186 7F                    7161 	.db #0x7f	; 127
      000187 04                    7162 	.db #0x04	; 4
      000188 08                    7163 	.db #0x08	; 8
      000189 10                    7164 	.db #0x10	; 16
      00018A 7F                    7165 	.db #0x7f	; 127
      00018B 3E                    7166 	.db #0x3e	; 62
      00018C 41                    7167 	.db #0x41	; 65	'A'
      00018D 41                    7168 	.db #0x41	; 65	'A'
      00018E 41                    7169 	.db #0x41	; 65	'A'
      00018F 3E                    7170 	.db #0x3e	; 62
      000190 7F                    7171 	.db #0x7f	; 127
      000191 09                    7172 	.db #0x09	; 9
      000192 09                    7173 	.db #0x09	; 9
      000193 09                    7174 	.db #0x09	; 9
      000194 06                    7175 	.db #0x06	; 6
      000195 3E                    7176 	.db #0x3e	; 62
      000196 41                    7177 	.db #0x41	; 65	'A'
      000197 51                    7178 	.db #0x51	; 81	'Q'
      000198 21                    7179 	.db #0x21	; 33
      000199 5E                    7180 	.db #0x5e	; 94
      00019A 7F                    7181 	.db #0x7f	; 127
      00019B 09                    7182 	.db #0x09	; 9
      00019C 19                    7183 	.db #0x19	; 25
      00019D 29                    7184 	.db #0x29	; 41
      00019E 46                    7185 	.db #0x46	; 70	'F'
      00019F 26                    7186 	.db #0x26	; 38
      0001A0 49                    7187 	.db #0x49	; 73	'I'
      0001A1 49                    7188 	.db #0x49	; 73	'I'
      0001A2 49                    7189 	.db #0x49	; 73	'I'
      0001A3 32                    7190 	.db #0x32	; 50	'2'
      0001A4 03                    7191 	.db #0x03	; 3
      0001A5 01                    7192 	.db #0x01	; 1
      0001A6 7F                    7193 	.db #0x7f	; 127
      0001A7 01                    7194 	.db #0x01	; 1
      0001A8 03                    7195 	.db #0x03	; 3
      0001A9 3F                    7196 	.db #0x3f	; 63
      0001AA 40                    7197 	.db #0x40	; 64
      0001AB 40                    7198 	.db #0x40	; 64
      0001AC 40                    7199 	.db #0x40	; 64
      0001AD 3F                    7200 	.db #0x3f	; 63
      0001AE 1F                    7201 	.db #0x1f	; 31
      0001AF 20                    7202 	.db #0x20	; 32
      0001B0 40                    7203 	.db #0x40	; 64
      0001B1 20                    7204 	.db #0x20	; 32
      0001B2 1F                    7205 	.db #0x1f	; 31
      0001B3 3F                    7206 	.db #0x3f	; 63
      0001B4 40                    7207 	.db #0x40	; 64
      0001B5 38                    7208 	.db #0x38	; 56	'8'
      0001B6 40                    7209 	.db #0x40	; 64
      0001B7 3F                    7210 	.db #0x3f	; 63
      0001B8 63                    7211 	.db #0x63	; 99	'c'
      0001B9 14                    7212 	.db #0x14	; 20
      0001BA 08                    7213 	.db #0x08	; 8
      0001BB 14                    7214 	.db #0x14	; 20
      0001BC 63                    7215 	.db #0x63	; 99	'c'
      0001BD 03                    7216 	.db #0x03	; 3
      0001BE 04                    7217 	.db #0x04	; 4
      0001BF 78                    7218 	.db #0x78	; 120	'x'
      0001C0 04                    7219 	.db #0x04	; 4
      0001C1 03                    7220 	.db #0x03	; 3
      0001C2 61                    7221 	.db #0x61	; 97	'a'
      0001C3 59                    7222 	.db #0x59	; 89	'Y'
      0001C4 49                    7223 	.db #0x49	; 73	'I'
      0001C5 4D                    7224 	.db #0x4d	; 77	'M'
      0001C6 43                    7225 	.db #0x43	; 67	'C'
      0001C7 00                    7226 	.db #0x00	; 0
      0001C8 7F                    7227 	.db #0x7f	; 127
      0001C9 41                    7228 	.db #0x41	; 65	'A'
      0001CA 41                    7229 	.db #0x41	; 65	'A'
      0001CB 41                    7230 	.db #0x41	; 65	'A'
      0001CC 02                    7231 	.db #0x02	; 2
      0001CD 04                    7232 	.db #0x04	; 4
      0001CE 08                    7233 	.db #0x08	; 8
      0001CF 10                    7234 	.db #0x10	; 16
      0001D0 20                    7235 	.db #0x20	; 32
      0001D1 00                    7236 	.db #0x00	; 0
      0001D2 41                    7237 	.db #0x41	; 65	'A'
      0001D3 41                    7238 	.db #0x41	; 65	'A'
      0001D4 41                    7239 	.db #0x41	; 65	'A'
      0001D5 7F                    7240 	.db #0x7f	; 127
      0001D6 04                    7241 	.db #0x04	; 4
      0001D7 02                    7242 	.db #0x02	; 2
      0001D8 01                    7243 	.db #0x01	; 1
      0001D9 02                    7244 	.db #0x02	; 2
      0001DA 04                    7245 	.db #0x04	; 4
      0001DB 40                    7246 	.db #0x40	; 64
      0001DC 40                    7247 	.db #0x40	; 64
      0001DD 40                    7248 	.db #0x40	; 64
      0001DE 40                    7249 	.db #0x40	; 64
      0001DF 40                    7250 	.db #0x40	; 64
      0001E0 00                    7251 	.db #0x00	; 0
      0001E1 03                    7252 	.db #0x03	; 3
      0001E2 07                    7253 	.db #0x07	; 7
      0001E3 08                    7254 	.db #0x08	; 8
      0001E4 00                    7255 	.db #0x00	; 0
      0001E5 20                    7256 	.db #0x20	; 32
      0001E6 54                    7257 	.db #0x54	; 84	'T'
      0001E7 54                    7258 	.db #0x54	; 84	'T'
      0001E8 78                    7259 	.db #0x78	; 120	'x'
      0001E9 40                    7260 	.db #0x40	; 64
      0001EA 7F                    7261 	.db #0x7f	; 127
      0001EB 28                    7262 	.db #0x28	; 40
      0001EC 44                    7263 	.db #0x44	; 68	'D'
      0001ED 44                    7264 	.db #0x44	; 68	'D'
      0001EE 38                    7265 	.db #0x38	; 56	'8'
      0001EF 38                    7266 	.db #0x38	; 56	'8'
      0001F0 44                    7267 	.db #0x44	; 68	'D'
      0001F1 44                    7268 	.db #0x44	; 68	'D'
      0001F2 44                    7269 	.db #0x44	; 68	'D'
      0001F3 28                    7270 	.db #0x28	; 40
      0001F4 38                    7271 	.db #0x38	; 56	'8'
      0001F5 44                    7272 	.db #0x44	; 68	'D'
      0001F6 44                    7273 	.db #0x44	; 68	'D'
      0001F7 28                    7274 	.db #0x28	; 40
      0001F8 7F                    7275 	.db #0x7f	; 127
      0001F9 38                    7276 	.db #0x38	; 56	'8'
      0001FA 54                    7277 	.db #0x54	; 84	'T'
      0001FB 54                    7278 	.db #0x54	; 84	'T'
      0001FC 54                    7279 	.db #0x54	; 84	'T'
      0001FD 18                    7280 	.db #0x18	; 24
      0001FE 00                    7281 	.db #0x00	; 0
      0001FF 08                    7282 	.db #0x08	; 8
      000200 7E                    7283 	.db #0x7e	; 126
      000201 09                    7284 	.db #0x09	; 9
      000202 02                    7285 	.db #0x02	; 2
      000203 18                    7286 	.db #0x18	; 24
      000204 A4                    7287 	.db #0xa4	; 164
      000205 A4                    7288 	.db #0xa4	; 164
      000206 9C                    7289 	.db #0x9c	; 156
      000207 78                    7290 	.db #0x78	; 120	'x'
      000208 7F                    7291 	.db #0x7f	; 127
      000209 08                    7292 	.db #0x08	; 8
      00020A 04                    7293 	.db #0x04	; 4
      00020B 04                    7294 	.db #0x04	; 4
      00020C 78                    7295 	.db #0x78	; 120	'x'
      00020D 00                    7296 	.db #0x00	; 0
      00020E 44                    7297 	.db #0x44	; 68	'D'
      00020F 7D                    7298 	.db #0x7d	; 125
      000210 40                    7299 	.db #0x40	; 64
      000211 00                    7300 	.db #0x00	; 0
      000212 20                    7301 	.db #0x20	; 32
      000213 40                    7302 	.db #0x40	; 64
      000214 40                    7303 	.db #0x40	; 64
      000215 3D                    7304 	.db #0x3d	; 61
      000216 00                    7305 	.db #0x00	; 0
      000217 7F                    7306 	.db #0x7f	; 127
      000218 10                    7307 	.db #0x10	; 16
      000219 28                    7308 	.db #0x28	; 40
      00021A 44                    7309 	.db #0x44	; 68	'D'
      00021B 00                    7310 	.db #0x00	; 0
      00021C 00                    7311 	.db #0x00	; 0
      00021D 41                    7312 	.db #0x41	; 65	'A'
      00021E 7F                    7313 	.db #0x7f	; 127
      00021F 40                    7314 	.db #0x40	; 64
      000220 00                    7315 	.db #0x00	; 0
      000221 7C                    7316 	.db #0x7c	; 124
      000222 04                    7317 	.db #0x04	; 4
      000223 78                    7318 	.db #0x78	; 120	'x'
      000224 04                    7319 	.db #0x04	; 4
      000225 78                    7320 	.db #0x78	; 120	'x'
      000226 7C                    7321 	.db #0x7c	; 124
      000227 08                    7322 	.db #0x08	; 8
      000228 04                    7323 	.db #0x04	; 4
      000229 04                    7324 	.db #0x04	; 4
      00022A 78                    7325 	.db #0x78	; 120	'x'
      00022B 38                    7326 	.db #0x38	; 56	'8'
      00022C 44                    7327 	.db #0x44	; 68	'D'
      00022D 44                    7328 	.db #0x44	; 68	'D'
      00022E 44                    7329 	.db #0x44	; 68	'D'
      00022F 38                    7330 	.db #0x38	; 56	'8'
      000230 FC                    7331 	.db #0xfc	; 252
      000231 18                    7332 	.db #0x18	; 24
      000232 24                    7333 	.db #0x24	; 36
      000233 24                    7334 	.db #0x24	; 36
      000234 18                    7335 	.db #0x18	; 24
      000235 18                    7336 	.db #0x18	; 24
      000236 24                    7337 	.db #0x24	; 36
      000237 24                    7338 	.db #0x24	; 36
      000238 18                    7339 	.db #0x18	; 24
      000239 FC                    7340 	.db #0xfc	; 252
      00023A 7C                    7341 	.db #0x7c	; 124
      00023B 08                    7342 	.db #0x08	; 8
      00023C 04                    7343 	.db #0x04	; 4
      00023D 04                    7344 	.db #0x04	; 4
      00023E 08                    7345 	.db #0x08	; 8
      00023F 48                    7346 	.db #0x48	; 72	'H'
      000240 54                    7347 	.db #0x54	; 84	'T'
      000241 54                    7348 	.db #0x54	; 84	'T'
      000242 54                    7349 	.db #0x54	; 84	'T'
      000243 24                    7350 	.db #0x24	; 36
      000244 04                    7351 	.db #0x04	; 4
      000245 04                    7352 	.db #0x04	; 4
      000246 3F                    7353 	.db #0x3f	; 63
      000247 44                    7354 	.db #0x44	; 68	'D'
      000248 24                    7355 	.db #0x24	; 36
      000249 3C                    7356 	.db #0x3c	; 60
      00024A 40                    7357 	.db #0x40	; 64
      00024B 40                    7358 	.db #0x40	; 64
      00024C 20                    7359 	.db #0x20	; 32
      00024D 7C                    7360 	.db #0x7c	; 124
      00024E 1C                    7361 	.db #0x1c	; 28
      00024F 20                    7362 	.db #0x20	; 32
      000250 40                    7363 	.db #0x40	; 64
      000251 20                    7364 	.db #0x20	; 32
      000252 1C                    7365 	.db #0x1c	; 28
      000253 3C                    7366 	.db #0x3c	; 60
      000254 40                    7367 	.db #0x40	; 64
      000255 30                    7368 	.db #0x30	; 48	'0'
      000256 40                    7369 	.db #0x40	; 64
      000257 3C                    7370 	.db #0x3c	; 60
      000258 44                    7371 	.db #0x44	; 68	'D'
      000259 28                    7372 	.db #0x28	; 40
      00025A 10                    7373 	.db #0x10	; 16
      00025B 28                    7374 	.db #0x28	; 40
      00025C 44                    7375 	.db #0x44	; 68	'D'
      00025D 4C                    7376 	.db #0x4c	; 76	'L'
      00025E 90                    7377 	.db #0x90	; 144
      00025F 90                    7378 	.db #0x90	; 144
      000260 90                    7379 	.db #0x90	; 144
      000261 7C                    7380 	.db #0x7c	; 124
      000262 44                    7381 	.db #0x44	; 68	'D'
      000263 64                    7382 	.db #0x64	; 100	'd'
      000264 54                    7383 	.db #0x54	; 84	'T'
      000265 4C                    7384 	.db #0x4c	; 76	'L'
      000266 44                    7385 	.db #0x44	; 68	'D'
      000267 00                    7386 	.db #0x00	; 0
      000268 08                    7387 	.db #0x08	; 8
      000269 36                    7388 	.db #0x36	; 54	'6'
      00026A 41                    7389 	.db #0x41	; 65	'A'
      00026B 00                    7390 	.db #0x00	; 0
      00026C 00                    7391 	.db #0x00	; 0
      00026D 00                    7392 	.db #0x00	; 0
      00026E 77                    7393 	.db #0x77	; 119	'w'
      00026F 00                    7394 	.db #0x00	; 0
      000270 00                    7395 	.db #0x00	; 0
      000271 00                    7396 	.db #0x00	; 0
      000272 41                    7397 	.db #0x41	; 65	'A'
      000273 36                    7398 	.db #0x36	; 54	'6'
      000274 08                    7399 	.db #0x08	; 8
      000275 00                    7400 	.db #0x00	; 0
      000276 02                    7401 	.db #0x02	; 2
      000277 01                    7402 	.db #0x01	; 1
      000278 02                    7403 	.db #0x02	; 2
      000279 04                    7404 	.db #0x04	; 4
      00027A 02                    7405 	.db #0x02	; 2
      00027B 3C                    7406 	.db #0x3c	; 60
      00027C 26                    7407 	.db #0x26	; 38
      00027D 23                    7408 	.db #0x23	; 35
      00027E 26                    7409 	.db #0x26	; 38
      00027F 3C                    7410 	.db #0x3c	; 60
      000280 1E                    7411 	.db #0x1e	; 30
      000281 A1                    7412 	.db #0xa1	; 161
      000282 A1                    7413 	.db #0xa1	; 161
      000283 61                    7414 	.db #0x61	; 97	'a'
      000284 12                    7415 	.db #0x12	; 18
      000285 3A                    7416 	.db #0x3a	; 58
      000286 40                    7417 	.db #0x40	; 64
      000287 40                    7418 	.db #0x40	; 64
      000288 20                    7419 	.db #0x20	; 32
      000289 7A                    7420 	.db #0x7a	; 122	'z'
      00028A 38                    7421 	.db #0x38	; 56	'8'
      00028B 54                    7422 	.db #0x54	; 84	'T'
      00028C 54                    7423 	.db #0x54	; 84	'T'
      00028D 55                    7424 	.db #0x55	; 85	'U'
      00028E 59                    7425 	.db #0x59	; 89	'Y'
      00028F 21                    7426 	.db #0x21	; 33
      000290 55                    7427 	.db #0x55	; 85	'U'
      000291 55                    7428 	.db #0x55	; 85	'U'
      000292 79                    7429 	.db #0x79	; 121	'y'
      000293 41                    7430 	.db #0x41	; 65	'A'
      000294 22                    7431 	.db #0x22	; 34
      000295 54                    7432 	.db #0x54	; 84	'T'
      000296 54                    7433 	.db #0x54	; 84	'T'
      000297 78                    7434 	.db #0x78	; 120	'x'
      000298 42                    7435 	.db #0x42	; 66	'B'
      000299 21                    7436 	.db #0x21	; 33
      00029A 55                    7437 	.db #0x55	; 85	'U'
      00029B 54                    7438 	.db #0x54	; 84	'T'
      00029C 78                    7439 	.db #0x78	; 120	'x'
      00029D 40                    7440 	.db #0x40	; 64
      00029E 20                    7441 	.db #0x20	; 32
      00029F 54                    7442 	.db #0x54	; 84	'T'
      0002A0 55                    7443 	.db #0x55	; 85	'U'
      0002A1 79                    7444 	.db #0x79	; 121	'y'
      0002A2 40                    7445 	.db #0x40	; 64
      0002A3 0C                    7446 	.db #0x0c	; 12
      0002A4 1E                    7447 	.db #0x1e	; 30
      0002A5 52                    7448 	.db #0x52	; 82	'R'
      0002A6 72                    7449 	.db #0x72	; 114	'r'
      0002A7 12                    7450 	.db #0x12	; 18
      0002A8 39                    7451 	.db #0x39	; 57	'9'
      0002A9 55                    7452 	.db #0x55	; 85	'U'
      0002AA 55                    7453 	.db #0x55	; 85	'U'
      0002AB 55                    7454 	.db #0x55	; 85	'U'
      0002AC 59                    7455 	.db #0x59	; 89	'Y'
      0002AD 39                    7456 	.db #0x39	; 57	'9'
      0002AE 54                    7457 	.db #0x54	; 84	'T'
      0002AF 54                    7458 	.db #0x54	; 84	'T'
      0002B0 54                    7459 	.db #0x54	; 84	'T'
      0002B1 59                    7460 	.db #0x59	; 89	'Y'
      0002B2 39                    7461 	.db #0x39	; 57	'9'
      0002B3 55                    7462 	.db #0x55	; 85	'U'
      0002B4 54                    7463 	.db #0x54	; 84	'T'
      0002B5 54                    7464 	.db #0x54	; 84	'T'
      0002B6 58                    7465 	.db #0x58	; 88	'X'
      0002B7 00                    7466 	.db #0x00	; 0
      0002B8 00                    7467 	.db #0x00	; 0
      0002B9 45                    7468 	.db #0x45	; 69	'E'
      0002BA 7C                    7469 	.db #0x7c	; 124
      0002BB 41                    7470 	.db #0x41	; 65	'A'
      0002BC 00                    7471 	.db #0x00	; 0
      0002BD 02                    7472 	.db #0x02	; 2
      0002BE 45                    7473 	.db #0x45	; 69	'E'
      0002BF 7D                    7474 	.db #0x7d	; 125
      0002C0 42                    7475 	.db #0x42	; 66	'B'
      0002C1 00                    7476 	.db #0x00	; 0
      0002C2 01                    7477 	.db #0x01	; 1
      0002C3 45                    7478 	.db #0x45	; 69	'E'
      0002C4 7C                    7479 	.db #0x7c	; 124
      0002C5 40                    7480 	.db #0x40	; 64
      0002C6 7D                    7481 	.db #0x7d	; 125
      0002C7 12                    7482 	.db #0x12	; 18
      0002C8 11                    7483 	.db #0x11	; 17
      0002C9 12                    7484 	.db #0x12	; 18
      0002CA 7D                    7485 	.db #0x7d	; 125
      0002CB F0                    7486 	.db #0xf0	; 240
      0002CC 28                    7487 	.db #0x28	; 40
      0002CD 25                    7488 	.db #0x25	; 37
      0002CE 28                    7489 	.db #0x28	; 40
      0002CF F0                    7490 	.db #0xf0	; 240
      0002D0 7C                    7491 	.db #0x7c	; 124
      0002D1 54                    7492 	.db #0x54	; 84	'T'
      0002D2 55                    7493 	.db #0x55	; 85	'U'
      0002D3 45                    7494 	.db #0x45	; 69	'E'
      0002D4 00                    7495 	.db #0x00	; 0
      0002D5 20                    7496 	.db #0x20	; 32
      0002D6 54                    7497 	.db #0x54	; 84	'T'
      0002D7 54                    7498 	.db #0x54	; 84	'T'
      0002D8 7C                    7499 	.db #0x7c	; 124
      0002D9 54                    7500 	.db #0x54	; 84	'T'
      0002DA 7C                    7501 	.db #0x7c	; 124
      0002DB 0A                    7502 	.db #0x0a	; 10
      0002DC 09                    7503 	.db #0x09	; 9
      0002DD 7F                    7504 	.db #0x7f	; 127
      0002DE 49                    7505 	.db #0x49	; 73	'I'
      0002DF 32                    7506 	.db #0x32	; 50	'2'
      0002E0 49                    7507 	.db #0x49	; 73	'I'
      0002E1 49                    7508 	.db #0x49	; 73	'I'
      0002E2 49                    7509 	.db #0x49	; 73	'I'
      0002E3 32                    7510 	.db #0x32	; 50	'2'
      0002E4 3A                    7511 	.db #0x3a	; 58
      0002E5 44                    7512 	.db #0x44	; 68	'D'
      0002E6 44                    7513 	.db #0x44	; 68	'D'
      0002E7 44                    7514 	.db #0x44	; 68	'D'
      0002E8 3A                    7515 	.db #0x3a	; 58
      0002E9 32                    7516 	.db #0x32	; 50	'2'
      0002EA 4A                    7517 	.db #0x4a	; 74	'J'
      0002EB 48                    7518 	.db #0x48	; 72	'H'
      0002EC 48                    7519 	.db #0x48	; 72	'H'
      0002ED 30                    7520 	.db #0x30	; 48	'0'
      0002EE 3A                    7521 	.db #0x3a	; 58
      0002EF 41                    7522 	.db #0x41	; 65	'A'
      0002F0 41                    7523 	.db #0x41	; 65	'A'
      0002F1 21                    7524 	.db #0x21	; 33
      0002F2 7A                    7525 	.db #0x7a	; 122	'z'
      0002F3 3A                    7526 	.db #0x3a	; 58
      0002F4 42                    7527 	.db #0x42	; 66	'B'
      0002F5 40                    7528 	.db #0x40	; 64
      0002F6 20                    7529 	.db #0x20	; 32
      0002F7 78                    7530 	.db #0x78	; 120	'x'
      0002F8 00                    7531 	.db #0x00	; 0
      0002F9 9D                    7532 	.db #0x9d	; 157
      0002FA A0                    7533 	.db #0xa0	; 160
      0002FB A0                    7534 	.db #0xa0	; 160
      0002FC 7D                    7535 	.db #0x7d	; 125
      0002FD 3D                    7536 	.db #0x3d	; 61
      0002FE 42                    7537 	.db #0x42	; 66	'B'
      0002FF 42                    7538 	.db #0x42	; 66	'B'
      000300 42                    7539 	.db #0x42	; 66	'B'
      000301 3D                    7540 	.db #0x3d	; 61
      000302 3D                    7541 	.db #0x3d	; 61
      000303 40                    7542 	.db #0x40	; 64
      000304 40                    7543 	.db #0x40	; 64
      000305 40                    7544 	.db #0x40	; 64
      000306 3D                    7545 	.db #0x3d	; 61
      000307 3C                    7546 	.db #0x3c	; 60
      000308 24                    7547 	.db #0x24	; 36
      000309 FF                    7548 	.db #0xff	; 255
      00030A 24                    7549 	.db #0x24	; 36
      00030B 24                    7550 	.db #0x24	; 36
      00030C 48                    7551 	.db #0x48	; 72	'H'
      00030D 7E                    7552 	.db #0x7e	; 126
      00030E 49                    7553 	.db #0x49	; 73	'I'
      00030F 43                    7554 	.db #0x43	; 67	'C'
      000310 66                    7555 	.db #0x66	; 102	'f'
      000311 2B                    7556 	.db #0x2b	; 43
      000312 2F                    7557 	.db #0x2f	; 47
      000313 FC                    7558 	.db #0xfc	; 252
      000314 2F                    7559 	.db #0x2f	; 47
      000315 2B                    7560 	.db #0x2b	; 43
      000316 FF                    7561 	.db #0xff	; 255
      000317 09                    7562 	.db #0x09	; 9
      000318 29                    7563 	.db #0x29	; 41
      000319 F6                    7564 	.db #0xf6	; 246
      00031A 20                    7565 	.db #0x20	; 32
      00031B C0                    7566 	.db #0xc0	; 192
      00031C 88                    7567 	.db #0x88	; 136
      00031D 7E                    7568 	.db #0x7e	; 126
      00031E 09                    7569 	.db #0x09	; 9
      00031F 03                    7570 	.db #0x03	; 3
      000320 20                    7571 	.db #0x20	; 32
      000321 54                    7572 	.db #0x54	; 84	'T'
      000322 54                    7573 	.db #0x54	; 84	'T'
      000323 79                    7574 	.db #0x79	; 121	'y'
      000324 41                    7575 	.db #0x41	; 65	'A'
      000325 00                    7576 	.db #0x00	; 0
      000326 00                    7577 	.db #0x00	; 0
      000327 44                    7578 	.db #0x44	; 68	'D'
      000328 7D                    7579 	.db #0x7d	; 125
      000329 41                    7580 	.db #0x41	; 65	'A'
      00032A 30                    7581 	.db #0x30	; 48	'0'
      00032B 48                    7582 	.db #0x48	; 72	'H'
      00032C 48                    7583 	.db #0x48	; 72	'H'
      00032D 4A                    7584 	.db #0x4a	; 74	'J'
      00032E 32                    7585 	.db #0x32	; 50	'2'
      00032F 38                    7586 	.db #0x38	; 56	'8'
      000330 40                    7587 	.db #0x40	; 64
      000331 40                    7588 	.db #0x40	; 64
      000332 22                    7589 	.db #0x22	; 34
      000333 7A                    7590 	.db #0x7a	; 122	'z'
      000334 00                    7591 	.db #0x00	; 0
      000335 7A                    7592 	.db #0x7a	; 122	'z'
      000336 0A                    7593 	.db #0x0a	; 10
      000337 0A                    7594 	.db #0x0a	; 10
      000338 72                    7595 	.db #0x72	; 114	'r'
      000339 7D                    7596 	.db #0x7d	; 125
      00033A 0D                    7597 	.db #0x0d	; 13
      00033B 19                    7598 	.db #0x19	; 25
      00033C 31                    7599 	.db #0x31	; 49	'1'
      00033D 7D                    7600 	.db #0x7d	; 125
      00033E 26                    7601 	.db #0x26	; 38
      00033F 29                    7602 	.db #0x29	; 41
      000340 29                    7603 	.db #0x29	; 41
      000341 2F                    7604 	.db #0x2f	; 47
      000342 28                    7605 	.db #0x28	; 40
      000343 26                    7606 	.db #0x26	; 38
      000344 29                    7607 	.db #0x29	; 41
      000345 29                    7608 	.db #0x29	; 41
      000346 29                    7609 	.db #0x29	; 41
      000347 26                    7610 	.db #0x26	; 38
      000348 30                    7611 	.db #0x30	; 48	'0'
      000349 48                    7612 	.db #0x48	; 72	'H'
      00034A 4D                    7613 	.db #0x4d	; 77	'M'
      00034B 40                    7614 	.db #0x40	; 64
      00034C 20                    7615 	.db #0x20	; 32
      00034D 38                    7616 	.db #0x38	; 56	'8'
      00034E 08                    7617 	.db #0x08	; 8
      00034F 08                    7618 	.db #0x08	; 8
      000350 08                    7619 	.db #0x08	; 8
      000351 08                    7620 	.db #0x08	; 8
      000352 08                    7621 	.db #0x08	; 8
      000353 08                    7622 	.db #0x08	; 8
      000354 08                    7623 	.db #0x08	; 8
      000355 08                    7624 	.db #0x08	; 8
      000356 38                    7625 	.db #0x38	; 56	'8'
      000357 2F                    7626 	.db #0x2f	; 47
      000358 10                    7627 	.db #0x10	; 16
      000359 C8                    7628 	.db #0xc8	; 200
      00035A AC                    7629 	.db #0xac	; 172
      00035B BA                    7630 	.db #0xba	; 186
      00035C 2F                    7631 	.db #0x2f	; 47
      00035D 10                    7632 	.db #0x10	; 16
      00035E 28                    7633 	.db #0x28	; 40
      00035F 34                    7634 	.db #0x34	; 52	'4'
      000360 FA                    7635 	.db #0xfa	; 250
      000361 00                    7636 	.db #0x00	; 0
      000362 00                    7637 	.db #0x00	; 0
      000363 7B                    7638 	.db #0x7b	; 123
      000364 00                    7639 	.db #0x00	; 0
      000365 00                    7640 	.db #0x00	; 0
      000366 08                    7641 	.db #0x08	; 8
      000367 14                    7642 	.db #0x14	; 20
      000368 2A                    7643 	.db #0x2a	; 42
      000369 14                    7644 	.db #0x14	; 20
      00036A 22                    7645 	.db #0x22	; 34
      00036B 22                    7646 	.db #0x22	; 34
      00036C 14                    7647 	.db #0x14	; 20
      00036D 2A                    7648 	.db #0x2a	; 42
      00036E 14                    7649 	.db #0x14	; 20
      00036F 08                    7650 	.db #0x08	; 8
      000370 AA                    7651 	.db #0xaa	; 170
      000371 00                    7652 	.db #0x00	; 0
      000372 55                    7653 	.db #0x55	; 85	'U'
      000373 00                    7654 	.db #0x00	; 0
      000374 AA                    7655 	.db #0xaa	; 170
      000375 AA                    7656 	.db #0xaa	; 170
      000376 55                    7657 	.db #0x55	; 85	'U'
      000377 AA                    7658 	.db #0xaa	; 170
      000378 55                    7659 	.db #0x55	; 85	'U'
      000379 AA                    7660 	.db #0xaa	; 170
      00037A 00                    7661 	.db #0x00	; 0
      00037B 00                    7662 	.db #0x00	; 0
      00037C 00                    7663 	.db #0x00	; 0
      00037D FF                    7664 	.db #0xff	; 255
      00037E 00                    7665 	.db #0x00	; 0
      00037F 10                    7666 	.db #0x10	; 16
      000380 10                    7667 	.db #0x10	; 16
      000381 10                    7668 	.db #0x10	; 16
      000382 FF                    7669 	.db #0xff	; 255
      000383 00                    7670 	.db #0x00	; 0
      000384 14                    7671 	.db #0x14	; 20
      000385 14                    7672 	.db #0x14	; 20
      000386 14                    7673 	.db #0x14	; 20
      000387 FF                    7674 	.db #0xff	; 255
      000388 00                    7675 	.db #0x00	; 0
      000389 10                    7676 	.db #0x10	; 16
      00038A 10                    7677 	.db #0x10	; 16
      00038B FF                    7678 	.db #0xff	; 255
      00038C 00                    7679 	.db #0x00	; 0
      00038D FF                    7680 	.db #0xff	; 255
      00038E 10                    7681 	.db #0x10	; 16
      00038F 10                    7682 	.db #0x10	; 16
      000390 F0                    7683 	.db #0xf0	; 240
      000391 10                    7684 	.db #0x10	; 16
      000392 F0                    7685 	.db #0xf0	; 240
      000393 14                    7686 	.db #0x14	; 20
      000394 14                    7687 	.db #0x14	; 20
      000395 14                    7688 	.db #0x14	; 20
      000396 FC                    7689 	.db #0xfc	; 252
      000397 00                    7690 	.db #0x00	; 0
      000398 14                    7691 	.db #0x14	; 20
      000399 14                    7692 	.db #0x14	; 20
      00039A F7                    7693 	.db #0xf7	; 247
      00039B 00                    7694 	.db #0x00	; 0
      00039C FF                    7695 	.db #0xff	; 255
      00039D 00                    7696 	.db #0x00	; 0
      00039E 00                    7697 	.db #0x00	; 0
      00039F FF                    7698 	.db #0xff	; 255
      0003A0 00                    7699 	.db #0x00	; 0
      0003A1 FF                    7700 	.db #0xff	; 255
      0003A2 14                    7701 	.db #0x14	; 20
      0003A3 14                    7702 	.db #0x14	; 20
      0003A4 F4                    7703 	.db #0xf4	; 244
      0003A5 04                    7704 	.db #0x04	; 4
      0003A6 FC                    7705 	.db #0xfc	; 252
      0003A7 14                    7706 	.db #0x14	; 20
      0003A8 14                    7707 	.db #0x14	; 20
      0003A9 17                    7708 	.db #0x17	; 23
      0003AA 10                    7709 	.db #0x10	; 16
      0003AB 1F                    7710 	.db #0x1f	; 31
      0003AC 10                    7711 	.db #0x10	; 16
      0003AD 10                    7712 	.db #0x10	; 16
      0003AE 1F                    7713 	.db #0x1f	; 31
      0003AF 10                    7714 	.db #0x10	; 16
      0003B0 1F                    7715 	.db #0x1f	; 31
      0003B1 14                    7716 	.db #0x14	; 20
      0003B2 14                    7717 	.db #0x14	; 20
      0003B3 14                    7718 	.db #0x14	; 20
      0003B4 1F                    7719 	.db #0x1f	; 31
      0003B5 00                    7720 	.db #0x00	; 0
      0003B6 10                    7721 	.db #0x10	; 16
      0003B7 10                    7722 	.db #0x10	; 16
      0003B8 10                    7723 	.db #0x10	; 16
      0003B9 F0                    7724 	.db #0xf0	; 240
      0003BA 00                    7725 	.db #0x00	; 0
      0003BB 00                    7726 	.db #0x00	; 0
      0003BC 00                    7727 	.db #0x00	; 0
      0003BD 00                    7728 	.db #0x00	; 0
      0003BE 1F                    7729 	.db #0x1f	; 31
      0003BF 10                    7730 	.db #0x10	; 16
      0003C0 10                    7731 	.db #0x10	; 16
      0003C1 10                    7732 	.db #0x10	; 16
      0003C2 10                    7733 	.db #0x10	; 16
      0003C3 1F                    7734 	.db #0x1f	; 31
      0003C4 10                    7735 	.db #0x10	; 16
      0003C5 10                    7736 	.db #0x10	; 16
      0003C6 10                    7737 	.db #0x10	; 16
      0003C7 10                    7738 	.db #0x10	; 16
      0003C8 F0                    7739 	.db #0xf0	; 240
      0003C9 10                    7740 	.db #0x10	; 16
      0003CA 00                    7741 	.db #0x00	; 0
      0003CB 00                    7742 	.db #0x00	; 0
      0003CC 00                    7743 	.db #0x00	; 0
      0003CD FF                    7744 	.db #0xff	; 255
      0003CE 10                    7745 	.db #0x10	; 16
      0003CF 10                    7746 	.db #0x10	; 16
      0003D0 10                    7747 	.db #0x10	; 16
      0003D1 10                    7748 	.db #0x10	; 16
      0003D2 10                    7749 	.db #0x10	; 16
      0003D3 10                    7750 	.db #0x10	; 16
      0003D4 10                    7751 	.db #0x10	; 16
      0003D5 10                    7752 	.db #0x10	; 16
      0003D6 10                    7753 	.db #0x10	; 16
      0003D7 FF                    7754 	.db #0xff	; 255
      0003D8 10                    7755 	.db #0x10	; 16
      0003D9 00                    7756 	.db #0x00	; 0
      0003DA 00                    7757 	.db #0x00	; 0
      0003DB 00                    7758 	.db #0x00	; 0
      0003DC FF                    7759 	.db #0xff	; 255
      0003DD 14                    7760 	.db #0x14	; 20
      0003DE 00                    7761 	.db #0x00	; 0
      0003DF 00                    7762 	.db #0x00	; 0
      0003E0 FF                    7763 	.db #0xff	; 255
      0003E1 00                    7764 	.db #0x00	; 0
      0003E2 FF                    7765 	.db #0xff	; 255
      0003E3 00                    7766 	.db #0x00	; 0
      0003E4 00                    7767 	.db #0x00	; 0
      0003E5 1F                    7768 	.db #0x1f	; 31
      0003E6 10                    7769 	.db #0x10	; 16
      0003E7 17                    7770 	.db #0x17	; 23
      0003E8 00                    7771 	.db #0x00	; 0
      0003E9 00                    7772 	.db #0x00	; 0
      0003EA FC                    7773 	.db #0xfc	; 252
      0003EB 04                    7774 	.db #0x04	; 4
      0003EC F4                    7775 	.db #0xf4	; 244
      0003ED 14                    7776 	.db #0x14	; 20
      0003EE 14                    7777 	.db #0x14	; 20
      0003EF 17                    7778 	.db #0x17	; 23
      0003F0 10                    7779 	.db #0x10	; 16
      0003F1 17                    7780 	.db #0x17	; 23
      0003F2 14                    7781 	.db #0x14	; 20
      0003F3 14                    7782 	.db #0x14	; 20
      0003F4 F4                    7783 	.db #0xf4	; 244
      0003F5 04                    7784 	.db #0x04	; 4
      0003F6 F4                    7785 	.db #0xf4	; 244
      0003F7 00                    7786 	.db #0x00	; 0
      0003F8 00                    7787 	.db #0x00	; 0
      0003F9 FF                    7788 	.db #0xff	; 255
      0003FA 00                    7789 	.db #0x00	; 0
      0003FB F7                    7790 	.db #0xf7	; 247
      0003FC 14                    7791 	.db #0x14	; 20
      0003FD 14                    7792 	.db #0x14	; 20
      0003FE 14                    7793 	.db #0x14	; 20
      0003FF 14                    7794 	.db #0x14	; 20
      000400 14                    7795 	.db #0x14	; 20
      000401 14                    7796 	.db #0x14	; 20
      000402 14                    7797 	.db #0x14	; 20
      000403 F7                    7798 	.db #0xf7	; 247
      000404 00                    7799 	.db #0x00	; 0
      000405 F7                    7800 	.db #0xf7	; 247
      000406 14                    7801 	.db #0x14	; 20
      000407 14                    7802 	.db #0x14	; 20
      000408 14                    7803 	.db #0x14	; 20
      000409 17                    7804 	.db #0x17	; 23
      00040A 14                    7805 	.db #0x14	; 20
      00040B 10                    7806 	.db #0x10	; 16
      00040C 10                    7807 	.db #0x10	; 16
      00040D 1F                    7808 	.db #0x1f	; 31
      00040E 10                    7809 	.db #0x10	; 16
      00040F 1F                    7810 	.db #0x1f	; 31
      000410 14                    7811 	.db #0x14	; 20
      000411 14                    7812 	.db #0x14	; 20
      000412 14                    7813 	.db #0x14	; 20
      000413 F4                    7814 	.db #0xf4	; 244
      000414 14                    7815 	.db #0x14	; 20
      000415 10                    7816 	.db #0x10	; 16
      000416 10                    7817 	.db #0x10	; 16
      000417 F0                    7818 	.db #0xf0	; 240
      000418 10                    7819 	.db #0x10	; 16
      000419 F0                    7820 	.db #0xf0	; 240
      00041A 00                    7821 	.db #0x00	; 0
      00041B 00                    7822 	.db #0x00	; 0
      00041C 1F                    7823 	.db #0x1f	; 31
      00041D 10                    7824 	.db #0x10	; 16
      00041E 1F                    7825 	.db #0x1f	; 31
      00041F 00                    7826 	.db #0x00	; 0
      000420 00                    7827 	.db #0x00	; 0
      000421 00                    7828 	.db #0x00	; 0
      000422 1F                    7829 	.db #0x1f	; 31
      000423 14                    7830 	.db #0x14	; 20
      000424 00                    7831 	.db #0x00	; 0
      000425 00                    7832 	.db #0x00	; 0
      000426 00                    7833 	.db #0x00	; 0
      000427 FC                    7834 	.db #0xfc	; 252
      000428 14                    7835 	.db #0x14	; 20
      000429 00                    7836 	.db #0x00	; 0
      00042A 00                    7837 	.db #0x00	; 0
      00042B F0                    7838 	.db #0xf0	; 240
      00042C 10                    7839 	.db #0x10	; 16
      00042D F0                    7840 	.db #0xf0	; 240
      00042E 10                    7841 	.db #0x10	; 16
      00042F 10                    7842 	.db #0x10	; 16
      000430 FF                    7843 	.db #0xff	; 255
      000431 10                    7844 	.db #0x10	; 16
      000432 FF                    7845 	.db #0xff	; 255
      000433 14                    7846 	.db #0x14	; 20
      000434 14                    7847 	.db #0x14	; 20
      000435 14                    7848 	.db #0x14	; 20
      000436 FF                    7849 	.db #0xff	; 255
      000437 14                    7850 	.db #0x14	; 20
      000438 10                    7851 	.db #0x10	; 16
      000439 10                    7852 	.db #0x10	; 16
      00043A 10                    7853 	.db #0x10	; 16
      00043B 1F                    7854 	.db #0x1f	; 31
      00043C 00                    7855 	.db #0x00	; 0
      00043D 00                    7856 	.db #0x00	; 0
      00043E 00                    7857 	.db #0x00	; 0
      00043F 00                    7858 	.db #0x00	; 0
      000440 F0                    7859 	.db #0xf0	; 240
      000441 10                    7860 	.db #0x10	; 16
      000442 FF                    7861 	.db #0xff	; 255
      000443 FF                    7862 	.db #0xff	; 255
      000444 FF                    7863 	.db #0xff	; 255
      000445 FF                    7864 	.db #0xff	; 255
      000446 FF                    7865 	.db #0xff	; 255
      000447 F0                    7866 	.db #0xf0	; 240
      000448 F0                    7867 	.db #0xf0	; 240
      000449 F0                    7868 	.db #0xf0	; 240
      00044A F0                    7869 	.db #0xf0	; 240
      00044B F0                    7870 	.db #0xf0	; 240
      00044C FF                    7871 	.db #0xff	; 255
      00044D FF                    7872 	.db #0xff	; 255
      00044E FF                    7873 	.db #0xff	; 255
      00044F 00                    7874 	.db #0x00	; 0
      000450 00                    7875 	.db #0x00	; 0
      000451 00                    7876 	.db #0x00	; 0
      000452 00                    7877 	.db #0x00	; 0
      000453 00                    7878 	.db #0x00	; 0
      000454 FF                    7879 	.db #0xff	; 255
      000455 FF                    7880 	.db #0xff	; 255
      000456 0F                    7881 	.db #0x0f	; 15
      000457 0F                    7882 	.db #0x0f	; 15
      000458 0F                    7883 	.db #0x0f	; 15
      000459 0F                    7884 	.db #0x0f	; 15
      00045A 0F                    7885 	.db #0x0f	; 15
      00045B 38                    7886 	.db #0x38	; 56	'8'
      00045C 44                    7887 	.db #0x44	; 68	'D'
      00045D 44                    7888 	.db #0x44	; 68	'D'
      00045E 38                    7889 	.db #0x38	; 56	'8'
      00045F 44                    7890 	.db #0x44	; 68	'D'
      000460 FC                    7891 	.db #0xfc	; 252
      000461 4A                    7892 	.db #0x4a	; 74	'J'
      000462 4A                    7893 	.db #0x4a	; 74	'J'
      000463 4A                    7894 	.db #0x4a	; 74	'J'
      000464 34                    7895 	.db #0x34	; 52	'4'
      000465 7E                    7896 	.db #0x7e	; 126
      000466 02                    7897 	.db #0x02	; 2
      000467 02                    7898 	.db #0x02	; 2
      000468 06                    7899 	.db #0x06	; 6
      000469 06                    7900 	.db #0x06	; 6
      00046A 02                    7901 	.db #0x02	; 2
      00046B 7E                    7902 	.db #0x7e	; 126
      00046C 02                    7903 	.db #0x02	; 2
      00046D 7E                    7904 	.db #0x7e	; 126
      00046E 02                    7905 	.db #0x02	; 2
      00046F 63                    7906 	.db #0x63	; 99	'c'
      000470 55                    7907 	.db #0x55	; 85	'U'
      000471 49                    7908 	.db #0x49	; 73	'I'
      000472 41                    7909 	.db #0x41	; 65	'A'
      000473 63                    7910 	.db #0x63	; 99	'c'
      000474 38                    7911 	.db #0x38	; 56	'8'
      000475 44                    7912 	.db #0x44	; 68	'D'
      000476 44                    7913 	.db #0x44	; 68	'D'
      000477 3C                    7914 	.db #0x3c	; 60
      000478 04                    7915 	.db #0x04	; 4
      000479 40                    7916 	.db #0x40	; 64
      00047A 7E                    7917 	.db #0x7e	; 126
      00047B 20                    7918 	.db #0x20	; 32
      00047C 1E                    7919 	.db #0x1e	; 30
      00047D 20                    7920 	.db #0x20	; 32
      00047E 06                    7921 	.db #0x06	; 6
      00047F 02                    7922 	.db #0x02	; 2
      000480 7E                    7923 	.db #0x7e	; 126
      000481 02                    7924 	.db #0x02	; 2
      000482 02                    7925 	.db #0x02	; 2
      000483 99                    7926 	.db #0x99	; 153
      000484 A5                    7927 	.db #0xa5	; 165
      000485 E7                    7928 	.db #0xe7	; 231
      000486 A5                    7929 	.db #0xa5	; 165
      000487 99                    7930 	.db #0x99	; 153
      000488 1C                    7931 	.db #0x1c	; 28
      000489 2A                    7932 	.db #0x2a	; 42
      00048A 49                    7933 	.db #0x49	; 73	'I'
      00048B 2A                    7934 	.db #0x2a	; 42
      00048C 1C                    7935 	.db #0x1c	; 28
      00048D 4C                    7936 	.db #0x4c	; 76	'L'
      00048E 72                    7937 	.db #0x72	; 114	'r'
      00048F 01                    7938 	.db #0x01	; 1
      000490 72                    7939 	.db #0x72	; 114	'r'
      000491 4C                    7940 	.db #0x4c	; 76	'L'
      000492 30                    7941 	.db #0x30	; 48	'0'
      000493 4A                    7942 	.db #0x4a	; 74	'J'
      000494 4D                    7943 	.db #0x4d	; 77	'M'
      000495 4D                    7944 	.db #0x4d	; 77	'M'
      000496 30                    7945 	.db #0x30	; 48	'0'
      000497 30                    7946 	.db #0x30	; 48	'0'
      000498 48                    7947 	.db #0x48	; 72	'H'
      000499 78                    7948 	.db #0x78	; 120	'x'
      00049A 48                    7949 	.db #0x48	; 72	'H'
      00049B 30                    7950 	.db #0x30	; 48	'0'
      00049C BC                    7951 	.db #0xbc	; 188
      00049D 62                    7952 	.db #0x62	; 98	'b'
      00049E 5A                    7953 	.db #0x5a	; 90	'Z'
      00049F 46                    7954 	.db #0x46	; 70	'F'
      0004A0 3D                    7955 	.db #0x3d	; 61
      0004A1 3E                    7956 	.db #0x3e	; 62
      0004A2 49                    7957 	.db #0x49	; 73	'I'
      0004A3 49                    7958 	.db #0x49	; 73	'I'
      0004A4 49                    7959 	.db #0x49	; 73	'I'
      0004A5 00                    7960 	.db #0x00	; 0
      0004A6 7E                    7961 	.db #0x7e	; 126
      0004A7 01                    7962 	.db #0x01	; 1
      0004A8 01                    7963 	.db #0x01	; 1
      0004A9 01                    7964 	.db #0x01	; 1
      0004AA 7E                    7965 	.db #0x7e	; 126
      0004AB 2A                    7966 	.db #0x2a	; 42
      0004AC 2A                    7967 	.db #0x2a	; 42
      0004AD 2A                    7968 	.db #0x2a	; 42
      0004AE 2A                    7969 	.db #0x2a	; 42
      0004AF 2A                    7970 	.db #0x2a	; 42
      0004B0 44                    7971 	.db #0x44	; 68	'D'
      0004B1 44                    7972 	.db #0x44	; 68	'D'
      0004B2 5F                    7973 	.db #0x5f	; 95
      0004B3 44                    7974 	.db #0x44	; 68	'D'
      0004B4 44                    7975 	.db #0x44	; 68	'D'
      0004B5 40                    7976 	.db #0x40	; 64
      0004B6 51                    7977 	.db #0x51	; 81	'Q'
      0004B7 4A                    7978 	.db #0x4a	; 74	'J'
      0004B8 44                    7979 	.db #0x44	; 68	'D'
      0004B9 40                    7980 	.db #0x40	; 64
      0004BA 40                    7981 	.db #0x40	; 64
      0004BB 44                    7982 	.db #0x44	; 68	'D'
      0004BC 4A                    7983 	.db #0x4a	; 74	'J'
      0004BD 51                    7984 	.db #0x51	; 81	'Q'
      0004BE 40                    7985 	.db #0x40	; 64
      0004BF 00                    7986 	.db #0x00	; 0
      0004C0 00                    7987 	.db #0x00	; 0
      0004C1 FF                    7988 	.db #0xff	; 255
      0004C2 01                    7989 	.db #0x01	; 1
      0004C3 03                    7990 	.db #0x03	; 3
      0004C4 E0                    7991 	.db #0xe0	; 224
      0004C5 80                    7992 	.db #0x80	; 128
      0004C6 FF                    7993 	.db #0xff	; 255
      0004C7 00                    7994 	.db #0x00	; 0
      0004C8 00                    7995 	.db #0x00	; 0
      0004C9 08                    7996 	.db #0x08	; 8
      0004CA 08                    7997 	.db #0x08	; 8
      0004CB 6B                    7998 	.db #0x6b	; 107	'k'
      0004CC 6B                    7999 	.db #0x6b	; 107	'k'
      0004CD 08                    8000 	.db #0x08	; 8
      0004CE 36                    8001 	.db #0x36	; 54	'6'
      0004CF 12                    8002 	.db #0x12	; 18
      0004D0 36                    8003 	.db #0x36	; 54	'6'
      0004D1 24                    8004 	.db #0x24	; 36
      0004D2 36                    8005 	.db #0x36	; 54	'6'
      0004D3 06                    8006 	.db #0x06	; 6
      0004D4 0F                    8007 	.db #0x0f	; 15
      0004D5 09                    8008 	.db #0x09	; 9
      0004D6 0F                    8009 	.db #0x0f	; 15
      0004D7 06                    8010 	.db #0x06	; 6
      0004D8 00                    8011 	.db #0x00	; 0
      0004D9 00                    8012 	.db #0x00	; 0
      0004DA 18                    8013 	.db #0x18	; 24
      0004DB 18                    8014 	.db #0x18	; 24
      0004DC 00                    8015 	.db #0x00	; 0
      0004DD 00                    8016 	.db #0x00	; 0
      0004DE 00                    8017 	.db #0x00	; 0
      0004DF 10                    8018 	.db #0x10	; 16
      0004E0 10                    8019 	.db #0x10	; 16
      0004E1 00                    8020 	.db #0x00	; 0
      0004E2 30                    8021 	.db #0x30	; 48	'0'
      0004E3 40                    8022 	.db #0x40	; 64
      0004E4 FF                    8023 	.db #0xff	; 255
      0004E5 01                    8024 	.db #0x01	; 1
      0004E6 01                    8025 	.db #0x01	; 1
      0004E7 00                    8026 	.db #0x00	; 0
      0004E8 1F                    8027 	.db #0x1f	; 31
      0004E9 01                    8028 	.db #0x01	; 1
      0004EA 01                    8029 	.db #0x01	; 1
      0004EB 1E                    8030 	.db #0x1e	; 30
      0004EC 00                    8031 	.db #0x00	; 0
      0004ED 19                    8032 	.db #0x19	; 25
      0004EE 1D                    8033 	.db #0x1d	; 29
      0004EF 17                    8034 	.db #0x17	; 23
      0004F0 12                    8035 	.db #0x12	; 18
      0004F1 00                    8036 	.db #0x00	; 0
      0004F2 3C                    8037 	.db #0x3c	; 60
      0004F3 3C                    8038 	.db #0x3c	; 60
      0004F4 3C                    8039 	.db #0x3c	; 60
      0004F5 3C                    8040 	.db #0x3c	; 60
      0004F6 00                    8041 	.db #0x00	; 0
      0004F7 00                    8042 	.db #0x00	; 0
      0004F8 00                    8043 	.db #0x00	; 0
      0004F9 00                    8044 	.db #0x00	; 0
      0004FA 00                    8045 	.db #0x00	; 0
      0004FB                       8046 _keypad:
      0004FB 31                    8047 	.db #0x31	; 49	'1'
      0004FC 34                    8048 	.db #0x34	; 52	'4'
      0004FD 37                    8049 	.db #0x37	; 55	'7'
      0004FE 45                    8050 	.db #0x45	; 69	'E'
      0004FF 32                    8051 	.db #0x32	; 50	'2'
      000500 35                    8052 	.db #0x35	; 53	'5'
      000501 38                    8053 	.db #0x38	; 56	'8'
      000502 30                    8054 	.db #0x30	; 48	'0'
      000503 33                    8055 	.db #0x33	; 51	'3'
      000504 36                    8056 	.db #0x36	; 54	'6'
      000505 39                    8057 	.db #0x39	; 57	'9'
      000506 46                    8058 	.db #0x46	; 70	'F'
      000507 41                    8059 	.db #0x41	; 65	'A'
      000508 42                    8060 	.db #0x42	; 66	'B'
      000509 43                    8061 	.db #0x43	; 67	'C'
      00050A 44                    8062 	.db #0x44	; 68	'D'
                                   8063 	.area CONST   (CODE)
      00050B                       8064 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  8065 	.ascii "Welcome"
      000512 0A                    8066 	.db 0x0a
      000513 00                    8067 	.db 0x00
                                   8068 	.area CSEG    (CODE)
                                   8069 	.area CONST   (CODE)
      000514                       8070 ___str_1:
      000514 45 43 45 4E 2D 34 33  8071 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    8072 	.db 0x0a
      00051E 00                    8073 	.db 0x00
                                   8074 	.area CSEG    (CODE)
                                   8075 	.area CONST   (CODE)
      00051F                       8076 ___str_2:
      00051F 52 6F 74 61 74 69 6F  8077 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    8078 	.db 0x00
                                   8079 	.area CSEG    (CODE)
                                   8080 	.area CONST   (CODE)
      00052A                       8081 ___str_3:
      00052A 52 6F 74 61 74 69 6F  8082 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    8083 	.db 0x00
                                   8084 	.area CSEG    (CODE)
                                   8085 	.area CONST   (CODE)
      000535                       8086 ___str_4:
      000535 52 6F 74 61 74 69 6F  8087 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    8088 	.db 0x00
                                   8089 	.area CSEG    (CODE)
                                   8090 	.area CONST   (CODE)
      000540                       8091 ___str_5:
      000540 52 6F 74 61 74 69 6F  8092 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    8093 	.db 0x00
                                   8094 	.area CSEG    (CODE)
                                   8095 	.area CONST   (CODE)
      00054B                       8096 ___str_6:
      00054B 3A 20                 8097 	.ascii ": "
      00054D 00                    8098 	.db 0x00
                                   8099 	.area CSEG    (CODE)
                                   8100 	.area CONST   (CODE)
      00054E                       8101 ___str_7:
      00054E 45 6E 74 65 72 20 73  8102 	.ascii "Enter start address:"
             74 61 72 74 20 61 64
             64 72 65 73 73 3A
      000562 0A                    8103 	.db 0x0a
      000563 00                    8104 	.db 0x00
                                   8105 	.area CSEG    (CODE)
                                   8106 	.area CONST   (CODE)
      000564                       8107 ___str_8:
      000564 45 6E 74 65 72 20 64  8108 	.ascii "Enter data type"
             61 74 61 20 74 79 70
             65
      000573 0A                    8109 	.db 0x0a
      000574 00                    8110 	.db 0x00
                                   8111 	.area CSEG    (CODE)
                                   8112 	.area CONST   (CODE)
      000575                       8113 ___str_9:
      000575 42 2D 42 79 74 65 2C  8114 	.ascii "B-Byte, A-Word,"
             20 41 2D 57 6F 72 64
             2C
      000584 0A                    8115 	.db 0x0a
      000585 00                    8116 	.db 0x00
                                   8117 	.area CSEG    (CODE)
                                   8118 	.area CONST   (CODE)
      000586                       8119 ___str_10:
      000586 44 2D 44 6F 75 62 6C  8120 	.ascii "D-Double word"
             65 20 77 6F 72 64
      000593 0A                    8121 	.db 0x0a
      000594 00                    8122 	.db 0x00
                                   8123 	.area CSEG    (CODE)
                                   8124 	.area CONST   (CODE)
      000595                       8125 ___str_11:
      000595 42 79 74 65           8126 	.ascii "Byte"
      000599 0A                    8127 	.db 0x0a
      00059A 00                    8128 	.db 0x00
                                   8129 	.area CSEG    (CODE)
                                   8130 	.area CONST   (CODE)
      00059B                       8131 ___str_12:
      00059B 57 6F 72 64           8132 	.ascii "Word"
      00059F 0A                    8133 	.db 0x0a
      0005A0 00                    8134 	.db 0x00
                                   8135 	.area CSEG    (CODE)
                                   8136 	.area CONST   (CODE)
      0005A1                       8137 ___str_13:
      0005A1 44 6F 75 62 6C 65 20  8138 	.ascii "Double word"
             77 6F 72 64
      0005AC 0A                    8139 	.db 0x0a
      0005AD 00                    8140 	.db 0x00
                                   8141 	.area CSEG    (CODE)
                                   8142 	.area CONST   (CODE)
      0005AE                       8143 ___str_14:
      0005AE 45 6E 74 65 72 20 62  8144 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0005BF 0A                    8145 	.db 0x0a
      0005C0 00                    8146 	.db 0x00
                                   8147 	.area CSEG    (CODE)
                                   8148 	.area CONST   (CODE)
      0005C1                       8149 ___str_15:
      0005C1 50 72 65 73 73 20 42  8150 	.ascii "Press B for next"
             20 66 6F 72 20 6E 65
             78 74
      0005D1 0A                    8151 	.db 0x0a
      0005D2 00                    8152 	.db 0x00
                                   8153 	.area CSEG    (CODE)
                                   8154 	.area CONST   (CODE)
      0005D3                       8155 ___str_16:
      0005D3 50 72 65 73 73 20 41  8156 	.ascii "Press A for previous"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73
      0005E7 0A                    8157 	.db 0x0a
      0005E8 00                    8158 	.db 0x00
                                   8159 	.area CSEG    (CODE)
                                   8160 	.area CONST   (CODE)
      0005E9                       8161 ___str_17:
      0005E9 50 72 65 73 73 20 41  8162 	.ascii "Press A for previous, B for next"
             20 66 6F 72 20 70 72
             65 76 69 6F 75 73 2C
             20 42 20 66 6F 72 20
             6E 65 78 74
      000609 0A                    8163 	.db 0x0a
      00060A 00                    8164 	.db 0x00
                                   8165 	.area CSEG    (CODE)
                                   8166 	.area CONST   (CODE)
      00060B                       8167 ___str_18:
      00060B 50 72 65 73 73 20 31  8168 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00061B 0A                    8169 	.db 0x0a
      00061C 00                    8170 	.db 0x00
                                   8171 	.area CSEG    (CODE)
                                   8172 	.area CONST   (CODE)
      00061D                       8173 ___str_19:
      00061D 45 6E 74 65 72 20 62  8174 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      000630 0A                    8175 	.db 0x0a
      000631 00                    8176 	.db 0x00
                                   8177 	.area CSEG    (CODE)
                                   8178 	.area CONST   (CODE)
      000632                       8179 ___str_20:
      000632 49 6E 20 70 72 6F 67  8180 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      000640 0A                    8181 	.db 0x0a
      000641 00                    8182 	.db 0x00
                                   8183 	.area CSEG    (CODE)
                                   8184 	.area CONST   (CODE)
      000642                       8185 ___str_21:
      000642 4D 65 6D 6F 72 79 20  8186 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000655 0A                    8187 	.db 0x0a
      000656 00                    8188 	.db 0x00
                                   8189 	.area CSEG    (CODE)
                                   8190 	.area CONST   (CODE)
      000657                       8191 ___str_22:
      000657 53 75 63 63 65 73 73  8192 	.ascii "Success!"
             21
      00065F 0A                    8193 	.db 0x0a
      000660 00                    8194 	.db 0x00
                                   8195 	.area CSEG    (CODE)
                                   8196 	.area CONST   (CODE)
      000661                       8197 ___str_23:
      000661 50 72 65 73 73 20 31  8198 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      000671 00                    8199 	.db 0x00
                                   8200 	.area CSEG    (CODE)
                                   8201 	.area CONST   (CODE)
      000672                       8202 ___str_24:
      000672 45 6E 74 65 72 20 62  8203 	.ascii "Enter byte"
             79 74 65
      00067C 0A                    8204 	.db 0x0a
      00067D 00                    8205 	.db 0x00
                                   8206 	.area CSEG    (CODE)
                                   8207 	.area CONST   (CODE)
      00067E                       8208 ___str_25:
      00067E 45 6E 74 65 72 20 61  8209 	.ascii "Enter address"
             64 64 72 65 73 73
      00068B 0A                    8210 	.db 0x0a
      00068C 00                    8211 	.db 0x00
                                   8212 	.area CSEG    (CODE)
                                   8213 	.area CONST   (CODE)
      00068D                       8214 ___str_26:
      00068D 49 6E 20 70 72 6F 67  8215 	.ascii "In progress"
             72 65 73 73
      000698 0A                    8216 	.db 0x0a
      000699 00                    8217 	.db 0x00
                                   8218 	.area CSEG    (CODE)
                                   8219 	.area CONST   (CODE)
      00069A                       8220 ___str_27:
      00069A 20 66 65 74 63 68 65  8221 	.ascii " fetched!"
             64 21
      0006A3 0A                    8222 	.db 0x0a
      0006A4 53 75 63 63 65 73 73  8223 	.ascii "Success!"
             21
      0006AC 0A                    8224 	.db 0x0a
      0006AD 00                    8225 	.db 0x00
                                   8226 	.area CSEG    (CODE)
                                   8227 	.area CONST   (CODE)
      0006AE                       8228 ___str_28:
      0006AE 43 68 65 63 6B 20 66  8229 	.ascii "Check failed"
             61 69 6C 65 64
      0006BA 0A                    8230 	.db 0x0a
      0006BB 00                    8231 	.db 0x00
                                   8232 	.area CSEG    (CODE)
                                   8233 	.area CONST   (CODE)
      0006BC                       8234 ___str_29:
      0006BC 45 6E 74 65 72 20 73  8235 	.ascii "Enter start add."
             74 61 72 74 20 61 64
             64 2E
      0006CC 0A                    8236 	.db 0x0a
      0006CD 00                    8237 	.db 0x00
                                   8238 	.area CSEG    (CODE)
                                   8239 	.area CONST   (CODE)
      0006CE                       8240 ___str_30:
      0006CE 45 6E 74 65 72 20 73  8241 	.ascii "Enter size"
             69 7A 65
      0006D8 0A                    8242 	.db 0x0a
      0006D9 00                    8243 	.db 0x00
                                   8244 	.area CSEG    (CODE)
                                   8245 	.area CONST   (CODE)
      0006DA                       8246 ___str_31:
      0006DA 45 6E 74 65 72 20 74  8247 	.ascii "Enter target add."
             61 72 67 65 74 20 61
             64 64 2E
      0006EB 0A                    8248 	.db 0x0a
      0006EC 00                    8249 	.db 0x00
                                   8250 	.area CSEG    (CODE)
                                   8251 	.area CONST   (CODE)
      0006ED                       8252 ___str_32:
      0006ED 4D 6F 76 65 20 69 6E  8253 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      000700 0A                    8254 	.db 0x0a
      000701 00                    8255 	.db 0x00
                                   8256 	.area CSEG    (CODE)
                                   8257 	.area CONST   (CODE)
      000702                       8258 ___str_33:
      000702 44 6F 6E 65 21        8259 	.ascii "Done!"
      000707 0A                    8260 	.db 0x0a
      000708 00                    8261 	.db 0x00
                                   8262 	.area CSEG    (CODE)
                                   8263 	.area CONST   (CODE)
      000709                       8264 ___str_34:
      000709 45 6E 74 65 72 20 6E  8265 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      000718 0A                    8266 	.db 0x0a
      000719 00                    8267 	.db 0x00
                                   8268 	.area CSEG    (CODE)
                                   8269 	.area CONST   (CODE)
      00071A                       8270 ___str_35:
      00071A 45 6E 74 65 72 20 61  8271 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      000728 0A                    8272 	.db 0x0a
      000729 00                    8273 	.db 0x00
                                   8274 	.area CSEG    (CODE)
                                   8275 	.area CONST   (CODE)
      00072A                       8276 ___str_36:
      00072A 50 72 65 73 73 20 32  8277 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      00073F 0A                    8278 	.db 0x0a
      000740 00                    8279 	.db 0x00
                                   8280 	.area CSEG    (CODE)
                                   8281 	.area CONST   (CODE)
      000741                       8282 ___str_37:
      000741 50 72 65 73 73 20 33  8283 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      00075D 0A                    8284 	.db 0x0a
      00075E 00                    8285 	.db 0x00
                                   8286 	.area CSEG    (CODE)
                                   8287 	.area CONST   (CODE)
      00075F                       8288 ___str_38:
      00075F 45 6E 74 65 72 20 62  8289 	.ascii "Enter byte:"
             79 74 65 3A
      00076A 0A                    8290 	.db 0x0a
      00076B 00                    8291 	.db 0x00
                                   8292 	.area CSEG    (CODE)
                                   8293 	.area CONST   (CODE)
      00076C                       8294 ___str_39:
      00076C 45 6E 74 65 72 20 62  8295 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      000780 0A                    8296 	.db 0x0a
      000781 00                    8297 	.db 0x00
                                   8298 	.area CSEG    (CODE)
                                   8299 	.area CONST   (CODE)
      000782                       8300 ___str_40:
      000782 54 65 6D 70 65 72 61  8301 	.ascii "Temperature: "
             74 75 72 65 3A 20
      00078F 00                    8302 	.db 0x00
                                   8303 	.area CSEG    (CODE)
                                   8304 	.area CONST   (CODE)
      000790                       8305 ___str_41:
      000790 50 72 65 73 73 20 30  8306 	.ascii "Press 0 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0007A0 0A                    8307 	.db 0x0a
      0007A1 00                    8308 	.db 0x00
                                   8309 	.area CSEG    (CODE)
                                   8310 	.area CONST   (CODE)
      0007A2                       8311 ___str_42:
      0007A2 50 72 65 73 73 20 61  8312 	.ascii "Press any key to refresh"
             6E 79 20 6B 65 79 20
             74 6F 20 72 65 66 72
             65 73 68
      0007BA 0A                    8313 	.db 0x0a
      0007BB 00                    8314 	.db 0x00
                                   8315 	.area CSEG    (CODE)
                                   8316 	.area CONST   (CODE)
      0007BC                       8317 ___str_43:
      0007BC 4C 69 67 68 74 20 6C  8318 	.ascii "Light level: "
             65 76 65 6C 3A 20
      0007C9 00                    8319 	.db 0x00
                                   8320 	.area CSEG    (CODE)
                                   8321 	.area CONST   (CODE)
      0007CA                       8322 ___str_44:
      0007CA 42 72 61 6E 64 6F 6E  8323 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      0007D7 0A                    8324 	.db 0x0a
      0007D8 00                    8325 	.db 0x00
                                   8326 	.area CSEG    (CODE)
                                   8327 	.area CONST   (CODE)
      0007D9                       8328 ___str_45:
      0007D9 45 43 45 4E 20 34 33  8329 	.ascii "ECEN 4330"
             33 30
      0007E2 0A                    8330 	.db 0x0a
      0007E3 00                    8331 	.db 0x00
                                   8332 	.area CSEG    (CODE)
                                   8333 	.area CONST   (CODE)
      0007E4                       8334 ___str_46:
      0007E4 31 3A 20 42 61 73 69  8335 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      0007F2 0A                    8336 	.db 0x0a
      0007F3 00                    8337 	.db 0x00
                                   8338 	.area CSEG    (CODE)
                                   8339 	.area CONST   (CODE)
      0007F4                       8340 ___str_47:
      0007F4 32 3A 20 44 75 6D 70  8341 	.ascii "2: Dump"
      0007FB 0A                    8342 	.db 0x0a
      0007FC 00                    8343 	.db 0x00
                                   8344 	.area CSEG    (CODE)
                                   8345 	.area CONST   (CODE)
      0007FD                       8346 ___str_48:
      0007FD 33 3A 20 43 68 65 63  8347 	.ascii "3: Check"
             6B
      000805 0A                    8348 	.db 0x0a
      000806 00                    8349 	.db 0x00
                                   8350 	.area CSEG    (CODE)
                                   8351 	.area CONST   (CODE)
      000807                       8352 ___str_49:
      000807 41 3A 20 4D 6F 76 65  8353 	.ascii "A: Move"
      00080E 0A                    8354 	.db 0x0a
      00080F 00                    8355 	.db 0x00
                                   8356 	.area CSEG    (CODE)
                                   8357 	.area CONST   (CODE)
      000810                       8358 ___str_50:
      000810 34 3A 20 45 64 69 74  8359 	.ascii "4: Edit"
      000817 0A                    8360 	.db 0x0a
      000818 00                    8361 	.db 0x00
                                   8362 	.area CSEG    (CODE)
                                   8363 	.area CONST   (CODE)
      000819                       8364 ___str_51:
      000819 35 3A 20 46 69 6E 64  8365 	.ascii "5: Find"
      000820 0A                    8366 	.db 0x0a
      000821 00                    8367 	.db 0x00
                                   8368 	.area CSEG    (CODE)
                                   8369 	.area CONST   (CODE)
      000822                       8370 ___str_52:
      000822 36 3A 20 43 6F 75 6E  8371 	.ascii "6: Count"
             74
      00082A 0A                    8372 	.db 0x0a
      00082B 00                    8373 	.db 0x00
                                   8374 	.area CSEG    (CODE)
                                   8375 	.area CONST   (CODE)
      00082C                       8376 ___str_53:
      00082C 42 3A 20 54 65 6D 70  8377 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      00083A 0A                    8378 	.db 0x0a
      00083B 00                    8379 	.db 0x00
                                   8380 	.area CSEG    (CODE)
                                   8381 	.area CONST   (CODE)
      00083C                       8382 ___str_54:
      00083C 37 3A 20 4C 69 67 68  8383 	.ascii "7: Light"
             74
      000844 0A                    8384 	.db 0x0a
      000845 00                    8385 	.db 0x00
                                   8386 	.area CSEG    (CODE)
                                   8387 	.area XINIT   (CODE)
                                   8388 	.area CABS    (ABS,CODE)
