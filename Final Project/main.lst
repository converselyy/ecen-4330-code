                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _editByte
                                     23 	.globl _basic
                                     24 	.globl _writeSomeLines
                                     25 	.globl _convertAsciiHex
                                     26 	.globl _write
                                     27 	.globl _drawChar
                                     28 	.globl _setRotation
                                     29 	.globl _iowrite8
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _B
                                    106 	.globl _ACC
                                    107 	.globl _PSW
                                    108 	.globl _IP
                                    109 	.globl _P3
                                    110 	.globl _IE
                                    111 	.globl _P2
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _P1
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _P0
                                    126 	.globl _drawChar_PARM_6
                                    127 	.globl _drawChar_PARM_5
                                    128 	.globl _drawChar_PARM_4
                                    129 	.globl _drawChar_PARM_3
                                    130 	.globl _drawChar_PARM_2
                                    131 	.globl _fillRect_PARM_5
                                    132 	.globl _fillRect_PARM_4
                                    133 	.globl _fillRect_PARM_3
                                    134 	.globl _fillRect_PARM_2
                                    135 	.globl _testCircles_PARM_2
                                    136 	.globl _drawCircle_PARM_4
                                    137 	.globl _drawCircle_PARM_3
                                    138 	.globl _drawCircle_PARM_2
                                    139 	.globl _drawPixel_PARM_3
                                    140 	.globl _drawPixel_PARM_2
                                    141 	.globl __height
                                    142 	.globl __width
                                    143 	.globl _textbgcolor
                                    144 	.globl _textcolor
                                    145 	.globl _rotation
                                    146 	.globl _textsize
                                    147 	.globl _cursor_y
                                    148 	.globl _cursor_x
                                    149 	.globl _read_ram_address
                                    150 	.globl _light_address
                                    151 	.globl _temp_address
                                    152 	.globl _seg7_address
                                    153 	.globl _lcd_address
                                    154 	.globl _rowloc
                                    155 	.globl _colloc
                                    156 	.globl _delay
                                    157 	.globl _writeRegister8
                                    158 	.globl _writeRegister16
                                    159 	.globl _setCursor
                                    160 	.globl _setTextColor
                                    161 	.globl _setTextSize
                                    162 	.globl _setAddress
                                    163 	.globl _TFT_LCD_INIT
                                    164 	.globl _drawPixel
                                    165 	.globl _drawCircle
                                    166 	.globl _testCircles
                                    167 	.globl _fillRect
                                    168 	.globl _fillScreen
                                    169 	.globl _LCD_string_write
                                    170 	.globl _testRAM
                                    171 	.globl _freeType
                                    172 	.globl _keyDetect
                                    173 	.globl _reverse
                                    174 	.globl _asciiToDec
                                    175 	.globl _asciiToHex
                                    176 	.globl _getAddress
                                    177 	.globl _getByte
                                    178 	.globl _check
                                    179 	.globl _move
                                    180 	.globl _edit
                                    181 	.globl _count
                                    182 	.globl _readTemp
                                    183 	.globl _readLight
                                    184 	.globl _displayTemp
                                    185 	.globl _displayLight
                                    186 	.globl _temperature
                                    187 	.globl _light
                                    188 ;--------------------------------------------------------
                                    189 ; special function registers
                                    190 ;--------------------------------------------------------
                                    191 	.area RSEG    (ABS,DATA)
      000000                        192 	.org 0x0000
                           000080   193 _P0	=	0x0080
                           000081   194 _SP	=	0x0081
                           000082   195 _DPL	=	0x0082
                           000083   196 _DPH	=	0x0083
                           000087   197 _PCON	=	0x0087
                           000088   198 _TCON	=	0x0088
                           000089   199 _TMOD	=	0x0089
                           00008A   200 _TL0	=	0x008a
                           00008B   201 _TL1	=	0x008b
                           00008C   202 _TH0	=	0x008c
                           00008D   203 _TH1	=	0x008d
                           000090   204 _P1	=	0x0090
                           000098   205 _SCON	=	0x0098
                           000099   206 _SBUF	=	0x0099
                           0000A0   207 _P2	=	0x00a0
                           0000A8   208 _IE	=	0x00a8
                           0000B0   209 _P3	=	0x00b0
                           0000B8   210 _IP	=	0x00b8
                           0000D0   211 _PSW	=	0x00d0
                           0000E0   212 _ACC	=	0x00e0
                           0000F0   213 _B	=	0x00f0
                                    214 ;--------------------------------------------------------
                                    215 ; special function bits
                                    216 ;--------------------------------------------------------
                                    217 	.area RSEG    (ABS,DATA)
      000000                        218 	.org 0x0000
                           000080   219 _P0_0	=	0x0080
                           000081   220 _P0_1	=	0x0081
                           000082   221 _P0_2	=	0x0082
                           000083   222 _P0_3	=	0x0083
                           000084   223 _P0_4	=	0x0084
                           000085   224 _P0_5	=	0x0085
                           000086   225 _P0_6	=	0x0086
                           000087   226 _P0_7	=	0x0087
                           000088   227 _IT0	=	0x0088
                           000089   228 _IE0	=	0x0089
                           00008A   229 _IT1	=	0x008a
                           00008B   230 _IE1	=	0x008b
                           00008C   231 _TR0	=	0x008c
                           00008D   232 _TF0	=	0x008d
                           00008E   233 _TR1	=	0x008e
                           00008F   234 _TF1	=	0x008f
                           000090   235 _P1_0	=	0x0090
                           000091   236 _P1_1	=	0x0091
                           000092   237 _P1_2	=	0x0092
                           000093   238 _P1_3	=	0x0093
                           000094   239 _P1_4	=	0x0094
                           000095   240 _P1_5	=	0x0095
                           000096   241 _P1_6	=	0x0096
                           000097   242 _P1_7	=	0x0097
                           000098   243 _RI	=	0x0098
                           000099   244 _TI	=	0x0099
                           00009A   245 _RB8	=	0x009a
                           00009B   246 _TB8	=	0x009b
                           00009C   247 _REN	=	0x009c
                           00009D   248 _SM2	=	0x009d
                           00009E   249 _SM1	=	0x009e
                           00009F   250 _SM0	=	0x009f
                           0000A0   251 _P2_0	=	0x00a0
                           0000A1   252 _P2_1	=	0x00a1
                           0000A2   253 _P2_2	=	0x00a2
                           0000A3   254 _P2_3	=	0x00a3
                           0000A4   255 _P2_4	=	0x00a4
                           0000A5   256 _P2_5	=	0x00a5
                           0000A6   257 _P2_6	=	0x00a6
                           0000A7   258 _P2_7	=	0x00a7
                           0000A8   259 _EX0	=	0x00a8
                           0000A9   260 _ET0	=	0x00a9
                           0000AA   261 _EX1	=	0x00aa
                           0000AB   262 _ET1	=	0x00ab
                           0000AC   263 _ES	=	0x00ac
                           0000AF   264 _EA	=	0x00af
                           0000B0   265 _P3_0	=	0x00b0
                           0000B1   266 _P3_1	=	0x00b1
                           0000B2   267 _P3_2	=	0x00b2
                           0000B3   268 _P3_3	=	0x00b3
                           0000B4   269 _P3_4	=	0x00b4
                           0000B5   270 _P3_5	=	0x00b5
                           0000B6   271 _P3_6	=	0x00b6
                           0000B7   272 _P3_7	=	0x00b7
                           0000B0   273 _RXD	=	0x00b0
                           0000B1   274 _TXD	=	0x00b1
                           0000B2   275 _INT0	=	0x00b2
                           0000B3   276 _INT1	=	0x00b3
                           0000B4   277 _T0	=	0x00b4
                           0000B5   278 _T1	=	0x00b5
                           0000B6   279 _WR	=	0x00b6
                           0000B7   280 _RD	=	0x00b7
                           0000B8   281 _PX0	=	0x00b8
                           0000B9   282 _PT0	=	0x00b9
                           0000BA   283 _PX1	=	0x00ba
                           0000BB   284 _PT1	=	0x00bb
                           0000BC   285 _PS	=	0x00bc
                           0000D0   286 _P	=	0x00d0
                           0000D1   287 _F1	=	0x00d1
                           0000D2   288 _OV	=	0x00d2
                           0000D3   289 _RS0	=	0x00d3
                           0000D4   290 _RS1	=	0x00d4
                           0000D5   291 _F0	=	0x00d5
                           0000D6   292 _AC	=	0x00d6
                           0000D7   293 _CY	=	0x00d7
                                    294 ;--------------------------------------------------------
                                    295 ; overlayable register banks
                                    296 ;--------------------------------------------------------
                                    297 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        298 	.ds 8
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
      000000                        303 _colloc::
      000000                        304 	.ds 1
      000001                        305 _rowloc::
      000001                        306 	.ds 1
      000002                        307 _lcd_address::
      000002                        308 	.ds 2
      000004                        309 _seg7_address::
      000004                        310 	.ds 2
      000006                        311 _temp_address::
      000006                        312 	.ds 2
      000008                        313 _light_address::
      000008                        314 	.ds 2
      00000A                        315 _read_ram_address::
      00000A                        316 	.ds 2
      00000C                        317 _cursor_x::
      00000C                        318 	.ds 2
      00000E                        319 _cursor_y::
      00000E                        320 	.ds 2
      000010                        321 _textsize::
      000010                        322 	.ds 1
      000011                        323 _rotation::
      000011                        324 	.ds 1
      000012                        325 _textcolor::
      000012                        326 	.ds 2
      000014                        327 _textbgcolor::
      000014                        328 	.ds 2
      000016                        329 __width::
      000016                        330 	.ds 2
      000018                        331 __height::
      000018                        332 	.ds 2
      00001A                        333 _drawPixel_PARM_2:
      00001A                        334 	.ds 2
      00001C                        335 _drawPixel_PARM_3:
      00001C                        336 	.ds 2
      00001E                        337 _drawCircle_PARM_2:
      00001E                        338 	.ds 2
      000020                        339 _drawCircle_PARM_3:
      000020                        340 	.ds 2
      000022                        341 _drawCircle_PARM_4:
      000022                        342 	.ds 2
      000024                        343 _drawCircle_x0_65536_103:
      000024                        344 	.ds 2
      000026                        345 _drawCircle_f_65536_104:
      000026                        346 	.ds 2
      000028                        347 _drawCircle_ddF_x_65536_104:
      000028                        348 	.ds 2
      00002A                        349 _drawCircle_x_65536_104:
      00002A                        350 	.ds 2
      00002C                        351 _drawCircle_sloc0_1_0:
      00002C                        352 	.ds 2
      00002E                        353 _drawCircle_sloc1_1_0:
      00002E                        354 	.ds 2
      000030                        355 _drawCircle_sloc2_1_0:
      000030                        356 	.ds 2
      000032                        357 _testCircles_PARM_2:
      000032                        358 	.ds 2
      000034                        359 _testCircles_w_65536_108:
      000034                        360 	.ds 2
      000036                        361 _testCircles_h_65536_108:
      000036                        362 	.ds 2
      000038                        363 _fillRect_PARM_2:
      000038                        364 	.ds 2
      00003A                        365 _fillRect_PARM_3:
      00003A                        366 	.ds 2
      00003C                        367 _fillRect_PARM_4:
      00003C                        368 	.ds 2
      00003E                        369 _fillRect_PARM_5:
      00003E                        370 	.ds 2
      000040                        371 _drawChar_PARM_2:
      000040                        372 	.ds 2
      000042                        373 _drawChar_PARM_3:
      000042                        374 	.ds 1
      000043                        375 _drawChar_PARM_4:
      000043                        376 	.ds 2
      000045                        377 _drawChar_PARM_5:
      000045                        378 	.ds 2
      000047                        379 _drawChar_PARM_6:
      000047                        380 	.ds 1
      000048                        381 _drawChar_i_65537_149:
      000048                        382 	.ds 1
      000049                        383 _drawChar_line_196609_151:
      000049                        384 	.ds 1
      00004A                        385 _drawChar_j_196610_154:
      00004A                        386 	.ds 1
      00004B                        387 _drawChar_sloc1_1_0:
      00004B                        388 	.ds 2
      00004D                        389 _drawChar_sloc2_1_0:
      00004D                        390 	.ds 2
      00004F                        391 _asciiToHex_store_65536_200:
      00004F                        392 	.ds 2
      000051                        393 _move_target_65537_243:
      000051                        394 	.ds 2
                                    395 ;--------------------------------------------------------
                                    396 ; overlayable items in internal ram
                                    397 ;--------------------------------------------------------
                                    398 	.area	OSEG    (OVR,DATA)
      000000                        399 _iowrite8_PARM_2:
      000000                        400 	.ds 1
                                    401 	.area	OSEG    (OVR,DATA)
                                    402 	.area	OSEG    (OVR,DATA)
      000000                        403 _writeRegister8_PARM_2:
      000000                        404 	.ds 1
                                    405 	.area	OSEG    (OVR,DATA)
      000000                        406 _writeRegister16_PARM_2:
      000000                        407 	.ds 2
                                    408 	.area	OSEG    (OVR,DATA)
      000000                        409 _setCursor_PARM_2:
      000000                        410 	.ds 2
                                    411 	.area	OSEG    (OVR,DATA)
      000000                        412 _setTextColor_PARM_2:
      000000                        413 	.ds 2
                                    414 	.area	OSEG    (OVR,DATA)
                                    415 	.area	OSEG    (OVR,DATA)
      000000                        416 _setAddress_PARM_2:
      000000                        417 	.ds 2
      000002                        418 _setAddress_PARM_3:
      000002                        419 	.ds 2
      000004                        420 _setAddress_PARM_4:
      000004                        421 	.ds 2
                                    422 	.area	OSEG    (OVR,DATA)
                                    423 	.area	OSEG    (OVR,DATA)
                                    424 ;--------------------------------------------------------
                                    425 ; Stack segment in internal ram
                                    426 ;--------------------------------------------------------
                                    427 	.area	SSEG
      000000                        428 __start__stack:
      000000                        429 	.ds	1
                                    430 
                                    431 ;--------------------------------------------------------
                                    432 ; indirectly addressable internal ram data
                                    433 ;--------------------------------------------------------
                                    434 	.area ISEG    (DATA)
                                    435 ;--------------------------------------------------------
                                    436 ; absolute internal ram data
                                    437 ;--------------------------------------------------------
                                    438 	.area IABS    (ABS,DATA)
                                    439 	.area IABS    (ABS,DATA)
                                    440 ;--------------------------------------------------------
                                    441 ; bit data
                                    442 ;--------------------------------------------------------
                                    443 	.area BSEG    (BIT)
      000000                        444 _drawChar_sloc0_1_0:
      000000                        445 	.ds 1
      000001                        446 _convertAsciiHex_sloc0_1_0:
      000001                        447 	.ds 1
                                    448 ;--------------------------------------------------------
                                    449 ; paged external ram data
                                    450 ;--------------------------------------------------------
                                    451 	.area PSEG    (PAG,XDATA)
                                    452 ;--------------------------------------------------------
                                    453 ; external ram data
                                    454 ;--------------------------------------------------------
                                    455 	.area XSEG    (XDATA)
      000000                        456 _check_checker_65537_229:
      000000                        457 	.ds 1
      000001                        458 _check_error_65537_229:
      000001                        459 	.ds 1
      000002                        460 _edit_input_65537_250:
      000002                        461 	.ds 1
                                    462 ;--------------------------------------------------------
                                    463 ; absolute external ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area XABS    (ABS,XDATA)
                                    466 ;--------------------------------------------------------
                                    467 ; external initialized ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area XISEG   (XDATA)
                                    470 	.area HOME    (CODE)
                                    471 	.area GSINIT0 (CODE)
                                    472 	.area GSINIT1 (CODE)
                                    473 	.area GSINIT2 (CODE)
                                    474 	.area GSINIT3 (CODE)
                                    475 	.area GSINIT4 (CODE)
                                    476 	.area GSINIT5 (CODE)
                                    477 	.area GSINIT  (CODE)
                                    478 	.area GSFINAL (CODE)
                                    479 	.area CSEG    (CODE)
                                    480 ;--------------------------------------------------------
                                    481 ; interrupt vector
                                    482 ;--------------------------------------------------------
                                    483 	.area HOME    (CODE)
      000000                        484 __interrupt_vect:
      000000 02r00r00         [24]  485 	ljmp	__sdcc_gsinit_startup
                                    486 ;--------------------------------------------------------
                                    487 ; global & static initialisations
                                    488 ;--------------------------------------------------------
                                    489 	.area HOME    (CODE)
                                    490 	.area GSINIT  (CODE)
                                    491 	.area GSFINAL (CODE)
                                    492 	.area GSINIT  (CODE)
                                    493 	.globl __sdcc_gsinit_startup
                                    494 	.globl __sdcc_program_startup
                                    495 	.globl __start__stack
                                    496 	.globl __mcs51_genXINIT
                                    497 	.globl __mcs51_genXRAMCLEAR
                                    498 	.globl __mcs51_genRAMCLEAR
                                    499 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  500 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  501 	mov	(_lcd_address + 1),#0x40
                                    502 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  503 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  504 	mov	(_seg7_address + 1),#0x80
                                    505 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  506 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  507 	mov	(_temp_address + 1),#0xc0
                                    508 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  509 	clr	a
      000013 F5*08            [12]  510 	mov	_light_address,a
      000015 F5*09            [12]  511 	mov	(_light_address + 1),a
                                    512 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  513 	ljmp	__sdcc_program_startup
                                    514 ;--------------------------------------------------------
                                    515 ; Home
                                    516 ;--------------------------------------------------------
                                    517 	.area HOME    (CODE)
                                    518 	.area HOME    (CODE)
      000003                        519 __sdcc_program_startup:
      000003 02r16r13         [24]  520 	ljmp	_main
                                    521 ;	return from main will return to caller
                                    522 ;--------------------------------------------------------
                                    523 ; code
                                    524 ;--------------------------------------------------------
                                    525 	.area CSEG    (CODE)
                                    526 ;------------------------------------------------------------
                                    527 ;Allocation info for local variables in function 'iowrite8'
                                    528 ;------------------------------------------------------------
                                    529 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    530 ;map_address               Allocated to registers r6 r7 
                                    531 ;------------------------------------------------------------
                                    532 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    533 ;	-----------------------------------------
                                    534 ;	 function iowrite8
                                    535 ;	-----------------------------------------
      000000                        536 _iowrite8:
                           000007   537 	ar7 = 0x07
                           000006   538 	ar6 = 0x06
                           000005   539 	ar5 = 0x05
                           000004   540 	ar4 = 0x04
                           000003   541 	ar3 = 0x03
                           000002   542 	ar2 = 0x02
                           000001   543 	ar1 = 0x01
                           000000   544 	ar0 = 0x00
      000000 AE 82            [24]  545 	mov	r6,dpl
      000002 AF 83            [24]  546 	mov	r7,dph
                                    547 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    548 ;	assignBit
      000004 D2 B4            [12]  549 	setb	_P3_4
                                    550 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  551 	mov	dpl,r6
      000008 8F 83            [24]  552 	mov	dph,r7
      00000A E5*00            [12]  553 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  554 	movx	@dptr,a
                                    555 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    556 ;	assignBit
      00000D C2 B4            [12]  557 	clr	_P3_4
                                    558 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  559 	ret
                                    560 ;------------------------------------------------------------
                                    561 ;Allocation info for local variables in function 'delay'
                                    562 ;------------------------------------------------------------
                                    563 ;d                         Allocated to registers r6 r7 
                                    564 ;i                         Allocated to registers r4 r5 
                                    565 ;j                         Allocated to registers r2 r3 
                                    566 ;------------------------------------------------------------
                                    567 ;	ecen4330_lcd_v3.c:58: void delay (int16_t d)
                                    568 ;	-----------------------------------------
                                    569 ;	 function delay
                                    570 ;	-----------------------------------------
      000010                        571 _delay:
      000010 AE 82            [24]  572 	mov	r6,dpl
      000012 AF 83            [24]  573 	mov	r7,dph
                                    574 ;	ecen4330_lcd_v3.c:61: for (i=0;i<d;i++)
      000014 7C 00            [12]  575 	mov	r4,#0x00
      000016 7D 00            [12]  576 	mov	r5,#0x00
      000018                        577 00107$:
      000018 8C 02            [24]  578 	mov	ar2,r4
      00001A 8D 03            [24]  579 	mov	ar3,r5
      00001C C3               [12]  580 	clr	c
      00001D EA               [12]  581 	mov	a,r2
      00001E 9E               [12]  582 	subb	a,r6
      00001F EB               [12]  583 	mov	a,r3
      000020 64 80            [12]  584 	xrl	a,#0x80
      000022 8F F0            [24]  585 	mov	b,r7
      000024 63 F0 80         [24]  586 	xrl	b,#0x80
      000027 95 F0            [12]  587 	subb	a,b
      000029 50 14            [24]  588 	jnc	00109$
                                    589 ;	ecen4330_lcd_v3.c:63: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  590 	mov	r2,#0xe8
      00002D 7B 03            [12]  591 	mov	r3,#0x03
      00002F                        592 00105$:
      00002F 1A               [12]  593 	dec	r2
      000030 BA FF 01         [24]  594 	cjne	r2,#0xff,00130$
      000033 1B               [12]  595 	dec	r3
      000034                        596 00130$:
      000034 EA               [12]  597 	mov	a,r2
      000035 4B               [12]  598 	orl	a,r3
      000036 70 F7            [24]  599 	jnz	00105$
                                    600 ;	ecen4330_lcd_v3.c:61: for (i=0;i<d;i++)
      000038 0C               [12]  601 	inc	r4
      000039 BC 00 DC         [24]  602 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  603 	inc	r5
      00003D 80 D9            [24]  604 	sjmp	00107$
      00003F                        605 00109$:
                                    606 ;	ecen4330_lcd_v3.c:65: }
      00003F 22               [24]  607 	ret
                                    608 ;------------------------------------------------------------
                                    609 ;Allocation info for local variables in function 'writeRegister8'
                                    610 ;------------------------------------------------------------
                                    611 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    612 ;a                         Allocated to registers r7 
                                    613 ;------------------------------------------------------------
                                    614 ;	ecen4330_lcd_v3.c:75: void writeRegister8 (uint8_t a, uint8_t d) {
                                    615 ;	-----------------------------------------
                                    616 ;	 function writeRegister8
                                    617 ;	-----------------------------------------
      000040                        618 _writeRegister8:
      000040 AF 82            [24]  619 	mov	r7,dpl
                                    620 ;	ecen4330_lcd_v3.c:76: CD = __CMD__;
                                    621 ;	assignBit
      000042 C2 B5            [12]  622 	clr	_P3_5
                                    623 ;	ecen4330_lcd_v3.c:77: write8(a);
                                    624 ;	assignBit
      000044 D2 B4            [12]  625 	setb	_P3_4
      000046 85*02 82         [24]  626 	mov	dpl,_lcd_address
      000049 85*03 83         [24]  627 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  628 	mov	a,r7
      00004D F0               [24]  629 	movx	@dptr,a
                                    630 ;	assignBit
      00004E C2 B4            [12]  631 	clr	_P3_4
                                    632 ;	ecen4330_lcd_v3.c:78: CD = __DATA__;
                                    633 ;	assignBit
      000050 D2 B5            [12]  634 	setb	_P3_5
                                    635 ;	ecen4330_lcd_v3.c:79: write8(d);
                                    636 ;	assignBit
      000052 D2 B4            [12]  637 	setb	_P3_4
      000054 85*02 82         [24]  638 	mov	dpl,_lcd_address
      000057 85*03 83         [24]  639 	mov	dph,(_lcd_address + 1)
      00005A E5*00            [12]  640 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  641 	movx	@dptr,a
                                    642 ;	assignBit
      00005D C2 B4            [12]  643 	clr	_P3_4
                                    644 ;	ecen4330_lcd_v3.c:80: }
      00005F 22               [24]  645 	ret
                                    646 ;------------------------------------------------------------
                                    647 ;Allocation info for local variables in function 'writeRegister16'
                                    648 ;------------------------------------------------------------
                                    649 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    650 ;a                         Allocated to registers r6 r7 
                                    651 ;hi                        Allocated to registers r7 
                                    652 ;lo                        Allocated to registers r6 
                                    653 ;------------------------------------------------------------
                                    654 ;	ecen4330_lcd_v3.c:84: void writeRegister16 (uint16_t a, uint16_t d) {
                                    655 ;	-----------------------------------------
                                    656 ;	 function writeRegister16
                                    657 ;	-----------------------------------------
      000060                        658 _writeRegister16:
      000060 AE 82            [24]  659 	mov	r6,dpl
      000062 AF 83            [24]  660 	mov	r7,dph
                                    661 ;	ecen4330_lcd_v3.c:86: hi = (a) >> 8;
      000064 8F 05            [24]  662 	mov	ar5,r7
                                    663 ;	ecen4330_lcd_v3.c:87: lo = (a);
                                    664 ;	ecen4330_lcd_v3.c:88: write8Reg(hi);
                                    665 ;	assignBit
      000066 C2 B5            [12]  666 	clr	_P3_5
                                    667 ;	assignBit
      000068 D2 B4            [12]  668 	setb	_P3_4
      00006A 85*02 82         [24]  669 	mov	dpl,_lcd_address
      00006D 85*03 83         [24]  670 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  671 	mov	a,r5
      000071 F0               [24]  672 	movx	@dptr,a
                                    673 ;	assignBit
      000072 C2 B4            [12]  674 	clr	_P3_4
                                    675 ;	ecen4330_lcd_v3.c:89: write8Reg(lo);
                                    676 ;	assignBit
      000074 C2 B5            [12]  677 	clr	_P3_5
                                    678 ;	assignBit
      000076 D2 B4            [12]  679 	setb	_P3_4
      000078 85*02 82         [24]  680 	mov	dpl,_lcd_address
      00007B 85*03 83         [24]  681 	mov	dph,(_lcd_address + 1)
      00007E EE               [12]  682 	mov	a,r6
      00007F F0               [24]  683 	movx	@dptr,a
                                    684 ;	assignBit
      000080 C2 B4            [12]  685 	clr	_P3_4
                                    686 ;	ecen4330_lcd_v3.c:90: hi = (d) >> 8;
      000082 AF*01            [24]  687 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    688 ;	ecen4330_lcd_v3.c:91: lo = (d);
      000084 AE*00            [24]  689 	mov	r6,_writeRegister16_PARM_2
                                    690 ;	ecen4330_lcd_v3.c:92: CD = 1 ;
                                    691 ;	assignBit
      000086 D2 B5            [12]  692 	setb	_P3_5
                                    693 ;	ecen4330_lcd_v3.c:93: write8Data(hi);
                                    694 ;	assignBit
      000088 D2 B5            [12]  695 	setb	_P3_5
                                    696 ;	assignBit
      00008A D2 B4            [12]  697 	setb	_P3_4
      00008C 85*02 82         [24]  698 	mov	dpl,_lcd_address
      00008F 85*03 83         [24]  699 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  700 	mov	a,r7
      000093 F0               [24]  701 	movx	@dptr,a
                                    702 ;	assignBit
      000094 C2 B4            [12]  703 	clr	_P3_4
                                    704 ;	ecen4330_lcd_v3.c:94: write8Data(lo);
                                    705 ;	assignBit
      000096 D2 B5            [12]  706 	setb	_P3_5
                                    707 ;	assignBit
      000098 D2 B4            [12]  708 	setb	_P3_4
      00009A 85*02 82         [24]  709 	mov	dpl,_lcd_address
      00009D 85*03 83         [24]  710 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  711 	mov	a,r6
      0000A1 F0               [24]  712 	movx	@dptr,a
                                    713 ;	assignBit
      0000A2 C2 B4            [12]  714 	clr	_P3_4
                                    715 ;	ecen4330_lcd_v3.c:95: }
      0000A4 22               [24]  716 	ret
                                    717 ;------------------------------------------------------------
                                    718 ;Allocation info for local variables in function 'setCursor'
                                    719 ;------------------------------------------------------------
                                    720 ;y                         Allocated with name '_setCursor_PARM_2'
                                    721 ;x                         Allocated to registers 
                                    722 ;------------------------------------------------------------
                                    723 ;	ecen4330_lcd_v3.c:103: void setCursor (uint16_t x, uint16_t y) {
                                    724 ;	-----------------------------------------
                                    725 ;	 function setCursor
                                    726 ;	-----------------------------------------
      0000A5                        727 _setCursor:
      0000A5 85 82*0C         [24]  728 	mov	_cursor_x,dpl
      0000A8 85 83*0D         [24]  729 	mov	(_cursor_x + 1),dph
                                    730 ;	ecen4330_lcd_v3.c:105: cursor_y = y;
      0000AB 85*00*0E         [24]  731 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85*01*0F         [24]  732 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    733 ;	ecen4330_lcd_v3.c:106: }
      0000B1 22               [24]  734 	ret
                                    735 ;------------------------------------------------------------
                                    736 ;Allocation info for local variables in function 'setTextColor'
                                    737 ;------------------------------------------------------------
                                    738 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    739 ;x                         Allocated to registers 
                                    740 ;------------------------------------------------------------
                                    741 ;	ecen4330_lcd_v3.c:113: void setTextColor (uint16_t x, uint16_t y) {
                                    742 ;	-----------------------------------------
                                    743 ;	 function setTextColor
                                    744 ;	-----------------------------------------
      0000B2                        745 _setTextColor:
      0000B2 85 82*12         [24]  746 	mov	_textcolor,dpl
      0000B5 85 83*13         [24]  747 	mov	(_textcolor + 1),dph
                                    748 ;	ecen4330_lcd_v3.c:115: textbgcolor = y;
      0000B8 85*00*14         [24]  749 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85*01*15         [24]  750 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    751 ;	ecen4330_lcd_v3.c:116: }
      0000BE 22               [24]  752 	ret
                                    753 ;------------------------------------------------------------
                                    754 ;Allocation info for local variables in function 'setTextSize'
                                    755 ;------------------------------------------------------------
                                    756 ;s                         Allocated to registers r7 
                                    757 ;------------------------------------------------------------
                                    758 ;	ecen4330_lcd_v3.c:123: void setTextSize (uint8_t s) {
                                    759 ;	-----------------------------------------
                                    760 ;	 function setTextSize
                                    761 ;	-----------------------------------------
      0000BF                        762 _setTextSize:
                                    763 ;	ecen4330_lcd_v3.c:124: if (s > 8) return;
      0000BF E5 82            [12]  764 	mov	a,dpl
      0000C1 FF               [12]  765 	mov	r7,a
      0000C2 24 F7            [12]  766 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  767 	jnc	00102$
      0000C6 22               [24]  768 	ret
      0000C7                        769 00102$:
                                    770 ;	ecen4330_lcd_v3.c:125: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  771 	mov	a,r7
      0000C8 60 06            [24]  772 	jz	00105$
      0000CA 8F 06            [24]  773 	mov	ar6,r7
      0000CC 7F 00            [12]  774 	mov	r7,#0x00
      0000CE 80 04            [24]  775 	sjmp	00106$
      0000D0                        776 00105$:
      0000D0 7E 01            [12]  777 	mov	r6,#0x01
      0000D2 7F 00            [12]  778 	mov	r7,#0x00
      0000D4                        779 00106$:
      0000D4 8E*10            [24]  780 	mov	_textsize,r6
                                    781 ;	ecen4330_lcd_v3.c:126: }
      0000D6 22               [24]  782 	ret
                                    783 ;------------------------------------------------------------
                                    784 ;Allocation info for local variables in function 'setRotation'
                                    785 ;------------------------------------------------------------
                                    786 ;flag                      Allocated to registers r7 
                                    787 ;------------------------------------------------------------
                                    788 ;	ecen4330_lcd_v3.c:138: void setRotation (uint8_t flag) {
                                    789 ;	-----------------------------------------
                                    790 ;	 function setRotation
                                    791 ;	-----------------------------------------
      0000D7                        792 _setRotation:
                                    793 ;	ecen4330_lcd_v3.c:139: switch(flag) {
      0000D7 E5 82            [12]  794 	mov	a,dpl
      0000D9 FF               [12]  795 	mov	r7,a
      0000DA 24 FC            [12]  796 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  797 	jc	00105$
      0000DE EF               [12]  798 	mov	a,r7
      0000DF 2F               [12]  799 	add	a,r7
                                    800 ;	ecen4330_lcd_v3.c:140: case 0:
      0000E0 90r00rE4         [24]  801 	mov	dptr,#00115$
      0000E3 73               [24]  802 	jmp	@a+dptr
      0000E4                        803 00115$:
      0000E4 80 06            [24]  804 	sjmp	00101$
      0000E6 80 14            [24]  805 	sjmp	00102$
      0000E8 80 22            [24]  806 	sjmp	00103$
      0000EA 80 30            [24]  807 	sjmp	00104$
      0000EC                        808 00101$:
                                    809 ;	ecen4330_lcd_v3.c:141: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  810 	mov	r7,#0x48
                                    811 ;	ecen4330_lcd_v3.c:142: _width = TFTWIDTH;
      0000EE 75*16 F0         [24]  812 	mov	__width,#0xf0
      0000F1 75*17 00         [24]  813 	mov	(__width + 1),#0x00
                                    814 ;	ecen4330_lcd_v3.c:143: _height = TFTHEIGHT;
      0000F4 75*18 40         [24]  815 	mov	__height,#0x40
      0000F7 75*19 01         [24]  816 	mov	(__height + 1),#0x01
                                    817 ;	ecen4330_lcd_v3.c:144: break;
                                    818 ;	ecen4330_lcd_v3.c:145: case 1:
      0000FA 80 3E            [24]  819 	sjmp	00106$
      0000FC                        820 00102$:
                                    821 ;	ecen4330_lcd_v3.c:146: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  822 	mov	r7,#0x28
                                    823 ;	ecen4330_lcd_v3.c:147: _width = TFTHEIGHT;
      0000FE 75*16 40         [24]  824 	mov	__width,#0x40
      000101 75*17 01         [24]  825 	mov	(__width + 1),#0x01
                                    826 ;	ecen4330_lcd_v3.c:148: _height = TFTWIDTH;
      000104 75*18 F0         [24]  827 	mov	__height,#0xf0
      000107 75*19 00         [24]  828 	mov	(__height + 1),#0x00
                                    829 ;	ecen4330_lcd_v3.c:149: break;
                                    830 ;	ecen4330_lcd_v3.c:150: case 2:
      00010A 80 2E            [24]  831 	sjmp	00106$
      00010C                        832 00103$:
                                    833 ;	ecen4330_lcd_v3.c:151: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  834 	mov	r7,#0x88
                                    835 ;	ecen4330_lcd_v3.c:152: _width = TFTWIDTH;
      00010E 75*16 F0         [24]  836 	mov	__width,#0xf0
      000111 75*17 00         [24]  837 	mov	(__width + 1),#0x00
                                    838 ;	ecen4330_lcd_v3.c:153: _height = TFTHEIGHT;
      000114 75*18 40         [24]  839 	mov	__height,#0x40
      000117 75*19 01         [24]  840 	mov	(__height + 1),#0x01
                                    841 ;	ecen4330_lcd_v3.c:154: break;
                                    842 ;	ecen4330_lcd_v3.c:155: case 3:
      00011A 80 1E            [24]  843 	sjmp	00106$
      00011C                        844 00104$:
                                    845 ;	ecen4330_lcd_v3.c:156: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  846 	mov	r7,#0xe8
                                    847 ;	ecen4330_lcd_v3.c:157: _width = TFTHEIGHT;
      00011E 75*16 40         [24]  848 	mov	__width,#0x40
      000121 75*17 01         [24]  849 	mov	(__width + 1),#0x01
                                    850 ;	ecen4330_lcd_v3.c:158: _height = TFTWIDTH;
      000124 75*18 F0         [24]  851 	mov	__height,#0xf0
      000127 75*19 00         [24]  852 	mov	(__height + 1),#0x00
                                    853 ;	ecen4330_lcd_v3.c:159: break;
                                    854 ;	ecen4330_lcd_v3.c:160: default:
      00012A 80 0E            [24]  855 	sjmp	00106$
      00012C                        856 00105$:
                                    857 ;	ecen4330_lcd_v3.c:161: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  858 	mov	r7,#0x48
                                    859 ;	ecen4330_lcd_v3.c:162: _width = TFTWIDTH;
      00012E 75*16 F0         [24]  860 	mov	__width,#0xf0
      000131 75*17 00         [24]  861 	mov	(__width + 1),#0x00
                                    862 ;	ecen4330_lcd_v3.c:163: _height = TFTHEIGHT;
      000134 75*18 40         [24]  863 	mov	__height,#0x40
      000137 75*19 01         [24]  864 	mov	(__height + 1),#0x01
                                    865 ;	ecen4330_lcd_v3.c:165: }
      00013A                        866 00106$:
                                    867 ;	ecen4330_lcd_v3.c:166: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F*00            [24]  868 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  869 	mov	dpl,#0x36
                                    870 ;	ecen4330_lcd_v3.c:167: }
      00013F 02r00r40         [24]  871 	ljmp	_writeRegister8
                                    872 ;------------------------------------------------------------
                                    873 ;Allocation info for local variables in function 'setAddress'
                                    874 ;------------------------------------------------------------
                                    875 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    876 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    877 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    878 ;x1                        Allocated to registers r6 r7 
                                    879 ;------------------------------------------------------------
                                    880 ;	ecen4330_lcd_v3.c:169: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    881 ;	-----------------------------------------
                                    882 ;	 function setAddress
                                    883 ;	-----------------------------------------
      000142                        884 _setAddress:
      000142 AE 82            [24]  885 	mov	r6,dpl
      000144 AF 83            [24]  886 	mov	r7,dph
                                    887 ;	ecen4330_lcd_v3.c:170: write8Reg(0x2A);
                                    888 ;	assignBit
      000146 C2 B5            [12]  889 	clr	_P3_5
                                    890 ;	assignBit
      000148 D2 B4            [12]  891 	setb	_P3_4
      00014A 85*02 82         [24]  892 	mov	dpl,_lcd_address
      00014D 85*03 83         [24]  893 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  894 	mov	a,#0x2a
      000152 F0               [24]  895 	movx	@dptr,a
                                    896 ;	assignBit
      000153 C2 B4            [12]  897 	clr	_P3_4
                                    898 ;	ecen4330_lcd_v3.c:171: write8Data(x1 >> 8);
                                    899 ;	assignBit
      000155 D2 B5            [12]  900 	setb	_P3_5
                                    901 ;	assignBit
      000157 D2 B4            [12]  902 	setb	_P3_4
      000159 85*02 82         [24]  903 	mov	dpl,_lcd_address
      00015C 85*03 83         [24]  904 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  905 	mov	ar5,r7
      000161 ED               [12]  906 	mov	a,r5
      000162 F0               [24]  907 	movx	@dptr,a
                                    908 ;	assignBit
      000163 C2 B4            [12]  909 	clr	_P3_4
                                    910 ;	ecen4330_lcd_v3.c:172: write8Data(x1);
                                    911 ;	assignBit
      000165 D2 B5            [12]  912 	setb	_P3_5
                                    913 ;	assignBit
      000167 D2 B4            [12]  914 	setb	_P3_4
      000169 85*02 82         [24]  915 	mov	dpl,_lcd_address
      00016C 85*03 83         [24]  916 	mov	dph,(_lcd_address + 1)
      00016F EE               [12]  917 	mov	a,r6
      000170 F0               [24]  918 	movx	@dptr,a
                                    919 ;	assignBit
      000171 C2 B4            [12]  920 	clr	_P3_4
                                    921 ;	ecen4330_lcd_v3.c:173: write8Data(x2 >> 8);
                                    922 ;	assignBit
      000173 D2 B5            [12]  923 	setb	_P3_5
                                    924 ;	assignBit
      000175 D2 B4            [12]  925 	setb	_P3_4
      000177 85*02 82         [24]  926 	mov	dpl,_lcd_address
      00017A 85*03 83         [24]  927 	mov	dph,(_lcd_address + 1)
      00017D E5*03            [12]  928 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24]  929 	movx	@dptr,a
                                    930 ;	assignBit
      000180 C2 B4            [12]  931 	clr	_P3_4
                                    932 ;	ecen4330_lcd_v3.c:174: write8Data(x2);
                                    933 ;	assignBit
      000182 D2 B5            [12]  934 	setb	_P3_5
                                    935 ;	assignBit
      000184 D2 B4            [12]  936 	setb	_P3_4
      000186 85*02 82         [24]  937 	mov	dpl,_lcd_address
      000189 85*03 83         [24]  938 	mov	dph,(_lcd_address + 1)
      00018C E5*02            [12]  939 	mov	a,_setAddress_PARM_3
      00018E F0               [24]  940 	movx	@dptr,a
                                    941 ;	assignBit
      00018F C2 B4            [12]  942 	clr	_P3_4
                                    943 ;	ecen4330_lcd_v3.c:176: write8Reg(0x2B);
                                    944 ;	assignBit
      000191 C2 B5            [12]  945 	clr	_P3_5
                                    946 ;	assignBit
      000193 D2 B4            [12]  947 	setb	_P3_4
      000195 85*02 82         [24]  948 	mov	dpl,_lcd_address
      000198 85*03 83         [24]  949 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12]  950 	mov	a,#0x2b
      00019D F0               [24]  951 	movx	@dptr,a
                                    952 ;	assignBit
      00019E C2 B4            [12]  953 	clr	_P3_4
                                    954 ;	ecen4330_lcd_v3.c:177: write8Data(y1 >> 8);
                                    955 ;	assignBit
      0001A0 D2 B5            [12]  956 	setb	_P3_5
                                    957 ;	assignBit
      0001A2 D2 B4            [12]  958 	setb	_P3_4
      0001A4 85*02 82         [24]  959 	mov	dpl,_lcd_address
      0001A7 85*03 83         [24]  960 	mov	dph,(_lcd_address + 1)
      0001AA E5*01            [12]  961 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24]  962 	movx	@dptr,a
                                    963 ;	assignBit
      0001AD C2 B4            [12]  964 	clr	_P3_4
                                    965 ;	ecen4330_lcd_v3.c:178: write8Data(y1);
                                    966 ;	assignBit
      0001AF D2 B5            [12]  967 	setb	_P3_5
                                    968 ;	assignBit
      0001B1 D2 B4            [12]  969 	setb	_P3_4
      0001B3 85*02 82         [24]  970 	mov	dpl,_lcd_address
      0001B6 85*03 83         [24]  971 	mov	dph,(_lcd_address + 1)
      0001B9 E5*00            [12]  972 	mov	a,_setAddress_PARM_2
      0001BB F0               [24]  973 	movx	@dptr,a
                                    974 ;	assignBit
      0001BC C2 B4            [12]  975 	clr	_P3_4
                                    976 ;	ecen4330_lcd_v3.c:179: write8Data(y2 >> 8);
                                    977 ;	assignBit
      0001BE D2 B5            [12]  978 	setb	_P3_5
                                    979 ;	assignBit
      0001C0 D2 B4            [12]  980 	setb	_P3_4
      0001C2 85*02 82         [24]  981 	mov	dpl,_lcd_address
      0001C5 85*03 83         [24]  982 	mov	dph,(_lcd_address + 1)
      0001C8 E5*05            [12]  983 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24]  984 	movx	@dptr,a
                                    985 ;	assignBit
      0001CB C2 B4            [12]  986 	clr	_P3_4
                                    987 ;	ecen4330_lcd_v3.c:180: write8Data(y2);
                                    988 ;	assignBit
      0001CD D2 B5            [12]  989 	setb	_P3_5
                                    990 ;	assignBit
      0001CF D2 B4            [12]  991 	setb	_P3_4
      0001D1 85*02 82         [24]  992 	mov	dpl,_lcd_address
      0001D4 85*03 83         [24]  993 	mov	dph,(_lcd_address + 1)
      0001D7 E5*04            [12]  994 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24]  995 	movx	@dptr,a
                                    996 ;	assignBit
      0001DA C2 B4            [12]  997 	clr	_P3_4
                                    998 ;	ecen4330_lcd_v3.c:181: }
      0001DC 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1002 ;------------------------------------------------------------
                                   1003 ;	ecen4330_lcd_v3.c:187: void TFT_LCD_INIT (void) {
                                   1004 ;	-----------------------------------------
                                   1005 ;	 function TFT_LCD_INIT
                                   1006 ;	-----------------------------------------
      0001DD                       1007 _TFT_LCD_INIT:
                                   1008 ;	ecen4330_lcd_v3.c:188: _width = TFTWIDTH;
      0001DD 75*16 F0         [24] 1009 	mov	__width,#0xf0
      0001E0 75*17 00         [24] 1010 	mov	(__width + 1),#0x00
                                   1011 ;	ecen4330_lcd_v3.c:189: _height = TFTHEIGHT;
      0001E3 75*18 40         [24] 1012 	mov	__height,#0x40
      0001E6 75*19 01         [24] 1013 	mov	(__height + 1),#0x01
                                   1014 ;	ecen4330_lcd_v3.c:191: IOM = 0;
                                   1015 ;	assignBit
      0001E9 C2 B4            [12] 1016 	clr	_P3_4
                                   1017 ;	ecen4330_lcd_v3.c:192: CD = 1;
                                   1018 ;	assignBit
      0001EB D2 B5            [12] 1019 	setb	_P3_5
                                   1020 ;	ecen4330_lcd_v3.c:194: write8Reg(0x00);
                                   1021 ;	assignBit
      0001ED C2 B5            [12] 1022 	clr	_P3_5
                                   1023 ;	assignBit
      0001EF D2 B4            [12] 1024 	setb	_P3_4
      0001F1 85*02 82         [24] 1025 	mov	dpl,_lcd_address
      0001F4 85*03 83         [24] 1026 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1027 	clr	a
      0001F8 F0               [24] 1028 	movx	@dptr,a
                                   1029 ;	assignBit
      0001F9 C2 B4            [12] 1030 	clr	_P3_4
                                   1031 ;	ecen4330_lcd_v3.c:195: write8Data(0x00);
                                   1032 ;	assignBit
      0001FB D2 B5            [12] 1033 	setb	_P3_5
                                   1034 ;	assignBit
      0001FD D2 B4            [12] 1035 	setb	_P3_4
      0001FF 85*02 82         [24] 1036 	mov	dpl,_lcd_address
      000202 85*03 83         [24] 1037 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1038 	clr	a
      000206 F0               [24] 1039 	movx	@dptr,a
                                   1040 ;	assignBit
      000207 C2 B4            [12] 1041 	clr	_P3_4
                                   1042 ;	ecen4330_lcd_v3.c:196: write8Data(0x00);
                                   1043 ;	assignBit
      000209 D2 B5            [12] 1044 	setb	_P3_5
                                   1045 ;	assignBit
      00020B D2 B4            [12] 1046 	setb	_P3_4
      00020D 85*02 82         [24] 1047 	mov	dpl,_lcd_address
      000210 85*03 83         [24] 1048 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1049 	clr	a
      000214 F0               [24] 1050 	movx	@dptr,a
                                   1051 ;	assignBit
      000215 C2 B4            [12] 1052 	clr	_P3_4
                                   1053 ;	ecen4330_lcd_v3.c:197: write8Data(0x00);
                                   1054 ;	assignBit
      000217 D2 B5            [12] 1055 	setb	_P3_5
                                   1056 ;	assignBit
      000219 D2 B4            [12] 1057 	setb	_P3_4
      00021B 85*02 82         [24] 1058 	mov	dpl,_lcd_address
      00021E 85*03 83         [24] 1059 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1060 	clr	a
      000222 F0               [24] 1061 	movx	@dptr,a
                                   1062 ;	assignBit
      000223 C2 B4            [12] 1063 	clr	_P3_4
                                   1064 ;	ecen4330_lcd_v3.c:198: delay(200);
      000225 90 00 C8         [24] 1065 	mov	dptr,#0x00c8
      000228 12r00r10         [24] 1066 	lcall	_delay
                                   1067 ;	ecen4330_lcd_v3.c:200: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75*00 00         [24] 1068 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1069 	mov	dpl,#0x01
      000231 12r00r40         [24] 1070 	lcall	_writeRegister8
                                   1071 ;	ecen4330_lcd_v3.c:201: delay(50);
      000234 90 00 32         [24] 1072 	mov	dptr,#0x0032
      000237 12r00r10         [24] 1073 	lcall	_delay
                                   1074 ;	ecen4330_lcd_v3.c:202: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75*00 00         [24] 1075 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1076 	mov	dpl,#0x28
      000240 12r00r40         [24] 1077 	lcall	_writeRegister8
                                   1078 ;	ecen4330_lcd_v3.c:203: delay(10);
      000243 90 00 0A         [24] 1079 	mov	dptr,#0x000a
      000246 12r00r10         [24] 1080 	lcall	_delay
                                   1081 ;	ecen4330_lcd_v3.c:205: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75*00 23         [24] 1082 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1083 	mov	dpl,#0xc0
      00024F 12r00r40         [24] 1084 	lcall	_writeRegister8
                                   1085 ;	ecen4330_lcd_v3.c:206: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75*00 11         [24] 1086 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1087 	mov	dpl,#0xc1
      000258 12r00r40         [24] 1088 	lcall	_writeRegister8
                                   1089 ;	ecen4330_lcd_v3.c:207: write8Reg(ILI9341_VCOMCONTROL1);
                                   1090 ;	assignBit
      00025B C2 B5            [12] 1091 	clr	_P3_5
                                   1092 ;	assignBit
      00025D D2 B4            [12] 1093 	setb	_P3_4
      00025F 85*02 82         [24] 1094 	mov	dpl,_lcd_address
      000262 85*03 83         [24] 1095 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1096 	mov	a,#0xc5
      000267 F0               [24] 1097 	movx	@dptr,a
                                   1098 ;	assignBit
      000268 C2 B4            [12] 1099 	clr	_P3_4
                                   1100 ;	ecen4330_lcd_v3.c:208: write8Data(0x3d);
                                   1101 ;	assignBit
      00026A D2 B5            [12] 1102 	setb	_P3_5
                                   1103 ;	assignBit
      00026C D2 B4            [12] 1104 	setb	_P3_4
      00026E 85*02 82         [24] 1105 	mov	dpl,_lcd_address
      000271 85*03 83         [24] 1106 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1107 	mov	a,#0x3d
      000276 F0               [24] 1108 	movx	@dptr,a
                                   1109 ;	assignBit
      000277 C2 B4            [12] 1110 	clr	_P3_4
                                   1111 ;	ecen4330_lcd_v3.c:209: write8Data(0x30);
                                   1112 ;	assignBit
      000279 D2 B5            [12] 1113 	setb	_P3_5
                                   1114 ;	assignBit
      00027B D2 B4            [12] 1115 	setb	_P3_4
      00027D 85*02 82         [24] 1116 	mov	dpl,_lcd_address
      000280 85*03 83         [24] 1117 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1118 	mov	a,#0x30
      000285 F0               [24] 1119 	movx	@dptr,a
                                   1120 ;	assignBit
      000286 C2 B4            [12] 1121 	clr	_P3_4
                                   1122 ;	ecen4330_lcd_v3.c:210: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75*00 AA         [24] 1123 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1124 	mov	dpl,#0xc7
      00028E 12r00r40         [24] 1125 	lcall	_writeRegister8
                                   1126 ;	ecen4330_lcd_v3.c:211: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75*00 88         [24] 1127 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1128 	mov	dpl,#0x36
      000297 12r00r40         [24] 1129 	lcall	_writeRegister8
                                   1130 ;	ecen4330_lcd_v3.c:212: write8Reg(ILI9341_PIXELFORMAT);
                                   1131 ;	assignBit
      00029A C2 B5            [12] 1132 	clr	_P3_5
                                   1133 ;	assignBit
      00029C D2 B4            [12] 1134 	setb	_P3_4
      00029E 85*02 82         [24] 1135 	mov	dpl,_lcd_address
      0002A1 85*03 83         [24] 1136 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1137 	mov	a,#0x3a
      0002A6 F0               [24] 1138 	movx	@dptr,a
                                   1139 ;	assignBit
      0002A7 C2 B4            [12] 1140 	clr	_P3_4
                                   1141 ;	ecen4330_lcd_v3.c:213: write8Data(0x55);write8Data(0x00);
                                   1142 ;	assignBit
      0002A9 D2 B5            [12] 1143 	setb	_P3_5
                                   1144 ;	assignBit
      0002AB D2 B4            [12] 1145 	setb	_P3_4
      0002AD 85*02 82         [24] 1146 	mov	dpl,_lcd_address
      0002B0 85*03 83         [24] 1147 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1148 	mov	a,#0x55
      0002B5 F0               [24] 1149 	movx	@dptr,a
                                   1150 ;	assignBit
      0002B6 C2 B4            [12] 1151 	clr	_P3_4
                                   1152 ;	assignBit
      0002B8 D2 B5            [12] 1153 	setb	_P3_5
                                   1154 ;	assignBit
      0002BA D2 B4            [12] 1155 	setb	_P3_4
      0002BC 85*02 82         [24] 1156 	mov	dpl,_lcd_address
      0002BF 85*03 83         [24] 1157 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1158 	clr	a
      0002C3 F0               [24] 1159 	movx	@dptr,a
                                   1160 ;	assignBit
      0002C4 C2 B4            [12] 1161 	clr	_P3_4
                                   1162 ;	ecen4330_lcd_v3.c:214: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75*00 1B         [24] 1163 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75*01 00         [24] 1164 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1165 	mov	dptr,#0x00b1
      0002CF 12r00r60         [24] 1166 	lcall	_writeRegister16
                                   1167 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75*00 07         [24] 1168 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1169 	mov	dpl,#0xb7
      0002D8 12r00r40         [24] 1170 	lcall	_writeRegister8
                                   1171 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75*00 00         [24] 1172 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1173 	mov	dpl,#0x11
      0002E1 12r00r40         [24] 1174 	lcall	_writeRegister8
                                   1175 ;	ecen4330_lcd_v3.c:219: delay(150);
      0002E4 90 00 96         [24] 1176 	mov	dptr,#0x0096
      0002E7 12r00r10         [24] 1177 	lcall	_delay
                                   1178 ;	ecen4330_lcd_v3.c:220: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75*00 00         [24] 1179 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1180 	mov	dpl,#0x29
      0002F0 12r00r40         [24] 1181 	lcall	_writeRegister8
                                   1182 ;	ecen4330_lcd_v3.c:221: delay(500);
      0002F3 90 01 F4         [24] 1183 	mov	dptr,#0x01f4
      0002F6 12r00r10         [24] 1184 	lcall	_delay
                                   1185 ;	ecen4330_lcd_v3.c:222: setAddress(0,0,_width-1,_height-1);
      0002F9 AE*16            [24] 1186 	mov	r6,__width
      0002FB AF*17            [24] 1187 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1188 	dec	r6
      0002FE BE FF 01         [24] 1189 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1190 	dec	r7
      000302                       1191 00103$:
      000302 8E*02            [24] 1192 	mov	_setAddress_PARM_3,r6
      000304 8F*03            [24] 1193 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE*18            [24] 1194 	mov	r6,__height
      000308 AF*19            [24] 1195 	mov	r7,(__height + 1)
      00030A 1E               [12] 1196 	dec	r6
      00030B BE FF 01         [24] 1197 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1198 	dec	r7
      00030F                       1199 00104$:
      00030F 8E*04            [24] 1200 	mov	_setAddress_PARM_4,r6
      000311 8F*05            [24] 1201 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1202 	clr	a
      000314 F5*00            [12] 1203 	mov	_setAddress_PARM_2,a
      000316 F5*01            [12] 1204 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1205 	mov	dptr,#0x0000
                                   1206 ;	ecen4330_lcd_v3.c:223: }
      00031B 02r01r42         [24] 1207 	ljmp	_setAddress
                                   1208 ;------------------------------------------------------------
                                   1209 ;Allocation info for local variables in function 'drawPixel'
                                   1210 ;------------------------------------------------------------
                                   1211 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1212 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1213 ;x3                        Allocated to registers r6 r7 
                                   1214 ;------------------------------------------------------------
                                   1215 ;	ecen4330_lcd_v3.c:232: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1216 ;	-----------------------------------------
                                   1217 ;	 function drawPixel
                                   1218 ;	-----------------------------------------
      00031E                       1219 _drawPixel:
      00031E AE 82            [24] 1220 	mov	r6,dpl
      000320 AF 83            [24] 1221 	mov	r7,dph
                                   1222 ;	ecen4330_lcd_v3.c:234: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1223 	mov	ar4,r6
      000324 8F 05            [24] 1224 	mov	ar5,r7
      000326 0C               [12] 1225 	inc	r4
      000327 BC 00 01         [24] 1226 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1227 	inc	r5
      00032B                       1228 00103$:
      00032B 8C*02            [24] 1229 	mov	_setAddress_PARM_3,r4
      00032D 8D*03            [24] 1230 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC*1A            [24] 1231 	mov	r4,_drawPixel_PARM_2
      000331 AD*1B            [24] 1232 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1233 	inc	r4
      000334 BC 00 01         [24] 1234 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1235 	inc	r5
      000338                       1236 00104$:
      000338 8C*04            [24] 1237 	mov	_setAddress_PARM_4,r4
      00033A 8D*05            [24] 1238 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85*1A*00         [24] 1239 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85*1B*01         [24] 1240 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1241 	mov	dpl,r6
      000344 8F 83            [24] 1242 	mov	dph,r7
      000346 12r01r42         [24] 1243 	lcall	_setAddress
                                   1244 ;	ecen4330_lcd_v3.c:236: CD=0; write8(0x2C);
                                   1245 ;	assignBit
      000349 C2 B5            [12] 1246 	clr	_P3_5
                                   1247 ;	assignBit
      00034B D2 B4            [12] 1248 	setb	_P3_4
      00034D 85*02 82         [24] 1249 	mov	dpl,_lcd_address
      000350 85*03 83         [24] 1250 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1251 	mov	a,#0x2c
      000355 F0               [24] 1252 	movx	@dptr,a
                                   1253 ;	assignBit
      000356 C2 B4            [12] 1254 	clr	_P3_4
                                   1255 ;	ecen4330_lcd_v3.c:238: CD = 1;
                                   1256 ;	assignBit
      000358 D2 B5            [12] 1257 	setb	_P3_5
                                   1258 ;	ecen4330_lcd_v3.c:239: write8(color1>>8);write8(color1);
                                   1259 ;	assignBit
      00035A D2 B4            [12] 1260 	setb	_P3_4
      00035C 85*02 82         [24] 1261 	mov	dpl,_lcd_address
      00035F 85*03 83         [24] 1262 	mov	dph,(_lcd_address + 1)
      000362 E5*1D            [12] 1263 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	assignBit
      000365 C2 B4            [12] 1266 	clr	_P3_4
                                   1267 ;	assignBit
      000367 D2 B4            [12] 1268 	setb	_P3_4
      000369 85*02 82         [24] 1269 	mov	dpl,_lcd_address
      00036C 85*03 83         [24] 1270 	mov	dph,(_lcd_address + 1)
      00036F E5*1C            [12] 1271 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1272 	movx	@dptr,a
                                   1273 ;	assignBit
      000372 C2 B4            [12] 1274 	clr	_P3_4
                                   1275 ;	ecen4330_lcd_v3.c:240: }
      000374 22               [24] 1276 	ret
                                   1277 ;------------------------------------------------------------
                                   1278 ;Allocation info for local variables in function 'drawCircle'
                                   1279 ;------------------------------------------------------------
                                   1280 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1281 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1282 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1283 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1284 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1285 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1286 ;ddF_y                     Allocated to registers r2 r3 
                                   1287 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1288 ;y                         Allocated to registers r0 r1 
                                   1289 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1290 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1291 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1292 ;------------------------------------------------------------
                                   1293 ;	ecen4330_lcd_v3.c:250: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1294 ;	-----------------------------------------
                                   1295 ;	 function drawCircle
                                   1296 ;	-----------------------------------------
      000375                       1297 _drawCircle:
      000375 85 82*24         [24] 1298 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83*25         [24] 1299 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1300 ;	ecen4330_lcd_v3.c:251: int f = 1 - r;
      00037B 74 01            [12] 1301 	mov	a,#0x01
      00037D C3               [12] 1302 	clr	c
      00037E 95*20            [12] 1303 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1304 	mov	r4,a
      000381 E4               [12] 1305 	clr	a
      000382 95*21            [12] 1306 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1307 	mov	r5,a
      000385 8C*26            [24] 1308 	mov	_drawCircle_f_65536_104,r4
      000387 8D*27            [24] 1309 	mov	(_drawCircle_f_65536_104 + 1),r5
                                   1310 ;	ecen4330_lcd_v3.c:253: int ddF_y = -2 * r;
      000389 85*20*00         [24] 1311 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00038C 85*21*01         [24] 1312 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00038F 90 FF FE         [24] 1313 	mov	dptr,#0xfffe
      000392 12r00r00         [24] 1314 	lcall	__mulint
      000395 AA 82            [24] 1315 	mov	r2,dpl
      000397 AB 83            [24] 1316 	mov	r3,dph
                                   1317 ;	ecen4330_lcd_v3.c:255: int y = r;
      000399 A8*20            [24] 1318 	mov	r0,_drawCircle_PARM_3
      00039B A9*21            [24] 1319 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   1320 ;	ecen4330_lcd_v3.c:257: drawPixel(x0  , y0+r, color);
      00039D E5*20            [12] 1321 	mov	a,_drawCircle_PARM_3
      00039F 25*1E            [12] 1322 	add	a,_drawCircle_PARM_2
      0003A1 F5*1A            [12] 1323 	mov	_drawPixel_PARM_2,a
      0003A3 E5*21            [12] 1324 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A5 35*1F            [12] 1325 	addc	a,(_drawCircle_PARM_2 + 1)
      0003A7 F5*1B            [12] 1326 	mov	(_drawPixel_PARM_2 + 1),a
      0003A9 85*22*1C         [24] 1327 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003AC 85*23*1D         [24] 1328 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003AF 85*24 82         [24] 1329 	mov	dpl,_drawCircle_x0_65536_103
      0003B2 85*25 83         [24] 1330 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B5 C0 03            [24] 1331 	push	ar3
      0003B7 C0 02            [24] 1332 	push	ar2
      0003B9 C0 01            [24] 1333 	push	ar1
      0003BB C0 00            [24] 1334 	push	ar0
      0003BD 12r03r1E         [24] 1335 	lcall	_drawPixel
                                   1336 ;	ecen4330_lcd_v3.c:258: drawPixel(x0  , y0-r, color);
      0003C0 E5*1E            [12] 1337 	mov	a,_drawCircle_PARM_2
      0003C2 C3               [12] 1338 	clr	c
      0003C3 95*20            [12] 1339 	subb	a,_drawCircle_PARM_3
      0003C5 F5*1A            [12] 1340 	mov	_drawPixel_PARM_2,a
      0003C7 E5*1F            [12] 1341 	mov	a,(_drawCircle_PARM_2 + 1)
      0003C9 95*21            [12] 1342 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CB F5*1B            [12] 1343 	mov	(_drawPixel_PARM_2 + 1),a
      0003CD 85*22*1C         [24] 1344 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D0 85*23*1D         [24] 1345 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D3 85*24 82         [24] 1346 	mov	dpl,_drawCircle_x0_65536_103
      0003D6 85*25 83         [24] 1347 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003D9 12r03r1E         [24] 1348 	lcall	_drawPixel
                                   1349 ;	ecen4330_lcd_v3.c:259: drawPixel(x0+r, y0  , color);
      0003DC E5*20            [12] 1350 	mov	a,_drawCircle_PARM_3
      0003DE 25*24            [12] 1351 	add	a,_drawCircle_x0_65536_103
      0003E0 F5 82            [12] 1352 	mov	dpl,a
      0003E2 E5*21            [12] 1353 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E4 35*25            [12] 1354 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003E6 F5 83            [12] 1355 	mov	dph,a
      0003E8 85*1E*1A         [24] 1356 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EB 85*1F*1B         [24] 1357 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003EE 85*22*1C         [24] 1358 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F1 85*23*1D         [24] 1359 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F4 12r03r1E         [24] 1360 	lcall	_drawPixel
                                   1361 ;	ecen4330_lcd_v3.c:260: drawPixel(x0-r, y0  , color);
      0003F7 E5*24            [12] 1362 	mov	a,_drawCircle_x0_65536_103
      0003F9 C3               [12] 1363 	clr	c
      0003FA 95*20            [12] 1364 	subb	a,_drawCircle_PARM_3
      0003FC F5 82            [12] 1365 	mov	dpl,a
      0003FE E5*25            [12] 1366 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000400 95*21            [12] 1367 	subb	a,(_drawCircle_PARM_3 + 1)
      000402 F5 83            [12] 1368 	mov	dph,a
      000404 85*1E*1A         [24] 1369 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000407 85*1F*1B         [24] 1370 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040A 85*22*1C         [24] 1371 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00040D 85*23*1D         [24] 1372 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000410 12r03r1E         [24] 1373 	lcall	_drawPixel
      000413 D0 00            [24] 1374 	pop	ar0
      000415 D0 01            [24] 1375 	pop	ar1
      000417 D0 02            [24] 1376 	pop	ar2
      000419 D0 03            [24] 1377 	pop	ar3
                                   1378 ;	ecen4330_lcd_v3.c:262: while (x<y) {
      00041B E4               [12] 1379 	clr	a
      00041C F5*2A            [12] 1380 	mov	_drawCircle_x_65536_104,a
      00041E F5*2B            [12] 1381 	mov	(_drawCircle_x_65536_104 + 1),a
      000420 75*28 01         [24] 1382 	mov	_drawCircle_ddF_x_65536_104,#0x01
                                   1383 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_104 + 1),#0x00
      000423 F5*29            [12] 1384 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
      000425                       1385 00103$:
      000425 C3               [12] 1386 	clr	c
      000426 E5*2A            [12] 1387 	mov	a,_drawCircle_x_65536_104
      000428 98               [12] 1388 	subb	a,r0
      000429 E5*2B            [12] 1389 	mov	a,(_drawCircle_x_65536_104 + 1)
      00042B 64 80            [12] 1390 	xrl	a,#0x80
      00042D 89 F0            [24] 1391 	mov	b,r1
      00042F 63 F0 80         [24] 1392 	xrl	b,#0x80
      000432 95 F0            [12] 1393 	subb	a,b
      000434 40 01            [24] 1394 	jc	00121$
      000436 22               [24] 1395 	ret
      000437                       1396 00121$:
                                   1397 ;	ecen4330_lcd_v3.c:263: if (f >= 0) {
      000437 E5*27            [12] 1398 	mov	a,(_drawCircle_f_65536_104 + 1)
      000439 20 E7 16         [24] 1399 	jb	acc.7,00102$
                                   1400 ;	ecen4330_lcd_v3.c:264: y--;
      00043C 18               [12] 1401 	dec	r0
      00043D B8 FF 01         [24] 1402 	cjne	r0,#0xff,00123$
      000440 19               [12] 1403 	dec	r1
      000441                       1404 00123$:
                                   1405 ;	ecen4330_lcd_v3.c:265: ddF_y += 2;
      000441 74 02            [12] 1406 	mov	a,#0x02
      000443 2A               [12] 1407 	add	a,r2
      000444 FA               [12] 1408 	mov	r2,a
      000445 E4               [12] 1409 	clr	a
      000446 3B               [12] 1410 	addc	a,r3
      000447 FB               [12] 1411 	mov	r3,a
                                   1412 ;	ecen4330_lcd_v3.c:266: f += ddF_y;
      000448 EA               [12] 1413 	mov	a,r2
      000449 25*26            [12] 1414 	add	a,_drawCircle_f_65536_104
      00044B F5*26            [12] 1415 	mov	_drawCircle_f_65536_104,a
      00044D EB               [12] 1416 	mov	a,r3
      00044E 35*27            [12] 1417 	addc	a,(_drawCircle_f_65536_104 + 1)
      000450 F5*27            [12] 1418 	mov	(_drawCircle_f_65536_104 + 1),a
      000452                       1419 00102$:
                                   1420 ;	ecen4330_lcd_v3.c:268: x++;
      000452 C0 02            [24] 1421 	push	ar2
      000454 C0 03            [24] 1422 	push	ar3
      000456 05*2A            [12] 1423 	inc	_drawCircle_x_65536_104
      000458 E4               [12] 1424 	clr	a
      000459 B5*2A 02         [24] 1425 	cjne	a,_drawCircle_x_65536_104,00124$
      00045C 05*2B            [12] 1426 	inc	(_drawCircle_x_65536_104 + 1)
      00045E                       1427 00124$:
                                   1428 ;	ecen4330_lcd_v3.c:269: ddF_x += 2;
      00045E 74 02            [12] 1429 	mov	a,#0x02
      000460 25*28            [12] 1430 	add	a,_drawCircle_ddF_x_65536_104
      000462 F5*28            [12] 1431 	mov	_drawCircle_ddF_x_65536_104,a
      000464 E4               [12] 1432 	clr	a
      000465 35*29            [12] 1433 	addc	a,(_drawCircle_ddF_x_65536_104 + 1)
      000467 F5*29            [12] 1434 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
                                   1435 ;	ecen4330_lcd_v3.c:270: f += ddF_x;
      000469 E5*28            [12] 1436 	mov	a,_drawCircle_ddF_x_65536_104
      00046B 25*26            [12] 1437 	add	a,_drawCircle_f_65536_104
      00046D F5*26            [12] 1438 	mov	_drawCircle_f_65536_104,a
      00046F E5*29            [12] 1439 	mov	a,(_drawCircle_ddF_x_65536_104 + 1)
      000471 35*27            [12] 1440 	addc	a,(_drawCircle_f_65536_104 + 1)
      000473 F5*27            [12] 1441 	mov	(_drawCircle_f_65536_104 + 1),a
                                   1442 ;	ecen4330_lcd_v3.c:272: drawPixel(x0 + x, y0 + y, color);
      000475 AC*24            [24] 1443 	mov	r4,_drawCircle_x0_65536_103
      000477 AD*25            [24] 1444 	mov	r5,(_drawCircle_x0_65536_103 + 1)
      000479 E5*2A            [12] 1445 	mov	a,_drawCircle_x_65536_104
      00047B 2C               [12] 1446 	add	a,r4
      00047C FE               [12] 1447 	mov	r6,a
      00047D E5*2B            [12] 1448 	mov	a,(_drawCircle_x_65536_104 + 1)
      00047F 3D               [12] 1449 	addc	a,r5
      000480 FF               [12] 1450 	mov	r7,a
      000481 8E*2C            [24] 1451 	mov	_drawCircle_sloc0_1_0,r6
      000483 8F*2D            [24] 1452 	mov	(_drawCircle_sloc0_1_0 + 1),r7
      000485 AA*1E            [24] 1453 	mov	r2,_drawCircle_PARM_2
      000487 AB*1F            [24] 1454 	mov	r3,(_drawCircle_PARM_2 + 1)
      000489 E8               [12] 1455 	mov	a,r0
      00048A 2A               [12] 1456 	add	a,r2
      00048B FE               [12] 1457 	mov	r6,a
      00048C E9               [12] 1458 	mov	a,r1
      00048D 3B               [12] 1459 	addc	a,r3
      00048E FF               [12] 1460 	mov	r7,a
      00048F 8E*2E            [24] 1461 	mov	_drawCircle_sloc1_1_0,r6
      000491 8F*2F            [24] 1462 	mov	(_drawCircle_sloc1_1_0 + 1),r7
      000493 85*2E*1A         [24] 1463 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      000496 85*2F*1B         [24] 1464 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      000499 85*22*1C         [24] 1465 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00049C 85*23*1D         [24] 1466 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00049F 85*2C 82         [24] 1467 	mov	dpl,_drawCircle_sloc0_1_0
      0004A2 85*2D 83         [24] 1468 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      0004A5 C0 05            [24] 1469 	push	ar5
      0004A7 C0 04            [24] 1470 	push	ar4
      0004A9 C0 03            [24] 1471 	push	ar3
      0004AB C0 02            [24] 1472 	push	ar2
      0004AD C0 01            [24] 1473 	push	ar1
      0004AF C0 00            [24] 1474 	push	ar0
      0004B1 12r03r1E         [24] 1475 	lcall	_drawPixel
      0004B4 D0 00            [24] 1476 	pop	ar0
      0004B6 D0 01            [24] 1477 	pop	ar1
      0004B8 D0 02            [24] 1478 	pop	ar2
      0004BA D0 03            [24] 1479 	pop	ar3
      0004BC D0 04            [24] 1480 	pop	ar4
      0004BE D0 05            [24] 1481 	pop	ar5
                                   1482 ;	ecen4330_lcd_v3.c:273: drawPixel(x0 - x, y0 + y, color);
      0004C0 EC               [12] 1483 	mov	a,r4
      0004C1 C3               [12] 1484 	clr	c
      0004C2 95*2A            [12] 1485 	subb	a,_drawCircle_x_65536_104
      0004C4 FE               [12] 1486 	mov	r6,a
      0004C5 ED               [12] 1487 	mov	a,r5
      0004C6 95*2B            [12] 1488 	subb	a,(_drawCircle_x_65536_104 + 1)
      0004C8 FF               [12] 1489 	mov	r7,a
      0004C9 8E*30            [24] 1490 	mov	_drawCircle_sloc2_1_0,r6
      0004CB 8F*31            [24] 1491 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      0004CD 85*2E*1A         [24] 1492 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      0004D0 85*2F*1B         [24] 1493 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      0004D3 85*22*1C         [24] 1494 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004D6 85*23*1D         [24] 1495 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004D9 85*30 82         [24] 1496 	mov	dpl,_drawCircle_sloc2_1_0
      0004DC 85*31 83         [24] 1497 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0004DF C0 05            [24] 1498 	push	ar5
      0004E1 C0 04            [24] 1499 	push	ar4
      0004E3 C0 03            [24] 1500 	push	ar3
      0004E5 C0 02            [24] 1501 	push	ar2
      0004E7 C0 01            [24] 1502 	push	ar1
      0004E9 C0 00            [24] 1503 	push	ar0
      0004EB 12r03r1E         [24] 1504 	lcall	_drawPixel
      0004EE D0 00            [24] 1505 	pop	ar0
      0004F0 D0 01            [24] 1506 	pop	ar1
      0004F2 D0 02            [24] 1507 	pop	ar2
      0004F4 D0 03            [24] 1508 	pop	ar3
      0004F6 D0 04            [24] 1509 	pop	ar4
      0004F8 D0 05            [24] 1510 	pop	ar5
                                   1511 ;	ecen4330_lcd_v3.c:274: drawPixel(x0 + x, y0 - y, color);
      0004FA EA               [12] 1512 	mov	a,r2
      0004FB C3               [12] 1513 	clr	c
      0004FC 98               [12] 1514 	subb	a,r0
      0004FD FE               [12] 1515 	mov	r6,a
      0004FE EB               [12] 1516 	mov	a,r3
      0004FF 99               [12] 1517 	subb	a,r1
      000500 FF               [12] 1518 	mov	r7,a
      000501 8E*1A            [24] 1519 	mov	_drawPixel_PARM_2,r6
      000503 8F*1B            [24] 1520 	mov	(_drawPixel_PARM_2 + 1),r7
      000505 85*22*1C         [24] 1521 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000508 85*23*1D         [24] 1522 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00050B 85*2C 82         [24] 1523 	mov	dpl,_drawCircle_sloc0_1_0
      00050E 85*2D 83         [24] 1524 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      000511 C0 07            [24] 1525 	push	ar7
      000513 C0 06            [24] 1526 	push	ar6
      000515 C0 05            [24] 1527 	push	ar5
      000517 C0 04            [24] 1528 	push	ar4
      000519 C0 03            [24] 1529 	push	ar3
      00051B C0 02            [24] 1530 	push	ar2
      00051D C0 01            [24] 1531 	push	ar1
      00051F C0 00            [24] 1532 	push	ar0
      000521 12r03r1E         [24] 1533 	lcall	_drawPixel
      000524 D0 00            [24] 1534 	pop	ar0
      000526 D0 01            [24] 1535 	pop	ar1
      000528 D0 02            [24] 1536 	pop	ar2
      00052A D0 03            [24] 1537 	pop	ar3
      00052C D0 04            [24] 1538 	pop	ar4
      00052E D0 05            [24] 1539 	pop	ar5
      000530 D0 06            [24] 1540 	pop	ar6
      000532 D0 07            [24] 1541 	pop	ar7
                                   1542 ;	ecen4330_lcd_v3.c:275: drawPixel(x0 - x, y0 - y, color);
      000534 8E*1A            [24] 1543 	mov	_drawPixel_PARM_2,r6
      000536 8F*1B            [24] 1544 	mov	(_drawPixel_PARM_2 + 1),r7
      000538 85*22*1C         [24] 1545 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00053B 85*23*1D         [24] 1546 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00053E 85*30 82         [24] 1547 	mov	dpl,_drawCircle_sloc2_1_0
      000541 85*31 83         [24] 1548 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000544 C0 05            [24] 1549 	push	ar5
      000546 C0 04            [24] 1550 	push	ar4
      000548 C0 03            [24] 1551 	push	ar3
      00054A C0 02            [24] 1552 	push	ar2
      00054C C0 01            [24] 1553 	push	ar1
      00054E C0 00            [24] 1554 	push	ar0
      000550 12r03r1E         [24] 1555 	lcall	_drawPixel
      000553 D0 00            [24] 1556 	pop	ar0
      000555 D0 01            [24] 1557 	pop	ar1
      000557 D0 02            [24] 1558 	pop	ar2
      000559 D0 03            [24] 1559 	pop	ar3
      00055B D0 04            [24] 1560 	pop	ar4
      00055D D0 05            [24] 1561 	pop	ar5
                                   1562 ;	ecen4330_lcd_v3.c:276: drawPixel(x0 + y, y0 + x, color);
      00055F E8               [12] 1563 	mov	a,r0
      000560 2C               [12] 1564 	add	a,r4
      000561 FE               [12] 1565 	mov	r6,a
      000562 E9               [12] 1566 	mov	a,r1
      000563 3D               [12] 1567 	addc	a,r5
      000564 FF               [12] 1568 	mov	r7,a
      000565 8E*30            [24] 1569 	mov	_drawCircle_sloc2_1_0,r6
      000567 8F*31            [24] 1570 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      000569 E5*2A            [12] 1571 	mov	a,_drawCircle_x_65536_104
      00056B 2A               [12] 1572 	add	a,r2
      00056C FE               [12] 1573 	mov	r6,a
      00056D E5*2B            [12] 1574 	mov	a,(_drawCircle_x_65536_104 + 1)
      00056F 3B               [12] 1575 	addc	a,r3
      000570 FF               [12] 1576 	mov	r7,a
      000571 8E*1A            [24] 1577 	mov	_drawPixel_PARM_2,r6
      000573 8F*1B            [24] 1578 	mov	(_drawPixel_PARM_2 + 1),r7
      000575 85*22*1C         [24] 1579 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000578 85*23*1D         [24] 1580 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00057B 85*30 82         [24] 1581 	mov	dpl,_drawCircle_sloc2_1_0
      00057E 85*31 83         [24] 1582 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000581 C0 07            [24] 1583 	push	ar7
      000583 C0 06            [24] 1584 	push	ar6
      000585 C0 05            [24] 1585 	push	ar5
      000587 C0 04            [24] 1586 	push	ar4
      000589 C0 03            [24] 1587 	push	ar3
      00058B C0 02            [24] 1588 	push	ar2
      00058D C0 01            [24] 1589 	push	ar1
      00058F C0 00            [24] 1590 	push	ar0
      000591 12r03r1E         [24] 1591 	lcall	_drawPixel
      000594 D0 00            [24] 1592 	pop	ar0
      000596 D0 01            [24] 1593 	pop	ar1
      000598 D0 02            [24] 1594 	pop	ar2
      00059A D0 03            [24] 1595 	pop	ar3
      00059C D0 04            [24] 1596 	pop	ar4
      00059E D0 05            [24] 1597 	pop	ar5
      0005A0 D0 06            [24] 1598 	pop	ar6
      0005A2 D0 07            [24] 1599 	pop	ar7
                                   1600 ;	ecen4330_lcd_v3.c:277: drawPixel(x0 - y, y0 + x, color);
      0005A4 EC               [12] 1601 	mov	a,r4
      0005A5 C3               [12] 1602 	clr	c
      0005A6 98               [12] 1603 	subb	a,r0
      0005A7 FC               [12] 1604 	mov	r4,a
      0005A8 ED               [12] 1605 	mov	a,r5
      0005A9 99               [12] 1606 	subb	a,r1
      0005AA FD               [12] 1607 	mov	r5,a
      0005AB 8E*1A            [24] 1608 	mov	_drawPixel_PARM_2,r6
      0005AD 8F*1B            [24] 1609 	mov	(_drawPixel_PARM_2 + 1),r7
      0005AF 85*22*1C         [24] 1610 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B2 85*23*1D         [24] 1611 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005B5 8C 82            [24] 1612 	mov	dpl,r4
      0005B7 8D 83            [24] 1613 	mov	dph,r5
      0005B9 C0 05            [24] 1614 	push	ar5
      0005BB C0 04            [24] 1615 	push	ar4
      0005BD C0 03            [24] 1616 	push	ar3
      0005BF C0 02            [24] 1617 	push	ar2
      0005C1 C0 01            [24] 1618 	push	ar1
      0005C3 C0 00            [24] 1619 	push	ar0
      0005C5 12r03r1E         [24] 1620 	lcall	_drawPixel
      0005C8 D0 00            [24] 1621 	pop	ar0
      0005CA D0 01            [24] 1622 	pop	ar1
      0005CC D0 02            [24] 1623 	pop	ar2
      0005CE D0 03            [24] 1624 	pop	ar3
                                   1625 ;	ecen4330_lcd_v3.c:278: drawPixel(x0 + y, y0 - x, color);
      0005D0 EA               [12] 1626 	mov	a,r2
      0005D1 C3               [12] 1627 	clr	c
      0005D2 95*2A            [12] 1628 	subb	a,_drawCircle_x_65536_104
      0005D4 FA               [12] 1629 	mov	r2,a
      0005D5 EB               [12] 1630 	mov	a,r3
      0005D6 95*2B            [12] 1631 	subb	a,(_drawCircle_x_65536_104 + 1)
      0005D8 FB               [12] 1632 	mov	r3,a
      0005D9 8A*1A            [24] 1633 	mov	_drawPixel_PARM_2,r2
      0005DB 8B*1B            [24] 1634 	mov	(_drawPixel_PARM_2 + 1),r3
      0005DD 85*22*1C         [24] 1635 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005E0 85*23*1D         [24] 1636 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005E3 85*30 82         [24] 1637 	mov	dpl,_drawCircle_sloc2_1_0
      0005E6 85*31 83         [24] 1638 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0005E9 C0 03            [24] 1639 	push	ar3
      0005EB C0 02            [24] 1640 	push	ar2
      0005ED C0 01            [24] 1641 	push	ar1
      0005EF C0 00            [24] 1642 	push	ar0
      0005F1 12r03r1E         [24] 1643 	lcall	_drawPixel
      0005F4 D0 00            [24] 1644 	pop	ar0
      0005F6 D0 01            [24] 1645 	pop	ar1
      0005F8 D0 02            [24] 1646 	pop	ar2
      0005FA D0 03            [24] 1647 	pop	ar3
      0005FC D0 04            [24] 1648 	pop	ar4
      0005FE D0 05            [24] 1649 	pop	ar5
                                   1650 ;	ecen4330_lcd_v3.c:279: drawPixel(x0 - y, y0 - x, color);
      000600 8A*1A            [24] 1651 	mov	_drawPixel_PARM_2,r2
      000602 8B*1B            [24] 1652 	mov	(_drawPixel_PARM_2 + 1),r3
      000604 85*22*1C         [24] 1653 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000607 85*23*1D         [24] 1654 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00060A 8C 82            [24] 1655 	mov	dpl,r4
      00060C 8D 83            [24] 1656 	mov	dph,r5
      00060E C0 03            [24] 1657 	push	ar3
      000610 C0 02            [24] 1658 	push	ar2
      000612 C0 01            [24] 1659 	push	ar1
      000614 C0 00            [24] 1660 	push	ar0
      000616 12r03r1E         [24] 1661 	lcall	_drawPixel
      000619 D0 00            [24] 1662 	pop	ar0
      00061B D0 01            [24] 1663 	pop	ar1
      00061D D0 02            [24] 1664 	pop	ar2
      00061F D0 03            [24] 1665 	pop	ar3
      000621 D0 03            [24] 1666 	pop	ar3
      000623 D0 02            [24] 1667 	pop	ar2
                                   1668 ;	ecen4330_lcd_v3.c:281: }
      000625 02r04r25         [24] 1669 	ljmp	00103$
                                   1670 ;------------------------------------------------------------
                                   1671 ;Allocation info for local variables in function 'testCircles'
                                   1672 ;------------------------------------------------------------
                                   1673 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1674 ;radius                    Allocated to registers r7 
                                   1675 ;x                         Allocated to registers r1 r2 
                                   1676 ;y                         Allocated to registers r0 r6 
                                   1677 ;r2                        Allocated to registers r3 r4 
                                   1678 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1679 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1680 ;------------------------------------------------------------
                                   1681 ;	ecen4330_lcd_v3.c:289: void testCircles (uint8_t radius, uint16_t color) {
                                   1682 ;	-----------------------------------------
                                   1683 ;	 function testCircles
                                   1684 ;	-----------------------------------------
      000628                       1685 _testCircles:
      000628 AF 82            [24] 1686 	mov	r7,dpl
                                   1687 ;	ecen4330_lcd_v3.c:290: int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00062A 8F 05            [24] 1688 	mov	ar5,r7
      00062C 7E 00            [12] 1689 	mov	r6,#0x00
      00062E ED               [12] 1690 	mov	a,r5
      00062F 2D               [12] 1691 	add	a,r5
      000630 FB               [12] 1692 	mov	r3,a
      000631 EE               [12] 1693 	mov	a,r6
      000632 33               [12] 1694 	rlc	a
      000633 FC               [12] 1695 	mov	r4,a
      000634 A9*16            [24] 1696 	mov	r1,__width
      000636 AA*17            [24] 1697 	mov	r2,(__width + 1)
      000638 ED               [12] 1698 	mov	a,r5
      000639 29               [12] 1699 	add	a,r1
      00063A F5*34            [12] 1700 	mov	_testCircles_w_65536_108,a
      00063C EE               [12] 1701 	mov	a,r6
      00063D 3A               [12] 1702 	addc	a,r2
      00063E F5*35            [12] 1703 	mov	(_testCircles_w_65536_108 + 1),a
      000640 A8*18            [24] 1704 	mov	r0,__height
      000642 AA*19            [24] 1705 	mov	r2,(__height + 1)
      000644 ED               [12] 1706 	mov	a,r5
      000645 28               [12] 1707 	add	a,r0
      000646 F5*36            [12] 1708 	mov	_testCircles_h_65536_108,a
      000648 EE               [12] 1709 	mov	a,r6
      000649 3A               [12] 1710 	addc	a,r2
      00064A F5*37            [12] 1711 	mov	(_testCircles_h_65536_108 + 1),a
                                   1712 ;	ecen4330_lcd_v3.c:292: for(x=0; x<w; x+=r2) {
      00064C 79 00            [12] 1713 	mov	r1,#0x00
      00064E 7A 00            [12] 1714 	mov	r2,#0x00
      000650                       1715 00107$:
      000650 C3               [12] 1716 	clr	c
      000651 E9               [12] 1717 	mov	a,r1
      000652 95*34            [12] 1718 	subb	a,_testCircles_w_65536_108
      000654 EA               [12] 1719 	mov	a,r2
      000655 64 80            [12] 1720 	xrl	a,#0x80
      000657 85*35 F0         [24] 1721 	mov	b,(_testCircles_w_65536_108 + 1)
      00065A 63 F0 80         [24] 1722 	xrl	b,#0x80
      00065D 95 F0            [12] 1723 	subb	a,b
      00065F 50 57            [24] 1724 	jnc	00109$
                                   1725 ;	ecen4330_lcd_v3.c:293: for(y=0; y<h; y+=r2) {
      000661 78 00            [12] 1726 	mov	r0,#0x00
      000663 7E 00            [12] 1727 	mov	r6,#0x00
      000665                       1728 00104$:
      000665 C3               [12] 1729 	clr	c
      000666 E8               [12] 1730 	mov	a,r0
      000667 95*36            [12] 1731 	subb	a,_testCircles_h_65536_108
      000669 EE               [12] 1732 	mov	a,r6
      00066A 64 80            [12] 1733 	xrl	a,#0x80
      00066C 85*37 F0         [24] 1734 	mov	b,(_testCircles_h_65536_108 + 1)
      00066F 63 F0 80         [24] 1735 	xrl	b,#0x80
      000672 95 F0            [12] 1736 	subb	a,b
      000674 50 3A            [24] 1737 	jnc	00108$
                                   1738 ;	ecen4330_lcd_v3.c:294: drawCircle(x, y, radius, color);
      000676 89 82            [24] 1739 	mov	dpl,r1
      000678 8A 83            [24] 1740 	mov	dph,r2
      00067A 88*1E            [24] 1741 	mov	_drawCircle_PARM_2,r0
      00067C 8E*1F            [24] 1742 	mov	(_drawCircle_PARM_2 + 1),r6
      00067E 8F*20            [24] 1743 	mov	_drawCircle_PARM_3,r7
      000680 75*21 00         [24] 1744 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000683 85*32*22         [24] 1745 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000686 85*33*23         [24] 1746 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000689 C0 07            [24] 1747 	push	ar7
      00068B C0 06            [24] 1748 	push	ar6
      00068D C0 04            [24] 1749 	push	ar4
      00068F C0 03            [24] 1750 	push	ar3
      000691 C0 02            [24] 1751 	push	ar2
      000693 C0 01            [24] 1752 	push	ar1
      000695 C0 00            [24] 1753 	push	ar0
      000697 12r03r75         [24] 1754 	lcall	_drawCircle
      00069A D0 00            [24] 1755 	pop	ar0
      00069C D0 01            [24] 1756 	pop	ar1
      00069E D0 02            [24] 1757 	pop	ar2
      0006A0 D0 03            [24] 1758 	pop	ar3
      0006A2 D0 04            [24] 1759 	pop	ar4
      0006A4 D0 06            [24] 1760 	pop	ar6
      0006A6 D0 07            [24] 1761 	pop	ar7
                                   1762 ;	ecen4330_lcd_v3.c:293: for(y=0; y<h; y+=r2) {
      0006A8 EB               [12] 1763 	mov	a,r3
      0006A9 28               [12] 1764 	add	a,r0
      0006AA F8               [12] 1765 	mov	r0,a
      0006AB EC               [12] 1766 	mov	a,r4
      0006AC 3E               [12] 1767 	addc	a,r6
      0006AD FE               [12] 1768 	mov	r6,a
      0006AE 80 B5            [24] 1769 	sjmp	00104$
      0006B0                       1770 00108$:
                                   1771 ;	ecen4330_lcd_v3.c:292: for(x=0; x<w; x+=r2) {
      0006B0 EB               [12] 1772 	mov	a,r3
      0006B1 29               [12] 1773 	add	a,r1
      0006B2 F9               [12] 1774 	mov	r1,a
      0006B3 EC               [12] 1775 	mov	a,r4
      0006B4 3A               [12] 1776 	addc	a,r2
      0006B5 FA               [12] 1777 	mov	r2,a
      0006B6 80 98            [24] 1778 	sjmp	00107$
      0006B8                       1779 00109$:
                                   1780 ;	ecen4330_lcd_v3.c:297: }
      0006B8 22               [24] 1781 	ret
                                   1782 ;------------------------------------------------------------
                                   1783 ;Allocation info for local variables in function 'fillRect'
                                   1784 ;------------------------------------------------------------
                                   1785 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1786 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1787 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1788 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1789 ;x                         Allocated to registers 
                                   1790 ;------------------------------------------------------------
                                   1791 ;	ecen4330_lcd_v3.c:299: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1792 ;	-----------------------------------------
                                   1793 ;	 function fillRect
                                   1794 ;	-----------------------------------------
      0006B9                       1795 _fillRect:
      0006B9 AE 82            [24] 1796 	mov	r6,dpl
      0006BB AF 83            [24] 1797 	mov	r7,dph
                                   1798 ;	ecen4330_lcd_v3.c:300: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0006BD 8E 04            [24] 1799 	mov	ar4,r6
      0006BF 8F 05            [24] 1800 	mov	ar5,r7
      0006C1 C3               [12] 1801 	clr	c
      0006C2 EC               [12] 1802 	mov	a,r4
      0006C3 94 F0            [12] 1803 	subb	a,#0xf0
      0006C5 ED               [12] 1804 	mov	a,r5
      0006C6 94 00            [12] 1805 	subb	a,#0x00
      0006C8 50 0D            [24] 1806 	jnc	00101$
      0006CA AC*38            [24] 1807 	mov	r4,_fillRect_PARM_2
      0006CC AD*39            [24] 1808 	mov	r5,(_fillRect_PARM_2 + 1)
      0006CE C3               [12] 1809 	clr	c
      0006CF EC               [12] 1810 	mov	a,r4
      0006D0 94 40            [12] 1811 	subb	a,#0x40
      0006D2 ED               [12] 1812 	mov	a,r5
      0006D3 94 01            [12] 1813 	subb	a,#0x01
      0006D5 40 01            [24] 1814 	jc	00102$
      0006D7                       1815 00101$:
                                   1816 ;	ecen4330_lcd_v3.c:302: return;
      0006D7 22               [24] 1817 	ret
      0006D8                       1818 00102$:
                                   1819 ;	ecen4330_lcd_v3.c:305: if ((x+w-1) >= TFTWIDTH)
      0006D8 E5*3A            [12] 1820 	mov	a,_fillRect_PARM_3
      0006DA 2E               [12] 1821 	add	a,r6
      0006DB FC               [12] 1822 	mov	r4,a
      0006DC E5*3B            [12] 1823 	mov	a,(_fillRect_PARM_3 + 1)
      0006DE 3F               [12] 1824 	addc	a,r7
      0006DF FD               [12] 1825 	mov	r5,a
      0006E0 1C               [12] 1826 	dec	r4
      0006E1 BC FF 01         [24] 1827 	cjne	r4,#0xff,00161$
      0006E4 1D               [12] 1828 	dec	r5
      0006E5                       1829 00161$:
      0006E5 C3               [12] 1830 	clr	c
      0006E6 EC               [12] 1831 	mov	a,r4
      0006E7 94 F0            [12] 1832 	subb	a,#0xf0
      0006E9 ED               [12] 1833 	mov	a,r5
      0006EA 94 00            [12] 1834 	subb	a,#0x00
      0006EC 40 0A            [24] 1835 	jc	00105$
                                   1836 ;	ecen4330_lcd_v3.c:307: w = TFTWIDTH-x;
      0006EE 74 F0            [12] 1837 	mov	a,#0xf0
      0006F0 C3               [12] 1838 	clr	c
      0006F1 9E               [12] 1839 	subb	a,r6
      0006F2 F5*3A            [12] 1840 	mov	_fillRect_PARM_3,a
      0006F4 E4               [12] 1841 	clr	a
      0006F5 9F               [12] 1842 	subb	a,r7
      0006F6 F5*3B            [12] 1843 	mov	(_fillRect_PARM_3 + 1),a
      0006F8                       1844 00105$:
                                   1845 ;	ecen4330_lcd_v3.c:310: if ((y+h-1) >= TFTHEIGHT)
      0006F8 E5*3C            [12] 1846 	mov	a,_fillRect_PARM_4
      0006FA 25*38            [12] 1847 	add	a,_fillRect_PARM_2
      0006FC FC               [12] 1848 	mov	r4,a
      0006FD E5*3D            [12] 1849 	mov	a,(_fillRect_PARM_4 + 1)
      0006FF 35*39            [12] 1850 	addc	a,(_fillRect_PARM_2 + 1)
      000701 FD               [12] 1851 	mov	r5,a
      000702 1C               [12] 1852 	dec	r4
      000703 BC FF 01         [24] 1853 	cjne	r4,#0xff,00163$
      000706 1D               [12] 1854 	dec	r5
      000707                       1855 00163$:
      000707 C3               [12] 1856 	clr	c
      000708 EC               [12] 1857 	mov	a,r4
      000709 94 40            [12] 1858 	subb	a,#0x40
      00070B ED               [12] 1859 	mov	a,r5
      00070C 94 01            [12] 1860 	subb	a,#0x01
      00070E 40 0D            [24] 1861 	jc	00107$
                                   1862 ;	ecen4330_lcd_v3.c:312: h = TFTHEIGHT-y;
      000710 74 40            [12] 1863 	mov	a,#0x40
      000712 C3               [12] 1864 	clr	c
      000713 95*38            [12] 1865 	subb	a,_fillRect_PARM_2
      000715 F5*3C            [12] 1866 	mov	_fillRect_PARM_4,a
      000717 74 01            [12] 1867 	mov	a,#0x01
      000719 95*39            [12] 1868 	subb	a,(_fillRect_PARM_2 + 1)
      00071B F5*3D            [12] 1869 	mov	(_fillRect_PARM_4 + 1),a
      00071D                       1870 00107$:
                                   1871 ;	ecen4330_lcd_v3.c:315: setAddress(x, y, x+w-1, y+h-1);
      00071D E5*3A            [12] 1872 	mov	a,_fillRect_PARM_3
      00071F 2E               [12] 1873 	add	a,r6
      000720 FC               [12] 1874 	mov	r4,a
      000721 E5*3B            [12] 1875 	mov	a,(_fillRect_PARM_3 + 1)
      000723 3F               [12] 1876 	addc	a,r7
      000724 FD               [12] 1877 	mov	r5,a
      000725 1C               [12] 1878 	dec	r4
      000726 BC FF 01         [24] 1879 	cjne	r4,#0xff,00165$
      000729 1D               [12] 1880 	dec	r5
      00072A                       1881 00165$:
      00072A 8C*02            [24] 1882 	mov	_setAddress_PARM_3,r4
      00072C 8D*03            [24] 1883 	mov	(_setAddress_PARM_3 + 1),r5
      00072E E5*3C            [12] 1884 	mov	a,_fillRect_PARM_4
      000730 25*38            [12] 1885 	add	a,_fillRect_PARM_2
      000732 FC               [12] 1886 	mov	r4,a
      000733 E5*3D            [12] 1887 	mov	a,(_fillRect_PARM_4 + 1)
      000735 35*39            [12] 1888 	addc	a,(_fillRect_PARM_2 + 1)
      000737 FD               [12] 1889 	mov	r5,a
      000738 1C               [12] 1890 	dec	r4
      000739 BC FF 01         [24] 1891 	cjne	r4,#0xff,00166$
      00073C 1D               [12] 1892 	dec	r5
      00073D                       1893 00166$:
      00073D 8C*04            [24] 1894 	mov	_setAddress_PARM_4,r4
      00073F 8D*05            [24] 1895 	mov	(_setAddress_PARM_4 + 1),r5
      000741 85*38*00         [24] 1896 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000744 85*39*01         [24] 1897 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000747 8E 82            [24] 1898 	mov	dpl,r6
      000749 8F 83            [24] 1899 	mov	dph,r7
      00074B 12r01r42         [24] 1900 	lcall	_setAddress
                                   1901 ;	ecen4330_lcd_v3.c:318: write8Reg(0x2C);
                                   1902 ;	assignBit
      00074E C2 B5            [12] 1903 	clr	_P3_5
                                   1904 ;	assignBit
      000750 D2 B4            [12] 1905 	setb	_P3_4
      000752 85*02 82         [24] 1906 	mov	dpl,_lcd_address
      000755 85*03 83         [24] 1907 	mov	dph,(_lcd_address + 1)
      000758 74 2C            [12] 1908 	mov	a,#0x2c
      00075A F0               [24] 1909 	movx	@dptr,a
                                   1910 ;	assignBit
      00075B C2 B4            [12] 1911 	clr	_P3_4
                                   1912 ;	ecen4330_lcd_v3.c:319: CD = 1;
                                   1913 ;	assignBit
      00075D D2 B5            [12] 1914 	setb	_P3_5
                                   1915 ;	ecen4330_lcd_v3.c:320: for(y=h; y>0; y--)
      00075F AF*3F            [24] 1916 	mov	r7,(_fillRect_PARM_5 + 1)
      000761 AD*3C            [24] 1917 	mov	r5,_fillRect_PARM_4
      000763 AE*3D            [24] 1918 	mov	r6,(_fillRect_PARM_4 + 1)
      000765                       1919 00114$:
      000765 ED               [12] 1920 	mov	a,r5
      000766 4E               [12] 1921 	orl	a,r6
      000767 60 30            [24] 1922 	jz	00116$
                                   1923 ;	ecen4330_lcd_v3.c:322: for(x=w; x>0; x--)
      000769 AB*3A            [24] 1924 	mov	r3,_fillRect_PARM_3
      00076B AC*3B            [24] 1925 	mov	r4,(_fillRect_PARM_3 + 1)
      00076D                       1926 00111$:
      00076D EB               [12] 1927 	mov	a,r3
      00076E 4C               [12] 1928 	orl	a,r4
      00076F 60 21            [24] 1929 	jz	00115$
                                   1930 ;	ecen4330_lcd_v3.c:325: write8(color>>8); write8(color);
                                   1931 ;	assignBit
      000771 D2 B4            [12] 1932 	setb	_P3_4
      000773 85*02 82         [24] 1933 	mov	dpl,_lcd_address
      000776 85*03 83         [24] 1934 	mov	dph,(_lcd_address + 1)
      000779 EF               [12] 1935 	mov	a,r7
      00077A F0               [24] 1936 	movx	@dptr,a
                                   1937 ;	assignBit
      00077B C2 B4            [12] 1938 	clr	_P3_4
                                   1939 ;	assignBit
      00077D D2 B4            [12] 1940 	setb	_P3_4
      00077F 85*02 82         [24] 1941 	mov	dpl,_lcd_address
      000782 85*03 83         [24] 1942 	mov	dph,(_lcd_address + 1)
      000785 E5*3E            [12] 1943 	mov	a,_fillRect_PARM_5
      000787 FA               [12] 1944 	mov	r2,a
      000788 F0               [24] 1945 	movx	@dptr,a
                                   1946 ;	assignBit
      000789 C2 B4            [12] 1947 	clr	_P3_4
                                   1948 ;	ecen4330_lcd_v3.c:322: for(x=w; x>0; x--)
      00078B 1B               [12] 1949 	dec	r3
      00078C BB FF 01         [24] 1950 	cjne	r3,#0xff,00169$
      00078F 1C               [12] 1951 	dec	r4
      000790                       1952 00169$:
      000790 80 DB            [24] 1953 	sjmp	00111$
      000792                       1954 00115$:
                                   1955 ;	ecen4330_lcd_v3.c:320: for(y=h; y>0; y--)
      000792 1D               [12] 1956 	dec	r5
      000793 BD FF 01         [24] 1957 	cjne	r5,#0xff,00170$
      000796 1E               [12] 1958 	dec	r6
      000797                       1959 00170$:
      000797 80 CC            [24] 1960 	sjmp	00114$
      000799                       1961 00116$:
                                   1962 ;	ecen4330_lcd_v3.c:329: }
      000799 22               [24] 1963 	ret
                                   1964 ;------------------------------------------------------------
                                   1965 ;Allocation info for local variables in function 'fillScreen'
                                   1966 ;------------------------------------------------------------
                                   1967 ;Color                     Allocated to registers r6 r7 
                                   1968 ;len                       Allocated to registers 
                                   1969 ;blocks                    Allocated to registers r4 r7 
                                   1970 ;i                         Allocated to registers r3 
                                   1971 ;hi                        Allocated to registers r5 
                                   1972 ;lo                        Allocated to registers r6 
                                   1973 ;------------------------------------------------------------
                                   1974 ;	ecen4330_lcd_v3.c:336: void fillScreen (uint16_t Color) {
                                   1975 ;	-----------------------------------------
                                   1976 ;	 function fillScreen
                                   1977 ;	-----------------------------------------
      00079A                       1978 _fillScreen:
      00079A AE 82            [24] 1979 	mov	r6,dpl
      00079C AF 83            [24] 1980 	mov	r7,dph
                                   1981 ;	ecen4330_lcd_v3.c:341: uint8_t  i, hi = Color >> 8,
      00079E 8F 05            [24] 1982 	mov	ar5,r7
                                   1983 ;	ecen4330_lcd_v3.c:342: lo = Color;
                                   1984 ;	ecen4330_lcd_v3.c:345: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007A0 E4               [12] 1985 	clr	a
      0007A1 F5*00            [12] 1986 	mov	_setAddress_PARM_2,a
      0007A3 F5*01            [12] 1987 	mov	(_setAddress_PARM_2 + 1),a
      0007A5 75*02 EF         [24] 1988 	mov	_setAddress_PARM_3,#0xef
                                   1989 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007A8 F5*03            [12] 1990 	mov	(_setAddress_PARM_3 + 1),a
      0007AA 75*04 3F         [24] 1991 	mov	_setAddress_PARM_4,#0x3f
      0007AD 75*05 01         [24] 1992 	mov	(_setAddress_PARM_4 + 1),#0x01
      0007B0 90 00 00         [24] 1993 	mov	dptr,#0x0000
      0007B3 C0 06            [24] 1994 	push	ar6
      0007B5 C0 05            [24] 1995 	push	ar5
      0007B7 12r01r42         [24] 1996 	lcall	_setAddress
      0007BA D0 05            [24] 1997 	pop	ar5
      0007BC D0 06            [24] 1998 	pop	ar6
                                   1999 ;	ecen4330_lcd_v3.c:347: write8Reg(0x2C);
                                   2000 ;	assignBit
      0007BE C2 B5            [12] 2001 	clr	_P3_5
                                   2002 ;	assignBit
      0007C0 D2 B4            [12] 2003 	setb	_P3_4
      0007C2 85*02 82         [24] 2004 	mov	dpl,_lcd_address
      0007C5 85*03 83         [24] 2005 	mov	dph,(_lcd_address + 1)
      0007C8 74 2C            [12] 2006 	mov	a,#0x2c
      0007CA F0               [24] 2007 	movx	@dptr,a
                                   2008 ;	assignBit
      0007CB C2 B4            [12] 2009 	clr	_P3_4
                                   2010 ;	ecen4330_lcd_v3.c:348: CD = 1;
                                   2011 ;	assignBit
      0007CD D2 B5            [12] 2012 	setb	_P3_5
                                   2013 ;	ecen4330_lcd_v3.c:349: write8(hi); write8(lo);
                                   2014 ;	assignBit
      0007CF D2 B4            [12] 2015 	setb	_P3_4
      0007D1 85*02 82         [24] 2016 	mov	dpl,_lcd_address
      0007D4 85*03 83         [24] 2017 	mov	dph,(_lcd_address + 1)
      0007D7 ED               [12] 2018 	mov	a,r5
      0007D8 F0               [24] 2019 	movx	@dptr,a
                                   2020 ;	assignBit
      0007D9 C2 B4            [12] 2021 	clr	_P3_4
                                   2022 ;	assignBit
      0007DB D2 B4            [12] 2023 	setb	_P3_4
      0007DD 85*02 82         [24] 2024 	mov	dpl,_lcd_address
      0007E0 85*03 83         [24] 2025 	mov	dph,(_lcd_address + 1)
      0007E3 EE               [12] 2026 	mov	a,r6
      0007E4 F0               [24] 2027 	movx	@dptr,a
                                   2028 ;	assignBit
      0007E5 C2 B4            [12] 2029 	clr	_P3_4
                                   2030 ;	ecen4330_lcd_v3.c:352: while (blocks--) {
      0007E7 7C B0            [12] 2031 	mov	r4,#0xb0
      0007E9 7F 04            [12] 2032 	mov	r7,#0x04
      0007EB                       2033 00104$:
      0007EB 8C 02            [24] 2034 	mov	ar2,r4
      0007ED 8F 03            [24] 2035 	mov	ar3,r7
      0007EF 1C               [12] 2036 	dec	r4
      0007F0 BC FF 01         [24] 2037 	cjne	r4,#0xff,00140$
      0007F3 1F               [12] 2038 	dec	r7
      0007F4                       2039 00140$:
      0007F4 EA               [12] 2040 	mov	a,r2
      0007F5 4B               [12] 2041 	orl	a,r3
      0007F6 60 66            [24] 2042 	jz	00106$
                                   2043 ;	ecen4330_lcd_v3.c:354: do {
      0007F8 7B 10            [12] 2044 	mov	r3,#0x10
      0007FA                       2045 00101$:
                                   2046 ;	ecen4330_lcd_v3.c:356: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2047 ;	assignBit
      0007FA D2 B4            [12] 2048 	setb	_P3_4
      0007FC 85*02 82         [24] 2049 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2050 	mov	dph,(_lcd_address + 1)
      000802 ED               [12] 2051 	mov	a,r5
      000803 F0               [24] 2052 	movx	@dptr,a
                                   2053 ;	assignBit
      000804 C2 B4            [12] 2054 	clr	_P3_4
                                   2055 ;	assignBit
      000806 D2 B4            [12] 2056 	setb	_P3_4
      000808 85*02 82         [24] 2057 	mov	dpl,_lcd_address
      00080B 85*03 83         [24] 2058 	mov	dph,(_lcd_address + 1)
      00080E EE               [12] 2059 	mov	a,r6
      00080F F0               [24] 2060 	movx	@dptr,a
                                   2061 ;	assignBit
      000810 C2 B4            [12] 2062 	clr	_P3_4
                                   2063 ;	assignBit
      000812 D2 B4            [12] 2064 	setb	_P3_4
      000814 85*02 82         [24] 2065 	mov	dpl,_lcd_address
      000817 85*03 83         [24] 2066 	mov	dph,(_lcd_address + 1)
      00081A ED               [12] 2067 	mov	a,r5
      00081B F0               [24] 2068 	movx	@dptr,a
                                   2069 ;	assignBit
      00081C C2 B4            [12] 2070 	clr	_P3_4
                                   2071 ;	assignBit
      00081E D2 B4            [12] 2072 	setb	_P3_4
      000820 85*02 82         [24] 2073 	mov	dpl,_lcd_address
      000823 85*03 83         [24] 2074 	mov	dph,(_lcd_address + 1)
      000826 EE               [12] 2075 	mov	a,r6
      000827 F0               [24] 2076 	movx	@dptr,a
                                   2077 ;	assignBit
      000828 C2 B4            [12] 2078 	clr	_P3_4
                                   2079 ;	ecen4330_lcd_v3.c:357: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2080 ;	assignBit
      00082A D2 B4            [12] 2081 	setb	_P3_4
      00082C 85*02 82         [24] 2082 	mov	dpl,_lcd_address
      00082F 85*03 83         [24] 2083 	mov	dph,(_lcd_address + 1)
      000832 ED               [12] 2084 	mov	a,r5
      000833 F0               [24] 2085 	movx	@dptr,a
                                   2086 ;	assignBit
      000834 C2 B4            [12] 2087 	clr	_P3_4
                                   2088 ;	assignBit
      000836 D2 B4            [12] 2089 	setb	_P3_4
      000838 85*02 82         [24] 2090 	mov	dpl,_lcd_address
      00083B 85*03 83         [24] 2091 	mov	dph,(_lcd_address + 1)
      00083E EE               [12] 2092 	mov	a,r6
      00083F F0               [24] 2093 	movx	@dptr,a
                                   2094 ;	assignBit
      000840 C2 B4            [12] 2095 	clr	_P3_4
                                   2096 ;	assignBit
      000842 D2 B4            [12] 2097 	setb	_P3_4
      000844 85*02 82         [24] 2098 	mov	dpl,_lcd_address
      000847 85*03 83         [24] 2099 	mov	dph,(_lcd_address + 1)
      00084A ED               [12] 2100 	mov	a,r5
      00084B F0               [24] 2101 	movx	@dptr,a
                                   2102 ;	assignBit
      00084C C2 B4            [12] 2103 	clr	_P3_4
                                   2104 ;	assignBit
      00084E D2 B4            [12] 2105 	setb	_P3_4
      000850 85*02 82         [24] 2106 	mov	dpl,_lcd_address
      000853 85*03 83         [24] 2107 	mov	dph,(_lcd_address + 1)
      000856 EE               [12] 2108 	mov	a,r6
      000857 F0               [24] 2109 	movx	@dptr,a
                                   2110 ;	assignBit
      000858 C2 B4            [12] 2111 	clr	_P3_4
                                   2112 ;	ecen4330_lcd_v3.c:358: } while(--i);
      00085A DB 9E            [24] 2113 	djnz	r3,00101$
      00085C 80 8D            [24] 2114 	sjmp	00104$
      00085E                       2115 00106$:
                                   2116 ;	ecen4330_lcd_v3.c:360: for (i = (char)len & 63; i--; ) {
      00085E 7F 3F            [12] 2117 	mov	r7,#0x3f
      000860                       2118 00109$:
      000860 8F 04            [24] 2119 	mov	ar4,r7
      000862 1F               [12] 2120 	dec	r7
      000863 EC               [12] 2121 	mov	a,r4
      000864 60 1A            [24] 2122 	jz	00111$
                                   2123 ;	ecen4330_lcd_v3.c:362: write8(hi); write8(lo);
                                   2124 ;	assignBit
      000866 D2 B4            [12] 2125 	setb	_P3_4
      000868 85*02 82         [24] 2126 	mov	dpl,_lcd_address
      00086B 85*03 83         [24] 2127 	mov	dph,(_lcd_address + 1)
      00086E ED               [12] 2128 	mov	a,r5
      00086F F0               [24] 2129 	movx	@dptr,a
                                   2130 ;	assignBit
      000870 C2 B4            [12] 2131 	clr	_P3_4
                                   2132 ;	assignBit
      000872 D2 B4            [12] 2133 	setb	_P3_4
      000874 85*02 82         [24] 2134 	mov	dpl,_lcd_address
      000877 85*03 83         [24] 2135 	mov	dph,(_lcd_address + 1)
      00087A EE               [12] 2136 	mov	a,r6
      00087B F0               [24] 2137 	movx	@dptr,a
                                   2138 ;	assignBit
      00087C C2 B4            [12] 2139 	clr	_P3_4
      00087E 80 E0            [24] 2140 	sjmp	00109$
      000880                       2141 00111$:
                                   2142 ;	ecen4330_lcd_v3.c:365: }
      000880 22               [24] 2143 	ret
                                   2144 ;------------------------------------------------------------
                                   2145 ;Allocation info for local variables in function 'drawChar'
                                   2146 ;------------------------------------------------------------
                                   2147 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2148 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2149 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2150 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2151 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2152 ;x                         Allocated to registers r6 r7 
                                   2153 ;i                         Allocated with name '_drawChar_i_65537_149'
                                   2154 ;line                      Allocated with name '_drawChar_line_196609_151'
                                   2155 ;j                         Allocated with name '_drawChar_j_196610_154'
                                   2156 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2157 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2158 ;------------------------------------------------------------
                                   2159 ;	ecen4330_lcd_v3.c:376: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2160 ;	-----------------------------------------
                                   2161 ;	 function drawChar
                                   2162 ;	-----------------------------------------
      000881                       2163 _drawChar:
      000881 AE 82            [24] 2164 	mov	r6,dpl
      000883 AF 83            [24] 2165 	mov	r7,dph
                                   2166 ;	ecen4330_lcd_v3.c:377: if ((x >=TFTWIDTH) ||
      000885 C3               [12] 2167 	clr	c
      000886 EE               [12] 2168 	mov	a,r6
      000887 94 F0            [12] 2169 	subb	a,#0xf0
      000889 EF               [12] 2170 	mov	a,r7
      00088A 64 80            [12] 2171 	xrl	a,#0x80
      00088C 94 80            [12] 2172 	subb	a,#0x80
      00088E 50 67            [24] 2173 	jnc	00101$
                                   2174 ;	ecen4330_lcd_v3.c:378: (y >=TFTHEIGHT)           ||
      000890 AC*40            [24] 2175 	mov	r4,_drawChar_PARM_2
      000892 AD*41            [24] 2176 	mov	r5,(_drawChar_PARM_2 + 1)
      000894 C3               [12] 2177 	clr	c
      000895 EC               [12] 2178 	mov	a,r4
      000896 94 40            [12] 2179 	subb	a,#0x40
      000898 ED               [12] 2180 	mov	a,r5
      000899 64 80            [12] 2181 	xrl	a,#0x80
      00089B 94 81            [12] 2182 	subb	a,#0x81
      00089D 50 58            [24] 2183 	jnc	00101$
                                   2184 ;	ecen4330_lcd_v3.c:379: ((x + 6 * size - 1) < 0) ||
      00089F AA*47            [24] 2185 	mov	r2,_drawChar_PARM_6
      0008A1 7B 00            [12] 2186 	mov	r3,#0x00
      0008A3 8A*00            [24] 2187 	mov	__mulint_PARM_2,r2
      0008A5 8B*01            [24] 2188 	mov	(__mulint_PARM_2 + 1),r3
      0008A7 90 00 06         [24] 2189 	mov	dptr,#0x0006
      0008AA C0 07            [24] 2190 	push	ar7
      0008AC C0 06            [24] 2191 	push	ar6
      0008AE C0 05            [24] 2192 	push	ar5
      0008B0 C0 04            [24] 2193 	push	ar4
      0008B2 C0 03            [24] 2194 	push	ar3
      0008B4 C0 02            [24] 2195 	push	ar2
      0008B6 12r00r00         [24] 2196 	lcall	__mulint
      0008B9 A8 82            [24] 2197 	mov	r0,dpl
      0008BB A9 83            [24] 2198 	mov	r1,dph
      0008BD D0 02            [24] 2199 	pop	ar2
      0008BF D0 03            [24] 2200 	pop	ar3
      0008C1 D0 04            [24] 2201 	pop	ar4
      0008C3 D0 05            [24] 2202 	pop	ar5
      0008C5 D0 06            [24] 2203 	pop	ar6
      0008C7 D0 07            [24] 2204 	pop	ar7
      0008C9 E8               [12] 2205 	mov	a,r0
      0008CA 2E               [12] 2206 	add	a,r6
      0008CB F8               [12] 2207 	mov	r0,a
      0008CC E9               [12] 2208 	mov	a,r1
      0008CD 3F               [12] 2209 	addc	a,r7
      0008CE F9               [12] 2210 	mov	r1,a
      0008CF 18               [12] 2211 	dec	r0
      0008D0 B8 FF 01         [24] 2212 	cjne	r0,#0xff,00176$
      0008D3 19               [12] 2213 	dec	r1
      0008D4                       2214 00176$:
      0008D4 E9               [12] 2215 	mov	a,r1
      0008D5 20 E7 1F         [24] 2216 	jb	acc.7,00101$
                                   2217 ;	ecen4330_lcd_v3.c:380: ((y + 8 * size - 1) < 0))
      0008D8 EB               [12] 2218 	mov	a,r3
      0008D9 C4               [12] 2219 	swap	a
      0008DA 03               [12] 2220 	rr	a
      0008DB 54 F8            [12] 2221 	anl	a,#0xf8
      0008DD CA               [12] 2222 	xch	a,r2
      0008DE C4               [12] 2223 	swap	a
      0008DF 03               [12] 2224 	rr	a
      0008E0 CA               [12] 2225 	xch	a,r2
      0008E1 6A               [12] 2226 	xrl	a,r2
      0008E2 CA               [12] 2227 	xch	a,r2
      0008E3 54 F8            [12] 2228 	anl	a,#0xf8
      0008E5 CA               [12] 2229 	xch	a,r2
      0008E6 6A               [12] 2230 	xrl	a,r2
      0008E7 FB               [12] 2231 	mov	r3,a
      0008E8 EA               [12] 2232 	mov	a,r2
      0008E9 2C               [12] 2233 	add	a,r4
      0008EA FA               [12] 2234 	mov	r2,a
      0008EB EB               [12] 2235 	mov	a,r3
      0008EC 3D               [12] 2236 	addc	a,r5
      0008ED FB               [12] 2237 	mov	r3,a
      0008EE 1A               [12] 2238 	dec	r2
      0008EF BA FF 01         [24] 2239 	cjne	r2,#0xff,00178$
      0008F2 1B               [12] 2240 	dec	r3
      0008F3                       2241 00178$:
      0008F3 EB               [12] 2242 	mov	a,r3
      0008F4 30 E7 01         [24] 2243 	jnb	acc.7,00138$
      0008F7                       2244 00101$:
                                   2245 ;	ecen4330_lcd_v3.c:382: return;
      0008F7 22               [24] 2246 	ret
                                   2247 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      0008F8                       2248 00138$:
      0008F8 74 01            [12] 2249 	mov	a,#0x01
      0008FA B5*47 04         [24] 2250 	cjne	a,_drawChar_PARM_6,00180$
      0008FD 74 01            [12] 2251 	mov	a,#0x01
      0008FF 80 01            [24] 2252 	sjmp	00181$
      000901                       2253 00180$:
      000901 E4               [12] 2254 	clr	a
      000902                       2255 00181$:
      000902 FB               [12] 2256 	mov	r3,a
      000903 FA               [12] 2257 	mov	r2,a
      000904 E5*43            [12] 2258 	mov	a,_drawChar_PARM_4
      000906 B5*45 08         [24] 2259 	cjne	a,_drawChar_PARM_5,00182$
      000909 E5*44            [12] 2260 	mov	a,(_drawChar_PARM_4 + 1)
      00090B B5*46 03         [24] 2261 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      00090E D3               [12] 2262 	setb	c
      00090F 80 01            [24] 2263 	sjmp	00183$
      000911                       2264 00182$:
      000911 C3               [12] 2265 	clr	c
      000912                       2266 00183$:
      000912 92*00            [24] 2267 	mov	_drawChar_sloc0_1_0,c
      000914 75*48 00         [24] 2268 	mov	_drawChar_i_65537_149,#0x00
      000917                       2269 00124$:
                                   2270 ;	ecen4330_lcd_v3.c:391: if (i == 5)
      000917 74 05            [12] 2271 	mov	a,#0x05
      000919 B5*48 05         [24] 2272 	cjne	a,_drawChar_i_65537_149,00107$
                                   2273 ;	ecen4330_lcd_v3.c:393: line = 0x0;
      00091C 75*49 00         [24] 2274 	mov	_drawChar_line_196609_151,#0x00
      00091F 80 47            [24] 2275 	sjmp	00136$
      000921                       2276 00107$:
                                   2277 ;	ecen4330_lcd_v3.c:397: line = pgm_read_byte(font+(c*5)+i);
      000921 C0 02            [24] 2278 	push	ar2
      000923 85*42*00         [24] 2279 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000926 75*01 00         [24] 2280 	mov	(__mulint_PARM_2 + 1),#0x00
      000929 90 00 05         [24] 2281 	mov	dptr,#0x0005
      00092C C0 07            [24] 2282 	push	ar7
      00092E C0 06            [24] 2283 	push	ar6
      000930 C0 05            [24] 2284 	push	ar5
      000932 C0 04            [24] 2285 	push	ar4
      000934 C0 03            [24] 2286 	push	ar3
      000936 12r00r00         [24] 2287 	lcall	__mulint
      000939 A9 82            [24] 2288 	mov	r1,dpl
      00093B AA 83            [24] 2289 	mov	r2,dph
      00093D D0 03            [24] 2290 	pop	ar3
      00093F D0 04            [24] 2291 	pop	ar4
      000941 D0 05            [24] 2292 	pop	ar5
      000943 D0 06            [24] 2293 	pop	ar6
      000945 D0 07            [24] 2294 	pop	ar7
      000947 E9               [12] 2295 	mov	a,r1
      000948 24r00            [12] 2296 	add	a,#_font
      00094A F5*4B            [12] 2297 	mov	_drawChar_sloc1_1_0,a
      00094C EA               [12] 2298 	mov	a,r2
      00094D 34s00            [12] 2299 	addc	a,#(_font >> 8)
      00094F F5*4C            [12] 2300 	mov	(_drawChar_sloc1_1_0 + 1),a
      000951 E5*48            [12] 2301 	mov	a,_drawChar_i_65537_149
      000953 F9               [12] 2302 	mov	r1,a
      000954 33               [12] 2303 	rlc	a
      000955 95 E0            [12] 2304 	subb	a,acc
      000957 FA               [12] 2305 	mov	r2,a
      000958 E9               [12] 2306 	mov	a,r1
      000959 25*4B            [12] 2307 	add	a,_drawChar_sloc1_1_0
      00095B F5 82            [12] 2308 	mov	dpl,a
      00095D EA               [12] 2309 	mov	a,r2
      00095E 35*4C            [12] 2310 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000960 F5 83            [12] 2311 	mov	dph,a
      000962 E4               [12] 2312 	clr	a
      000963 93               [24] 2313 	movc	a,@a+dptr
      000964 F5*49            [12] 2314 	mov	_drawChar_line_196609_151,a
                                   2315 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000966 D0 02            [24] 2316 	pop	ar2
                                   2317 ;	ecen4330_lcd_v3.c:402: for (j = 0; j<8; j++)
      000968                       2318 00136$:
      000968 C2 D5            [12] 2319 	clr	F0
      00096A 85*47 F0         [24] 2320 	mov	b,_drawChar_PARM_6
      00096D E5*48            [12] 2321 	mov	a,_drawChar_i_65537_149
      00096F 30 E7 04         [24] 2322 	jnb	acc.7,00186$
      000972 B2 D5            [12] 2323 	cpl	F0
      000974 F4               [12] 2324 	cpl	a
      000975 04               [12] 2325 	inc	a
      000976                       2326 00186$:
      000976 A4               [48] 2327 	mul	ab
      000977 30 D5 0A         [24] 2328 	jnb	F0,00187$
      00097A F4               [12] 2329 	cpl	a
      00097B 24 01            [12] 2330 	add	a,#0x01
      00097D C5 F0            [12] 2331 	xch	a,b
      00097F F4               [12] 2332 	cpl	a
      000980 34 00            [12] 2333 	addc	a,#0x00
      000982 C5 F0            [12] 2334 	xch	a,b
      000984                       2335 00187$:
      000984 2E               [12] 2336 	add	a,r6
      000985 F5*4B            [12] 2337 	mov	_drawChar_sloc1_1_0,a
      000987 EF               [12] 2338 	mov	a,r7
      000988 35 F0            [12] 2339 	addc	a,b
      00098A F5*4C            [12] 2340 	mov	(_drawChar_sloc1_1_0 + 1),a
      00098C 85*4B*4D         [24] 2341 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      00098F 85*4C*4E         [24] 2342 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000992 75*4A 00         [24] 2343 	mov	_drawChar_j_196610_154,#0x00
      000995                       2344 00122$:
                                   2345 ;	ecen4330_lcd_v3.c:404: if (line & 0x1)
      000995 E5*49            [12] 2346 	mov	a,_drawChar_line_196609_151
      000997 20 E0 03         [24] 2347 	jb	acc.0,00188$
      00099A 02r0Ar42         [24] 2348 	ljmp	00118$
      00099D                       2349 00188$:
                                   2350 ;	ecen4330_lcd_v3.c:406: if (size == 1)
      00099D EB               [12] 2351 	mov	a,r3
      00099E 60 46            [24] 2352 	jz	00110$
                                   2353 ;	ecen4330_lcd_v3.c:408: drawPixel(x+i, y+j, color);
      0009A0 E5*48            [12] 2354 	mov	a,_drawChar_i_65537_149
      0009A2 F8               [12] 2355 	mov	r0,a
      0009A3 33               [12] 2356 	rlc	a
      0009A4 95 E0            [12] 2357 	subb	a,acc
      0009A6 F9               [12] 2358 	mov	r1,a
      0009A7 E8               [12] 2359 	mov	a,r0
      0009A8 2E               [12] 2360 	add	a,r6
      0009A9 F8               [12] 2361 	mov	r0,a
      0009AA E9               [12] 2362 	mov	a,r1
      0009AB 3F               [12] 2363 	addc	a,r7
      0009AC F9               [12] 2364 	mov	r1,a
      0009AD 88 82            [24] 2365 	mov	dpl,r0
      0009AF 89 83            [24] 2366 	mov	dph,r1
      0009B1 E5*4A            [12] 2367 	mov	a,_drawChar_j_196610_154
      0009B3 F8               [12] 2368 	mov	r0,a
      0009B4 33               [12] 2369 	rlc	a
      0009B5 95 E0            [12] 2370 	subb	a,acc
      0009B7 F9               [12] 2371 	mov	r1,a
      0009B8 E8               [12] 2372 	mov	a,r0
      0009B9 2C               [12] 2373 	add	a,r4
      0009BA F8               [12] 2374 	mov	r0,a
      0009BB E9               [12] 2375 	mov	a,r1
      0009BC 3D               [12] 2376 	addc	a,r5
      0009BD F9               [12] 2377 	mov	r1,a
      0009BE 88*1A            [24] 2378 	mov	_drawPixel_PARM_2,r0
      0009C0 89*1B            [24] 2379 	mov	(_drawPixel_PARM_2 + 1),r1
      0009C2 85*43*1C         [24] 2380 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009C5 85*44*1D         [24] 2381 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009C8 C0 07            [24] 2382 	push	ar7
      0009CA C0 06            [24] 2383 	push	ar6
      0009CC C0 05            [24] 2384 	push	ar5
      0009CE C0 04            [24] 2385 	push	ar4
      0009D0 C0 03            [24] 2386 	push	ar3
      0009D2 C0 02            [24] 2387 	push	ar2
      0009D4 12r03r1E         [24] 2388 	lcall	_drawPixel
      0009D7 D0 02            [24] 2389 	pop	ar2
      0009D9 D0 03            [24] 2390 	pop	ar3
      0009DB D0 04            [24] 2391 	pop	ar4
      0009DD D0 05            [24] 2392 	pop	ar5
      0009DF D0 06            [24] 2393 	pop	ar6
      0009E1 D0 07            [24] 2394 	pop	ar7
      0009E3 02r0ArE9         [24] 2395 	ljmp	00119$
      0009E6                       2396 00110$:
                                   2397 ;	ecen4330_lcd_v3.c:411: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009E6 85*4D 82         [24] 2398 	mov	dpl,_drawChar_sloc2_1_0
      0009E9 85*4E 83         [24] 2399 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      0009EC C2 D5            [12] 2400 	clr	F0
      0009EE 85*47 F0         [24] 2401 	mov	b,_drawChar_PARM_6
      0009F1 E5*4A            [12] 2402 	mov	a,_drawChar_j_196610_154
      0009F3 30 E7 04         [24] 2403 	jnb	acc.7,00190$
      0009F6 B2 D5            [12] 2404 	cpl	F0
      0009F8 F4               [12] 2405 	cpl	a
      0009F9 04               [12] 2406 	inc	a
      0009FA                       2407 00190$:
      0009FA A4               [48] 2408 	mul	ab
      0009FB 30 D5 0A         [24] 2409 	jnb	F0,00191$
      0009FE F4               [12] 2410 	cpl	a
      0009FF 24 01            [12] 2411 	add	a,#0x01
      000A01 C5 F0            [12] 2412 	xch	a,b
      000A03 F4               [12] 2413 	cpl	a
      000A04 34 00            [12] 2414 	addc	a,#0x00
      000A06 C5 F0            [12] 2415 	xch	a,b
      000A08                       2416 00191$:
      000A08 2C               [12] 2417 	add	a,r4
      000A09 F8               [12] 2418 	mov	r0,a
      000A0A ED               [12] 2419 	mov	a,r5
      000A0B 35 F0            [12] 2420 	addc	a,b
      000A0D F9               [12] 2421 	mov	r1,a
      000A0E 88*38            [24] 2422 	mov	_fillRect_PARM_2,r0
      000A10 89*39            [24] 2423 	mov	(_fillRect_PARM_2 + 1),r1
      000A12 A8*47            [24] 2424 	mov	r0,_drawChar_PARM_6
      000A14 79 00            [12] 2425 	mov	r1,#0x00
      000A16 88*3A            [24] 2426 	mov	_fillRect_PARM_3,r0
      000A18 89*3B            [24] 2427 	mov	(_fillRect_PARM_3 + 1),r1
      000A1A 88*3C            [24] 2428 	mov	_fillRect_PARM_4,r0
      000A1C 89*3D            [24] 2429 	mov	(_fillRect_PARM_4 + 1),r1
      000A1E 85*43*3E         [24] 2430 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A21 85*44*3F         [24] 2431 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A24 C0 07            [24] 2432 	push	ar7
      000A26 C0 06            [24] 2433 	push	ar6
      000A28 C0 05            [24] 2434 	push	ar5
      000A2A C0 04            [24] 2435 	push	ar4
      000A2C C0 03            [24] 2436 	push	ar3
      000A2E C0 02            [24] 2437 	push	ar2
      000A30 12r06rB9         [24] 2438 	lcall	_fillRect
      000A33 D0 02            [24] 2439 	pop	ar2
      000A35 D0 03            [24] 2440 	pop	ar3
      000A37 D0 04            [24] 2441 	pop	ar4
      000A39 D0 05            [24] 2442 	pop	ar5
      000A3B D0 06            [24] 2443 	pop	ar6
      000A3D D0 07            [24] 2444 	pop	ar7
      000A3F 02r0ArE9         [24] 2445 	ljmp	00119$
      000A42                       2446 00118$:
                                   2447 ;	ecen4330_lcd_v3.c:413: } else if (bg != color)
      000A42 30*00 03         [24] 2448 	jnb	_drawChar_sloc0_1_0,00192$
      000A45 02r0ArE9         [24] 2449 	ljmp	00119$
      000A48                       2450 00192$:
                                   2451 ;	ecen4330_lcd_v3.c:415: if (size == 1)
      000A48 EA               [12] 2452 	mov	a,r2
      000A49 60 45            [24] 2453 	jz	00113$
                                   2454 ;	ecen4330_lcd_v3.c:417: drawPixel(x+i, y+j, bg);
      000A4B E5*48            [12] 2455 	mov	a,_drawChar_i_65537_149
      000A4D F8               [12] 2456 	mov	r0,a
      000A4E 33               [12] 2457 	rlc	a
      000A4F 95 E0            [12] 2458 	subb	a,acc
      000A51 F9               [12] 2459 	mov	r1,a
      000A52 E8               [12] 2460 	mov	a,r0
      000A53 2E               [12] 2461 	add	a,r6
      000A54 F8               [12] 2462 	mov	r0,a
      000A55 E9               [12] 2463 	mov	a,r1
      000A56 3F               [12] 2464 	addc	a,r7
      000A57 F9               [12] 2465 	mov	r1,a
      000A58 88 82            [24] 2466 	mov	dpl,r0
      000A5A 89 83            [24] 2467 	mov	dph,r1
      000A5C E5*4A            [12] 2468 	mov	a,_drawChar_j_196610_154
      000A5E F8               [12] 2469 	mov	r0,a
      000A5F 33               [12] 2470 	rlc	a
      000A60 95 E0            [12] 2471 	subb	a,acc
      000A62 F9               [12] 2472 	mov	r1,a
      000A63 E8               [12] 2473 	mov	a,r0
      000A64 2C               [12] 2474 	add	a,r4
      000A65 F8               [12] 2475 	mov	r0,a
      000A66 E9               [12] 2476 	mov	a,r1
      000A67 3D               [12] 2477 	addc	a,r5
      000A68 F9               [12] 2478 	mov	r1,a
      000A69 88*1A            [24] 2479 	mov	_drawPixel_PARM_2,r0
      000A6B 89*1B            [24] 2480 	mov	(_drawPixel_PARM_2 + 1),r1
      000A6D 85*45*1C         [24] 2481 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A70 85*46*1D         [24] 2482 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A73 C0 07            [24] 2483 	push	ar7
      000A75 C0 06            [24] 2484 	push	ar6
      000A77 C0 05            [24] 2485 	push	ar5
      000A79 C0 04            [24] 2486 	push	ar4
      000A7B C0 03            [24] 2487 	push	ar3
      000A7D C0 02            [24] 2488 	push	ar2
      000A7F 12r03r1E         [24] 2489 	lcall	_drawPixel
      000A82 D0 02            [24] 2490 	pop	ar2
      000A84 D0 03            [24] 2491 	pop	ar3
      000A86 D0 04            [24] 2492 	pop	ar4
      000A88 D0 05            [24] 2493 	pop	ar5
      000A8A D0 06            [24] 2494 	pop	ar6
      000A8C D0 07            [24] 2495 	pop	ar7
      000A8E 80 59            [24] 2496 	sjmp	00119$
      000A90                       2497 00113$:
                                   2498 ;	ecen4330_lcd_v3.c:421: fillRect(x+i*size, y+j*size, size, size, bg);
      000A90 85*4B 82         [24] 2499 	mov	dpl,_drawChar_sloc1_1_0
      000A93 85*4C 83         [24] 2500 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000A96 C2 D5            [12] 2501 	clr	F0
      000A98 85*47 F0         [24] 2502 	mov	b,_drawChar_PARM_6
      000A9B E5*4A            [12] 2503 	mov	a,_drawChar_j_196610_154
      000A9D 30 E7 04         [24] 2504 	jnb	acc.7,00194$
      000AA0 B2 D5            [12] 2505 	cpl	F0
      000AA2 F4               [12] 2506 	cpl	a
      000AA3 04               [12] 2507 	inc	a
      000AA4                       2508 00194$:
      000AA4 A4               [48] 2509 	mul	ab
      000AA5 30 D5 0A         [24] 2510 	jnb	F0,00195$
      000AA8 F4               [12] 2511 	cpl	a
      000AA9 24 01            [12] 2512 	add	a,#0x01
      000AAB C5 F0            [12] 2513 	xch	a,b
      000AAD F4               [12] 2514 	cpl	a
      000AAE 34 00            [12] 2515 	addc	a,#0x00
      000AB0 C5 F0            [12] 2516 	xch	a,b
      000AB2                       2517 00195$:
      000AB2 2C               [12] 2518 	add	a,r4
      000AB3 F8               [12] 2519 	mov	r0,a
      000AB4 ED               [12] 2520 	mov	a,r5
      000AB5 35 F0            [12] 2521 	addc	a,b
      000AB7 F9               [12] 2522 	mov	r1,a
      000AB8 88*38            [24] 2523 	mov	_fillRect_PARM_2,r0
      000ABA 89*39            [24] 2524 	mov	(_fillRect_PARM_2 + 1),r1
      000ABC A8*47            [24] 2525 	mov	r0,_drawChar_PARM_6
      000ABE 79 00            [12] 2526 	mov	r1,#0x00
      000AC0 88*3A            [24] 2527 	mov	_fillRect_PARM_3,r0
      000AC2 89*3B            [24] 2528 	mov	(_fillRect_PARM_3 + 1),r1
      000AC4 88*3C            [24] 2529 	mov	_fillRect_PARM_4,r0
      000AC6 89*3D            [24] 2530 	mov	(_fillRect_PARM_4 + 1),r1
      000AC8 85*45*3E         [24] 2531 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000ACB 85*46*3F         [24] 2532 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000ACE C0 07            [24] 2533 	push	ar7
      000AD0 C0 06            [24] 2534 	push	ar6
      000AD2 C0 05            [24] 2535 	push	ar5
      000AD4 C0 04            [24] 2536 	push	ar4
      000AD6 C0 03            [24] 2537 	push	ar3
      000AD8 C0 02            [24] 2538 	push	ar2
      000ADA 12r06rB9         [24] 2539 	lcall	_fillRect
      000ADD D0 02            [24] 2540 	pop	ar2
      000ADF D0 03            [24] 2541 	pop	ar3
      000AE1 D0 04            [24] 2542 	pop	ar4
      000AE3 D0 05            [24] 2543 	pop	ar5
      000AE5 D0 06            [24] 2544 	pop	ar6
      000AE7 D0 07            [24] 2545 	pop	ar7
      000AE9                       2546 00119$:
                                   2547 ;	ecen4330_lcd_v3.c:425: line >>= 1;
      000AE9 E5*49            [12] 2548 	mov	a,_drawChar_line_196609_151
      000AEB C3               [12] 2549 	clr	c
      000AEC 13               [12] 2550 	rrc	a
      000AED F5*49            [12] 2551 	mov	_drawChar_line_196609_151,a
                                   2552 ;	ecen4330_lcd_v3.c:402: for (j = 0; j<8; j++)
      000AEF 05*4A            [12] 2553 	inc	_drawChar_j_196610_154
      000AF1 C3               [12] 2554 	clr	c
      000AF2 E5*4A            [12] 2555 	mov	a,_drawChar_j_196610_154
      000AF4 64 80            [12] 2556 	xrl	a,#0x80
      000AF6 94 88            [12] 2557 	subb	a,#0x88
      000AF8 50 03            [24] 2558 	jnc	00196$
      000AFA 02r09r95         [24] 2559 	ljmp	00122$
      000AFD                       2560 00196$:
                                   2561 ;	ecen4330_lcd_v3.c:387: for (i=0; i<6; i++ )
      000AFD 05*48            [12] 2562 	inc	_drawChar_i_65537_149
      000AFF C3               [12] 2563 	clr	c
      000B00 E5*48            [12] 2564 	mov	a,_drawChar_i_65537_149
      000B02 64 80            [12] 2565 	xrl	a,#0x80
      000B04 94 86            [12] 2566 	subb	a,#0x86
      000B06 50 03            [24] 2567 	jnc	00197$
      000B08 02r09r17         [24] 2568 	ljmp	00124$
      000B0B                       2569 00197$:
                                   2570 ;	ecen4330_lcd_v3.c:429: }
      000B0B 22               [24] 2571 	ret
                                   2572 ;------------------------------------------------------------
                                   2573 ;Allocation info for local variables in function 'write'
                                   2574 ;------------------------------------------------------------
                                   2575 ;c                         Allocated to registers r7 
                                   2576 ;------------------------------------------------------------
                                   2577 ;	ecen4330_lcd_v3.c:436: void write (uint8_t c)
                                   2578 ;	-----------------------------------------
                                   2579 ;	 function write
                                   2580 ;	-----------------------------------------
      000B0C                       2581 _write:
      000B0C AF 82            [24] 2582 	mov	r7,dpl
                                   2583 ;	ecen4330_lcd_v3.c:438: if (c == '\n')
      000B0E BF 0A 26         [24] 2584 	cjne	r7,#0x0a,00105$
                                   2585 ;	ecen4330_lcd_v3.c:440: cursor_y += textsize*8;
      000B11 AD*10            [24] 2586 	mov	r5,_textsize
      000B13 E4               [12] 2587 	clr	a
      000B14 C4               [12] 2588 	swap	a
      000B15 03               [12] 2589 	rr	a
      000B16 54 F8            [12] 2590 	anl	a,#0xf8
      000B18 CD               [12] 2591 	xch	a,r5
      000B19 C4               [12] 2592 	swap	a
      000B1A 03               [12] 2593 	rr	a
      000B1B CD               [12] 2594 	xch	a,r5
      000B1C 6D               [12] 2595 	xrl	a,r5
      000B1D CD               [12] 2596 	xch	a,r5
      000B1E 54 F8            [12] 2597 	anl	a,#0xf8
      000B20 CD               [12] 2598 	xch	a,r5
      000B21 6D               [12] 2599 	xrl	a,r5
      000B22 FE               [12] 2600 	mov	r6,a
      000B23 AB*0E            [24] 2601 	mov	r3,_cursor_y
      000B25 AC*0F            [24] 2602 	mov	r4,(_cursor_y + 1)
      000B27 ED               [12] 2603 	mov	a,r5
      000B28 2B               [12] 2604 	add	a,r3
      000B29 FB               [12] 2605 	mov	r3,a
      000B2A EE               [12] 2606 	mov	a,r6
      000B2B 3C               [12] 2607 	addc	a,r4
      000B2C FC               [12] 2608 	mov	r4,a
      000B2D 8B*0E            [24] 2609 	mov	_cursor_y,r3
      000B2F 8C*0F            [24] 2610 	mov	(_cursor_y + 1),r4
                                   2611 ;	ecen4330_lcd_v3.c:441: cursor_x  = 0;
      000B31 E4               [12] 2612 	clr	a
      000B32 F5*0C            [12] 2613 	mov	_cursor_x,a
      000B34 F5*0D            [12] 2614 	mov	(_cursor_x + 1),a
      000B36 22               [24] 2615 	ret
      000B37                       2616 00105$:
                                   2617 ;	ecen4330_lcd_v3.c:443: else if (c == '\r')
      000B37 BF 0D 01         [24] 2618 	cjne	r7,#0x0d,00119$
      000B3A 22               [24] 2619 	ret
      000B3B                       2620 00119$:
                                   2621 ;	ecen4330_lcd_v3.c:448: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B3B 85*0E*40         [24] 2622 	mov	_drawChar_PARM_2,_cursor_y
      000B3E 85*0F*41         [24] 2623 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B41 8F*42            [24] 2624 	mov	_drawChar_PARM_3,r7
      000B43 85*12*43         [24] 2625 	mov	_drawChar_PARM_4,_textcolor
      000B46 85*13*44         [24] 2626 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B49 85*14*45         [24] 2627 	mov	_drawChar_PARM_5,_textbgcolor
      000B4C 85*15*46         [24] 2628 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B4F 85*10*47         [24] 2629 	mov	_drawChar_PARM_6,_textsize
      000B52 85*0C 82         [24] 2630 	mov	dpl,_cursor_x
      000B55 85*0D 83         [24] 2631 	mov	dph,(_cursor_x + 1)
      000B58 12r08r81         [24] 2632 	lcall	_drawChar
                                   2633 ;	ecen4330_lcd_v3.c:449: cursor_x += textsize*6;
      000B5B 85*10*00         [24] 2634 	mov	__mulint_PARM_2,_textsize
      000B5E 75*01 00         [24] 2635 	mov	(__mulint_PARM_2 + 1),#0x00
      000B61 90 00 06         [24] 2636 	mov	dptr,#0x0006
      000B64 12r00r00         [24] 2637 	lcall	__mulint
      000B67 AE 82            [24] 2638 	mov	r6,dpl
      000B69 AF 83            [24] 2639 	mov	r7,dph
      000B6B AC*0C            [24] 2640 	mov	r4,_cursor_x
      000B6D AD*0D            [24] 2641 	mov	r5,(_cursor_x + 1)
      000B6F EE               [12] 2642 	mov	a,r6
      000B70 2C               [12] 2643 	add	a,r4
      000B71 FC               [12] 2644 	mov	r4,a
      000B72 EF               [12] 2645 	mov	a,r7
      000B73 3D               [12] 2646 	addc	a,r5
      000B74 FD               [12] 2647 	mov	r5,a
      000B75 8C*0C            [24] 2648 	mov	_cursor_x,r4
      000B77 8D*0D            [24] 2649 	mov	(_cursor_x + 1),r5
                                   2650 ;	ecen4330_lcd_v3.c:451: }
      000B79 22               [24] 2651 	ret
                                   2652 ;------------------------------------------------------------
                                   2653 ;Allocation info for local variables in function 'LCD_string_write'
                                   2654 ;------------------------------------------------------------
                                   2655 ;str                       Allocated to registers r5 r6 r7 
                                   2656 ;i                         Allocated to registers r3 r4 
                                   2657 ;------------------------------------------------------------
                                   2658 ;	ecen4330_lcd_v3.c:458: void LCD_string_write (int8_t *str)
                                   2659 ;	-----------------------------------------
                                   2660 ;	 function LCD_string_write
                                   2661 ;	-----------------------------------------
      000B7A                       2662 _LCD_string_write:
      000B7A AD 82            [24] 2663 	mov	r5,dpl
      000B7C AE 83            [24] 2664 	mov	r6,dph
      000B7E AF F0            [24] 2665 	mov	r7,b
                                   2666 ;	ecen4330_lcd_v3.c:461: for (i=0;str[i]!=0;i++)
      000B80 7B 00            [12] 2667 	mov	r3,#0x00
      000B82 7C 00            [12] 2668 	mov	r4,#0x00
      000B84                       2669 00103$:
      000B84 EB               [12] 2670 	mov	a,r3
      000B85 2D               [12] 2671 	add	a,r5
      000B86 F8               [12] 2672 	mov	r0,a
      000B87 EC               [12] 2673 	mov	a,r4
      000B88 3E               [12] 2674 	addc	a,r6
      000B89 F9               [12] 2675 	mov	r1,a
      000B8A 8F 02            [24] 2676 	mov	ar2,r7
      000B8C 88 82            [24] 2677 	mov	dpl,r0
      000B8E 89 83            [24] 2678 	mov	dph,r1
      000B90 8A F0            [24] 2679 	mov	b,r2
      000B92 12r00r00         [24] 2680 	lcall	__gptrget
      000B95 FA               [12] 2681 	mov	r2,a
      000B96 60 20            [24] 2682 	jz	00105$
                                   2683 ;	ecen4330_lcd_v3.c:463: write(str[i]);
      000B98 8A 82            [24] 2684 	mov	dpl,r2
      000B9A C0 07            [24] 2685 	push	ar7
      000B9C C0 06            [24] 2686 	push	ar6
      000B9E C0 05            [24] 2687 	push	ar5
      000BA0 C0 04            [24] 2688 	push	ar4
      000BA2 C0 03            [24] 2689 	push	ar3
      000BA4 12r0Br0C         [24] 2690 	lcall	_write
      000BA7 D0 03            [24] 2691 	pop	ar3
      000BA9 D0 04            [24] 2692 	pop	ar4
      000BAB D0 05            [24] 2693 	pop	ar5
      000BAD D0 06            [24] 2694 	pop	ar6
      000BAF D0 07            [24] 2695 	pop	ar7
                                   2696 ;	ecen4330_lcd_v3.c:461: for (i=0;str[i]!=0;i++)
      000BB1 0B               [12] 2697 	inc	r3
      000BB2 BB 00 CF         [24] 2698 	cjne	r3,#0x00,00103$
      000BB5 0C               [12] 2699 	inc	r4
      000BB6 80 CC            [24] 2700 	sjmp	00103$
      000BB8                       2701 00105$:
                                   2702 ;	ecen4330_lcd_v3.c:465: }
      000BB8 22               [24] 2703 	ret
                                   2704 ;------------------------------------------------------------
                                   2705 ;Allocation info for local variables in function 'testRAM'
                                   2706 ;------------------------------------------------------------
                                   2707 ;d                         Allocated to registers r7 
                                   2708 ;i                         Allocated to registers r3 r4 r5 r6 
                                   2709 ;ram_address               Allocated to registers 
                                   2710 ;------------------------------------------------------------
                                   2711 ;	ecen4330_lcd_v3.c:472: void testRAM (uint8_t d) {
                                   2712 ;	-----------------------------------------
                                   2713 ;	 function testRAM
                                   2714 ;	-----------------------------------------
      000BB9                       2715 _testRAM:
      000BB9 AF 82            [24] 2716 	mov	r7,dpl
                                   2717 ;	ecen4330_lcd_v3.c:476: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BBB 7B 00            [12] 2718 	mov	r3,#0x00
      000BBD 7C 00            [12] 2719 	mov	r4,#0x00
      000BBF 7D 00            [12] 2720 	mov	r5,#0x00
      000BC1 7E 00            [12] 2721 	mov	r6,#0x00
      000BC3                       2722 00102$:
                                   2723 ;	ecen4330_lcd_v3.c:477: IOM = 0;
                                   2724 ;	assignBit
      000BC3 C2 B4            [12] 2725 	clr	_P3_4
                                   2726 ;	ecen4330_lcd_v3.c:478: ram_address = (uint8_t __xdata*)(i);
      000BC5 8B 82            [24] 2727 	mov	dpl,r3
      000BC7 8C 83            [24] 2728 	mov	dph,r4
                                   2729 ;	ecen4330_lcd_v3.c:479: *ram_address = d;
      000BC9 EF               [12] 2730 	mov	a,r7
      000BCA F0               [24] 2731 	movx	@dptr,a
                                   2732 ;	ecen4330_lcd_v3.c:480: IOM = 1;
                                   2733 ;	assignBit
      000BCB D2 B4            [12] 2734 	setb	_P3_4
                                   2735 ;	ecen4330_lcd_v3.c:476: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BCD 0B               [12] 2736 	inc	r3
      000BCE BB 00 09         [24] 2737 	cjne	r3,#0x00,00111$
      000BD1 0C               [12] 2738 	inc	r4
      000BD2 BC 00 05         [24] 2739 	cjne	r4,#0x00,00111$
      000BD5 0D               [12] 2740 	inc	r5
      000BD6 BD 00 01         [24] 2741 	cjne	r5,#0x00,00111$
      000BD9 0E               [12] 2742 	inc	r6
      000BDA                       2743 00111$:
      000BDA C3               [12] 2744 	clr	c
      000BDB EB               [12] 2745 	mov	a,r3
      000BDC 94 FF            [12] 2746 	subb	a,#0xff
      000BDE EC               [12] 2747 	mov	a,r4
      000BDF 94 FF            [12] 2748 	subb	a,#0xff
      000BE1 ED               [12] 2749 	mov	a,r5
      000BE2 94 00            [12] 2750 	subb	a,#0x00
      000BE4 EE               [12] 2751 	mov	a,r6
      000BE5 94 00            [12] 2752 	subb	a,#0x00
      000BE7 40 DA            [24] 2753 	jc	00102$
                                   2754 ;	ecen4330_lcd_v3.c:482: }
      000BE9 22               [24] 2755 	ret
                                   2756 ;------------------------------------------------------------
                                   2757 ;Allocation info for local variables in function 'freeType'
                                   2758 ;------------------------------------------------------------
                                   2759 ;count                     Allocated to registers r7 
                                   2760 ;d                         Allocated to registers 
                                   2761 ;------------------------------------------------------------
                                   2762 ;	ecen4330_lcd_v3.c:488: void freeType () {
                                   2763 ;	-----------------------------------------
                                   2764 ;	 function freeType
                                   2765 ;	-----------------------------------------
      000BEA                       2766 _freeType:
                                   2767 ;	ecen4330_lcd_v3.c:489: uint8_t count = 0;
      000BEA 7F 00            [12] 2768 	mov	r7,#0x00
                                   2769 ;	ecen4330_lcd_v3.c:491: while (1) {
      000BEC                       2770 00105$:
                                   2771 ;	ecen4330_lcd_v3.c:494: if (count == 8) {
      000BEC BF 08 0E         [24] 2772 	cjne	r7,#0x08,00102$
                                   2773 ;	ecen4330_lcd_v3.c:496: count = 0;
      000BEF 7F 00            [12] 2774 	mov	r7,#0x00
                                   2775 ;	ecen4330_lcd_v3.c:497: write(d);
      000BF1 75 82 0A         [24] 2776 	mov	dpl,#0x0a
      000BF4 C0 07            [24] 2777 	push	ar7
      000BF6 12r0Br0C         [24] 2778 	lcall	_write
      000BF9 D0 07            [24] 2779 	pop	ar7
      000BFB 80 0A            [24] 2780 	sjmp	00103$
      000BFD                       2781 00102$:
                                   2782 ;	ecen4330_lcd_v3.c:500: d = keyDetect();
      000BFD C0 07            [24] 2783 	push	ar7
      000BFF 12r0Cr0A         [24] 2784 	lcall	_keyDetect
                                   2785 ;	ecen4330_lcd_v3.c:501: write(d);
      000C02 12r0Br0C         [24] 2786 	lcall	_write
      000C05 D0 07            [24] 2787 	pop	ar7
      000C07                       2788 00103$:
                                   2789 ;	ecen4330_lcd_v3.c:504: count++;
      000C07 0F               [12] 2790 	inc	r7
                                   2791 ;	ecen4330_lcd_v3.c:506: }
      000C08 80 E2            [24] 2792 	sjmp	00105$
                                   2793 ;------------------------------------------------------------
                                   2794 ;Allocation info for local variables in function 'keyDetect'
                                   2795 ;------------------------------------------------------------
                                   2796 ;	ecen4330_lcd_v3.c:513: uint8_t keyDetect () {
                                   2797 ;	-----------------------------------------
                                   2798 ;	 function keyDetect
                                   2799 ;	-----------------------------------------
      000C0A                       2800 _keyDetect:
                                   2801 ;	ecen4330_lcd_v3.c:514: __KEYPAD_PORT__ = 0xF0;
      000C0A 75 90 F0         [24] 2802 	mov	_P1,#0xf0
                                   2803 ;	ecen4330_lcd_v3.c:515: do
      000C0D                       2804 00101$:
                                   2805 ;	ecen4330_lcd_v3.c:517: __KEYPAD_PORT__ = 0xF0;
      000C0D 75 90 F0         [24] 2806 	mov	_P1,#0xf0
                                   2807 ;	ecen4330_lcd_v3.c:518: colloc = __KEYPAD_PORT__;
      000C10 85 90*00         [24] 2808 	mov	_colloc,_P1
                                   2809 ;	ecen4330_lcd_v3.c:519: colloc&= 0xF0;
      000C13 53*00 F0         [24] 2810 	anl	_colloc,#0xf0
                                   2811 ;	ecen4330_lcd_v3.c:520: } while (colloc != 0xF0);
      000C16 74 F0            [12] 2812 	mov	a,#0xf0
      000C18 B5*00 F2         [24] 2813 	cjne	a,_colloc,00101$
                                   2814 ;	ecen4330_lcd_v3.c:524: do
      000C1B                       2815 00104$:
                                   2816 ;	ecen4330_lcd_v3.c:526: delay(20);
      000C1B 90 00 14         [24] 2817 	mov	dptr,#0x0014
      000C1E 12r00r10         [24] 2818 	lcall	_delay
                                   2819 ;	ecen4330_lcd_v3.c:527: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C21 E5 90            [12] 2820 	mov	a,_P1
      000C23 54 F0            [12] 2821 	anl	a,#0xf0
      000C25 F5*00            [12] 2822 	mov	_colloc,a
                                   2823 ;	ecen4330_lcd_v3.c:528: } while (colloc == 0xF0);
      000C27 74 F0            [12] 2824 	mov	a,#0xf0
      000C29 B5*00 02         [24] 2825 	cjne	a,_colloc,00178$
      000C2C 80 ED            [24] 2826 	sjmp	00104$
      000C2E                       2827 00178$:
                                   2828 ;	ecen4330_lcd_v3.c:530: delay(1);
      000C2E 90 00 01         [24] 2829 	mov	dptr,#0x0001
      000C31 12r00r10         [24] 2830 	lcall	_delay
                                   2831 ;	ecen4330_lcd_v3.c:531: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C34 E5 90            [12] 2832 	mov	a,_P1
      000C36 54 F0            [12] 2833 	anl	a,#0xf0
      000C38 F5*00            [12] 2834 	mov	_colloc,a
                                   2835 ;	ecen4330_lcd_v3.c:532: } while (colloc == 0xF0);
      000C3A 74 F0            [12] 2836 	mov	a,#0xf0
      000C3C B5*00 02         [24] 2837 	cjne	a,_colloc,00179$
      000C3F 80 DA            [24] 2838 	sjmp	00104$
      000C41                       2839 00179$:
                                   2840 ;	ecen4330_lcd_v3.c:534: while (1)
      000C41                       2841 00119$:
                                   2842 ;	ecen4330_lcd_v3.c:536: __KEYPAD_PORT__= 0xFE;
      000C41 75 90 FE         [24] 2843 	mov	_P1,#0xfe
                                   2844 ;	ecen4330_lcd_v3.c:537: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C44 E5 90            [12] 2845 	mov	a,_P1
      000C46 54 F0            [12] 2846 	anl	a,#0xf0
      000C48 F5*00            [12] 2847 	mov	_colloc,a
                                   2848 ;	ecen4330_lcd_v3.c:538: if (colloc != 0xF0)
      000C4A 74 F0            [12] 2849 	mov	a,#0xf0
      000C4C B5*00 02         [24] 2850 	cjne	a,_colloc,00180$
      000C4F 80 05            [24] 2851 	sjmp	00111$
      000C51                       2852 00180$:
                                   2853 ;	ecen4330_lcd_v3.c:540: rowloc = 0;
      000C51 75*01 00         [24] 2854 	mov	_rowloc,#0x00
                                   2855 ;	ecen4330_lcd_v3.c:541: break;
      000C54 80 3D            [24] 2856 	sjmp	00120$
      000C56                       2857 00111$:
                                   2858 ;	ecen4330_lcd_v3.c:544: __KEYPAD_PORT__ = 0xFD;
      000C56 75 90 FD         [24] 2859 	mov	_P1,#0xfd
                                   2860 ;	ecen4330_lcd_v3.c:545: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C59 E5 90            [12] 2861 	mov	a,_P1
      000C5B 54 F0            [12] 2862 	anl	a,#0xf0
      000C5D F5*00            [12] 2863 	mov	_colloc,a
                                   2864 ;	ecen4330_lcd_v3.c:546: if (colloc != 0xF0)
      000C5F 74 F0            [12] 2865 	mov	a,#0xf0
      000C61 B5*00 02         [24] 2866 	cjne	a,_colloc,00181$
      000C64 80 05            [24] 2867 	sjmp	00113$
      000C66                       2868 00181$:
                                   2869 ;	ecen4330_lcd_v3.c:548: rowloc = 1;
      000C66 75*01 01         [24] 2870 	mov	_rowloc,#0x01
                                   2871 ;	ecen4330_lcd_v3.c:549: break;
      000C69 80 28            [24] 2872 	sjmp	00120$
      000C6B                       2873 00113$:
                                   2874 ;	ecen4330_lcd_v3.c:552: __KEYPAD_PORT__ = 0xFB;
      000C6B 75 90 FB         [24] 2875 	mov	_P1,#0xfb
                                   2876 ;	ecen4330_lcd_v3.c:553: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C6E E5 90            [12] 2877 	mov	a,_P1
      000C70 54 F0            [12] 2878 	anl	a,#0xf0
      000C72 F5*00            [12] 2879 	mov	_colloc,a
                                   2880 ;	ecen4330_lcd_v3.c:554: if (colloc != 0xF0)
      000C74 74 F0            [12] 2881 	mov	a,#0xf0
      000C76 B5*00 02         [24] 2882 	cjne	a,_colloc,00182$
      000C79 80 05            [24] 2883 	sjmp	00115$
      000C7B                       2884 00182$:
                                   2885 ;	ecen4330_lcd_v3.c:556: rowloc = 2;
      000C7B 75*01 02         [24] 2886 	mov	_rowloc,#0x02
                                   2887 ;	ecen4330_lcd_v3.c:557: break;
      000C7E 80 13            [24] 2888 	sjmp	00120$
      000C80                       2889 00115$:
                                   2890 ;	ecen4330_lcd_v3.c:560: __KEYPAD_PORT__ = 0xF7;
      000C80 75 90 F7         [24] 2891 	mov	_P1,#0xf7
                                   2892 ;	ecen4330_lcd_v3.c:561: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C83 E5 90            [12] 2893 	mov	a,_P1
      000C85 54 F0            [12] 2894 	anl	a,#0xf0
      000C87 F5*00            [12] 2895 	mov	_colloc,a
                                   2896 ;	ecen4330_lcd_v3.c:562: if (colloc != 0xF0)
      000C89 74 F0            [12] 2897 	mov	a,#0xf0
      000C8B B5*00 02         [24] 2898 	cjne	a,_colloc,00183$
      000C8E 80 B1            [24] 2899 	sjmp	00119$
      000C90                       2900 00183$:
                                   2901 ;	ecen4330_lcd_v3.c:564: rowloc = 3;
      000C90 75*01 03         [24] 2902 	mov	_rowloc,#0x03
                                   2903 ;	ecen4330_lcd_v3.c:565: break;
      000C93                       2904 00120$:
                                   2905 ;	ecen4330_lcd_v3.c:569: if (colloc == 0xE0)
      000C93 74 E0            [12] 2906 	mov	a,#0xe0
      000C95 B5*00 15         [24] 2907 	cjne	a,_colloc,00128$
                                   2908 ;	ecen4330_lcd_v3.c:571: return (keypad[rowloc][0]);
      000C98 E5*01            [12] 2909 	mov	a,_rowloc
      000C9A 75 F0 04         [24] 2910 	mov	b,#0x04
      000C9D A4               [48] 2911 	mul	ab
      000C9E 24rFB            [12] 2912 	add	a,#_keypad
      000CA0 F5 82            [12] 2913 	mov	dpl,a
      000CA2 74s04            [12] 2914 	mov	a,#(_keypad >> 8)
      000CA4 35 F0            [12] 2915 	addc	a,b
      000CA6 F5 83            [12] 2916 	mov	dph,a
      000CA8 E4               [12] 2917 	clr	a
      000CA9 93               [24] 2918 	movc	a,@a+dptr
      000CAA F5 82            [12] 2919 	mov	dpl,a
      000CAC 22               [24] 2920 	ret
      000CAD                       2921 00128$:
                                   2922 ;	ecen4330_lcd_v3.c:573: else if (colloc == 0xD0)
      000CAD 74 D0            [12] 2923 	mov	a,#0xd0
      000CAF B5*00 18         [24] 2924 	cjne	a,_colloc,00125$
                                   2925 ;	ecen4330_lcd_v3.c:575: return (keypad[rowloc][1]);
      000CB2 E5*01            [12] 2926 	mov	a,_rowloc
      000CB4 75 F0 04         [24] 2927 	mov	b,#0x04
      000CB7 A4               [48] 2928 	mul	ab
      000CB8 24rFB            [12] 2929 	add	a,#_keypad
      000CBA FE               [12] 2930 	mov	r6,a
      000CBB 74s04            [12] 2931 	mov	a,#(_keypad >> 8)
      000CBD 35 F0            [12] 2932 	addc	a,b
      000CBF FF               [12] 2933 	mov	r7,a
      000CC0 8E 82            [24] 2934 	mov	dpl,r6
      000CC2 8F 83            [24] 2935 	mov	dph,r7
      000CC4 A3               [24] 2936 	inc	dptr
      000CC5 E4               [12] 2937 	clr	a
      000CC6 93               [24] 2938 	movc	a,@a+dptr
      000CC7 F5 82            [12] 2939 	mov	dpl,a
      000CC9 22               [24] 2940 	ret
      000CCA                       2941 00125$:
                                   2942 ;	ecen4330_lcd_v3.c:577: else if (colloc == 0xB0)
      000CCA 74 B0            [12] 2943 	mov	a,#0xb0
      000CCC B5*00 19         [24] 2944 	cjne	a,_colloc,00122$
                                   2945 ;	ecen4330_lcd_v3.c:579: return (keypad[rowloc][2]);
      000CCF E5*01            [12] 2946 	mov	a,_rowloc
      000CD1 75 F0 04         [24] 2947 	mov	b,#0x04
      000CD4 A4               [48] 2948 	mul	ab
      000CD5 24rFB            [12] 2949 	add	a,#_keypad
      000CD7 FE               [12] 2950 	mov	r6,a
      000CD8 74s04            [12] 2951 	mov	a,#(_keypad >> 8)
      000CDA 35 F0            [12] 2952 	addc	a,b
      000CDC FF               [12] 2953 	mov	r7,a
      000CDD 8E 82            [24] 2954 	mov	dpl,r6
      000CDF 8F 83            [24] 2955 	mov	dph,r7
      000CE1 A3               [24] 2956 	inc	dptr
      000CE2 A3               [24] 2957 	inc	dptr
      000CE3 E4               [12] 2958 	clr	a
      000CE4 93               [24] 2959 	movc	a,@a+dptr
      000CE5 F5 82            [12] 2960 	mov	dpl,a
      000CE7 22               [24] 2961 	ret
      000CE8                       2962 00122$:
                                   2963 ;	ecen4330_lcd_v3.c:583: return (keypad[rowloc][3]);
      000CE8 E5*01            [12] 2964 	mov	a,_rowloc
      000CEA 75 F0 04         [24] 2965 	mov	b,#0x04
      000CED A4               [48] 2966 	mul	ab
      000CEE 24rFB            [12] 2967 	add	a,#_keypad
      000CF0 FE               [12] 2968 	mov	r6,a
      000CF1 74s04            [12] 2969 	mov	a,#(_keypad >> 8)
      000CF3 35 F0            [12] 2970 	addc	a,b
      000CF5 FF               [12] 2971 	mov	r7,a
      000CF6 8E 82            [24] 2972 	mov	dpl,r6
      000CF8 8F 83            [24] 2973 	mov	dph,r7
      000CFA A3               [24] 2974 	inc	dptr
      000CFB A3               [24] 2975 	inc	dptr
      000CFC A3               [24] 2976 	inc	dptr
      000CFD E4               [12] 2977 	clr	a
      000CFE 93               [24] 2978 	movc	a,@a+dptr
                                   2979 ;	ecen4330_lcd_v3.c:585: }
      000CFF F5 82            [12] 2980 	mov	dpl,a
      000D01 22               [24] 2981 	ret
                                   2982 ;------------------------------------------------------------
                                   2983 ;Allocation info for local variables in function 'reverse'
                                   2984 ;------------------------------------------------------------
                                   2985 ;d                         Allocated to registers r7 
                                   2986 ;rev                       Allocated to registers r5 r6 
                                   2987 ;val                       Allocated to registers r1 r2 
                                   2988 ;------------------------------------------------------------
                                   2989 ;	ecen4330_lcd_v3.c:587: uint16_t reverse (uint8_t d) {
                                   2990 ;	-----------------------------------------
                                   2991 ;	 function reverse
                                   2992 ;	-----------------------------------------
      000D02                       2993 _reverse:
      000D02 AF 82            [24] 2994 	mov	r7,dpl
                                   2995 ;	ecen4330_lcd_v3.c:588: uint16_t rev = 0;
      000D04 7D 00            [12] 2996 	mov	r5,#0x00
      000D06 7E 00            [12] 2997 	mov	r6,#0x00
                                   2998 ;	ecen4330_lcd_v3.c:590: while (d >= 1) {
      000D08                       2999 00101$:
      000D08 BF 01 00         [24] 3000 	cjne	r7,#0x01,00114$
      000D0B                       3001 00114$:
      000D0B 40 5F            [24] 3002 	jc	00103$
                                   3003 ;	ecen4330_lcd_v3.c:592: val = d%10;
      000D0D 8F 03            [24] 3004 	mov	ar3,r7
      000D0F 7C 00            [12] 3005 	mov	r4,#0x00
      000D11 75*00 0A         [24] 3006 	mov	__modsint_PARM_2,#0x0a
                                   3007 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000D14 8C*01            [24] 3008 	mov	(__modsint_PARM_2 + 1),r4
      000D16 8B 82            [24] 3009 	mov	dpl,r3
      000D18 8C 83            [24] 3010 	mov	dph,r4
      000D1A C0 06            [24] 3011 	push	ar6
      000D1C C0 05            [24] 3012 	push	ar5
      000D1E C0 04            [24] 3013 	push	ar4
      000D20 C0 03            [24] 3014 	push	ar3
      000D22 12r00r00         [24] 3015 	lcall	__modsint
      000D25 A9 82            [24] 3016 	mov	r1,dpl
      000D27 AA 83            [24] 3017 	mov	r2,dph
      000D29 D0 03            [24] 3018 	pop	ar3
      000D2B D0 04            [24] 3019 	pop	ar4
                                   3020 ;	ecen4330_lcd_v3.c:593: d = d/10;
      000D2D 75*00 0A         [24] 3021 	mov	__divsint_PARM_2,#0x0a
      000D30 75*01 00         [24] 3022 	mov	(__divsint_PARM_2 + 1),#0x00
      000D33 8B 82            [24] 3023 	mov	dpl,r3
      000D35 8C 83            [24] 3024 	mov	dph,r4
      000D37 C0 02            [24] 3025 	push	ar2
      000D39 C0 01            [24] 3026 	push	ar1
      000D3B 12r00r00         [24] 3027 	lcall	__divsint
      000D3E AB 82            [24] 3028 	mov	r3,dpl
      000D40 D0 01            [24] 3029 	pop	ar1
      000D42 D0 02            [24] 3030 	pop	ar2
      000D44 D0 05            [24] 3031 	pop	ar5
      000D46 D0 06            [24] 3032 	pop	ar6
      000D48 8B 07            [24] 3033 	mov	ar7,r3
                                   3034 ;	ecen4330_lcd_v3.c:594: rev = rev * 10 + val;
      000D4A 8D*00            [24] 3035 	mov	__mulint_PARM_2,r5
      000D4C 8E*01            [24] 3036 	mov	(__mulint_PARM_2 + 1),r6
      000D4E 90 00 0A         [24] 3037 	mov	dptr,#0x000a
      000D51 C0 07            [24] 3038 	push	ar7
      000D53 C0 02            [24] 3039 	push	ar2
      000D55 C0 01            [24] 3040 	push	ar1
      000D57 12r00r00         [24] 3041 	lcall	__mulint
      000D5A AB 82            [24] 3042 	mov	r3,dpl
      000D5C AC 83            [24] 3043 	mov	r4,dph
      000D5E D0 01            [24] 3044 	pop	ar1
      000D60 D0 02            [24] 3045 	pop	ar2
      000D62 D0 07            [24] 3046 	pop	ar7
      000D64 E9               [12] 3047 	mov	a,r1
      000D65 2B               [12] 3048 	add	a,r3
      000D66 FD               [12] 3049 	mov	r5,a
      000D67 EA               [12] 3050 	mov	a,r2
      000D68 3C               [12] 3051 	addc	a,r4
      000D69 FE               [12] 3052 	mov	r6,a
      000D6A 80 9C            [24] 3053 	sjmp	00101$
      000D6C                       3054 00103$:
                                   3055 ;	ecen4330_lcd_v3.c:596: return rev;
      000D6C 8D 82            [24] 3056 	mov	dpl,r5
      000D6E 8E 83            [24] 3057 	mov	dph,r6
                                   3058 ;	ecen4330_lcd_v3.c:597: }
      000D70 22               [24] 3059 	ret
                                   3060 ;------------------------------------------------------------
                                   3061 ;Allocation info for local variables in function 'asciiToDec'
                                   3062 ;------------------------------------------------------------
                                   3063 ;d                         Allocated to registers 
                                   3064 ;val                       Allocated to registers r2 
                                   3065 ;id                        Allocated to registers r6 r7 
                                   3066 ;------------------------------------------------------------
                                   3067 ;	ecen4330_lcd_v3.c:604: void asciiToDec (uint8_t d) {
                                   3068 ;	-----------------------------------------
                                   3069 ;	 function asciiToDec
                                   3070 ;	-----------------------------------------
      000D71                       3071 _asciiToDec:
                                   3072 ;	ecen4330_lcd_v3.c:607: id = reverse(d);
      000D71 12r0Dr02         [24] 3073 	lcall	_reverse
      000D74 AE 82            [24] 3074 	mov	r6,dpl
      000D76 AF 83            [24] 3075 	mov	r7,dph
                                   3076 ;	ecen4330_lcd_v3.c:608: while (id >= 1){
      000D78                       3077 00101$:
      000D78 8E 04            [24] 3078 	mov	ar4,r6
      000D7A 8F 05            [24] 3079 	mov	ar5,r7
      000D7C C3               [12] 3080 	clr	c
      000D7D EC               [12] 3081 	mov	a,r4
      000D7E 94 01            [12] 3082 	subb	a,#0x01
      000D80 ED               [12] 3083 	mov	a,r5
      000D81 94 00            [12] 3084 	subb	a,#0x00
      000D83 40 42            [24] 3085 	jc	00103$
                                   3086 ;	ecen4330_lcd_v3.c:610: val = id % 10;
      000D85 75*00 0A         [24] 3087 	mov	__moduint_PARM_2,#0x0a
      000D88 75*01 00         [24] 3088 	mov	(__moduint_PARM_2 + 1),#0x00
      000D8B 8C 82            [24] 3089 	mov	dpl,r4
      000D8D 8D 83            [24] 3090 	mov	dph,r5
      000D8F C0 05            [24] 3091 	push	ar5
      000D91 C0 04            [24] 3092 	push	ar4
      000D93 12r00r00         [24] 3093 	lcall	__moduint
      000D96 AA 82            [24] 3094 	mov	r2,dpl
      000D98 D0 04            [24] 3095 	pop	ar4
      000D9A D0 05            [24] 3096 	pop	ar5
                                   3097 ;	ecen4330_lcd_v3.c:611: id = id/10;
      000D9C 75*00 0A         [24] 3098 	mov	__divuint_PARM_2,#0x0a
      000D9F 75*01 00         [24] 3099 	mov	(__divuint_PARM_2 + 1),#0x00
      000DA2 8C 82            [24] 3100 	mov	dpl,r4
      000DA4 8D 83            [24] 3101 	mov	dph,r5
      000DA6 C0 02            [24] 3102 	push	ar2
      000DA8 12r00r00         [24] 3103 	lcall	__divuint
      000DAB AC 82            [24] 3104 	mov	r4,dpl
      000DAD AD 83            [24] 3105 	mov	r5,dph
      000DAF D0 02            [24] 3106 	pop	ar2
      000DB1 8C 06            [24] 3107 	mov	ar6,r4
      000DB3 8D 07            [24] 3108 	mov	ar7,r5
                                   3109 ;	ecen4330_lcd_v3.c:612: write(val + '0');
      000DB5 74 30            [12] 3110 	mov	a,#0x30
      000DB7 2A               [12] 3111 	add	a,r2
      000DB8 F5 82            [12] 3112 	mov	dpl,a
      000DBA C0 07            [24] 3113 	push	ar7
      000DBC C0 06            [24] 3114 	push	ar6
      000DBE 12r0Br0C         [24] 3115 	lcall	_write
      000DC1 D0 06            [24] 3116 	pop	ar6
      000DC3 D0 07            [24] 3117 	pop	ar7
      000DC5 80 B1            [24] 3118 	sjmp	00101$
      000DC7                       3119 00103$:
                                   3120 ;	ecen4330_lcd_v3.c:614: write('\n');
      000DC7 75 82 0A         [24] 3121 	mov	dpl,#0x0a
                                   3122 ;	ecen4330_lcd_v3.c:615: }
      000DCA 02r0Br0C         [24] 3123 	ljmp	_write
                                   3124 ;------------------------------------------------------------
                                   3125 ;Allocation info for local variables in function 'asciiToHex'
                                   3126 ;------------------------------------------------------------
                                   3127 ;d                         Allocated to registers r7 
                                   3128 ;val                       Allocated to registers r2 
                                   3129 ;store                     Allocated with name '_asciiToHex_store_65536_200'
                                   3130 ;i                         Allocated to registers r6 
                                   3131 ;------------------------------------------------------------
                                   3132 ;	ecen4330_lcd_v3.c:622: void asciiToHex (uint8_t d) {
                                   3133 ;	-----------------------------------------
                                   3134 ;	 function asciiToHex
                                   3135 ;	-----------------------------------------
      000DCD                       3136 _asciiToHex:
      000DCD AF 82            [24] 3137 	mov	r7,dpl
                                   3138 ;	ecen4330_lcd_v3.c:626: store[0] = 0;
      000DCF 75*4F 00         [24] 3139 	mov	_asciiToHex_store_65536_200,#0x00
                                   3140 ;	ecen4330_lcd_v3.c:627: store[1] = 0;
      000DD2 75*50 00         [24] 3141 	mov	(_asciiToHex_store_65536_200 + 0x0001),#0x00
                                   3142 ;	ecen4330_lcd_v3.c:628: while (d >= 1){
      000DD5 7E 00            [12] 3143 	mov	r6,#0x00
      000DD7                       3144 00104$:
      000DD7 BF 01 00         [24] 3145 	cjne	r7,#0x01,00122$
      000DDA                       3146 00122$:
      000DDA 40 5A            [24] 3147 	jc	00106$
                                   3148 ;	ecen4330_lcd_v3.c:630: val = d % 16;
      000DDC 8F 04            [24] 3149 	mov	ar4,r7
      000DDE 7D 00            [12] 3150 	mov	r5,#0x00
      000DE0 74 0F            [12] 3151 	mov	a,#0x0f
      000DE2 5C               [12] 3152 	anl	a,r4
      000DE3 FA               [12] 3153 	mov	r2,a
                                   3154 ;	ecen4330_lcd_v3.c:631: d = d/16;
      000DE4 75*00 10         [24] 3155 	mov	__divsint_PARM_2,#0x10
                                   3156 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000DE7 8D*01            [24] 3157 	mov	(__divsint_PARM_2 + 1),r5
      000DE9 8C 82            [24] 3158 	mov	dpl,r4
      000DEB 8D 83            [24] 3159 	mov	dph,r5
      000DED C0 06            [24] 3160 	push	ar6
      000DEF C0 02            [24] 3161 	push	ar2
      000DF1 12r00r00         [24] 3162 	lcall	__divsint
      000DF4 AC 82            [24] 3163 	mov	r4,dpl
      000DF6 D0 02            [24] 3164 	pop	ar2
      000DF8 D0 06            [24] 3165 	pop	ar6
      000DFA 8C 07            [24] 3166 	mov	ar7,r4
                                   3167 ;	ecen4330_lcd_v3.c:632: if (val <= 9) {
      000DFC EA               [12] 3168 	mov	a,r2
      000DFD 24 F6            [12] 3169 	add	a,#0xff - 0x09
      000DFF 40 0C            [24] 3170 	jc	00102$
                                   3171 ;	ecen4330_lcd_v3.c:634: store[i] = val + '0';
      000E01 EE               [12] 3172 	mov	a,r6
      000E02 24r4F            [12] 3173 	add	a,#_asciiToHex_store_65536_200
      000E04 F9               [12] 3174 	mov	r1,a
      000E05 8A 05            [24] 3175 	mov	ar5,r2
      000E07 74 30            [12] 3176 	mov	a,#0x30
      000E09 2D               [12] 3177 	add	a,r5
      000E0A F7               [12] 3178 	mov	@r1,a
      000E0B 80 26            [24] 3179 	sjmp	00103$
      000E0D                       3180 00102$:
                                   3181 ;	ecen4330_lcd_v3.c:637: store[i] = (val%10) + 'A';
      000E0D EE               [12] 3182 	mov	a,r6
      000E0E 24r4F            [12] 3183 	add	a,#_asciiToHex_store_65536_200
      000E10 F9               [12] 3184 	mov	r1,a
      000E11 7D 00            [12] 3185 	mov	r5,#0x00
      000E13 75*00 0A         [24] 3186 	mov	__modsint_PARM_2,#0x0a
                                   3187 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000E16 8D*01            [24] 3188 	mov	(__modsint_PARM_2 + 1),r5
      000E18 8A 82            [24] 3189 	mov	dpl,r2
      000E1A 8D 83            [24] 3190 	mov	dph,r5
      000E1C C0 07            [24] 3191 	push	ar7
      000E1E C0 06            [24] 3192 	push	ar6
      000E20 C0 01            [24] 3193 	push	ar1
      000E22 12r00r00         [24] 3194 	lcall	__modsint
      000E25 AC 82            [24] 3195 	mov	r4,dpl
      000E27 AD 83            [24] 3196 	mov	r5,dph
      000E29 D0 01            [24] 3197 	pop	ar1
      000E2B D0 06            [24] 3198 	pop	ar6
      000E2D D0 07            [24] 3199 	pop	ar7
      000E2F 74 41            [12] 3200 	mov	a,#0x41
      000E31 2C               [12] 3201 	add	a,r4
      000E32 F7               [12] 3202 	mov	@r1,a
      000E33                       3203 00103$:
                                   3204 ;	ecen4330_lcd_v3.c:639: i++;
      000E33 0E               [12] 3205 	inc	r6
      000E34 80 A1            [24] 3206 	sjmp	00104$
      000E36                       3207 00106$:
                                   3208 ;	ecen4330_lcd_v3.c:641: write(store[1]);
      000E36 85*50 82         [24] 3209 	mov	dpl,(_asciiToHex_store_65536_200 + 0x0001)
      000E39 12r0Br0C         [24] 3210 	lcall	_write
                                   3211 ;	ecen4330_lcd_v3.c:642: write(store[0]);
      000E3C 85*4F 82         [24] 3212 	mov	dpl,_asciiToHex_store_65536_200
                                   3213 ;	ecen4330_lcd_v3.c:643: }
      000E3F 02r0Br0C         [24] 3214 	ljmp	_write
                                   3215 ;------------------------------------------------------------
                                   3216 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3217 ;------------------------------------------------------------
                                   3218 ;d                         Allocated to registers r7 
                                   3219 ;------------------------------------------------------------
                                   3220 ;	ecen4330_lcd_v3.c:651: uint8_t convertAsciiHex(uint8_t d) {
                                   3221 ;	-----------------------------------------
                                   3222 ;	 function convertAsciiHex
                                   3223 ;	-----------------------------------------
      000E42                       3224 _convertAsciiHex:
                                   3225 ;	ecen4330_lcd_v3.c:652: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000E42 E5 82            [12] 3226 	mov	a,dpl
      000E44 FF               [12] 3227 	mov	r7,a
      000E45 24 C6            [12] 3228 	add	a,#0xff - 0x39
      000E47 92*01            [24] 3229 	mov	_convertAsciiHex_sloc0_1_0,c
      000E49 40 08            [24] 3230 	jc	00103$
      000E4B 8F 06            [24] 3231 	mov	ar6,r7
      000E4D EE               [12] 3232 	mov	a,r6
      000E4E 24 D0            [12] 3233 	add	a,#0xd0
      000E50 FE               [12] 3234 	mov	r6,a
      000E51 80 04            [24] 3235 	sjmp	00104$
      000E53                       3236 00103$:
      000E53 74 C9            [12] 3237 	mov	a,#0xc9
      000E55 2F               [12] 3238 	add	a,r7
      000E56 FE               [12] 3239 	mov	r6,a
      000E57                       3240 00104$:
      000E57 8E 82            [24] 3241 	mov	dpl,r6
                                   3242 ;	ecen4330_lcd_v3.c:653: }
      000E59 22               [24] 3243 	ret
                                   3244 ;------------------------------------------------------------
                                   3245 ;Allocation info for local variables in function 'writeSomeLines'
                                   3246 ;------------------------------------------------------------
                                   3247 ;	ecen4330_lcd_v3.c:659: void writeSomeLines () {
                                   3248 ;	-----------------------------------------
                                   3249 ;	 function writeSomeLines
                                   3250 ;	-----------------------------------------
      000E5A                       3251 _writeSomeLines:
                                   3252 ;	ecen4330_lcd_v3.c:660: fillScreen(RED);
      000E5A 90 F8 00         [24] 3253 	mov	dptr,#0xf800
      000E5D 12r07r9A         [24] 3254 	lcall	_fillScreen
                                   3255 ;	ecen4330_lcd_v3.c:662: delay(20);
      000E60 90 00 14         [24] 3256 	mov	dptr,#0x0014
      000E63 12r00r10         [24] 3257 	lcall	_delay
                                   3258 ;	ecen4330_lcd_v3.c:663: fillScreen(GREEN);
      000E66 90 07 E0         [24] 3259 	mov	dptr,#0x07e0
      000E69 12r07r9A         [24] 3260 	lcall	_fillScreen
                                   3261 ;	ecen4330_lcd_v3.c:665: delay(20);
      000E6C 90 00 14         [24] 3262 	mov	dptr,#0x0014
      000E6F 12r00r10         [24] 3263 	lcall	_delay
                                   3264 ;	ecen4330_lcd_v3.c:667: setRotation(0);
      000E72 75 82 00         [24] 3265 	mov	dpl,#0x00
      000E75 12r00rD7         [24] 3266 	lcall	_setRotation
                                   3267 ;	ecen4330_lcd_v3.c:668: fillScreen(BLACK);
      000E78 90 00 00         [24] 3268 	mov	dptr,#0x0000
      000E7B 12r07r9A         [24] 3269 	lcall	_fillScreen
                                   3270 ;	ecen4330_lcd_v3.c:669: testCircles(20, RED);
      000E7E 75*32 00         [24] 3271 	mov	_testCircles_PARM_2,#0x00
      000E81 75*33 F8         [24] 3272 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000E84 75 82 14         [24] 3273 	mov	dpl,#0x14
      000E87 12r06r28         [24] 3274 	lcall	_testCircles
                                   3275 ;	ecen4330_lcd_v3.c:670: delay(100);
      000E8A 90 00 64         [24] 3276 	mov	dptr,#0x0064
      000E8D 12r00r10         [24] 3277 	lcall	_delay
                                   3278 ;	ecen4330_lcd_v3.c:671: fillScreen(BLACK);
      000E90 90 00 00         [24] 3279 	mov	dptr,#0x0000
      000E93 12r07r9A         [24] 3280 	lcall	_fillScreen
                                   3281 ;	ecen4330_lcd_v3.c:672: setTextSize(5);
      000E96 75 82 05         [24] 3282 	mov	dpl,#0x05
      000E99 12r00rBF         [24] 3283 	lcall	_setTextSize
                                   3284 ;	ecen4330_lcd_v3.c:673: setTextColor(CYAN, BLACK);
      000E9C E4               [12] 3285 	clr	a
      000E9D F5*00            [12] 3286 	mov	_setTextColor_PARM_2,a
      000E9F F5*01            [12] 3287 	mov	(_setTextColor_PARM_2 + 1),a
      000EA1 90 07 FF         [24] 3288 	mov	dptr,#0x07ff
      000EA4 12r00rB2         [24] 3289 	lcall	_setTextColor
                                   3290 ;	ecen4330_lcd_v3.c:674: LCD_string_write("Welcome\n");
      000EA7 90r05r0B         [24] 3291 	mov	dptr,#___str_0
      000EAA 75 F0 80         [24] 3292 	mov	b,#0x80
      000EAD 12r0Br7A         [24] 3293 	lcall	_LCD_string_write
                                   3294 ;	ecen4330_lcd_v3.c:675: setTextSize(3);
      000EB0 75 82 03         [24] 3295 	mov	dpl,#0x03
      000EB3 12r00rBF         [24] 3296 	lcall	_setTextSize
                                   3297 ;	ecen4330_lcd_v3.c:676: LCD_string_write("ECEN-4330\n");
      000EB6 90r05r14         [24] 3298 	mov	dptr,#___str_1
      000EB9 75 F0 80         [24] 3299 	mov	b,#0x80
      000EBC 12r0Br7A         [24] 3300 	lcall	_LCD_string_write
                                   3301 ;	ecen4330_lcd_v3.c:677: LCD_string_write("Rotation 0");
      000EBF 90r05r1F         [24] 3302 	mov	dptr,#___str_2
      000EC2 75 F0 80         [24] 3303 	mov	b,#0x80
      000EC5 12r0Br7A         [24] 3304 	lcall	_LCD_string_write
                                   3305 ;	ecen4330_lcd_v3.c:678: delay(200);
      000EC8 90 00 C8         [24] 3306 	mov	dptr,#0x00c8
      000ECB 12r00r10         [24] 3307 	lcall	_delay
                                   3308 ;	ecen4330_lcd_v3.c:679: fillScreen(BLACK);
      000ECE 90 00 00         [24] 3309 	mov	dptr,#0x0000
      000ED1 12r07r9A         [24] 3310 	lcall	_fillScreen
                                   3311 ;	ecen4330_lcd_v3.c:680: setRotation(1);
      000ED4 75 82 01         [24] 3312 	mov	dpl,#0x01
      000ED7 12r00rD7         [24] 3313 	lcall	_setRotation
                                   3314 ;	ecen4330_lcd_v3.c:681: setCursor(0,0);
      000EDA E4               [12] 3315 	clr	a
      000EDB F5*00            [12] 3316 	mov	_setCursor_PARM_2,a
      000EDD F5*01            [12] 3317 	mov	(_setCursor_PARM_2 + 1),a
      000EDF 90 00 00         [24] 3318 	mov	dptr,#0x0000
      000EE2 12r00rA5         [24] 3319 	lcall	_setCursor
                                   3320 ;	ecen4330_lcd_v3.c:682: LCD_string_write("Rotation 1");
      000EE5 90r05r2A         [24] 3321 	mov	dptr,#___str_3
      000EE8 75 F0 80         [24] 3322 	mov	b,#0x80
      000EEB 12r0Br7A         [24] 3323 	lcall	_LCD_string_write
                                   3324 ;	ecen4330_lcd_v3.c:683: delay(500);
      000EEE 90 01 F4         [24] 3325 	mov	dptr,#0x01f4
      000EF1 12r00r10         [24] 3326 	lcall	_delay
                                   3327 ;	ecen4330_lcd_v3.c:684: fillScreen(BLACK);
      000EF4 90 00 00         [24] 3328 	mov	dptr,#0x0000
      000EF7 12r07r9A         [24] 3329 	lcall	_fillScreen
                                   3330 ;	ecen4330_lcd_v3.c:685: setRotation(2);
      000EFA 75 82 02         [24] 3331 	mov	dpl,#0x02
      000EFD 12r00rD7         [24] 3332 	lcall	_setRotation
                                   3333 ;	ecen4330_lcd_v3.c:686: setCursor(0,0);
      000F00 E4               [12] 3334 	clr	a
      000F01 F5*00            [12] 3335 	mov	_setCursor_PARM_2,a
      000F03 F5*01            [12] 3336 	mov	(_setCursor_PARM_2 + 1),a
      000F05 90 00 00         [24] 3337 	mov	dptr,#0x0000
      000F08 12r00rA5         [24] 3338 	lcall	_setCursor
                                   3339 ;	ecen4330_lcd_v3.c:687: LCD_string_write("Rotation 2");
      000F0B 90r05r35         [24] 3340 	mov	dptr,#___str_4
      000F0E 75 F0 80         [24] 3341 	mov	b,#0x80
      000F11 12r0Br7A         [24] 3342 	lcall	_LCD_string_write
                                   3343 ;	ecen4330_lcd_v3.c:688: delay(500);
      000F14 90 01 F4         [24] 3344 	mov	dptr,#0x01f4
      000F17 12r00r10         [24] 3345 	lcall	_delay
                                   3346 ;	ecen4330_lcd_v3.c:689: fillScreen(BLACK);
      000F1A 90 00 00         [24] 3347 	mov	dptr,#0x0000
      000F1D 12r07r9A         [24] 3348 	lcall	_fillScreen
                                   3349 ;	ecen4330_lcd_v3.c:690: setRotation(3);
      000F20 75 82 03         [24] 3350 	mov	dpl,#0x03
      000F23 12r00rD7         [24] 3351 	lcall	_setRotation
                                   3352 ;	ecen4330_lcd_v3.c:691: setCursor(0,0);
      000F26 E4               [12] 3353 	clr	a
      000F27 F5*00            [12] 3354 	mov	_setCursor_PARM_2,a
      000F29 F5*01            [12] 3355 	mov	(_setCursor_PARM_2 + 1),a
      000F2B 90 00 00         [24] 3356 	mov	dptr,#0x0000
      000F2E 12r00rA5         [24] 3357 	lcall	_setCursor
                                   3358 ;	ecen4330_lcd_v3.c:692: delay(200);
      000F31 90 00 C8         [24] 3359 	mov	dptr,#0x00c8
      000F34 12r00r10         [24] 3360 	lcall	_delay
                                   3361 ;	ecen4330_lcd_v3.c:693: LCD_string_write("Rotation 3");
      000F37 90r05r40         [24] 3362 	mov	dptr,#___str_5
      000F3A 75 F0 80         [24] 3363 	mov	b,#0x80
      000F3D 12r0Br7A         [24] 3364 	lcall	_LCD_string_write
                                   3365 ;	ecen4330_lcd_v3.c:694: delay(200);
      000F40 90 00 C8         [24] 3366 	mov	dptr,#0x00c8
                                   3367 ;	ecen4330_lcd_v3.c:695: }
      000F43 02r00r10         [24] 3368 	ljmp	_delay
                                   3369 ;------------------------------------------------------------
                                   3370 ;Allocation info for local variables in function 'getAddress'
                                   3371 ;------------------------------------------------------------
                                   3372 ;input                     Allocated to registers r4 
                                   3373 ;hex                       Allocated to registers r4 
                                   3374 ;i                         Allocated to registers r5 
                                   3375 ;address                   Allocated to registers r6 r7 
                                   3376 ;------------------------------------------------------------
                                   3377 ;	getFunctions.c:6: uint16_t getAddress() {
                                   3378 ;	-----------------------------------------
                                   3379 ;	 function getAddress
                                   3380 ;	-----------------------------------------
      000F46                       3381 _getAddress:
                                   3382 ;	getFunctions.c:16: address = 0;
      000F46 7E 00            [12] 3383 	mov	r6,#0x00
      000F48 7F 00            [12] 3384 	mov	r7,#0x00
                                   3385 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      000F4A 7D 00            [12] 3386 	mov	r5,#0x00
      000F4C                       3387 00104$:
                                   3388 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      000F4C C0 07            [24] 3389 	push	ar7
      000F4E C0 06            [24] 3390 	push	ar6
      000F50 C0 05            [24] 3391 	push	ar5
      000F52 12r0Cr0A         [24] 3392 	lcall	_keyDetect
                                   3393 ;	getFunctions.c:21: write(input);						// display nibble to user
      000F55 AC 82            [24] 3394 	mov  r4,dpl
      000F57 C0 04            [24] 3395 	push	ar4
      000F59 12r0Br0C         [24] 3396 	lcall	_write
      000F5C D0 04            [24] 3397 	pop	ar4
                                   3398 ;	getFunctions.c:22: hex = convertAsciiHex(input);			// convert ascii char to hex
      000F5E 8C 82            [24] 3399 	mov	dpl,r4
      000F60 12r0Er42         [24] 3400 	lcall	_convertAsciiHex
      000F63 AC 82            [24] 3401 	mov	r4,dpl
      000F65 D0 05            [24] 3402 	pop	ar5
      000F67 D0 06            [24] 3403 	pop	ar6
      000F69 D0 07            [24] 3404 	pop	ar7
                                   3405 ;	getFunctions.c:25: address = address | hex;
      000F6B 7B 00            [12] 3406 	mov	r3,#0x00
      000F6D EC               [12] 3407 	mov	a,r4
      000F6E 42 06            [12] 3408 	orl	ar6,a
      000F70 EB               [12] 3409 	mov	a,r3
      000F71 42 07            [12] 3410 	orl	ar7,a
                                   3411 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      000F73 BD 03 02         [24] 3412 	cjne	r5,#0x03,00121$
      000F76 80 0E            [24] 3413 	sjmp	00105$
      000F78                       3414 00121$:
      000F78 EF               [12] 3415 	mov	a,r7
      000F79 C4               [12] 3416 	swap	a
      000F7A 54 F0            [12] 3417 	anl	a,#0xf0
      000F7C CE               [12] 3418 	xch	a,r6
      000F7D C4               [12] 3419 	swap	a
      000F7E CE               [12] 3420 	xch	a,r6
      000F7F 6E               [12] 3421 	xrl	a,r6
      000F80 CE               [12] 3422 	xch	a,r6
      000F81 54 F0            [12] 3423 	anl	a,#0xf0
      000F83 CE               [12] 3424 	xch	a,r6
      000F84 6E               [12] 3425 	xrl	a,r6
      000F85 FF               [12] 3426 	mov	r7,a
      000F86                       3427 00105$:
                                   3428 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      000F86 0D               [12] 3429 	inc	r5
      000F87 BD 04 00         [24] 3430 	cjne	r5,#0x04,00122$
      000F8A                       3431 00122$:
      000F8A 40 C0            [24] 3432 	jc	00104$
                                   3433 ;	getFunctions.c:28: return address;
      000F8C 8E 82            [24] 3434 	mov	dpl,r6
      000F8E 8F 83            [24] 3435 	mov	dph,r7
                                   3436 ;	getFunctions.c:29: }
      000F90 22               [24] 3437 	ret
                                   3438 ;------------------------------------------------------------
                                   3439 ;Allocation info for local variables in function 'getByte'
                                   3440 ;------------------------------------------------------------
                                   3441 ;input                     Allocated to registers r5 
                                   3442 ;hex                       Allocated to registers r5 
                                   3443 ;byte                      Allocated to registers r7 
                                   3444 ;i                         Allocated to registers r6 
                                   3445 ;------------------------------------------------------------
                                   3446 ;	getFunctions.c:36: uint8_t getByte() {
                                   3447 ;	-----------------------------------------
                                   3448 ;	 function getByte
                                   3449 ;	-----------------------------------------
      000F91                       3450 _getByte:
                                   3451 ;	getFunctions.c:40: byte = 0;
      000F91 7F 00            [12] 3452 	mov	r7,#0x00
                                   3453 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      000F93 7E 00            [12] 3454 	mov	r6,#0x00
      000F95                       3455 00104$:
                                   3456 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      000F95 C0 07            [24] 3457 	push	ar7
      000F97 C0 06            [24] 3458 	push	ar6
      000F99 12r0Cr0A         [24] 3459 	lcall	_keyDetect
                                   3460 ;	getFunctions.c:45: write(input);						// display nibble to user
      000F9C AD 82            [24] 3461 	mov  r5,dpl
      000F9E C0 05            [24] 3462 	push	ar5
      000FA0 12r0Br0C         [24] 3463 	lcall	_write
      000FA3 D0 05            [24] 3464 	pop	ar5
                                   3465 ;	getFunctions.c:46: hex = convertAsciiHex(input);			// convert ascii char to hex
      000FA5 8D 82            [24] 3466 	mov	dpl,r5
      000FA7 12r0Er42         [24] 3467 	lcall	_convertAsciiHex
      000FAA AD 82            [24] 3468 	mov	r5,dpl
      000FAC D0 06            [24] 3469 	pop	ar6
      000FAE D0 07            [24] 3470 	pop	ar7
                                   3471 ;	getFunctions.c:49: byte = byte | hex;
      000FB0 ED               [12] 3472 	mov	a,r5
      000FB1 42 07            [12] 3473 	orl	ar7,a
                                   3474 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      000FB3 BE 01 02         [24] 3475 	cjne	r6,#0x01,00121$
      000FB6 80 07            [24] 3476 	sjmp	00105$
      000FB8                       3477 00121$:
      000FB8 8F 05            [24] 3478 	mov	ar5,r7
      000FBA ED               [12] 3479 	mov	a,r5
      000FBB C4               [12] 3480 	swap	a
      000FBC 54 F0            [12] 3481 	anl	a,#0xf0
      000FBE FF               [12] 3482 	mov	r7,a
      000FBF                       3483 00105$:
                                   3484 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      000FBF 0E               [12] 3485 	inc	r6
      000FC0 BE 02 00         [24] 3486 	cjne	r6,#0x02,00122$
      000FC3                       3487 00122$:
      000FC3 40 D0            [24] 3488 	jc	00104$
                                   3489 ;	getFunctions.c:52: return byte;
      000FC5 8F 82            [24] 3490 	mov	dpl,r7
                                   3491 ;	getFunctions.c:53: }
      000FC7 22               [24] 3492 	ret
                                   3493 ;------------------------------------------------------------
                                   3494 ;Allocation info for local variables in function 'check'
                                   3495 ;------------------------------------------------------------
                                   3496 ;ramAddress                Allocated to registers r4 r5 
                                   3497 ;checker                   Allocated with name '_check_checker_65537_229'
                                   3498 ;input                     Allocated with name '_check_input_65537_229'
                                   3499 ;fetched                   Allocated with name '_check_fetched_65537_229'
                                   3500 ;i                         Allocated with name '_check_i_65537_229'
                                   3501 ;error                     Allocated with name '_check_error_65537_229'
                                   3502 ;------------------------------------------------------------
                                   3503 ;	check.c:6: void check() {
                                   3504 ;	-----------------------------------------
                                   3505 ;	 function check
                                   3506 ;	-----------------------------------------
      000FC8                       3507 _check:
                                   3508 ;	check.c:8: fillScreen(GRAY);
      000FC8 90 D6 BA         [24] 3509 	mov	dptr,#0xd6ba
      000FCB 12r07r9A         [24] 3510 	lcall	_fillScreen
                                   3511 ;	check.c:9: setCursor(0, 0);
      000FCE E4               [12] 3512 	clr	a
      000FCF F5*00            [12] 3513 	mov	_setCursor_PARM_2,a
      000FD1 F5*01            [12] 3514 	mov	(_setCursor_PARM_2 + 1),a
      000FD3 90 00 00         [24] 3515 	mov	dptr,#0x0000
      000FD6 12r00rA5         [24] 3516 	lcall	_setCursor
                                   3517 ;	check.c:10: setTextSize(2);
      000FD9 75 82 02         [24] 3518 	mov	dpl,#0x02
      000FDC 12r00rBF         [24] 3519 	lcall	_setTextSize
                                   3520 ;	check.c:17: __xdata bool error = false;
      000FDF 90r00r01         [24] 3521 	mov	dptr,#_check_error_65537_229
      000FE2 E4               [12] 3522 	clr	a
      000FE3 F0               [24] 3523 	movx	@dptr,a
                                   3524 ;	check.c:21: LCD_string_write("Enter byte to check\n");
      000FE4 90r05r4B         [24] 3525 	mov	dptr,#___str_6
      000FE7 75 F0 80         [24] 3526 	mov	b,#0x80
      000FEA 12r0Br7A         [24] 3527 	lcall	_LCD_string_write
                                   3528 ;	check.c:22: checker = getByte();
      000FED 12r0Fr91         [24] 3529 	lcall	_getByte
      000FF0 E5 82            [12] 3530 	mov	a,dpl
      000FF2 90r00r00         [24] 3531 	mov	dptr,#_check_checker_65537_229
      000FF5 F0               [24] 3532 	movx	@dptr,a
                                   3533 ;	check.c:23: write('\n');
      000FF6 75 82 0A         [24] 3534 	mov	dpl,#0x0a
      000FF9 12r0Br0C         [24] 3535 	lcall	_write
                                   3536 ;	check.c:24: LCD_string_write("In progress...\n");
      000FFC 90r05r60         [24] 3537 	mov	dptr,#___str_7
      000FFF 75 F0 80         [24] 3538 	mov	b,#0x80
      001002 12r0Br7A         [24] 3539 	lcall	_LCD_string_write
                                   3540 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001005 7E 00            [12] 3541 	mov	r6,#0x00
      001007 7F 00            [12] 3542 	mov	r7,#0x00
      001009                       3543 00112$:
                                   3544 ;	check.c:30: IOM = 0;
                                   3545 ;	assignBit
      001009 C2 B4            [12] 3546 	clr	_P3_4
                                   3547 ;	check.c:31: ramAddress = (uint16_t __xdata*)(i);
      00100B 8E 04            [24] 3548 	mov	ar4,r6
      00100D 8F 05            [24] 3549 	mov	ar5,r7
                                   3550 ;	check.c:32: *ramAddress = checker;
      00100F 90r00r00         [24] 3551 	mov	dptr,#_check_checker_65537_229
      001012 E0               [24] 3552 	movx	a,@dptr
      001013 FB               [12] 3553 	mov	r3,a
      001014 F9               [12] 3554 	mov	r1,a
      001015 7A 00            [12] 3555 	mov	r2,#0x00
      001017 8C 82            [24] 3556 	mov	dpl,r4
      001019 8D 83            [24] 3557 	mov	dph,r5
      00101B E9               [12] 3558 	mov	a,r1
      00101C F0               [24] 3559 	movx	@dptr,a
      00101D EA               [12] 3560 	mov	a,r2
      00101E A3               [24] 3561 	inc	dptr
      00101F F0               [24] 3562 	movx	@dptr,a
                                   3563 ;	check.c:33: fetched = *ramAddress;
                                   3564 ;	check.c:34: IOM = 1;
                                   3565 ;	assignBit
      001020 D2 B4            [12] 3566 	setb	_P3_4
                                   3567 ;	check.c:35: if (fetched != checker) {
      001022 E9               [12] 3568 	mov	a,r1
      001023 B5 03 02         [24] 3569 	cjne	a,ar3,00136$
      001026 80 43            [24] 3570 	sjmp	00104$
      001028                       3571 00136$:
                                   3572 ;	check.c:36: asciiToHex(checker);
      001028 8B 82            [24] 3573 	mov	dpl,r3
      00102A C0 05            [24] 3574 	push	ar5
      00102C C0 04            [24] 3575 	push	ar4
      00102E C0 01            [24] 3576 	push	ar1
      001030 12r0DrCD         [24] 3577 	lcall	_asciiToHex
                                   3578 ;	check.c:37: write(' ');
      001033 75 82 20         [24] 3579 	mov	dpl,#0x20
      001036 12r0Br0C         [24] 3580 	lcall	_write
      001039 D0 01            [24] 3581 	pop	ar1
                                   3582 ;	check.c:38: asciiToHex(fetched);
      00103B 89 82            [24] 3583 	mov	dpl,r1
      00103D 12r0DrCD         [24] 3584 	lcall	_asciiToHex
                                   3585 ;	check.c:39: write(' ');
      001040 75 82 20         [24] 3586 	mov	dpl,#0x20
      001043 12r0Br0C         [24] 3587 	lcall	_write
      001046 D0 04            [24] 3588 	pop	ar4
      001048 D0 05            [24] 3589 	pop	ar5
                                   3590 ;	check.c:40: asciiToHex(*ramAddress);
      00104A 8C 82            [24] 3591 	mov	dpl,r4
      00104C 8D 83            [24] 3592 	mov	dph,r5
      00104E E0               [24] 3593 	movx	a,@dptr
      00104F F5 82            [12] 3594 	mov	dpl,a
      001051 12r0DrCD         [24] 3595 	lcall	_asciiToHex
                                   3596 ;	check.c:41: write('\n');
      001054 75 82 0A         [24] 3597 	mov	dpl,#0x0a
      001057 12r0Br0C         [24] 3598 	lcall	_write
                                   3599 ;	check.c:42: LCD_string_write("Memory check failed\n");
      00105A 90r05r70         [24] 3600 	mov	dptr,#___str_8
      00105D 75 F0 80         [24] 3601 	mov	b,#0x80
      001060 12r0Br7A         [24] 3602 	lcall	_LCD_string_write
                                   3603 ;	check.c:43: error = true;
      001063 90r00r01         [24] 3604 	mov	dptr,#_check_error_65537_229
      001066 74 01            [12] 3605 	mov	a,#0x01
      001068 F0               [24] 3606 	movx	@dptr,a
                                   3607 ;	check.c:44: break;
      001069 80 78            [24] 3608 	sjmp	00106$
      00106B                       3609 00104$:
                                   3610 ;	check.c:46: IOM = 0;
                                   3611 ;	assignBit
      00106B C2 B4            [12] 3612 	clr	_P3_4
                                   3613 ;	check.c:47: checker = ~checker;
      00106D 90r00r00         [24] 3614 	mov	dptr,#_check_checker_65537_229
      001070 EB               [12] 3615 	mov	a,r3
      001071 F4               [12] 3616 	cpl	a
      001072 F0               [24] 3617 	movx	@dptr,a
                                   3618 ;	check.c:48: *ramAddress = checker;
      001073 E0               [24] 3619 	movx	a,@dptr
      001074 FB               [12] 3620 	mov	r3,a
      001075 F9               [12] 3621 	mov	r1,a
      001076 7A 00            [12] 3622 	mov	r2,#0x00
      001078 8C 82            [24] 3623 	mov	dpl,r4
      00107A 8D 83            [24] 3624 	mov	dph,r5
      00107C E9               [12] 3625 	mov	a,r1
      00107D F0               [24] 3626 	movx	@dptr,a
      00107E EA               [12] 3627 	mov	a,r2
      00107F A3               [24] 3628 	inc	dptr
      001080 F0               [24] 3629 	movx	@dptr,a
                                   3630 ;	check.c:49: fetched = *ramAddress;
                                   3631 ;	check.c:50: IOM = 1;
                                   3632 ;	assignBit
      001081 D2 B4            [12] 3633 	setb	_P3_4
                                   3634 ;	check.c:51: if (fetched != checker) {
      001083 E9               [12] 3635 	mov	a,r1
      001084 B5 03 02         [24] 3636 	cjne	a,ar3,00137$
      001087 80 45            [24] 3637 	sjmp	00113$
      001089                       3638 00137$:
                                   3639 ;	check.c:52: asciiToHex(~checker);
      001089 EB               [12] 3640 	mov	a,r3
      00108A F4               [12] 3641 	cpl	a
      00108B F5 82            [12] 3642 	mov	dpl,a
      00108D C0 05            [24] 3643 	push	ar5
      00108F C0 04            [24] 3644 	push	ar4
      001091 C0 01            [24] 3645 	push	ar1
      001093 12r0DrCD         [24] 3646 	lcall	_asciiToHex
                                   3647 ;	check.c:53: write(' ');
      001096 75 82 20         [24] 3648 	mov	dpl,#0x20
      001099 12r0Br0C         [24] 3649 	lcall	_write
      00109C D0 01            [24] 3650 	pop	ar1
                                   3651 ;	check.c:54: asciiToHex(fetched);
      00109E 89 82            [24] 3652 	mov	dpl,r1
      0010A0 12r0DrCD         [24] 3653 	lcall	_asciiToHex
                                   3654 ;	check.c:55: write(' ');
      0010A3 75 82 20         [24] 3655 	mov	dpl,#0x20
      0010A6 12r0Br0C         [24] 3656 	lcall	_write
      0010A9 D0 04            [24] 3657 	pop	ar4
      0010AB D0 05            [24] 3658 	pop	ar5
                                   3659 ;	check.c:56: asciiToHex(*ramAddress);
      0010AD 8C 82            [24] 3660 	mov	dpl,r4
      0010AF 8D 83            [24] 3661 	mov	dph,r5
      0010B1 E0               [24] 3662 	movx	a,@dptr
      0010B2 F5 82            [12] 3663 	mov	dpl,a
      0010B4 12r0DrCD         [24] 3664 	lcall	_asciiToHex
                                   3665 ;	check.c:57: write('\n');
      0010B7 75 82 0A         [24] 3666 	mov	dpl,#0x0a
      0010BA 12r0Br0C         [24] 3667 	lcall	_write
                                   3668 ;	check.c:58: LCD_string_write("Memory check failed\n");
      0010BD 90r05r70         [24] 3669 	mov	dptr,#___str_8
      0010C0 75 F0 80         [24] 3670 	mov	b,#0x80
      0010C3 12r0Br7A         [24] 3671 	lcall	_LCD_string_write
                                   3672 ;	check.c:59: error = true;
      0010C6 90r00r01         [24] 3673 	mov	dptr,#_check_error_65537_229
      0010C9 74 01            [12] 3674 	mov	a,#0x01
      0010CB F0               [24] 3675 	movx	@dptr,a
                                   3676 ;	check.c:60: break;
      0010CC 80 15            [24] 3677 	sjmp	00106$
      0010CE                       3678 00113$:
                                   3679 ;	check.c:29: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0010CE 0E               [12] 3680 	inc	r6
      0010CF BE 00 01         [24] 3681 	cjne	r6,#0x00,00138$
      0010D2 0F               [12] 3682 	inc	r7
      0010D3                       3683 00138$:
      0010D3 8E 04            [24] 3684 	mov	ar4,r6
      0010D5 8F 05            [24] 3685 	mov	ar5,r7
      0010D7 C3               [12] 3686 	clr	c
      0010D8 EC               [12] 3687 	mov	a,r4
      0010D9 94 FF            [12] 3688 	subb	a,#0xff
      0010DB ED               [12] 3689 	mov	a,r5
      0010DC 94 FF            [12] 3690 	subb	a,#0xff
      0010DE 50 03            [24] 3691 	jnc	00139$
      0010E0 02r10r09         [24] 3692 	ljmp	00112$
      0010E3                       3693 00139$:
      0010E3                       3694 00106$:
                                   3695 ;	check.c:68: if (error != false) {
      0010E3 90r00r01         [24] 3696 	mov	dptr,#_check_error_65537_229
      0010E6 E0               [24] 3697 	movx	a,@dptr
      0010E7 60 09            [24] 3698 	jz	00108$
                                   3699 ;	check.c:69: LCD_string_write("Success!\n");
      0010E9 90r05r85         [24] 3700 	mov	dptr,#___str_9
      0010EC 75 F0 80         [24] 3701 	mov	b,#0x80
      0010EF 12r0Br7A         [24] 3702 	lcall	_LCD_string_write
      0010F2                       3703 00108$:
                                   3704 ;	check.c:73: LCD_string_write("Press 1 for menu");
      0010F2 90r05r8F         [24] 3705 	mov	dptr,#___str_10
      0010F5 75 F0 80         [24] 3706 	mov	b,#0x80
      0010F8 12r0Br7A         [24] 3707 	lcall	_LCD_string_write
                                   3708 ;	check.c:75: do {
      0010FB                       3709 00109$:
                                   3710 ;	check.c:76: input = keyDetect();
      0010FB 12r0Cr0A         [24] 3711 	lcall	_keyDetect
      0010FE AF 82            [24] 3712 	mov	r7,dpl
                                   3713 ;	check.c:77: } while (input != '1');
      001100 BF 31 F8         [24] 3714 	cjne	r7,#0x31,00109$
                                   3715 ;	check.c:78: }
      001103 22               [24] 3716 	ret
                                   3717 ;------------------------------------------------------------
                                   3718 ;Allocation info for local variables in function 'basic'
                                   3719 ;------------------------------------------------------------
                                   3720 ;val                       Allocated to registers r7 
                                   3721 ;fetched                   Allocated to registers r7 
                                   3722 ;add                       Allocated to registers r5 r6 
                                   3723 ;ramAddress                Allocated to registers 
                                   3724 ;------------------------------------------------------------
                                   3725 ;	check.c:84: void basic() {
                                   3726 ;	-----------------------------------------
                                   3727 ;	 function basic
                                   3728 ;	-----------------------------------------
      001104                       3729 _basic:
                                   3730 ;	check.c:86: fillScreen(GRAY);
      001104 90 D6 BA         [24] 3731 	mov	dptr,#0xd6ba
      001107 12r07r9A         [24] 3732 	lcall	_fillScreen
                                   3733 ;	check.c:87: setCursor(0, 0);
      00110A E4               [12] 3734 	clr	a
      00110B F5*00            [12] 3735 	mov	_setCursor_PARM_2,a
      00110D F5*01            [12] 3736 	mov	(_setCursor_PARM_2 + 1),a
      00110F 90 00 00         [24] 3737 	mov	dptr,#0x0000
      001112 12r00rA5         [24] 3738 	lcall	_setCursor
                                   3739 ;	check.c:88: setTextSize(2);
      001115 75 82 02         [24] 3740 	mov	dpl,#0x02
      001118 12r00rBF         [24] 3741 	lcall	_setTextSize
                                   3742 ;	check.c:97: LCD_string_write("Enter byte\n");
      00111B 90r05rA0         [24] 3743 	mov	dptr,#___str_11
      00111E 75 F0 80         [24] 3744 	mov	b,#0x80
      001121 12r0Br7A         [24] 3745 	lcall	_LCD_string_write
                                   3746 ;	check.c:98: val = getByte();
      001124 12r0Fr91         [24] 3747 	lcall	_getByte
      001127 AF 82            [24] 3748 	mov	r7,dpl
                                   3749 ;	check.c:99: write('\n');
      001129 75 82 0A         [24] 3750 	mov	dpl,#0x0a
      00112C C0 07            [24] 3751 	push	ar7
      00112E 12r0Br0C         [24] 3752 	lcall	_write
                                   3753 ;	check.c:102: LCD_string_write("Enter address\n");
      001131 90r05rAC         [24] 3754 	mov	dptr,#___str_12
      001134 75 F0 80         [24] 3755 	mov	b,#0x80
      001137 12r0Br7A         [24] 3756 	lcall	_LCD_string_write
                                   3757 ;	check.c:103: add = getAddress();
      00113A 12r0Fr46         [24] 3758 	lcall	_getAddress
      00113D AD 82            [24] 3759 	mov	r5,dpl
      00113F AE 83            [24] 3760 	mov	r6,dph
                                   3761 ;	check.c:104: write('\n');
      001141 75 82 0A         [24] 3762 	mov	dpl,#0x0a
      001144 C0 06            [24] 3763 	push	ar6
      001146 C0 05            [24] 3764 	push	ar5
      001148 12r0Br0C         [24] 3765 	lcall	_write
                                   3766 ;	check.c:105: LCD_string_write("In progress\n");
      00114B 90r05rBB         [24] 3767 	mov	dptr,#___str_13
      00114E 75 F0 80         [24] 3768 	mov	b,#0x80
      001151 12r0Br7A         [24] 3769 	lcall	_LCD_string_write
      001154 D0 05            [24] 3770 	pop	ar5
      001156 D0 06            [24] 3771 	pop	ar6
      001158 D0 07            [24] 3772 	pop	ar7
                                   3773 ;	check.c:107: IOM = 0;
                                   3774 ;	assignBit
      00115A C2 B4            [12] 3775 	clr	_P3_4
                                   3776 ;	check.c:110: ramAddress = (uint16_t __xdata*)(add);
      00115C 8D 82            [24] 3777 	mov	dpl,r5
      00115E 8E 83            [24] 3778 	mov	dph,r6
                                   3779 ;	check.c:111: *ramAddress = val;
      001160 8F 05            [24] 3780 	mov	ar5,r7
      001162 7E 00            [12] 3781 	mov	r6,#0x00
      001164 ED               [12] 3782 	mov	a,r5
      001165 F0               [24] 3783 	movx	@dptr,a
      001166 EE               [12] 3784 	mov	a,r6
      001167 A3               [24] 3785 	inc	dptr
      001168 F0               [24] 3786 	movx	@dptr,a
                                   3787 ;	check.c:114: fetched = *ramAddress;
                                   3788 ;	check.c:116: IOM = 1;
                                   3789 ;	assignBit
      001169 D2 B4            [12] 3790 	setb	_P3_4
                                   3791 ;	check.c:119: if (fetched == val) {
      00116B ED               [12] 3792 	mov	a,r5
      00116C B5 07 10         [24] 3793 	cjne	a,ar7,00102$
                                   3794 ;	check.c:120: asciiToHex(fetched);
      00116F 8D 82            [24] 3795 	mov	dpl,r5
      001171 12r0DrCD         [24] 3796 	lcall	_asciiToHex
                                   3797 ;	check.c:121: LCD_string_write(" fetched!\nSuccess!\n");
      001174 90r05rC8         [24] 3798 	mov	dptr,#___str_14
      001177 75 F0 80         [24] 3799 	mov	b,#0x80
      00117A 12r0Br7A         [24] 3800 	lcall	_LCD_string_write
      00117D 80 09            [24] 3801 	sjmp	00103$
      00117F                       3802 00102$:
                                   3803 ;	check.c:123: LCD_string_write("Check failed\n");
      00117F 90r05rDC         [24] 3804 	mov	dptr,#___str_15
      001182 75 F0 80         [24] 3805 	mov	b,#0x80
      001185 12r0Br7A         [24] 3806 	lcall	_LCD_string_write
      001188                       3807 00103$:
                                   3808 ;	check.c:126: LCD_string_write("Press 1 for menu\n");
      001188 90r05rEA         [24] 3809 	mov	dptr,#___str_16
      00118B 75 F0 80         [24] 3810 	mov	b,#0x80
      00118E 12r0Br7A         [24] 3811 	lcall	_LCD_string_write
                                   3812 ;	check.c:128: do {
      001191                       3813 00104$:
                                   3814 ;	check.c:129: fetched = keyDetect();
      001191 12r0Cr0A         [24] 3815 	lcall	_keyDetect
      001194 AF 82            [24] 3816 	mov	r7,dpl
                                   3817 ;	check.c:130: } while (fetched != '1');
      001196 BF 31 F8         [24] 3818 	cjne	r7,#0x31,00104$
                                   3819 ;	check.c:131: }
      001199 22               [24] 3820 	ret
                                   3821 ;------------------------------------------------------------
                                   3822 ;Allocation info for local variables in function 'move'
                                   3823 ;------------------------------------------------------------
                                   3824 ;origin                    Allocated to registers 
                                   3825 ;target                    Allocated with name '_move_target_65537_243'
                                   3826 ;startAdd                  Allocated with name '_move_startAdd_65537_243'
                                   3827 ;targetAdd                 Allocated with name '_move_targetAdd_65537_243'
                                   3828 ;i                         Allocated with name '_move_i_65537_243'
                                   3829 ;size                      Allocated with name '_move_size_65537_243'
                                   3830 ;------------------------------------------------------------
                                   3831 ;	move.c:5: void move() {
                                   3832 ;	-----------------------------------------
                                   3833 ;	 function move
                                   3834 ;	-----------------------------------------
      00119A                       3835 _move:
                                   3836 ;	move.c:7: fillScreen(GRAY);
      00119A 90 D6 BA         [24] 3837 	mov	dptr,#0xd6ba
      00119D 12r07r9A         [24] 3838 	lcall	_fillScreen
                                   3839 ;	move.c:8: setCursor(0, 0);
      0011A0 E4               [12] 3840 	clr	a
      0011A1 F5*00            [12] 3841 	mov	_setCursor_PARM_2,a
      0011A3 F5*01            [12] 3842 	mov	(_setCursor_PARM_2 + 1),a
      0011A5 90 00 00         [24] 3843 	mov	dptr,#0x0000
      0011A8 12r00rA5         [24] 3844 	lcall	_setCursor
                                   3845 ;	move.c:19: setTextSize(2);
      0011AB 75 82 02         [24] 3846 	mov	dpl,#0x02
      0011AE 12r00rBF         [24] 3847 	lcall	_setTextSize
                                   3848 ;	move.c:20: LCD_string_write("Enter start add.\n");
      0011B1 90r05rFC         [24] 3849 	mov	dptr,#___str_17
      0011B4 75 F0 80         [24] 3850 	mov	b,#0x80
      0011B7 12r0Br7A         [24] 3851 	lcall	_LCD_string_write
                                   3852 ;	move.c:21: startAdd = getAddress();
      0011BA 12r0Fr46         [24] 3853 	lcall	_getAddress
      0011BD AE 82            [24] 3854 	mov	r6,dpl
      0011BF AF 83            [24] 3855 	mov	r7,dph
                                   3856 ;	move.c:22: write('\n');
      0011C1 75 82 0A         [24] 3857 	mov	dpl,#0x0a
      0011C4 C0 07            [24] 3858 	push	ar7
      0011C6 C0 06            [24] 3859 	push	ar6
      0011C8 12r0Br0C         [24] 3860 	lcall	_write
                                   3861 ;	move.c:25: LCD_string_write("Enter size\n");
      0011CB 90r06r0E         [24] 3862 	mov	dptr,#___str_18
      0011CE 75 F0 80         [24] 3863 	mov	b,#0x80
      0011D1 12r0Br7A         [24] 3864 	lcall	_LCD_string_write
                                   3865 ;	move.c:26: size = getByte();
      0011D4 12r0Fr91         [24] 3866 	lcall	_getByte
      0011D7 AD 82            [24] 3867 	mov	r5,dpl
                                   3868 ;	move.c:27: write('\n');
      0011D9 75 82 0A         [24] 3869 	mov	dpl,#0x0a
      0011DC C0 05            [24] 3870 	push	ar5
      0011DE 12r0Br0C         [24] 3871 	lcall	_write
                                   3872 ;	move.c:30: LCD_string_write("Enter target add.\n");
      0011E1 90r06r1A         [24] 3873 	mov	dptr,#___str_19
      0011E4 75 F0 80         [24] 3874 	mov	b,#0x80
      0011E7 12r0Br7A         [24] 3875 	lcall	_LCD_string_write
                                   3876 ;	move.c:31: targetAdd = getAddress();
      0011EA 12r0Fr46         [24] 3877 	lcall	_getAddress
      0011ED AB 82            [24] 3878 	mov	r3,dpl
      0011EF AC 83            [24] 3879 	mov	r4,dph
                                   3880 ;	move.c:32: write('\n');
      0011F1 75 82 0A         [24] 3881 	mov	dpl,#0x0a
      0011F4 C0 04            [24] 3882 	push	ar4
      0011F6 C0 03            [24] 3883 	push	ar3
      0011F8 12r0Br0C         [24] 3884 	lcall	_write
                                   3885 ;	move.c:35: LCD_string_write("Move in progress...\n");
      0011FB 90r06r2D         [24] 3886 	mov	dptr,#___str_20
      0011FE 75 F0 80         [24] 3887 	mov	b,#0x80
      001201 12r0Br7A         [24] 3888 	lcall	_LCD_string_write
      001204 D0 03            [24] 3889 	pop	ar3
      001206 D0 04            [24] 3890 	pop	ar4
      001208 D0 05            [24] 3891 	pop	ar5
      00120A D0 06            [24] 3892 	pop	ar6
      00120C D0 07            [24] 3893 	pop	ar7
                                   3894 ;	move.c:38: for (i = 0; i < size; i++) {
      00120E 79 00            [12] 3895 	mov	r1,#0x00
      001210 7A 00            [12] 3896 	mov	r2,#0x00
      001212                       3897 00106$:
      001212 C0 03            [24] 3898 	push	ar3
      001214 C0 04            [24] 3899 	push	ar4
      001216 8D 00            [24] 3900 	mov	ar0,r5
      001218 7C 00            [12] 3901 	mov	r4,#0x00
      00121A C3               [12] 3902 	clr	c
      00121B E9               [12] 3903 	mov	a,r1
      00121C 98               [12] 3904 	subb	a,r0
      00121D EA               [12] 3905 	mov	a,r2
      00121E 9C               [12] 3906 	subb	a,r4
      00121F D0 04            [24] 3907 	pop	ar4
      001221 D0 03            [24] 3908 	pop	ar3
      001223 50 31            [24] 3909 	jnc	00101$
                                   3910 ;	move.c:42: IOM = 0;
      001225 C0 05            [24] 3911 	push	ar5
                                   3912 ;	assignBit
      001227 C2 B4            [12] 3913 	clr	_P3_4
                                   3914 ;	move.c:43: origin = (uint16_t __xdata*)(startAdd);
      001229 8E 82            [24] 3915 	mov	dpl,r6
      00122B 8F 83            [24] 3916 	mov	dph,r7
                                   3917 ;	move.c:44: target = (uint16_t __xdata*)(targetAdd);
      00122D 8B*51            [24] 3918 	mov	_move_target_65537_243,r3
      00122F 8C*52            [24] 3919 	mov	(_move_target_65537_243 + 1),r4
                                   3920 ;	move.c:45: *target = *origin;
      001231 E0               [24] 3921 	movx	a,@dptr
      001232 F8               [12] 3922 	mov	r0,a
      001233 A3               [24] 3923 	inc	dptr
      001234 E0               [24] 3924 	movx	a,@dptr
      001235 FD               [12] 3925 	mov	r5,a
      001236 85*51 82         [24] 3926 	mov	dpl,_move_target_65537_243
      001239 85*52 83         [24] 3927 	mov	dph,(_move_target_65537_243 + 1)
      00123C E8               [12] 3928 	mov	a,r0
      00123D F0               [24] 3929 	movx	@dptr,a
      00123E ED               [12] 3930 	mov	a,r5
      00123F A3               [24] 3931 	inc	dptr
      001240 F0               [24] 3932 	movx	@dptr,a
                                   3933 ;	move.c:46: IOM = 1;
                                   3934 ;	assignBit
      001241 D2 B4            [12] 3935 	setb	_P3_4
                                   3936 ;	move.c:49: startAdd++;
      001243 0E               [12] 3937 	inc	r6
      001244 BE 00 01         [24] 3938 	cjne	r6,#0x00,00124$
      001247 0F               [12] 3939 	inc	r7
      001248                       3940 00124$:
                                   3941 ;	move.c:50: targetAdd++;
      001248 0B               [12] 3942 	inc	r3
      001249 BB 00 01         [24] 3943 	cjne	r3,#0x00,00125$
      00124C 0C               [12] 3944 	inc	r4
      00124D                       3945 00125$:
                                   3946 ;	move.c:38: for (i = 0; i < size; i++) {
      00124D 09               [12] 3947 	inc	r1
      00124E B9 00 01         [24] 3948 	cjne	r1,#0x00,00126$
      001251 0A               [12] 3949 	inc	r2
      001252                       3950 00126$:
      001252 D0 05            [24] 3951 	pop	ar5
      001254 80 BC            [24] 3952 	sjmp	00106$
      001256                       3953 00101$:
                                   3954 ;	move.c:53: LCD_string_write("Done!\n");
      001256 90r06r42         [24] 3955 	mov	dptr,#___str_21
      001259 75 F0 80         [24] 3956 	mov	b,#0x80
      00125C 12r0Br7A         [24] 3957 	lcall	_LCD_string_write
                                   3958 ;	move.c:54: LCD_string_write("Press 1 for menu\n");
      00125F 90r05rEA         [24] 3959 	mov	dptr,#___str_16
      001262 75 F0 80         [24] 3960 	mov	b,#0x80
      001265 12r0Br7A         [24] 3961 	lcall	_LCD_string_write
                                   3962 ;	move.c:56: do {
      001268                       3963 00102$:
                                   3964 ;	move.c:57: size = keyDetect();
      001268 12r0Cr0A         [24] 3965 	lcall	_keyDetect
      00126B AF 82            [24] 3966 	mov	r7,dpl
                                   3967 ;	move.c:58: } while (size != '1');
      00126D BF 31 F8         [24] 3968 	cjne	r7,#0x31,00102$
                                   3969 ;	move.c:59: }
      001270 22               [24] 3970 	ret
                                   3971 ;------------------------------------------------------------
                                   3972 ;Allocation info for local variables in function 'editByte'
                                   3973 ;------------------------------------------------------------
                                   3974 ;add                       Allocated to registers r6 r7 
                                   3975 ;ramAddress                Allocated to registers r6 r7 
                                   3976 ;val                       Allocated with name '_editByte_val_65536_248'
                                   3977 ;new                       Allocated with name '_editByte_new_65536_248'
                                   3978 ;------------------------------------------------------------
                                   3979 ;	edit.c:6: void editByte(uint16_t add) {
                                   3980 ;	-----------------------------------------
                                   3981 ;	 function editByte
                                   3982 ;	-----------------------------------------
      001271                       3983 _editByte:
      001271 AE 82            [24] 3984 	mov	r6,dpl
      001273 AF 83            [24] 3985 	mov	r7,dph
                                   3986 ;	edit.c:13: asciiToHex(HIGHBYTE(add));
      001275 8F 05            [24] 3987 	mov	ar5,r7
      001277 8D 04            [24] 3988 	mov	ar4,r5
      001279 8C 82            [24] 3989 	mov	dpl,r4
      00127B C0 07            [24] 3990 	push	ar7
      00127D C0 06            [24] 3991 	push	ar6
      00127F C0 04            [24] 3992 	push	ar4
      001281 12r0DrCD         [24] 3993 	lcall	_asciiToHex
      001284 D0 04            [24] 3994 	pop	ar4
      001286 D0 06            [24] 3995 	pop	ar6
                                   3996 ;	edit.c:14: asciiToHex(LOWBYTE(add));
      001288 8E 05            [24] 3997 	mov	ar5,r6
      00128A 8D 82            [24] 3998 	mov	dpl,r5
      00128C C0 06            [24] 3999 	push	ar6
      00128E C0 05            [24] 4000 	push	ar5
      001290 C0 04            [24] 4001 	push	ar4
      001292 12r0DrCD         [24] 4002 	lcall	_asciiToHex
                                   4003 ;	edit.c:15: LCD_string_write(": ");
      001295 90r06r49         [24] 4004 	mov	dptr,#___str_22
      001298 75 F0 80         [24] 4005 	mov	b,#0x80
      00129B 12r0Br7A         [24] 4006 	lcall	_LCD_string_write
      00129E D0 04            [24] 4007 	pop	ar4
      0012A0 D0 05            [24] 4008 	pop	ar5
      0012A2 D0 06            [24] 4009 	pop	ar6
      0012A4 D0 07            [24] 4010 	pop	ar7
                                   4011 ;	edit.c:18: IOM = 0;
                                   4012 ;	assignBit
      0012A6 C2 B4            [12] 4013 	clr	_P3_4
                                   4014 ;	edit.c:19: ramAddress = (uint16_t __xdata*)(add);
                                   4015 ;	edit.c:20: val = *ramAddress;
      0012A8 8E 82            [24] 4016 	mov	dpl,r6
      0012AA 8F 83            [24] 4017 	mov	dph,r7
      0012AC E0               [24] 4018 	movx	a,@dptr
      0012AD FB               [12] 4019 	mov	r3,a
                                   4020 ;	edit.c:21: IOM = 1;
                                   4021 ;	assignBit
      0012AE D2 B4            [12] 4022 	setb	_P3_4
                                   4023 ;	edit.c:24: asciiToHex(val);
      0012B0 8B 82            [24] 4024 	mov	dpl,r3
      0012B2 C0 07            [24] 4025 	push	ar7
      0012B4 C0 06            [24] 4026 	push	ar6
      0012B6 C0 05            [24] 4027 	push	ar5
      0012B8 C0 04            [24] 4028 	push	ar4
      0012BA 12r0DrCD         [24] 4029 	lcall	_asciiToHex
                                   4030 ;	edit.c:27: write('\n');
      0012BD 75 82 0A         [24] 4031 	mov	dpl,#0x0a
      0012C0 12r0Br0C         [24] 4032 	lcall	_write
                                   4033 ;	edit.c:28: LCD_string_write("Enter new byte:\n");
      0012C3 90r06r4C         [24] 4034 	mov	dptr,#___str_23
      0012C6 75 F0 80         [24] 4035 	mov	b,#0x80
      0012C9 12r0Br7A         [24] 4036 	lcall	_LCD_string_write
                                   4037 ;	edit.c:29: new = getByte();
      0012CC 12r0Fr91         [24] 4038 	lcall	_getByte
      0012CF AB 82            [24] 4039 	mov	r3,dpl
                                   4040 ;	edit.c:30: write('\n');
      0012D1 75 82 0A         [24] 4041 	mov	dpl,#0x0a
      0012D4 C0 03            [24] 4042 	push	ar3
      0012D6 12r0Br0C         [24] 4043 	lcall	_write
      0012D9 D0 03            [24] 4044 	pop	ar3
      0012DB D0 04            [24] 4045 	pop	ar4
      0012DD D0 05            [24] 4046 	pop	ar5
      0012DF D0 06            [24] 4047 	pop	ar6
      0012E1 D0 07            [24] 4048 	pop	ar7
                                   4049 ;	edit.c:33: IOM = 0;
                                   4050 ;	assignBit
      0012E3 C2 B4            [12] 4051 	clr	_P3_4
                                   4052 ;	edit.c:34: *ramAddress = new;
      0012E5 7A 00            [12] 4053 	mov	r2,#0x00
      0012E7 8E 82            [24] 4054 	mov	dpl,r6
      0012E9 8F 83            [24] 4055 	mov	dph,r7
      0012EB EB               [12] 4056 	mov	a,r3
      0012EC F0               [24] 4057 	movx	@dptr,a
      0012ED EA               [12] 4058 	mov	a,r2
      0012EE A3               [24] 4059 	inc	dptr
      0012EF F0               [24] 4060 	movx	@dptr,a
                                   4061 ;	edit.c:35: val = *ramAddress;
                                   4062 ;	edit.c:36: IOM = 1;
                                   4063 ;	assignBit
      0012F0 D2 B4            [12] 4064 	setb	_P3_4
                                   4065 ;	edit.c:39: asciiToHex(HIGHBYTE(add));
      0012F2 8C 82            [24] 4066 	mov	dpl,r4
      0012F4 C0 05            [24] 4067 	push	ar5
      0012F6 C0 03            [24] 4068 	push	ar3
      0012F8 12r0DrCD         [24] 4069 	lcall	_asciiToHex
      0012FB D0 03            [24] 4070 	pop	ar3
      0012FD D0 05            [24] 4071 	pop	ar5
                                   4072 ;	edit.c:40: asciiToHex(LOWBYTE(add));
      0012FF 8D 82            [24] 4073 	mov	dpl,r5
      001301 C0 03            [24] 4074 	push	ar3
      001303 12r0DrCD         [24] 4075 	lcall	_asciiToHex
                                   4076 ;	edit.c:41: LCD_string_write(": ");
      001306 90r06r49         [24] 4077 	mov	dptr,#___str_22
      001309 75 F0 80         [24] 4078 	mov	b,#0x80
      00130C 12r0Br7A         [24] 4079 	lcall	_LCD_string_write
      00130F D0 03            [24] 4080 	pop	ar3
                                   4081 ;	edit.c:42: asciiToHex(val);
      001311 8B 82            [24] 4082 	mov	dpl,r3
      001313 12r0DrCD         [24] 4083 	lcall	_asciiToHex
                                   4084 ;	edit.c:43: write('\n');
      001316 75 82 0A         [24] 4085 	mov	dpl,#0x0a
                                   4086 ;	edit.c:45: }
      001319 02r0Br0C         [24] 4087 	ljmp	_write
                                   4088 ;------------------------------------------------------------
                                   4089 ;Allocation info for local variables in function 'edit'
                                   4090 ;------------------------------------------------------------
                                   4091 ;input                     Allocated with name '_edit_input_65537_250'
                                   4092 ;add                       Allocated with name '_edit_add_65537_250'
                                   4093 ;------------------------------------------------------------
                                   4094 ;	edit.c:51: void edit() {
                                   4095 ;	-----------------------------------------
                                   4096 ;	 function edit
                                   4097 ;	-----------------------------------------
      00131C                       4098 _edit:
                                   4099 ;	edit.c:53: fillScreen(GRAY);
      00131C 90 D6 BA         [24] 4100 	mov	dptr,#0xd6ba
      00131F 12r07r9A         [24] 4101 	lcall	_fillScreen
                                   4102 ;	edit.c:54: setCursor(0, 0);
      001322 E4               [12] 4103 	clr	a
      001323 F5*00            [12] 4104 	mov	_setCursor_PARM_2,a
      001325 F5*01            [12] 4105 	mov	(_setCursor_PARM_2 + 1),a
      001327 90 00 00         [24] 4106 	mov	dptr,#0x0000
      00132A 12r00rA5         [24] 4107 	lcall	_setCursor
                                   4108 ;	edit.c:55: setTextSize(2);
      00132D 75 82 02         [24] 4109 	mov	dpl,#0x02
      001330 12r00rBF         [24] 4110 	lcall	_setTextSize
                                   4111 ;	edit.c:62: LCD_string_write("Enter address:\n");
      001333 90r06r5D         [24] 4112 	mov	dptr,#___str_24
      001336 75 F0 80         [24] 4113 	mov	b,#0x80
      001339 12r0Br7A         [24] 4114 	lcall	_LCD_string_write
                                   4115 ;	edit.c:63: add = getAddress();
      00133C 12r0Fr46         [24] 4116 	lcall	_getAddress
      00133F AE 82            [24] 4117 	mov	r6,dpl
      001341 AF 83            [24] 4118 	mov	r7,dph
                                   4119 ;	edit.c:64: write('\n');
      001343 75 82 0A         [24] 4120 	mov	dpl,#0x0a
      001346 C0 07            [24] 4121 	push	ar7
      001348 C0 06            [24] 4122 	push	ar6
      00134A 12r0Br0C         [24] 4123 	lcall	_write
      00134D D0 06            [24] 4124 	pop	ar6
      00134F D0 07            [24] 4125 	pop	ar7
                                   4126 ;	edit.c:67: editByte(add);
      001351 8E 82            [24] 4127 	mov	dpl,r6
      001353 8F 83            [24] 4128 	mov	dph,r7
      001355 C0 07            [24] 4129 	push	ar7
      001357 C0 06            [24] 4130 	push	ar6
      001359 12r12r71         [24] 4131 	lcall	_editByte
      00135C D0 06            [24] 4132 	pop	ar6
      00135E D0 07            [24] 4133 	pop	ar7
                                   4134 ;	edit.c:70: do {
      001360                       4135 00110$:
                                   4136 ;	edit.c:71: LCD_string_write("Press 1 for menu\n");
      001360 90r05rEA         [24] 4137 	mov	dptr,#___str_16
      001363 75 F0 80         [24] 4138 	mov	b,#0x80
      001366 C0 07            [24] 4139 	push	ar7
      001368 C0 06            [24] 4140 	push	ar6
      00136A 12r0Br7A         [24] 4141 	lcall	_LCD_string_write
                                   4142 ;	edit.c:72: LCD_string_write("Press 2 to edit again\n");
      00136D 90r06r6D         [24] 4143 	mov	dptr,#___str_25
      001370 75 F0 80         [24] 4144 	mov	b,#0x80
      001373 12r0Br7A         [24] 4145 	lcall	_LCD_string_write
                                   4146 ;	edit.c:73: LCD_string_write("Press 3 to edit next address\n");
      001376 90r06r84         [24] 4147 	mov	dptr,#___str_26
      001379 75 F0 80         [24] 4148 	mov	b,#0x80
      00137C 12r0Br7A         [24] 4149 	lcall	_LCD_string_write
                                   4150 ;	edit.c:74: input = keyDetect();
      00137F 12r0Cr0A         [24] 4151 	lcall	_keyDetect
      001382 AD 82            [24] 4152 	mov	r5,dpl
      001384 D0 06            [24] 4153 	pop	ar6
      001386 D0 07            [24] 4154 	pop	ar7
      001388 90r00r02         [24] 4155 	mov	dptr,#_edit_input_65537_250
      00138B ED               [12] 4156 	mov	a,r5
      00138C F0               [24] 4157 	movx	@dptr,a
                                   4158 ;	edit.c:76: if (input == '1') {
      00138D BD 31 01         [24] 4159 	cjne	r5,#0x31,00136$
      001390 22               [24] 4160 	ret
      001391                       4161 00136$:
                                   4162 ;	edit.c:78: } else if (input =='2') {
      001391 BD 32 27         [24] 4163 	cjne	r5,#0x32,00104$
                                   4164 ;	edit.c:79: editByte(add);
      001394 8E 82            [24] 4165 	mov	dpl,r6
      001396 8F 83            [24] 4166 	mov	dph,r7
      001398 C0 07            [24] 4167 	push	ar7
      00139A C0 06            [24] 4168 	push	ar6
      00139C 12r12r71         [24] 4169 	lcall	_editByte
                                   4170 ;	edit.c:81: fillScreen(GRAY);
      00139F 90 D6 BA         [24] 4171 	mov	dptr,#0xd6ba
      0013A2 12r07r9A         [24] 4172 	lcall	_fillScreen
                                   4173 ;	edit.c:82: setCursor(0, 0);
      0013A5 E4               [12] 4174 	clr	a
      0013A6 F5*00            [12] 4175 	mov	_setCursor_PARM_2,a
      0013A8 F5*01            [12] 4176 	mov	(_setCursor_PARM_2 + 1),a
      0013AA 90 00 00         [24] 4177 	mov	dptr,#0x0000
      0013AD 12r00rA5         [24] 4178 	lcall	_setCursor
      0013B0 D0 06            [24] 4179 	pop	ar6
      0013B2 D0 07            [24] 4180 	pop	ar7
                                   4181 ;	edit.c:84: input = 0;
      0013B4 90r00r02         [24] 4182 	mov	dptr,#_edit_input_65537_250
      0013B7 E4               [12] 4183 	clr	a
      0013B8 F0               [24] 4184 	movx	@dptr,a
      0013B9 80 2D            [24] 4185 	sjmp	00111$
      0013BB                       4186 00104$:
                                   4187 ;	edit.c:85: } else if (input == '3') {
      0013BB BD 33 2A         [24] 4188 	cjne	r5,#0x33,00111$
                                   4189 ;	edit.c:86: editByte(++add);
      0013BE 0E               [12] 4190 	inc	r6
      0013BF BE 00 01         [24] 4191 	cjne	r6,#0x00,00141$
      0013C2 0F               [12] 4192 	inc	r7
      0013C3                       4193 00141$:
      0013C3 8E 82            [24] 4194 	mov	dpl,r6
      0013C5 8F 83            [24] 4195 	mov	dph,r7
      0013C7 C0 07            [24] 4196 	push	ar7
      0013C9 C0 06            [24] 4197 	push	ar6
      0013CB 12r12r71         [24] 4198 	lcall	_editByte
                                   4199 ;	edit.c:88: fillScreen(GRAY);
      0013CE 90 D6 BA         [24] 4200 	mov	dptr,#0xd6ba
      0013D1 12r07r9A         [24] 4201 	lcall	_fillScreen
                                   4202 ;	edit.c:89: setCursor(0, 0);
      0013D4 E4               [12] 4203 	clr	a
      0013D5 F5*00            [12] 4204 	mov	_setCursor_PARM_2,a
      0013D7 F5*01            [12] 4205 	mov	(_setCursor_PARM_2 + 1),a
      0013D9 90 00 00         [24] 4206 	mov	dptr,#0x0000
      0013DC 12r00rA5         [24] 4207 	lcall	_setCursor
      0013DF D0 06            [24] 4208 	pop	ar6
      0013E1 D0 07            [24] 4209 	pop	ar7
                                   4210 ;	edit.c:91: input = 0;
      0013E3 90r00r02         [24] 4211 	mov	dptr,#_edit_input_65537_250
      0013E6 E4               [12] 4212 	clr	a
      0013E7 F0               [24] 4213 	movx	@dptr,a
      0013E8                       4214 00111$:
                                   4215 ;	edit.c:93: } while (input != '1' && input != '2');
      0013E8 90r00r02         [24] 4216 	mov	dptr,#_edit_input_65537_250
      0013EB E0               [24] 4217 	movx	a,@dptr
      0013EC FD               [12] 4218 	mov	r5,a
      0013ED BD 31 01         [24] 4219 	cjne	r5,#0x31,00142$
      0013F0 22               [24] 4220 	ret
      0013F1                       4221 00142$:
      0013F1 BD 32 01         [24] 4222 	cjne	r5,#0x32,00143$
      0013F4 22               [24] 4223 	ret
      0013F5                       4224 00143$:
      0013F5 02r13r60         [24] 4225 	ljmp	00110$
                                   4226 ;	edit.c:95: }
      0013F8 22               [24] 4227 	ret
                                   4228 ;------------------------------------------------------------
                                   4229 ;Allocation info for local variables in function 'count'
                                   4230 ;------------------------------------------------------------
                                   4231 ;add                       Allocated with name '_count_add_65537_256'
                                   4232 ;i                         Allocated with name '_count_i_65537_256'
                                   4233 ;size                      Allocated with name '_count_size_65537_256'
                                   4234 ;key                       Allocated with name '_count_key_65537_256'
                                   4235 ;count                     Allocated with name '_count_count_65537_256'
                                   4236 ;------------------------------------------------------------
                                   4237 ;	count.c:5: void count() {
                                   4238 ;	-----------------------------------------
                                   4239 ;	 function count
                                   4240 ;	-----------------------------------------
      0013F9                       4241 _count:
                                   4242 ;	count.c:7: fillScreen(GRAY);
      0013F9 90 D6 BA         [24] 4243 	mov	dptr,#0xd6ba
      0013FC 12r07r9A         [24] 4244 	lcall	_fillScreen
                                   4245 ;	count.c:8: setCursor(0, 0);
      0013FF E4               [12] 4246 	clr	a
      001400 F5*00            [12] 4247 	mov	_setCursor_PARM_2,a
      001402 F5*01            [12] 4248 	mov	(_setCursor_PARM_2 + 1),a
      001404 90 00 00         [24] 4249 	mov	dptr,#0x0000
      001407 12r00rA5         [24] 4250 	lcall	_setCursor
                                   4251 ;	count.c:9: setTextSize(2);
      00140A 75 82 02         [24] 4252 	mov	dpl,#0x02
      00140D 12r00rBF         [24] 4253 	lcall	_setTextSize
                                   4254 ;	count.c:19: LCD_string_write("Enter address:\n");
      001410 90r06r5D         [24] 4255 	mov	dptr,#___str_24
      001413 75 F0 80         [24] 4256 	mov	b,#0x80
      001416 12r0Br7A         [24] 4257 	lcall	_LCD_string_write
                                   4258 ;	count.c:20: add = getAddress();
      001419 12r0Fr46         [24] 4259 	lcall	_getAddress
                                   4260 ;	count.c:21: write('\n');
      00141C 75 82 0A         [24] 4261 	mov	dpl,#0x0a
      00141F 12r0Br0C         [24] 4262 	lcall	_write
                                   4263 ;	count.c:24: LCD_string_write("Enter block size:\n");
      001422 90r06rA2         [24] 4264 	mov	dptr,#___str_27
      001425 75 F0 80         [24] 4265 	mov	b,#0x80
      001428 12r0Br7A         [24] 4266 	lcall	_LCD_string_write
                                   4267 ;	count.c:25: size = getByte();
      00142B 12r0Fr91         [24] 4268 	lcall	_getByte
      00142E AF 82            [24] 4269 	mov	r7,dpl
                                   4270 ;	count.c:26: write('\n');
      001430 75 82 0A         [24] 4271 	mov	dpl,#0x0a
      001433 C0 07            [24] 4272 	push	ar7
      001435 12r0Br0C         [24] 4273 	lcall	_write
                                   4274 ;	count.c:29: LCD_string_write("Enter byte to count:\n");
      001438 90r06rB5         [24] 4275 	mov	dptr,#___str_28
      00143B 75 F0 80         [24] 4276 	mov	b,#0x80
      00143E 12r0Br7A         [24] 4277 	lcall	_LCD_string_write
                                   4278 ;	count.c:30: key = getByte();
      001441 12r0Fr91         [24] 4279 	lcall	_getByte
      001444 D0 07            [24] 4280 	pop	ar7
                                   4281 ;	count.c:33: for (i = 0; i < size; i++) {
      001446 7D 00            [12] 4282 	mov	r5,#0x00
      001448 7E 00            [12] 4283 	mov	r6,#0x00
      00144A                       4284 00103$:
      00144A 8F 03            [24] 4285 	mov	ar3,r7
      00144C 7C 00            [12] 4286 	mov	r4,#0x00
      00144E C3               [12] 4287 	clr	c
      00144F ED               [12] 4288 	mov	a,r5
      001450 9B               [12] 4289 	subb	a,r3
      001451 EE               [12] 4290 	mov	a,r6
      001452 9C               [12] 4291 	subb	a,r4
      001453 50 07            [24] 4292 	jnc	00105$
      001455 0D               [12] 4293 	inc	r5
      001456 BD 00 F1         [24] 4294 	cjne	r5,#0x00,00103$
      001459 0E               [12] 4295 	inc	r6
      00145A 80 EE            [24] 4296 	sjmp	00103$
      00145C                       4297 00105$:
                                   4298 ;	count.c:41: }
      00145C 22               [24] 4299 	ret
                                   4300 ;------------------------------------------------------------
                                   4301 ;Allocation info for local variables in function 'readTemp'
                                   4302 ;------------------------------------------------------------
                                   4303 ;val                       Allocated with name '_readTemp_val_65537_260'
                                   4304 ;------------------------------------------------------------
                                   4305 ;	analog.c:6: uint8_t readTemp() {
                                   4306 ;	-----------------------------------------
                                   4307 ;	 function readTemp
                                   4308 ;	-----------------------------------------
      00145D                       4309 _readTemp:
                                   4310 ;	analog.c:7: IOM = 1;
                                   4311 ;	assignBit
      00145D D2 B4            [12] 4312 	setb	_P3_4
                                   4313 ;	analog.c:9: val = *temp_address;
      00145F 85*06 82         [24] 4314 	mov	dpl,_temp_address
      001462 85*07 83         [24] 4315 	mov	dph,(_temp_address + 1)
      001465 E0               [24] 4316 	movx	a,@dptr
      001466 FF               [12] 4317 	mov	r7,a
                                   4318 ;	analog.c:10: IOM = 0;
                                   4319 ;	assignBit
      001467 C2 B4            [12] 4320 	clr	_P3_4
                                   4321 ;	analog.c:11: return val;
      001469 8F 82            [24] 4322 	mov	dpl,r7
                                   4323 ;	analog.c:12: }
      00146B 22               [24] 4324 	ret
                                   4325 ;------------------------------------------------------------
                                   4326 ;Allocation info for local variables in function 'readLight'
                                   4327 ;------------------------------------------------------------
                                   4328 ;val                       Allocated with name '_readLight_val_65537_262'
                                   4329 ;------------------------------------------------------------
                                   4330 ;	analog.c:19: uint8_t readLight() {
                                   4331 ;	-----------------------------------------
                                   4332 ;	 function readLight
                                   4333 ;	-----------------------------------------
      00146C                       4334 _readLight:
                                   4335 ;	analog.c:20: IOM = 1;
                                   4336 ;	assignBit
      00146C D2 B4            [12] 4337 	setb	_P3_4
                                   4338 ;	analog.c:22: val = *light_address;
      00146E 85*08 82         [24] 4339 	mov	dpl,_light_address
      001471 85*09 83         [24] 4340 	mov	dph,(_light_address + 1)
      001474 E0               [24] 4341 	movx	a,@dptr
      001475 FF               [12] 4342 	mov	r7,a
                                   4343 ;	analog.c:23: IOM = 0;
                                   4344 ;	assignBit
      001476 C2 B4            [12] 4345 	clr	_P3_4
                                   4346 ;	analog.c:24: return val;
      001478 8F 82            [24] 4347 	mov	dpl,r7
                                   4348 ;	analog.c:25: }
      00147A 22               [24] 4349 	ret
                                   4350 ;------------------------------------------------------------
                                   4351 ;Allocation info for local variables in function 'displayTemp'
                                   4352 ;------------------------------------------------------------
                                   4353 ;t                         Allocated to registers r7 
                                   4354 ;------------------------------------------------------------
                                   4355 ;	analog.c:32: void displayTemp(uint8_t t) {
                                   4356 ;	-----------------------------------------
                                   4357 ;	 function displayTemp
                                   4358 ;	-----------------------------------------
      00147B                       4359 _displayTemp:
      00147B AF 82            [24] 4360 	mov	r7,dpl
                                   4361 ;	analog.c:34: fillScreen(GRAY);
      00147D 90 D6 BA         [24] 4362 	mov	dptr,#0xd6ba
      001480 C0 07            [24] 4363 	push	ar7
      001482 12r07r9A         [24] 4364 	lcall	_fillScreen
                                   4365 ;	analog.c:35: setCursor(0, 0);
      001485 E4               [12] 4366 	clr	a
      001486 F5*00            [12] 4367 	mov	_setCursor_PARM_2,a
      001488 F5*01            [12] 4368 	mov	(_setCursor_PARM_2 + 1),a
      00148A 90 00 00         [24] 4369 	mov	dptr,#0x0000
      00148D 12r00rA5         [24] 4370 	lcall	_setCursor
                                   4371 ;	analog.c:36: setTextSize(2);
      001490 75 82 02         [24] 4372 	mov	dpl,#0x02
      001493 12r00rBF         [24] 4373 	lcall	_setTextSize
                                   4374 ;	analog.c:38: LCD_string_write("Temperature: ");
      001496 90r06rCB         [24] 4375 	mov	dptr,#___str_29
      001499 75 F0 80         [24] 4376 	mov	b,#0x80
      00149C 12r0Br7A         [24] 4377 	lcall	_LCD_string_write
      00149F D0 07            [24] 4378 	pop	ar7
                                   4379 ;	analog.c:40: asciiToHex(t);
      0014A1 8F 82            [24] 4380 	mov	dpl,r7
      0014A3 12r0DrCD         [24] 4381 	lcall	_asciiToHex
                                   4382 ;	analog.c:42: write('\n');
      0014A6 75 82 0A         [24] 4383 	mov	dpl,#0x0a
      0014A9 12r0Br0C         [24] 4384 	lcall	_write
                                   4385 ;	analog.c:43: LCD_string_write("Press 0 for menu\n");
      0014AC 90r06rD9         [24] 4386 	mov	dptr,#___str_30
      0014AF 75 F0 80         [24] 4387 	mov	b,#0x80
                                   4388 ;	analog.c:44: }
      0014B2 02r0Br7A         [24] 4389 	ljmp	_LCD_string_write
                                   4390 ;------------------------------------------------------------
                                   4391 ;Allocation info for local variables in function 'displayLight'
                                   4392 ;------------------------------------------------------------
                                   4393 ;l                         Allocated to registers r7 
                                   4394 ;------------------------------------------------------------
                                   4395 ;	analog.c:51: void displayLight(uint8_t l) {
                                   4396 ;	-----------------------------------------
                                   4397 ;	 function displayLight
                                   4398 ;	-----------------------------------------
      0014B5                       4399 _displayLight:
      0014B5 AF 82            [24] 4400 	mov	r7,dpl
                                   4401 ;	analog.c:53: fillScreen(GRAY);
      0014B7 90 D6 BA         [24] 4402 	mov	dptr,#0xd6ba
      0014BA C0 07            [24] 4403 	push	ar7
      0014BC 12r07r9A         [24] 4404 	lcall	_fillScreen
                                   4405 ;	analog.c:54: setCursor(0, 0);
      0014BF E4               [12] 4406 	clr	a
      0014C0 F5*00            [12] 4407 	mov	_setCursor_PARM_2,a
      0014C2 F5*01            [12] 4408 	mov	(_setCursor_PARM_2 + 1),a
      0014C4 90 00 00         [24] 4409 	mov	dptr,#0x0000
      0014C7 12r00rA5         [24] 4410 	lcall	_setCursor
                                   4411 ;	analog.c:55: setTextSize(2);
      0014CA 75 82 02         [24] 4412 	mov	dpl,#0x02
      0014CD 12r00rBF         [24] 4413 	lcall	_setTextSize
                                   4414 ;	analog.c:57: LCD_string_write("Light level: ");
      0014D0 90r06rEB         [24] 4415 	mov	dptr,#___str_31
      0014D3 75 F0 80         [24] 4416 	mov	b,#0x80
      0014D6 12r0Br7A         [24] 4417 	lcall	_LCD_string_write
      0014D9 D0 07            [24] 4418 	pop	ar7
                                   4419 ;	analog.c:59: asciiToHex(l);
      0014DB 8F 82            [24] 4420 	mov	dpl,r7
      0014DD 12r0DrCD         [24] 4421 	lcall	_asciiToHex
                                   4422 ;	analog.c:61: write('\n');
      0014E0 75 82 0A         [24] 4423 	mov	dpl,#0x0a
      0014E3 12r0Br0C         [24] 4424 	lcall	_write
                                   4425 ;	analog.c:62: LCD_string_write("Press 0 for menu\n");
      0014E6 90r06rD9         [24] 4426 	mov	dptr,#___str_30
      0014E9 75 F0 80         [24] 4427 	mov	b,#0x80
                                   4428 ;	analog.c:63: }
      0014EC 02r0Br7A         [24] 4429 	ljmp	_LCD_string_write
                                   4430 ;------------------------------------------------------------
                                   4431 ;Allocation info for local variables in function 'temperature'
                                   4432 ;------------------------------------------------------------
                                   4433 ;temp                      Allocated with name '_temperature_temp_65537_268'
                                   4434 ;input                     Allocated with name '_temperature_input_65537_268'
                                   4435 ;------------------------------------------------------------
                                   4436 ;	analog.c:70: void temperature() {
                                   4437 ;	-----------------------------------------
                                   4438 ;	 function temperature
                                   4439 ;	-----------------------------------------
      0014EF                       4440 _temperature:
                                   4441 ;	analog.c:72: fillScreen(GRAY);
      0014EF 90 D6 BA         [24] 4442 	mov	dptr,#0xd6ba
      0014F2 12r07r9A         [24] 4443 	lcall	_fillScreen
                                   4444 ;	analog.c:73: setCursor(0, 0);
      0014F5 E4               [12] 4445 	clr	a
      0014F6 F5*00            [12] 4446 	mov	_setCursor_PARM_2,a
      0014F8 F5*01            [12] 4447 	mov	(_setCursor_PARM_2 + 1),a
      0014FA 90 00 00         [24] 4448 	mov	dptr,#0x0000
      0014FD 12r00rA5         [24] 4449 	lcall	_setCursor
                                   4450 ;	analog.c:74: setTextSize(2);
      001500 75 82 02         [24] 4451 	mov	dpl,#0x02
      001503 12r00rBF         [24] 4452 	lcall	_setTextSize
                                   4453 ;	analog.c:76: LCD_string_write("Temperature: ");
      001506 90r06rCB         [24] 4454 	mov	dptr,#___str_29
      001509 75 F0 80         [24] 4455 	mov	b,#0x80
      00150C 12r0Br7A         [24] 4456 	lcall	_LCD_string_write
                                   4457 ;	analog.c:82: temp = readTemp();
      00150F 12r14r5D         [24] 4458 	lcall	_readTemp
                                   4459 ;	analog.c:85: asciiToHex(temp);
      001512 12r0DrCD         [24] 4460 	lcall	_asciiToHex
                                   4461 ;	analog.c:88: write('\n');
      001515 75 82 0A         [24] 4462 	mov	dpl,#0x0a
      001518 12r0Br0C         [24] 4463 	lcall	_write
                                   4464 ;	analog.c:89: LCD_string_write("Press 0 for menu\n");
      00151B 90r06rD9         [24] 4465 	mov	dptr,#___str_30
      00151E 75 F0 80         [24] 4466 	mov	b,#0x80
      001521 12r0Br7A         [24] 4467 	lcall	_LCD_string_write
                                   4468 ;	analog.c:93: while (1) {
      001524                       4469 00104$:
                                   4470 ;	analog.c:94: input = keyDetect();
      001524 12r0Cr0A         [24] 4471 	lcall	_keyDetect
      001527 AF 82            [24] 4472 	mov	r7,dpl
                                   4473 ;	analog.c:96: if (input == '0') break;
      001529 BF 30 01         [24] 4474 	cjne	r7,#0x30,00116$
      00152C 22               [24] 4475 	ret
      00152D                       4476 00116$:
                                   4477 ;	analog.c:98: delay(500);
      00152D 90 01 F4         [24] 4478 	mov	dptr,#0x01f4
      001530 12r00r10         [24] 4479 	lcall	_delay
                                   4480 ;	analog.c:99: temp = readTemp();
      001533 12r14r5D         [24] 4481 	lcall	_readTemp
                                   4482 ;	analog.c:100: displayTemp(temp);
      001536 12r14r7B         [24] 4483 	lcall	_displayTemp
                                   4484 ;	analog.c:102: }
      001539 80 E9            [24] 4485 	sjmp	00104$
                                   4486 ;------------------------------------------------------------
                                   4487 ;Allocation info for local variables in function 'light'
                                   4488 ;------------------------------------------------------------
                                   4489 ;light                     Allocated with name '_light_light_65537_271'
                                   4490 ;input                     Allocated with name '_light_input_65537_271'
                                   4491 ;------------------------------------------------------------
                                   4492 ;	analog.c:109: void light() {
                                   4493 ;	-----------------------------------------
                                   4494 ;	 function light
                                   4495 ;	-----------------------------------------
      00153B                       4496 _light:
                                   4497 ;	analog.c:111: fillScreen(GRAY);
      00153B 90 D6 BA         [24] 4498 	mov	dptr,#0xd6ba
      00153E 12r07r9A         [24] 4499 	lcall	_fillScreen
                                   4500 ;	analog.c:112: setCursor(0, 0);
      001541 E4               [12] 4501 	clr	a
      001542 F5*00            [12] 4502 	mov	_setCursor_PARM_2,a
      001544 F5*01            [12] 4503 	mov	(_setCursor_PARM_2 + 1),a
      001546 90 00 00         [24] 4504 	mov	dptr,#0x0000
      001549 12r00rA5         [24] 4505 	lcall	_setCursor
                                   4506 ;	analog.c:113: setTextSize(2);
      00154C 75 82 02         [24] 4507 	mov	dpl,#0x02
      00154F 12r00rBF         [24] 4508 	lcall	_setTextSize
                                   4509 ;	analog.c:115: LCD_string_write("Light level: ");
      001552 90r06rEB         [24] 4510 	mov	dptr,#___str_31
      001555 75 F0 80         [24] 4511 	mov	b,#0x80
      001558 12r0Br7A         [24] 4512 	lcall	_LCD_string_write
                                   4513 ;	analog.c:121: light = readLight();
      00155B 12r14r6C         [24] 4514 	lcall	_readLight
                                   4515 ;	analog.c:124: asciiToHex(light);
      00155E 12r0DrCD         [24] 4516 	lcall	_asciiToHex
                                   4517 ;	analog.c:127: write('\n');
      001561 75 82 0A         [24] 4518 	mov	dpl,#0x0a
      001564 12r0Br0C         [24] 4519 	lcall	_write
                                   4520 ;	analog.c:128: LCD_string_write("Press 0 for menu\n");
      001567 90r06rD9         [24] 4521 	mov	dptr,#___str_30
      00156A 75 F0 80         [24] 4522 	mov	b,#0x80
      00156D 12r0Br7A         [24] 4523 	lcall	_LCD_string_write
                                   4524 ;	analog.c:131: while (1) {
      001570                       4525 00104$:
                                   4526 ;	analog.c:132: input = keyDetect();
      001570 12r0Cr0A         [24] 4527 	lcall	_keyDetect
      001573 AF 82            [24] 4528 	mov	r7,dpl
                                   4529 ;	analog.c:134: if (input == '0') break;
      001575 BF 30 01         [24] 4530 	cjne	r7,#0x30,00116$
      001578 22               [24] 4531 	ret
      001579                       4532 00116$:
                                   4533 ;	analog.c:136: delay(500);
      001579 90 01 F4         [24] 4534 	mov	dptr,#0x01f4
      00157C 12r00r10         [24] 4535 	lcall	_delay
                                   4536 ;	analog.c:137: light = readLight();
      00157F 12r14r6C         [24] 4537 	lcall	_readLight
                                   4538 ;	analog.c:138: displayLight(light);
      001582 12r14rB5         [24] 4539 	lcall	_displayLight
                                   4540 ;	analog.c:140: }
      001585 80 E9            [24] 4541 	sjmp	00104$
                                   4542 ;------------------------------------------------------------
                                   4543 ;Allocation info for local variables in function 'menu'
                                   4544 ;------------------------------------------------------------
                                   4545 ;	main.c:29: void menu(void) {
                                   4546 ;	-----------------------------------------
                                   4547 ;	 function menu
                                   4548 ;	-----------------------------------------
      001587                       4549 _menu:
                                   4550 ;	main.c:31: setRotation(2);
      001587 75 82 02         [24] 4551 	mov	dpl,#0x02
      00158A 12r00rD7         [24] 4552 	lcall	_setRotation
                                   4553 ;	main.c:32: setTextSize(3);
      00158D 75 82 03         [24] 4554 	mov	dpl,#0x03
      001590 12r00rBF         [24] 4555 	lcall	_setTextSize
                                   4556 ;	main.c:33: fillScreen(GRAY);
      001593 90 D6 BA         [24] 4557 	mov	dptr,#0xd6ba
      001596 12r07r9A         [24] 4558 	lcall	_fillScreen
                                   4559 ;	main.c:34: setTextColor(BLACK, GRAY);
      001599 75*00 BA         [24] 4560 	mov	_setTextColor_PARM_2,#0xba
      00159C 75*01 D6         [24] 4561 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      00159F 90 00 00         [24] 4562 	mov	dptr,#0x0000
      0015A2 12r00rB2         [24] 4563 	lcall	_setTextColor
                                   4564 ;	main.c:35: setCursor(0, 0);
      0015A5 E4               [12] 4565 	clr	a
      0015A6 F5*00            [12] 4566 	mov	_setCursor_PARM_2,a
      0015A8 F5*01            [12] 4567 	mov	(_setCursor_PARM_2 + 1),a
      0015AA 90 00 00         [24] 4568 	mov	dptr,#0x0000
      0015AD 12r00rA5         [24] 4569 	lcall	_setCursor
                                   4570 ;	main.c:38: LCD_string_write("Brandon Cline\n");
      0015B0 90r06rF9         [24] 4571 	mov	dptr,#___str_32
      0015B3 75 F0 80         [24] 4572 	mov	b,#0x80
      0015B6 12r0Br7A         [24] 4573 	lcall	_LCD_string_write
                                   4574 ;	main.c:39: LCD_string_write("ECEN 4330\n");
      0015B9 90r07r08         [24] 4575 	mov	dptr,#___str_33
      0015BC 75 F0 80         [24] 4576 	mov	b,#0x80
      0015BF 12r0Br7A         [24] 4577 	lcall	_LCD_string_write
                                   4578 ;	main.c:43: LCD_string_write("1: Basic check\n");
      0015C2 90r07r13         [24] 4579 	mov	dptr,#___str_34
      0015C5 75 F0 80         [24] 4580 	mov	b,#0x80
      0015C8 12r0Br7A         [24] 4581 	lcall	_LCD_string_write
                                   4582 ;	main.c:45: LCD_string_write("2: Dump\n");
      0015CB 90r07r23         [24] 4583 	mov	dptr,#___str_35
      0015CE 75 F0 80         [24] 4584 	mov	b,#0x80
      0015D1 12r0Br7A         [24] 4585 	lcall	_LCD_string_write
                                   4586 ;	main.c:47: LCD_string_write("3: Check\n");
      0015D4 90r07r2C         [24] 4587 	mov	dptr,#___str_36
      0015D7 75 F0 80         [24] 4588 	mov	b,#0x80
      0015DA 12r0Br7A         [24] 4589 	lcall	_LCD_string_write
                                   4590 ;	main.c:49: LCD_string_write("A: Move\n");
      0015DD 90r07r36         [24] 4591 	mov	dptr,#___str_37
      0015E0 75 F0 80         [24] 4592 	mov	b,#0x80
      0015E3 12r0Br7A         [24] 4593 	lcall	_LCD_string_write
                                   4594 ;	main.c:51: LCD_string_write("4: Edit\n");
      0015E6 90r07r3F         [24] 4595 	mov	dptr,#___str_38
      0015E9 75 F0 80         [24] 4596 	mov	b,#0x80
      0015EC 12r0Br7A         [24] 4597 	lcall	_LCD_string_write
                                   4598 ;	main.c:53: LCD_string_write("5: Find\n");
      0015EF 90r07r48         [24] 4599 	mov	dptr,#___str_39
      0015F2 75 F0 80         [24] 4600 	mov	b,#0x80
      0015F5 12r0Br7A         [24] 4601 	lcall	_LCD_string_write
                                   4602 ;	main.c:55: LCD_string_write("6: Count\n");
      0015F8 90r07r51         [24] 4603 	mov	dptr,#___str_40
      0015FB 75 F0 80         [24] 4604 	mov	b,#0x80
      0015FE 12r0Br7A         [24] 4605 	lcall	_LCD_string_write
                                   4606 ;	main.c:58: LCD_string_write("B: Temperature\n");
      001601 90r07r5B         [24] 4607 	mov	dptr,#___str_41
      001604 75 F0 80         [24] 4608 	mov	b,#0x80
      001607 12r0Br7A         [24] 4609 	lcall	_LCD_string_write
                                   4610 ;	main.c:60: LCD_string_write("7: Light\n");
      00160A 90r07r6B         [24] 4611 	mov	dptr,#___str_42
      00160D 75 F0 80         [24] 4612 	mov	b,#0x80
                                   4613 ;	main.c:61: }
      001610 02r0Br7A         [24] 4614 	ljmp	_LCD_string_write
                                   4615 ;------------------------------------------------------------
                                   4616 ;Allocation info for local variables in function 'main'
                                   4617 ;------------------------------------------------------------
                                   4618 ;input                     Allocated with name '_main_input_65536_276'
                                   4619 ;------------------------------------------------------------
                                   4620 ;	main.c:63: void main(void) {
                                   4621 ;	-----------------------------------------
                                   4622 ;	 function main
                                   4623 ;	-----------------------------------------
      001613                       4624 _main:
                                   4625 ;	main.c:68: iowrite8(seg7_address, 0x00);
      001613 75*00 00         [24] 4626 	mov	_iowrite8_PARM_2,#0x00
      001616 85*04 82         [24] 4627 	mov	dpl,_seg7_address
      001619 85*05 83         [24] 4628 	mov	dph,(_seg7_address + 1)
      00161C 12r00r00         [24] 4629 	lcall	_iowrite8
                                   4630 ;	main.c:71: TFT_LCD_INIT();
      00161F 12r01rDD         [24] 4631 	lcall	_TFT_LCD_INIT
                                   4632 ;	main.c:73: fillScreen(BLACK);
      001622 90 00 00         [24] 4633 	mov	dptr,#0x0000
      001625 12r07r9A         [24] 4634 	lcall	_fillScreen
                                   4635 ;	main.c:74: setRotation(0);
      001628 75 82 00         [24] 4636 	mov	dpl,#0x00
      00162B 12r00rD7         [24] 4637 	lcall	_setRotation
                                   4638 ;	main.c:75: testCircles(20, BLUE);
      00162E 75*32 1F         [24] 4639 	mov	_testCircles_PARM_2,#0x1f
      001631 75*33 00         [24] 4640 	mov	(_testCircles_PARM_2 + 1),#0x00
      001634 75 82 14         [24] 4641 	mov	dpl,#0x14
      001637 12r06r28         [24] 4642 	lcall	_testCircles
                                   4643 ;	main.c:79: while (1) {
      00163A                       4644 00111$:
                                   4645 ;	main.c:81: menu();
      00163A 12r15r87         [24] 4646 	lcall	_menu
                                   4647 ;	main.c:84: input = keyDetect();
      00163D 12r0Cr0A         [24] 4648 	lcall	_keyDetect
                                   4649 ;	main.c:85: asciiToHex(input);
      001640 AF 82            [24] 4650 	mov  r7,dpl
      001642 C0 07            [24] 4651 	push	ar7
      001644 12r0DrCD         [24] 4652 	lcall	_asciiToHex
      001647 D0 07            [24] 4653 	pop	ar7
                                   4654 ;	main.c:88: switch(input) {
      001649 BF 31 02         [24] 4655 	cjne	r7,#0x31,00147$
      00164C 80 1E            [24] 4656 	sjmp	00101$
      00164E                       4657 00147$:
      00164E BF 33 02         [24] 4658 	cjne	r7,#0x33,00148$
      001651 80 1E            [24] 4659 	sjmp	00102$
      001653                       4660 00148$:
      001653 BF 34 02         [24] 4661 	cjne	r7,#0x34,00149$
      001656 80 23            [24] 4662 	sjmp	00104$
      001658                       4663 00149$:
      001658 BF 36 02         [24] 4664 	cjne	r7,#0x36,00150$
      00165B 80 23            [24] 4665 	sjmp	00105$
      00165D                       4666 00150$:
      00165D BF 37 02         [24] 4667 	cjne	r7,#0x37,00151$
      001660 80 28            [24] 4668 	sjmp	00107$
      001662                       4669 00151$:
      001662 BF 41 02         [24] 4670 	cjne	r7,#0x41,00152$
      001665 80 0F            [24] 4671 	sjmp	00103$
      001667                       4672 00152$:
                                   4673 ;	main.c:89: case '1': basic(); break;
      001667 BF 42 D0         [24] 4674 	cjne	r7,#0x42,00111$
      00166A 80 19            [24] 4675 	sjmp	00106$
      00166C                       4676 00101$:
      00166C 12r11r04         [24] 4677 	lcall	_basic
                                   4678 ;	main.c:91: case '3': check(); break;
      00166F 80 C9            [24] 4679 	sjmp	00111$
      001671                       4680 00102$:
      001671 12r0FrC8         [24] 4681 	lcall	_check
                                   4682 ;	main.c:92: case 'A': move(); break;
      001674 80 C4            [24] 4683 	sjmp	00111$
      001676                       4684 00103$:
      001676 12r11r9A         [24] 4685 	lcall	_move
                                   4686 ;	main.c:93: case '4': edit(); break;
      001679 80 BF            [24] 4687 	sjmp	00111$
      00167B                       4688 00104$:
      00167B 12r13r1C         [24] 4689 	lcall	_edit
                                   4690 ;	main.c:95: case '6': count(); break;
      00167E 80 BA            [24] 4691 	sjmp	00111$
      001680                       4692 00105$:
      001680 12r13rF9         [24] 4693 	lcall	_count
                                   4694 ;	main.c:96: case 'B': temperature(); break;
      001683 80 B5            [24] 4695 	sjmp	00111$
      001685                       4696 00106$:
      001685 12r14rEF         [24] 4697 	lcall	_temperature
                                   4698 ;	main.c:97: case '7': light(); break;
      001688 80 B0            [24] 4699 	sjmp	00111$
      00168A                       4700 00107$:
      00168A 12r15r3B         [24] 4701 	lcall	_light
                                   4702 ;	main.c:99: }
                                   4703 ;	main.c:101: }
      00168D 80 AB            [24] 4704 	sjmp	00111$
                                   4705 	.area CSEG    (CODE)
                                   4706 	.area CONST   (CODE)
      000000                       4707 _font:
      000000 00                    4708 	.db #0x00	; 0
      000001 00                    4709 	.db #0x00	; 0
      000002 00                    4710 	.db #0x00	; 0
      000003 00                    4711 	.db #0x00	; 0
      000004 00                    4712 	.db #0x00	; 0
      000005 3E                    4713 	.db #0x3e	; 62
      000006 5B                    4714 	.db #0x5b	; 91
      000007 4F                    4715 	.db #0x4f	; 79	'O'
      000008 5B                    4716 	.db #0x5b	; 91
      000009 3E                    4717 	.db #0x3e	; 62
      00000A 3E                    4718 	.db #0x3e	; 62
      00000B 6B                    4719 	.db #0x6b	; 107	'k'
      00000C 4F                    4720 	.db #0x4f	; 79	'O'
      00000D 6B                    4721 	.db #0x6b	; 107	'k'
      00000E 3E                    4722 	.db #0x3e	; 62
      00000F 1C                    4723 	.db #0x1c	; 28
      000010 3E                    4724 	.db #0x3e	; 62
      000011 7C                    4725 	.db #0x7c	; 124
      000012 3E                    4726 	.db #0x3e	; 62
      000013 1C                    4727 	.db #0x1c	; 28
      000014 18                    4728 	.db #0x18	; 24
      000015 3C                    4729 	.db #0x3c	; 60
      000016 7E                    4730 	.db #0x7e	; 126
      000017 3C                    4731 	.db #0x3c	; 60
      000018 18                    4732 	.db #0x18	; 24
      000019 1C                    4733 	.db #0x1c	; 28
      00001A 57                    4734 	.db #0x57	; 87	'W'
      00001B 7D                    4735 	.db #0x7d	; 125
      00001C 57                    4736 	.db #0x57	; 87	'W'
      00001D 1C                    4737 	.db #0x1c	; 28
      00001E 1C                    4738 	.db #0x1c	; 28
      00001F 5E                    4739 	.db #0x5e	; 94
      000020 7F                    4740 	.db #0x7f	; 127
      000021 5E                    4741 	.db #0x5e	; 94
      000022 1C                    4742 	.db #0x1c	; 28
      000023 00                    4743 	.db #0x00	; 0
      000024 18                    4744 	.db #0x18	; 24
      000025 3C                    4745 	.db #0x3c	; 60
      000026 18                    4746 	.db #0x18	; 24
      000027 00                    4747 	.db #0x00	; 0
      000028 FF                    4748 	.db #0xff	; 255
      000029 E7                    4749 	.db #0xe7	; 231
      00002A C3                    4750 	.db #0xc3	; 195
      00002B E7                    4751 	.db #0xe7	; 231
      00002C FF                    4752 	.db #0xff	; 255
      00002D 00                    4753 	.db #0x00	; 0
      00002E 18                    4754 	.db #0x18	; 24
      00002F 24                    4755 	.db #0x24	; 36
      000030 18                    4756 	.db #0x18	; 24
      000031 00                    4757 	.db #0x00	; 0
      000032 FF                    4758 	.db #0xff	; 255
      000033 E7                    4759 	.db #0xe7	; 231
      000034 DB                    4760 	.db #0xdb	; 219
      000035 E7                    4761 	.db #0xe7	; 231
      000036 FF                    4762 	.db #0xff	; 255
      000037 30                    4763 	.db #0x30	; 48	'0'
      000038 48                    4764 	.db #0x48	; 72	'H'
      000039 3A                    4765 	.db #0x3a	; 58
      00003A 06                    4766 	.db #0x06	; 6
      00003B 0E                    4767 	.db #0x0e	; 14
      00003C 26                    4768 	.db #0x26	; 38
      00003D 29                    4769 	.db #0x29	; 41
      00003E 79                    4770 	.db #0x79	; 121	'y'
      00003F 29                    4771 	.db #0x29	; 41
      000040 26                    4772 	.db #0x26	; 38
      000041 40                    4773 	.db #0x40	; 64
      000042 7F                    4774 	.db #0x7f	; 127
      000043 05                    4775 	.db #0x05	; 5
      000044 05                    4776 	.db #0x05	; 5
      000045 07                    4777 	.db #0x07	; 7
      000046 40                    4778 	.db #0x40	; 64
      000047 7F                    4779 	.db #0x7f	; 127
      000048 05                    4780 	.db #0x05	; 5
      000049 25                    4781 	.db #0x25	; 37
      00004A 3F                    4782 	.db #0x3f	; 63
      00004B 5A                    4783 	.db #0x5a	; 90	'Z'
      00004C 3C                    4784 	.db #0x3c	; 60
      00004D E7                    4785 	.db #0xe7	; 231
      00004E 3C                    4786 	.db #0x3c	; 60
      00004F 5A                    4787 	.db #0x5a	; 90	'Z'
      000050 7F                    4788 	.db #0x7f	; 127
      000051 3E                    4789 	.db #0x3e	; 62
      000052 1C                    4790 	.db #0x1c	; 28
      000053 1C                    4791 	.db #0x1c	; 28
      000054 08                    4792 	.db #0x08	; 8
      000055 08                    4793 	.db #0x08	; 8
      000056 1C                    4794 	.db #0x1c	; 28
      000057 1C                    4795 	.db #0x1c	; 28
      000058 3E                    4796 	.db #0x3e	; 62
      000059 7F                    4797 	.db #0x7f	; 127
      00005A 14                    4798 	.db #0x14	; 20
      00005B 22                    4799 	.db #0x22	; 34
      00005C 7F                    4800 	.db #0x7f	; 127
      00005D 22                    4801 	.db #0x22	; 34
      00005E 14                    4802 	.db #0x14	; 20
      00005F 5F                    4803 	.db #0x5f	; 95
      000060 5F                    4804 	.db #0x5f	; 95
      000061 00                    4805 	.db #0x00	; 0
      000062 5F                    4806 	.db #0x5f	; 95
      000063 5F                    4807 	.db #0x5f	; 95
      000064 06                    4808 	.db #0x06	; 6
      000065 09                    4809 	.db #0x09	; 9
      000066 7F                    4810 	.db #0x7f	; 127
      000067 01                    4811 	.db #0x01	; 1
      000068 7F                    4812 	.db #0x7f	; 127
      000069 00                    4813 	.db #0x00	; 0
      00006A 66                    4814 	.db #0x66	; 102	'f'
      00006B 89                    4815 	.db #0x89	; 137
      00006C 95                    4816 	.db #0x95	; 149
      00006D 6A                    4817 	.db #0x6a	; 106	'j'
      00006E 60                    4818 	.db #0x60	; 96
      00006F 60                    4819 	.db #0x60	; 96
      000070 60                    4820 	.db #0x60	; 96
      000071 60                    4821 	.db #0x60	; 96
      000072 60                    4822 	.db #0x60	; 96
      000073 94                    4823 	.db #0x94	; 148
      000074 A2                    4824 	.db #0xa2	; 162
      000075 FF                    4825 	.db #0xff	; 255
      000076 A2                    4826 	.db #0xa2	; 162
      000077 94                    4827 	.db #0x94	; 148
      000078 08                    4828 	.db #0x08	; 8
      000079 04                    4829 	.db #0x04	; 4
      00007A 7E                    4830 	.db #0x7e	; 126
      00007B 04                    4831 	.db #0x04	; 4
      00007C 08                    4832 	.db #0x08	; 8
      00007D 10                    4833 	.db #0x10	; 16
      00007E 20                    4834 	.db #0x20	; 32
      00007F 7E                    4835 	.db #0x7e	; 126
      000080 20                    4836 	.db #0x20	; 32
      000081 10                    4837 	.db #0x10	; 16
      000082 08                    4838 	.db #0x08	; 8
      000083 08                    4839 	.db #0x08	; 8
      000084 2A                    4840 	.db #0x2a	; 42
      000085 1C                    4841 	.db #0x1c	; 28
      000086 08                    4842 	.db #0x08	; 8
      000087 08                    4843 	.db #0x08	; 8
      000088 1C                    4844 	.db #0x1c	; 28
      000089 2A                    4845 	.db #0x2a	; 42
      00008A 08                    4846 	.db #0x08	; 8
      00008B 08                    4847 	.db #0x08	; 8
      00008C 1E                    4848 	.db #0x1e	; 30
      00008D 10                    4849 	.db #0x10	; 16
      00008E 10                    4850 	.db #0x10	; 16
      00008F 10                    4851 	.db #0x10	; 16
      000090 10                    4852 	.db #0x10	; 16
      000091 0C                    4853 	.db #0x0c	; 12
      000092 1E                    4854 	.db #0x1e	; 30
      000093 0C                    4855 	.db #0x0c	; 12
      000094 1E                    4856 	.db #0x1e	; 30
      000095 0C                    4857 	.db #0x0c	; 12
      000096 30                    4858 	.db #0x30	; 48	'0'
      000097 38                    4859 	.db #0x38	; 56	'8'
      000098 3E                    4860 	.db #0x3e	; 62
      000099 38                    4861 	.db #0x38	; 56	'8'
      00009A 30                    4862 	.db #0x30	; 48	'0'
      00009B 06                    4863 	.db #0x06	; 6
      00009C 0E                    4864 	.db #0x0e	; 14
      00009D 3E                    4865 	.db #0x3e	; 62
      00009E 0E                    4866 	.db #0x0e	; 14
      00009F 06                    4867 	.db #0x06	; 6
      0000A0 00                    4868 	.db #0x00	; 0
      0000A1 00                    4869 	.db #0x00	; 0
      0000A2 00                    4870 	.db #0x00	; 0
      0000A3 00                    4871 	.db #0x00	; 0
      0000A4 00                    4872 	.db #0x00	; 0
      0000A5 00                    4873 	.db #0x00	; 0
      0000A6 00                    4874 	.db #0x00	; 0
      0000A7 5F                    4875 	.db #0x5f	; 95
      0000A8 00                    4876 	.db #0x00	; 0
      0000A9 00                    4877 	.db #0x00	; 0
      0000AA 00                    4878 	.db #0x00	; 0
      0000AB 07                    4879 	.db #0x07	; 7
      0000AC 00                    4880 	.db #0x00	; 0
      0000AD 07                    4881 	.db #0x07	; 7
      0000AE 00                    4882 	.db #0x00	; 0
      0000AF 14                    4883 	.db #0x14	; 20
      0000B0 7F                    4884 	.db #0x7f	; 127
      0000B1 14                    4885 	.db #0x14	; 20
      0000B2 7F                    4886 	.db #0x7f	; 127
      0000B3 14                    4887 	.db #0x14	; 20
      0000B4 24                    4888 	.db #0x24	; 36
      0000B5 2A                    4889 	.db #0x2a	; 42
      0000B6 7F                    4890 	.db #0x7f	; 127
      0000B7 2A                    4891 	.db #0x2a	; 42
      0000B8 12                    4892 	.db #0x12	; 18
      0000B9 23                    4893 	.db #0x23	; 35
      0000BA 13                    4894 	.db #0x13	; 19
      0000BB 08                    4895 	.db #0x08	; 8
      0000BC 64                    4896 	.db #0x64	; 100	'd'
      0000BD 62                    4897 	.db #0x62	; 98	'b'
      0000BE 36                    4898 	.db #0x36	; 54	'6'
      0000BF 49                    4899 	.db #0x49	; 73	'I'
      0000C0 56                    4900 	.db #0x56	; 86	'V'
      0000C1 20                    4901 	.db #0x20	; 32
      0000C2 50                    4902 	.db #0x50	; 80	'P'
      0000C3 00                    4903 	.db #0x00	; 0
      0000C4 08                    4904 	.db #0x08	; 8
      0000C5 07                    4905 	.db #0x07	; 7
      0000C6 03                    4906 	.db #0x03	; 3
      0000C7 00                    4907 	.db #0x00	; 0
      0000C8 00                    4908 	.db #0x00	; 0
      0000C9 1C                    4909 	.db #0x1c	; 28
      0000CA 22                    4910 	.db #0x22	; 34
      0000CB 41                    4911 	.db #0x41	; 65	'A'
      0000CC 00                    4912 	.db #0x00	; 0
      0000CD 00                    4913 	.db #0x00	; 0
      0000CE 41                    4914 	.db #0x41	; 65	'A'
      0000CF 22                    4915 	.db #0x22	; 34
      0000D0 1C                    4916 	.db #0x1c	; 28
      0000D1 00                    4917 	.db #0x00	; 0
      0000D2 2A                    4918 	.db #0x2a	; 42
      0000D3 1C                    4919 	.db #0x1c	; 28
      0000D4 7F                    4920 	.db #0x7f	; 127
      0000D5 1C                    4921 	.db #0x1c	; 28
      0000D6 2A                    4922 	.db #0x2a	; 42
      0000D7 08                    4923 	.db #0x08	; 8
      0000D8 08                    4924 	.db #0x08	; 8
      0000D9 3E                    4925 	.db #0x3e	; 62
      0000DA 08                    4926 	.db #0x08	; 8
      0000DB 08                    4927 	.db #0x08	; 8
      0000DC 00                    4928 	.db #0x00	; 0
      0000DD 80                    4929 	.db #0x80	; 128
      0000DE 70                    4930 	.db #0x70	; 112	'p'
      0000DF 30                    4931 	.db #0x30	; 48	'0'
      0000E0 00                    4932 	.db #0x00	; 0
      0000E1 08                    4933 	.db #0x08	; 8
      0000E2 08                    4934 	.db #0x08	; 8
      0000E3 08                    4935 	.db #0x08	; 8
      0000E4 08                    4936 	.db #0x08	; 8
      0000E5 08                    4937 	.db #0x08	; 8
      0000E6 00                    4938 	.db #0x00	; 0
      0000E7 00                    4939 	.db #0x00	; 0
      0000E8 60                    4940 	.db #0x60	; 96
      0000E9 60                    4941 	.db #0x60	; 96
      0000EA 00                    4942 	.db #0x00	; 0
      0000EB 20                    4943 	.db #0x20	; 32
      0000EC 10                    4944 	.db #0x10	; 16
      0000ED 08                    4945 	.db #0x08	; 8
      0000EE 04                    4946 	.db #0x04	; 4
      0000EF 02                    4947 	.db #0x02	; 2
      0000F0 3E                    4948 	.db #0x3e	; 62
      0000F1 51                    4949 	.db #0x51	; 81	'Q'
      0000F2 49                    4950 	.db #0x49	; 73	'I'
      0000F3 45                    4951 	.db #0x45	; 69	'E'
      0000F4 3E                    4952 	.db #0x3e	; 62
      0000F5 00                    4953 	.db #0x00	; 0
      0000F6 42                    4954 	.db #0x42	; 66	'B'
      0000F7 7F                    4955 	.db #0x7f	; 127
      0000F8 40                    4956 	.db #0x40	; 64
      0000F9 00                    4957 	.db #0x00	; 0
      0000FA 72                    4958 	.db #0x72	; 114	'r'
      0000FB 49                    4959 	.db #0x49	; 73	'I'
      0000FC 49                    4960 	.db #0x49	; 73	'I'
      0000FD 49                    4961 	.db #0x49	; 73	'I'
      0000FE 46                    4962 	.db #0x46	; 70	'F'
      0000FF 21                    4963 	.db #0x21	; 33
      000100 41                    4964 	.db #0x41	; 65	'A'
      000101 49                    4965 	.db #0x49	; 73	'I'
      000102 4D                    4966 	.db #0x4d	; 77	'M'
      000103 33                    4967 	.db #0x33	; 51	'3'
      000104 18                    4968 	.db #0x18	; 24
      000105 14                    4969 	.db #0x14	; 20
      000106 12                    4970 	.db #0x12	; 18
      000107 7F                    4971 	.db #0x7f	; 127
      000108 10                    4972 	.db #0x10	; 16
      000109 27                    4973 	.db #0x27	; 39
      00010A 45                    4974 	.db #0x45	; 69	'E'
      00010B 45                    4975 	.db #0x45	; 69	'E'
      00010C 45                    4976 	.db #0x45	; 69	'E'
      00010D 39                    4977 	.db #0x39	; 57	'9'
      00010E 3C                    4978 	.db #0x3c	; 60
      00010F 4A                    4979 	.db #0x4a	; 74	'J'
      000110 49                    4980 	.db #0x49	; 73	'I'
      000111 49                    4981 	.db #0x49	; 73	'I'
      000112 31                    4982 	.db #0x31	; 49	'1'
      000113 41                    4983 	.db #0x41	; 65	'A'
      000114 21                    4984 	.db #0x21	; 33
      000115 11                    4985 	.db #0x11	; 17
      000116 09                    4986 	.db #0x09	; 9
      000117 07                    4987 	.db #0x07	; 7
      000118 36                    4988 	.db #0x36	; 54	'6'
      000119 49                    4989 	.db #0x49	; 73	'I'
      00011A 49                    4990 	.db #0x49	; 73	'I'
      00011B 49                    4991 	.db #0x49	; 73	'I'
      00011C 36                    4992 	.db #0x36	; 54	'6'
      00011D 46                    4993 	.db #0x46	; 70	'F'
      00011E 49                    4994 	.db #0x49	; 73	'I'
      00011F 49                    4995 	.db #0x49	; 73	'I'
      000120 29                    4996 	.db #0x29	; 41
      000121 1E                    4997 	.db #0x1e	; 30
      000122 00                    4998 	.db #0x00	; 0
      000123 00                    4999 	.db #0x00	; 0
      000124 14                    5000 	.db #0x14	; 20
      000125 00                    5001 	.db #0x00	; 0
      000126 00                    5002 	.db #0x00	; 0
      000127 00                    5003 	.db #0x00	; 0
      000128 40                    5004 	.db #0x40	; 64
      000129 34                    5005 	.db #0x34	; 52	'4'
      00012A 00                    5006 	.db #0x00	; 0
      00012B 00                    5007 	.db #0x00	; 0
      00012C 00                    5008 	.db #0x00	; 0
      00012D 08                    5009 	.db #0x08	; 8
      00012E 14                    5010 	.db #0x14	; 20
      00012F 22                    5011 	.db #0x22	; 34
      000130 41                    5012 	.db #0x41	; 65	'A'
      000131 14                    5013 	.db #0x14	; 20
      000132 14                    5014 	.db #0x14	; 20
      000133 14                    5015 	.db #0x14	; 20
      000134 14                    5016 	.db #0x14	; 20
      000135 14                    5017 	.db #0x14	; 20
      000136 00                    5018 	.db #0x00	; 0
      000137 41                    5019 	.db #0x41	; 65	'A'
      000138 22                    5020 	.db #0x22	; 34
      000139 14                    5021 	.db #0x14	; 20
      00013A 08                    5022 	.db #0x08	; 8
      00013B 02                    5023 	.db #0x02	; 2
      00013C 01                    5024 	.db #0x01	; 1
      00013D 59                    5025 	.db #0x59	; 89	'Y'
      00013E 09                    5026 	.db #0x09	; 9
      00013F 06                    5027 	.db #0x06	; 6
      000140 3E                    5028 	.db #0x3e	; 62
      000141 41                    5029 	.db #0x41	; 65	'A'
      000142 5D                    5030 	.db #0x5d	; 93
      000143 59                    5031 	.db #0x59	; 89	'Y'
      000144 4E                    5032 	.db #0x4e	; 78	'N'
      000145 7C                    5033 	.db #0x7c	; 124
      000146 12                    5034 	.db #0x12	; 18
      000147 11                    5035 	.db #0x11	; 17
      000148 12                    5036 	.db #0x12	; 18
      000149 7C                    5037 	.db #0x7c	; 124
      00014A 7F                    5038 	.db #0x7f	; 127
      00014B 49                    5039 	.db #0x49	; 73	'I'
      00014C 49                    5040 	.db #0x49	; 73	'I'
      00014D 49                    5041 	.db #0x49	; 73	'I'
      00014E 36                    5042 	.db #0x36	; 54	'6'
      00014F 3E                    5043 	.db #0x3e	; 62
      000150 41                    5044 	.db #0x41	; 65	'A'
      000151 41                    5045 	.db #0x41	; 65	'A'
      000152 41                    5046 	.db #0x41	; 65	'A'
      000153 22                    5047 	.db #0x22	; 34
      000154 7F                    5048 	.db #0x7f	; 127
      000155 41                    5049 	.db #0x41	; 65	'A'
      000156 41                    5050 	.db #0x41	; 65	'A'
      000157 41                    5051 	.db #0x41	; 65	'A'
      000158 3E                    5052 	.db #0x3e	; 62
      000159 7F                    5053 	.db #0x7f	; 127
      00015A 49                    5054 	.db #0x49	; 73	'I'
      00015B 49                    5055 	.db #0x49	; 73	'I'
      00015C 49                    5056 	.db #0x49	; 73	'I'
      00015D 41                    5057 	.db #0x41	; 65	'A'
      00015E 7F                    5058 	.db #0x7f	; 127
      00015F 09                    5059 	.db #0x09	; 9
      000160 09                    5060 	.db #0x09	; 9
      000161 09                    5061 	.db #0x09	; 9
      000162 01                    5062 	.db #0x01	; 1
      000163 3E                    5063 	.db #0x3e	; 62
      000164 41                    5064 	.db #0x41	; 65	'A'
      000165 41                    5065 	.db #0x41	; 65	'A'
      000166 51                    5066 	.db #0x51	; 81	'Q'
      000167 73                    5067 	.db #0x73	; 115	's'
      000168 7F                    5068 	.db #0x7f	; 127
      000169 08                    5069 	.db #0x08	; 8
      00016A 08                    5070 	.db #0x08	; 8
      00016B 08                    5071 	.db #0x08	; 8
      00016C 7F                    5072 	.db #0x7f	; 127
      00016D 00                    5073 	.db #0x00	; 0
      00016E 41                    5074 	.db #0x41	; 65	'A'
      00016F 7F                    5075 	.db #0x7f	; 127
      000170 41                    5076 	.db #0x41	; 65	'A'
      000171 00                    5077 	.db #0x00	; 0
      000172 20                    5078 	.db #0x20	; 32
      000173 40                    5079 	.db #0x40	; 64
      000174 41                    5080 	.db #0x41	; 65	'A'
      000175 3F                    5081 	.db #0x3f	; 63
      000176 01                    5082 	.db #0x01	; 1
      000177 7F                    5083 	.db #0x7f	; 127
      000178 08                    5084 	.db #0x08	; 8
      000179 14                    5085 	.db #0x14	; 20
      00017A 22                    5086 	.db #0x22	; 34
      00017B 41                    5087 	.db #0x41	; 65	'A'
      00017C 7F                    5088 	.db #0x7f	; 127
      00017D 40                    5089 	.db #0x40	; 64
      00017E 40                    5090 	.db #0x40	; 64
      00017F 40                    5091 	.db #0x40	; 64
      000180 40                    5092 	.db #0x40	; 64
      000181 7F                    5093 	.db #0x7f	; 127
      000182 02                    5094 	.db #0x02	; 2
      000183 1C                    5095 	.db #0x1c	; 28
      000184 02                    5096 	.db #0x02	; 2
      000185 7F                    5097 	.db #0x7f	; 127
      000186 7F                    5098 	.db #0x7f	; 127
      000187 04                    5099 	.db #0x04	; 4
      000188 08                    5100 	.db #0x08	; 8
      000189 10                    5101 	.db #0x10	; 16
      00018A 7F                    5102 	.db #0x7f	; 127
      00018B 3E                    5103 	.db #0x3e	; 62
      00018C 41                    5104 	.db #0x41	; 65	'A'
      00018D 41                    5105 	.db #0x41	; 65	'A'
      00018E 41                    5106 	.db #0x41	; 65	'A'
      00018F 3E                    5107 	.db #0x3e	; 62
      000190 7F                    5108 	.db #0x7f	; 127
      000191 09                    5109 	.db #0x09	; 9
      000192 09                    5110 	.db #0x09	; 9
      000193 09                    5111 	.db #0x09	; 9
      000194 06                    5112 	.db #0x06	; 6
      000195 3E                    5113 	.db #0x3e	; 62
      000196 41                    5114 	.db #0x41	; 65	'A'
      000197 51                    5115 	.db #0x51	; 81	'Q'
      000198 21                    5116 	.db #0x21	; 33
      000199 5E                    5117 	.db #0x5e	; 94
      00019A 7F                    5118 	.db #0x7f	; 127
      00019B 09                    5119 	.db #0x09	; 9
      00019C 19                    5120 	.db #0x19	; 25
      00019D 29                    5121 	.db #0x29	; 41
      00019E 46                    5122 	.db #0x46	; 70	'F'
      00019F 26                    5123 	.db #0x26	; 38
      0001A0 49                    5124 	.db #0x49	; 73	'I'
      0001A1 49                    5125 	.db #0x49	; 73	'I'
      0001A2 49                    5126 	.db #0x49	; 73	'I'
      0001A3 32                    5127 	.db #0x32	; 50	'2'
      0001A4 03                    5128 	.db #0x03	; 3
      0001A5 01                    5129 	.db #0x01	; 1
      0001A6 7F                    5130 	.db #0x7f	; 127
      0001A7 01                    5131 	.db #0x01	; 1
      0001A8 03                    5132 	.db #0x03	; 3
      0001A9 3F                    5133 	.db #0x3f	; 63
      0001AA 40                    5134 	.db #0x40	; 64
      0001AB 40                    5135 	.db #0x40	; 64
      0001AC 40                    5136 	.db #0x40	; 64
      0001AD 3F                    5137 	.db #0x3f	; 63
      0001AE 1F                    5138 	.db #0x1f	; 31
      0001AF 20                    5139 	.db #0x20	; 32
      0001B0 40                    5140 	.db #0x40	; 64
      0001B1 20                    5141 	.db #0x20	; 32
      0001B2 1F                    5142 	.db #0x1f	; 31
      0001B3 3F                    5143 	.db #0x3f	; 63
      0001B4 40                    5144 	.db #0x40	; 64
      0001B5 38                    5145 	.db #0x38	; 56	'8'
      0001B6 40                    5146 	.db #0x40	; 64
      0001B7 3F                    5147 	.db #0x3f	; 63
      0001B8 63                    5148 	.db #0x63	; 99	'c'
      0001B9 14                    5149 	.db #0x14	; 20
      0001BA 08                    5150 	.db #0x08	; 8
      0001BB 14                    5151 	.db #0x14	; 20
      0001BC 63                    5152 	.db #0x63	; 99	'c'
      0001BD 03                    5153 	.db #0x03	; 3
      0001BE 04                    5154 	.db #0x04	; 4
      0001BF 78                    5155 	.db #0x78	; 120	'x'
      0001C0 04                    5156 	.db #0x04	; 4
      0001C1 03                    5157 	.db #0x03	; 3
      0001C2 61                    5158 	.db #0x61	; 97	'a'
      0001C3 59                    5159 	.db #0x59	; 89	'Y'
      0001C4 49                    5160 	.db #0x49	; 73	'I'
      0001C5 4D                    5161 	.db #0x4d	; 77	'M'
      0001C6 43                    5162 	.db #0x43	; 67	'C'
      0001C7 00                    5163 	.db #0x00	; 0
      0001C8 7F                    5164 	.db #0x7f	; 127
      0001C9 41                    5165 	.db #0x41	; 65	'A'
      0001CA 41                    5166 	.db #0x41	; 65	'A'
      0001CB 41                    5167 	.db #0x41	; 65	'A'
      0001CC 02                    5168 	.db #0x02	; 2
      0001CD 04                    5169 	.db #0x04	; 4
      0001CE 08                    5170 	.db #0x08	; 8
      0001CF 10                    5171 	.db #0x10	; 16
      0001D0 20                    5172 	.db #0x20	; 32
      0001D1 00                    5173 	.db #0x00	; 0
      0001D2 41                    5174 	.db #0x41	; 65	'A'
      0001D3 41                    5175 	.db #0x41	; 65	'A'
      0001D4 41                    5176 	.db #0x41	; 65	'A'
      0001D5 7F                    5177 	.db #0x7f	; 127
      0001D6 04                    5178 	.db #0x04	; 4
      0001D7 02                    5179 	.db #0x02	; 2
      0001D8 01                    5180 	.db #0x01	; 1
      0001D9 02                    5181 	.db #0x02	; 2
      0001DA 04                    5182 	.db #0x04	; 4
      0001DB 40                    5183 	.db #0x40	; 64
      0001DC 40                    5184 	.db #0x40	; 64
      0001DD 40                    5185 	.db #0x40	; 64
      0001DE 40                    5186 	.db #0x40	; 64
      0001DF 40                    5187 	.db #0x40	; 64
      0001E0 00                    5188 	.db #0x00	; 0
      0001E1 03                    5189 	.db #0x03	; 3
      0001E2 07                    5190 	.db #0x07	; 7
      0001E3 08                    5191 	.db #0x08	; 8
      0001E4 00                    5192 	.db #0x00	; 0
      0001E5 20                    5193 	.db #0x20	; 32
      0001E6 54                    5194 	.db #0x54	; 84	'T'
      0001E7 54                    5195 	.db #0x54	; 84	'T'
      0001E8 78                    5196 	.db #0x78	; 120	'x'
      0001E9 40                    5197 	.db #0x40	; 64
      0001EA 7F                    5198 	.db #0x7f	; 127
      0001EB 28                    5199 	.db #0x28	; 40
      0001EC 44                    5200 	.db #0x44	; 68	'D'
      0001ED 44                    5201 	.db #0x44	; 68	'D'
      0001EE 38                    5202 	.db #0x38	; 56	'8'
      0001EF 38                    5203 	.db #0x38	; 56	'8'
      0001F0 44                    5204 	.db #0x44	; 68	'D'
      0001F1 44                    5205 	.db #0x44	; 68	'D'
      0001F2 44                    5206 	.db #0x44	; 68	'D'
      0001F3 28                    5207 	.db #0x28	; 40
      0001F4 38                    5208 	.db #0x38	; 56	'8'
      0001F5 44                    5209 	.db #0x44	; 68	'D'
      0001F6 44                    5210 	.db #0x44	; 68	'D'
      0001F7 28                    5211 	.db #0x28	; 40
      0001F8 7F                    5212 	.db #0x7f	; 127
      0001F9 38                    5213 	.db #0x38	; 56	'8'
      0001FA 54                    5214 	.db #0x54	; 84	'T'
      0001FB 54                    5215 	.db #0x54	; 84	'T'
      0001FC 54                    5216 	.db #0x54	; 84	'T'
      0001FD 18                    5217 	.db #0x18	; 24
      0001FE 00                    5218 	.db #0x00	; 0
      0001FF 08                    5219 	.db #0x08	; 8
      000200 7E                    5220 	.db #0x7e	; 126
      000201 09                    5221 	.db #0x09	; 9
      000202 02                    5222 	.db #0x02	; 2
      000203 18                    5223 	.db #0x18	; 24
      000204 A4                    5224 	.db #0xa4	; 164
      000205 A4                    5225 	.db #0xa4	; 164
      000206 9C                    5226 	.db #0x9c	; 156
      000207 78                    5227 	.db #0x78	; 120	'x'
      000208 7F                    5228 	.db #0x7f	; 127
      000209 08                    5229 	.db #0x08	; 8
      00020A 04                    5230 	.db #0x04	; 4
      00020B 04                    5231 	.db #0x04	; 4
      00020C 78                    5232 	.db #0x78	; 120	'x'
      00020D 00                    5233 	.db #0x00	; 0
      00020E 44                    5234 	.db #0x44	; 68	'D'
      00020F 7D                    5235 	.db #0x7d	; 125
      000210 40                    5236 	.db #0x40	; 64
      000211 00                    5237 	.db #0x00	; 0
      000212 20                    5238 	.db #0x20	; 32
      000213 40                    5239 	.db #0x40	; 64
      000214 40                    5240 	.db #0x40	; 64
      000215 3D                    5241 	.db #0x3d	; 61
      000216 00                    5242 	.db #0x00	; 0
      000217 7F                    5243 	.db #0x7f	; 127
      000218 10                    5244 	.db #0x10	; 16
      000219 28                    5245 	.db #0x28	; 40
      00021A 44                    5246 	.db #0x44	; 68	'D'
      00021B 00                    5247 	.db #0x00	; 0
      00021C 00                    5248 	.db #0x00	; 0
      00021D 41                    5249 	.db #0x41	; 65	'A'
      00021E 7F                    5250 	.db #0x7f	; 127
      00021F 40                    5251 	.db #0x40	; 64
      000220 00                    5252 	.db #0x00	; 0
      000221 7C                    5253 	.db #0x7c	; 124
      000222 04                    5254 	.db #0x04	; 4
      000223 78                    5255 	.db #0x78	; 120	'x'
      000224 04                    5256 	.db #0x04	; 4
      000225 78                    5257 	.db #0x78	; 120	'x'
      000226 7C                    5258 	.db #0x7c	; 124
      000227 08                    5259 	.db #0x08	; 8
      000228 04                    5260 	.db #0x04	; 4
      000229 04                    5261 	.db #0x04	; 4
      00022A 78                    5262 	.db #0x78	; 120	'x'
      00022B 38                    5263 	.db #0x38	; 56	'8'
      00022C 44                    5264 	.db #0x44	; 68	'D'
      00022D 44                    5265 	.db #0x44	; 68	'D'
      00022E 44                    5266 	.db #0x44	; 68	'D'
      00022F 38                    5267 	.db #0x38	; 56	'8'
      000230 FC                    5268 	.db #0xfc	; 252
      000231 18                    5269 	.db #0x18	; 24
      000232 24                    5270 	.db #0x24	; 36
      000233 24                    5271 	.db #0x24	; 36
      000234 18                    5272 	.db #0x18	; 24
      000235 18                    5273 	.db #0x18	; 24
      000236 24                    5274 	.db #0x24	; 36
      000237 24                    5275 	.db #0x24	; 36
      000238 18                    5276 	.db #0x18	; 24
      000239 FC                    5277 	.db #0xfc	; 252
      00023A 7C                    5278 	.db #0x7c	; 124
      00023B 08                    5279 	.db #0x08	; 8
      00023C 04                    5280 	.db #0x04	; 4
      00023D 04                    5281 	.db #0x04	; 4
      00023E 08                    5282 	.db #0x08	; 8
      00023F 48                    5283 	.db #0x48	; 72	'H'
      000240 54                    5284 	.db #0x54	; 84	'T'
      000241 54                    5285 	.db #0x54	; 84	'T'
      000242 54                    5286 	.db #0x54	; 84	'T'
      000243 24                    5287 	.db #0x24	; 36
      000244 04                    5288 	.db #0x04	; 4
      000245 04                    5289 	.db #0x04	; 4
      000246 3F                    5290 	.db #0x3f	; 63
      000247 44                    5291 	.db #0x44	; 68	'D'
      000248 24                    5292 	.db #0x24	; 36
      000249 3C                    5293 	.db #0x3c	; 60
      00024A 40                    5294 	.db #0x40	; 64
      00024B 40                    5295 	.db #0x40	; 64
      00024C 20                    5296 	.db #0x20	; 32
      00024D 7C                    5297 	.db #0x7c	; 124
      00024E 1C                    5298 	.db #0x1c	; 28
      00024F 20                    5299 	.db #0x20	; 32
      000250 40                    5300 	.db #0x40	; 64
      000251 20                    5301 	.db #0x20	; 32
      000252 1C                    5302 	.db #0x1c	; 28
      000253 3C                    5303 	.db #0x3c	; 60
      000254 40                    5304 	.db #0x40	; 64
      000255 30                    5305 	.db #0x30	; 48	'0'
      000256 40                    5306 	.db #0x40	; 64
      000257 3C                    5307 	.db #0x3c	; 60
      000258 44                    5308 	.db #0x44	; 68	'D'
      000259 28                    5309 	.db #0x28	; 40
      00025A 10                    5310 	.db #0x10	; 16
      00025B 28                    5311 	.db #0x28	; 40
      00025C 44                    5312 	.db #0x44	; 68	'D'
      00025D 4C                    5313 	.db #0x4c	; 76	'L'
      00025E 90                    5314 	.db #0x90	; 144
      00025F 90                    5315 	.db #0x90	; 144
      000260 90                    5316 	.db #0x90	; 144
      000261 7C                    5317 	.db #0x7c	; 124
      000262 44                    5318 	.db #0x44	; 68	'D'
      000263 64                    5319 	.db #0x64	; 100	'd'
      000264 54                    5320 	.db #0x54	; 84	'T'
      000265 4C                    5321 	.db #0x4c	; 76	'L'
      000266 44                    5322 	.db #0x44	; 68	'D'
      000267 00                    5323 	.db #0x00	; 0
      000268 08                    5324 	.db #0x08	; 8
      000269 36                    5325 	.db #0x36	; 54	'6'
      00026A 41                    5326 	.db #0x41	; 65	'A'
      00026B 00                    5327 	.db #0x00	; 0
      00026C 00                    5328 	.db #0x00	; 0
      00026D 00                    5329 	.db #0x00	; 0
      00026E 77                    5330 	.db #0x77	; 119	'w'
      00026F 00                    5331 	.db #0x00	; 0
      000270 00                    5332 	.db #0x00	; 0
      000271 00                    5333 	.db #0x00	; 0
      000272 41                    5334 	.db #0x41	; 65	'A'
      000273 36                    5335 	.db #0x36	; 54	'6'
      000274 08                    5336 	.db #0x08	; 8
      000275 00                    5337 	.db #0x00	; 0
      000276 02                    5338 	.db #0x02	; 2
      000277 01                    5339 	.db #0x01	; 1
      000278 02                    5340 	.db #0x02	; 2
      000279 04                    5341 	.db #0x04	; 4
      00027A 02                    5342 	.db #0x02	; 2
      00027B 3C                    5343 	.db #0x3c	; 60
      00027C 26                    5344 	.db #0x26	; 38
      00027D 23                    5345 	.db #0x23	; 35
      00027E 26                    5346 	.db #0x26	; 38
      00027F 3C                    5347 	.db #0x3c	; 60
      000280 1E                    5348 	.db #0x1e	; 30
      000281 A1                    5349 	.db #0xa1	; 161
      000282 A1                    5350 	.db #0xa1	; 161
      000283 61                    5351 	.db #0x61	; 97	'a'
      000284 12                    5352 	.db #0x12	; 18
      000285 3A                    5353 	.db #0x3a	; 58
      000286 40                    5354 	.db #0x40	; 64
      000287 40                    5355 	.db #0x40	; 64
      000288 20                    5356 	.db #0x20	; 32
      000289 7A                    5357 	.db #0x7a	; 122	'z'
      00028A 38                    5358 	.db #0x38	; 56	'8'
      00028B 54                    5359 	.db #0x54	; 84	'T'
      00028C 54                    5360 	.db #0x54	; 84	'T'
      00028D 55                    5361 	.db #0x55	; 85	'U'
      00028E 59                    5362 	.db #0x59	; 89	'Y'
      00028F 21                    5363 	.db #0x21	; 33
      000290 55                    5364 	.db #0x55	; 85	'U'
      000291 55                    5365 	.db #0x55	; 85	'U'
      000292 79                    5366 	.db #0x79	; 121	'y'
      000293 41                    5367 	.db #0x41	; 65	'A'
      000294 22                    5368 	.db #0x22	; 34
      000295 54                    5369 	.db #0x54	; 84	'T'
      000296 54                    5370 	.db #0x54	; 84	'T'
      000297 78                    5371 	.db #0x78	; 120	'x'
      000298 42                    5372 	.db #0x42	; 66	'B'
      000299 21                    5373 	.db #0x21	; 33
      00029A 55                    5374 	.db #0x55	; 85	'U'
      00029B 54                    5375 	.db #0x54	; 84	'T'
      00029C 78                    5376 	.db #0x78	; 120	'x'
      00029D 40                    5377 	.db #0x40	; 64
      00029E 20                    5378 	.db #0x20	; 32
      00029F 54                    5379 	.db #0x54	; 84	'T'
      0002A0 55                    5380 	.db #0x55	; 85	'U'
      0002A1 79                    5381 	.db #0x79	; 121	'y'
      0002A2 40                    5382 	.db #0x40	; 64
      0002A3 0C                    5383 	.db #0x0c	; 12
      0002A4 1E                    5384 	.db #0x1e	; 30
      0002A5 52                    5385 	.db #0x52	; 82	'R'
      0002A6 72                    5386 	.db #0x72	; 114	'r'
      0002A7 12                    5387 	.db #0x12	; 18
      0002A8 39                    5388 	.db #0x39	; 57	'9'
      0002A9 55                    5389 	.db #0x55	; 85	'U'
      0002AA 55                    5390 	.db #0x55	; 85	'U'
      0002AB 55                    5391 	.db #0x55	; 85	'U'
      0002AC 59                    5392 	.db #0x59	; 89	'Y'
      0002AD 39                    5393 	.db #0x39	; 57	'9'
      0002AE 54                    5394 	.db #0x54	; 84	'T'
      0002AF 54                    5395 	.db #0x54	; 84	'T'
      0002B0 54                    5396 	.db #0x54	; 84	'T'
      0002B1 59                    5397 	.db #0x59	; 89	'Y'
      0002B2 39                    5398 	.db #0x39	; 57	'9'
      0002B3 55                    5399 	.db #0x55	; 85	'U'
      0002B4 54                    5400 	.db #0x54	; 84	'T'
      0002B5 54                    5401 	.db #0x54	; 84	'T'
      0002B6 58                    5402 	.db #0x58	; 88	'X'
      0002B7 00                    5403 	.db #0x00	; 0
      0002B8 00                    5404 	.db #0x00	; 0
      0002B9 45                    5405 	.db #0x45	; 69	'E'
      0002BA 7C                    5406 	.db #0x7c	; 124
      0002BB 41                    5407 	.db #0x41	; 65	'A'
      0002BC 00                    5408 	.db #0x00	; 0
      0002BD 02                    5409 	.db #0x02	; 2
      0002BE 45                    5410 	.db #0x45	; 69	'E'
      0002BF 7D                    5411 	.db #0x7d	; 125
      0002C0 42                    5412 	.db #0x42	; 66	'B'
      0002C1 00                    5413 	.db #0x00	; 0
      0002C2 01                    5414 	.db #0x01	; 1
      0002C3 45                    5415 	.db #0x45	; 69	'E'
      0002C4 7C                    5416 	.db #0x7c	; 124
      0002C5 40                    5417 	.db #0x40	; 64
      0002C6 7D                    5418 	.db #0x7d	; 125
      0002C7 12                    5419 	.db #0x12	; 18
      0002C8 11                    5420 	.db #0x11	; 17
      0002C9 12                    5421 	.db #0x12	; 18
      0002CA 7D                    5422 	.db #0x7d	; 125
      0002CB F0                    5423 	.db #0xf0	; 240
      0002CC 28                    5424 	.db #0x28	; 40
      0002CD 25                    5425 	.db #0x25	; 37
      0002CE 28                    5426 	.db #0x28	; 40
      0002CF F0                    5427 	.db #0xf0	; 240
      0002D0 7C                    5428 	.db #0x7c	; 124
      0002D1 54                    5429 	.db #0x54	; 84	'T'
      0002D2 55                    5430 	.db #0x55	; 85	'U'
      0002D3 45                    5431 	.db #0x45	; 69	'E'
      0002D4 00                    5432 	.db #0x00	; 0
      0002D5 20                    5433 	.db #0x20	; 32
      0002D6 54                    5434 	.db #0x54	; 84	'T'
      0002D7 54                    5435 	.db #0x54	; 84	'T'
      0002D8 7C                    5436 	.db #0x7c	; 124
      0002D9 54                    5437 	.db #0x54	; 84	'T'
      0002DA 7C                    5438 	.db #0x7c	; 124
      0002DB 0A                    5439 	.db #0x0a	; 10
      0002DC 09                    5440 	.db #0x09	; 9
      0002DD 7F                    5441 	.db #0x7f	; 127
      0002DE 49                    5442 	.db #0x49	; 73	'I'
      0002DF 32                    5443 	.db #0x32	; 50	'2'
      0002E0 49                    5444 	.db #0x49	; 73	'I'
      0002E1 49                    5445 	.db #0x49	; 73	'I'
      0002E2 49                    5446 	.db #0x49	; 73	'I'
      0002E3 32                    5447 	.db #0x32	; 50	'2'
      0002E4 3A                    5448 	.db #0x3a	; 58
      0002E5 44                    5449 	.db #0x44	; 68	'D'
      0002E6 44                    5450 	.db #0x44	; 68	'D'
      0002E7 44                    5451 	.db #0x44	; 68	'D'
      0002E8 3A                    5452 	.db #0x3a	; 58
      0002E9 32                    5453 	.db #0x32	; 50	'2'
      0002EA 4A                    5454 	.db #0x4a	; 74	'J'
      0002EB 48                    5455 	.db #0x48	; 72	'H'
      0002EC 48                    5456 	.db #0x48	; 72	'H'
      0002ED 30                    5457 	.db #0x30	; 48	'0'
      0002EE 3A                    5458 	.db #0x3a	; 58
      0002EF 41                    5459 	.db #0x41	; 65	'A'
      0002F0 41                    5460 	.db #0x41	; 65	'A'
      0002F1 21                    5461 	.db #0x21	; 33
      0002F2 7A                    5462 	.db #0x7a	; 122	'z'
      0002F3 3A                    5463 	.db #0x3a	; 58
      0002F4 42                    5464 	.db #0x42	; 66	'B'
      0002F5 40                    5465 	.db #0x40	; 64
      0002F6 20                    5466 	.db #0x20	; 32
      0002F7 78                    5467 	.db #0x78	; 120	'x'
      0002F8 00                    5468 	.db #0x00	; 0
      0002F9 9D                    5469 	.db #0x9d	; 157
      0002FA A0                    5470 	.db #0xa0	; 160
      0002FB A0                    5471 	.db #0xa0	; 160
      0002FC 7D                    5472 	.db #0x7d	; 125
      0002FD 3D                    5473 	.db #0x3d	; 61
      0002FE 42                    5474 	.db #0x42	; 66	'B'
      0002FF 42                    5475 	.db #0x42	; 66	'B'
      000300 42                    5476 	.db #0x42	; 66	'B'
      000301 3D                    5477 	.db #0x3d	; 61
      000302 3D                    5478 	.db #0x3d	; 61
      000303 40                    5479 	.db #0x40	; 64
      000304 40                    5480 	.db #0x40	; 64
      000305 40                    5481 	.db #0x40	; 64
      000306 3D                    5482 	.db #0x3d	; 61
      000307 3C                    5483 	.db #0x3c	; 60
      000308 24                    5484 	.db #0x24	; 36
      000309 FF                    5485 	.db #0xff	; 255
      00030A 24                    5486 	.db #0x24	; 36
      00030B 24                    5487 	.db #0x24	; 36
      00030C 48                    5488 	.db #0x48	; 72	'H'
      00030D 7E                    5489 	.db #0x7e	; 126
      00030E 49                    5490 	.db #0x49	; 73	'I'
      00030F 43                    5491 	.db #0x43	; 67	'C'
      000310 66                    5492 	.db #0x66	; 102	'f'
      000311 2B                    5493 	.db #0x2b	; 43
      000312 2F                    5494 	.db #0x2f	; 47
      000313 FC                    5495 	.db #0xfc	; 252
      000314 2F                    5496 	.db #0x2f	; 47
      000315 2B                    5497 	.db #0x2b	; 43
      000316 FF                    5498 	.db #0xff	; 255
      000317 09                    5499 	.db #0x09	; 9
      000318 29                    5500 	.db #0x29	; 41
      000319 F6                    5501 	.db #0xf6	; 246
      00031A 20                    5502 	.db #0x20	; 32
      00031B C0                    5503 	.db #0xc0	; 192
      00031C 88                    5504 	.db #0x88	; 136
      00031D 7E                    5505 	.db #0x7e	; 126
      00031E 09                    5506 	.db #0x09	; 9
      00031F 03                    5507 	.db #0x03	; 3
      000320 20                    5508 	.db #0x20	; 32
      000321 54                    5509 	.db #0x54	; 84	'T'
      000322 54                    5510 	.db #0x54	; 84	'T'
      000323 79                    5511 	.db #0x79	; 121	'y'
      000324 41                    5512 	.db #0x41	; 65	'A'
      000325 00                    5513 	.db #0x00	; 0
      000326 00                    5514 	.db #0x00	; 0
      000327 44                    5515 	.db #0x44	; 68	'D'
      000328 7D                    5516 	.db #0x7d	; 125
      000329 41                    5517 	.db #0x41	; 65	'A'
      00032A 30                    5518 	.db #0x30	; 48	'0'
      00032B 48                    5519 	.db #0x48	; 72	'H'
      00032C 48                    5520 	.db #0x48	; 72	'H'
      00032D 4A                    5521 	.db #0x4a	; 74	'J'
      00032E 32                    5522 	.db #0x32	; 50	'2'
      00032F 38                    5523 	.db #0x38	; 56	'8'
      000330 40                    5524 	.db #0x40	; 64
      000331 40                    5525 	.db #0x40	; 64
      000332 22                    5526 	.db #0x22	; 34
      000333 7A                    5527 	.db #0x7a	; 122	'z'
      000334 00                    5528 	.db #0x00	; 0
      000335 7A                    5529 	.db #0x7a	; 122	'z'
      000336 0A                    5530 	.db #0x0a	; 10
      000337 0A                    5531 	.db #0x0a	; 10
      000338 72                    5532 	.db #0x72	; 114	'r'
      000339 7D                    5533 	.db #0x7d	; 125
      00033A 0D                    5534 	.db #0x0d	; 13
      00033B 19                    5535 	.db #0x19	; 25
      00033C 31                    5536 	.db #0x31	; 49	'1'
      00033D 7D                    5537 	.db #0x7d	; 125
      00033E 26                    5538 	.db #0x26	; 38
      00033F 29                    5539 	.db #0x29	; 41
      000340 29                    5540 	.db #0x29	; 41
      000341 2F                    5541 	.db #0x2f	; 47
      000342 28                    5542 	.db #0x28	; 40
      000343 26                    5543 	.db #0x26	; 38
      000344 29                    5544 	.db #0x29	; 41
      000345 29                    5545 	.db #0x29	; 41
      000346 29                    5546 	.db #0x29	; 41
      000347 26                    5547 	.db #0x26	; 38
      000348 30                    5548 	.db #0x30	; 48	'0'
      000349 48                    5549 	.db #0x48	; 72	'H'
      00034A 4D                    5550 	.db #0x4d	; 77	'M'
      00034B 40                    5551 	.db #0x40	; 64
      00034C 20                    5552 	.db #0x20	; 32
      00034D 38                    5553 	.db #0x38	; 56	'8'
      00034E 08                    5554 	.db #0x08	; 8
      00034F 08                    5555 	.db #0x08	; 8
      000350 08                    5556 	.db #0x08	; 8
      000351 08                    5557 	.db #0x08	; 8
      000352 08                    5558 	.db #0x08	; 8
      000353 08                    5559 	.db #0x08	; 8
      000354 08                    5560 	.db #0x08	; 8
      000355 08                    5561 	.db #0x08	; 8
      000356 38                    5562 	.db #0x38	; 56	'8'
      000357 2F                    5563 	.db #0x2f	; 47
      000358 10                    5564 	.db #0x10	; 16
      000359 C8                    5565 	.db #0xc8	; 200
      00035A AC                    5566 	.db #0xac	; 172
      00035B BA                    5567 	.db #0xba	; 186
      00035C 2F                    5568 	.db #0x2f	; 47
      00035D 10                    5569 	.db #0x10	; 16
      00035E 28                    5570 	.db #0x28	; 40
      00035F 34                    5571 	.db #0x34	; 52	'4'
      000360 FA                    5572 	.db #0xfa	; 250
      000361 00                    5573 	.db #0x00	; 0
      000362 00                    5574 	.db #0x00	; 0
      000363 7B                    5575 	.db #0x7b	; 123
      000364 00                    5576 	.db #0x00	; 0
      000365 00                    5577 	.db #0x00	; 0
      000366 08                    5578 	.db #0x08	; 8
      000367 14                    5579 	.db #0x14	; 20
      000368 2A                    5580 	.db #0x2a	; 42
      000369 14                    5581 	.db #0x14	; 20
      00036A 22                    5582 	.db #0x22	; 34
      00036B 22                    5583 	.db #0x22	; 34
      00036C 14                    5584 	.db #0x14	; 20
      00036D 2A                    5585 	.db #0x2a	; 42
      00036E 14                    5586 	.db #0x14	; 20
      00036F 08                    5587 	.db #0x08	; 8
      000370 AA                    5588 	.db #0xaa	; 170
      000371 00                    5589 	.db #0x00	; 0
      000372 55                    5590 	.db #0x55	; 85	'U'
      000373 00                    5591 	.db #0x00	; 0
      000374 AA                    5592 	.db #0xaa	; 170
      000375 AA                    5593 	.db #0xaa	; 170
      000376 55                    5594 	.db #0x55	; 85	'U'
      000377 AA                    5595 	.db #0xaa	; 170
      000378 55                    5596 	.db #0x55	; 85	'U'
      000379 AA                    5597 	.db #0xaa	; 170
      00037A 00                    5598 	.db #0x00	; 0
      00037B 00                    5599 	.db #0x00	; 0
      00037C 00                    5600 	.db #0x00	; 0
      00037D FF                    5601 	.db #0xff	; 255
      00037E 00                    5602 	.db #0x00	; 0
      00037F 10                    5603 	.db #0x10	; 16
      000380 10                    5604 	.db #0x10	; 16
      000381 10                    5605 	.db #0x10	; 16
      000382 FF                    5606 	.db #0xff	; 255
      000383 00                    5607 	.db #0x00	; 0
      000384 14                    5608 	.db #0x14	; 20
      000385 14                    5609 	.db #0x14	; 20
      000386 14                    5610 	.db #0x14	; 20
      000387 FF                    5611 	.db #0xff	; 255
      000388 00                    5612 	.db #0x00	; 0
      000389 10                    5613 	.db #0x10	; 16
      00038A 10                    5614 	.db #0x10	; 16
      00038B FF                    5615 	.db #0xff	; 255
      00038C 00                    5616 	.db #0x00	; 0
      00038D FF                    5617 	.db #0xff	; 255
      00038E 10                    5618 	.db #0x10	; 16
      00038F 10                    5619 	.db #0x10	; 16
      000390 F0                    5620 	.db #0xf0	; 240
      000391 10                    5621 	.db #0x10	; 16
      000392 F0                    5622 	.db #0xf0	; 240
      000393 14                    5623 	.db #0x14	; 20
      000394 14                    5624 	.db #0x14	; 20
      000395 14                    5625 	.db #0x14	; 20
      000396 FC                    5626 	.db #0xfc	; 252
      000397 00                    5627 	.db #0x00	; 0
      000398 14                    5628 	.db #0x14	; 20
      000399 14                    5629 	.db #0x14	; 20
      00039A F7                    5630 	.db #0xf7	; 247
      00039B 00                    5631 	.db #0x00	; 0
      00039C FF                    5632 	.db #0xff	; 255
      00039D 00                    5633 	.db #0x00	; 0
      00039E 00                    5634 	.db #0x00	; 0
      00039F FF                    5635 	.db #0xff	; 255
      0003A0 00                    5636 	.db #0x00	; 0
      0003A1 FF                    5637 	.db #0xff	; 255
      0003A2 14                    5638 	.db #0x14	; 20
      0003A3 14                    5639 	.db #0x14	; 20
      0003A4 F4                    5640 	.db #0xf4	; 244
      0003A5 04                    5641 	.db #0x04	; 4
      0003A6 FC                    5642 	.db #0xfc	; 252
      0003A7 14                    5643 	.db #0x14	; 20
      0003A8 14                    5644 	.db #0x14	; 20
      0003A9 17                    5645 	.db #0x17	; 23
      0003AA 10                    5646 	.db #0x10	; 16
      0003AB 1F                    5647 	.db #0x1f	; 31
      0003AC 10                    5648 	.db #0x10	; 16
      0003AD 10                    5649 	.db #0x10	; 16
      0003AE 1F                    5650 	.db #0x1f	; 31
      0003AF 10                    5651 	.db #0x10	; 16
      0003B0 1F                    5652 	.db #0x1f	; 31
      0003B1 14                    5653 	.db #0x14	; 20
      0003B2 14                    5654 	.db #0x14	; 20
      0003B3 14                    5655 	.db #0x14	; 20
      0003B4 1F                    5656 	.db #0x1f	; 31
      0003B5 00                    5657 	.db #0x00	; 0
      0003B6 10                    5658 	.db #0x10	; 16
      0003B7 10                    5659 	.db #0x10	; 16
      0003B8 10                    5660 	.db #0x10	; 16
      0003B9 F0                    5661 	.db #0xf0	; 240
      0003BA 00                    5662 	.db #0x00	; 0
      0003BB 00                    5663 	.db #0x00	; 0
      0003BC 00                    5664 	.db #0x00	; 0
      0003BD 00                    5665 	.db #0x00	; 0
      0003BE 1F                    5666 	.db #0x1f	; 31
      0003BF 10                    5667 	.db #0x10	; 16
      0003C0 10                    5668 	.db #0x10	; 16
      0003C1 10                    5669 	.db #0x10	; 16
      0003C2 10                    5670 	.db #0x10	; 16
      0003C3 1F                    5671 	.db #0x1f	; 31
      0003C4 10                    5672 	.db #0x10	; 16
      0003C5 10                    5673 	.db #0x10	; 16
      0003C6 10                    5674 	.db #0x10	; 16
      0003C7 10                    5675 	.db #0x10	; 16
      0003C8 F0                    5676 	.db #0xf0	; 240
      0003C9 10                    5677 	.db #0x10	; 16
      0003CA 00                    5678 	.db #0x00	; 0
      0003CB 00                    5679 	.db #0x00	; 0
      0003CC 00                    5680 	.db #0x00	; 0
      0003CD FF                    5681 	.db #0xff	; 255
      0003CE 10                    5682 	.db #0x10	; 16
      0003CF 10                    5683 	.db #0x10	; 16
      0003D0 10                    5684 	.db #0x10	; 16
      0003D1 10                    5685 	.db #0x10	; 16
      0003D2 10                    5686 	.db #0x10	; 16
      0003D3 10                    5687 	.db #0x10	; 16
      0003D4 10                    5688 	.db #0x10	; 16
      0003D5 10                    5689 	.db #0x10	; 16
      0003D6 10                    5690 	.db #0x10	; 16
      0003D7 FF                    5691 	.db #0xff	; 255
      0003D8 10                    5692 	.db #0x10	; 16
      0003D9 00                    5693 	.db #0x00	; 0
      0003DA 00                    5694 	.db #0x00	; 0
      0003DB 00                    5695 	.db #0x00	; 0
      0003DC FF                    5696 	.db #0xff	; 255
      0003DD 14                    5697 	.db #0x14	; 20
      0003DE 00                    5698 	.db #0x00	; 0
      0003DF 00                    5699 	.db #0x00	; 0
      0003E0 FF                    5700 	.db #0xff	; 255
      0003E1 00                    5701 	.db #0x00	; 0
      0003E2 FF                    5702 	.db #0xff	; 255
      0003E3 00                    5703 	.db #0x00	; 0
      0003E4 00                    5704 	.db #0x00	; 0
      0003E5 1F                    5705 	.db #0x1f	; 31
      0003E6 10                    5706 	.db #0x10	; 16
      0003E7 17                    5707 	.db #0x17	; 23
      0003E8 00                    5708 	.db #0x00	; 0
      0003E9 00                    5709 	.db #0x00	; 0
      0003EA FC                    5710 	.db #0xfc	; 252
      0003EB 04                    5711 	.db #0x04	; 4
      0003EC F4                    5712 	.db #0xf4	; 244
      0003ED 14                    5713 	.db #0x14	; 20
      0003EE 14                    5714 	.db #0x14	; 20
      0003EF 17                    5715 	.db #0x17	; 23
      0003F0 10                    5716 	.db #0x10	; 16
      0003F1 17                    5717 	.db #0x17	; 23
      0003F2 14                    5718 	.db #0x14	; 20
      0003F3 14                    5719 	.db #0x14	; 20
      0003F4 F4                    5720 	.db #0xf4	; 244
      0003F5 04                    5721 	.db #0x04	; 4
      0003F6 F4                    5722 	.db #0xf4	; 244
      0003F7 00                    5723 	.db #0x00	; 0
      0003F8 00                    5724 	.db #0x00	; 0
      0003F9 FF                    5725 	.db #0xff	; 255
      0003FA 00                    5726 	.db #0x00	; 0
      0003FB F7                    5727 	.db #0xf7	; 247
      0003FC 14                    5728 	.db #0x14	; 20
      0003FD 14                    5729 	.db #0x14	; 20
      0003FE 14                    5730 	.db #0x14	; 20
      0003FF 14                    5731 	.db #0x14	; 20
      000400 14                    5732 	.db #0x14	; 20
      000401 14                    5733 	.db #0x14	; 20
      000402 14                    5734 	.db #0x14	; 20
      000403 F7                    5735 	.db #0xf7	; 247
      000404 00                    5736 	.db #0x00	; 0
      000405 F7                    5737 	.db #0xf7	; 247
      000406 14                    5738 	.db #0x14	; 20
      000407 14                    5739 	.db #0x14	; 20
      000408 14                    5740 	.db #0x14	; 20
      000409 17                    5741 	.db #0x17	; 23
      00040A 14                    5742 	.db #0x14	; 20
      00040B 10                    5743 	.db #0x10	; 16
      00040C 10                    5744 	.db #0x10	; 16
      00040D 1F                    5745 	.db #0x1f	; 31
      00040E 10                    5746 	.db #0x10	; 16
      00040F 1F                    5747 	.db #0x1f	; 31
      000410 14                    5748 	.db #0x14	; 20
      000411 14                    5749 	.db #0x14	; 20
      000412 14                    5750 	.db #0x14	; 20
      000413 F4                    5751 	.db #0xf4	; 244
      000414 14                    5752 	.db #0x14	; 20
      000415 10                    5753 	.db #0x10	; 16
      000416 10                    5754 	.db #0x10	; 16
      000417 F0                    5755 	.db #0xf0	; 240
      000418 10                    5756 	.db #0x10	; 16
      000419 F0                    5757 	.db #0xf0	; 240
      00041A 00                    5758 	.db #0x00	; 0
      00041B 00                    5759 	.db #0x00	; 0
      00041C 1F                    5760 	.db #0x1f	; 31
      00041D 10                    5761 	.db #0x10	; 16
      00041E 1F                    5762 	.db #0x1f	; 31
      00041F 00                    5763 	.db #0x00	; 0
      000420 00                    5764 	.db #0x00	; 0
      000421 00                    5765 	.db #0x00	; 0
      000422 1F                    5766 	.db #0x1f	; 31
      000423 14                    5767 	.db #0x14	; 20
      000424 00                    5768 	.db #0x00	; 0
      000425 00                    5769 	.db #0x00	; 0
      000426 00                    5770 	.db #0x00	; 0
      000427 FC                    5771 	.db #0xfc	; 252
      000428 14                    5772 	.db #0x14	; 20
      000429 00                    5773 	.db #0x00	; 0
      00042A 00                    5774 	.db #0x00	; 0
      00042B F0                    5775 	.db #0xf0	; 240
      00042C 10                    5776 	.db #0x10	; 16
      00042D F0                    5777 	.db #0xf0	; 240
      00042E 10                    5778 	.db #0x10	; 16
      00042F 10                    5779 	.db #0x10	; 16
      000430 FF                    5780 	.db #0xff	; 255
      000431 10                    5781 	.db #0x10	; 16
      000432 FF                    5782 	.db #0xff	; 255
      000433 14                    5783 	.db #0x14	; 20
      000434 14                    5784 	.db #0x14	; 20
      000435 14                    5785 	.db #0x14	; 20
      000436 FF                    5786 	.db #0xff	; 255
      000437 14                    5787 	.db #0x14	; 20
      000438 10                    5788 	.db #0x10	; 16
      000439 10                    5789 	.db #0x10	; 16
      00043A 10                    5790 	.db #0x10	; 16
      00043B 1F                    5791 	.db #0x1f	; 31
      00043C 00                    5792 	.db #0x00	; 0
      00043D 00                    5793 	.db #0x00	; 0
      00043E 00                    5794 	.db #0x00	; 0
      00043F 00                    5795 	.db #0x00	; 0
      000440 F0                    5796 	.db #0xf0	; 240
      000441 10                    5797 	.db #0x10	; 16
      000442 FF                    5798 	.db #0xff	; 255
      000443 FF                    5799 	.db #0xff	; 255
      000444 FF                    5800 	.db #0xff	; 255
      000445 FF                    5801 	.db #0xff	; 255
      000446 FF                    5802 	.db #0xff	; 255
      000447 F0                    5803 	.db #0xf0	; 240
      000448 F0                    5804 	.db #0xf0	; 240
      000449 F0                    5805 	.db #0xf0	; 240
      00044A F0                    5806 	.db #0xf0	; 240
      00044B F0                    5807 	.db #0xf0	; 240
      00044C FF                    5808 	.db #0xff	; 255
      00044D FF                    5809 	.db #0xff	; 255
      00044E FF                    5810 	.db #0xff	; 255
      00044F 00                    5811 	.db #0x00	; 0
      000450 00                    5812 	.db #0x00	; 0
      000451 00                    5813 	.db #0x00	; 0
      000452 00                    5814 	.db #0x00	; 0
      000453 00                    5815 	.db #0x00	; 0
      000454 FF                    5816 	.db #0xff	; 255
      000455 FF                    5817 	.db #0xff	; 255
      000456 0F                    5818 	.db #0x0f	; 15
      000457 0F                    5819 	.db #0x0f	; 15
      000458 0F                    5820 	.db #0x0f	; 15
      000459 0F                    5821 	.db #0x0f	; 15
      00045A 0F                    5822 	.db #0x0f	; 15
      00045B 38                    5823 	.db #0x38	; 56	'8'
      00045C 44                    5824 	.db #0x44	; 68	'D'
      00045D 44                    5825 	.db #0x44	; 68	'D'
      00045E 38                    5826 	.db #0x38	; 56	'8'
      00045F 44                    5827 	.db #0x44	; 68	'D'
      000460 FC                    5828 	.db #0xfc	; 252
      000461 4A                    5829 	.db #0x4a	; 74	'J'
      000462 4A                    5830 	.db #0x4a	; 74	'J'
      000463 4A                    5831 	.db #0x4a	; 74	'J'
      000464 34                    5832 	.db #0x34	; 52	'4'
      000465 7E                    5833 	.db #0x7e	; 126
      000466 02                    5834 	.db #0x02	; 2
      000467 02                    5835 	.db #0x02	; 2
      000468 06                    5836 	.db #0x06	; 6
      000469 06                    5837 	.db #0x06	; 6
      00046A 02                    5838 	.db #0x02	; 2
      00046B 7E                    5839 	.db #0x7e	; 126
      00046C 02                    5840 	.db #0x02	; 2
      00046D 7E                    5841 	.db #0x7e	; 126
      00046E 02                    5842 	.db #0x02	; 2
      00046F 63                    5843 	.db #0x63	; 99	'c'
      000470 55                    5844 	.db #0x55	; 85	'U'
      000471 49                    5845 	.db #0x49	; 73	'I'
      000472 41                    5846 	.db #0x41	; 65	'A'
      000473 63                    5847 	.db #0x63	; 99	'c'
      000474 38                    5848 	.db #0x38	; 56	'8'
      000475 44                    5849 	.db #0x44	; 68	'D'
      000476 44                    5850 	.db #0x44	; 68	'D'
      000477 3C                    5851 	.db #0x3c	; 60
      000478 04                    5852 	.db #0x04	; 4
      000479 40                    5853 	.db #0x40	; 64
      00047A 7E                    5854 	.db #0x7e	; 126
      00047B 20                    5855 	.db #0x20	; 32
      00047C 1E                    5856 	.db #0x1e	; 30
      00047D 20                    5857 	.db #0x20	; 32
      00047E 06                    5858 	.db #0x06	; 6
      00047F 02                    5859 	.db #0x02	; 2
      000480 7E                    5860 	.db #0x7e	; 126
      000481 02                    5861 	.db #0x02	; 2
      000482 02                    5862 	.db #0x02	; 2
      000483 99                    5863 	.db #0x99	; 153
      000484 A5                    5864 	.db #0xa5	; 165
      000485 E7                    5865 	.db #0xe7	; 231
      000486 A5                    5866 	.db #0xa5	; 165
      000487 99                    5867 	.db #0x99	; 153
      000488 1C                    5868 	.db #0x1c	; 28
      000489 2A                    5869 	.db #0x2a	; 42
      00048A 49                    5870 	.db #0x49	; 73	'I'
      00048B 2A                    5871 	.db #0x2a	; 42
      00048C 1C                    5872 	.db #0x1c	; 28
      00048D 4C                    5873 	.db #0x4c	; 76	'L'
      00048E 72                    5874 	.db #0x72	; 114	'r'
      00048F 01                    5875 	.db #0x01	; 1
      000490 72                    5876 	.db #0x72	; 114	'r'
      000491 4C                    5877 	.db #0x4c	; 76	'L'
      000492 30                    5878 	.db #0x30	; 48	'0'
      000493 4A                    5879 	.db #0x4a	; 74	'J'
      000494 4D                    5880 	.db #0x4d	; 77	'M'
      000495 4D                    5881 	.db #0x4d	; 77	'M'
      000496 30                    5882 	.db #0x30	; 48	'0'
      000497 30                    5883 	.db #0x30	; 48	'0'
      000498 48                    5884 	.db #0x48	; 72	'H'
      000499 78                    5885 	.db #0x78	; 120	'x'
      00049A 48                    5886 	.db #0x48	; 72	'H'
      00049B 30                    5887 	.db #0x30	; 48	'0'
      00049C BC                    5888 	.db #0xbc	; 188
      00049D 62                    5889 	.db #0x62	; 98	'b'
      00049E 5A                    5890 	.db #0x5a	; 90	'Z'
      00049F 46                    5891 	.db #0x46	; 70	'F'
      0004A0 3D                    5892 	.db #0x3d	; 61
      0004A1 3E                    5893 	.db #0x3e	; 62
      0004A2 49                    5894 	.db #0x49	; 73	'I'
      0004A3 49                    5895 	.db #0x49	; 73	'I'
      0004A4 49                    5896 	.db #0x49	; 73	'I'
      0004A5 00                    5897 	.db #0x00	; 0
      0004A6 7E                    5898 	.db #0x7e	; 126
      0004A7 01                    5899 	.db #0x01	; 1
      0004A8 01                    5900 	.db #0x01	; 1
      0004A9 01                    5901 	.db #0x01	; 1
      0004AA 7E                    5902 	.db #0x7e	; 126
      0004AB 2A                    5903 	.db #0x2a	; 42
      0004AC 2A                    5904 	.db #0x2a	; 42
      0004AD 2A                    5905 	.db #0x2a	; 42
      0004AE 2A                    5906 	.db #0x2a	; 42
      0004AF 2A                    5907 	.db #0x2a	; 42
      0004B0 44                    5908 	.db #0x44	; 68	'D'
      0004B1 44                    5909 	.db #0x44	; 68	'D'
      0004B2 5F                    5910 	.db #0x5f	; 95
      0004B3 44                    5911 	.db #0x44	; 68	'D'
      0004B4 44                    5912 	.db #0x44	; 68	'D'
      0004B5 40                    5913 	.db #0x40	; 64
      0004B6 51                    5914 	.db #0x51	; 81	'Q'
      0004B7 4A                    5915 	.db #0x4a	; 74	'J'
      0004B8 44                    5916 	.db #0x44	; 68	'D'
      0004B9 40                    5917 	.db #0x40	; 64
      0004BA 40                    5918 	.db #0x40	; 64
      0004BB 44                    5919 	.db #0x44	; 68	'D'
      0004BC 4A                    5920 	.db #0x4a	; 74	'J'
      0004BD 51                    5921 	.db #0x51	; 81	'Q'
      0004BE 40                    5922 	.db #0x40	; 64
      0004BF 00                    5923 	.db #0x00	; 0
      0004C0 00                    5924 	.db #0x00	; 0
      0004C1 FF                    5925 	.db #0xff	; 255
      0004C2 01                    5926 	.db #0x01	; 1
      0004C3 03                    5927 	.db #0x03	; 3
      0004C4 E0                    5928 	.db #0xe0	; 224
      0004C5 80                    5929 	.db #0x80	; 128
      0004C6 FF                    5930 	.db #0xff	; 255
      0004C7 00                    5931 	.db #0x00	; 0
      0004C8 00                    5932 	.db #0x00	; 0
      0004C9 08                    5933 	.db #0x08	; 8
      0004CA 08                    5934 	.db #0x08	; 8
      0004CB 6B                    5935 	.db #0x6b	; 107	'k'
      0004CC 6B                    5936 	.db #0x6b	; 107	'k'
      0004CD 08                    5937 	.db #0x08	; 8
      0004CE 36                    5938 	.db #0x36	; 54	'6'
      0004CF 12                    5939 	.db #0x12	; 18
      0004D0 36                    5940 	.db #0x36	; 54	'6'
      0004D1 24                    5941 	.db #0x24	; 36
      0004D2 36                    5942 	.db #0x36	; 54	'6'
      0004D3 06                    5943 	.db #0x06	; 6
      0004D4 0F                    5944 	.db #0x0f	; 15
      0004D5 09                    5945 	.db #0x09	; 9
      0004D6 0F                    5946 	.db #0x0f	; 15
      0004D7 06                    5947 	.db #0x06	; 6
      0004D8 00                    5948 	.db #0x00	; 0
      0004D9 00                    5949 	.db #0x00	; 0
      0004DA 18                    5950 	.db #0x18	; 24
      0004DB 18                    5951 	.db #0x18	; 24
      0004DC 00                    5952 	.db #0x00	; 0
      0004DD 00                    5953 	.db #0x00	; 0
      0004DE 00                    5954 	.db #0x00	; 0
      0004DF 10                    5955 	.db #0x10	; 16
      0004E0 10                    5956 	.db #0x10	; 16
      0004E1 00                    5957 	.db #0x00	; 0
      0004E2 30                    5958 	.db #0x30	; 48	'0'
      0004E3 40                    5959 	.db #0x40	; 64
      0004E4 FF                    5960 	.db #0xff	; 255
      0004E5 01                    5961 	.db #0x01	; 1
      0004E6 01                    5962 	.db #0x01	; 1
      0004E7 00                    5963 	.db #0x00	; 0
      0004E8 1F                    5964 	.db #0x1f	; 31
      0004E9 01                    5965 	.db #0x01	; 1
      0004EA 01                    5966 	.db #0x01	; 1
      0004EB 1E                    5967 	.db #0x1e	; 30
      0004EC 00                    5968 	.db #0x00	; 0
      0004ED 19                    5969 	.db #0x19	; 25
      0004EE 1D                    5970 	.db #0x1d	; 29
      0004EF 17                    5971 	.db #0x17	; 23
      0004F0 12                    5972 	.db #0x12	; 18
      0004F1 00                    5973 	.db #0x00	; 0
      0004F2 3C                    5974 	.db #0x3c	; 60
      0004F3 3C                    5975 	.db #0x3c	; 60
      0004F4 3C                    5976 	.db #0x3c	; 60
      0004F5 3C                    5977 	.db #0x3c	; 60
      0004F6 00                    5978 	.db #0x00	; 0
      0004F7 00                    5979 	.db #0x00	; 0
      0004F8 00                    5980 	.db #0x00	; 0
      0004F9 00                    5981 	.db #0x00	; 0
      0004FA 00                    5982 	.db #0x00	; 0
      0004FB                       5983 _keypad:
      0004FB 31                    5984 	.db #0x31	; 49	'1'
      0004FC 34                    5985 	.db #0x34	; 52	'4'
      0004FD 37                    5986 	.db #0x37	; 55	'7'
      0004FE 45                    5987 	.db #0x45	; 69	'E'
      0004FF 32                    5988 	.db #0x32	; 50	'2'
      000500 35                    5989 	.db #0x35	; 53	'5'
      000501 38                    5990 	.db #0x38	; 56	'8'
      000502 30                    5991 	.db #0x30	; 48	'0'
      000503 33                    5992 	.db #0x33	; 51	'3'
      000504 36                    5993 	.db #0x36	; 54	'6'
      000505 39                    5994 	.db #0x39	; 57	'9'
      000506 46                    5995 	.db #0x46	; 70	'F'
      000507 41                    5996 	.db #0x41	; 65	'A'
      000508 42                    5997 	.db #0x42	; 66	'B'
      000509 43                    5998 	.db #0x43	; 67	'C'
      00050A 44                    5999 	.db #0x44	; 68	'D'
                                   6000 	.area CONST   (CODE)
      00050B                       6001 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  6002 	.ascii "Welcome"
      000512 0A                    6003 	.db 0x0a
      000513 00                    6004 	.db 0x00
                                   6005 	.area CSEG    (CODE)
                                   6006 	.area CONST   (CODE)
      000514                       6007 ___str_1:
      000514 45 43 45 4E 2D 34 33  6008 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    6009 	.db 0x0a
      00051E 00                    6010 	.db 0x00
                                   6011 	.area CSEG    (CODE)
                                   6012 	.area CONST   (CODE)
      00051F                       6013 ___str_2:
      00051F 52 6F 74 61 74 69 6F  6014 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    6015 	.db 0x00
                                   6016 	.area CSEG    (CODE)
                                   6017 	.area CONST   (CODE)
      00052A                       6018 ___str_3:
      00052A 52 6F 74 61 74 69 6F  6019 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    6020 	.db 0x00
                                   6021 	.area CSEG    (CODE)
                                   6022 	.area CONST   (CODE)
      000535                       6023 ___str_4:
      000535 52 6F 74 61 74 69 6F  6024 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    6025 	.db 0x00
                                   6026 	.area CSEG    (CODE)
                                   6027 	.area CONST   (CODE)
      000540                       6028 ___str_5:
      000540 52 6F 74 61 74 69 6F  6029 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    6030 	.db 0x00
                                   6031 	.area CSEG    (CODE)
                                   6032 	.area CONST   (CODE)
      00054B                       6033 ___str_6:
      00054B 45 6E 74 65 72 20 62  6034 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      00055E 0A                    6035 	.db 0x0a
      00055F 00                    6036 	.db 0x00
                                   6037 	.area CSEG    (CODE)
                                   6038 	.area CONST   (CODE)
      000560                       6039 ___str_7:
      000560 49 6E 20 70 72 6F 67  6040 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      00056E 0A                    6041 	.db 0x0a
      00056F 00                    6042 	.db 0x00
                                   6043 	.area CSEG    (CODE)
                                   6044 	.area CONST   (CODE)
      000570                       6045 ___str_8:
      000570 4D 65 6D 6F 72 79 20  6046 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000583 0A                    6047 	.db 0x0a
      000584 00                    6048 	.db 0x00
                                   6049 	.area CSEG    (CODE)
                                   6050 	.area CONST   (CODE)
      000585                       6051 ___str_9:
      000585 53 75 63 63 65 73 73  6052 	.ascii "Success!"
             21
      00058D 0A                    6053 	.db 0x0a
      00058E 00                    6054 	.db 0x00
                                   6055 	.area CSEG    (CODE)
                                   6056 	.area CONST   (CODE)
      00058F                       6057 ___str_10:
      00058F 50 72 65 73 73 20 31  6058 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00059F 00                    6059 	.db 0x00
                                   6060 	.area CSEG    (CODE)
                                   6061 	.area CONST   (CODE)
      0005A0                       6062 ___str_11:
      0005A0 45 6E 74 65 72 20 62  6063 	.ascii "Enter byte"
             79 74 65
      0005AA 0A                    6064 	.db 0x0a
      0005AB 00                    6065 	.db 0x00
                                   6066 	.area CSEG    (CODE)
                                   6067 	.area CONST   (CODE)
      0005AC                       6068 ___str_12:
      0005AC 45 6E 74 65 72 20 61  6069 	.ascii "Enter address"
             64 64 72 65 73 73
      0005B9 0A                    6070 	.db 0x0a
      0005BA 00                    6071 	.db 0x00
                                   6072 	.area CSEG    (CODE)
                                   6073 	.area CONST   (CODE)
      0005BB                       6074 ___str_13:
      0005BB 49 6E 20 70 72 6F 67  6075 	.ascii "In progress"
             72 65 73 73
      0005C6 0A                    6076 	.db 0x0a
      0005C7 00                    6077 	.db 0x00
                                   6078 	.area CSEG    (CODE)
                                   6079 	.area CONST   (CODE)
      0005C8                       6080 ___str_14:
      0005C8 20 66 65 74 63 68 65  6081 	.ascii " fetched!"
             64 21
      0005D1 0A                    6082 	.db 0x0a
      0005D2 53 75 63 63 65 73 73  6083 	.ascii "Success!"
             21
      0005DA 0A                    6084 	.db 0x0a
      0005DB 00                    6085 	.db 0x00
                                   6086 	.area CSEG    (CODE)
                                   6087 	.area CONST   (CODE)
      0005DC                       6088 ___str_15:
      0005DC 43 68 65 63 6B 20 66  6089 	.ascii "Check failed"
             61 69 6C 65 64
      0005E8 0A                    6090 	.db 0x0a
      0005E9 00                    6091 	.db 0x00
                                   6092 	.area CSEG    (CODE)
                                   6093 	.area CONST   (CODE)
      0005EA                       6094 ___str_16:
      0005EA 50 72 65 73 73 20 31  6095 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0005FA 0A                    6096 	.db 0x0a
      0005FB 00                    6097 	.db 0x00
                                   6098 	.area CSEG    (CODE)
                                   6099 	.area CONST   (CODE)
      0005FC                       6100 ___str_17:
      0005FC 45 6E 74 65 72 20 73  6101 	.ascii "Enter start add."
             74 61 72 74 20 61 64
             64 2E
      00060C 0A                    6102 	.db 0x0a
      00060D 00                    6103 	.db 0x00
                                   6104 	.area CSEG    (CODE)
                                   6105 	.area CONST   (CODE)
      00060E                       6106 ___str_18:
      00060E 45 6E 74 65 72 20 73  6107 	.ascii "Enter size"
             69 7A 65
      000618 0A                    6108 	.db 0x0a
      000619 00                    6109 	.db 0x00
                                   6110 	.area CSEG    (CODE)
                                   6111 	.area CONST   (CODE)
      00061A                       6112 ___str_19:
      00061A 45 6E 74 65 72 20 74  6113 	.ascii "Enter target add."
             61 72 67 65 74 20 61
             64 64 2E
      00062B 0A                    6114 	.db 0x0a
      00062C 00                    6115 	.db 0x00
                                   6116 	.area CSEG    (CODE)
                                   6117 	.area CONST   (CODE)
      00062D                       6118 ___str_20:
      00062D 4D 6F 76 65 20 69 6E  6119 	.ascii "Move in progress..."
             20 70 72 6F 67 72 65
             73 73 2E 2E 2E
      000640 0A                    6120 	.db 0x0a
      000641 00                    6121 	.db 0x00
                                   6122 	.area CSEG    (CODE)
                                   6123 	.area CONST   (CODE)
      000642                       6124 ___str_21:
      000642 44 6F 6E 65 21        6125 	.ascii "Done!"
      000647 0A                    6126 	.db 0x0a
      000648 00                    6127 	.db 0x00
                                   6128 	.area CSEG    (CODE)
                                   6129 	.area CONST   (CODE)
      000649                       6130 ___str_22:
      000649 3A 20                 6131 	.ascii ": "
      00064B 00                    6132 	.db 0x00
                                   6133 	.area CSEG    (CODE)
                                   6134 	.area CONST   (CODE)
      00064C                       6135 ___str_23:
      00064C 45 6E 74 65 72 20 6E  6136 	.ascii "Enter new byte:"
             65 77 20 62 79 74 65
             3A
      00065B 0A                    6137 	.db 0x0a
      00065C 00                    6138 	.db 0x00
                                   6139 	.area CSEG    (CODE)
                                   6140 	.area CONST   (CODE)
      00065D                       6141 ___str_24:
      00065D 45 6E 74 65 72 20 61  6142 	.ascii "Enter address:"
             64 64 72 65 73 73 3A
      00066B 0A                    6143 	.db 0x0a
      00066C 00                    6144 	.db 0x00
                                   6145 	.area CSEG    (CODE)
                                   6146 	.area CONST   (CODE)
      00066D                       6147 ___str_25:
      00066D 50 72 65 73 73 20 32  6148 	.ascii "Press 2 to edit again"
             20 74 6F 20 65 64 69
             74 20 61 67 61 69 6E
      000682 0A                    6149 	.db 0x0a
      000683 00                    6150 	.db 0x00
                                   6151 	.area CSEG    (CODE)
                                   6152 	.area CONST   (CODE)
      000684                       6153 ___str_26:
      000684 50 72 65 73 73 20 33  6154 	.ascii "Press 3 to edit next address"
             20 74 6F 20 65 64 69
             74 20 6E 65 78 74 20
             61 64 64 72 65 73 73
      0006A0 0A                    6155 	.db 0x0a
      0006A1 00                    6156 	.db 0x00
                                   6157 	.area CSEG    (CODE)
                                   6158 	.area CONST   (CODE)
      0006A2                       6159 ___str_27:
      0006A2 45 6E 74 65 72 20 62  6160 	.ascii "Enter block size:"
             6C 6F 63 6B 20 73 69
             7A 65 3A
      0006B3 0A                    6161 	.db 0x0a
      0006B4 00                    6162 	.db 0x00
                                   6163 	.area CSEG    (CODE)
                                   6164 	.area CONST   (CODE)
      0006B5                       6165 ___str_28:
      0006B5 45 6E 74 65 72 20 62  6166 	.ascii "Enter byte to count:"
             79 74 65 20 74 6F 20
             63 6F 75 6E 74 3A
      0006C9 0A                    6167 	.db 0x0a
      0006CA 00                    6168 	.db 0x00
                                   6169 	.area CSEG    (CODE)
                                   6170 	.area CONST   (CODE)
      0006CB                       6171 ___str_29:
      0006CB 54 65 6D 70 65 72 61  6172 	.ascii "Temperature: "
             74 75 72 65 3A 20
      0006D8 00                    6173 	.db 0x00
                                   6174 	.area CSEG    (CODE)
                                   6175 	.area CONST   (CODE)
      0006D9                       6176 ___str_30:
      0006D9 50 72 65 73 73 20 30  6177 	.ascii "Press 0 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      0006E9 0A                    6178 	.db 0x0a
      0006EA 00                    6179 	.db 0x00
                                   6180 	.area CSEG    (CODE)
                                   6181 	.area CONST   (CODE)
      0006EB                       6182 ___str_31:
      0006EB 4C 69 67 68 74 20 6C  6183 	.ascii "Light level: "
             65 76 65 6C 3A 20
      0006F8 00                    6184 	.db 0x00
                                   6185 	.area CSEG    (CODE)
                                   6186 	.area CONST   (CODE)
      0006F9                       6187 ___str_32:
      0006F9 42 72 61 6E 64 6F 6E  6188 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      000706 0A                    6189 	.db 0x0a
      000707 00                    6190 	.db 0x00
                                   6191 	.area CSEG    (CODE)
                                   6192 	.area CONST   (CODE)
      000708                       6193 ___str_33:
      000708 45 43 45 4E 20 34 33  6194 	.ascii "ECEN 4330"
             33 30
      000711 0A                    6195 	.db 0x0a
      000712 00                    6196 	.db 0x00
                                   6197 	.area CSEG    (CODE)
                                   6198 	.area CONST   (CODE)
      000713                       6199 ___str_34:
      000713 31 3A 20 42 61 73 69  6200 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      000721 0A                    6201 	.db 0x0a
      000722 00                    6202 	.db 0x00
                                   6203 	.area CSEG    (CODE)
                                   6204 	.area CONST   (CODE)
      000723                       6205 ___str_35:
      000723 32 3A 20 44 75 6D 70  6206 	.ascii "2: Dump"
      00072A 0A                    6207 	.db 0x0a
      00072B 00                    6208 	.db 0x00
                                   6209 	.area CSEG    (CODE)
                                   6210 	.area CONST   (CODE)
      00072C                       6211 ___str_36:
      00072C 33 3A 20 43 68 65 63  6212 	.ascii "3: Check"
             6B
      000734 0A                    6213 	.db 0x0a
      000735 00                    6214 	.db 0x00
                                   6215 	.area CSEG    (CODE)
                                   6216 	.area CONST   (CODE)
      000736                       6217 ___str_37:
      000736 41 3A 20 4D 6F 76 65  6218 	.ascii "A: Move"
      00073D 0A                    6219 	.db 0x0a
      00073E 00                    6220 	.db 0x00
                                   6221 	.area CSEG    (CODE)
                                   6222 	.area CONST   (CODE)
      00073F                       6223 ___str_38:
      00073F 34 3A 20 45 64 69 74  6224 	.ascii "4: Edit"
      000746 0A                    6225 	.db 0x0a
      000747 00                    6226 	.db 0x00
                                   6227 	.area CSEG    (CODE)
                                   6228 	.area CONST   (CODE)
      000748                       6229 ___str_39:
      000748 35 3A 20 46 69 6E 64  6230 	.ascii "5: Find"
      00074F 0A                    6231 	.db 0x0a
      000750 00                    6232 	.db 0x00
                                   6233 	.area CSEG    (CODE)
                                   6234 	.area CONST   (CODE)
      000751                       6235 ___str_40:
      000751 36 3A 20 43 6F 75 6E  6236 	.ascii "6: Count"
             74
      000759 0A                    6237 	.db 0x0a
      00075A 00                    6238 	.db 0x00
                                   6239 	.area CSEG    (CODE)
                                   6240 	.area CONST   (CODE)
      00075B                       6241 ___str_41:
      00075B 42 3A 20 54 65 6D 70  6242 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      000769 0A                    6243 	.db 0x0a
      00076A 00                    6244 	.db 0x00
                                   6245 	.area CSEG    (CODE)
                                   6246 	.area CONST   (CODE)
      00076B                       6247 ___str_42:
      00076B 37 3A 20 4C 69 67 68  6248 	.ascii "7: Light"
             74
      000773 0A                    6249 	.db 0x0a
      000774 00                    6250 	.db 0x00
                                   6251 	.area CSEG    (CODE)
                                   6252 	.area XINIT   (CODE)
                                   6253 	.area CABS    (ABS,CODE)
