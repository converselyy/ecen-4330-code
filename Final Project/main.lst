                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _keypad
                                     20 	.globl _main
                                     21 	.globl _menu
                                     22 	.globl _UART_free_type
                                     23 	.globl _basic
                                     24 	.globl _receive_parity
                                     25 	.globl _UART_config
                                     26 	.globl _UART_transmit
                                     27 	.globl _UART_init
                                     28 	.globl _ISR_receive
                                     29 	.globl _writeSomeLines
                                     30 	.globl _convertAsciiHex
                                     31 	.globl _write
                                     32 	.globl _drawChar
                                     33 	.globl _setRotation
                                     34 	.globl _ioread8
                                     35 	.globl _iowrite8
                                     36 	.globl _CY
                                     37 	.globl _AC
                                     38 	.globl _F0
                                     39 	.globl _RS1
                                     40 	.globl _RS0
                                     41 	.globl _OV
                                     42 	.globl _F1
                                     43 	.globl _P
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _P1_7
                                     88 	.globl _P1_6
                                     89 	.globl _P1_5
                                     90 	.globl _P1_4
                                     91 	.globl _P1_3
                                     92 	.globl _P1_2
                                     93 	.globl _P1_1
                                     94 	.globl _P1_0
                                     95 	.globl _TF1
                                     96 	.globl _TR1
                                     97 	.globl _TF0
                                     98 	.globl _TR0
                                     99 	.globl _IE1
                                    100 	.globl _IT1
                                    101 	.globl _IE0
                                    102 	.globl _IT0
                                    103 	.globl _P0_7
                                    104 	.globl _P0_6
                                    105 	.globl _P0_5
                                    106 	.globl _P0_4
                                    107 	.globl _P0_3
                                    108 	.globl _P0_2
                                    109 	.globl _P0_1
                                    110 	.globl _P0_0
                                    111 	.globl _B
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _IP
                                    115 	.globl _P3
                                    116 	.globl _IE
                                    117 	.globl _P2
                                    118 	.globl _SBUF
                                    119 	.globl _SCON
                                    120 	.globl _P1
                                    121 	.globl _TH1
                                    122 	.globl _TH0
                                    123 	.globl _TL1
                                    124 	.globl _TL0
                                    125 	.globl _TMOD
                                    126 	.globl _TCON
                                    127 	.globl _PCON
                                    128 	.globl _DPH
                                    129 	.globl _DPL
                                    130 	.globl _SP
                                    131 	.globl _P0
                                    132 	.globl __height
                                    133 	.globl __width
                                    134 	.globl _baud
                                    135 	.globl _parity
                                    136 	.globl _bit
                                    137 	.globl _received_flag
                                    138 	.globl _received_byte
                                    139 	.globl _drawChar_PARM_6
                                    140 	.globl _drawChar_PARM_5
                                    141 	.globl _drawChar_PARM_4
                                    142 	.globl _drawChar_PARM_3
                                    143 	.globl _drawChar_PARM_2
                                    144 	.globl _fillRect_PARM_5
                                    145 	.globl _fillRect_PARM_4
                                    146 	.globl _fillRect_PARM_3
                                    147 	.globl _fillRect_PARM_2
                                    148 	.globl _testCircles_PARM_2
                                    149 	.globl _drawCircle_PARM_4
                                    150 	.globl _drawCircle_PARM_3
                                    151 	.globl _drawCircle_PARM_2
                                    152 	.globl _drawPixel_PARM_3
                                    153 	.globl _drawPixel_PARM_2
                                    154 	.globl _textbgcolor
                                    155 	.globl _textcolor
                                    156 	.globl _rotation
                                    157 	.globl _textsize
                                    158 	.globl _cursor_y
                                    159 	.globl _cursor_x
                                    160 	.globl _read_ram_address
                                    161 	.globl _light_address
                                    162 	.globl _temp_address
                                    163 	.globl _seg7_address
                                    164 	.globl _lcd_address
                                    165 	.globl _rowloc
                                    166 	.globl _colloc
                                    167 	.globl _delay
                                    168 	.globl _writeRegister8
                                    169 	.globl _writeRegister16
                                    170 	.globl _setCursor
                                    171 	.globl _setTextColor
                                    172 	.globl _setTextSize
                                    173 	.globl _setAddress
                                    174 	.globl _TFT_LCD_INIT
                                    175 	.globl _drawPixel
                                    176 	.globl _drawCircle
                                    177 	.globl _testCircles
                                    178 	.globl _fillRect
                                    179 	.globl _fillScreen
                                    180 	.globl _LCD_string_write
                                    181 	.globl _testRAM
                                    182 	.globl _freeType
                                    183 	.globl _keyDetect
                                    184 	.globl _reverse
                                    185 	.globl _asciiToDec
                                    186 	.globl _asciiToHex
                                    187 	.globl _getAddress
                                    188 	.globl _getByte
                                    189 	.globl _check
                                    190 	.globl _UART_menu
                                    191 	.globl _loopback
                                    192 	.globl _interboard
                                    193 ;--------------------------------------------------------
                                    194 ; special function registers
                                    195 ;--------------------------------------------------------
                                    196 	.area RSEG    (ABS,DATA)
      000000                        197 	.org 0x0000
                           000080   198 _P0	=	0x0080
                           000081   199 _SP	=	0x0081
                           000082   200 _DPL	=	0x0082
                           000083   201 _DPH	=	0x0083
                           000087   202 _PCON	=	0x0087
                           000088   203 _TCON	=	0x0088
                           000089   204 _TMOD	=	0x0089
                           00008A   205 _TL0	=	0x008a
                           00008B   206 _TL1	=	0x008b
                           00008C   207 _TH0	=	0x008c
                           00008D   208 _TH1	=	0x008d
                           000090   209 _P1	=	0x0090
                           000098   210 _SCON	=	0x0098
                           000099   211 _SBUF	=	0x0099
                           0000A0   212 _P2	=	0x00a0
                           0000A8   213 _IE	=	0x00a8
                           0000B0   214 _P3	=	0x00b0
                           0000B8   215 _IP	=	0x00b8
                           0000D0   216 _PSW	=	0x00d0
                           0000E0   217 _ACC	=	0x00e0
                           0000F0   218 _B	=	0x00f0
                                    219 ;--------------------------------------------------------
                                    220 ; special function bits
                                    221 ;--------------------------------------------------------
                                    222 	.area RSEG    (ABS,DATA)
      000000                        223 	.org 0x0000
                           000080   224 _P0_0	=	0x0080
                           000081   225 _P0_1	=	0x0081
                           000082   226 _P0_2	=	0x0082
                           000083   227 _P0_3	=	0x0083
                           000084   228 _P0_4	=	0x0084
                           000085   229 _P0_5	=	0x0085
                           000086   230 _P0_6	=	0x0086
                           000087   231 _P0_7	=	0x0087
                           000088   232 _IT0	=	0x0088
                           000089   233 _IE0	=	0x0089
                           00008A   234 _IT1	=	0x008a
                           00008B   235 _IE1	=	0x008b
                           00008C   236 _TR0	=	0x008c
                           00008D   237 _TF0	=	0x008d
                           00008E   238 _TR1	=	0x008e
                           00008F   239 _TF1	=	0x008f
                           000090   240 _P1_0	=	0x0090
                           000091   241 _P1_1	=	0x0091
                           000092   242 _P1_2	=	0x0092
                           000093   243 _P1_3	=	0x0093
                           000094   244 _P1_4	=	0x0094
                           000095   245 _P1_5	=	0x0095
                           000096   246 _P1_6	=	0x0096
                           000097   247 _P1_7	=	0x0097
                           000098   248 _RI	=	0x0098
                           000099   249 _TI	=	0x0099
                           00009A   250 _RB8	=	0x009a
                           00009B   251 _TB8	=	0x009b
                           00009C   252 _REN	=	0x009c
                           00009D   253 _SM2	=	0x009d
                           00009E   254 _SM1	=	0x009e
                           00009F   255 _SM0	=	0x009f
                           0000A0   256 _P2_0	=	0x00a0
                           0000A1   257 _P2_1	=	0x00a1
                           0000A2   258 _P2_2	=	0x00a2
                           0000A3   259 _P2_3	=	0x00a3
                           0000A4   260 _P2_4	=	0x00a4
                           0000A5   261 _P2_5	=	0x00a5
                           0000A6   262 _P2_6	=	0x00a6
                           0000A7   263 _P2_7	=	0x00a7
                           0000A8   264 _EX0	=	0x00a8
                           0000A9   265 _ET0	=	0x00a9
                           0000AA   266 _EX1	=	0x00aa
                           0000AB   267 _ET1	=	0x00ab
                           0000AC   268 _ES	=	0x00ac
                           0000AF   269 _EA	=	0x00af
                           0000B0   270 _P3_0	=	0x00b0
                           0000B1   271 _P3_1	=	0x00b1
                           0000B2   272 _P3_2	=	0x00b2
                           0000B3   273 _P3_3	=	0x00b3
                           0000B4   274 _P3_4	=	0x00b4
                           0000B5   275 _P3_5	=	0x00b5
                           0000B6   276 _P3_6	=	0x00b6
                           0000B7   277 _P3_7	=	0x00b7
                           0000B0   278 _RXD	=	0x00b0
                           0000B1   279 _TXD	=	0x00b1
                           0000B2   280 _INT0	=	0x00b2
                           0000B3   281 _INT1	=	0x00b3
                           0000B4   282 _T0	=	0x00b4
                           0000B5   283 _T1	=	0x00b5
                           0000B6   284 _WR	=	0x00b6
                           0000B7   285 _RD	=	0x00b7
                           0000B8   286 _PX0	=	0x00b8
                           0000B9   287 _PT0	=	0x00b9
                           0000BA   288 _PX1	=	0x00ba
                           0000BB   289 _PT1	=	0x00bb
                           0000BC   290 _PS	=	0x00bc
                           0000D0   291 _P	=	0x00d0
                           0000D1   292 _F1	=	0x00d1
                           0000D2   293 _OV	=	0x00d2
                           0000D3   294 _RS0	=	0x00d3
                           0000D4   295 _RS1	=	0x00d4
                           0000D5   296 _F0	=	0x00d5
                           0000D6   297 _AC	=	0x00d6
                           0000D7   298 _CY	=	0x00d7
                                    299 ;--------------------------------------------------------
                                    300 ; overlayable register banks
                                    301 ;--------------------------------------------------------
                                    302 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        303 	.ds 8
                                    304 ;--------------------------------------------------------
                                    305 ; internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area DSEG    (DATA)
      000000                        308 _colloc::
      000000                        309 	.ds 1
      000001                        310 _rowloc::
      000001                        311 	.ds 1
      000002                        312 _lcd_address::
      000002                        313 	.ds 2
      000004                        314 _seg7_address::
      000004                        315 	.ds 2
      000006                        316 _temp_address::
      000006                        317 	.ds 2
      000008                        318 _light_address::
      000008                        319 	.ds 2
      00000A                        320 _read_ram_address::
      00000A                        321 	.ds 2
      00000C                        322 _cursor_x::
      00000C                        323 	.ds 2
      00000E                        324 _cursor_y::
      00000E                        325 	.ds 2
      000010                        326 _textsize::
      000010                        327 	.ds 1
      000011                        328 _rotation::
      000011                        329 	.ds 1
      000012                        330 _textcolor::
      000012                        331 	.ds 2
      000014                        332 _textbgcolor::
      000014                        333 	.ds 2
      000016                        334 _drawPixel_PARM_2:
      000016                        335 	.ds 2
      000018                        336 _drawPixel_PARM_3:
      000018                        337 	.ds 2
      00001A                        338 _drawCircle_PARM_2:
      00001A                        339 	.ds 2
      00001C                        340 _drawCircle_PARM_3:
      00001C                        341 	.ds 2
      00001E                        342 _drawCircle_PARM_4:
      00001E                        343 	.ds 2
      000020                        344 _drawCircle_x0_65536_105:
      000020                        345 	.ds 2
      000022                        346 _drawCircle_sloc0_1_0:
      000022                        347 	.ds 2
      000024                        348 _drawCircle_sloc1_1_0:
      000024                        349 	.ds 2
      000026                        350 _drawCircle_sloc2_1_0:
      000026                        351 	.ds 2
      000028                        352 _drawCircle_sloc3_1_0:
      000028                        353 	.ds 2
      00002A                        354 _drawCircle_sloc4_1_0:
      00002A                        355 	.ds 2
      00002C                        356 _testCircles_PARM_2:
      00002C                        357 	.ds 2
      00002E                        358 _testCircles_radius_65536_109:
      00002E                        359 	.ds 1
      00002F                        360 _testCircles_sloc0_1_0:
      00002F                        361 	.ds 2
      000031                        362 _fillRect_PARM_2:
      000031                        363 	.ds 2
      000033                        364 _fillRect_PARM_3:
      000033                        365 	.ds 2
      000035                        366 _fillRect_PARM_4:
      000035                        367 	.ds 2
      000037                        368 _fillRect_PARM_5:
      000037                        369 	.ds 2
      000039                        370 _drawChar_PARM_2:
      000039                        371 	.ds 2
      00003B                        372 _drawChar_PARM_3:
      00003B                        373 	.ds 1
      00003C                        374 _drawChar_PARM_4:
      00003C                        375 	.ds 2
      00003E                        376 _drawChar_PARM_5:
      00003E                        377 	.ds 2
      000040                        378 _drawChar_PARM_6:
      000040                        379 	.ds 1
      000041                        380 _drawChar_sloc1_1_0:
      000041                        381 	.ds 2
      000043                        382 _drawChar_sloc2_1_0:
      000043                        383 	.ds 2
      000045                        384 _drawChar_sloc3_1_0:
      000045                        385 	.ds 1
      000046                        386 _drawChar_sloc4_1_0:
      000046                        387 	.ds 1
      000047                        388 _drawChar_sloc5_1_0:
      000047                        389 	.ds 1
      000048                        390 _asciiToHex_store_65536_202:
      000048                        391 	.ds 2
      00004A                        392 _received_byte::
      00004A                        393 	.ds 1
      00004B                        394 _received_flag::
      00004B                        395 	.ds 1
      00004C                        396 _bit::
      00004C                        397 	.ds 1
      00004D                        398 _parity::
      00004D                        399 	.ds 1
      00004E                        400 _baud::
      00004E                        401 	.ds 1
                                    402 ;--------------------------------------------------------
                                    403 ; overlayable items in internal ram
                                    404 ;--------------------------------------------------------
                                    405 	.area	OSEG    (OVR,DATA)
      000000                        406 _iowrite8_PARM_2:
      000000                        407 	.ds 1
                                    408 	.area	OSEG    (OVR,DATA)
                                    409 	.area	OSEG    (OVR,DATA)
                                    410 	.area	OSEG    (OVR,DATA)
      000000                        411 _writeRegister8_PARM_2:
      000000                        412 	.ds 1
                                    413 	.area	OSEG    (OVR,DATA)
      000000                        414 _writeRegister16_PARM_2:
      000000                        415 	.ds 2
                                    416 	.area	OSEG    (OVR,DATA)
      000000                        417 _setCursor_PARM_2:
      000000                        418 	.ds 2
                                    419 	.area	OSEG    (OVR,DATA)
      000000                        420 _setTextColor_PARM_2:
      000000                        421 	.ds 2
                                    422 	.area	OSEG    (OVR,DATA)
                                    423 	.area	OSEG    (OVR,DATA)
      000000                        424 _setAddress_PARM_2:
      000000                        425 	.ds 2
      000002                        426 _setAddress_PARM_3:
      000002                        427 	.ds 2
      000004                        428 _setAddress_PARM_4:
      000004                        429 	.ds 2
                                    430 	.area	OSEG    (OVR,DATA)
                                    431 	.area	OSEG    (OVR,DATA)
                                    432 	.area	OSEG    (OVR,DATA)
                                    433 ;--------------------------------------------------------
                                    434 ; Stack segment in internal ram
                                    435 ;--------------------------------------------------------
                                    436 	.area	SSEG
      000000                        437 __start__stack:
      000000                        438 	.ds	1
                                    439 
                                    440 ;--------------------------------------------------------
                                    441 ; indirectly addressable internal ram data
                                    442 ;--------------------------------------------------------
                                    443 	.area ISEG    (DATA)
                                    444 ;--------------------------------------------------------
                                    445 ; absolute internal ram data
                                    446 ;--------------------------------------------------------
                                    447 	.area IABS    (ABS,DATA)
                                    448 	.area IABS    (ABS,DATA)
                                    449 ;--------------------------------------------------------
                                    450 ; bit data
                                    451 ;--------------------------------------------------------
                                    452 	.area BSEG    (BIT)
      000000                        453 _drawChar_sloc0_1_0:
      000000                        454 	.ds 1
      000001                        455 _convertAsciiHex_sloc0_1_0:
      000001                        456 	.ds 1
      000002                        457 _parity_check_sloc0_1_0:
      000002                        458 	.ds 1
                                    459 ;--------------------------------------------------------
                                    460 ; paged external ram data
                                    461 ;--------------------------------------------------------
                                    462 	.area PSEG    (PAG,XDATA)
                                    463 ;--------------------------------------------------------
                                    464 ; external ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area XSEG    (XDATA)
      000000                        467 __width::
      000000                        468 	.ds 2
      000002                        469 __height::
      000002                        470 	.ds 2
      000004                        471 _drawCircle_f_65536_106:
      000004                        472 	.ds 2
      000006                        473 _testCircles_x_65536_110:
      000006                        474 	.ds 2
      000008                        475 _testCircles_y_65536_110:
      000008                        476 	.ds 2
      00000A                        477 _drawChar_line_196609_153:
      00000A                        478 	.ds 1
      00000B                        479 _testRAM_d_65536_174:
      00000B                        480 	.ds 1
      00000C                        481 _freeType_count_65536_178:
      00000C                        482 	.ds 1
      00000D                        483 _reverse_rev_65536_196:
      00000D                        484 	.ds 2
      00000F                        485 _reverse_val_65536_196:
      00000F                        486 	.ds 2
      000011                        487 _asciiToDec_d_65536_198:
      000011                        488 	.ds 1
      000012                        489 _asciiToDec_val_65536_199:
      000012                        490 	.ds 1
      000013                        491 _asciiToDec_id_65536_199:
      000013                        492 	.ds 2
      000015                        493 _getAddress_address_65536_270:
      000015                        494 	.ds 2
      000017                        495 _getByte_byte_65536_273:
      000017                        496 	.ds 1
                                    497 ;--------------------------------------------------------
                                    498 ; absolute external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area XABS    (ABS,XDATA)
                                    501 ;--------------------------------------------------------
                                    502 ; external initialized ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area XISEG   (XDATA)
                                    505 	.area HOME    (CODE)
                                    506 	.area GSINIT0 (CODE)
                                    507 	.area GSINIT1 (CODE)
                                    508 	.area GSINIT2 (CODE)
                                    509 	.area GSINIT3 (CODE)
                                    510 	.area GSINIT4 (CODE)
                                    511 	.area GSINIT5 (CODE)
                                    512 	.area GSINIT  (CODE)
                                    513 	.area GSFINAL (CODE)
                                    514 	.area CSEG    (CODE)
                                    515 ;--------------------------------------------------------
                                    516 ; interrupt vector
                                    517 ;--------------------------------------------------------
                                    518 	.area HOME    (CODE)
      000000                        519 __interrupt_vect:
      000000 02r00r00         [24]  520 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  521 	reti
      000004                        522 	.ds	7
      00000B 32               [24]  523 	reti
      00000C                        524 	.ds	7
      000013 32               [24]  525 	reti
      000014                        526 	.ds	7
      00001B 32               [24]  527 	reti
      00001C                        528 	.ds	7
      000023 02r10r45         [24]  529 	ljmp	_ISR_receive
                                    530 ;--------------------------------------------------------
                                    531 ; global & static initialisations
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
                                    534 	.area GSINIT  (CODE)
                                    535 	.area GSFINAL (CODE)
                                    536 	.area GSINIT  (CODE)
                                    537 	.globl __sdcc_gsinit_startup
                                    538 	.globl __sdcc_program_startup
                                    539 	.globl __start__stack
                                    540 	.globl __mcs51_genXINIT
                                    541 	.globl __mcs51_genXRAMCLEAR
                                    542 	.globl __mcs51_genRAMCLEAR
                                    543 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  544 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  545 	mov	(_lcd_address + 1),#0x40
                                    546 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  547 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  548 	mov	(_seg7_address + 1),#0x80
                                    549 ;	ecen4330_lcd_v3.c:11: __xdata uint8_t* temp_address = (uint8_t __xdata*) __TEMP_ADDRESS__;
      00000C 75*06 00         [24]  550 	mov	_temp_address,#0x00
      00000F 75*07 C0         [24]  551 	mov	(_temp_address + 1),#0xc0
                                    552 ;	ecen4330_lcd_v3.c:12: __xdata uint8_t* light_address = (uint8_t __xdata*) __PHOT_ADDRESS__;
      000012 E4               [12]  553 	clr	a
      000013 F5*08            [12]  554 	mov	_light_address,a
      000015 F5*09            [12]  555 	mov	(_light_address + 1),a
                                    556 ;	USART.c:1: volatile unsigned char received_byte = 0;
                                    557 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000017 F5*4A            [12]  558 	mov	_received_byte,a
                                    559 ;	USART.c:2: volatile unsigned char received_flag = 0;
                                    560 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      000019 F5*4B            [12]  561 	mov	_received_flag,a
                                    562 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  563 	ljmp	__sdcc_program_startup
                                    564 ;--------------------------------------------------------
                                    565 ; Home
                                    566 ;--------------------------------------------------------
                                    567 	.area HOME    (CODE)
                                    568 	.area HOME    (CODE)
      000026                        569 __sdcc_program_startup:
      000026 02r18rA6         [24]  570 	ljmp	_main
                                    571 ;	return from main will return to caller
                                    572 ;--------------------------------------------------------
                                    573 ; code
                                    574 ;--------------------------------------------------------
                                    575 	.area CSEG    (CODE)
                                    576 ;------------------------------------------------------------
                                    577 ;Allocation info for local variables in function 'iowrite8'
                                    578 ;------------------------------------------------------------
                                    579 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    580 ;map_address               Allocated to registers r6 r7 
                                    581 ;------------------------------------------------------------
                                    582 ;	ecen4330_lcd_v3.c:50: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    583 ;	-----------------------------------------
                                    584 ;	 function iowrite8
                                    585 ;	-----------------------------------------
      000000                        586 _iowrite8:
                           000007   587 	ar7 = 0x07
                           000006   588 	ar6 = 0x06
                           000005   589 	ar5 = 0x05
                           000004   590 	ar4 = 0x04
                           000003   591 	ar3 = 0x03
                           000002   592 	ar2 = 0x02
                           000001   593 	ar1 = 0x01
                           000000   594 	ar0 = 0x00
      000000 AE 82            [24]  595 	mov	r6,dpl
      000002 AF 83            [24]  596 	mov	r7,dph
                                    597 ;	ecen4330_lcd_v3.c:51: IOM = 1;
                                    598 ;	assignBit
      000004 D2 B4            [12]  599 	setb	_P3_4
                                    600 ;	ecen4330_lcd_v3.c:52: *map_address = d;
      000006 8E 82            [24]  601 	mov	dpl,r6
      000008 8F 83            [24]  602 	mov	dph,r7
      00000A E5*00            [12]  603 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  604 	movx	@dptr,a
                                    605 ;	ecen4330_lcd_v3.c:53: IOM = 0;
                                    606 ;	assignBit
      00000D C2 B4            [12]  607 	clr	_P3_4
                                    608 ;	ecen4330_lcd_v3.c:54: }
      00000F 22               [24]  609 	ret
                                    610 ;------------------------------------------------------------
                                    611 ;Allocation info for local variables in function 'ioread8'
                                    612 ;------------------------------------------------------------
                                    613 ;map_address               Allocated to registers r6 r7 
                                    614 ;val                       Allocated to registers r6 
                                    615 ;------------------------------------------------------------
                                    616 ;	ecen4330_lcd_v3.c:62: uint8_t ioread8 (uint8_t __xdata* map_address) {
                                    617 ;	-----------------------------------------
                                    618 ;	 function ioread8
                                    619 ;	-----------------------------------------
      000010                        620 _ioread8:
      000010 AE 82            [24]  621 	mov	r6,dpl
      000012 AF 83            [24]  622 	mov	r7,dph
                                    623 ;	ecen4330_lcd_v3.c:64: IOM = 1;
                                    624 ;	assignBit
      000014 D2 B4            [12]  625 	setb	_P3_4
                                    626 ;	ecen4330_lcd_v3.c:65: val = *map_address;
      000016 8E 82            [24]  627 	mov	dpl,r6
      000018 8F 83            [24]  628 	mov	dph,r7
      00001A E0               [24]  629 	movx	a,@dptr
      00001B FE               [12]  630 	mov	r6,a
                                    631 ;	ecen4330_lcd_v3.c:66: IOM = 0;
                                    632 ;	assignBit
      00001C C2 B4            [12]  633 	clr	_P3_4
                                    634 ;	ecen4330_lcd_v3.c:67: return val;
      00001E 8E 82            [24]  635 	mov	dpl,r6
                                    636 ;	ecen4330_lcd_v3.c:68: }
      000020 22               [24]  637 	ret
                                    638 ;------------------------------------------------------------
                                    639 ;Allocation info for local variables in function 'delay'
                                    640 ;------------------------------------------------------------
                                    641 ;i                         Allocated with name '_delay_i_65536_29'
                                    642 ;j                         Allocated with name '_delay_j_65536_29'
                                    643 ;d                         Allocated to registers r6 r7 
                                    644 ;------------------------------------------------------------
                                    645 ;	ecen4330_lcd_v3.c:72: void delay (int16_t d) {
                                    646 ;	-----------------------------------------
                                    647 ;	 function delay
                                    648 ;	-----------------------------------------
      000021                        649 _delay:
      000021 AE 82            [24]  650 	mov	r6,dpl
      000023 AF 83            [24]  651 	mov	r7,dph
                                    652 ;	ecen4330_lcd_v3.c:75: for (i = 0; i < d; i++) {
      000025 7C 00            [12]  653 	mov	r4,#0x00
      000027 7D 00            [12]  654 	mov	r5,#0x00
      000029                        655 00107$:
      000029 8C 02            [24]  656 	mov	ar2,r4
      00002B 8D 03            [24]  657 	mov	ar3,r5
      00002D C3               [12]  658 	clr	c
      00002E EA               [12]  659 	mov	a,r2
      00002F 9E               [12]  660 	subb	a,r6
      000030 EB               [12]  661 	mov	a,r3
      000031 64 80            [12]  662 	xrl	a,#0x80
      000033 8F F0            [24]  663 	mov	b,r7
      000035 63 F0 80         [24]  664 	xrl	b,#0x80
      000038 95 F0            [12]  665 	subb	a,b
      00003A 50 14            [24]  666 	jnc	00109$
                                    667 ;	ecen4330_lcd_v3.c:76: for (j = 0; j < 1000; j++);
      00003C 7A E8            [12]  668 	mov	r2,#0xe8
      00003E 7B 03            [12]  669 	mov	r3,#0x03
      000040                        670 00105$:
      000040 1A               [12]  671 	dec	r2
      000041 BA FF 01         [24]  672 	cjne	r2,#0xff,00130$
      000044 1B               [12]  673 	dec	r3
      000045                        674 00130$:
      000045 EA               [12]  675 	mov	a,r2
      000046 4B               [12]  676 	orl	a,r3
      000047 70 F7            [24]  677 	jnz	00105$
                                    678 ;	ecen4330_lcd_v3.c:75: for (i = 0; i < d; i++) {
      000049 0C               [12]  679 	inc	r4
      00004A BC 00 DC         [24]  680 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  681 	inc	r5
      00004E 80 D9            [24]  682 	sjmp	00107$
      000050                        683 00109$:
                                    684 ;	ecen4330_lcd_v3.c:78: }
      000050 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'writeRegister8'
                                    688 ;------------------------------------------------------------
                                    689 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    690 ;a                         Allocated to registers r7 
                                    691 ;------------------------------------------------------------
                                    692 ;	ecen4330_lcd_v3.c:88: void writeRegister8 (uint8_t a, uint8_t d) {
                                    693 ;	-----------------------------------------
                                    694 ;	 function writeRegister8
                                    695 ;	-----------------------------------------
      000051                        696 _writeRegister8:
      000051 AF 82            [24]  697 	mov	r7,dpl
                                    698 ;	ecen4330_lcd_v3.c:89: CD = __CMD__;
                                    699 ;	assignBit
      000053 C2 B5            [12]  700 	clr	_P3_5
                                    701 ;	ecen4330_lcd_v3.c:90: write8(a);
                                    702 ;	assignBit
      000055 D2 B4            [12]  703 	setb	_P3_4
      000057 85*02 82         [24]  704 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  705 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  706 	mov	a,r7
      00005E F0               [24]  707 	movx	@dptr,a
                                    708 ;	assignBit
      00005F C2 B4            [12]  709 	clr	_P3_4
                                    710 ;	ecen4330_lcd_v3.c:91: CD = __DATA__;
                                    711 ;	assignBit
      000061 D2 B5            [12]  712 	setb	_P3_5
                                    713 ;	ecen4330_lcd_v3.c:92: write8(d);
                                    714 ;	assignBit
      000063 D2 B4            [12]  715 	setb	_P3_4
      000065 85*02 82         [24]  716 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  717 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  718 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  719 	movx	@dptr,a
                                    720 ;	assignBit
      00006E C2 B4            [12]  721 	clr	_P3_4
                                    722 ;	ecen4330_lcd_v3.c:93: }
      000070 22               [24]  723 	ret
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function 'writeRegister16'
                                    726 ;------------------------------------------------------------
                                    727 ;hi                        Allocated with name '_writeRegister16_hi_65536_38'
                                    728 ;lo                        Allocated with name '_writeRegister16_lo_65536_38'
                                    729 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    730 ;a                         Allocated to registers r6 r7 
                                    731 ;------------------------------------------------------------
                                    732 ;	ecen4330_lcd_v3.c:97: void writeRegister16 (uint16_t a, uint16_t d) {
                                    733 ;	-----------------------------------------
                                    734 ;	 function writeRegister16
                                    735 ;	-----------------------------------------
      000071                        736 _writeRegister16:
      000071 AE 82            [24]  737 	mov	r6,dpl
      000073 AF 83            [24]  738 	mov	r7,dph
                                    739 ;	ecen4330_lcd_v3.c:99: hi = (a) >> 8;
      000075 8F 05            [24]  740 	mov	ar5,r7
                                    741 ;	ecen4330_lcd_v3.c:100: lo = (a);
                                    742 ;	ecen4330_lcd_v3.c:101: write8Reg(hi);
                                    743 ;	assignBit
      000077 C2 B5            [12]  744 	clr	_P3_5
                                    745 ;	assignBit
      000079 D2 B4            [12]  746 	setb	_P3_4
      00007B 85*02 82         [24]  747 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  748 	mov	dph,(_lcd_address + 1)
      000081 ED               [12]  749 	mov	a,r5
      000082 F0               [24]  750 	movx	@dptr,a
                                    751 ;	assignBit
      000083 C2 B4            [12]  752 	clr	_P3_4
                                    753 ;	ecen4330_lcd_v3.c:102: write8Reg(lo);
                                    754 ;	assignBit
      000085 C2 B5            [12]  755 	clr	_P3_5
                                    756 ;	assignBit
      000087 D2 B4            [12]  757 	setb	_P3_4
      000089 85*02 82         [24]  758 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  759 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  760 	mov	a,r6
      000090 F0               [24]  761 	movx	@dptr,a
                                    762 ;	assignBit
      000091 C2 B4            [12]  763 	clr	_P3_4
                                    764 ;	ecen4330_lcd_v3.c:103: hi = (d) >> 8;
      000093 AF*01            [24]  765 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    766 ;	ecen4330_lcd_v3.c:104: lo = (d);
      000095 AE*00            [24]  767 	mov	r6,_writeRegister16_PARM_2
                                    768 ;	ecen4330_lcd_v3.c:105: CD = 1 ;
                                    769 ;	assignBit
      000097 D2 B5            [12]  770 	setb	_P3_5
                                    771 ;	ecen4330_lcd_v3.c:106: write8Data(hi);
                                    772 ;	assignBit
      000099 D2 B5            [12]  773 	setb	_P3_5
                                    774 ;	assignBit
      00009B D2 B4            [12]  775 	setb	_P3_4
      00009D 85*02 82         [24]  776 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  777 	mov	dph,(_lcd_address + 1)
      0000A3 EF               [12]  778 	mov	a,r7
      0000A4 F0               [24]  779 	movx	@dptr,a
                                    780 ;	assignBit
      0000A5 C2 B4            [12]  781 	clr	_P3_4
                                    782 ;	ecen4330_lcd_v3.c:107: write8Data(lo);
                                    783 ;	assignBit
      0000A7 D2 B5            [12]  784 	setb	_P3_5
                                    785 ;	assignBit
      0000A9 D2 B4            [12]  786 	setb	_P3_4
      0000AB 85*02 82         [24]  787 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  788 	mov	dph,(_lcd_address + 1)
      0000B1 EE               [12]  789 	mov	a,r6
      0000B2 F0               [24]  790 	movx	@dptr,a
                                    791 ;	assignBit
      0000B3 C2 B4            [12]  792 	clr	_P3_4
                                    793 ;	ecen4330_lcd_v3.c:108: }
      0000B5 22               [24]  794 	ret
                                    795 ;------------------------------------------------------------
                                    796 ;Allocation info for local variables in function 'setCursor'
                                    797 ;------------------------------------------------------------
                                    798 ;y                         Allocated with name '_setCursor_PARM_2'
                                    799 ;x                         Allocated to registers 
                                    800 ;------------------------------------------------------------
                                    801 ;	ecen4330_lcd_v3.c:116: void setCursor (uint16_t x, uint16_t y) {
                                    802 ;	-----------------------------------------
                                    803 ;	 function setCursor
                                    804 ;	-----------------------------------------
      0000B6                        805 _setCursor:
      0000B6 85 82*0C         [24]  806 	mov	_cursor_x,dpl
      0000B9 85 83*0D         [24]  807 	mov	(_cursor_x + 1),dph
                                    808 ;	ecen4330_lcd_v3.c:118: cursor_y = y;
      0000BC 85*00*0E         [24]  809 	mov	_cursor_y,_setCursor_PARM_2
      0000BF 85*01*0F         [24]  810 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    811 ;	ecen4330_lcd_v3.c:119: }
      0000C2 22               [24]  812 	ret
                                    813 ;------------------------------------------------------------
                                    814 ;Allocation info for local variables in function 'setTextColor'
                                    815 ;------------------------------------------------------------
                                    816 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    817 ;x                         Allocated to registers 
                                    818 ;------------------------------------------------------------
                                    819 ;	ecen4330_lcd_v3.c:126: void setTextColor (uint16_t x, uint16_t y) {
                                    820 ;	-----------------------------------------
                                    821 ;	 function setTextColor
                                    822 ;	-----------------------------------------
      0000C3                        823 _setTextColor:
      0000C3 85 82*12         [24]  824 	mov	_textcolor,dpl
      0000C6 85 83*13         [24]  825 	mov	(_textcolor + 1),dph
                                    826 ;	ecen4330_lcd_v3.c:128: textbgcolor = y;
      0000C9 85*00*14         [24]  827 	mov	_textbgcolor,_setTextColor_PARM_2
      0000CC 85*01*15         [24]  828 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    829 ;	ecen4330_lcd_v3.c:129: }
      0000CF 22               [24]  830 	ret
                                    831 ;------------------------------------------------------------
                                    832 ;Allocation info for local variables in function 'setTextSize'
                                    833 ;------------------------------------------------------------
                                    834 ;s                         Allocated to registers r7 
                                    835 ;------------------------------------------------------------
                                    836 ;	ecen4330_lcd_v3.c:136: void setTextSize (uint8_t s) {
                                    837 ;	-----------------------------------------
                                    838 ;	 function setTextSize
                                    839 ;	-----------------------------------------
      0000D0                        840 _setTextSize:
                                    841 ;	ecen4330_lcd_v3.c:137: if (s > 8) return;
      0000D0 E5 82            [12]  842 	mov	a,dpl
      0000D2 FF               [12]  843 	mov	r7,a
      0000D3 24 F7            [12]  844 	add	a,#0xff - 0x08
      0000D5 50 01            [24]  845 	jnc	00102$
      0000D7 22               [24]  846 	ret
      0000D8                        847 00102$:
                                    848 ;	ecen4330_lcd_v3.c:138: textsize = (s > 0) ? s : 1 ;
      0000D8 EF               [12]  849 	mov	a,r7
      0000D9 60 06            [24]  850 	jz	00105$
      0000DB 8F 06            [24]  851 	mov	ar6,r7
      0000DD 7F 00            [12]  852 	mov	r7,#0x00
      0000DF 80 04            [24]  853 	sjmp	00106$
      0000E1                        854 00105$:
      0000E1 7E 01            [12]  855 	mov	r6,#0x01
      0000E3 7F 00            [12]  856 	mov	r7,#0x00
      0000E5                        857 00106$:
      0000E5 8E*10            [24]  858 	mov	_textsize,r6
                                    859 ;	ecen4330_lcd_v3.c:139: }
      0000E7 22               [24]  860 	ret
                                    861 ;------------------------------------------------------------
                                    862 ;Allocation info for local variables in function 'setRotation'
                                    863 ;------------------------------------------------------------
                                    864 ;flag                      Allocated to registers r7 
                                    865 ;------------------------------------------------------------
                                    866 ;	ecen4330_lcd_v3.c:151: void setRotation (uint8_t flag) {
                                    867 ;	-----------------------------------------
                                    868 ;	 function setRotation
                                    869 ;	-----------------------------------------
      0000E8                        870 _setRotation:
                                    871 ;	ecen4330_lcd_v3.c:152: switch(flag) {
      0000E8 E5 82            [12]  872 	mov	a,dpl
      0000EA FF               [12]  873 	mov	r7,a
      0000EB 24 FC            [12]  874 	add	a,#0xff - 0x03
      0000ED 40 6A            [24]  875 	jc	00105$
      0000EF EF               [12]  876 	mov	a,r7
      0000F0 2F               [12]  877 	add	a,r7
                                    878 ;	ecen4330_lcd_v3.c:153: case 0:
      0000F1 90r00rF5         [24]  879 	mov	dptr,#00115$
      0000F4 73               [24]  880 	jmp	@a+dptr
      0000F5                        881 00115$:
      0000F5 80 06            [24]  882 	sjmp	00101$
      0000F7 80 1B            [24]  883 	sjmp	00102$
      0000F9 80 30            [24]  884 	sjmp	00103$
      0000FB 80 45            [24]  885 	sjmp	00104$
      0000FD                        886 00101$:
                                    887 ;	ecen4330_lcd_v3.c:154: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000FD 7F 48            [12]  888 	mov	r7,#0x48
                                    889 ;	ecen4330_lcd_v3.c:155: _width = TFTWIDTH;
      0000FF 90r00r00         [24]  890 	mov	dptr,#__width
      000102 74 F0            [12]  891 	mov	a,#0xf0
      000104 F0               [24]  892 	movx	@dptr,a
      000105 E4               [12]  893 	clr	a
      000106 A3               [24]  894 	inc	dptr
      000107 F0               [24]  895 	movx	@dptr,a
                                    896 ;	ecen4330_lcd_v3.c:156: _height = TFTHEIGHT;
      000108 90r00r02         [24]  897 	mov	dptr,#__height
      00010B 74 40            [12]  898 	mov	a,#0x40
      00010D F0               [24]  899 	movx	@dptr,a
      00010E 74 01            [12]  900 	mov	a,#0x01
      000110 A3               [24]  901 	inc	dptr
      000111 F0               [24]  902 	movx	@dptr,a
                                    903 ;	ecen4330_lcd_v3.c:157: break;
                                    904 ;	ecen4330_lcd_v3.c:158: case 1:
      000112 80 5A            [24]  905 	sjmp	00106$
      000114                        906 00102$:
                                    907 ;	ecen4330_lcd_v3.c:159: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000114 7F 28            [12]  908 	mov	r7,#0x28
                                    909 ;	ecen4330_lcd_v3.c:160: _width = TFTHEIGHT;
      000116 90r00r00         [24]  910 	mov	dptr,#__width
      000119 74 40            [12]  911 	mov	a,#0x40
      00011B F0               [24]  912 	movx	@dptr,a
      00011C 74 01            [12]  913 	mov	a,#0x01
      00011E A3               [24]  914 	inc	dptr
      00011F F0               [24]  915 	movx	@dptr,a
                                    916 ;	ecen4330_lcd_v3.c:161: _height = TFTWIDTH;
      000120 90r00r02         [24]  917 	mov	dptr,#__height
      000123 74 F0            [12]  918 	mov	a,#0xf0
      000125 F0               [24]  919 	movx	@dptr,a
      000126 E4               [12]  920 	clr	a
      000127 A3               [24]  921 	inc	dptr
      000128 F0               [24]  922 	movx	@dptr,a
                                    923 ;	ecen4330_lcd_v3.c:162: break;
                                    924 ;	ecen4330_lcd_v3.c:163: case 2:
      000129 80 43            [24]  925 	sjmp	00106$
      00012B                        926 00103$:
                                    927 ;	ecen4330_lcd_v3.c:164: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00012B 7F 88            [12]  928 	mov	r7,#0x88
                                    929 ;	ecen4330_lcd_v3.c:165: _width = TFTWIDTH;
      00012D 90r00r00         [24]  930 	mov	dptr,#__width
      000130 74 F0            [12]  931 	mov	a,#0xf0
      000132 F0               [24]  932 	movx	@dptr,a
      000133 E4               [12]  933 	clr	a
      000134 A3               [24]  934 	inc	dptr
      000135 F0               [24]  935 	movx	@dptr,a
                                    936 ;	ecen4330_lcd_v3.c:166: _height = TFTHEIGHT;
      000136 90r00r02         [24]  937 	mov	dptr,#__height
      000139 74 40            [12]  938 	mov	a,#0x40
      00013B F0               [24]  939 	movx	@dptr,a
      00013C 74 01            [12]  940 	mov	a,#0x01
      00013E A3               [24]  941 	inc	dptr
      00013F F0               [24]  942 	movx	@dptr,a
                                    943 ;	ecen4330_lcd_v3.c:167: break;
                                    944 ;	ecen4330_lcd_v3.c:168: case 3:
      000140 80 2C            [24]  945 	sjmp	00106$
      000142                        946 00104$:
                                    947 ;	ecen4330_lcd_v3.c:169: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000142 7F E8            [12]  948 	mov	r7,#0xe8
                                    949 ;	ecen4330_lcd_v3.c:170: _width = TFTHEIGHT;
      000144 90r00r00         [24]  950 	mov	dptr,#__width
      000147 74 40            [12]  951 	mov	a,#0x40
      000149 F0               [24]  952 	movx	@dptr,a
      00014A 74 01            [12]  953 	mov	a,#0x01
      00014C A3               [24]  954 	inc	dptr
      00014D F0               [24]  955 	movx	@dptr,a
                                    956 ;	ecen4330_lcd_v3.c:171: _height = TFTWIDTH;
      00014E 90r00r02         [24]  957 	mov	dptr,#__height
      000151 74 F0            [12]  958 	mov	a,#0xf0
      000153 F0               [24]  959 	movx	@dptr,a
      000154 E4               [12]  960 	clr	a
      000155 A3               [24]  961 	inc	dptr
      000156 F0               [24]  962 	movx	@dptr,a
                                    963 ;	ecen4330_lcd_v3.c:172: break;
                                    964 ;	ecen4330_lcd_v3.c:173: default:
      000157 80 15            [24]  965 	sjmp	00106$
      000159                        966 00105$:
                                    967 ;	ecen4330_lcd_v3.c:174: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000159 7F 48            [12]  968 	mov	r7,#0x48
                                    969 ;	ecen4330_lcd_v3.c:175: _width = TFTWIDTH;
      00015B 90r00r00         [24]  970 	mov	dptr,#__width
      00015E 74 F0            [12]  971 	mov	a,#0xf0
      000160 F0               [24]  972 	movx	@dptr,a
      000161 E4               [12]  973 	clr	a
      000162 A3               [24]  974 	inc	dptr
      000163 F0               [24]  975 	movx	@dptr,a
                                    976 ;	ecen4330_lcd_v3.c:176: _height = TFTHEIGHT;
      000164 90r00r02         [24]  977 	mov	dptr,#__height
      000167 74 40            [12]  978 	mov	a,#0x40
      000169 F0               [24]  979 	movx	@dptr,a
      00016A 74 01            [12]  980 	mov	a,#0x01
      00016C A3               [24]  981 	inc	dptr
      00016D F0               [24]  982 	movx	@dptr,a
                                    983 ;	ecen4330_lcd_v3.c:178: }
      00016E                        984 00106$:
                                    985 ;	ecen4330_lcd_v3.c:179: writeRegister8(ILI9341_MEMCONTROL, flag);
      00016E 8F*00            [24]  986 	mov	_writeRegister8_PARM_2,r7
      000170 75 82 36         [24]  987 	mov	dpl,#0x36
                                    988 ;	ecen4330_lcd_v3.c:180: }
      000173 02r00r51         [24]  989 	ljmp	_writeRegister8
                                    990 ;------------------------------------------------------------
                                    991 ;Allocation info for local variables in function 'setAddress'
                                    992 ;------------------------------------------------------------
                                    993 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    994 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    995 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    996 ;x1                        Allocated to registers r6 r7 
                                    997 ;------------------------------------------------------------
                                    998 ;	ecen4330_lcd_v3.c:182: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function setAddress
                                   1001 ;	-----------------------------------------
      000176                       1002 _setAddress:
      000176 AE 82            [24] 1003 	mov	r6,dpl
      000178 AF 83            [24] 1004 	mov	r7,dph
                                   1005 ;	ecen4330_lcd_v3.c:183: write8Reg(0x2A);
                                   1006 ;	assignBit
      00017A C2 B5            [12] 1007 	clr	_P3_5
                                   1008 ;	assignBit
      00017C D2 B4            [12] 1009 	setb	_P3_4
      00017E 85*02 82         [24] 1010 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1011 	mov	dph,(_lcd_address + 1)
      000184 74 2A            [12] 1012 	mov	a,#0x2a
      000186 F0               [24] 1013 	movx	@dptr,a
                                   1014 ;	assignBit
      000187 C2 B4            [12] 1015 	clr	_P3_4
                                   1016 ;	ecen4330_lcd_v3.c:184: write8Data(x1 >> 8);
                                   1017 ;	assignBit
      000189 D2 B5            [12] 1018 	setb	_P3_5
                                   1019 ;	assignBit
      00018B D2 B4            [12] 1020 	setb	_P3_4
      00018D 85*02 82         [24] 1021 	mov	dpl,_lcd_address
      000190 85*03 83         [24] 1022 	mov	dph,(_lcd_address + 1)
      000193 8F 05            [24] 1023 	mov	ar5,r7
      000195 ED               [12] 1024 	mov	a,r5
      000196 F0               [24] 1025 	movx	@dptr,a
                                   1026 ;	assignBit
      000197 C2 B4            [12] 1027 	clr	_P3_4
                                   1028 ;	ecen4330_lcd_v3.c:185: write8Data(x1);
                                   1029 ;	assignBit
      000199 D2 B5            [12] 1030 	setb	_P3_5
                                   1031 ;	assignBit
      00019B D2 B4            [12] 1032 	setb	_P3_4
      00019D 85*02 82         [24] 1033 	mov	dpl,_lcd_address
      0001A0 85*03 83         [24] 1034 	mov	dph,(_lcd_address + 1)
      0001A3 EE               [12] 1035 	mov	a,r6
      0001A4 F0               [24] 1036 	movx	@dptr,a
                                   1037 ;	assignBit
      0001A5 C2 B4            [12] 1038 	clr	_P3_4
                                   1039 ;	ecen4330_lcd_v3.c:186: write8Data(x2 >> 8);
                                   1040 ;	assignBit
      0001A7 D2 B5            [12] 1041 	setb	_P3_5
                                   1042 ;	assignBit
      0001A9 D2 B4            [12] 1043 	setb	_P3_4
      0001AB 85*02 82         [24] 1044 	mov	dpl,_lcd_address
      0001AE 85*03 83         [24] 1045 	mov	dph,(_lcd_address + 1)
      0001B1 E5*03            [12] 1046 	mov	a,(_setAddress_PARM_3 + 1)
      0001B3 F0               [24] 1047 	movx	@dptr,a
                                   1048 ;	assignBit
      0001B4 C2 B4            [12] 1049 	clr	_P3_4
                                   1050 ;	ecen4330_lcd_v3.c:187: write8Data(x2);
                                   1051 ;	assignBit
      0001B6 D2 B5            [12] 1052 	setb	_P3_5
                                   1053 ;	assignBit
      0001B8 D2 B4            [12] 1054 	setb	_P3_4
      0001BA 85*02 82         [24] 1055 	mov	dpl,_lcd_address
      0001BD 85*03 83         [24] 1056 	mov	dph,(_lcd_address + 1)
      0001C0 E5*02            [12] 1057 	mov	a,_setAddress_PARM_3
      0001C2 F0               [24] 1058 	movx	@dptr,a
                                   1059 ;	assignBit
      0001C3 C2 B4            [12] 1060 	clr	_P3_4
                                   1061 ;	ecen4330_lcd_v3.c:189: write8Reg(0x2B);
                                   1062 ;	assignBit
      0001C5 C2 B5            [12] 1063 	clr	_P3_5
                                   1064 ;	assignBit
      0001C7 D2 B4            [12] 1065 	setb	_P3_4
      0001C9 85*02 82         [24] 1066 	mov	dpl,_lcd_address
      0001CC 85*03 83         [24] 1067 	mov	dph,(_lcd_address + 1)
      0001CF 74 2B            [12] 1068 	mov	a,#0x2b
      0001D1 F0               [24] 1069 	movx	@dptr,a
                                   1070 ;	assignBit
      0001D2 C2 B4            [12] 1071 	clr	_P3_4
                                   1072 ;	ecen4330_lcd_v3.c:190: write8Data(y1 >> 8);
                                   1073 ;	assignBit
      0001D4 D2 B5            [12] 1074 	setb	_P3_5
                                   1075 ;	assignBit
      0001D6 D2 B4            [12] 1076 	setb	_P3_4
      0001D8 85*02 82         [24] 1077 	mov	dpl,_lcd_address
      0001DB 85*03 83         [24] 1078 	mov	dph,(_lcd_address + 1)
      0001DE E5*01            [12] 1079 	mov	a,(_setAddress_PARM_2 + 1)
      0001E0 F0               [24] 1080 	movx	@dptr,a
                                   1081 ;	assignBit
      0001E1 C2 B4            [12] 1082 	clr	_P3_4
                                   1083 ;	ecen4330_lcd_v3.c:191: write8Data(y1);
                                   1084 ;	assignBit
      0001E3 D2 B5            [12] 1085 	setb	_P3_5
                                   1086 ;	assignBit
      0001E5 D2 B4            [12] 1087 	setb	_P3_4
      0001E7 85*02 82         [24] 1088 	mov	dpl,_lcd_address
      0001EA 85*03 83         [24] 1089 	mov	dph,(_lcd_address + 1)
      0001ED E5*00            [12] 1090 	mov	a,_setAddress_PARM_2
      0001EF F0               [24] 1091 	movx	@dptr,a
                                   1092 ;	assignBit
      0001F0 C2 B4            [12] 1093 	clr	_P3_4
                                   1094 ;	ecen4330_lcd_v3.c:192: write8Data(y2 >> 8);
                                   1095 ;	assignBit
      0001F2 D2 B5            [12] 1096 	setb	_P3_5
                                   1097 ;	assignBit
      0001F4 D2 B4            [12] 1098 	setb	_P3_4
      0001F6 85*02 82         [24] 1099 	mov	dpl,_lcd_address
      0001F9 85*03 83         [24] 1100 	mov	dph,(_lcd_address + 1)
      0001FC E5*05            [12] 1101 	mov	a,(_setAddress_PARM_4 + 1)
      0001FE F0               [24] 1102 	movx	@dptr,a
                                   1103 ;	assignBit
      0001FF C2 B4            [12] 1104 	clr	_P3_4
                                   1105 ;	ecen4330_lcd_v3.c:193: write8Data(y2);
                                   1106 ;	assignBit
      000201 D2 B5            [12] 1107 	setb	_P3_5
                                   1108 ;	assignBit
      000203 D2 B4            [12] 1109 	setb	_P3_4
      000205 85*02 82         [24] 1110 	mov	dpl,_lcd_address
      000208 85*03 83         [24] 1111 	mov	dph,(_lcd_address + 1)
      00020B E5*04            [12] 1112 	mov	a,_setAddress_PARM_4
      00020D F0               [24] 1113 	movx	@dptr,a
                                   1114 ;	assignBit
      00020E C2 B4            [12] 1115 	clr	_P3_4
                                   1116 ;	ecen4330_lcd_v3.c:194: }
      000210 22               [24] 1117 	ret
                                   1118 ;------------------------------------------------------------
                                   1119 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1120 ;------------------------------------------------------------
                                   1121 ;	ecen4330_lcd_v3.c:200: void TFT_LCD_INIT (void) {
                                   1122 ;	-----------------------------------------
                                   1123 ;	 function TFT_LCD_INIT
                                   1124 ;	-----------------------------------------
      000211                       1125 _TFT_LCD_INIT:
                                   1126 ;	ecen4330_lcd_v3.c:201: _width = TFTWIDTH;
      000211 90r00r00         [24] 1127 	mov	dptr,#__width
      000214 74 F0            [12] 1128 	mov	a,#0xf0
      000216 F0               [24] 1129 	movx	@dptr,a
      000217 E4               [12] 1130 	clr	a
      000218 A3               [24] 1131 	inc	dptr
      000219 F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	ecen4330_lcd_v3.c:202: _height = TFTHEIGHT;
      00021A 90r00r02         [24] 1134 	mov	dptr,#__height
      00021D 74 40            [12] 1135 	mov	a,#0x40
      00021F F0               [24] 1136 	movx	@dptr,a
      000220 74 01            [12] 1137 	mov	a,#0x01
      000222 A3               [24] 1138 	inc	dptr
      000223 F0               [24] 1139 	movx	@dptr,a
                                   1140 ;	ecen4330_lcd_v3.c:204: IOM = 0;
                                   1141 ;	assignBit
      000224 C2 B4            [12] 1142 	clr	_P3_4
                                   1143 ;	ecen4330_lcd_v3.c:205: CD = 1;
                                   1144 ;	assignBit
      000226 D2 B5            [12] 1145 	setb	_P3_5
                                   1146 ;	ecen4330_lcd_v3.c:207: write8Reg(0x00);
                                   1147 ;	assignBit
      000228 C2 B5            [12] 1148 	clr	_P3_5
                                   1149 ;	assignBit
      00022A D2 B4            [12] 1150 	setb	_P3_4
      00022C 85*02 82         [24] 1151 	mov	dpl,_lcd_address
      00022F 85*03 83         [24] 1152 	mov	dph,(_lcd_address + 1)
      000232 E4               [12] 1153 	clr	a
      000233 F0               [24] 1154 	movx	@dptr,a
                                   1155 ;	assignBit
      000234 C2 B4            [12] 1156 	clr	_P3_4
                                   1157 ;	ecen4330_lcd_v3.c:208: write8Data(0x00);
                                   1158 ;	assignBit
      000236 D2 B5            [12] 1159 	setb	_P3_5
                                   1160 ;	assignBit
      000238 D2 B4            [12] 1161 	setb	_P3_4
      00023A 85*02 82         [24] 1162 	mov	dpl,_lcd_address
      00023D 85*03 83         [24] 1163 	mov	dph,(_lcd_address + 1)
      000240 E4               [12] 1164 	clr	a
      000241 F0               [24] 1165 	movx	@dptr,a
                                   1166 ;	assignBit
      000242 C2 B4            [12] 1167 	clr	_P3_4
                                   1168 ;	ecen4330_lcd_v3.c:209: write8Data(0x00);
                                   1169 ;	assignBit
      000244 D2 B5            [12] 1170 	setb	_P3_5
                                   1171 ;	assignBit
      000246 D2 B4            [12] 1172 	setb	_P3_4
      000248 85*02 82         [24] 1173 	mov	dpl,_lcd_address
      00024B 85*03 83         [24] 1174 	mov	dph,(_lcd_address + 1)
      00024E E4               [12] 1175 	clr	a
      00024F F0               [24] 1176 	movx	@dptr,a
                                   1177 ;	assignBit
      000250 C2 B4            [12] 1178 	clr	_P3_4
                                   1179 ;	ecen4330_lcd_v3.c:210: write8Data(0x00);
                                   1180 ;	assignBit
      000252 D2 B5            [12] 1181 	setb	_P3_5
                                   1182 ;	assignBit
      000254 D2 B4            [12] 1183 	setb	_P3_4
      000256 85*02 82         [24] 1184 	mov	dpl,_lcd_address
      000259 85*03 83         [24] 1185 	mov	dph,(_lcd_address + 1)
      00025C E4               [12] 1186 	clr	a
      00025D F0               [24] 1187 	movx	@dptr,a
                                   1188 ;	assignBit
      00025E C2 B4            [12] 1189 	clr	_P3_4
                                   1190 ;	ecen4330_lcd_v3.c:211: delay(200);
      000260 90 00 C8         [24] 1191 	mov	dptr,#0x00c8
      000263 12r00r21         [24] 1192 	lcall	_delay
                                   1193 ;	ecen4330_lcd_v3.c:213: writeRegister8(ILI9341_SOFTRESET, 0);
      000266 75*00 00         [24] 1194 	mov	_writeRegister8_PARM_2,#0x00
      000269 75 82 01         [24] 1195 	mov	dpl,#0x01
      00026C 12r00r51         [24] 1196 	lcall	_writeRegister8
                                   1197 ;	ecen4330_lcd_v3.c:214: delay(50);
      00026F 90 00 32         [24] 1198 	mov	dptr,#0x0032
      000272 12r00r21         [24] 1199 	lcall	_delay
                                   1200 ;	ecen4330_lcd_v3.c:215: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000275 75*00 00         [24] 1201 	mov	_writeRegister8_PARM_2,#0x00
      000278 75 82 28         [24] 1202 	mov	dpl,#0x28
      00027B 12r00r51         [24] 1203 	lcall	_writeRegister8
                                   1204 ;	ecen4330_lcd_v3.c:216: delay(10);
      00027E 90 00 0A         [24] 1205 	mov	dptr,#0x000a
      000281 12r00r21         [24] 1206 	lcall	_delay
                                   1207 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000284 75*00 23         [24] 1208 	mov	_writeRegister8_PARM_2,#0x23
      000287 75 82 C0         [24] 1209 	mov	dpl,#0xc0
      00028A 12r00r51         [24] 1210 	lcall	_writeRegister8
                                   1211 ;	ecen4330_lcd_v3.c:219: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00028D 75*00 11         [24] 1212 	mov	_writeRegister8_PARM_2,#0x11
      000290 75 82 C1         [24] 1213 	mov	dpl,#0xc1
      000293 12r00r51         [24] 1214 	lcall	_writeRegister8
                                   1215 ;	ecen4330_lcd_v3.c:220: write8Reg(ILI9341_VCOMCONTROL1);
                                   1216 ;	assignBit
      000296 C2 B5            [12] 1217 	clr	_P3_5
                                   1218 ;	assignBit
      000298 D2 B4            [12] 1219 	setb	_P3_4
      00029A 85*02 82         [24] 1220 	mov	dpl,_lcd_address
      00029D 85*03 83         [24] 1221 	mov	dph,(_lcd_address + 1)
      0002A0 74 C5            [12] 1222 	mov	a,#0xc5
      0002A2 F0               [24] 1223 	movx	@dptr,a
                                   1224 ;	assignBit
      0002A3 C2 B4            [12] 1225 	clr	_P3_4
                                   1226 ;	ecen4330_lcd_v3.c:221: write8Data(0x3d);
                                   1227 ;	assignBit
      0002A5 D2 B5            [12] 1228 	setb	_P3_5
                                   1229 ;	assignBit
      0002A7 D2 B4            [12] 1230 	setb	_P3_4
      0002A9 85*02 82         [24] 1231 	mov	dpl,_lcd_address
      0002AC 85*03 83         [24] 1232 	mov	dph,(_lcd_address + 1)
      0002AF 74 3D            [12] 1233 	mov	a,#0x3d
      0002B1 F0               [24] 1234 	movx	@dptr,a
                                   1235 ;	assignBit
      0002B2 C2 B4            [12] 1236 	clr	_P3_4
                                   1237 ;	ecen4330_lcd_v3.c:222: write8Data(0x30);
                                   1238 ;	assignBit
      0002B4 D2 B5            [12] 1239 	setb	_P3_5
                                   1240 ;	assignBit
      0002B6 D2 B4            [12] 1241 	setb	_P3_4
      0002B8 85*02 82         [24] 1242 	mov	dpl,_lcd_address
      0002BB 85*03 83         [24] 1243 	mov	dph,(_lcd_address + 1)
      0002BE 74 30            [12] 1244 	mov	a,#0x30
      0002C0 F0               [24] 1245 	movx	@dptr,a
                                   1246 ;	assignBit
      0002C1 C2 B4            [12] 1247 	clr	_P3_4
                                   1248 ;	ecen4330_lcd_v3.c:223: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0002C3 75*00 AA         [24] 1249 	mov	_writeRegister8_PARM_2,#0xaa
      0002C6 75 82 C7         [24] 1250 	mov	dpl,#0xc7
      0002C9 12r00r51         [24] 1251 	lcall	_writeRegister8
                                   1252 ;	ecen4330_lcd_v3.c:224: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0002CC 75*00 88         [24] 1253 	mov	_writeRegister8_PARM_2,#0x88
      0002CF 75 82 36         [24] 1254 	mov	dpl,#0x36
      0002D2 12r00r51         [24] 1255 	lcall	_writeRegister8
                                   1256 ;	ecen4330_lcd_v3.c:225: write8Reg(ILI9341_PIXELFORMAT);
                                   1257 ;	assignBit
      0002D5 C2 B5            [12] 1258 	clr	_P3_5
                                   1259 ;	assignBit
      0002D7 D2 B4            [12] 1260 	setb	_P3_4
      0002D9 85*02 82         [24] 1261 	mov	dpl,_lcd_address
      0002DC 85*03 83         [24] 1262 	mov	dph,(_lcd_address + 1)
      0002DF 74 3A            [12] 1263 	mov	a,#0x3a
      0002E1 F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	assignBit
      0002E2 C2 B4            [12] 1266 	clr	_P3_4
                                   1267 ;	ecen4330_lcd_v3.c:226: write8Data(0x55);
                                   1268 ;	assignBit
      0002E4 D2 B5            [12] 1269 	setb	_P3_5
                                   1270 ;	assignBit
      0002E6 D2 B4            [12] 1271 	setb	_P3_4
      0002E8 85*02 82         [24] 1272 	mov	dpl,_lcd_address
      0002EB 85*03 83         [24] 1273 	mov	dph,(_lcd_address + 1)
      0002EE 74 55            [12] 1274 	mov	a,#0x55
      0002F0 F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	assignBit
      0002F1 C2 B4            [12] 1277 	clr	_P3_4
                                   1278 ;	ecen4330_lcd_v3.c:227: write8Data(0x00);
                                   1279 ;	assignBit
      0002F3 D2 B5            [12] 1280 	setb	_P3_5
                                   1281 ;	assignBit
      0002F5 D2 B4            [12] 1282 	setb	_P3_4
      0002F7 85*02 82         [24] 1283 	mov	dpl,_lcd_address
      0002FA 85*03 83         [24] 1284 	mov	dph,(_lcd_address + 1)
      0002FD E4               [12] 1285 	clr	a
      0002FE F0               [24] 1286 	movx	@dptr,a
                                   1287 ;	assignBit
      0002FF C2 B4            [12] 1288 	clr	_P3_4
                                   1289 ;	ecen4330_lcd_v3.c:228: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000301 75*00 1B         [24] 1290 	mov	_writeRegister16_PARM_2,#0x1b
      000304 75*01 00         [24] 1291 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000307 90 00 B1         [24] 1292 	mov	dptr,#0x00b1
      00030A 12r00r71         [24] 1293 	lcall	_writeRegister16
                                   1294 ;	ecen4330_lcd_v3.c:230: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00030D 75*00 07         [24] 1295 	mov	_writeRegister8_PARM_2,#0x07
      000310 75 82 B7         [24] 1296 	mov	dpl,#0xb7
      000313 12r00r51         [24] 1297 	lcall	_writeRegister8
                                   1298 ;	ecen4330_lcd_v3.c:232: writeRegister8(ILI9341_SLEEPOUT, 0);
      000316 75*00 00         [24] 1299 	mov	_writeRegister8_PARM_2,#0x00
      000319 75 82 11         [24] 1300 	mov	dpl,#0x11
      00031C 12r00r51         [24] 1301 	lcall	_writeRegister8
                                   1302 ;	ecen4330_lcd_v3.c:233: delay(150);
      00031F 90 00 96         [24] 1303 	mov	dptr,#0x0096
      000322 12r00r21         [24] 1304 	lcall	_delay
                                   1305 ;	ecen4330_lcd_v3.c:234: writeRegister8(ILI9341_DISPLAYON, 0);
      000325 75*00 00         [24] 1306 	mov	_writeRegister8_PARM_2,#0x00
      000328 75 82 29         [24] 1307 	mov	dpl,#0x29
      00032B 12r00r51         [24] 1308 	lcall	_writeRegister8
                                   1309 ;	ecen4330_lcd_v3.c:235: delay(500);
      00032E 90 01 F4         [24] 1310 	mov	dptr,#0x01f4
      000331 12r00r21         [24] 1311 	lcall	_delay
                                   1312 ;	ecen4330_lcd_v3.c:236: setAddress(0, 0, _width-1, _height-1);
      000334 90r00r00         [24] 1313 	mov	dptr,#__width
      000337 E0               [24] 1314 	movx	a,@dptr
      000338 FE               [12] 1315 	mov	r6,a
      000339 A3               [24] 1316 	inc	dptr
      00033A E0               [24] 1317 	movx	a,@dptr
      00033B FF               [12] 1318 	mov	r7,a
      00033C 1E               [12] 1319 	dec	r6
      00033D BE FF 01         [24] 1320 	cjne	r6,#0xff,00103$
      000340 1F               [12] 1321 	dec	r7
      000341                       1322 00103$:
      000341 8E*02            [24] 1323 	mov	_setAddress_PARM_3,r6
      000343 8F*03            [24] 1324 	mov	(_setAddress_PARM_3 + 1),r7
      000345 90r00r02         [24] 1325 	mov	dptr,#__height
      000348 E0               [24] 1326 	movx	a,@dptr
      000349 FE               [12] 1327 	mov	r6,a
      00034A A3               [24] 1328 	inc	dptr
      00034B E0               [24] 1329 	movx	a,@dptr
      00034C FF               [12] 1330 	mov	r7,a
      00034D 1E               [12] 1331 	dec	r6
      00034E BE FF 01         [24] 1332 	cjne	r6,#0xff,00104$
      000351 1F               [12] 1333 	dec	r7
      000352                       1334 00104$:
      000352 8E*04            [24] 1335 	mov	_setAddress_PARM_4,r6
      000354 8F*05            [24] 1336 	mov	(_setAddress_PARM_4 + 1),r7
      000356 E4               [12] 1337 	clr	a
      000357 F5*00            [12] 1338 	mov	_setAddress_PARM_2,a
      000359 F5*01            [12] 1339 	mov	(_setAddress_PARM_2 + 1),a
      00035B 90 00 00         [24] 1340 	mov	dptr,#0x0000
                                   1341 ;	ecen4330_lcd_v3.c:237: }
      00035E 02r01r76         [24] 1342 	ljmp	_setAddress
                                   1343 ;------------------------------------------------------------
                                   1344 ;Allocation info for local variables in function 'drawPixel'
                                   1345 ;------------------------------------------------------------
                                   1346 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1347 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1348 ;x3                        Allocated to registers r6 r7 
                                   1349 ;------------------------------------------------------------
                                   1350 ;	ecen4330_lcd_v3.c:246: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1) {
                                   1351 ;	-----------------------------------------
                                   1352 ;	 function drawPixel
                                   1353 ;	-----------------------------------------
      000361                       1354 _drawPixel:
      000361 AE 82            [24] 1355 	mov	r6,dpl
      000363 AF 83            [24] 1356 	mov	r7,dph
                                   1357 ;	ecen4330_lcd_v3.c:247: setAddress(x3,y3,x3+1,y3+1);
      000365 8E 04            [24] 1358 	mov	ar4,r6
      000367 8F 05            [24] 1359 	mov	ar5,r7
      000369 0C               [12] 1360 	inc	r4
      00036A BC 00 01         [24] 1361 	cjne	r4,#0x00,00103$
      00036D 0D               [12] 1362 	inc	r5
      00036E                       1363 00103$:
      00036E 8C*02            [24] 1364 	mov	_setAddress_PARM_3,r4
      000370 8D*03            [24] 1365 	mov	(_setAddress_PARM_3 + 1),r5
      000372 AC*16            [24] 1366 	mov	r4,_drawPixel_PARM_2
      000374 AD*17            [24] 1367 	mov	r5,(_drawPixel_PARM_2 + 1)
      000376 0C               [12] 1368 	inc	r4
      000377 BC 00 01         [24] 1369 	cjne	r4,#0x00,00104$
      00037A 0D               [12] 1370 	inc	r5
      00037B                       1371 00104$:
      00037B 8C*04            [24] 1372 	mov	_setAddress_PARM_4,r4
      00037D 8D*05            [24] 1373 	mov	(_setAddress_PARM_4 + 1),r5
      00037F 85*16*00         [24] 1374 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000382 85*17*01         [24] 1375 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000385 8E 82            [24] 1376 	mov	dpl,r6
      000387 8F 83            [24] 1377 	mov	dph,r7
      000389 12r01r76         [24] 1378 	lcall	_setAddress
                                   1379 ;	ecen4330_lcd_v3.c:249: CD = 0;
                                   1380 ;	assignBit
      00038C C2 B5            [12] 1381 	clr	_P3_5
                                   1382 ;	ecen4330_lcd_v3.c:250: write8(0x2C);
                                   1383 ;	assignBit
      00038E D2 B4            [12] 1384 	setb	_P3_4
      000390 85*02 82         [24] 1385 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1386 	mov	dph,(_lcd_address + 1)
      000396 74 2C            [12] 1387 	mov	a,#0x2c
      000398 F0               [24] 1388 	movx	@dptr,a
                                   1389 ;	assignBit
      000399 C2 B4            [12] 1390 	clr	_P3_4
                                   1391 ;	ecen4330_lcd_v3.c:252: CD = 1;
                                   1392 ;	assignBit
      00039B D2 B5            [12] 1393 	setb	_P3_5
                                   1394 ;	ecen4330_lcd_v3.c:253: write8(color1>>8);write8(color1);
                                   1395 ;	assignBit
      00039D D2 B4            [12] 1396 	setb	_P3_4
      00039F 85*02 82         [24] 1397 	mov	dpl,_lcd_address
      0003A2 85*03 83         [24] 1398 	mov	dph,(_lcd_address + 1)
      0003A5 E5*19            [12] 1399 	mov	a,(_drawPixel_PARM_3 + 1)
      0003A7 F0               [24] 1400 	movx	@dptr,a
                                   1401 ;	assignBit
      0003A8 C2 B4            [12] 1402 	clr	_P3_4
                                   1403 ;	assignBit
      0003AA D2 B4            [12] 1404 	setb	_P3_4
      0003AC 85*02 82         [24] 1405 	mov	dpl,_lcd_address
      0003AF 85*03 83         [24] 1406 	mov	dph,(_lcd_address + 1)
      0003B2 E5*18            [12] 1407 	mov	a,_drawPixel_PARM_3
      0003B4 F0               [24] 1408 	movx	@dptr,a
                                   1409 ;	assignBit
      0003B5 C2 B4            [12] 1410 	clr	_P3_4
                                   1411 ;	ecen4330_lcd_v3.c:254: }
      0003B7 22               [24] 1412 	ret
                                   1413 ;------------------------------------------------------------
                                   1414 ;Allocation info for local variables in function 'drawCircle'
                                   1415 ;------------------------------------------------------------
                                   1416 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1417 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1418 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1419 ;x0                        Allocated with name '_drawCircle_x0_65536_105'
                                   1420 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1421 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1422 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1423 ;sloc3                     Allocated with name '_drawCircle_sloc3_1_0'
                                   1424 ;sloc4                     Allocated with name '_drawCircle_sloc4_1_0'
                                   1425 ;f                         Allocated with name '_drawCircle_f_65536_106'
                                   1426 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_106'
                                   1427 ;ddF_y                     Allocated with name '_drawCircle_ddF_y_65536_106'
                                   1428 ;x                         Allocated with name '_drawCircle_x_65536_106'
                                   1429 ;y                         Allocated with name '_drawCircle_y_65536_106'
                                   1430 ;------------------------------------------------------------
                                   1431 ;	ecen4330_lcd_v3.c:264: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1432 ;	-----------------------------------------
                                   1433 ;	 function drawCircle
                                   1434 ;	-----------------------------------------
      0003B8                       1435 _drawCircle:
      0003B8 85 82*20         [24] 1436 	mov	_drawCircle_x0_65536_105,dpl
      0003BB 85 83*21         [24] 1437 	mov	(_drawCircle_x0_65536_105 + 1),dph
                                   1438 ;	ecen4330_lcd_v3.c:265: __xdata int f = 1 - r;
      0003BE 74 01            [12] 1439 	mov	a,#0x01
      0003C0 C3               [12] 1440 	clr	c
      0003C1 95*1C            [12] 1441 	subb	a,_drawCircle_PARM_3
      0003C3 FC               [12] 1442 	mov	r4,a
      0003C4 E4               [12] 1443 	clr	a
      0003C5 95*1D            [12] 1444 	subb	a,(_drawCircle_PARM_3 + 1)
      0003C7 FD               [12] 1445 	mov	r5,a
      0003C8 90r00r04         [24] 1446 	mov	dptr,#_drawCircle_f_65536_106
      0003CB EC               [12] 1447 	mov	a,r4
      0003CC F0               [24] 1448 	movx	@dptr,a
      0003CD ED               [12] 1449 	mov	a,r5
      0003CE A3               [24] 1450 	inc	dptr
      0003CF F0               [24] 1451 	movx	@dptr,a
                                   1452 ;	ecen4330_lcd_v3.c:267: __xdata int ddF_y = -2 * r;
      0003D0 85*1C*00         [24] 1453 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      0003D3 85*1D*01         [24] 1454 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      0003D6 90 FF FE         [24] 1455 	mov	dptr,#0xfffe
      0003D9 12r00r00         [24] 1456 	lcall	__mulint
      0003DC AC 82            [24] 1457 	mov	r4,dpl
      0003DE AD 83            [24] 1458 	mov	r5,dph
                                   1459 ;	ecen4330_lcd_v3.c:269: __xdata int y = r;
      0003E0 AA*1C            [24] 1460 	mov	r2,_drawCircle_PARM_3
      0003E2 AB*1D            [24] 1461 	mov	r3,(_drawCircle_PARM_3 + 1)
                                   1462 ;	ecen4330_lcd_v3.c:271: drawPixel(x0  , y0+r, color);
      0003E4 E5*1C            [12] 1463 	mov	a,_drawCircle_PARM_3
      0003E6 25*1A            [12] 1464 	add	a,_drawCircle_PARM_2
      0003E8 F5*16            [12] 1465 	mov	_drawPixel_PARM_2,a
      0003EA E5*1D            [12] 1466 	mov	a,(_drawCircle_PARM_3 + 1)
      0003EC 35*1B            [12] 1467 	addc	a,(_drawCircle_PARM_2 + 1)
      0003EE F5*17            [12] 1468 	mov	(_drawPixel_PARM_2 + 1),a
      0003F0 85*1E*18         [24] 1469 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F3 85*1F*19         [24] 1470 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F6 85*20 82         [24] 1471 	mov	dpl,_drawCircle_x0_65536_105
      0003F9 85*21 83         [24] 1472 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      0003FC C0 05            [24] 1473 	push	ar5
      0003FE C0 04            [24] 1474 	push	ar4
      000400 C0 03            [24] 1475 	push	ar3
      000402 C0 02            [24] 1476 	push	ar2
      000404 12r03r61         [24] 1477 	lcall	_drawPixel
                                   1478 ;	ecen4330_lcd_v3.c:272: drawPixel(x0  , y0-r, color);
      000407 E5*1A            [12] 1479 	mov	a,_drawCircle_PARM_2
      000409 C3               [12] 1480 	clr	c
      00040A 95*1C            [12] 1481 	subb	a,_drawCircle_PARM_3
      00040C F5*16            [12] 1482 	mov	_drawPixel_PARM_2,a
      00040E E5*1B            [12] 1483 	mov	a,(_drawCircle_PARM_2 + 1)
      000410 95*1D            [12] 1484 	subb	a,(_drawCircle_PARM_3 + 1)
      000412 F5*17            [12] 1485 	mov	(_drawPixel_PARM_2 + 1),a
      000414 85*1E*18         [24] 1486 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000417 85*1F*19         [24] 1487 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00041A 85*20 82         [24] 1488 	mov	dpl,_drawCircle_x0_65536_105
      00041D 85*21 83         [24] 1489 	mov	dph,(_drawCircle_x0_65536_105 + 1)
      000420 12r03r61         [24] 1490 	lcall	_drawPixel
                                   1491 ;	ecen4330_lcd_v3.c:273: drawPixel(x0+r, y0  , color);
      000423 E5*1C            [12] 1492 	mov	a,_drawCircle_PARM_3
      000425 25*20            [12] 1493 	add	a,_drawCircle_x0_65536_105
      000427 F5 82            [12] 1494 	mov	dpl,a
      000429 E5*1D            [12] 1495 	mov	a,(_drawCircle_PARM_3 + 1)
      00042B 35*21            [12] 1496 	addc	a,(_drawCircle_x0_65536_105 + 1)
      00042D F5 83            [12] 1497 	mov	dph,a
      00042F 85*1A*16         [24] 1498 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000432 85*1B*17         [24] 1499 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000435 85*1E*18         [24] 1500 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000438 85*1F*19         [24] 1501 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00043B 12r03r61         [24] 1502 	lcall	_drawPixel
                                   1503 ;	ecen4330_lcd_v3.c:274: drawPixel(x0-r, y0  , color);
      00043E E5*20            [12] 1504 	mov	a,_drawCircle_x0_65536_105
      000440 C3               [12] 1505 	clr	c
      000441 95*1C            [12] 1506 	subb	a,_drawCircle_PARM_3
      000443 F5 82            [12] 1507 	mov	dpl,a
      000445 E5*21            [12] 1508 	mov	a,(_drawCircle_x0_65536_105 + 1)
      000447 95*1D            [12] 1509 	subb	a,(_drawCircle_PARM_3 + 1)
      000449 F5 83            [12] 1510 	mov	dph,a
      00044B 85*1A*16         [24] 1511 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      00044E 85*1B*17         [24] 1512 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      000451 85*1E*18         [24] 1513 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000454 85*1F*19         [24] 1514 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000457 12r03r61         [24] 1515 	lcall	_drawPixel
      00045A D0 02            [24] 1516 	pop	ar2
      00045C D0 03            [24] 1517 	pop	ar3
      00045E D0 04            [24] 1518 	pop	ar4
      000460 D0 05            [24] 1519 	pop	ar5
                                   1520 ;	ecen4330_lcd_v3.c:276: while (x < y) {
      000462 78 00            [12] 1521 	mov	r0,#0x00
      000464 79 00            [12] 1522 	mov	r1,#0x00
      000466 75*22 01         [24] 1523 	mov	_drawCircle_sloc0_1_0,#0x01
                                   1524 ;	1-genFromRTrack replaced	mov	(_drawCircle_sloc0_1_0 + 1),#0x00
      000469 89*23            [24] 1525 	mov	(_drawCircle_sloc0_1_0 + 1),r1
      00046B                       1526 00103$:
      00046B C3               [12] 1527 	clr	c
      00046C E8               [12] 1528 	mov	a,r0
      00046D 9A               [12] 1529 	subb	a,r2
      00046E E9               [12] 1530 	mov	a,r1
      00046F 64 80            [12] 1531 	xrl	a,#0x80
      000471 8B F0            [24] 1532 	mov	b,r3
      000473 63 F0 80         [24] 1533 	xrl	b,#0x80
      000476 95 F0            [12] 1534 	subb	a,b
      000478 40 01            [24] 1535 	jc	00121$
      00047A 22               [24] 1536 	ret
      00047B                       1537 00121$:
                                   1538 ;	ecen4330_lcd_v3.c:277: if (f >= 0) {
      00047B 90r00r04         [24] 1539 	mov	dptr,#_drawCircle_f_65536_106
      00047E E0               [24] 1540 	movx	a,@dptr
      00047F F5*24            [12] 1541 	mov	_drawCircle_sloc1_1_0,a
      000481 A3               [24] 1542 	inc	dptr
      000482 E0               [24] 1543 	movx	a,@dptr
      000483 F5*25            [12] 1544 	mov	(_drawCircle_sloc1_1_0 + 1),a
      000485 20 E7 18         [24] 1545 	jb	acc.7,00102$
                                   1546 ;	ecen4330_lcd_v3.c:278: y--;
      000488 1A               [12] 1547 	dec	r2
      000489 BA FF 01         [24] 1548 	cjne	r2,#0xff,00123$
      00048C 1B               [12] 1549 	dec	r3
      00048D                       1550 00123$:
                                   1551 ;	ecen4330_lcd_v3.c:279: ddF_y += 2;
      00048D 74 02            [12] 1552 	mov	a,#0x02
      00048F 2C               [12] 1553 	add	a,r4
      000490 FC               [12] 1554 	mov	r4,a
      000491 E4               [12] 1555 	clr	a
      000492 3D               [12] 1556 	addc	a,r5
      000493 FD               [12] 1557 	mov	r5,a
                                   1558 ;	ecen4330_lcd_v3.c:280: f += ddF_y;
      000494 90r00r04         [24] 1559 	mov	dptr,#_drawCircle_f_65536_106
      000497 EC               [12] 1560 	mov	a,r4
      000498 25*24            [12] 1561 	add	a,_drawCircle_sloc1_1_0
      00049A F0               [24] 1562 	movx	@dptr,a
      00049B ED               [12] 1563 	mov	a,r5
      00049C 35*25            [12] 1564 	addc	a,(_drawCircle_sloc1_1_0 + 1)
      00049E A3               [24] 1565 	inc	dptr
      00049F F0               [24] 1566 	movx	@dptr,a
      0004A0                       1567 00102$:
                                   1568 ;	ecen4330_lcd_v3.c:283: x++;
      0004A0 C0 04            [24] 1569 	push	ar4
      0004A2 C0 05            [24] 1570 	push	ar5
      0004A4 08               [12] 1571 	inc	r0
      0004A5 B8 00 01         [24] 1572 	cjne	r0,#0x00,00124$
      0004A8 09               [12] 1573 	inc	r1
      0004A9                       1574 00124$:
                                   1575 ;	ecen4330_lcd_v3.c:284: ddF_x += 2;
      0004A9 74 02            [12] 1576 	mov	a,#0x02
      0004AB 25*22            [12] 1577 	add	a,_drawCircle_sloc0_1_0
      0004AD F5*22            [12] 1578 	mov	_drawCircle_sloc0_1_0,a
      0004AF E4               [12] 1579 	clr	a
      0004B0 35*23            [12] 1580 	addc	a,(_drawCircle_sloc0_1_0 + 1)
      0004B2 F5*23            [12] 1581 	mov	(_drawCircle_sloc0_1_0 + 1),a
                                   1582 ;	ecen4330_lcd_v3.c:285: f += ddF_x;
      0004B4 90r00r04         [24] 1583 	mov	dptr,#_drawCircle_f_65536_106
      0004B7 E0               [24] 1584 	movx	a,@dptr
      0004B8 FE               [12] 1585 	mov	r6,a
      0004B9 A3               [24] 1586 	inc	dptr
      0004BA E0               [24] 1587 	movx	a,@dptr
      0004BB FF               [12] 1588 	mov	r7,a
      0004BC 90r00r04         [24] 1589 	mov	dptr,#_drawCircle_f_65536_106
      0004BF E5*22            [12] 1590 	mov	a,_drawCircle_sloc0_1_0
      0004C1 2E               [12] 1591 	add	a,r6
      0004C2 F0               [24] 1592 	movx	@dptr,a
      0004C3 E5*23            [12] 1593 	mov	a,(_drawCircle_sloc0_1_0 + 1)
      0004C5 3F               [12] 1594 	addc	a,r7
      0004C6 A3               [24] 1595 	inc	dptr
      0004C7 F0               [24] 1596 	movx	@dptr,a
                                   1597 ;	ecen4330_lcd_v3.c:287: drawPixel(x0 + x, y0 + y, color);
      0004C8 AE*20            [24] 1598 	mov	r6,_drawCircle_x0_65536_105
      0004CA AF*21            [24] 1599 	mov	r7,(_drawCircle_x0_65536_105 + 1)
      0004CC E8               [12] 1600 	mov	a,r0
      0004CD 2E               [12] 1601 	add	a,r6
      0004CE FC               [12] 1602 	mov	r4,a
      0004CF E9               [12] 1603 	mov	a,r1
      0004D0 3F               [12] 1604 	addc	a,r7
      0004D1 FD               [12] 1605 	mov	r5,a
      0004D2 8C*24            [24] 1606 	mov	_drawCircle_sloc1_1_0,r4
      0004D4 8D*25            [24] 1607 	mov	(_drawCircle_sloc1_1_0 + 1),r5
      0004D6 85*1A*26         [24] 1608 	mov	_drawCircle_sloc2_1_0,_drawCircle_PARM_2
      0004D9 85*1B*27         [24] 1609 	mov	(_drawCircle_sloc2_1_0 + 1),(_drawCircle_PARM_2 + 1)
      0004DC EA               [12] 1610 	mov	a,r2
      0004DD 25*26            [12] 1611 	add	a,_drawCircle_sloc2_1_0
      0004DF FC               [12] 1612 	mov	r4,a
      0004E0 EB               [12] 1613 	mov	a,r3
      0004E1 35*27            [12] 1614 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0004E3 FD               [12] 1615 	mov	r5,a
      0004E4 8C*28            [24] 1616 	mov	_drawCircle_sloc3_1_0,r4
      0004E6 8D*29            [24] 1617 	mov	(_drawCircle_sloc3_1_0 + 1),r5
      0004E8 85*28*16         [24] 1618 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      0004EB 85*29*17         [24] 1619 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      0004EE 85*1E*18         [24] 1620 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004F1 85*1F*19         [24] 1621 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004F4 85*24 82         [24] 1622 	mov	dpl,_drawCircle_sloc1_1_0
      0004F7 85*25 83         [24] 1623 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      0004FA C0 07            [24] 1624 	push	ar7
      0004FC C0 06            [24] 1625 	push	ar6
      0004FE C0 05            [24] 1626 	push	ar5
      000500 C0 04            [24] 1627 	push	ar4
      000502 C0 03            [24] 1628 	push	ar3
      000504 C0 02            [24] 1629 	push	ar2
      000506 C0 01            [24] 1630 	push	ar1
      000508 C0 00            [24] 1631 	push	ar0
      00050A 12r03r61         [24] 1632 	lcall	_drawPixel
      00050D D0 00            [24] 1633 	pop	ar0
      00050F D0 01            [24] 1634 	pop	ar1
      000511 D0 02            [24] 1635 	pop	ar2
      000513 D0 03            [24] 1636 	pop	ar3
      000515 D0 04            [24] 1637 	pop	ar4
      000517 D0 05            [24] 1638 	pop	ar5
      000519 D0 06            [24] 1639 	pop	ar6
      00051B D0 07            [24] 1640 	pop	ar7
                                   1641 ;	ecen4330_lcd_v3.c:288: drawPixel(x0 - x, y0 + y, color);
      00051D EE               [12] 1642 	mov	a,r6
      00051E C3               [12] 1643 	clr	c
      00051F 98               [12] 1644 	subb	a,r0
      000520 FC               [12] 1645 	mov	r4,a
      000521 EF               [12] 1646 	mov	a,r7
      000522 99               [12] 1647 	subb	a,r1
      000523 FD               [12] 1648 	mov	r5,a
      000524 8C*2A            [24] 1649 	mov	_drawCircle_sloc4_1_0,r4
      000526 8D*2B            [24] 1650 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      000528 85*28*16         [24] 1651 	mov	_drawPixel_PARM_2,_drawCircle_sloc3_1_0
      00052B 85*29*17         [24] 1652 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc3_1_0 + 1)
      00052E 85*1E*18         [24] 1653 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000531 85*1F*19         [24] 1654 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000534 85*2A 82         [24] 1655 	mov	dpl,_drawCircle_sloc4_1_0
      000537 85*2B 83         [24] 1656 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00053A C0 07            [24] 1657 	push	ar7
      00053C C0 06            [24] 1658 	push	ar6
      00053E C0 05            [24] 1659 	push	ar5
      000540 C0 04            [24] 1660 	push	ar4
      000542 C0 03            [24] 1661 	push	ar3
      000544 C0 02            [24] 1662 	push	ar2
      000546 C0 01            [24] 1663 	push	ar1
      000548 C0 00            [24] 1664 	push	ar0
      00054A 12r03r61         [24] 1665 	lcall	_drawPixel
      00054D D0 00            [24] 1666 	pop	ar0
      00054F D0 01            [24] 1667 	pop	ar1
      000551 D0 02            [24] 1668 	pop	ar2
      000553 D0 03            [24] 1669 	pop	ar3
      000555 D0 04            [24] 1670 	pop	ar4
      000557 D0 05            [24] 1671 	pop	ar5
                                   1672 ;	ecen4330_lcd_v3.c:289: drawPixel(x0 + x, y0 - y, color);
      000559 E5*26            [12] 1673 	mov	a,_drawCircle_sloc2_1_0
      00055B C3               [12] 1674 	clr	c
      00055C 9A               [12] 1675 	subb	a,r2
      00055D FC               [12] 1676 	mov	r4,a
      00055E E5*27            [12] 1677 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      000560 9B               [12] 1678 	subb	a,r3
      000561 FD               [12] 1679 	mov	r5,a
      000562 8C*16            [24] 1680 	mov	_drawPixel_PARM_2,r4
      000564 8D*17            [24] 1681 	mov	(_drawPixel_PARM_2 + 1),r5
      000566 85*1E*18         [24] 1682 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000569 85*1F*19         [24] 1683 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00056C 85*24 82         [24] 1684 	mov	dpl,_drawCircle_sloc1_1_0
      00056F 85*25 83         [24] 1685 	mov	dph,(_drawCircle_sloc1_1_0 + 1)
      000572 C0 05            [24] 1686 	push	ar5
      000574 C0 04            [24] 1687 	push	ar4
      000576 C0 03            [24] 1688 	push	ar3
      000578 C0 02            [24] 1689 	push	ar2
      00057A C0 01            [24] 1690 	push	ar1
      00057C C0 00            [24] 1691 	push	ar0
      00057E 12r03r61         [24] 1692 	lcall	_drawPixel
      000581 D0 00            [24] 1693 	pop	ar0
      000583 D0 01            [24] 1694 	pop	ar1
      000585 D0 02            [24] 1695 	pop	ar2
      000587 D0 03            [24] 1696 	pop	ar3
      000589 D0 04            [24] 1697 	pop	ar4
      00058B D0 05            [24] 1698 	pop	ar5
                                   1699 ;	ecen4330_lcd_v3.c:290: drawPixel(x0 - x, y0 - y, color);
      00058D 8C*16            [24] 1700 	mov	_drawPixel_PARM_2,r4
      00058F 8D*17            [24] 1701 	mov	(_drawPixel_PARM_2 + 1),r5
      000591 85*1E*18         [24] 1702 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000594 85*1F*19         [24] 1703 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000597 85*2A 82         [24] 1704 	mov	dpl,_drawCircle_sloc4_1_0
      00059A 85*2B 83         [24] 1705 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00059D C0 05            [24] 1706 	push	ar5
      00059F C0 04            [24] 1707 	push	ar4
      0005A1 C0 03            [24] 1708 	push	ar3
      0005A3 C0 02            [24] 1709 	push	ar2
      0005A5 C0 01            [24] 1710 	push	ar1
      0005A7 C0 00            [24] 1711 	push	ar0
      0005A9 12r03r61         [24] 1712 	lcall	_drawPixel
      0005AC D0 00            [24] 1713 	pop	ar0
      0005AE D0 01            [24] 1714 	pop	ar1
      0005B0 D0 02            [24] 1715 	pop	ar2
      0005B2 D0 03            [24] 1716 	pop	ar3
      0005B4 D0 04            [24] 1717 	pop	ar4
      0005B6 D0 05            [24] 1718 	pop	ar5
      0005B8 D0 06            [24] 1719 	pop	ar6
      0005BA D0 07            [24] 1720 	pop	ar7
                                   1721 ;	ecen4330_lcd_v3.c:291: drawPixel(x0 + y, y0 + x, color);
      0005BC EA               [12] 1722 	mov	a,r2
      0005BD 2E               [12] 1723 	add	a,r6
      0005BE FC               [12] 1724 	mov	r4,a
      0005BF EB               [12] 1725 	mov	a,r3
      0005C0 3F               [12] 1726 	addc	a,r7
      0005C1 FD               [12] 1727 	mov	r5,a
      0005C2 8C*2A            [24] 1728 	mov	_drawCircle_sloc4_1_0,r4
      0005C4 8D*2B            [24] 1729 	mov	(_drawCircle_sloc4_1_0 + 1),r5
      0005C6 E8               [12] 1730 	mov	a,r0
      0005C7 25*26            [12] 1731 	add	a,_drawCircle_sloc2_1_0
      0005C9 FC               [12] 1732 	mov	r4,a
      0005CA E9               [12] 1733 	mov	a,r1
      0005CB 35*27            [12] 1734 	addc	a,(_drawCircle_sloc2_1_0 + 1)
      0005CD FD               [12] 1735 	mov	r5,a
      0005CE 8C*16            [24] 1736 	mov	_drawPixel_PARM_2,r4
      0005D0 8D*17            [24] 1737 	mov	(_drawPixel_PARM_2 + 1),r5
      0005D2 85*1E*18         [24] 1738 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005D5 85*1F*19         [24] 1739 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005D8 85*2A 82         [24] 1740 	mov	dpl,_drawCircle_sloc4_1_0
      0005DB 85*2B 83         [24] 1741 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      0005DE C0 07            [24] 1742 	push	ar7
      0005E0 C0 06            [24] 1743 	push	ar6
      0005E2 C0 05            [24] 1744 	push	ar5
      0005E4 C0 04            [24] 1745 	push	ar4
      0005E6 C0 03            [24] 1746 	push	ar3
      0005E8 C0 02            [24] 1747 	push	ar2
      0005EA C0 01            [24] 1748 	push	ar1
      0005EC C0 00            [24] 1749 	push	ar0
      0005EE 12r03r61         [24] 1750 	lcall	_drawPixel
      0005F1 D0 00            [24] 1751 	pop	ar0
      0005F3 D0 01            [24] 1752 	pop	ar1
      0005F5 D0 02            [24] 1753 	pop	ar2
      0005F7 D0 03            [24] 1754 	pop	ar3
      0005F9 D0 04            [24] 1755 	pop	ar4
      0005FB D0 05            [24] 1756 	pop	ar5
      0005FD D0 06            [24] 1757 	pop	ar6
      0005FF D0 07            [24] 1758 	pop	ar7
                                   1759 ;	ecen4330_lcd_v3.c:292: drawPixel(x0 - y, y0 + x, color);
      000601 EE               [12] 1760 	mov	a,r6
      000602 C3               [12] 1761 	clr	c
      000603 9A               [12] 1762 	subb	a,r2
      000604 FE               [12] 1763 	mov	r6,a
      000605 EF               [12] 1764 	mov	a,r7
      000606 9B               [12] 1765 	subb	a,r3
      000607 FF               [12] 1766 	mov	r7,a
      000608 8C*16            [24] 1767 	mov	_drawPixel_PARM_2,r4
      00060A 8D*17            [24] 1768 	mov	(_drawPixel_PARM_2 + 1),r5
      00060C 85*1E*18         [24] 1769 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00060F 85*1F*19         [24] 1770 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000612 8E 82            [24] 1771 	mov	dpl,r6
      000614 8F 83            [24] 1772 	mov	dph,r7
      000616 C0 07            [24] 1773 	push	ar7
      000618 C0 06            [24] 1774 	push	ar6
      00061A C0 05            [24] 1775 	push	ar5
      00061C C0 04            [24] 1776 	push	ar4
      00061E C0 03            [24] 1777 	push	ar3
      000620 C0 02            [24] 1778 	push	ar2
      000622 C0 01            [24] 1779 	push	ar1
      000624 C0 00            [24] 1780 	push	ar0
      000626 12r03r61         [24] 1781 	lcall	_drawPixel
      000629 D0 00            [24] 1782 	pop	ar0
      00062B D0 01            [24] 1783 	pop	ar1
      00062D D0 02            [24] 1784 	pop	ar2
      00062F D0 03            [24] 1785 	pop	ar3
      000631 D0 04            [24] 1786 	pop	ar4
      000633 D0 05            [24] 1787 	pop	ar5
                                   1788 ;	ecen4330_lcd_v3.c:293: drawPixel(x0 + y, y0 - x, color);
      000635 E5*26            [12] 1789 	mov	a,_drawCircle_sloc2_1_0
      000637 C3               [12] 1790 	clr	c
      000638 98               [12] 1791 	subb	a,r0
      000639 FC               [12] 1792 	mov	r4,a
      00063A E5*27            [12] 1793 	mov	a,(_drawCircle_sloc2_1_0 + 1)
      00063C 99               [12] 1794 	subb	a,r1
      00063D FD               [12] 1795 	mov	r5,a
      00063E 8C*16            [24] 1796 	mov	_drawPixel_PARM_2,r4
      000640 8D*17            [24] 1797 	mov	(_drawPixel_PARM_2 + 1),r5
      000642 85*1E*18         [24] 1798 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000645 85*1F*19         [24] 1799 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000648 85*2A 82         [24] 1800 	mov	dpl,_drawCircle_sloc4_1_0
      00064B 85*2B 83         [24] 1801 	mov	dph,(_drawCircle_sloc4_1_0 + 1)
      00064E C0 05            [24] 1802 	push	ar5
      000650 C0 04            [24] 1803 	push	ar4
      000652 C0 03            [24] 1804 	push	ar3
      000654 C0 02            [24] 1805 	push	ar2
      000656 C0 01            [24] 1806 	push	ar1
      000658 C0 00            [24] 1807 	push	ar0
      00065A 12r03r61         [24] 1808 	lcall	_drawPixel
      00065D D0 00            [24] 1809 	pop	ar0
      00065F D0 01            [24] 1810 	pop	ar1
      000661 D0 02            [24] 1811 	pop	ar2
      000663 D0 03            [24] 1812 	pop	ar3
      000665 D0 04            [24] 1813 	pop	ar4
      000667 D0 05            [24] 1814 	pop	ar5
      000669 D0 06            [24] 1815 	pop	ar6
      00066B D0 07            [24] 1816 	pop	ar7
                                   1817 ;	ecen4330_lcd_v3.c:294: drawPixel(x0 - y, y0 - x, color);
      00066D 8C*16            [24] 1818 	mov	_drawPixel_PARM_2,r4
      00066F 8D*17            [24] 1819 	mov	(_drawPixel_PARM_2 + 1),r5
      000671 85*1E*18         [24] 1820 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000674 85*1F*19         [24] 1821 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000677 8E 82            [24] 1822 	mov	dpl,r6
      000679 8F 83            [24] 1823 	mov	dph,r7
      00067B C0 05            [24] 1824 	push	ar5
      00067D C0 04            [24] 1825 	push	ar4
      00067F C0 03            [24] 1826 	push	ar3
      000681 C0 02            [24] 1827 	push	ar2
      000683 C0 01            [24] 1828 	push	ar1
      000685 C0 00            [24] 1829 	push	ar0
      000687 12r03r61         [24] 1830 	lcall	_drawPixel
      00068A D0 00            [24] 1831 	pop	ar0
      00068C D0 01            [24] 1832 	pop	ar1
      00068E D0 02            [24] 1833 	pop	ar2
      000690 D0 03            [24] 1834 	pop	ar3
      000692 D0 04            [24] 1835 	pop	ar4
      000694 D0 05            [24] 1836 	pop	ar5
      000696 D0 05            [24] 1837 	pop	ar5
      000698 D0 04            [24] 1838 	pop	ar4
                                   1839 ;	ecen4330_lcd_v3.c:296: }
      00069A 02r04r6B         [24] 1840 	ljmp	00103$
                                   1841 ;------------------------------------------------------------
                                   1842 ;Allocation info for local variables in function 'testCircles'
                                   1843 ;------------------------------------------------------------
                                   1844 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1845 ;radius                    Allocated with name '_testCircles_radius_65536_109'
                                   1846 ;sloc0                     Allocated with name '_testCircles_sloc0_1_0'
                                   1847 ;x                         Allocated with name '_testCircles_x_65536_110'
                                   1848 ;y                         Allocated with name '_testCircles_y_65536_110'
                                   1849 ;r2                        Allocated with name '_testCircles_r2_65536_110'
                                   1850 ;w                         Allocated with name '_testCircles_w_65536_110'
                                   1851 ;h                         Allocated with name '_testCircles_h_65536_110'
                                   1852 ;------------------------------------------------------------
                                   1853 ;	ecen4330_lcd_v3.c:304: void testCircles (uint8_t radius, uint16_t color) {
                                   1854 ;	-----------------------------------------
                                   1855 ;	 function testCircles
                                   1856 ;	-----------------------------------------
      00069D                       1857 _testCircles:
      00069D 85 82*2E         [24] 1858 	mov	_testCircles_radius_65536_109,dpl
                                   1859 ;	ecen4330_lcd_v3.c:305: __xdata int x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      0006A0 AD*2E            [24] 1860 	mov	r5,_testCircles_radius_65536_109
      0006A2 7E 00            [12] 1861 	mov	r6,#0x00
      0006A4 ED               [12] 1862 	mov	a,r5
      0006A5 2D               [12] 1863 	add	a,r5
      0006A6 FB               [12] 1864 	mov	r3,a
      0006A7 EE               [12] 1865 	mov	a,r6
      0006A8 33               [12] 1866 	rlc	a
      0006A9 FC               [12] 1867 	mov	r4,a
      0006AA 90r00r00         [24] 1868 	mov	dptr,#__width
      0006AD E0               [24] 1869 	movx	a,@dptr
      0006AE F9               [12] 1870 	mov	r1,a
      0006AF A3               [24] 1871 	inc	dptr
      0006B0 E0               [24] 1872 	movx	a,@dptr
      0006B1 FA               [12] 1873 	mov	r2,a
      0006B2 ED               [12] 1874 	mov	a,r5
      0006B3 29               [12] 1875 	add	a,r1
      0006B4 F9               [12] 1876 	mov	r1,a
      0006B5 EE               [12] 1877 	mov	a,r6
      0006B6 3A               [12] 1878 	addc	a,r2
      0006B7 FA               [12] 1879 	mov	r2,a
      0006B8 90r00r02         [24] 1880 	mov	dptr,#__height
      0006BB E0               [24] 1881 	movx	a,@dptr
      0006BC FF               [12] 1882 	mov	r7,a
      0006BD A3               [24] 1883 	inc	dptr
      0006BE E0               [24] 1884 	movx	a,@dptr
      0006BF F8               [12] 1885 	mov	r0,a
      0006C0 ED               [12] 1886 	mov	a,r5
      0006C1 2F               [12] 1887 	add	a,r7
      0006C2 FF               [12] 1888 	mov	r7,a
      0006C3 EE               [12] 1889 	mov	a,r6
      0006C4 38               [12] 1890 	addc	a,r0
      0006C5 FE               [12] 1891 	mov	r6,a
                                   1892 ;	ecen4330_lcd_v3.c:307: for (x = 0; x < w; x += r2) {
      0006C6 90r00r06         [24] 1893 	mov	dptr,#_testCircles_x_65536_110
      0006C9 E4               [12] 1894 	clr	a
      0006CA F0               [24] 1895 	movx	@dptr,a
      0006CB A3               [24] 1896 	inc	dptr
      0006CC F0               [24] 1897 	movx	@dptr,a
      0006CD                       1898 00107$:
      0006CD 90r00r06         [24] 1899 	mov	dptr,#_testCircles_x_65536_110
      0006D0 E0               [24] 1900 	movx	a,@dptr
      0006D1 F8               [12] 1901 	mov	r0,a
      0006D2 A3               [24] 1902 	inc	dptr
      0006D3 E0               [24] 1903 	movx	a,@dptr
      0006D4 FD               [12] 1904 	mov	r5,a
      0006D5 C3               [12] 1905 	clr	c
      0006D6 E8               [12] 1906 	mov	a,r0
      0006D7 99               [12] 1907 	subb	a,r1
      0006D8 ED               [12] 1908 	mov	a,r5
      0006D9 64 80            [12] 1909 	xrl	a,#0x80
      0006DB 8A F0            [24] 1910 	mov	b,r2
      0006DD 63 F0 80         [24] 1911 	xrl	b,#0x80
      0006E0 95 F0            [12] 1912 	subb	a,b
      0006E2 40 01            [24] 1913 	jc	00127$
      0006E4 22               [24] 1914 	ret
      0006E5                       1915 00127$:
                                   1916 ;	ecen4330_lcd_v3.c:308: for (y = 0; y < h; y += r2) {
      0006E5 90r00r08         [24] 1917 	mov	dptr,#_testCircles_y_65536_110
      0006E8 E4               [12] 1918 	clr	a
      0006E9 F0               [24] 1919 	movx	@dptr,a
      0006EA A3               [24] 1920 	inc	dptr
      0006EB F0               [24] 1921 	movx	@dptr,a
      0006EC                       1922 00104$:
      0006EC 90r00r08         [24] 1923 	mov	dptr,#_testCircles_y_65536_110
      0006EF E0               [24] 1924 	movx	a,@dptr
      0006F0 F5*2F            [12] 1925 	mov	_testCircles_sloc0_1_0,a
      0006F2 A3               [24] 1926 	inc	dptr
      0006F3 E0               [24] 1927 	movx	a,@dptr
      0006F4 F5*30            [12] 1928 	mov	(_testCircles_sloc0_1_0 + 1),a
      0006F6 C3               [12] 1929 	clr	c
      0006F7 E5*2F            [12] 1930 	mov	a,_testCircles_sloc0_1_0
      0006F9 9F               [12] 1931 	subb	a,r7
      0006FA E5*30            [12] 1932 	mov	a,(_testCircles_sloc0_1_0 + 1)
      0006FC 64 80            [12] 1933 	xrl	a,#0x80
      0006FE 8E F0            [24] 1934 	mov	b,r6
      000700 63 F0 80         [24] 1935 	xrl	b,#0x80
      000703 95 F0            [12] 1936 	subb	a,b
      000705 50 47            [24] 1937 	jnc	00108$
                                   1938 ;	ecen4330_lcd_v3.c:309: drawCircle(x, y, radius, color);
      000707 88 82            [24] 1939 	mov	dpl,r0
      000709 8D 83            [24] 1940 	mov	dph,r5
      00070B 85*2F*1A         [24] 1941 	mov	_drawCircle_PARM_2,_testCircles_sloc0_1_0
      00070E 85*30*1B         [24] 1942 	mov	(_drawCircle_PARM_2 + 1),(_testCircles_sloc0_1_0 + 1)
      000711 85*2E*1C         [24] 1943 	mov	_drawCircle_PARM_3,_testCircles_radius_65536_109
      000714 75*1D 00         [24] 1944 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000717 85*2C*1E         [24] 1945 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      00071A 85*2D*1F         [24] 1946 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      00071D C0 07            [24] 1947 	push	ar7
      00071F C0 06            [24] 1948 	push	ar6
      000721 C0 05            [24] 1949 	push	ar5
      000723 C0 04            [24] 1950 	push	ar4
      000725 C0 03            [24] 1951 	push	ar3
      000727 C0 02            [24] 1952 	push	ar2
      000729 C0 01            [24] 1953 	push	ar1
      00072B C0 00            [24] 1954 	push	ar0
      00072D 12r03rB8         [24] 1955 	lcall	_drawCircle
      000730 D0 00            [24] 1956 	pop	ar0
      000732 D0 01            [24] 1957 	pop	ar1
      000734 D0 02            [24] 1958 	pop	ar2
      000736 D0 03            [24] 1959 	pop	ar3
      000738 D0 04            [24] 1960 	pop	ar4
      00073A D0 05            [24] 1961 	pop	ar5
      00073C D0 06            [24] 1962 	pop	ar6
      00073E D0 07            [24] 1963 	pop	ar7
                                   1964 ;	ecen4330_lcd_v3.c:308: for (y = 0; y < h; y += r2) {
      000740 90r00r08         [24] 1965 	mov	dptr,#_testCircles_y_65536_110
      000743 EB               [12] 1966 	mov	a,r3
      000744 25*2F            [12] 1967 	add	a,_testCircles_sloc0_1_0
      000746 F0               [24] 1968 	movx	@dptr,a
      000747 EC               [12] 1969 	mov	a,r4
      000748 35*30            [12] 1970 	addc	a,(_testCircles_sloc0_1_0 + 1)
      00074A A3               [24] 1971 	inc	dptr
      00074B F0               [24] 1972 	movx	@dptr,a
      00074C 80 9E            [24] 1973 	sjmp	00104$
      00074E                       1974 00108$:
                                   1975 ;	ecen4330_lcd_v3.c:307: for (x = 0; x < w; x += r2) {
      00074E 90r00r06         [24] 1976 	mov	dptr,#_testCircles_x_65536_110
      000751 E0               [24] 1977 	movx	a,@dptr
      000752 F8               [12] 1978 	mov	r0,a
      000753 A3               [24] 1979 	inc	dptr
      000754 E0               [24] 1980 	movx	a,@dptr
      000755 FD               [12] 1981 	mov	r5,a
      000756 90r00r06         [24] 1982 	mov	dptr,#_testCircles_x_65536_110
      000759 EB               [12] 1983 	mov	a,r3
      00075A 28               [12] 1984 	add	a,r0
      00075B F0               [24] 1985 	movx	@dptr,a
      00075C EC               [12] 1986 	mov	a,r4
      00075D 3D               [12] 1987 	addc	a,r5
      00075E A3               [24] 1988 	inc	dptr
      00075F F0               [24] 1989 	movx	@dptr,a
                                   1990 ;	ecen4330_lcd_v3.c:312: }
      000760 02r06rCD         [24] 1991 	ljmp	00107$
                                   1992 ;------------------------------------------------------------
                                   1993 ;Allocation info for local variables in function 'fillRect'
                                   1994 ;------------------------------------------------------------
                                   1995 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1996 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1997 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1998 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1999 ;x                         Allocated to registers 
                                   2000 ;------------------------------------------------------------
                                   2001 ;	ecen4330_lcd_v3.c:314: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   2002 ;	-----------------------------------------
                                   2003 ;	 function fillRect
                                   2004 ;	-----------------------------------------
      000763                       2005 _fillRect:
      000763 AE 82            [24] 2006 	mov	r6,dpl
      000765 AF 83            [24] 2007 	mov	r7,dph
                                   2008 ;	ecen4330_lcd_v3.c:315: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT)) {
      000767 8E 04            [24] 2009 	mov	ar4,r6
      000769 8F 05            [24] 2010 	mov	ar5,r7
      00076B C3               [12] 2011 	clr	c
      00076C EC               [12] 2012 	mov	a,r4
      00076D 94 F0            [12] 2013 	subb	a,#0xf0
      00076F ED               [12] 2014 	mov	a,r5
      000770 94 00            [12] 2015 	subb	a,#0x00
      000772 50 0D            [24] 2016 	jnc	00101$
      000774 AC*31            [24] 2017 	mov	r4,_fillRect_PARM_2
      000776 AD*32            [24] 2018 	mov	r5,(_fillRect_PARM_2 + 1)
      000778 C3               [12] 2019 	clr	c
      000779 EC               [12] 2020 	mov	a,r4
      00077A 94 40            [12] 2021 	subb	a,#0x40
      00077C ED               [12] 2022 	mov	a,r5
      00077D 94 01            [12] 2023 	subb	a,#0x01
      00077F 40 01            [24] 2024 	jc	00102$
      000781                       2025 00101$:
                                   2026 ;	ecen4330_lcd_v3.c:316: return;
      000781 22               [24] 2027 	ret
      000782                       2028 00102$:
                                   2029 ;	ecen4330_lcd_v3.c:319: if ((x+w-1) >= TFTWIDTH) {
      000782 E5*33            [12] 2030 	mov	a,_fillRect_PARM_3
      000784 2E               [12] 2031 	add	a,r6
      000785 FC               [12] 2032 	mov	r4,a
      000786 E5*34            [12] 2033 	mov	a,(_fillRect_PARM_3 + 1)
      000788 3F               [12] 2034 	addc	a,r7
      000789 FD               [12] 2035 	mov	r5,a
      00078A 1C               [12] 2036 	dec	r4
      00078B BC FF 01         [24] 2037 	cjne	r4,#0xff,00161$
      00078E 1D               [12] 2038 	dec	r5
      00078F                       2039 00161$:
      00078F C3               [12] 2040 	clr	c
      000790 EC               [12] 2041 	mov	a,r4
      000791 94 F0            [12] 2042 	subb	a,#0xf0
      000793 ED               [12] 2043 	mov	a,r5
      000794 94 00            [12] 2044 	subb	a,#0x00
      000796 40 0A            [24] 2045 	jc	00105$
                                   2046 ;	ecen4330_lcd_v3.c:320: w = TFTWIDTH-x;
      000798 74 F0            [12] 2047 	mov	a,#0xf0
      00079A C3               [12] 2048 	clr	c
      00079B 9E               [12] 2049 	subb	a,r6
      00079C F5*33            [12] 2050 	mov	_fillRect_PARM_3,a
      00079E E4               [12] 2051 	clr	a
      00079F 9F               [12] 2052 	subb	a,r7
      0007A0 F5*34            [12] 2053 	mov	(_fillRect_PARM_3 + 1),a
      0007A2                       2054 00105$:
                                   2055 ;	ecen4330_lcd_v3.c:323: if ((y+h-1) >= TFTHEIGHT) {
      0007A2 E5*35            [12] 2056 	mov	a,_fillRect_PARM_4
      0007A4 25*31            [12] 2057 	add	a,_fillRect_PARM_2
      0007A6 FC               [12] 2058 	mov	r4,a
      0007A7 E5*36            [12] 2059 	mov	a,(_fillRect_PARM_4 + 1)
      0007A9 35*32            [12] 2060 	addc	a,(_fillRect_PARM_2 + 1)
      0007AB FD               [12] 2061 	mov	r5,a
      0007AC 1C               [12] 2062 	dec	r4
      0007AD BC FF 01         [24] 2063 	cjne	r4,#0xff,00163$
      0007B0 1D               [12] 2064 	dec	r5
      0007B1                       2065 00163$:
      0007B1 C3               [12] 2066 	clr	c
      0007B2 EC               [12] 2067 	mov	a,r4
      0007B3 94 40            [12] 2068 	subb	a,#0x40
      0007B5 ED               [12] 2069 	mov	a,r5
      0007B6 94 01            [12] 2070 	subb	a,#0x01
      0007B8 40 0D            [24] 2071 	jc	00107$
                                   2072 ;	ecen4330_lcd_v3.c:324: h = TFTHEIGHT-y;
      0007BA 74 40            [12] 2073 	mov	a,#0x40
      0007BC C3               [12] 2074 	clr	c
      0007BD 95*31            [12] 2075 	subb	a,_fillRect_PARM_2
      0007BF F5*35            [12] 2076 	mov	_fillRect_PARM_4,a
      0007C1 74 01            [12] 2077 	mov	a,#0x01
      0007C3 95*32            [12] 2078 	subb	a,(_fillRect_PARM_2 + 1)
      0007C5 F5*36            [12] 2079 	mov	(_fillRect_PARM_4 + 1),a
      0007C7                       2080 00107$:
                                   2081 ;	ecen4330_lcd_v3.c:327: setAddress(x, y, x + w - 1, y + h - 1);
      0007C7 E5*33            [12] 2082 	mov	a,_fillRect_PARM_3
      0007C9 2E               [12] 2083 	add	a,r6
      0007CA FC               [12] 2084 	mov	r4,a
      0007CB E5*34            [12] 2085 	mov	a,(_fillRect_PARM_3 + 1)
      0007CD 3F               [12] 2086 	addc	a,r7
      0007CE FD               [12] 2087 	mov	r5,a
      0007CF 1C               [12] 2088 	dec	r4
      0007D0 BC FF 01         [24] 2089 	cjne	r4,#0xff,00165$
      0007D3 1D               [12] 2090 	dec	r5
      0007D4                       2091 00165$:
      0007D4 8C*02            [24] 2092 	mov	_setAddress_PARM_3,r4
      0007D6 8D*03            [24] 2093 	mov	(_setAddress_PARM_3 + 1),r5
      0007D8 E5*35            [12] 2094 	mov	a,_fillRect_PARM_4
      0007DA 25*31            [12] 2095 	add	a,_fillRect_PARM_2
      0007DC FC               [12] 2096 	mov	r4,a
      0007DD E5*36            [12] 2097 	mov	a,(_fillRect_PARM_4 + 1)
      0007DF 35*32            [12] 2098 	addc	a,(_fillRect_PARM_2 + 1)
      0007E1 FD               [12] 2099 	mov	r5,a
      0007E2 1C               [12] 2100 	dec	r4
      0007E3 BC FF 01         [24] 2101 	cjne	r4,#0xff,00166$
      0007E6 1D               [12] 2102 	dec	r5
      0007E7                       2103 00166$:
      0007E7 8C*04            [24] 2104 	mov	_setAddress_PARM_4,r4
      0007E9 8D*05            [24] 2105 	mov	(_setAddress_PARM_4 + 1),r5
      0007EB 85*31*00         [24] 2106 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      0007EE 85*32*01         [24] 2107 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      0007F1 8E 82            [24] 2108 	mov	dpl,r6
      0007F3 8F 83            [24] 2109 	mov	dph,r7
      0007F5 12r01r76         [24] 2110 	lcall	_setAddress
                                   2111 ;	ecen4330_lcd_v3.c:329: write8Reg(0x2C);
                                   2112 ;	assignBit
      0007F8 C2 B5            [12] 2113 	clr	_P3_5
                                   2114 ;	assignBit
      0007FA D2 B4            [12] 2115 	setb	_P3_4
      0007FC 85*02 82         [24] 2116 	mov	dpl,_lcd_address
      0007FF 85*03 83         [24] 2117 	mov	dph,(_lcd_address + 1)
      000802 74 2C            [12] 2118 	mov	a,#0x2c
      000804 F0               [24] 2119 	movx	@dptr,a
                                   2120 ;	assignBit
      000805 C2 B4            [12] 2121 	clr	_P3_4
                                   2122 ;	ecen4330_lcd_v3.c:330: CD = 1;
                                   2123 ;	assignBit
      000807 D2 B5            [12] 2124 	setb	_P3_5
                                   2125 ;	ecen4330_lcd_v3.c:332: for (y = h; y > 0; y--) {
      000809 AF*38            [24] 2126 	mov	r7,(_fillRect_PARM_5 + 1)
      00080B AD*35            [24] 2127 	mov	r5,_fillRect_PARM_4
      00080D AE*36            [24] 2128 	mov	r6,(_fillRect_PARM_4 + 1)
      00080F                       2129 00114$:
      00080F ED               [12] 2130 	mov	a,r5
      000810 4E               [12] 2131 	orl	a,r6
      000811 60 30            [24] 2132 	jz	00116$
                                   2133 ;	ecen4330_lcd_v3.c:333: for(x = w; x > 0; x--) {
      000813 AB*33            [24] 2134 	mov	r3,_fillRect_PARM_3
      000815 AC*34            [24] 2135 	mov	r4,(_fillRect_PARM_3 + 1)
      000817                       2136 00111$:
      000817 EB               [12] 2137 	mov	a,r3
      000818 4C               [12] 2138 	orl	a,r4
      000819 60 21            [24] 2139 	jz	00115$
                                   2140 ;	ecen4330_lcd_v3.c:334: write8(color>>8); write8(color);
                                   2141 ;	assignBit
      00081B D2 B4            [12] 2142 	setb	_P3_4
      00081D 85*02 82         [24] 2143 	mov	dpl,_lcd_address
      000820 85*03 83         [24] 2144 	mov	dph,(_lcd_address + 1)
      000823 EF               [12] 2145 	mov	a,r7
      000824 F0               [24] 2146 	movx	@dptr,a
                                   2147 ;	assignBit
      000825 C2 B4            [12] 2148 	clr	_P3_4
                                   2149 ;	assignBit
      000827 D2 B4            [12] 2150 	setb	_P3_4
      000829 85*02 82         [24] 2151 	mov	dpl,_lcd_address
      00082C 85*03 83         [24] 2152 	mov	dph,(_lcd_address + 1)
      00082F E5*37            [12] 2153 	mov	a,_fillRect_PARM_5
      000831 FA               [12] 2154 	mov	r2,a
      000832 F0               [24] 2155 	movx	@dptr,a
                                   2156 ;	assignBit
      000833 C2 B4            [12] 2157 	clr	_P3_4
                                   2158 ;	ecen4330_lcd_v3.c:333: for(x = w; x > 0; x--) {
      000835 1B               [12] 2159 	dec	r3
      000836 BB FF 01         [24] 2160 	cjne	r3,#0xff,00169$
      000839 1C               [12] 2161 	dec	r4
      00083A                       2162 00169$:
      00083A 80 DB            [24] 2163 	sjmp	00111$
      00083C                       2164 00115$:
                                   2165 ;	ecen4330_lcd_v3.c:332: for (y = h; y > 0; y--) {
      00083C 1D               [12] 2166 	dec	r5
      00083D BD FF 01         [24] 2167 	cjne	r5,#0xff,00170$
      000840 1E               [12] 2168 	dec	r6
      000841                       2169 00170$:
      000841 80 CC            [24] 2170 	sjmp	00114$
      000843                       2171 00116$:
                                   2172 ;	ecen4330_lcd_v3.c:337: }
      000843 22               [24] 2173 	ret
                                   2174 ;------------------------------------------------------------
                                   2175 ;Allocation info for local variables in function 'fillScreen'
                                   2176 ;------------------------------------------------------------
                                   2177 ;Color                     Allocated to registers r6 r7 
                                   2178 ;len                       Allocated with name '_fillScreen_len_65536_129'
                                   2179 ;blocks                    Allocated with name '_fillScreen_blocks_65536_129'
                                   2180 ;i                         Allocated with name '_fillScreen_i_65536_129'
                                   2181 ;hi                        Allocated with name '_fillScreen_hi_65536_129'
                                   2182 ;lo                        Allocated with name '_fillScreen_lo_65536_129'
                                   2183 ;------------------------------------------------------------
                                   2184 ;	ecen4330_lcd_v3.c:344: void fillScreen (uint16_t Color) {
                                   2185 ;	-----------------------------------------
                                   2186 ;	 function fillScreen
                                   2187 ;	-----------------------------------------
      000844                       2188 _fillScreen:
      000844 AE 82            [24] 2189 	mov	r6,dpl
      000846 AF 83            [24] 2190 	mov	r7,dph
                                   2191 ;	ecen4330_lcd_v3.c:349: __xdata uint8_t  i, hi = Color >> 8,
      000848 8F 05            [24] 2192 	mov	ar5,r7
                                   2193 ;	ecen4330_lcd_v3.c:350: lo = Color;
                                   2194 ;	ecen4330_lcd_v3.c:353: setAddress(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
      00084A E4               [12] 2195 	clr	a
      00084B F5*00            [12] 2196 	mov	_setAddress_PARM_2,a
      00084D F5*01            [12] 2197 	mov	(_setAddress_PARM_2 + 1),a
      00084F 75*02 EF         [24] 2198 	mov	_setAddress_PARM_3,#0xef
                                   2199 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000852 F5*03            [12] 2200 	mov	(_setAddress_PARM_3 + 1),a
      000854 75*04 3F         [24] 2201 	mov	_setAddress_PARM_4,#0x3f
      000857 75*05 01         [24] 2202 	mov	(_setAddress_PARM_4 + 1),#0x01
      00085A 90 00 00         [24] 2203 	mov	dptr,#0x0000
      00085D C0 06            [24] 2204 	push	ar6
      00085F C0 05            [24] 2205 	push	ar5
      000861 12r01r76         [24] 2206 	lcall	_setAddress
      000864 D0 05            [24] 2207 	pop	ar5
      000866 D0 06            [24] 2208 	pop	ar6
                                   2209 ;	ecen4330_lcd_v3.c:355: write8Reg(0x2C);
                                   2210 ;	assignBit
      000868 C2 B5            [12] 2211 	clr	_P3_5
                                   2212 ;	assignBit
      00086A D2 B4            [12] 2213 	setb	_P3_4
      00086C 85*02 82         [24] 2214 	mov	dpl,_lcd_address
      00086F 85*03 83         [24] 2215 	mov	dph,(_lcd_address + 1)
      000872 74 2C            [12] 2216 	mov	a,#0x2c
      000874 F0               [24] 2217 	movx	@dptr,a
                                   2218 ;	assignBit
      000875 C2 B4            [12] 2219 	clr	_P3_4
                                   2220 ;	ecen4330_lcd_v3.c:356: CD = 1;
                                   2221 ;	assignBit
      000877 D2 B5            [12] 2222 	setb	_P3_5
                                   2223 ;	ecen4330_lcd_v3.c:357: write8(hi);
                                   2224 ;	assignBit
      000879 D2 B4            [12] 2225 	setb	_P3_4
      00087B 85*02 82         [24] 2226 	mov	dpl,_lcd_address
      00087E 85*03 83         [24] 2227 	mov	dph,(_lcd_address + 1)
      000881 ED               [12] 2228 	mov	a,r5
      000882 F0               [24] 2229 	movx	@dptr,a
                                   2230 ;	assignBit
      000883 C2 B4            [12] 2231 	clr	_P3_4
                                   2232 ;	ecen4330_lcd_v3.c:358: write8(lo);
                                   2233 ;	assignBit
      000885 D2 B4            [12] 2234 	setb	_P3_4
      000887 85*02 82         [24] 2235 	mov	dpl,_lcd_address
      00088A 85*03 83         [24] 2236 	mov	dph,(_lcd_address + 1)
      00088D EE               [12] 2237 	mov	a,r6
      00088E F0               [24] 2238 	movx	@dptr,a
                                   2239 ;	assignBit
      00088F C2 B4            [12] 2240 	clr	_P3_4
                                   2241 ;	ecen4330_lcd_v3.c:361: while (blocks--) {
      000891 7C B0            [12] 2242 	mov	r4,#0xb0
      000893 7F 04            [12] 2243 	mov	r7,#0x04
      000895                       2244 00104$:
      000895 8C 02            [24] 2245 	mov	ar2,r4
      000897 8F 03            [24] 2246 	mov	ar3,r7
      000899 1C               [12] 2247 	dec	r4
      00089A BC FF 01         [24] 2248 	cjne	r4,#0xff,00140$
      00089D 1F               [12] 2249 	dec	r7
      00089E                       2250 00140$:
      00089E EA               [12] 2251 	mov	a,r2
      00089F 4B               [12] 2252 	orl	a,r3
      0008A0 60 66            [24] 2253 	jz	00106$
                                   2254 ;	ecen4330_lcd_v3.c:364: do {
      0008A2 7B 10            [12] 2255 	mov	r3,#0x10
      0008A4                       2256 00101$:
                                   2257 ;	ecen4330_lcd_v3.c:365: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2258 ;	assignBit
      0008A4 D2 B4            [12] 2259 	setb	_P3_4
      0008A6 85*02 82         [24] 2260 	mov	dpl,_lcd_address
      0008A9 85*03 83         [24] 2261 	mov	dph,(_lcd_address + 1)
      0008AC ED               [12] 2262 	mov	a,r5
      0008AD F0               [24] 2263 	movx	@dptr,a
                                   2264 ;	assignBit
      0008AE C2 B4            [12] 2265 	clr	_P3_4
                                   2266 ;	assignBit
      0008B0 D2 B4            [12] 2267 	setb	_P3_4
      0008B2 85*02 82         [24] 2268 	mov	dpl,_lcd_address
      0008B5 85*03 83         [24] 2269 	mov	dph,(_lcd_address + 1)
      0008B8 EE               [12] 2270 	mov	a,r6
      0008B9 F0               [24] 2271 	movx	@dptr,a
                                   2272 ;	assignBit
      0008BA C2 B4            [12] 2273 	clr	_P3_4
                                   2274 ;	assignBit
      0008BC D2 B4            [12] 2275 	setb	_P3_4
      0008BE 85*02 82         [24] 2276 	mov	dpl,_lcd_address
      0008C1 85*03 83         [24] 2277 	mov	dph,(_lcd_address + 1)
      0008C4 ED               [12] 2278 	mov	a,r5
      0008C5 F0               [24] 2279 	movx	@dptr,a
                                   2280 ;	assignBit
      0008C6 C2 B4            [12] 2281 	clr	_P3_4
                                   2282 ;	assignBit
      0008C8 D2 B4            [12] 2283 	setb	_P3_4
      0008CA 85*02 82         [24] 2284 	mov	dpl,_lcd_address
      0008CD 85*03 83         [24] 2285 	mov	dph,(_lcd_address + 1)
      0008D0 EE               [12] 2286 	mov	a,r6
      0008D1 F0               [24] 2287 	movx	@dptr,a
                                   2288 ;	assignBit
      0008D2 C2 B4            [12] 2289 	clr	_P3_4
                                   2290 ;	ecen4330_lcd_v3.c:366: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2291 ;	assignBit
      0008D4 D2 B4            [12] 2292 	setb	_P3_4
      0008D6 85*02 82         [24] 2293 	mov	dpl,_lcd_address
      0008D9 85*03 83         [24] 2294 	mov	dph,(_lcd_address + 1)
      0008DC ED               [12] 2295 	mov	a,r5
      0008DD F0               [24] 2296 	movx	@dptr,a
                                   2297 ;	assignBit
      0008DE C2 B4            [12] 2298 	clr	_P3_4
                                   2299 ;	assignBit
      0008E0 D2 B4            [12] 2300 	setb	_P3_4
      0008E2 85*02 82         [24] 2301 	mov	dpl,_lcd_address
      0008E5 85*03 83         [24] 2302 	mov	dph,(_lcd_address + 1)
      0008E8 EE               [12] 2303 	mov	a,r6
      0008E9 F0               [24] 2304 	movx	@dptr,a
                                   2305 ;	assignBit
      0008EA C2 B4            [12] 2306 	clr	_P3_4
                                   2307 ;	assignBit
      0008EC D2 B4            [12] 2308 	setb	_P3_4
      0008EE 85*02 82         [24] 2309 	mov	dpl,_lcd_address
      0008F1 85*03 83         [24] 2310 	mov	dph,(_lcd_address + 1)
      0008F4 ED               [12] 2311 	mov	a,r5
      0008F5 F0               [24] 2312 	movx	@dptr,a
                                   2313 ;	assignBit
      0008F6 C2 B4            [12] 2314 	clr	_P3_4
                                   2315 ;	assignBit
      0008F8 D2 B4            [12] 2316 	setb	_P3_4
      0008FA 85*02 82         [24] 2317 	mov	dpl,_lcd_address
      0008FD 85*03 83         [24] 2318 	mov	dph,(_lcd_address + 1)
      000900 EE               [12] 2319 	mov	a,r6
      000901 F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	assignBit
      000902 C2 B4            [12] 2322 	clr	_P3_4
                                   2323 ;	ecen4330_lcd_v3.c:367: } while(--i);
      000904 DB 9E            [24] 2324 	djnz	r3,00101$
      000906 80 8D            [24] 2325 	sjmp	00104$
      000908                       2326 00106$:
                                   2327 ;	ecen4330_lcd_v3.c:370: for (i = (char)len & 63; i--; ) {
      000908 7F 3F            [12] 2328 	mov	r7,#0x3f
      00090A                       2329 00109$:
      00090A 8F 04            [24] 2330 	mov	ar4,r7
      00090C 1F               [12] 2331 	dec	r7
      00090D EC               [12] 2332 	mov	a,r4
      00090E 60 1A            [24] 2333 	jz	00111$
                                   2334 ;	ecen4330_lcd_v3.c:371: write8(hi);
                                   2335 ;	assignBit
      000910 D2 B4            [12] 2336 	setb	_P3_4
      000912 85*02 82         [24] 2337 	mov	dpl,_lcd_address
      000915 85*03 83         [24] 2338 	mov	dph,(_lcd_address + 1)
      000918 ED               [12] 2339 	mov	a,r5
      000919 F0               [24] 2340 	movx	@dptr,a
                                   2341 ;	assignBit
      00091A C2 B4            [12] 2342 	clr	_P3_4
                                   2343 ;	ecen4330_lcd_v3.c:372: write8(lo);
                                   2344 ;	assignBit
      00091C D2 B4            [12] 2345 	setb	_P3_4
      00091E 85*02 82         [24] 2346 	mov	dpl,_lcd_address
      000921 85*03 83         [24] 2347 	mov	dph,(_lcd_address + 1)
      000924 EE               [12] 2348 	mov	a,r6
      000925 F0               [24] 2349 	movx	@dptr,a
                                   2350 ;	assignBit
      000926 C2 B4            [12] 2351 	clr	_P3_4
      000928 80 E0            [24] 2352 	sjmp	00109$
      00092A                       2353 00111$:
                                   2354 ;	ecen4330_lcd_v3.c:374: }
      00092A 22               [24] 2355 	ret
                                   2356 ;------------------------------------------------------------
                                   2357 ;Allocation info for local variables in function 'drawChar'
                                   2358 ;------------------------------------------------------------
                                   2359 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2360 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2361 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2362 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2363 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2364 ;x                         Allocated to registers r6 r7 
                                   2365 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2366 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2367 ;sloc3                     Allocated with name '_drawChar_sloc3_1_0'
                                   2368 ;sloc4                     Allocated with name '_drawChar_sloc4_1_0'
                                   2369 ;sloc5                     Allocated with name '_drawChar_sloc5_1_0'
                                   2370 ;i                         Allocated with name '_drawChar_i_65537_151'
                                   2371 ;line                      Allocated with name '_drawChar_line_196609_153'
                                   2372 ;j                         Allocated with name '_drawChar_j_196610_156'
                                   2373 ;------------------------------------------------------------
                                   2374 ;	ecen4330_lcd_v3.c:385: void drawChar (int16_t x, int16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t size) {
                                   2375 ;	-----------------------------------------
                                   2376 ;	 function drawChar
                                   2377 ;	-----------------------------------------
      00092B                       2378 _drawChar:
      00092B AE 82            [24] 2379 	mov	r6,dpl
      00092D AF 83            [24] 2380 	mov	r7,dph
                                   2381 ;	ecen4330_lcd_v3.c:386: if ((x >=TFTWIDTH) ||
      00092F C3               [12] 2382 	clr	c
      000930 EE               [12] 2383 	mov	a,r6
      000931 94 F0            [12] 2384 	subb	a,#0xf0
      000933 EF               [12] 2385 	mov	a,r7
      000934 64 80            [12] 2386 	xrl	a,#0x80
      000936 94 80            [12] 2387 	subb	a,#0x80
      000938 50 67            [24] 2388 	jnc	00101$
                                   2389 ;	ecen4330_lcd_v3.c:387: (y >=TFTHEIGHT) ||
      00093A AC*39            [24] 2390 	mov	r4,_drawChar_PARM_2
      00093C AD*3A            [24] 2391 	mov	r5,(_drawChar_PARM_2 + 1)
      00093E C3               [12] 2392 	clr	c
      00093F EC               [12] 2393 	mov	a,r4
      000940 94 40            [12] 2394 	subb	a,#0x40
      000942 ED               [12] 2395 	mov	a,r5
      000943 64 80            [12] 2396 	xrl	a,#0x80
      000945 94 81            [12] 2397 	subb	a,#0x81
      000947 50 58            [24] 2398 	jnc	00101$
                                   2399 ;	ecen4330_lcd_v3.c:388: ((x + 6 * size - 1) < 0) ||
      000949 AA*40            [24] 2400 	mov	r2,_drawChar_PARM_6
      00094B 7B 00            [12] 2401 	mov	r3,#0x00
      00094D 8A*00            [24] 2402 	mov	__mulint_PARM_2,r2
      00094F 8B*01            [24] 2403 	mov	(__mulint_PARM_2 + 1),r3
      000951 90 00 06         [24] 2404 	mov	dptr,#0x0006
      000954 C0 07            [24] 2405 	push	ar7
      000956 C0 06            [24] 2406 	push	ar6
      000958 C0 05            [24] 2407 	push	ar5
      00095A C0 04            [24] 2408 	push	ar4
      00095C C0 03            [24] 2409 	push	ar3
      00095E C0 02            [24] 2410 	push	ar2
      000960 12r00r00         [24] 2411 	lcall	__mulint
      000963 A8 82            [24] 2412 	mov	r0,dpl
      000965 A9 83            [24] 2413 	mov	r1,dph
      000967 D0 02            [24] 2414 	pop	ar2
      000969 D0 03            [24] 2415 	pop	ar3
      00096B D0 04            [24] 2416 	pop	ar4
      00096D D0 05            [24] 2417 	pop	ar5
      00096F D0 06            [24] 2418 	pop	ar6
      000971 D0 07            [24] 2419 	pop	ar7
      000973 E8               [12] 2420 	mov	a,r0
      000974 2E               [12] 2421 	add	a,r6
      000975 F8               [12] 2422 	mov	r0,a
      000976 E9               [12] 2423 	mov	a,r1
      000977 3F               [12] 2424 	addc	a,r7
      000978 F9               [12] 2425 	mov	r1,a
      000979 18               [12] 2426 	dec	r0
      00097A B8 FF 01         [24] 2427 	cjne	r0,#0xff,00176$
      00097D 19               [12] 2428 	dec	r1
      00097E                       2429 00176$:
      00097E E9               [12] 2430 	mov	a,r1
      00097F 20 E7 1F         [24] 2431 	jb	acc.7,00101$
                                   2432 ;	ecen4330_lcd_v3.c:389: ((y + 8 * size - 1) < 0))
      000982 EB               [12] 2433 	mov	a,r3
      000983 C4               [12] 2434 	swap	a
      000984 03               [12] 2435 	rr	a
      000985 54 F8            [12] 2436 	anl	a,#0xf8
      000987 CA               [12] 2437 	xch	a,r2
      000988 C4               [12] 2438 	swap	a
      000989 03               [12] 2439 	rr	a
      00098A CA               [12] 2440 	xch	a,r2
      00098B 6A               [12] 2441 	xrl	a,r2
      00098C CA               [12] 2442 	xch	a,r2
      00098D 54 F8            [12] 2443 	anl	a,#0xf8
      00098F CA               [12] 2444 	xch	a,r2
      000990 6A               [12] 2445 	xrl	a,r2
      000991 FB               [12] 2446 	mov	r3,a
      000992 EA               [12] 2447 	mov	a,r2
      000993 2C               [12] 2448 	add	a,r4
      000994 FA               [12] 2449 	mov	r2,a
      000995 EB               [12] 2450 	mov	a,r3
      000996 3D               [12] 2451 	addc	a,r5
      000997 FB               [12] 2452 	mov	r3,a
      000998 1A               [12] 2453 	dec	r2
      000999 BA FF 01         [24] 2454 	cjne	r2,#0xff,00178$
      00099C 1B               [12] 2455 	dec	r3
      00099D                       2456 00178$:
      00099D EB               [12] 2457 	mov	a,r3
      00099E 30 E7 01         [24] 2458 	jnb	acc.7,00138$
      0009A1                       2459 00101$:
                                   2460 ;	ecen4330_lcd_v3.c:391: return;
      0009A1 22               [24] 2461 	ret
                                   2462 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      0009A2                       2463 00138$:
      0009A2 74 01            [12] 2464 	mov	a,#0x01
      0009A4 B5*40 04         [24] 2465 	cjne	a,_drawChar_PARM_6,00180$
      0009A7 74 01            [12] 2466 	mov	a,#0x01
      0009A9 80 01            [24] 2467 	sjmp	00181$
      0009AB                       2468 00180$:
      0009AB E4               [12] 2469 	clr	a
      0009AC                       2470 00181$:
      0009AC FB               [12] 2471 	mov	r3,a
      0009AD 8B*47            [24] 2472 	mov	_drawChar_sloc5_1_0,r3
      0009AF E5*3C            [12] 2473 	mov	a,_drawChar_PARM_4
      0009B1 B5*3E 08         [24] 2474 	cjne	a,_drawChar_PARM_5,00182$
      0009B4 E5*3D            [12] 2475 	mov	a,(_drawChar_PARM_4 + 1)
      0009B6 B5*3F 03         [24] 2476 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      0009B9 D3               [12] 2477 	setb	c
      0009BA 80 01            [24] 2478 	sjmp	00183$
      0009BC                       2479 00182$:
      0009BC C3               [12] 2480 	clr	c
      0009BD                       2481 00183$:
      0009BD 92*00            [24] 2482 	mov	_drawChar_sloc0_1_0,c
      0009BF 79 00            [12] 2483 	mov	r1,#0x00
      0009C1                       2484 00124$:
                                   2485 ;	ecen4330_lcd_v3.c:399: if (i == 5) {
      0009C1 B9 05 07         [24] 2486 	cjne	r1,#0x05,00107$
                                   2487 ;	ecen4330_lcd_v3.c:400: line = 0x0;
      0009C4 90r00r0A         [24] 2488 	mov	dptr,#_drawChar_line_196609_153
      0009C7 E4               [12] 2489 	clr	a
      0009C8 F0               [24] 2490 	movx	@dptr,a
      0009C9 80 49            [24] 2491 	sjmp	00136$
      0009CB                       2492 00107$:
                                   2493 ;	ecen4330_lcd_v3.c:402: line = pgm_read_byte(font+(c*5)+i);
      0009CB 85*3B*00         [24] 2494 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0009CE 75*01 00         [24] 2495 	mov	(__mulint_PARM_2 + 1),#0x00
      0009D1 90 00 05         [24] 2496 	mov	dptr,#0x0005
      0009D4 C0 07            [24] 2497 	push	ar7
      0009D6 C0 06            [24] 2498 	push	ar6
      0009D8 C0 05            [24] 2499 	push	ar5
      0009DA C0 04            [24] 2500 	push	ar4
      0009DC C0 03            [24] 2501 	push	ar3
      0009DE C0 01            [24] 2502 	push	ar1
      0009E0 12r00r00         [24] 2503 	lcall	__mulint
      0009E3 A8 82            [24] 2504 	mov	r0,dpl
      0009E5 AA 83            [24] 2505 	mov	r2,dph
      0009E7 D0 01            [24] 2506 	pop	ar1
      0009E9 D0 03            [24] 2507 	pop	ar3
      0009EB D0 04            [24] 2508 	pop	ar4
      0009ED D0 05            [24] 2509 	pop	ar5
      0009EF D0 06            [24] 2510 	pop	ar6
      0009F1 D0 07            [24] 2511 	pop	ar7
      0009F3 E8               [12] 2512 	mov	a,r0
      0009F4 24r00            [12] 2513 	add	a,#_font
      0009F6 F5*41            [12] 2514 	mov	_drawChar_sloc1_1_0,a
      0009F8 EA               [12] 2515 	mov	a,r2
      0009F9 34s00            [12] 2516 	addc	a,#(_font >> 8)
      0009FB F5*42            [12] 2517 	mov	(_drawChar_sloc1_1_0 + 1),a
      0009FD E9               [12] 2518 	mov	a,r1
      0009FE F8               [12] 2519 	mov	r0,a
      0009FF 33               [12] 2520 	rlc	a
      000A00 95 E0            [12] 2521 	subb	a,acc
      000A02 FA               [12] 2522 	mov	r2,a
      000A03 E8               [12] 2523 	mov	a,r0
      000A04 25*41            [12] 2524 	add	a,_drawChar_sloc1_1_0
      000A06 F5 82            [12] 2525 	mov	dpl,a
      000A08 EA               [12] 2526 	mov	a,r2
      000A09 35*42            [12] 2527 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000A0B F5 83            [12] 2528 	mov	dph,a
      000A0D E4               [12] 2529 	clr	a
      000A0E 93               [24] 2530 	movc	a,@a+dptr
      000A0F FA               [12] 2531 	mov	r2,a
      000A10 90r00r0A         [24] 2532 	mov	dptr,#_drawChar_line_196609_153
      000A13 F0               [24] 2533 	movx	@dptr,a
                                   2534 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
                                   2535 ;	ecen4330_lcd_v3.c:407: for (j = 0; j < 8; j++) {
      000A14                       2536 00136$:
      000A14 C2 D5            [12] 2537 	clr	F0
      000A16 85*40 F0         [24] 2538 	mov	b,_drawChar_PARM_6
      000A19 E9               [12] 2539 	mov	a,r1
      000A1A 30 E7 04         [24] 2540 	jnb	acc.7,00186$
      000A1D B2 D5            [12] 2541 	cpl	F0
      000A1F F4               [12] 2542 	cpl	a
      000A20 04               [12] 2543 	inc	a
      000A21                       2544 00186$:
      000A21 A4               [48] 2545 	mul	ab
      000A22 30 D5 0A         [24] 2546 	jnb	F0,00187$
      000A25 F4               [12] 2547 	cpl	a
      000A26 24 01            [12] 2548 	add	a,#0x01
      000A28 C5 F0            [12] 2549 	xch	a,b
      000A2A F4               [12] 2550 	cpl	a
      000A2B 34 00            [12] 2551 	addc	a,#0x00
      000A2D C5 F0            [12] 2552 	xch	a,b
      000A2F                       2553 00187$:
      000A2F 2E               [12] 2554 	add	a,r6
      000A30 F5*41            [12] 2555 	mov	_drawChar_sloc1_1_0,a
      000A32 EF               [12] 2556 	mov	a,r7
      000A33 35 F0            [12] 2557 	addc	a,b
      000A35 F5*42            [12] 2558 	mov	(_drawChar_sloc1_1_0 + 1),a
      000A37 89 00            [24] 2559 	mov	ar0,r1
      000A39 85*41*43         [24] 2560 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      000A3C 85*42*44         [24] 2561 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000A3F 89*45            [24] 2562 	mov	_drawChar_sloc3_1_0,r1
      000A41 75*46 00         [24] 2563 	mov	_drawChar_sloc4_1_0,#0x00
      000A44                       2564 00122$:
                                   2565 ;	ecen4330_lcd_v3.c:408: if (line & 0x1) {
      000A44 90r00r0A         [24] 2566 	mov	dptr,#_drawChar_line_196609_153
      000A47 E0               [24] 2567 	movx	a,@dptr
      000A48 20 E0 03         [24] 2568 	jb	acc.0,00188$
      000A4B 02r0Br03         [24] 2569 	ljmp	00118$
      000A4E                       2570 00188$:
                                   2571 ;	ecen4330_lcd_v3.c:409: if (size == 1) {
      000A4E EB               [12] 2572 	mov	a,r3
      000A4F 60 4E            [24] 2573 	jz	00110$
                                   2574 ;	ecen4330_lcd_v3.c:410: drawPixel(x+i, y+j, color);
      000A51 C0 00            [24] 2575 	push	ar0
      000A53 E5*45            [12] 2576 	mov	a,_drawChar_sloc3_1_0
      000A55 F8               [12] 2577 	mov	r0,a
      000A56 33               [12] 2578 	rlc	a
      000A57 95 E0            [12] 2579 	subb	a,acc
      000A59 FA               [12] 2580 	mov	r2,a
      000A5A E8               [12] 2581 	mov	a,r0
      000A5B 2E               [12] 2582 	add	a,r6
      000A5C F8               [12] 2583 	mov	r0,a
      000A5D EA               [12] 2584 	mov	a,r2
      000A5E 3F               [12] 2585 	addc	a,r7
      000A5F FA               [12] 2586 	mov	r2,a
      000A60 88 82            [24] 2587 	mov	dpl,r0
      000A62 8A 83            [24] 2588 	mov	dph,r2
      000A64 E5*46            [12] 2589 	mov	a,_drawChar_sloc4_1_0
      000A66 F8               [12] 2590 	mov	r0,a
      000A67 33               [12] 2591 	rlc	a
      000A68 95 E0            [12] 2592 	subb	a,acc
      000A6A FA               [12] 2593 	mov	r2,a
      000A6B E8               [12] 2594 	mov	a,r0
      000A6C 2C               [12] 2595 	add	a,r4
      000A6D F8               [12] 2596 	mov	r0,a
      000A6E EA               [12] 2597 	mov	a,r2
      000A6F 3D               [12] 2598 	addc	a,r5
      000A70 FA               [12] 2599 	mov	r2,a
      000A71 88*16            [24] 2600 	mov	_drawPixel_PARM_2,r0
      000A73 8A*17            [24] 2601 	mov	(_drawPixel_PARM_2 + 1),r2
      000A75 85*3C*18         [24] 2602 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000A78 85*3D*19         [24] 2603 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000A7B C0 07            [24] 2604 	push	ar7
      000A7D C0 06            [24] 2605 	push	ar6
      000A7F C0 05            [24] 2606 	push	ar5
      000A81 C0 04            [24] 2607 	push	ar4
      000A83 C0 03            [24] 2608 	push	ar3
      000A85 C0 01            [24] 2609 	push	ar1
      000A87 C0 00            [24] 2610 	push	ar0
      000A89 12r03r61         [24] 2611 	lcall	_drawPixel
      000A8C D0 00            [24] 2612 	pop	ar0
      000A8E D0 01            [24] 2613 	pop	ar1
      000A90 D0 03            [24] 2614 	pop	ar3
      000A92 D0 04            [24] 2615 	pop	ar4
      000A94 D0 05            [24] 2616 	pop	ar5
      000A96 D0 06            [24] 2617 	pop	ar6
      000A98 D0 07            [24] 2618 	pop	ar7
      000A9A D0 00            [24] 2619 	pop	ar0
      000A9C 02r0BrBA         [24] 2620 	ljmp	00119$
      000A9F                       2621 00110$:
                                   2622 ;	ecen4330_lcd_v3.c:412: fillRect(x+(i*size), y+(j*size), size, size, color);
      000A9F C0 00            [24] 2623 	push	ar0
      000AA1 85*43 82         [24] 2624 	mov	dpl,_drawChar_sloc2_1_0
      000AA4 85*44 83         [24] 2625 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      000AA7 C2 D5            [12] 2626 	clr	F0
      000AA9 85*40 F0         [24] 2627 	mov	b,_drawChar_PARM_6
      000AAC E5*46            [12] 2628 	mov	a,_drawChar_sloc4_1_0
      000AAE 30 E7 04         [24] 2629 	jnb	acc.7,00190$
      000AB1 B2 D5            [12] 2630 	cpl	F0
      000AB3 F4               [12] 2631 	cpl	a
      000AB4 04               [12] 2632 	inc	a
      000AB5                       2633 00190$:
      000AB5 A4               [48] 2634 	mul	ab
      000AB6 30 D5 0A         [24] 2635 	jnb	F0,00191$
      000AB9 F4               [12] 2636 	cpl	a
      000ABA 24 01            [12] 2637 	add	a,#0x01
      000ABC C5 F0            [12] 2638 	xch	a,b
      000ABE F4               [12] 2639 	cpl	a
      000ABF 34 00            [12] 2640 	addc	a,#0x00
      000AC1 C5 F0            [12] 2641 	xch	a,b
      000AC3                       2642 00191$:
      000AC3 2C               [12] 2643 	add	a,r4
      000AC4 F8               [12] 2644 	mov	r0,a
      000AC5 ED               [12] 2645 	mov	a,r5
      000AC6 35 F0            [12] 2646 	addc	a,b
      000AC8 FA               [12] 2647 	mov	r2,a
      000AC9 88*31            [24] 2648 	mov	_fillRect_PARM_2,r0
      000ACB 8A*32            [24] 2649 	mov	(_fillRect_PARM_2 + 1),r2
      000ACD A8*40            [24] 2650 	mov	r0,_drawChar_PARM_6
      000ACF 7A 00            [12] 2651 	mov	r2,#0x00
      000AD1 88*33            [24] 2652 	mov	_fillRect_PARM_3,r0
      000AD3 8A*34            [24] 2653 	mov	(_fillRect_PARM_3 + 1),r2
      000AD5 88*35            [24] 2654 	mov	_fillRect_PARM_4,r0
      000AD7 8A*36            [24] 2655 	mov	(_fillRect_PARM_4 + 1),r2
      000AD9 85*3C*37         [24] 2656 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000ADC 85*3D*38         [24] 2657 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000ADF C0 07            [24] 2658 	push	ar7
      000AE1 C0 06            [24] 2659 	push	ar6
      000AE3 C0 05            [24] 2660 	push	ar5
      000AE5 C0 04            [24] 2661 	push	ar4
      000AE7 C0 03            [24] 2662 	push	ar3
      000AE9 C0 01            [24] 2663 	push	ar1
      000AEB C0 00            [24] 2664 	push	ar0
      000AED 12r07r63         [24] 2665 	lcall	_fillRect
      000AF0 D0 00            [24] 2666 	pop	ar0
      000AF2 D0 01            [24] 2667 	pop	ar1
      000AF4 D0 03            [24] 2668 	pop	ar3
      000AF6 D0 04            [24] 2669 	pop	ar4
      000AF8 D0 05            [24] 2670 	pop	ar5
      000AFA D0 06            [24] 2671 	pop	ar6
      000AFC D0 07            [24] 2672 	pop	ar7
      000AFE D0 00            [24] 2673 	pop	ar0
      000B00 02r0BrBA         [24] 2674 	ljmp	00119$
      000B03                       2675 00118$:
                                   2676 ;	ecen4330_lcd_v3.c:414: } else if (bg != color) {
      000B03 30*00 03         [24] 2677 	jnb	_drawChar_sloc0_1_0,00192$
      000B06 02r0BrBA         [24] 2678 	ljmp	00119$
      000B09                       2679 00192$:
                                   2680 ;	ecen4330_lcd_v3.c:415: if (size == 1) {
      000B09 E5*47            [12] 2681 	mov	a,_drawChar_sloc5_1_0
      000B0B 60 4C            [24] 2682 	jz	00113$
                                   2683 ;	ecen4330_lcd_v3.c:416: drawPixel(x+i, y+j, bg);
      000B0D C0 03            [24] 2684 	push	ar3
      000B0F E8               [12] 2685 	mov	a,r0
      000B10 FA               [12] 2686 	mov	r2,a
      000B11 33               [12] 2687 	rlc	a
      000B12 95 E0            [12] 2688 	subb	a,acc
      000B14 FB               [12] 2689 	mov	r3,a
      000B15 EA               [12] 2690 	mov	a,r2
      000B16 2E               [12] 2691 	add	a,r6
      000B17 FA               [12] 2692 	mov	r2,a
      000B18 EB               [12] 2693 	mov	a,r3
      000B19 3F               [12] 2694 	addc	a,r7
      000B1A FB               [12] 2695 	mov	r3,a
      000B1B 8A 82            [24] 2696 	mov	dpl,r2
      000B1D 8B 83            [24] 2697 	mov	dph,r3
      000B1F E5*46            [12] 2698 	mov	a,_drawChar_sloc4_1_0
      000B21 FA               [12] 2699 	mov	r2,a
      000B22 33               [12] 2700 	rlc	a
      000B23 95 E0            [12] 2701 	subb	a,acc
      000B25 FB               [12] 2702 	mov	r3,a
      000B26 EA               [12] 2703 	mov	a,r2
      000B27 2C               [12] 2704 	add	a,r4
      000B28 FA               [12] 2705 	mov	r2,a
      000B29 EB               [12] 2706 	mov	a,r3
      000B2A 3D               [12] 2707 	addc	a,r5
      000B2B FB               [12] 2708 	mov	r3,a
      000B2C 8A*16            [24] 2709 	mov	_drawPixel_PARM_2,r2
      000B2E 8B*17            [24] 2710 	mov	(_drawPixel_PARM_2 + 1),r3
      000B30 85*3E*18         [24] 2711 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000B33 85*3F*19         [24] 2712 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000B36 C0 07            [24] 2713 	push	ar7
      000B38 C0 06            [24] 2714 	push	ar6
      000B3A C0 05            [24] 2715 	push	ar5
      000B3C C0 04            [24] 2716 	push	ar4
      000B3E C0 03            [24] 2717 	push	ar3
      000B40 C0 01            [24] 2718 	push	ar1
      000B42 C0 00            [24] 2719 	push	ar0
      000B44 12r03r61         [24] 2720 	lcall	_drawPixel
      000B47 D0 00            [24] 2721 	pop	ar0
      000B49 D0 01            [24] 2722 	pop	ar1
      000B4B D0 03            [24] 2723 	pop	ar3
      000B4D D0 04            [24] 2724 	pop	ar4
      000B4F D0 05            [24] 2725 	pop	ar5
      000B51 D0 06            [24] 2726 	pop	ar6
      000B53 D0 07            [24] 2727 	pop	ar7
      000B55 D0 03            [24] 2728 	pop	ar3
      000B57 80 61            [24] 2729 	sjmp	00119$
      000B59                       2730 00113$:
                                   2731 ;	ecen4330_lcd_v3.c:418: fillRect(x+i*size, y+j*size, size, size, bg);
      000B59 C0 00            [24] 2732 	push	ar0
      000B5B 85*41 82         [24] 2733 	mov	dpl,_drawChar_sloc1_1_0
      000B5E 85*42 83         [24] 2734 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000B61 C2 D5            [12] 2735 	clr	F0
      000B63 85*40 F0         [24] 2736 	mov	b,_drawChar_PARM_6
      000B66 E5*46            [12] 2737 	mov	a,_drawChar_sloc4_1_0
      000B68 30 E7 04         [24] 2738 	jnb	acc.7,00194$
      000B6B B2 D5            [12] 2739 	cpl	F0
      000B6D F4               [12] 2740 	cpl	a
      000B6E 04               [12] 2741 	inc	a
      000B6F                       2742 00194$:
      000B6F A4               [48] 2743 	mul	ab
      000B70 30 D5 0A         [24] 2744 	jnb	F0,00195$
      000B73 F4               [12] 2745 	cpl	a
      000B74 24 01            [12] 2746 	add	a,#0x01
      000B76 C5 F0            [12] 2747 	xch	a,b
      000B78 F4               [12] 2748 	cpl	a
      000B79 34 00            [12] 2749 	addc	a,#0x00
      000B7B C5 F0            [12] 2750 	xch	a,b
      000B7D                       2751 00195$:
      000B7D 2C               [12] 2752 	add	a,r4
      000B7E F8               [12] 2753 	mov	r0,a
      000B7F ED               [12] 2754 	mov	a,r5
      000B80 35 F0            [12] 2755 	addc	a,b
      000B82 FA               [12] 2756 	mov	r2,a
      000B83 88*31            [24] 2757 	mov	_fillRect_PARM_2,r0
      000B85 8A*32            [24] 2758 	mov	(_fillRect_PARM_2 + 1),r2
      000B87 A8*40            [24] 2759 	mov	r0,_drawChar_PARM_6
      000B89 7A 00            [12] 2760 	mov	r2,#0x00
      000B8B 88*33            [24] 2761 	mov	_fillRect_PARM_3,r0
      000B8D 8A*34            [24] 2762 	mov	(_fillRect_PARM_3 + 1),r2
      000B8F 88*35            [24] 2763 	mov	_fillRect_PARM_4,r0
      000B91 8A*36            [24] 2764 	mov	(_fillRect_PARM_4 + 1),r2
      000B93 85*3E*37         [24] 2765 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000B96 85*3F*38         [24] 2766 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000B99 C0 07            [24] 2767 	push	ar7
      000B9B C0 06            [24] 2768 	push	ar6
      000B9D C0 05            [24] 2769 	push	ar5
      000B9F C0 04            [24] 2770 	push	ar4
      000BA1 C0 03            [24] 2771 	push	ar3
      000BA3 C0 01            [24] 2772 	push	ar1
      000BA5 C0 00            [24] 2773 	push	ar0
      000BA7 12r07r63         [24] 2774 	lcall	_fillRect
      000BAA D0 00            [24] 2775 	pop	ar0
      000BAC D0 01            [24] 2776 	pop	ar1
      000BAE D0 03            [24] 2777 	pop	ar3
      000BB0 D0 04            [24] 2778 	pop	ar4
      000BB2 D0 05            [24] 2779 	pop	ar5
      000BB4 D0 06            [24] 2780 	pop	ar6
      000BB6 D0 07            [24] 2781 	pop	ar7
                                   2782 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      000BB8 D0 00            [24] 2783 	pop	ar0
                                   2784 ;	ecen4330_lcd_v3.c:418: fillRect(x+i*size, y+j*size, size, size, bg);
      000BBA                       2785 00119$:
                                   2786 ;	ecen4330_lcd_v3.c:422: line >>= 1;
      000BBA 90r00r0A         [24] 2787 	mov	dptr,#_drawChar_line_196609_153
      000BBD E0               [24] 2788 	movx	a,@dptr
      000BBE C3               [12] 2789 	clr	c
      000BBF 13               [12] 2790 	rrc	a
      000BC0 FA               [12] 2791 	mov	r2,a
      000BC1 F0               [24] 2792 	movx	@dptr,a
                                   2793 ;	ecen4330_lcd_v3.c:407: for (j = 0; j < 8; j++) {
      000BC2 05*46            [12] 2794 	inc	_drawChar_sloc4_1_0
      000BC4 C3               [12] 2795 	clr	c
      000BC5 E5*46            [12] 2796 	mov	a,_drawChar_sloc4_1_0
      000BC7 64 80            [12] 2797 	xrl	a,#0x80
      000BC9 94 88            [12] 2798 	subb	a,#0x88
      000BCB 50 03            [24] 2799 	jnc	00196$
      000BCD 02r0Ar44         [24] 2800 	ljmp	00122$
      000BD0                       2801 00196$:
                                   2802 ;	ecen4330_lcd_v3.c:396: for (i = 0; i < 6; i++)	{
      000BD0 09               [12] 2803 	inc	r1
      000BD1 C3               [12] 2804 	clr	c
      000BD2 E9               [12] 2805 	mov	a,r1
      000BD3 64 80            [12] 2806 	xrl	a,#0x80
      000BD5 94 86            [12] 2807 	subb	a,#0x86
      000BD7 50 03            [24] 2808 	jnc	00197$
      000BD9 02r09rC1         [24] 2809 	ljmp	00124$
      000BDC                       2810 00197$:
                                   2811 ;	ecen4330_lcd_v3.c:425: }
      000BDC 22               [24] 2812 	ret
                                   2813 ;------------------------------------------------------------
                                   2814 ;Allocation info for local variables in function 'write'
                                   2815 ;------------------------------------------------------------
                                   2816 ;c                         Allocated to registers r7 
                                   2817 ;------------------------------------------------------------
                                   2818 ;	ecen4330_lcd_v3.c:432: void write (uint8_t c)
                                   2819 ;	-----------------------------------------
                                   2820 ;	 function write
                                   2821 ;	-----------------------------------------
      000BDD                       2822 _write:
      000BDD AF 82            [24] 2823 	mov	r7,dpl
                                   2824 ;	ecen4330_lcd_v3.c:434: if (c == '\n') {
      000BDF BF 0A 26         [24] 2825 	cjne	r7,#0x0a,00105$
                                   2826 ;	ecen4330_lcd_v3.c:435: cursor_y += textsize*8;
      000BE2 AD*10            [24] 2827 	mov	r5,_textsize
      000BE4 E4               [12] 2828 	clr	a
      000BE5 C4               [12] 2829 	swap	a
      000BE6 03               [12] 2830 	rr	a
      000BE7 54 F8            [12] 2831 	anl	a,#0xf8
      000BE9 CD               [12] 2832 	xch	a,r5
      000BEA C4               [12] 2833 	swap	a
      000BEB 03               [12] 2834 	rr	a
      000BEC CD               [12] 2835 	xch	a,r5
      000BED 6D               [12] 2836 	xrl	a,r5
      000BEE CD               [12] 2837 	xch	a,r5
      000BEF 54 F8            [12] 2838 	anl	a,#0xf8
      000BF1 CD               [12] 2839 	xch	a,r5
      000BF2 6D               [12] 2840 	xrl	a,r5
      000BF3 FE               [12] 2841 	mov	r6,a
      000BF4 AB*0E            [24] 2842 	mov	r3,_cursor_y
      000BF6 AC*0F            [24] 2843 	mov	r4,(_cursor_y + 1)
      000BF8 ED               [12] 2844 	mov	a,r5
      000BF9 2B               [12] 2845 	add	a,r3
      000BFA FB               [12] 2846 	mov	r3,a
      000BFB EE               [12] 2847 	mov	a,r6
      000BFC 3C               [12] 2848 	addc	a,r4
      000BFD FC               [12] 2849 	mov	r4,a
      000BFE 8B*0E            [24] 2850 	mov	_cursor_y,r3
      000C00 8C*0F            [24] 2851 	mov	(_cursor_y + 1),r4
                                   2852 ;	ecen4330_lcd_v3.c:436: cursor_x  = 0;
      000C02 E4               [12] 2853 	clr	a
      000C03 F5*0C            [12] 2854 	mov	_cursor_x,a
      000C05 F5*0D            [12] 2855 	mov	(_cursor_x + 1),a
      000C07 22               [24] 2856 	ret
      000C08                       2857 00105$:
                                   2858 ;	ecen4330_lcd_v3.c:437: } else if (c == '\r') {
      000C08 BF 0D 01         [24] 2859 	cjne	r7,#0x0d,00119$
      000C0B 22               [24] 2860 	ret
      000C0C                       2861 00119$:
                                   2862 ;	ecen4330_lcd_v3.c:440: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000C0C 85*0E*39         [24] 2863 	mov	_drawChar_PARM_2,_cursor_y
      000C0F 85*0F*3A         [24] 2864 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000C12 8F*3B            [24] 2865 	mov	_drawChar_PARM_3,r7
      000C14 85*12*3C         [24] 2866 	mov	_drawChar_PARM_4,_textcolor
      000C17 85*13*3D         [24] 2867 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000C1A 85*14*3E         [24] 2868 	mov	_drawChar_PARM_5,_textbgcolor
      000C1D 85*15*3F         [24] 2869 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000C20 85*10*40         [24] 2870 	mov	_drawChar_PARM_6,_textsize
      000C23 85*0C 82         [24] 2871 	mov	dpl,_cursor_x
      000C26 85*0D 83         [24] 2872 	mov	dph,(_cursor_x + 1)
      000C29 12r09r2B         [24] 2873 	lcall	_drawChar
                                   2874 ;	ecen4330_lcd_v3.c:441: cursor_x += textsize*6;
      000C2C 85*10*00         [24] 2875 	mov	__mulint_PARM_2,_textsize
      000C2F 75*01 00         [24] 2876 	mov	(__mulint_PARM_2 + 1),#0x00
      000C32 90 00 06         [24] 2877 	mov	dptr,#0x0006
      000C35 12r00r00         [24] 2878 	lcall	__mulint
      000C38 AE 82            [24] 2879 	mov	r6,dpl
      000C3A AF 83            [24] 2880 	mov	r7,dph
      000C3C AC*0C            [24] 2881 	mov	r4,_cursor_x
      000C3E AD*0D            [24] 2882 	mov	r5,(_cursor_x + 1)
      000C40 EE               [12] 2883 	mov	a,r6
      000C41 2C               [12] 2884 	add	a,r4
      000C42 FC               [12] 2885 	mov	r4,a
      000C43 EF               [12] 2886 	mov	a,r7
      000C44 3D               [12] 2887 	addc	a,r5
      000C45 FD               [12] 2888 	mov	r5,a
      000C46 8C*0C            [24] 2889 	mov	_cursor_x,r4
      000C48 8D*0D            [24] 2890 	mov	(_cursor_x + 1),r5
                                   2891 ;	ecen4330_lcd_v3.c:443: }
      000C4A 22               [24] 2892 	ret
                                   2893 ;------------------------------------------------------------
                                   2894 ;Allocation info for local variables in function 'LCD_string_write'
                                   2895 ;------------------------------------------------------------
                                   2896 ;str                       Allocated to registers r5 r6 r7 
                                   2897 ;i                         Allocated with name '_LCD_string_write_i_65536_171'
                                   2898 ;------------------------------------------------------------
                                   2899 ;	ecen4330_lcd_v3.c:450: void LCD_string_write (int8_t *str) {
                                   2900 ;	-----------------------------------------
                                   2901 ;	 function LCD_string_write
                                   2902 ;	-----------------------------------------
      000C4B                       2903 _LCD_string_write:
      000C4B AD 82            [24] 2904 	mov	r5,dpl
      000C4D AE 83            [24] 2905 	mov	r6,dph
      000C4F AF F0            [24] 2906 	mov	r7,b
                                   2907 ;	ecen4330_lcd_v3.c:453: for (i = 0; str[i] != 0; i++) {
      000C51 7B 00            [12] 2908 	mov	r3,#0x00
      000C53 7C 00            [12] 2909 	mov	r4,#0x00
      000C55                       2910 00103$:
      000C55 EB               [12] 2911 	mov	a,r3
      000C56 2D               [12] 2912 	add	a,r5
      000C57 F8               [12] 2913 	mov	r0,a
      000C58 EC               [12] 2914 	mov	a,r4
      000C59 3E               [12] 2915 	addc	a,r6
      000C5A F9               [12] 2916 	mov	r1,a
      000C5B 8F 02            [24] 2917 	mov	ar2,r7
      000C5D 88 82            [24] 2918 	mov	dpl,r0
      000C5F 89 83            [24] 2919 	mov	dph,r1
      000C61 8A F0            [24] 2920 	mov	b,r2
      000C63 12r00r00         [24] 2921 	lcall	__gptrget
      000C66 FA               [12] 2922 	mov	r2,a
      000C67 60 20            [24] 2923 	jz	00105$
                                   2924 ;	ecen4330_lcd_v3.c:454: write(str[i]);
      000C69 8A 82            [24] 2925 	mov	dpl,r2
      000C6B C0 07            [24] 2926 	push	ar7
      000C6D C0 06            [24] 2927 	push	ar6
      000C6F C0 05            [24] 2928 	push	ar5
      000C71 C0 04            [24] 2929 	push	ar4
      000C73 C0 03            [24] 2930 	push	ar3
      000C75 12r0BrDD         [24] 2931 	lcall	_write
      000C78 D0 03            [24] 2932 	pop	ar3
      000C7A D0 04            [24] 2933 	pop	ar4
      000C7C D0 05            [24] 2934 	pop	ar5
      000C7E D0 06            [24] 2935 	pop	ar6
      000C80 D0 07            [24] 2936 	pop	ar7
                                   2937 ;	ecen4330_lcd_v3.c:453: for (i = 0; str[i] != 0; i++) {
      000C82 0B               [12] 2938 	inc	r3
      000C83 BB 00 CF         [24] 2939 	cjne	r3,#0x00,00103$
      000C86 0C               [12] 2940 	inc	r4
      000C87 80 CC            [24] 2941 	sjmp	00103$
      000C89                       2942 00105$:
                                   2943 ;	ecen4330_lcd_v3.c:456: }
      000C89 22               [24] 2944 	ret
                                   2945 ;------------------------------------------------------------
                                   2946 ;Allocation info for local variables in function 'testRAM'
                                   2947 ;------------------------------------------------------------
                                   2948 ;d                         Allocated with name '_testRAM_d_65536_174'
                                   2949 ;i                         Allocated with name '_testRAM_i_65536_175'
                                   2950 ;ram_address               Allocated to registers 
                                   2951 ;------------------------------------------------------------
                                   2952 ;	ecen4330_lcd_v3.c:463: void testRAM (__xdata uint8_t d) {
                                   2953 ;	-----------------------------------------
                                   2954 ;	 function testRAM
                                   2955 ;	-----------------------------------------
      000C8A                       2956 _testRAM:
      000C8A E5 82            [12] 2957 	mov	a,dpl
      000C8C 90r00r0B         [24] 2958 	mov	dptr,#_testRAM_d_65536_174
      000C8F F0               [24] 2959 	movx	@dptr,a
                                   2960 ;	ecen4330_lcd_v3.c:467: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000C90 E0               [24] 2961 	movx	a,@dptr
      000C91 FF               [12] 2962 	mov	r7,a
      000C92 7B 00            [12] 2963 	mov	r3,#0x00
      000C94 7C 00            [12] 2964 	mov	r4,#0x00
      000C96 7D 00            [12] 2965 	mov	r5,#0x00
      000C98 7E 00            [12] 2966 	mov	r6,#0x00
      000C9A                       2967 00102$:
                                   2968 ;	ecen4330_lcd_v3.c:468: IOM = 0;
                                   2969 ;	assignBit
      000C9A C2 B4            [12] 2970 	clr	_P3_4
                                   2971 ;	ecen4330_lcd_v3.c:469: ram_address = (uint8_t __xdata*)(i);
      000C9C 8B 82            [24] 2972 	mov	dpl,r3
      000C9E 8C 83            [24] 2973 	mov	dph,r4
                                   2974 ;	ecen4330_lcd_v3.c:470: *ram_address = d;
      000CA0 EF               [12] 2975 	mov	a,r7
      000CA1 F0               [24] 2976 	movx	@dptr,a
                                   2977 ;	ecen4330_lcd_v3.c:471: IOM = 1;
                                   2978 ;	assignBit
      000CA2 D2 B4            [12] 2979 	setb	_P3_4
                                   2980 ;	ecen4330_lcd_v3.c:467: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000CA4 0B               [12] 2981 	inc	r3
      000CA5 BB 00 09         [24] 2982 	cjne	r3,#0x00,00111$
      000CA8 0C               [12] 2983 	inc	r4
      000CA9 BC 00 05         [24] 2984 	cjne	r4,#0x00,00111$
      000CAC 0D               [12] 2985 	inc	r5
      000CAD BD 00 01         [24] 2986 	cjne	r5,#0x00,00111$
      000CB0 0E               [12] 2987 	inc	r6
      000CB1                       2988 00111$:
      000CB1 C3               [12] 2989 	clr	c
      000CB2 EB               [12] 2990 	mov	a,r3
      000CB3 94 FF            [12] 2991 	subb	a,#0xff
      000CB5 EC               [12] 2992 	mov	a,r4
      000CB6 94 FF            [12] 2993 	subb	a,#0xff
      000CB8 ED               [12] 2994 	mov	a,r5
      000CB9 94 00            [12] 2995 	subb	a,#0x00
      000CBB EE               [12] 2996 	mov	a,r6
      000CBC 94 00            [12] 2997 	subb	a,#0x00
      000CBE 40 DA            [24] 2998 	jc	00102$
                                   2999 ;	ecen4330_lcd_v3.c:473: }
      000CC0 22               [24] 3000 	ret
                                   3001 ;------------------------------------------------------------
                                   3002 ;Allocation info for local variables in function 'freeType'
                                   3003 ;------------------------------------------------------------
                                   3004 ;count                     Allocated with name '_freeType_count_65536_178'
                                   3005 ;d                         Allocated with name '_freeType_d_65536_178'
                                   3006 ;------------------------------------------------------------
                                   3007 ;	ecen4330_lcd_v3.c:479: void freeType () {
                                   3008 ;	-----------------------------------------
                                   3009 ;	 function freeType
                                   3010 ;	-----------------------------------------
      000CC1                       3011 _freeType:
                                   3012 ;	ecen4330_lcd_v3.c:480: __xdata uint8_t count = 0;
      000CC1 90r00r0C         [24] 3013 	mov	dptr,#_freeType_count_65536_178
      000CC4 E4               [12] 3014 	clr	a
      000CC5 F0               [24] 3015 	movx	@dptr,a
                                   3016 ;	ecen4330_lcd_v3.c:483: while (1) {
      000CC6                       3017 00105$:
                                   3018 ;	ecen4330_lcd_v3.c:484: if (count == 8) {
      000CC6 90r00r0C         [24] 3019 	mov	dptr,#_freeType_count_65536_178
      000CC9 E0               [24] 3020 	movx	a,@dptr
      000CCA FF               [12] 3021 	mov	r7,a
      000CCB BF 08 0D         [24] 3022 	cjne	r7,#0x08,00102$
                                   3023 ;	ecen4330_lcd_v3.c:486: count = 0;
      000CCE 90r00r0C         [24] 3024 	mov	dptr,#_freeType_count_65536_178
      000CD1 E4               [12] 3025 	clr	a
      000CD2 F0               [24] 3026 	movx	@dptr,a
                                   3027 ;	ecen4330_lcd_v3.c:487: write(d);
      000CD3 75 82 0A         [24] 3028 	mov	dpl,#0x0a
      000CD6 12r0BrDD         [24] 3029 	lcall	_write
      000CD9 80 06            [24] 3030 	sjmp	00103$
      000CDB                       3031 00102$:
                                   3032 ;	ecen4330_lcd_v3.c:489: d = keyDetect();
      000CDB 12r0CrEA         [24] 3033 	lcall	_keyDetect
                                   3034 ;	ecen4330_lcd_v3.c:490: write(d);
      000CDE 12r0BrDD         [24] 3035 	lcall	_write
      000CE1                       3036 00103$:
                                   3037 ;	ecen4330_lcd_v3.c:493: count++;
      000CE1 90r00r0C         [24] 3038 	mov	dptr,#_freeType_count_65536_178
      000CE4 E0               [24] 3039 	movx	a,@dptr
      000CE5 24 01            [12] 3040 	add	a,#0x01
      000CE7 F0               [24] 3041 	movx	@dptr,a
                                   3042 ;	ecen4330_lcd_v3.c:495: }
      000CE8 80 DC            [24] 3043 	sjmp	00105$
                                   3044 ;------------------------------------------------------------
                                   3045 ;Allocation info for local variables in function 'keyDetect'
                                   3046 ;------------------------------------------------------------
                                   3047 ;	ecen4330_lcd_v3.c:502: uint8_t keyDetect () {
                                   3048 ;	-----------------------------------------
                                   3049 ;	 function keyDetect
                                   3050 ;	-----------------------------------------
      000CEA                       3051 _keyDetect:
                                   3052 ;	ecen4330_lcd_v3.c:503: __KEYPAD_PORT__ = 0xF0;
      000CEA 75 90 F0         [24] 3053 	mov	_P1,#0xf0
                                   3054 ;	ecen4330_lcd_v3.c:504: do {
      000CED                       3055 00101$:
                                   3056 ;	ecen4330_lcd_v3.c:505: __KEYPAD_PORT__ = 0xF0;
      000CED 75 90 F0         [24] 3057 	mov	_P1,#0xf0
                                   3058 ;	ecen4330_lcd_v3.c:506: colloc = __KEYPAD_PORT__;
      000CF0 85 90*00         [24] 3059 	mov	_colloc,_P1
                                   3060 ;	ecen4330_lcd_v3.c:507: colloc&= 0xF0;
      000CF3 53*00 F0         [24] 3061 	anl	_colloc,#0xf0
                                   3062 ;	ecen4330_lcd_v3.c:508: } while (colloc != 0xF0);
      000CF6 74 F0            [12] 3063 	mov	a,#0xf0
      000CF8 B5*00 F2         [24] 3064 	cjne	a,_colloc,00101$
                                   3065 ;	ecen4330_lcd_v3.c:511: do {
      000CFB                       3066 00104$:
                                   3067 ;	ecen4330_lcd_v3.c:512: delay(20);
      000CFB 90 00 14         [24] 3068 	mov	dptr,#0x0014
      000CFE 12r00r21         [24] 3069 	lcall	_delay
                                   3070 ;	ecen4330_lcd_v3.c:513: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D01 E5 90            [12] 3071 	mov	a,_P1
      000D03 54 F0            [12] 3072 	anl	a,#0xf0
      000D05 F5*00            [12] 3073 	mov	_colloc,a
                                   3074 ;	ecen4330_lcd_v3.c:514: } while (colloc == 0xF0);
      000D07 74 F0            [12] 3075 	mov	a,#0xf0
      000D09 B5*00 02         [24] 3076 	cjne	a,_colloc,00178$
      000D0C 80 ED            [24] 3077 	sjmp	00104$
      000D0E                       3078 00178$:
                                   3079 ;	ecen4330_lcd_v3.c:516: delay(1);
      000D0E 90 00 01         [24] 3080 	mov	dptr,#0x0001
      000D11 12r00r21         [24] 3081 	lcall	_delay
                                   3082 ;	ecen4330_lcd_v3.c:517: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D14 E5 90            [12] 3083 	mov	a,_P1
      000D16 54 F0            [12] 3084 	anl	a,#0xf0
      000D18 F5*00            [12] 3085 	mov	_colloc,a
                                   3086 ;	ecen4330_lcd_v3.c:518: } while (colloc == 0xF0);
      000D1A 74 F0            [12] 3087 	mov	a,#0xf0
      000D1C B5*00 02         [24] 3088 	cjne	a,_colloc,00179$
      000D1F 80 DA            [24] 3089 	sjmp	00104$
      000D21                       3090 00179$:
                                   3091 ;	ecen4330_lcd_v3.c:520: while (1) {
      000D21                       3092 00119$:
                                   3093 ;	ecen4330_lcd_v3.c:521: __KEYPAD_PORT__= 0xFE;
      000D21 75 90 FE         [24] 3094 	mov	_P1,#0xfe
                                   3095 ;	ecen4330_lcd_v3.c:522: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D24 E5 90            [12] 3096 	mov	a,_P1
      000D26 54 F0            [12] 3097 	anl	a,#0xf0
      000D28 F5*00            [12] 3098 	mov	_colloc,a
                                   3099 ;	ecen4330_lcd_v3.c:523: if (colloc != 0xF0) {
      000D2A 74 F0            [12] 3100 	mov	a,#0xf0
      000D2C B5*00 02         [24] 3101 	cjne	a,_colloc,00180$
      000D2F 80 05            [24] 3102 	sjmp	00111$
      000D31                       3103 00180$:
                                   3104 ;	ecen4330_lcd_v3.c:524: rowloc = 0;
      000D31 75*01 00         [24] 3105 	mov	_rowloc,#0x00
                                   3106 ;	ecen4330_lcd_v3.c:525: break;
      000D34 80 3D            [24] 3107 	sjmp	00120$
      000D36                       3108 00111$:
                                   3109 ;	ecen4330_lcd_v3.c:528: __KEYPAD_PORT__ = 0xFD;
      000D36 75 90 FD         [24] 3110 	mov	_P1,#0xfd
                                   3111 ;	ecen4330_lcd_v3.c:529: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D39 E5 90            [12] 3112 	mov	a,_P1
      000D3B 54 F0            [12] 3113 	anl	a,#0xf0
      000D3D F5*00            [12] 3114 	mov	_colloc,a
                                   3115 ;	ecen4330_lcd_v3.c:530: if (colloc != 0xF0) {
      000D3F 74 F0            [12] 3116 	mov	a,#0xf0
      000D41 B5*00 02         [24] 3117 	cjne	a,_colloc,00181$
      000D44 80 05            [24] 3118 	sjmp	00113$
      000D46                       3119 00181$:
                                   3120 ;	ecen4330_lcd_v3.c:531: rowloc = 1;
      000D46 75*01 01         [24] 3121 	mov	_rowloc,#0x01
                                   3122 ;	ecen4330_lcd_v3.c:532: break;
      000D49 80 28            [24] 3123 	sjmp	00120$
      000D4B                       3124 00113$:
                                   3125 ;	ecen4330_lcd_v3.c:535: __KEYPAD_PORT__ = 0xFB;
      000D4B 75 90 FB         [24] 3126 	mov	_P1,#0xfb
                                   3127 ;	ecen4330_lcd_v3.c:536: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D4E E5 90            [12] 3128 	mov	a,_P1
      000D50 54 F0            [12] 3129 	anl	a,#0xf0
      000D52 F5*00            [12] 3130 	mov	_colloc,a
                                   3131 ;	ecen4330_lcd_v3.c:537: if (colloc != 0xF0) {
      000D54 74 F0            [12] 3132 	mov	a,#0xf0
      000D56 B5*00 02         [24] 3133 	cjne	a,_colloc,00182$
      000D59 80 05            [24] 3134 	sjmp	00115$
      000D5B                       3135 00182$:
                                   3136 ;	ecen4330_lcd_v3.c:538: rowloc = 2;
      000D5B 75*01 02         [24] 3137 	mov	_rowloc,#0x02
                                   3138 ;	ecen4330_lcd_v3.c:539: break;
      000D5E 80 13            [24] 3139 	sjmp	00120$
      000D60                       3140 00115$:
                                   3141 ;	ecen4330_lcd_v3.c:542: __KEYPAD_PORT__ = 0xF7;
      000D60 75 90 F7         [24] 3142 	mov	_P1,#0xf7
                                   3143 ;	ecen4330_lcd_v3.c:543: colloc = (__KEYPAD_PORT__ & 0xF0);
      000D63 E5 90            [12] 3144 	mov	a,_P1
      000D65 54 F0            [12] 3145 	anl	a,#0xf0
      000D67 F5*00            [12] 3146 	mov	_colloc,a
                                   3147 ;	ecen4330_lcd_v3.c:544: if (colloc != 0xF0) {
      000D69 74 F0            [12] 3148 	mov	a,#0xf0
      000D6B B5*00 02         [24] 3149 	cjne	a,_colloc,00183$
      000D6E 80 B1            [24] 3150 	sjmp	00119$
      000D70                       3151 00183$:
                                   3152 ;	ecen4330_lcd_v3.c:545: rowloc = 3;
      000D70 75*01 03         [24] 3153 	mov	_rowloc,#0x03
                                   3154 ;	ecen4330_lcd_v3.c:546: break;
      000D73                       3155 00120$:
                                   3156 ;	ecen4330_lcd_v3.c:550: if (colloc == 0xE0) {
      000D73 74 E0            [12] 3157 	mov	a,#0xe0
      000D75 B5*00 15         [24] 3158 	cjne	a,_colloc,00128$
                                   3159 ;	ecen4330_lcd_v3.c:551: return (keypad[rowloc][0]);
      000D78 E5*01            [12] 3160 	mov	a,_rowloc
      000D7A 75 F0 04         [24] 3161 	mov	b,#0x04
      000D7D A4               [48] 3162 	mul	ab
      000D7E 24rFB            [12] 3163 	add	a,#_keypad
      000D80 F5 82            [12] 3164 	mov	dpl,a
      000D82 74s04            [12] 3165 	mov	a,#(_keypad >> 8)
      000D84 35 F0            [12] 3166 	addc	a,b
      000D86 F5 83            [12] 3167 	mov	dph,a
      000D88 E4               [12] 3168 	clr	a
      000D89 93               [24] 3169 	movc	a,@a+dptr
      000D8A F5 82            [12] 3170 	mov	dpl,a
      000D8C 22               [24] 3171 	ret
      000D8D                       3172 00128$:
                                   3173 ;	ecen4330_lcd_v3.c:552: } else if (colloc == 0xD0) {
      000D8D 74 D0            [12] 3174 	mov	a,#0xd0
      000D8F B5*00 18         [24] 3175 	cjne	a,_colloc,00125$
                                   3176 ;	ecen4330_lcd_v3.c:553: return (keypad[rowloc][1]);
      000D92 E5*01            [12] 3177 	mov	a,_rowloc
      000D94 75 F0 04         [24] 3178 	mov	b,#0x04
      000D97 A4               [48] 3179 	mul	ab
      000D98 24rFB            [12] 3180 	add	a,#_keypad
      000D9A FE               [12] 3181 	mov	r6,a
      000D9B 74s04            [12] 3182 	mov	a,#(_keypad >> 8)
      000D9D 35 F0            [12] 3183 	addc	a,b
      000D9F FF               [12] 3184 	mov	r7,a
      000DA0 8E 82            [24] 3185 	mov	dpl,r6
      000DA2 8F 83            [24] 3186 	mov	dph,r7
      000DA4 A3               [24] 3187 	inc	dptr
      000DA5 E4               [12] 3188 	clr	a
      000DA6 93               [24] 3189 	movc	a,@a+dptr
      000DA7 F5 82            [12] 3190 	mov	dpl,a
      000DA9 22               [24] 3191 	ret
      000DAA                       3192 00125$:
                                   3193 ;	ecen4330_lcd_v3.c:554: } else if (colloc == 0xB0) {
      000DAA 74 B0            [12] 3194 	mov	a,#0xb0
      000DAC B5*00 19         [24] 3195 	cjne	a,_colloc,00122$
                                   3196 ;	ecen4330_lcd_v3.c:555: return (keypad[rowloc][2]);
      000DAF E5*01            [12] 3197 	mov	a,_rowloc
      000DB1 75 F0 04         [24] 3198 	mov	b,#0x04
      000DB4 A4               [48] 3199 	mul	ab
      000DB5 24rFB            [12] 3200 	add	a,#_keypad
      000DB7 FE               [12] 3201 	mov	r6,a
      000DB8 74s04            [12] 3202 	mov	a,#(_keypad >> 8)
      000DBA 35 F0            [12] 3203 	addc	a,b
      000DBC FF               [12] 3204 	mov	r7,a
      000DBD 8E 82            [24] 3205 	mov	dpl,r6
      000DBF 8F 83            [24] 3206 	mov	dph,r7
      000DC1 A3               [24] 3207 	inc	dptr
      000DC2 A3               [24] 3208 	inc	dptr
      000DC3 E4               [12] 3209 	clr	a
      000DC4 93               [24] 3210 	movc	a,@a+dptr
      000DC5 F5 82            [12] 3211 	mov	dpl,a
      000DC7 22               [24] 3212 	ret
      000DC8                       3213 00122$:
                                   3214 ;	ecen4330_lcd_v3.c:557: return (keypad[rowloc][3]);
      000DC8 E5*01            [12] 3215 	mov	a,_rowloc
      000DCA 75 F0 04         [24] 3216 	mov	b,#0x04
      000DCD A4               [48] 3217 	mul	ab
      000DCE 24rFB            [12] 3218 	add	a,#_keypad
      000DD0 FE               [12] 3219 	mov	r6,a
      000DD1 74s04            [12] 3220 	mov	a,#(_keypad >> 8)
      000DD3 35 F0            [12] 3221 	addc	a,b
      000DD5 FF               [12] 3222 	mov	r7,a
      000DD6 8E 82            [24] 3223 	mov	dpl,r6
      000DD8 8F 83            [24] 3224 	mov	dph,r7
      000DDA A3               [24] 3225 	inc	dptr
      000DDB A3               [24] 3226 	inc	dptr
      000DDC A3               [24] 3227 	inc	dptr
      000DDD E4               [12] 3228 	clr	a
      000DDE 93               [24] 3229 	movc	a,@a+dptr
                                   3230 ;	ecen4330_lcd_v3.c:559: }
      000DDF F5 82            [12] 3231 	mov	dpl,a
      000DE1 22               [24] 3232 	ret
                                   3233 ;------------------------------------------------------------
                                   3234 ;Allocation info for local variables in function 'reverse'
                                   3235 ;------------------------------------------------------------
                                   3236 ;d                         Allocated to registers r7 
                                   3237 ;rev                       Allocated with name '_reverse_rev_65536_196'
                                   3238 ;val                       Allocated with name '_reverse_val_65536_196'
                                   3239 ;------------------------------------------------------------
                                   3240 ;	ecen4330_lcd_v3.c:561: uint16_t reverse (uint8_t d) {
                                   3241 ;	-----------------------------------------
                                   3242 ;	 function reverse
                                   3243 ;	-----------------------------------------
      000DE2                       3244 _reverse:
      000DE2 AF 82            [24] 3245 	mov	r7,dpl
                                   3246 ;	ecen4330_lcd_v3.c:562: __xdata uint16_t rev = 0;
      000DE4 90r00r0D         [24] 3247 	mov	dptr,#_reverse_rev_65536_196
      000DE7 E4               [12] 3248 	clr	a
      000DE8 F0               [24] 3249 	movx	@dptr,a
      000DE9 A3               [24] 3250 	inc	dptr
      000DEA F0               [24] 3251 	movx	@dptr,a
                                   3252 ;	ecen4330_lcd_v3.c:565: while (d >= 1) {
      000DEB                       3253 00101$:
      000DEB BF 01 00         [24] 3254 	cjne	r7,#0x01,00114$
      000DEE                       3255 00114$:
      000DEE 40 63            [24] 3256 	jc	00103$
                                   3257 ;	ecen4330_lcd_v3.c:566: val = d % 10;
      000DF0 8F 05            [24] 3258 	mov	ar5,r7
      000DF2 7E 00            [12] 3259 	mov	r6,#0x00
      000DF4 75*00 0A         [24] 3260 	mov	__modsint_PARM_2,#0x0a
                                   3261 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DF7 8E*01            [24] 3262 	mov	(__modsint_PARM_2 + 1),r6
      000DF9 8D 82            [24] 3263 	mov	dpl,r5
      000DFB 8E 83            [24] 3264 	mov	dph,r6
      000DFD C0 06            [24] 3265 	push	ar6
      000DFF C0 05            [24] 3266 	push	ar5
      000E01 12r00r00         [24] 3267 	lcall	__modsint
      000E04 AB 82            [24] 3268 	mov	r3,dpl
      000E06 AC 83            [24] 3269 	mov	r4,dph
      000E08 D0 05            [24] 3270 	pop	ar5
      000E0A D0 06            [24] 3271 	pop	ar6
      000E0C 90r00r0F         [24] 3272 	mov	dptr,#_reverse_val_65536_196
      000E0F EB               [12] 3273 	mov	a,r3
      000E10 F0               [24] 3274 	movx	@dptr,a
      000E11 EC               [12] 3275 	mov	a,r4
      000E12 A3               [24] 3276 	inc	dptr
      000E13 F0               [24] 3277 	movx	@dptr,a
                                   3278 ;	ecen4330_lcd_v3.c:567: d = d / 10;
      000E14 75*00 0A         [24] 3279 	mov	__divsint_PARM_2,#0x0a
      000E17 75*01 00         [24] 3280 	mov	(__divsint_PARM_2 + 1),#0x00
      000E1A 8D 82            [24] 3281 	mov	dpl,r5
      000E1C 8E 83            [24] 3282 	mov	dph,r6
      000E1E 12r00r00         [24] 3283 	lcall	__divsint
      000E21 AD 82            [24] 3284 	mov	r5,dpl
      000E23 8D 07            [24] 3285 	mov	ar7,r5
                                   3286 ;	ecen4330_lcd_v3.c:568: rev = rev * 10 + val;
      000E25 90r00r0D         [24] 3287 	mov	dptr,#_reverse_rev_65536_196
      000E28 E0               [24] 3288 	movx	a,@dptr
      000E29 FD               [12] 3289 	mov	r5,a
      000E2A A3               [24] 3290 	inc	dptr
      000E2B E0               [24] 3291 	movx	a,@dptr
      000E2C FE               [12] 3292 	mov	r6,a
      000E2D 8D*00            [24] 3293 	mov	__mulint_PARM_2,r5
      000E2F 8E*01            [24] 3294 	mov	(__mulint_PARM_2 + 1),r6
      000E31 90 00 0A         [24] 3295 	mov	dptr,#0x000a
      000E34 C0 07            [24] 3296 	push	ar7
      000E36 12r00r00         [24] 3297 	lcall	__mulint
      000E39 AD 82            [24] 3298 	mov	r5,dpl
      000E3B AE 83            [24] 3299 	mov	r6,dph
      000E3D D0 07            [24] 3300 	pop	ar7
      000E3F 90r00r0F         [24] 3301 	mov	dptr,#_reverse_val_65536_196
      000E42 E0               [24] 3302 	movx	a,@dptr
      000E43 FB               [12] 3303 	mov	r3,a
      000E44 A3               [24] 3304 	inc	dptr
      000E45 E0               [24] 3305 	movx	a,@dptr
      000E46 FC               [12] 3306 	mov	r4,a
      000E47 90r00r0D         [24] 3307 	mov	dptr,#_reverse_rev_65536_196
      000E4A EB               [12] 3308 	mov	a,r3
      000E4B 2D               [12] 3309 	add	a,r5
      000E4C F0               [24] 3310 	movx	@dptr,a
      000E4D EC               [12] 3311 	mov	a,r4
      000E4E 3E               [12] 3312 	addc	a,r6
      000E4F A3               [24] 3313 	inc	dptr
      000E50 F0               [24] 3314 	movx	@dptr,a
      000E51 80 98            [24] 3315 	sjmp	00101$
      000E53                       3316 00103$:
                                   3317 ;	ecen4330_lcd_v3.c:570: return rev;
      000E53 90r00r0D         [24] 3318 	mov	dptr,#_reverse_rev_65536_196
      000E56 E0               [24] 3319 	movx	a,@dptr
      000E57 FE               [12] 3320 	mov	r6,a
      000E58 A3               [24] 3321 	inc	dptr
      000E59 E0               [24] 3322 	movx	a,@dptr
                                   3323 ;	ecen4330_lcd_v3.c:571: }
      000E5A 8E 82            [24] 3324 	mov	dpl,r6
      000E5C F5 83            [12] 3325 	mov	dph,a
      000E5E 22               [24] 3326 	ret
                                   3327 ;------------------------------------------------------------
                                   3328 ;Allocation info for local variables in function 'asciiToDec'
                                   3329 ;------------------------------------------------------------
                                   3330 ;d                         Allocated with name '_asciiToDec_d_65536_198'
                                   3331 ;val                       Allocated with name '_asciiToDec_val_65536_199'
                                   3332 ;id                        Allocated with name '_asciiToDec_id_65536_199'
                                   3333 ;------------------------------------------------------------
                                   3334 ;	ecen4330_lcd_v3.c:578: void asciiToDec (__xdata uint8_t d) {
                                   3335 ;	-----------------------------------------
                                   3336 ;	 function asciiToDec
                                   3337 ;	-----------------------------------------
      000E5F                       3338 _asciiToDec:
      000E5F E5 82            [12] 3339 	mov	a,dpl
      000E61 90r00r11         [24] 3340 	mov	dptr,#_asciiToDec_d_65536_198
      000E64 F0               [24] 3341 	movx	@dptr,a
                                   3342 ;	ecen4330_lcd_v3.c:581: id = reverse(d);
      000E65 E0               [24] 3343 	movx	a,@dptr
      000E66 F5 82            [12] 3344 	mov	dpl,a
      000E68 12r0DrE2         [24] 3345 	lcall	_reverse
      000E6B E5 82            [12] 3346 	mov	a,dpl
      000E6D 85 83 F0         [24] 3347 	mov	b,dph
      000E70 90r00r13         [24] 3348 	mov	dptr,#_asciiToDec_id_65536_199
      000E73 F0               [24] 3349 	movx	@dptr,a
      000E74 E5 F0            [12] 3350 	mov	a,b
      000E76 A3               [24] 3351 	inc	dptr
      000E77 F0               [24] 3352 	movx	@dptr,a
                                   3353 ;	ecen4330_lcd_v3.c:582: while (id >= 1){
      000E78                       3354 00101$:
      000E78 90r00r13         [24] 3355 	mov	dptr,#_asciiToDec_id_65536_199
      000E7B E0               [24] 3356 	movx	a,@dptr
      000E7C FE               [12] 3357 	mov	r6,a
      000E7D A3               [24] 3358 	inc	dptr
      000E7E E0               [24] 3359 	movx	a,@dptr
      000E7F FF               [12] 3360 	mov	r7,a
      000E80 C3               [12] 3361 	clr	c
      000E81 EE               [12] 3362 	mov	a,r6
      000E82 94 01            [12] 3363 	subb	a,#0x01
      000E84 EF               [12] 3364 	mov	a,r7
      000E85 94 00            [12] 3365 	subb	a,#0x00
      000E87 40 42            [24] 3366 	jc	00104$
                                   3367 ;	ecen4330_lcd_v3.c:584: val = id % 10;
      000E89 75*00 0A         [24] 3368 	mov	__moduint_PARM_2,#0x0a
      000E8C 75*01 00         [24] 3369 	mov	(__moduint_PARM_2 + 1),#0x00
      000E8F 8E 82            [24] 3370 	mov	dpl,r6
      000E91 8F 83            [24] 3371 	mov	dph,r7
      000E93 C0 07            [24] 3372 	push	ar7
      000E95 C0 06            [24] 3373 	push	ar6
      000E97 12r00r00         [24] 3374 	lcall	__moduint
      000E9A AC 82            [24] 3375 	mov	r4,dpl
      000E9C D0 06            [24] 3376 	pop	ar6
      000E9E D0 07            [24] 3377 	pop	ar7
      000EA0 90r00r12         [24] 3378 	mov	dptr,#_asciiToDec_val_65536_199
      000EA3 EC               [12] 3379 	mov	a,r4
      000EA4 F0               [24] 3380 	movx	@dptr,a
                                   3381 ;	ecen4330_lcd_v3.c:585: id = id / 10;
      000EA5 75*00 0A         [24] 3382 	mov	__divuint_PARM_2,#0x0a
      000EA8 75*01 00         [24] 3383 	mov	(__divuint_PARM_2 + 1),#0x00
      000EAB 8E 82            [24] 3384 	mov	dpl,r6
      000EAD 8F 83            [24] 3385 	mov	dph,r7
      000EAF 12r00r00         [24] 3386 	lcall	__divuint
      000EB2 AE 82            [24] 3387 	mov	r6,dpl
      000EB4 AF 83            [24] 3388 	mov	r7,dph
      000EB6 90r00r13         [24] 3389 	mov	dptr,#_asciiToDec_id_65536_199
      000EB9 EE               [12] 3390 	mov	a,r6
      000EBA F0               [24] 3391 	movx	@dptr,a
      000EBB EF               [12] 3392 	mov	a,r7
      000EBC A3               [24] 3393 	inc	dptr
      000EBD F0               [24] 3394 	movx	@dptr,a
                                   3395 ;	ecen4330_lcd_v3.c:586: write(val + '0');
      000EBE 90r00r12         [24] 3396 	mov	dptr,#_asciiToDec_val_65536_199
      000EC1 E0               [24] 3397 	movx	a,@dptr
      000EC2 24 30            [12] 3398 	add	a,#0x30
      000EC4 F5 82            [12] 3399 	mov	dpl,a
      000EC6 12r0BrDD         [24] 3400 	lcall	_write
      000EC9 80 AD            [24] 3401 	sjmp	00101$
      000ECB                       3402 00104$:
                                   3403 ;	ecen4330_lcd_v3.c:589: }
      000ECB 22               [24] 3404 	ret
                                   3405 ;------------------------------------------------------------
                                   3406 ;Allocation info for local variables in function 'asciiToHex'
                                   3407 ;------------------------------------------------------------
                                   3408 ;d                         Allocated to registers r7 
                                   3409 ;val                       Allocated to registers r2 
                                   3410 ;store                     Allocated with name '_asciiToHex_store_65536_202'
                                   3411 ;i                         Allocated to registers r6 
                                   3412 ;------------------------------------------------------------
                                   3413 ;	ecen4330_lcd_v3.c:596: void asciiToHex (uint8_t d) {
                                   3414 ;	-----------------------------------------
                                   3415 ;	 function asciiToHex
                                   3416 ;	-----------------------------------------
      000ECC                       3417 _asciiToHex:
      000ECC AF 82            [24] 3418 	mov	r7,dpl
                                   3419 ;	ecen4330_lcd_v3.c:600: store[0] = '0';
      000ECE 75*48 30         [24] 3420 	mov	_asciiToHex_store_65536_202,#0x30
                                   3421 ;	ecen4330_lcd_v3.c:601: store[1] = '0';
      000ED1 75*49 30         [24] 3422 	mov	(_asciiToHex_store_65536_202 + 0x0001),#0x30
                                   3423 ;	ecen4330_lcd_v3.c:603: while (d >= 1) {
      000ED4 7E 00            [12] 3424 	mov	r6,#0x00
      000ED6                       3425 00104$:
      000ED6 BF 01 00         [24] 3426 	cjne	r7,#0x01,00122$
      000ED9                       3427 00122$:
      000ED9 40 5A            [24] 3428 	jc	00106$
                                   3429 ;	ecen4330_lcd_v3.c:604: val = d % 16;
      000EDB 8F 04            [24] 3430 	mov	ar4,r7
      000EDD 7D 00            [12] 3431 	mov	r5,#0x00
      000EDF 74 0F            [12] 3432 	mov	a,#0x0f
      000EE1 5C               [12] 3433 	anl	a,r4
      000EE2 FA               [12] 3434 	mov	r2,a
                                   3435 ;	ecen4330_lcd_v3.c:605: d = d / 16;
      000EE3 75*00 10         [24] 3436 	mov	__divsint_PARM_2,#0x10
                                   3437 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EE6 8D*01            [24] 3438 	mov	(__divsint_PARM_2 + 1),r5
      000EE8 8C 82            [24] 3439 	mov	dpl,r4
      000EEA 8D 83            [24] 3440 	mov	dph,r5
      000EEC C0 06            [24] 3441 	push	ar6
      000EEE C0 02            [24] 3442 	push	ar2
      000EF0 12r00r00         [24] 3443 	lcall	__divsint
      000EF3 AC 82            [24] 3444 	mov	r4,dpl
      000EF5 D0 02            [24] 3445 	pop	ar2
      000EF7 D0 06            [24] 3446 	pop	ar6
      000EF9 8C 07            [24] 3447 	mov	ar7,r4
                                   3448 ;	ecen4330_lcd_v3.c:606: if (val <= 9) {
      000EFB EA               [12] 3449 	mov	a,r2
      000EFC 24 F6            [12] 3450 	add	a,#0xff - 0x09
      000EFE 40 0C            [24] 3451 	jc	00102$
                                   3452 ;	ecen4330_lcd_v3.c:607: store[i] = val + '0';
      000F00 EE               [12] 3453 	mov	a,r6
      000F01 24r48            [12] 3454 	add	a,#_asciiToHex_store_65536_202
      000F03 F9               [12] 3455 	mov	r1,a
      000F04 8A 05            [24] 3456 	mov	ar5,r2
      000F06 74 30            [12] 3457 	mov	a,#0x30
      000F08 2D               [12] 3458 	add	a,r5
      000F09 F7               [12] 3459 	mov	@r1,a
      000F0A 80 26            [24] 3460 	sjmp	00103$
      000F0C                       3461 00102$:
                                   3462 ;	ecen4330_lcd_v3.c:609: store[i] = (val % 10) + 'A';
      000F0C EE               [12] 3463 	mov	a,r6
      000F0D 24r48            [12] 3464 	add	a,#_asciiToHex_store_65536_202
      000F0F F9               [12] 3465 	mov	r1,a
      000F10 7D 00            [12] 3466 	mov	r5,#0x00
      000F12 75*00 0A         [24] 3467 	mov	__modsint_PARM_2,#0x0a
                                   3468 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000F15 8D*01            [24] 3469 	mov	(__modsint_PARM_2 + 1),r5
      000F17 8A 82            [24] 3470 	mov	dpl,r2
      000F19 8D 83            [24] 3471 	mov	dph,r5
      000F1B C0 07            [24] 3472 	push	ar7
      000F1D C0 06            [24] 3473 	push	ar6
      000F1F C0 01            [24] 3474 	push	ar1
      000F21 12r00r00         [24] 3475 	lcall	__modsint
      000F24 AC 82            [24] 3476 	mov	r4,dpl
      000F26 AD 83            [24] 3477 	mov	r5,dph
      000F28 D0 01            [24] 3478 	pop	ar1
      000F2A D0 06            [24] 3479 	pop	ar6
      000F2C D0 07            [24] 3480 	pop	ar7
      000F2E 74 41            [12] 3481 	mov	a,#0x41
      000F30 2C               [12] 3482 	add	a,r4
      000F31 F7               [12] 3483 	mov	@r1,a
      000F32                       3484 00103$:
                                   3485 ;	ecen4330_lcd_v3.c:612: i++;
      000F32 0E               [12] 3486 	inc	r6
      000F33 80 A1            [24] 3487 	sjmp	00104$
      000F35                       3488 00106$:
                                   3489 ;	ecen4330_lcd_v3.c:615: write(store[1]);
      000F35 85*49 82         [24] 3490 	mov	dpl,(_asciiToHex_store_65536_202 + 0x0001)
      000F38 12r0BrDD         [24] 3491 	lcall	_write
                                   3492 ;	ecen4330_lcd_v3.c:616: write(store[0]);
      000F3B 85*48 82         [24] 3493 	mov	dpl,_asciiToHex_store_65536_202
                                   3494 ;	ecen4330_lcd_v3.c:617: }
      000F3E 02r0BrDD         [24] 3495 	ljmp	_write
                                   3496 ;------------------------------------------------------------
                                   3497 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3498 ;------------------------------------------------------------
                                   3499 ;d                         Allocated to registers r7 
                                   3500 ;------------------------------------------------------------
                                   3501 ;	ecen4330_lcd_v3.c:625: uint8_t convertAsciiHex(uint8_t d) {
                                   3502 ;	-----------------------------------------
                                   3503 ;	 function convertAsciiHex
                                   3504 ;	-----------------------------------------
      000F41                       3505 _convertAsciiHex:
                                   3506 ;	ecen4330_lcd_v3.c:626: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000F41 E5 82            [12] 3507 	mov	a,dpl
      000F43 FF               [12] 3508 	mov	r7,a
      000F44 24 C6            [12] 3509 	add	a,#0xff - 0x39
      000F46 92*01            [24] 3510 	mov	_convertAsciiHex_sloc0_1_0,c
      000F48 40 08            [24] 3511 	jc	00103$
      000F4A 8F 06            [24] 3512 	mov	ar6,r7
      000F4C EE               [12] 3513 	mov	a,r6
      000F4D 24 D0            [12] 3514 	add	a,#0xd0
      000F4F FE               [12] 3515 	mov	r6,a
      000F50 80 04            [24] 3516 	sjmp	00104$
      000F52                       3517 00103$:
      000F52 74 C9            [12] 3518 	mov	a,#0xc9
      000F54 2F               [12] 3519 	add	a,r7
      000F55 FE               [12] 3520 	mov	r6,a
      000F56                       3521 00104$:
      000F56 8E 82            [24] 3522 	mov	dpl,r6
                                   3523 ;	ecen4330_lcd_v3.c:627: }
      000F58 22               [24] 3524 	ret
                                   3525 ;------------------------------------------------------------
                                   3526 ;Allocation info for local variables in function 'writeSomeLines'
                                   3527 ;------------------------------------------------------------
                                   3528 ;	ecen4330_lcd_v3.c:633: void writeSomeLines () {
                                   3529 ;	-----------------------------------------
                                   3530 ;	 function writeSomeLines
                                   3531 ;	-----------------------------------------
      000F59                       3532 _writeSomeLines:
                                   3533 ;	ecen4330_lcd_v3.c:634: fillScreen(RED);
      000F59 90 F8 00         [24] 3534 	mov	dptr,#0xf800
      000F5C 12r08r44         [24] 3535 	lcall	_fillScreen
                                   3536 ;	ecen4330_lcd_v3.c:636: delay(20);
      000F5F 90 00 14         [24] 3537 	mov	dptr,#0x0014
      000F62 12r00r21         [24] 3538 	lcall	_delay
                                   3539 ;	ecen4330_lcd_v3.c:637: fillScreen(GREEN);
      000F65 90 07 E0         [24] 3540 	mov	dptr,#0x07e0
      000F68 12r08r44         [24] 3541 	lcall	_fillScreen
                                   3542 ;	ecen4330_lcd_v3.c:639: delay(20);
      000F6B 90 00 14         [24] 3543 	mov	dptr,#0x0014
      000F6E 12r00r21         [24] 3544 	lcall	_delay
                                   3545 ;	ecen4330_lcd_v3.c:641: setRotation(0);
      000F71 75 82 00         [24] 3546 	mov	dpl,#0x00
      000F74 12r00rE8         [24] 3547 	lcall	_setRotation
                                   3548 ;	ecen4330_lcd_v3.c:642: fillScreen(BLACK);
      000F77 90 00 00         [24] 3549 	mov	dptr,#0x0000
      000F7A 12r08r44         [24] 3550 	lcall	_fillScreen
                                   3551 ;	ecen4330_lcd_v3.c:643: testCircles(20, RED);
      000F7D 75*2C 00         [24] 3552 	mov	_testCircles_PARM_2,#0x00
      000F80 75*2D F8         [24] 3553 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000F83 75 82 14         [24] 3554 	mov	dpl,#0x14
      000F86 12r06r9D         [24] 3555 	lcall	_testCircles
                                   3556 ;	ecen4330_lcd_v3.c:644: delay(100);
      000F89 90 00 64         [24] 3557 	mov	dptr,#0x0064
      000F8C 12r00r21         [24] 3558 	lcall	_delay
                                   3559 ;	ecen4330_lcd_v3.c:645: fillScreen(BLACK);
      000F8F 90 00 00         [24] 3560 	mov	dptr,#0x0000
      000F92 12r08r44         [24] 3561 	lcall	_fillScreen
                                   3562 ;	ecen4330_lcd_v3.c:646: setTextSize(5);
      000F95 75 82 05         [24] 3563 	mov	dpl,#0x05
      000F98 12r00rD0         [24] 3564 	lcall	_setTextSize
                                   3565 ;	ecen4330_lcd_v3.c:647: setTextColor(CYAN, BLACK);
      000F9B E4               [12] 3566 	clr	a
      000F9C F5*00            [12] 3567 	mov	_setTextColor_PARM_2,a
      000F9E F5*01            [12] 3568 	mov	(_setTextColor_PARM_2 + 1),a
      000FA0 90 07 FF         [24] 3569 	mov	dptr,#0x07ff
      000FA3 12r00rC3         [24] 3570 	lcall	_setTextColor
                                   3571 ;	ecen4330_lcd_v3.c:648: LCD_string_write("Welcome\n");
      000FA6 90r05r0B         [24] 3572 	mov	dptr,#___str_0
      000FA9 75 F0 80         [24] 3573 	mov	b,#0x80
      000FAC 12r0Cr4B         [24] 3574 	lcall	_LCD_string_write
                                   3575 ;	ecen4330_lcd_v3.c:649: setTextSize(3);
      000FAF 75 82 03         [24] 3576 	mov	dpl,#0x03
      000FB2 12r00rD0         [24] 3577 	lcall	_setTextSize
                                   3578 ;	ecen4330_lcd_v3.c:650: LCD_string_write("ECEN-4330\n");
      000FB5 90r05r14         [24] 3579 	mov	dptr,#___str_1
      000FB8 75 F0 80         [24] 3580 	mov	b,#0x80
      000FBB 12r0Cr4B         [24] 3581 	lcall	_LCD_string_write
                                   3582 ;	ecen4330_lcd_v3.c:651: LCD_string_write("Rotation 0");
      000FBE 90r05r1F         [24] 3583 	mov	dptr,#___str_2
      000FC1 75 F0 80         [24] 3584 	mov	b,#0x80
      000FC4 12r0Cr4B         [24] 3585 	lcall	_LCD_string_write
                                   3586 ;	ecen4330_lcd_v3.c:652: delay(200);
      000FC7 90 00 C8         [24] 3587 	mov	dptr,#0x00c8
      000FCA 12r00r21         [24] 3588 	lcall	_delay
                                   3589 ;	ecen4330_lcd_v3.c:653: fillScreen(BLACK);
      000FCD 90 00 00         [24] 3590 	mov	dptr,#0x0000
      000FD0 12r08r44         [24] 3591 	lcall	_fillScreen
                                   3592 ;	ecen4330_lcd_v3.c:654: setRotation(1);
      000FD3 75 82 01         [24] 3593 	mov	dpl,#0x01
      000FD6 12r00rE8         [24] 3594 	lcall	_setRotation
                                   3595 ;	ecen4330_lcd_v3.c:655: setCursor(0,0);
      000FD9 E4               [12] 3596 	clr	a
      000FDA F5*00            [12] 3597 	mov	_setCursor_PARM_2,a
      000FDC F5*01            [12] 3598 	mov	(_setCursor_PARM_2 + 1),a
      000FDE 90 00 00         [24] 3599 	mov	dptr,#0x0000
      000FE1 12r00rB6         [24] 3600 	lcall	_setCursor
                                   3601 ;	ecen4330_lcd_v3.c:656: LCD_string_write("Rotation 1");
      000FE4 90r05r2A         [24] 3602 	mov	dptr,#___str_3
      000FE7 75 F0 80         [24] 3603 	mov	b,#0x80
      000FEA 12r0Cr4B         [24] 3604 	lcall	_LCD_string_write
                                   3605 ;	ecen4330_lcd_v3.c:657: delay(500);
      000FED 90 01 F4         [24] 3606 	mov	dptr,#0x01f4
      000FF0 12r00r21         [24] 3607 	lcall	_delay
                                   3608 ;	ecen4330_lcd_v3.c:658: fillScreen(BLACK);
      000FF3 90 00 00         [24] 3609 	mov	dptr,#0x0000
      000FF6 12r08r44         [24] 3610 	lcall	_fillScreen
                                   3611 ;	ecen4330_lcd_v3.c:659: setRotation(2);
      000FF9 75 82 02         [24] 3612 	mov	dpl,#0x02
      000FFC 12r00rE8         [24] 3613 	lcall	_setRotation
                                   3614 ;	ecen4330_lcd_v3.c:660: setCursor(0,0);
      000FFF E4               [12] 3615 	clr	a
      001000 F5*00            [12] 3616 	mov	_setCursor_PARM_2,a
      001002 F5*01            [12] 3617 	mov	(_setCursor_PARM_2 + 1),a
      001004 90 00 00         [24] 3618 	mov	dptr,#0x0000
      001007 12r00rB6         [24] 3619 	lcall	_setCursor
                                   3620 ;	ecen4330_lcd_v3.c:661: LCD_string_write("Rotation 2");
      00100A 90r05r35         [24] 3621 	mov	dptr,#___str_4
      00100D 75 F0 80         [24] 3622 	mov	b,#0x80
      001010 12r0Cr4B         [24] 3623 	lcall	_LCD_string_write
                                   3624 ;	ecen4330_lcd_v3.c:662: delay(500);
      001013 90 01 F4         [24] 3625 	mov	dptr,#0x01f4
      001016 12r00r21         [24] 3626 	lcall	_delay
                                   3627 ;	ecen4330_lcd_v3.c:663: fillScreen(BLACK);
      001019 90 00 00         [24] 3628 	mov	dptr,#0x0000
      00101C 12r08r44         [24] 3629 	lcall	_fillScreen
                                   3630 ;	ecen4330_lcd_v3.c:664: setRotation(3);
      00101F 75 82 03         [24] 3631 	mov	dpl,#0x03
      001022 12r00rE8         [24] 3632 	lcall	_setRotation
                                   3633 ;	ecen4330_lcd_v3.c:665: setCursor(0,0);
      001025 E4               [12] 3634 	clr	a
      001026 F5*00            [12] 3635 	mov	_setCursor_PARM_2,a
      001028 F5*01            [12] 3636 	mov	(_setCursor_PARM_2 + 1),a
      00102A 90 00 00         [24] 3637 	mov	dptr,#0x0000
      00102D 12r00rB6         [24] 3638 	lcall	_setCursor
                                   3639 ;	ecen4330_lcd_v3.c:666: delay(200);
      001030 90 00 C8         [24] 3640 	mov	dptr,#0x00c8
      001033 12r00r21         [24] 3641 	lcall	_delay
                                   3642 ;	ecen4330_lcd_v3.c:667: LCD_string_write("Rotation 3");
      001036 90r05r40         [24] 3643 	mov	dptr,#___str_5
      001039 75 F0 80         [24] 3644 	mov	b,#0x80
      00103C 12r0Cr4B         [24] 3645 	lcall	_LCD_string_write
                                   3646 ;	ecen4330_lcd_v3.c:668: delay(200);
      00103F 90 00 C8         [24] 3647 	mov	dptr,#0x00c8
                                   3648 ;	ecen4330_lcd_v3.c:669: }
      001042 02r00r21         [24] 3649 	ljmp	_delay
                                   3650 ;------------------------------------------------------------
                                   3651 ;Allocation info for local variables in function 'ISR_receive'
                                   3652 ;------------------------------------------------------------
                                   3653 ;	USART.c:9: void ISR_receive() __interrupt (4) {
                                   3654 ;	-----------------------------------------
                                   3655 ;	 function ISR_receive
                                   3656 ;	-----------------------------------------
      001045                       3657 _ISR_receive:
                                   3658 ;	USART.c:11: if (RI == 1) {
      001045 30 98 08         [24] 3659 	jnb	_RI,00103$
                                   3660 ;	USART.c:12: received_byte = SBUF;	// pull data from the serial buffer
      001048 85 99*4A         [24] 3661 	mov	_received_byte,_SBUF
                                   3662 ;	USART.c:13: RI = 0;					// clear interrupt flag
                                   3663 ;	assignBit
      00104B C2 98            [12] 3664 	clr	_RI
                                   3665 ;	USART.c:14: received_flag = 1;		// set received flag
      00104D 75*4B 01         [24] 3666 	mov	_received_flag,#0x01
      001050                       3667 00103$:
                                   3668 ;	USART.c:16: }
      001050 32               [24] 3669 	reti
                                   3670 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3671 ;	eliminated unneeded push/pop not_psw
                                   3672 ;	eliminated unneeded push/pop dpl
                                   3673 ;	eliminated unneeded push/pop dph
                                   3674 ;	eliminated unneeded push/pop b
                                   3675 ;	eliminated unneeded push/pop acc
                                   3676 ;------------------------------------------------------------
                                   3677 ;Allocation info for local variables in function 'UART_init'
                                   3678 ;------------------------------------------------------------
                                   3679 ;	USART.c:18: void UART_init () {
                                   3680 ;	-----------------------------------------
                                   3681 ;	 function UART_init
                                   3682 ;	-----------------------------------------
      001051                       3683 _UART_init:
                                   3684 ;	USART.c:19: SCON = 0x50;	// Asynchronous mode, 8-bit data and 1-stop bit		0101 0000
      001051 75 98 50         [24] 3685 	mov	_SCON,#0x50
                                   3686 ;	USART.c:20: TMOD = 0x20;	// Timer1 in Mode2. in 8 bit auto reload			0010 0000
      001054 75 89 20         [24] 3687 	mov	_TMOD,#0x20
                                   3688 ;	USART.c:21: TH1 =  0xFD;	// Load timer value for 9600 baudrate
      001057 75 8D FD         [24] 3689 	mov	_TH1,#0xfd
                                   3690 ;	USART.c:22: TR1 = 1;		// Turn ON the timer for Baud rate generation
                                   3691 ;	assignBit
      00105A D2 8E            [12] 3692 	setb	_TR1
                                   3693 ;	USART.c:23: ES  = 1;		// Enable Serial Interrupt
                                   3694 ;	assignBit
      00105C D2 AC            [12] 3695 	setb	_ES
                                   3696 ;	USART.c:24: EA  = 1;		// Enable Global Interrupt bit
                                   3697 ;	assignBit
      00105E D2 AF            [12] 3698 	setb	_EA
                                   3699 ;	USART.c:25: }
      001060 22               [24] 3700 	ret
                                   3701 ;------------------------------------------------------------
                                   3702 ;Allocation info for local variables in function 'UART_config'
                                   3703 ;------------------------------------------------------------
                                   3704 ;input                     Allocated with name '_UART_config_input_65536_212'
                                   3705 ;------------------------------------------------------------
                                   3706 ;	USART.c:31: void UART_config() {
                                   3707 ;	-----------------------------------------
                                   3708 ;	 function UART_config
                                   3709 ;	-----------------------------------------
      001061                       3710 _UART_config:
                                   3711 ;	USART.c:36: LCD_string_write("Select baud rate:\n");
      001061 90r05r4B         [24] 3712 	mov	dptr,#___str_6
      001064 75 F0 80         [24] 3713 	mov	b,#0x80
      001067 12r0Cr4B         [24] 3714 	lcall	_LCD_string_write
                                   3715 ;	USART.c:37: LCD_string_write("1: 1200\n2: 2400\n3: 4800\n4: 9600\n5: 19200\n");
      00106A 90r05r5E         [24] 3716 	mov	dptr,#___str_7
      00106D 75 F0 80         [24] 3717 	mov	b,#0x80
      001070 12r0Cr4B         [24] 3718 	lcall	_LCD_string_write
                                   3719 ;	USART.c:40: do {
      001073                       3720 00107$:
                                   3721 ;	USART.c:41: input = keyDetect();
      001073 12r0CrEA         [24] 3722 	lcall	_keyDetect
      001076 AF 82            [24] 3723 	mov	r7,dpl
                                   3724 ;	USART.c:43: if (input == '1' || input == '2' || input == '3' || input == '4' || input == '5') {
      001078 BF 31 02         [24] 3725 	cjne	r7,#0x31,00221$
      00107B 80 12            [24] 3726 	sjmp	00101$
      00107D                       3727 00221$:
      00107D BF 32 02         [24] 3728 	cjne	r7,#0x32,00222$
      001080 80 0D            [24] 3729 	sjmp	00101$
      001082                       3730 00222$:
      001082 BF 33 02         [24] 3731 	cjne	r7,#0x33,00223$
      001085 80 08            [24] 3732 	sjmp	00101$
      001087                       3733 00223$:
      001087 BF 34 02         [24] 3734 	cjne	r7,#0x34,00224$
      00108A 80 03            [24] 3735 	sjmp	00101$
      00108C                       3736 00224$:
      00108C BF 35 E4         [24] 3737 	cjne	r7,#0x35,00107$
      00108F                       3738 00101$:
                                   3739 ;	USART.c:44: baud = input;
      00108F 8F*4E            [24] 3740 	mov	_baud,r7
                                   3741 ;	USART.c:50: LCD_string_write("How many data bits?\n");
      001091 90r05r88         [24] 3742 	mov	dptr,#___str_8
      001094 75 F0 80         [24] 3743 	mov	b,#0x80
      001097 12r0Cr4B         [24] 3744 	lcall	_LCD_string_write
                                   3745 ;	USART.c:51: LCD_string_write("1: 8\n2: 9\n");
      00109A 90r05r9D         [24] 3746 	mov	dptr,#___str_9
      00109D 75 F0 80         [24] 3747 	mov	b,#0x80
      0010A0 12r0Cr4B         [24] 3748 	lcall	_LCD_string_write
                                   3749 ;	USART.c:54: do {
      0010A3                       3750 00115$:
                                   3751 ;	USART.c:55: input = keyDetect();
      0010A3 12r0CrEA         [24] 3752 	lcall	_keyDetect
      0010A6 AF 82            [24] 3753 	mov	r7,dpl
                                   3754 ;	USART.c:58: if (input == '1') {
      0010A8 BF 31 08         [24] 3755 	cjne	r7,#0x31,00113$
                                   3756 ;	USART.c:59: bit = 8;
      0010AB 75*4C 08         [24] 3757 	mov	_bit,#0x08
                                   3758 ;	USART.c:60: SCON = 0x50;		// 0101 0000, mode 1
      0010AE 75 98 50         [24] 3759 	mov	_SCON,#0x50
                                   3760 ;	USART.c:61: break;
      0010B1 80 09            [24] 3761 	sjmp	00117$
      0010B3                       3762 00113$:
                                   3763 ;	USART.c:62: } else if (input == '2') {
      0010B3 BF 32 ED         [24] 3764 	cjne	r7,#0x32,00115$
                                   3765 ;	USART.c:63: bit = 9;
      0010B6 75*4C 09         [24] 3766 	mov	_bit,#0x09
                                   3767 ;	USART.c:64: SCON = 0xD0;		// 1101 0000, mode 3
      0010B9 75 98 D0         [24] 3768 	mov	_SCON,#0xd0
                                   3769 ;	USART.c:67: } while (1);
      0010BC                       3770 00117$:
                                   3771 ;	USART.c:70: LCD_string_write("Select parity?\n");
      0010BC 90r05rA8         [24] 3772 	mov	dptr,#___str_10
      0010BF 75 F0 80         [24] 3773 	mov	b,#0x80
      0010C2 12r0Cr4B         [24] 3774 	lcall	_LCD_string_write
                                   3775 ;	USART.c:71: if (bit == 8)
      0010C5 74 08            [12] 3776 	mov	a,#0x08
      0010C7 B5*4C 0B         [24] 3777 	cjne	a,_bit,00121$
                                   3778 ;	USART.c:72: LCD_string_write("0: None\n1: Odd\n2: Even\n");
      0010CA 90r05rB8         [24] 3779 	mov	dptr,#___str_11
      0010CD 75 F0 80         [24] 3780 	mov	b,#0x80
      0010D0 12r0Cr4B         [24] 3781 	lcall	_LCD_string_write
      0010D3 80 0E            [24] 3782 	sjmp	00133$
      0010D5                       3783 00121$:
                                   3784 ;	USART.c:73: else if (bit == 9)
      0010D5 74 09            [12] 3785 	mov	a,#0x09
      0010D7 B5*4C 09         [24] 3786 	cjne	a,_bit,00133$
                                   3787 ;	USART.c:74: LCD_string_write("1: Odd\n2: Even\n");
      0010DA 90r05rD0         [24] 3788 	mov	dptr,#___str_12
      0010DD 75 F0 80         [24] 3789 	mov	b,#0x80
      0010E0 12r0Cr4B         [24] 3790 	lcall	_LCD_string_write
                                   3791 ;	USART.c:77: do {
      0010E3                       3792 00133$:
                                   3793 ;	USART.c:78: input = keyDetect();
      0010E3 12r0CrEA         [24] 3794 	lcall	_keyDetect
      0010E6 AF 82            [24] 3795 	mov	r7,dpl
                                   3796 ;	USART.c:80: if (bit == 8 && input == '0' || input == '1' || input == '2') {
      0010E8 74 08            [12] 3797 	mov	a,#0x08
      0010EA B5*4C 05         [24] 3798 	cjne	a,_bit,00131$
      0010ED BF 30 02         [24] 3799 	cjne	r7,#0x30,00237$
      0010F0 80 0F            [24] 3800 	sjmp	00127$
      0010F2                       3801 00237$:
      0010F2                       3802 00131$:
      0010F2 E4               [12] 3803 	clr	a
      0010F3 BF 31 01         [24] 3804 	cjne	r7,#0x31,00238$
      0010F6 04               [12] 3805 	inc	a
      0010F7                       3806 00238$:
      0010F7 FE               [12] 3807 	mov	r6,a
      0010F8 70 07            [24] 3808 	jnz	00127$
      0010FA BF 32 01         [24] 3809 	cjne	r7,#0x32,00241$
      0010FD 04               [12] 3810 	inc	a
      0010FE                       3811 00241$:
      0010FE FD               [12] 3812 	mov	r5,a
      0010FF 60 0A            [24] 3813 	jz	00128$
      001101                       3814 00127$:
                                   3815 ;	USART.c:81: parity = convertAsciiHex(input);
      001101 8F 82            [24] 3816 	mov	dpl,r7
      001103 12r0Fr41         [24] 3817 	lcall	_convertAsciiHex
      001106 85 82*4D         [24] 3818 	mov	_parity,dpl
                                   3819 ;	USART.c:82: break;
      001109 80 13            [24] 3820 	sjmp	00135$
      00110B                       3821 00128$:
                                   3822 ;	USART.c:83: } else if (bit == 9 && input == '1' || input == '2') {
      00110B 74 09            [12] 3823 	mov	a,#0x09
      00110D B5*4C 03         [24] 3824 	cjne	a,_bit,00126$
      001110 EE               [12] 3825 	mov	a,r6
      001111 70 03            [24] 3826 	jnz	00123$
      001113                       3827 00126$:
      001113 ED               [12] 3828 	mov	a,r5
      001114 60 CD            [24] 3829 	jz	00133$
      001116                       3830 00123$:
                                   3831 ;	USART.c:84: parity = convertAsciiHex(input);
      001116 8F 82            [24] 3832 	mov	dpl,r7
      001118 12r0Fr41         [24] 3833 	lcall	_convertAsciiHex
      00111B 85 82*4D         [24] 3834 	mov	_parity,dpl
                                   3835 ;	USART.c:87: } while (1);
      00111E                       3836 00135$:
                                   3837 ;	USART.c:90: PCON |= 0x80;
      00111E 43 87 80         [24] 3838 	orl	_PCON,#0x80
                                   3839 ;	USART.c:93: switch (baud) {
      001121 AF*4E            [24] 3840 	mov	r7,_baud
      001123 BF 31 02         [24] 3841 	cjne	r7,#0x31,00248$
      001126 80 14            [24] 3842 	sjmp	00136$
      001128                       3843 00248$:
      001128 BF 32 02         [24] 3844 	cjne	r7,#0x32,00249$
      00112B 80 14            [24] 3845 	sjmp	00137$
      00112D                       3846 00249$:
      00112D BF 33 02         [24] 3847 	cjne	r7,#0x33,00250$
      001130 80 14            [24] 3848 	sjmp	00138$
      001132                       3849 00250$:
      001132 BF 34 02         [24] 3850 	cjne	r7,#0x34,00251$
      001135 80 14            [24] 3851 	sjmp	00139$
      001137                       3852 00251$:
                                   3853 ;	USART.c:94: case '1': TH1 = 0xA9; break;		// 1200
      001137 BF 35 19         [24] 3854 	cjne	r7,#0x35,00142$
      00113A 80 14            [24] 3855 	sjmp	00140$
      00113C                       3856 00136$:
      00113C 75 8D A9         [24] 3857 	mov	_TH1,#0xa9
                                   3858 ;	USART.c:95: case '2': TH1 = 0xD5; break;		// 2400
      00113F 80 12            [24] 3859 	sjmp	00142$
      001141                       3860 00137$:
      001141 75 8D D5         [24] 3861 	mov	_TH1,#0xd5
                                   3862 ;	USART.c:96: case '3': TH1 = 0xEA; break;		// 4800
      001144 80 0D            [24] 3863 	sjmp	00142$
      001146                       3864 00138$:
      001146 75 8D EA         [24] 3865 	mov	_TH1,#0xea
                                   3866 ;	USART.c:97: case '4': TH1 = 0xF5; break;		// 9600
      001149 80 08            [24] 3867 	sjmp	00142$
      00114B                       3868 00139$:
      00114B 75 8D F5         [24] 3869 	mov	_TH1,#0xf5
                                   3870 ;	USART.c:98: case '5': TH1 = 0xFB; break;		// 19200
      00114E 80 03            [24] 3871 	sjmp	00142$
      001150                       3872 00140$:
      001150 75 8D FB         [24] 3873 	mov	_TH1,#0xfb
                                   3874 ;	USART.c:100: }
      001153                       3875 00142$:
                                   3876 ;	USART.c:102: write(baud);
      001153 85*4E 82         [24] 3877 	mov	dpl,_baud
      001156 12r0BrDD         [24] 3878 	lcall	_write
                                   3879 ;	USART.c:103: asciiToHex(TH1);
      001159 85 8D 82         [24] 3880 	mov	dpl,_TH1
      00115C 12r0ErCC         [24] 3881 	lcall	_asciiToHex
                                   3882 ;	USART.c:105: keyDetect();
      00115F 12r0CrEA         [24] 3883 	lcall	_keyDetect
                                   3884 ;	USART.c:108: TMOD = 0x20;	// Timer1 in Mode2. in 8 bit auto reload			0010 0000
      001162 75 89 20         [24] 3885 	mov	_TMOD,#0x20
                                   3886 ;	USART.c:109: TR1 = 1;		// turn on timer 1
                                   3887 ;	assignBit
      001165 D2 8E            [12] 3888 	setb	_TR1
                                   3889 ;	USART.c:110: EA  = 1;		// Enable Global Interrupt bit
                                   3890 ;	assignBit
      001167 D2 AF            [12] 3891 	setb	_EA
                                   3892 ;	USART.c:111: ES  = 1;		// Enable Serial Interrupt
                                   3893 ;	assignBit
      001169 D2 AC            [12] 3894 	setb	_ES
                                   3895 ;	USART.c:112: }
      00116B 22               [24] 3896 	ret
                                   3897 ;------------------------------------------------------------
                                   3898 ;Allocation info for local variables in function 'parity_check'
                                   3899 ;------------------------------------------------------------
                                   3900 ;d                         Allocated to registers r6 r7 
                                   3901 ;par                       Allocated to registers r5 
                                   3902 ;------------------------------------------------------------
                                   3903 ;	USART.c:120: uint16_t parity_check(uint16_t d) {
                                   3904 ;	-----------------------------------------
                                   3905 ;	 function parity_check
                                   3906 ;	-----------------------------------------
      00116C                       3907 _parity_check:
      00116C AE 82            [24] 3908 	mov	r6,dpl
      00116E AF 83            [24] 3909 	mov	r7,dph
                                   3910 ;	USART.c:121: uint8_t par = 0;
      001170 7D 00            [12] 3911 	mov	r5,#0x00
                                   3912 ;	USART.c:124: while (d) {
      001172                       3913 00101$:
      001172 EE               [12] 3914 	mov	a,r6
      001173 4F               [12] 3915 	orl	a,r7
      001174 60 21            [24] 3916 	jz	00103$
                                   3917 ;	USART.c:125: par = !par;
      001176 ED               [12] 3918 	mov	a,r5
      001177 B4 01 00         [24] 3919 	cjne	a,#0x01,00115$
      00117A                       3920 00115$:
      00117A 92*02            [24] 3921 	mov  _parity_check_sloc0_1_0,c
      00117C E4               [12] 3922 	clr	a
      00117D 33               [12] 3923 	rlc	a
      00117E FD               [12] 3924 	mov	r5,a
                                   3925 ;	USART.c:126: d = d & (d - 1);
      00117F 8E 03            [24] 3926 	mov	ar3,r6
      001181 8F 04            [24] 3927 	mov	ar4,r7
      001183 EB               [12] 3928 	mov	a,r3
      001184 24 FF            [12] 3929 	add	a,#0xff
      001186 F9               [12] 3930 	mov	r1,a
      001187 EC               [12] 3931 	mov	a,r4
      001188 34 FF            [12] 3932 	addc	a,#0xff
      00118A FA               [12] 3933 	mov	r2,a
      00118B E9               [12] 3934 	mov	a,r1
      00118C 52 03            [12] 3935 	anl	ar3,a
      00118E EA               [12] 3936 	mov	a,r2
      00118F 52 04            [12] 3937 	anl	ar4,a
      001191 8B 06            [24] 3938 	mov	ar6,r3
      001193 8C 07            [24] 3939 	mov	ar7,r4
      001195 80 DB            [24] 3940 	sjmp	00101$
      001197                       3941 00103$:
                                   3942 ;	USART.c:128: return par;
      001197 7F 00            [12] 3943 	mov	r7,#0x00
      001199 8D 82            [24] 3944 	mov	dpl,r5
      00119B 8F 83            [24] 3945 	mov	dph,r7
                                   3946 ;	USART.c:129: }
      00119D 22               [24] 3947 	ret
                                   3948 ;------------------------------------------------------------
                                   3949 ;Allocation info for local variables in function 'receive_parity'
                                   3950 ;------------------------------------------------------------
                                   3951 ;	USART.c:135: void receive_parity() {
                                   3952 ;	-----------------------------------------
                                   3953 ;	 function receive_parity
                                   3954 ;	-----------------------------------------
      00119E                       3955 _receive_parity:
                                   3956 ;	USART.c:137: if (parity != 0) {
      00119E E5*4D            [12] 3957 	mov	a,_parity
      0011A0 70 01            [24] 3958 	jnz	00143$
      0011A2 22               [24] 3959 	ret
      0011A3                       3960 00143$:
                                   3961 ;	USART.c:152: switch (bit) {
      0011A3 AF*4C            [24] 3962 	mov	r7,_bit
      0011A5 BF 08 02         [24] 3963 	cjne	r7,#0x08,00144$
      0011A8 80 08            [24] 3964 	sjmp	00101$
      0011AA                       3965 00144$:
      0011AA BF 09 02         [24] 3966 	cjne	r7,#0x09,00145$
      0011AD 80 6E            [24] 3967 	sjmp	00107$
      0011AF                       3968 00145$:
      0011AF 02r12r75         [24] 3969 	ljmp	00113$
                                   3970 ;	USART.c:153: case 8: {
      0011B2                       3971 00101$:
                                   3972 ;	USART.c:155: if ((parity_check(received_byte) == 0 && parity == 0x2) || (parity_check(received_byte) == parity)) {
      0011B2 AE*4A            [24] 3973 	mov	r6,_received_byte
      0011B4 7F 00            [12] 3974 	mov	r7,#0x00
      0011B6 8E 82            [24] 3975 	mov	dpl,r6
      0011B8 8F 83            [24] 3976 	mov	dph,r7
      0011BA 12r11r6C         [24] 3977 	lcall	_parity_check
      0011BD E5 82            [12] 3978 	mov	a,dpl
      0011BF 85 83 F0         [24] 3979 	mov	b,dph
      0011C2 45 F0            [12] 3980 	orl	a,b
      0011C4 70 07            [24] 3981 	jnz	00106$
      0011C6 74 02            [12] 3982 	mov	a,#0x02
      0011C8 B5*4D 02         [24] 3983 	cjne	a,_parity,00147$
      0011CB 80 1B            [24] 3984 	sjmp	00102$
      0011CD                       3985 00147$:
      0011CD                       3986 00106$:
      0011CD AE*4A            [24] 3987 	mov	r6,_received_byte
      0011CF 7F 00            [12] 3988 	mov	r7,#0x00
      0011D1 8E 82            [24] 3989 	mov	dpl,r6
      0011D3 8F 83            [24] 3990 	mov	dph,r7
      0011D5 12r11r6C         [24] 3991 	lcall	_parity_check
      0011D8 AE 82            [24] 3992 	mov	r6,dpl
      0011DA AF 83            [24] 3993 	mov	r7,dph
      0011DC AC*4D            [24] 3994 	mov	r4,_parity
      0011DE 7D 00            [12] 3995 	mov	r5,#0x00
      0011E0 EE               [12] 3996 	mov	a,r6
      0011E1 B5 04 30         [24] 3997 	cjne	a,ar4,00103$
      0011E4 EF               [12] 3998 	mov	a,r7
      0011E5 B5 05 2C         [24] 3999 	cjne	a,ar5,00103$
      0011E8                       4000 00102$:
                                   4001 ;	USART.c:156: received_byte &= 0x7F;								// mask MSB (parity bit) if there's no error to convert d to ASCII
      0011E8 53*4A 7F         [24] 4002 	anl	_received_byte,#0x7f
                                   4003 ;	USART.c:157: LCD_string_write("par. comp. ");
      0011EB 90r05rE0         [24] 4004 	mov	dptr,#___str_13
      0011EE 75 F0 80         [24] 4005 	mov	b,#0x80
      0011F1 12r0Cr4B         [24] 4006 	lcall	_LCD_string_write
                                   4007 ;	USART.c:158: write(received_byte);
      0011F4 85*4A 82         [24] 4008 	mov	dpl,_received_byte
      0011F7 12r0BrDD         [24] 4009 	lcall	_write
                                   4010 ;	USART.c:159: write('\n');
      0011FA 75 82 0A         [24] 4011 	mov	dpl,#0x0a
      0011FD 12r0BrDD         [24] 4012 	lcall	_write
                                   4013 ;	USART.c:160: asciiToHex(parity);
      001200 85*4D 82         [24] 4014 	mov	dpl,_parity
      001203 12r0ErCC         [24] 4015 	lcall	_asciiToHex
                                   4016 ;	USART.c:161: asciiToHex(parity_check(received_byte));
      001206 AE*4A            [24] 4017 	mov	r6,_received_byte
      001208 7F 00            [12] 4018 	mov	r7,#0x00
      00120A 8E 82            [24] 4019 	mov	dpl,r6
      00120C 8F 83            [24] 4020 	mov	dph,r7
      00120E 12r11r6C         [24] 4021 	lcall	_parity_check
      001211 02r0ErCC         [24] 4022 	ljmp	_asciiToHex
      001214                       4023 00103$:
                                   4024 ;	USART.c:164: LCD_string_write("Rx parity error\n");
      001214 90r05rEC         [24] 4025 	mov	dptr,#___str_14
      001217 75 F0 80         [24] 4026 	mov	b,#0x80
                                   4027 ;	USART.c:166: break;
      00121A 02r0Cr4B         [24] 4028 	ljmp	_LCD_string_write
                                   4029 ;	USART.c:168: case 9: {
      00121D                       4030 00107$:
                                   4031 ;	USART.c:170: if ((parity_check((RB8 << 8) | received_byte) == 0 && parity == 2) || (parity_check((RB8 << 8) | received_byte) == 1 && parity == 1))
      00121D A2 9A            [12] 4032 	mov	c,_RB8
      00121F E4               [12] 4033 	clr	a
      001220 33               [12] 4034 	rlc	a
      001221 FF               [12] 4035 	mov	r7,a
      001222 7E 00            [12] 4036 	mov	r6,#0x00
      001224 AC*4A            [24] 4037 	mov	r4,_received_byte
      001226 7D 00            [12] 4038 	mov	r5,#0x00
      001228 EC               [12] 4039 	mov	a,r4
      001229 42 06            [12] 4040 	orl	ar6,a
      00122B ED               [12] 4041 	mov	a,r5
      00122C 42 07            [12] 4042 	orl	ar7,a
      00122E 8E 82            [24] 4043 	mov	dpl,r6
      001230 8F 83            [24] 4044 	mov	dph,r7
      001232 12r11r6C         [24] 4045 	lcall	_parity_check
      001235 E5 82            [12] 4046 	mov	a,dpl
      001237 85 83 F0         [24] 4047 	mov	b,dph
      00123A 45 F0            [12] 4048 	orl	a,b
      00123C 70 07            [24] 4049 	jnz	00112$
      00123E 74 02            [12] 4050 	mov	a,#0x02
      001240 B5*4D 02         [24] 4051 	cjne	a,_parity,00151$
      001243 80 27            [24] 4052 	sjmp	00108$
      001245                       4053 00151$:
      001245                       4054 00112$:
      001245 A2 9A            [12] 4055 	mov	c,_RB8
      001247 E4               [12] 4056 	clr	a
      001248 33               [12] 4057 	rlc	a
      001249 FF               [12] 4058 	mov	r7,a
      00124A 7E 00            [12] 4059 	mov	r6,#0x00
      00124C AC*4A            [24] 4060 	mov	r4,_received_byte
      00124E 7D 00            [12] 4061 	mov	r5,#0x00
      001250 EC               [12] 4062 	mov	a,r4
      001251 42 06            [12] 4063 	orl	ar6,a
      001253 ED               [12] 4064 	mov	a,r5
      001254 42 07            [12] 4065 	orl	ar7,a
      001256 8E 82            [24] 4066 	mov	dpl,r6
      001258 8F 83            [24] 4067 	mov	dph,r7
      00125A 12r11r6C         [24] 4068 	lcall	_parity_check
      00125D AE 82            [24] 4069 	mov	r6,dpl
      00125F AF 83            [24] 4070 	mov	r7,dph
      001261 BE 01 1A         [24] 4071 	cjne	r6,#0x01,00117$
      001264 BF 00 17         [24] 4072 	cjne	r7,#0x00,00117$
      001267 74 01            [12] 4073 	mov	a,#0x01
      001269 B5*4D 12         [24] 4074 	cjne	a,_parity,00117$
      00126C                       4075 00108$:
                                   4076 ;	USART.c:172: LCD_string_write("Rx parity error\n");
      00126C 90r05rEC         [24] 4077 	mov	dptr,#___str_14
      00126F 75 F0 80         [24] 4078 	mov	b,#0x80
                                   4079 ;	USART.c:173: break;
                                   4080 ;	USART.c:175: default : LCD_string_write("Config. error\n"); break;
      001272 02r0Cr4B         [24] 4081 	ljmp	_LCD_string_write
      001275                       4082 00113$:
      001275 90r05rFD         [24] 4083 	mov	dptr,#___str_15
      001278 75 F0 80         [24] 4084 	mov	b,#0x80
                                   4085 ;	USART.c:176: }
                                   4086 ;	USART.c:178: }
      00127B 02r0Cr4B         [24] 4087 	ljmp	_LCD_string_write
      00127E                       4088 00117$:
      00127E 22               [24] 4089 	ret
                                   4090 ;------------------------------------------------------------
                                   4091 ;Allocation info for local variables in function 'UART_transmit'
                                   4092 ;------------------------------------------------------------
                                   4093 ;d                         Allocated to registers r7 
                                   4094 ;------------------------------------------------------------
                                   4095 ;	USART.c:186: uint8_t UART_transmit (unsigned char d) {
                                   4096 ;	-----------------------------------------
                                   4097 ;	 function UART_transmit
                                   4098 ;	-----------------------------------------
      00127F                       4099 _UART_transmit:
      00127F AF 82            [24] 4100 	mov	r7,dpl
                                   4101 ;	USART.c:188: if (parity == 2) {
      001281 74 02            [12] 4102 	mov	a,#0x02
      001283 B5*4D 02         [24] 4103 	cjne	a,_parity,00223$
      001286 80 03            [24] 4104 	sjmp	00224$
      001288                       4105 00223$:
      001288 02r13r33         [24] 4106 	ljmp	00136$
      00128B                       4107 00224$:
                                   4108 ;	USART.c:189: if (parity_check(d) == 0 && bit == 8) {
      00128B 8F 05            [24] 4109 	mov	ar5,r7
      00128D 7E 00            [12] 4110 	mov	r6,#0x00
      00128F 8D 82            [24] 4111 	mov	dpl,r5
      001291 8E 83            [24] 4112 	mov	dph,r6
      001293 C0 07            [24] 4113 	push	ar7
      001295 C0 06            [24] 4114 	push	ar6
      001297 C0 05            [24] 4115 	push	ar5
      001299 12r11r6C         [24] 4116 	lcall	_parity_check
      00129C E5 82            [12] 4117 	mov	a,dpl
      00129E 85 83 F0         [24] 4118 	mov	b,dph
      0012A1 D0 05            [24] 4119 	pop	ar5
      0012A3 D0 06            [24] 4120 	pop	ar6
      0012A5 D0 07            [24] 4121 	pop	ar7
      0012A7 45 F0            [12] 4122 	orl	a,b
      0012A9 70 0B            [24] 4123 	jnz	00114$
      0012AB 74 08            [12] 4124 	mov	a,#0x08
      0012AD B5*4C 06         [24] 4125 	cjne	a,_bit,00114$
                                   4126 ;	USART.c:190: d &= 0x7F;
      0012B0 53 07 7F         [24] 4127 	anl	ar7,#0x7f
      0012B3 02r13rDF         [24] 4128 	ljmp	00137$
      0012B6                       4129 00114$:
                                   4130 ;	USART.c:191: } else if (parity_check(d) == 1 && bit == 9) {
      0012B6 8D 82            [24] 4131 	mov	dpl,r5
      0012B8 8E 83            [24] 4132 	mov	dph,r6
      0012BA C0 07            [24] 4133 	push	ar7
      0012BC C0 06            [24] 4134 	push	ar6
      0012BE C0 05            [24] 4135 	push	ar5
      0012C0 12r11r6C         [24] 4136 	lcall	_parity_check
      0012C3 AB 82            [24] 4137 	mov	r3,dpl
      0012C5 AC 83            [24] 4138 	mov	r4,dph
      0012C7 D0 05            [24] 4139 	pop	ar5
      0012C9 D0 06            [24] 4140 	pop	ar6
      0012CB D0 07            [24] 4141 	pop	ar7
      0012CD BB 01 0D         [24] 4142 	cjne	r3,#0x01,00110$
      0012D0 BC 00 0A         [24] 4143 	cjne	r4,#0x00,00110$
      0012D3 74 09            [12] 4144 	mov	a,#0x09
      0012D5 B5*4C 05         [24] 4145 	cjne	a,_bit,00110$
                                   4146 ;	USART.c:192: TB8 = 1;
                                   4147 ;	assignBit
      0012D8 D2 9B            [12] 4148 	setb	_TB8
      0012DA 02r13rDF         [24] 4149 	ljmp	00137$
      0012DD                       4150 00110$:
                                   4151 ;	USART.c:193: } else if (parity_check(d) == 1 && bit == 8) {
      0012DD 8D 82            [24] 4152 	mov	dpl,r5
      0012DF 8E 83            [24] 4153 	mov	dph,r6
      0012E1 C0 07            [24] 4154 	push	ar7
      0012E3 C0 06            [24] 4155 	push	ar6
      0012E5 C0 05            [24] 4156 	push	ar5
      0012E7 12r11r6C         [24] 4157 	lcall	_parity_check
      0012EA AB 82            [24] 4158 	mov	r3,dpl
      0012EC AC 83            [24] 4159 	mov	r4,dph
      0012EE D0 05            [24] 4160 	pop	ar5
      0012F0 D0 06            [24] 4161 	pop	ar6
      0012F2 D0 07            [24] 4162 	pop	ar7
      0012F4 BB 01 0E         [24] 4163 	cjne	r3,#0x01,00106$
      0012F7 BC 00 0B         [24] 4164 	cjne	r4,#0x00,00106$
      0012FA 74 08            [12] 4165 	mov	a,#0x08
      0012FC B5*4C 06         [24] 4166 	cjne	a,_bit,00106$
                                   4167 ;	USART.c:194: d |= 0x80;
      0012FF 43 07 80         [24] 4168 	orl	ar7,#0x80
      001302 02r13rDF         [24] 4169 	ljmp	00137$
      001305                       4170 00106$:
                                   4171 ;	USART.c:195: } else if (parity_check(d) == 0 && bit == 9) {
      001305 8D 82            [24] 4172 	mov	dpl,r5
      001307 8E 83            [24] 4173 	mov	dph,r6
      001309 C0 07            [24] 4174 	push	ar7
      00130B 12r11r6C         [24] 4175 	lcall	_parity_check
      00130E E5 82            [12] 4176 	mov	a,dpl
      001310 85 83 F0         [24] 4177 	mov	b,dph
      001313 D0 07            [24] 4178 	pop	ar7
      001315 45 F0            [12] 4179 	orl	a,b
      001317 70 0A            [24] 4180 	jnz	00102$
      001319 74 09            [12] 4181 	mov	a,#0x09
      00131B B5*4C 05         [24] 4182 	cjne	a,_bit,00102$
                                   4183 ;	USART.c:196: TB8 = 0;
                                   4184 ;	assignBit
      00131E C2 9B            [12] 4185 	clr	_TB8
      001320 02r13rDF         [24] 4186 	ljmp	00137$
      001323                       4187 00102$:
                                   4188 ;	USART.c:198: LCD_string_write("Tx parity error\n");
      001323 90r06r0C         [24] 4189 	mov	dptr,#___str_16
      001326 75 F0 80         [24] 4190 	mov	b,#0x80
      001329 C0 07            [24] 4191 	push	ar7
      00132B 12r0Cr4B         [24] 4192 	lcall	_LCD_string_write
      00132E D0 07            [24] 4193 	pop	ar7
      001330 02r13rDF         [24] 4194 	ljmp	00137$
      001333                       4195 00136$:
                                   4196 ;	USART.c:200: } else if (parity == 1) {
      001333 74 01            [12] 4197 	mov	a,#0x01
      001335 B5*4D 02         [24] 4198 	cjne	a,_parity,00239$
      001338 80 03            [24] 4199 	sjmp	00240$
      00133A                       4200 00239$:
      00133A 02r13rDF         [24] 4201 	ljmp	00137$
      00133D                       4202 00240$:
                                   4203 ;	USART.c:201: if (parity_check(d) == 1 && bit == 8) {
      00133D 8F 05            [24] 4204 	mov	ar5,r7
      00133F 7E 00            [12] 4205 	mov	r6,#0x00
      001341 8D 82            [24] 4206 	mov	dpl,r5
      001343 8E 83            [24] 4207 	mov	dph,r6
      001345 C0 07            [24] 4208 	push	ar7
      001347 C0 06            [24] 4209 	push	ar6
      001349 C0 05            [24] 4210 	push	ar5
      00134B 12r11r6C         [24] 4211 	lcall	_parity_check
      00134E AB 82            [24] 4212 	mov	r3,dpl
      001350 AC 83            [24] 4213 	mov	r4,dph
      001352 D0 05            [24] 4214 	pop	ar5
      001354 D0 06            [24] 4215 	pop	ar6
      001356 D0 07            [24] 4216 	pop	ar7
      001358 BB 01 0E         [24] 4217 	cjne	r3,#0x01,00130$
      00135B BC 00 0B         [24] 4218 	cjne	r4,#0x00,00130$
      00135E 74 08            [12] 4219 	mov	a,#0x08
      001360 B5*4C 06         [24] 4220 	cjne	a,_bit,00130$
                                   4221 ;	USART.c:202: d &= 0x7F;
      001363 53 07 7F         [24] 4222 	anl	ar7,#0x7f
      001366 02r13rDF         [24] 4223 	ljmp	00137$
      001369                       4224 00130$:
                                   4225 ;	USART.c:203: } else if (parity_check(d) == 1 && bit == 9) {
      001369 8D 82            [24] 4226 	mov	dpl,r5
      00136B 8E 83            [24] 4227 	mov	dph,r6
      00136D C0 07            [24] 4228 	push	ar7
      00136F C0 06            [24] 4229 	push	ar6
      001371 C0 05            [24] 4230 	push	ar5
      001373 12r11r6C         [24] 4231 	lcall	_parity_check
      001376 AB 82            [24] 4232 	mov	r3,dpl
      001378 AC 83            [24] 4233 	mov	r4,dph
      00137A D0 05            [24] 4234 	pop	ar5
      00137C D0 06            [24] 4235 	pop	ar6
      00137E D0 07            [24] 4236 	pop	ar7
      001380 BB 01 0C         [24] 4237 	cjne	r3,#0x01,00126$
      001383 BC 00 09         [24] 4238 	cjne	r4,#0x00,00126$
      001386 74 09            [12] 4239 	mov	a,#0x09
      001388 B5*4C 04         [24] 4240 	cjne	a,_bit,00126$
                                   4241 ;	USART.c:204: TB8 = 0;
                                   4242 ;	assignBit
      00138B C2 9B            [12] 4243 	clr	_TB8
      00138D 80 50            [24] 4244 	sjmp	00137$
      00138F                       4245 00126$:
                                   4246 ;	USART.c:205: } else if (parity_check(d) == 0 && bit == 8) {
      00138F 8D 82            [24] 4247 	mov	dpl,r5
      001391 8E 83            [24] 4248 	mov	dph,r6
      001393 C0 07            [24] 4249 	push	ar7
      001395 C0 06            [24] 4250 	push	ar6
      001397 C0 05            [24] 4251 	push	ar5
      001399 12r11r6C         [24] 4252 	lcall	_parity_check
      00139C E5 82            [12] 4253 	mov	a,dpl
      00139E 85 83 F0         [24] 4254 	mov	b,dph
      0013A1 D0 05            [24] 4255 	pop	ar5
      0013A3 D0 06            [24] 4256 	pop	ar6
      0013A5 D0 07            [24] 4257 	pop	ar7
      0013A7 45 F0            [12] 4258 	orl	a,b
      0013A9 70 0A            [24] 4259 	jnz	00122$
      0013AB 74 08            [12] 4260 	mov	a,#0x08
      0013AD B5*4C 05         [24] 4261 	cjne	a,_bit,00122$
                                   4262 ;	USART.c:206: d |= 0x80;
      0013B0 43 07 80         [24] 4263 	orl	ar7,#0x80
      0013B3 80 2A            [24] 4264 	sjmp	00137$
      0013B5                       4265 00122$:
                                   4266 ;	USART.c:207: } else if (parity_check(d) == 0 && bit == 9) {
      0013B5 8D 82            [24] 4267 	mov	dpl,r5
      0013B7 8E 83            [24] 4268 	mov	dph,r6
      0013B9 C0 07            [24] 4269 	push	ar7
      0013BB 12r11r6C         [24] 4270 	lcall	_parity_check
      0013BE E5 82            [12] 4271 	mov	a,dpl
      0013C0 85 83 F0         [24] 4272 	mov	b,dph
      0013C3 D0 07            [24] 4273 	pop	ar7
      0013C5 45 F0            [12] 4274 	orl	a,b
      0013C7 70 09            [24] 4275 	jnz	00118$
      0013C9 74 09            [12] 4276 	mov	a,#0x09
      0013CB B5*4C 04         [24] 4277 	cjne	a,_bit,00118$
                                   4278 ;	USART.c:208: TB8 = 1;
                                   4279 ;	assignBit
      0013CE D2 9B            [12] 4280 	setb	_TB8
      0013D0 80 0D            [24] 4281 	sjmp	00137$
      0013D2                       4282 00118$:
                                   4283 ;	USART.c:210: LCD_string_write("Tx parity error\n");
      0013D2 90r06r0C         [24] 4284 	mov	dptr,#___str_16
      0013D5 75 F0 80         [24] 4285 	mov	b,#0x80
      0013D8 C0 07            [24] 4286 	push	ar7
      0013DA 12r0Cr4B         [24] 4287 	lcall	_LCD_string_write
      0013DD D0 07            [24] 4288 	pop	ar7
      0013DF                       4289 00137$:
                                   4290 ;	USART.c:215: SBUF = d;
      0013DF 8F 99            [24] 4291 	mov	_SBUF,r7
                                   4292 ;	USART.c:216: while (TI == 0);
      0013E1                       4293 00138$:
                                   4294 ;	USART.c:217: TI = 0;
                                   4295 ;	assignBit
      0013E1 10 99 02         [24] 4296 	jbc	_TI,00255$
      0013E4 80 FB            [24] 4297 	sjmp	00138$
      0013E6                       4298 00255$:
                                   4299 ;	USART.c:218: return d;
      0013E6 8F 82            [24] 4300 	mov	dpl,r7
                                   4301 ;	USART.c:219: }
      0013E8 22               [24] 4302 	ret
                                   4303 ;------------------------------------------------------------
                                   4304 ;Allocation info for local variables in function 'getAddress'
                                   4305 ;------------------------------------------------------------
                                   4306 ;input                     Allocated with name '_getAddress_input_65536_270'
                                   4307 ;hex                       Allocated with name '_getAddress_hex_65536_270'
                                   4308 ;i                         Allocated with name '_getAddress_i_65536_270'
                                   4309 ;address                   Allocated with name '_getAddress_address_65536_270'
                                   4310 ;------------------------------------------------------------
                                   4311 ;	getFunctions.c:6: uint16_t getAddress() {
                                   4312 ;	-----------------------------------------
                                   4313 ;	 function getAddress
                                   4314 ;	-----------------------------------------
      0013E9                       4315 _getAddress:
                                   4316 ;	getFunctions.c:16: address = 0;
      0013E9 90r00r15         [24] 4317 	mov	dptr,#_getAddress_address_65536_270
      0013EC E4               [12] 4318 	clr	a
      0013ED F0               [24] 4319 	movx	@dptr,a
      0013EE A3               [24] 4320 	inc	dptr
      0013EF F0               [24] 4321 	movx	@dptr,a
                                   4322 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      0013F0 7F 00            [12] 4323 	mov	r7,#0x00
      0013F2                       4324 00104$:
                                   4325 ;	getFunctions.c:20: input = keyDetect();				// get the nibble
      0013F2 C0 07            [24] 4326 	push	ar7
      0013F4 12r0CrEA         [24] 4327 	lcall	_keyDetect
                                   4328 ;	getFunctions.c:21: write(input);						// display nibble to user
      0013F7 AE 82            [24] 4329 	mov  r6,dpl
      0013F9 C0 06            [24] 4330 	push	ar6
      0013FB 12r0BrDD         [24] 4331 	lcall	_write
      0013FE D0 06            [24] 4332 	pop	ar6
                                   4333 ;	getFunctions.c:22: hex = convertAsciiHex(input);		// convert ascii char to hex
      001400 8E 82            [24] 4334 	mov	dpl,r6
      001402 12r0Fr41         [24] 4335 	lcall	_convertAsciiHex
      001405 AE 82            [24] 4336 	mov	r6,dpl
      001407 D0 07            [24] 4337 	pop	ar7
                                   4338 ;	getFunctions.c:25: address = address | hex;
      001409 90r00r15         [24] 4339 	mov	dptr,#_getAddress_address_65536_270
      00140C E0               [24] 4340 	movx	a,@dptr
      00140D FC               [12] 4341 	mov	r4,a
      00140E A3               [24] 4342 	inc	dptr
      00140F E0               [24] 4343 	movx	a,@dptr
      001410 FD               [12] 4344 	mov	r5,a
      001411 7B 00            [12] 4345 	mov	r3,#0x00
      001413 90r00r15         [24] 4346 	mov	dptr,#_getAddress_address_65536_270
      001416 EE               [12] 4347 	mov	a,r6
      001417 4C               [12] 4348 	orl	a,r4
      001418 F0               [24] 4349 	movx	@dptr,a
      001419 EB               [12] 4350 	mov	a,r3
      00141A 4D               [12] 4351 	orl	a,r5
      00141B A3               [24] 4352 	inc	dptr
      00141C F0               [24] 4353 	movx	@dptr,a
                                   4354 ;	getFunctions.c:26: if (i != 3) address = address << 4;
      00141D BF 03 02         [24] 4355 	cjne	r7,#0x03,00121$
      001420 80 1C            [24] 4356 	sjmp	00105$
      001422                       4357 00121$:
      001422 90r00r15         [24] 4358 	mov	dptr,#_getAddress_address_65536_270
      001425 E0               [24] 4359 	movx	a,@dptr
      001426 FD               [12] 4360 	mov	r5,a
      001427 A3               [24] 4361 	inc	dptr
      001428 E0               [24] 4362 	movx	a,@dptr
      001429 C4               [12] 4363 	swap	a
      00142A 54 F0            [12] 4364 	anl	a,#0xf0
      00142C CD               [12] 4365 	xch	a,r5
      00142D C4               [12] 4366 	swap	a
      00142E CD               [12] 4367 	xch	a,r5
      00142F 6D               [12] 4368 	xrl	a,r5
      001430 CD               [12] 4369 	xch	a,r5
      001431 54 F0            [12] 4370 	anl	a,#0xf0
      001433 CD               [12] 4371 	xch	a,r5
      001434 6D               [12] 4372 	xrl	a,r5
      001435 FE               [12] 4373 	mov	r6,a
      001436 90r00r15         [24] 4374 	mov	dptr,#_getAddress_address_65536_270
      001439 ED               [12] 4375 	mov	a,r5
      00143A F0               [24] 4376 	movx	@dptr,a
      00143B EE               [12] 4377 	mov	a,r6
      00143C A3               [24] 4378 	inc	dptr
      00143D F0               [24] 4379 	movx	@dptr,a
      00143E                       4380 00105$:
                                   4381 ;	getFunctions.c:19: for (i = 0; i < 4; i++) {
      00143E 0F               [12] 4382 	inc	r7
      00143F BF 04 00         [24] 4383 	cjne	r7,#0x04,00122$
      001442                       4384 00122$:
      001442 40 AE            [24] 4385 	jc	00104$
                                   4386 ;	getFunctions.c:28: return address;
      001444 90r00r15         [24] 4387 	mov	dptr,#_getAddress_address_65536_270
      001447 E0               [24] 4388 	movx	a,@dptr
      001448 FE               [12] 4389 	mov	r6,a
      001449 A3               [24] 4390 	inc	dptr
      00144A E0               [24] 4391 	movx	a,@dptr
                                   4392 ;	getFunctions.c:29: }
      00144B 8E 82            [24] 4393 	mov	dpl,r6
      00144D F5 83            [12] 4394 	mov	dph,a
      00144F 22               [24] 4395 	ret
                                   4396 ;------------------------------------------------------------
                                   4397 ;Allocation info for local variables in function 'getByte'
                                   4398 ;------------------------------------------------------------
                                   4399 ;input                     Allocated with name '_getByte_input_65536_273'
                                   4400 ;hex                       Allocated with name '_getByte_hex_65536_273'
                                   4401 ;byte                      Allocated with name '_getByte_byte_65536_273'
                                   4402 ;i                         Allocated with name '_getByte_i_65536_273'
                                   4403 ;------------------------------------------------------------
                                   4404 ;	getFunctions.c:36: uint8_t getByte() {
                                   4405 ;	-----------------------------------------
                                   4406 ;	 function getByte
                                   4407 ;	-----------------------------------------
      001450                       4408 _getByte:
                                   4409 ;	getFunctions.c:40: byte = 0;
      001450 90r00r17         [24] 4410 	mov	dptr,#_getByte_byte_65536_273
      001453 E4               [12] 4411 	clr	a
      001454 F0               [24] 4412 	movx	@dptr,a
                                   4413 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      001455 7F 00            [12] 4414 	mov	r7,#0x00
      001457                       4415 00104$:
                                   4416 ;	getFunctions.c:44: input = keyDetect();				// get the nibble
      001457 C0 07            [24] 4417 	push	ar7
      001459 12r0CrEA         [24] 4418 	lcall	_keyDetect
                                   4419 ;	getFunctions.c:45: write(input);						// display nibble to user
      00145C AE 82            [24] 4420 	mov  r6,dpl
      00145E C0 06            [24] 4421 	push	ar6
      001460 12r0BrDD         [24] 4422 	lcall	_write
      001463 D0 06            [24] 4423 	pop	ar6
                                   4424 ;	getFunctions.c:46: hex = convertAsciiHex(input);		// convert ascii char to hex
      001465 8E 82            [24] 4425 	mov	dpl,r6
      001467 12r0Fr41         [24] 4426 	lcall	_convertAsciiHex
      00146A AE 82            [24] 4427 	mov	r6,dpl
      00146C D0 07            [24] 4428 	pop	ar7
                                   4429 ;	getFunctions.c:49: byte = byte | hex;
      00146E 90r00r17         [24] 4430 	mov	dptr,#_getByte_byte_65536_273
      001471 E0               [24] 4431 	movx	a,@dptr
      001472 4E               [12] 4432 	orl	a,r6
      001473 F0               [24] 4433 	movx	@dptr,a
                                   4434 ;	getFunctions.c:50: if (i != 1) byte = byte << 4;
      001474 BF 01 02         [24] 4435 	cjne	r7,#0x01,00121$
      001477 80 09            [24] 4436 	sjmp	00105$
      001479                       4437 00121$:
      001479 90r00r17         [24] 4438 	mov	dptr,#_getByte_byte_65536_273
      00147C E0               [24] 4439 	movx	a,@dptr
      00147D C4               [12] 4440 	swap	a
      00147E 54 F0            [12] 4441 	anl	a,#0xf0
      001480 FE               [12] 4442 	mov	r6,a
      001481 F0               [24] 4443 	movx	@dptr,a
      001482                       4444 00105$:
                                   4445 ;	getFunctions.c:43: for (i = 0; i < 2; i++) {
      001482 0F               [12] 4446 	inc	r7
      001483 BF 02 00         [24] 4447 	cjne	r7,#0x02,00122$
      001486                       4448 00122$:
      001486 40 CF            [24] 4449 	jc	00104$
                                   4450 ;	getFunctions.c:52: return byte;
      001488 90r00r17         [24] 4451 	mov	dptr,#_getByte_byte_65536_273
      00148B E0               [24] 4452 	movx	a,@dptr
                                   4453 ;	getFunctions.c:53: }
      00148C F5 82            [12] 4454 	mov	dpl,a
      00148E 22               [24] 4455 	ret
                                   4456 ;------------------------------------------------------------
                                   4457 ;Allocation info for local variables in function 'check'
                                   4458 ;------------------------------------------------------------
                                   4459 ;checker                   Allocated to registers r7 
                                   4460 ;fetched                   Allocated to registers r0 
                                   4461 ;error                     Allocated to registers r7 
                                   4462 ;ramAddress                Allocated to registers r2 r3 
                                   4463 ;i                         Allocated with name '_check_i_65537_278'
                                   4464 ;------------------------------------------------------------
                                   4465 ;	check.c:6: void check (void) {
                                   4466 ;	-----------------------------------------
                                   4467 ;	 function check
                                   4468 ;	-----------------------------------------
      00148F                       4469 _check:
                                   4470 ;	check.c:8: fillScreen(GRAY);
      00148F 90 D6 BA         [24] 4471 	mov	dptr,#0xd6ba
      001492 12r08r44         [24] 4472 	lcall	_fillScreen
                                   4473 ;	check.c:9: setCursor(0, 0);
      001495 E4               [12] 4474 	clr	a
      001496 F5*00            [12] 4475 	mov	_setCursor_PARM_2,a
      001498 F5*01            [12] 4476 	mov	(_setCursor_PARM_2 + 1),a
      00149A 90 00 00         [24] 4477 	mov	dptr,#0x0000
      00149D 12r00rB6         [24] 4478 	lcall	_setCursor
                                   4479 ;	check.c:10: setTextSize(2);
      0014A0 75 82 02         [24] 4480 	mov	dpl,#0x02
      0014A3 12r00rD0         [24] 4481 	lcall	_setTextSize
                                   4482 ;	check.c:16: uint8_t error = 0;
      0014A6 7F 00            [12] 4483 	mov	r7,#0x00
                                   4484 ;	check.c:20: LCD_string_write("Enter byte to check\n");
      0014A8 90r06r1D         [24] 4485 	mov	dptr,#___str_17
      0014AB 75 F0 80         [24] 4486 	mov	b,#0x80
      0014AE C0 07            [24] 4487 	push	ar7
      0014B0 12r0Cr4B         [24] 4488 	lcall	_LCD_string_write
                                   4489 ;	check.c:21: checker = getByte();
      0014B3 12r14r50         [24] 4490 	lcall	_getByte
      0014B6 AE 82            [24] 4491 	mov	r6,dpl
                                   4492 ;	check.c:22: write('\n');
      0014B8 75 82 0A         [24] 4493 	mov	dpl,#0x0a
      0014BB C0 06            [24] 4494 	push	ar6
      0014BD 12r0BrDD         [24] 4495 	lcall	_write
                                   4496 ;	check.c:23: LCD_string_write("In progress...\n");
      0014C0 90r06r32         [24] 4497 	mov	dptr,#___str_18
      0014C3 75 F0 80         [24] 4498 	mov	b,#0x80
      0014C6 12r0Cr4B         [24] 4499 	lcall	_LCD_string_write
      0014C9 D0 06            [24] 4500 	pop	ar6
      0014CB D0 07            [24] 4501 	pop	ar7
                                   4502 ;	check.c:28: for (i = __START_RAM__; i < __END_RAM__; i++) {
      0014CD 7C 00            [12] 4503 	mov	r4,#0x00
      0014CF 7D 00            [12] 4504 	mov	r5,#0x00
      0014D1                       4505 00112$:
                                   4506 ;	check.c:29: IOM = 0;
                                   4507 ;	assignBit
      0014D1 C2 B4            [12] 4508 	clr	_P3_4
                                   4509 ;	check.c:30: ramAddress = (uint16_t __xdata*)(i);
      0014D3 8C 02            [24] 4510 	mov	ar2,r4
      0014D5 8D 03            [24] 4511 	mov	ar3,r5
                                   4512 ;	check.c:31: *ramAddress = checker;
      0014D7 8E 00            [24] 4513 	mov	ar0,r6
      0014D9 79 00            [12] 4514 	mov	r1,#0x00
      0014DB 8A 82            [24] 4515 	mov	dpl,r2
      0014DD 8B 83            [24] 4516 	mov	dph,r3
      0014DF E8               [12] 4517 	mov	a,r0
      0014E0 F0               [24] 4518 	movx	@dptr,a
      0014E1 E9               [12] 4519 	mov	a,r1
      0014E2 A3               [24] 4520 	inc	dptr
      0014E3 F0               [24] 4521 	movx	@dptr,a
                                   4522 ;	check.c:32: fetched = *ramAddress;
                                   4523 ;	check.c:33: IOM = 1;
                                   4524 ;	assignBit
      0014E4 D2 B4            [12] 4525 	setb	_P3_4
                                   4526 ;	check.c:35: if (fetched != checker) {
      0014E6 E8               [12] 4527 	mov	a,r0
      0014E7 B5 06 02         [24] 4528 	cjne	a,ar6,00141$
      0014EA 80 3F            [24] 4529 	sjmp	00104$
      0014EC                       4530 00141$:
                                   4531 ;	check.c:36: asciiToHex(checker);
      0014EC 8E 82            [24] 4532 	mov	dpl,r6
      0014EE C0 03            [24] 4533 	push	ar3
      0014F0 C0 02            [24] 4534 	push	ar2
      0014F2 C0 00            [24] 4535 	push	ar0
      0014F4 12r0ErCC         [24] 4536 	lcall	_asciiToHex
                                   4537 ;	check.c:37: write(' ');
      0014F7 75 82 20         [24] 4538 	mov	dpl,#0x20
      0014FA 12r0BrDD         [24] 4539 	lcall	_write
      0014FD D0 00            [24] 4540 	pop	ar0
                                   4541 ;	check.c:38: asciiToHex(fetched);
      0014FF 88 82            [24] 4542 	mov	dpl,r0
      001501 12r0ErCC         [24] 4543 	lcall	_asciiToHex
                                   4544 ;	check.c:39: write(' ');
      001504 75 82 20         [24] 4545 	mov	dpl,#0x20
      001507 12r0BrDD         [24] 4546 	lcall	_write
      00150A D0 02            [24] 4547 	pop	ar2
      00150C D0 03            [24] 4548 	pop	ar3
                                   4549 ;	check.c:40: asciiToHex(*ramAddress);
      00150E 8A 82            [24] 4550 	mov	dpl,r2
      001510 8B 83            [24] 4551 	mov	dph,r3
      001512 E0               [24] 4552 	movx	a,@dptr
      001513 F5 82            [12] 4553 	mov	dpl,a
      001515 12r0ErCC         [24] 4554 	lcall	_asciiToHex
                                   4555 ;	check.c:41: write('\n');
      001518 75 82 0A         [24] 4556 	mov	dpl,#0x0a
      00151B 12r0BrDD         [24] 4557 	lcall	_write
                                   4558 ;	check.c:42: LCD_string_write("Memory check failed\n");
      00151E 90r06r42         [24] 4559 	mov	dptr,#___str_19
      001521 75 F0 80         [24] 4560 	mov	b,#0x80
      001524 12r0Cr4B         [24] 4561 	lcall	_LCD_string_write
                                   4562 ;	check.c:43: error = 1;
      001527 7F 01            [12] 4563 	mov	r7,#0x01
                                   4564 ;	check.c:44: break;
      001529 80 6D            [24] 4565 	sjmp	00106$
      00152B                       4566 00104$:
                                   4567 ;	check.c:46: IOM = 0;
                                   4568 ;	assignBit
      00152B C2 B4            [12] 4569 	clr	_P3_4
                                   4570 ;	check.c:47: checker = ~checker;
      00152D EE               [12] 4571 	mov	a,r6
      00152E F4               [12] 4572 	cpl	a
                                   4573 ;	check.c:48: *ramAddress = checker;
      00152F FE               [12] 4574 	mov	r6,a
      001530 F8               [12] 4575 	mov	r0,a
      001531 79 00            [12] 4576 	mov	r1,#0x00
      001533 8A 82            [24] 4577 	mov	dpl,r2
      001535 8B 83            [24] 4578 	mov	dph,r3
      001537 E8               [12] 4579 	mov	a,r0
      001538 F0               [24] 4580 	movx	@dptr,a
      001539 E9               [12] 4581 	mov	a,r1
      00153A A3               [24] 4582 	inc	dptr
      00153B F0               [24] 4583 	movx	@dptr,a
                                   4584 ;	check.c:49: fetched = *ramAddress;
                                   4585 ;	check.c:50: IOM = 1;
                                   4586 ;	assignBit
      00153C D2 B4            [12] 4587 	setb	_P3_4
                                   4588 ;	check.c:52: if (fetched != checker) {
      00153E E8               [12] 4589 	mov	a,r0
      00153F B5 06 02         [24] 4590 	cjne	a,ar6,00142$
      001542 80 3F            [24] 4591 	sjmp	00113$
      001544                       4592 00142$:
                                   4593 ;	check.c:53: asciiToHex(checker);
      001544 8E 82            [24] 4594 	mov	dpl,r6
      001546 C0 03            [24] 4595 	push	ar3
      001548 C0 02            [24] 4596 	push	ar2
      00154A C0 00            [24] 4597 	push	ar0
      00154C 12r0ErCC         [24] 4598 	lcall	_asciiToHex
                                   4599 ;	check.c:54: write(' ');
      00154F 75 82 20         [24] 4600 	mov	dpl,#0x20
      001552 12r0BrDD         [24] 4601 	lcall	_write
      001555 D0 00            [24] 4602 	pop	ar0
                                   4603 ;	check.c:55: asciiToHex(fetched);
      001557 88 82            [24] 4604 	mov	dpl,r0
      001559 12r0ErCC         [24] 4605 	lcall	_asciiToHex
                                   4606 ;	check.c:56: write(' ');
      00155C 75 82 20         [24] 4607 	mov	dpl,#0x20
      00155F 12r0BrDD         [24] 4608 	lcall	_write
      001562 D0 02            [24] 4609 	pop	ar2
      001564 D0 03            [24] 4610 	pop	ar3
                                   4611 ;	check.c:57: asciiToHex(*ramAddress);
      001566 8A 82            [24] 4612 	mov	dpl,r2
      001568 8B 83            [24] 4613 	mov	dph,r3
      00156A E0               [24] 4614 	movx	a,@dptr
      00156B F5 82            [12] 4615 	mov	dpl,a
      00156D 12r0ErCC         [24] 4616 	lcall	_asciiToHex
                                   4617 ;	check.c:58: write('\n');
      001570 75 82 0A         [24] 4618 	mov	dpl,#0x0a
      001573 12r0BrDD         [24] 4619 	lcall	_write
                                   4620 ;	check.c:59: LCD_string_write("Memory check failed\n");
      001576 90r06r42         [24] 4621 	mov	dptr,#___str_19
      001579 75 F0 80         [24] 4622 	mov	b,#0x80
      00157C 12r0Cr4B         [24] 4623 	lcall	_LCD_string_write
                                   4624 ;	check.c:60: error = 1;
      00157F 7F 01            [12] 4625 	mov	r7,#0x01
                                   4626 ;	check.c:61: break;
      001581 80 15            [24] 4627 	sjmp	00106$
      001583                       4628 00113$:
                                   4629 ;	check.c:28: for (i = __START_RAM__; i < __END_RAM__; i++) {
      001583 0C               [12] 4630 	inc	r4
      001584 BC 00 01         [24] 4631 	cjne	r4,#0x00,00143$
      001587 0D               [12] 4632 	inc	r5
      001588                       4633 00143$:
      001588 8C 02            [24] 4634 	mov	ar2,r4
      00158A 8D 03            [24] 4635 	mov	ar3,r5
      00158C C3               [12] 4636 	clr	c
      00158D EA               [12] 4637 	mov	a,r2
      00158E 94 FF            [12] 4638 	subb	a,#0xff
      001590 EB               [12] 4639 	mov	a,r3
      001591 94 FF            [12] 4640 	subb	a,#0xff
      001593 50 03            [24] 4641 	jnc	00144$
      001595 02r14rD1         [24] 4642 	ljmp	00112$
      001598                       4643 00144$:
      001598                       4644 00106$:
                                   4645 ;	check.c:69: if (error == 0) {
      001598 EF               [12] 4646 	mov	a,r7
      001599 70 09            [24] 4647 	jnz	00108$
                                   4648 ;	check.c:70: LCD_string_write("Success!\n");
      00159B 90r06r57         [24] 4649 	mov	dptr,#___str_20
      00159E 75 F0 80         [24] 4650 	mov	b,#0x80
      0015A1 12r0Cr4B         [24] 4651 	lcall	_LCD_string_write
      0015A4                       4652 00108$:
                                   4653 ;	check.c:74: LCD_string_write("Press 1 for menu\n");
      0015A4 90r06r61         [24] 4654 	mov	dptr,#___str_21
      0015A7 75 F0 80         [24] 4655 	mov	b,#0x80
      0015AA 12r0Cr4B         [24] 4656 	lcall	_LCD_string_write
                                   4657 ;	check.c:76: do {
      0015AD                       4658 00109$:
                                   4659 ;	check.c:77: checker = keyDetect();
      0015AD 12r0CrEA         [24] 4660 	lcall	_keyDetect
      0015B0 AF 82            [24] 4661 	mov	r7,dpl
                                   4662 ;	check.c:78: } while (checker != '1');
      0015B2 BF 31 F8         [24] 4663 	cjne	r7,#0x31,00109$
                                   4664 ;	check.c:79: }
      0015B5 22               [24] 4665 	ret
                                   4666 ;------------------------------------------------------------
                                   4667 ;Allocation info for local variables in function 'basic'
                                   4668 ;------------------------------------------------------------
                                   4669 ;ramAddress                Allocated to registers 
                                   4670 ;val                       Allocated with name '_basic_val_65537_288'
                                   4671 ;fetched                   Allocated with name '_basic_fetched_65537_288'
                                   4672 ;add                       Allocated with name '_basic_add_65537_288'
                                   4673 ;------------------------------------------------------------
                                   4674 ;	check.c:85: void basic (void) {
                                   4675 ;	-----------------------------------------
                                   4676 ;	 function basic
                                   4677 ;	-----------------------------------------
      0015B6                       4678 _basic:
                                   4679 ;	check.c:87: fillScreen(GRAY);
      0015B6 90 D6 BA         [24] 4680 	mov	dptr,#0xd6ba
      0015B9 12r08r44         [24] 4681 	lcall	_fillScreen
                                   4682 ;	check.c:88: setCursor(0, 0);
      0015BC E4               [12] 4683 	clr	a
      0015BD F5*00            [12] 4684 	mov	_setCursor_PARM_2,a
      0015BF F5*01            [12] 4685 	mov	(_setCursor_PARM_2 + 1),a
      0015C1 90 00 00         [24] 4686 	mov	dptr,#0x0000
      0015C4 12r00rB6         [24] 4687 	lcall	_setCursor
                                   4688 ;	check.c:89: setTextSize(2);
      0015C7 75 82 02         [24] 4689 	mov	dpl,#0x02
      0015CA 12r00rD0         [24] 4690 	lcall	_setTextSize
                                   4691 ;	check.c:98: LCD_string_write("Enter byte\n");
      0015CD 90r06r73         [24] 4692 	mov	dptr,#___str_22
      0015D0 75 F0 80         [24] 4693 	mov	b,#0x80
      0015D3 12r0Cr4B         [24] 4694 	lcall	_LCD_string_write
                                   4695 ;	check.c:99: val = getByte();
      0015D6 12r14r50         [24] 4696 	lcall	_getByte
      0015D9 AF 82            [24] 4697 	mov	r7,dpl
                                   4698 ;	check.c:100: write('\n');
      0015DB 75 82 0A         [24] 4699 	mov	dpl,#0x0a
      0015DE C0 07            [24] 4700 	push	ar7
      0015E0 12r0BrDD         [24] 4701 	lcall	_write
                                   4702 ;	check.c:103: LCD_string_write("Enter address\n");
      0015E3 90r06r7F         [24] 4703 	mov	dptr,#___str_23
      0015E6 75 F0 80         [24] 4704 	mov	b,#0x80
      0015E9 12r0Cr4B         [24] 4705 	lcall	_LCD_string_write
                                   4706 ;	check.c:104: add = getAddress();
      0015EC 12r13rE9         [24] 4707 	lcall	_getAddress
      0015EF AD 82            [24] 4708 	mov	r5,dpl
      0015F1 AE 83            [24] 4709 	mov	r6,dph
                                   4710 ;	check.c:105: write('\n');
      0015F3 75 82 0A         [24] 4711 	mov	dpl,#0x0a
      0015F6 C0 06            [24] 4712 	push	ar6
      0015F8 C0 05            [24] 4713 	push	ar5
      0015FA 12r0BrDD         [24] 4714 	lcall	_write
                                   4715 ;	check.c:106: LCD_string_write("In progress\n");
      0015FD 90r06r8E         [24] 4716 	mov	dptr,#___str_24
      001600 75 F0 80         [24] 4717 	mov	b,#0x80
      001603 12r0Cr4B         [24] 4718 	lcall	_LCD_string_write
      001606 D0 05            [24] 4719 	pop	ar5
      001608 D0 06            [24] 4720 	pop	ar6
      00160A D0 07            [24] 4721 	pop	ar7
                                   4722 ;	check.c:108: IOM = 0;
                                   4723 ;	assignBit
      00160C C2 B4            [12] 4724 	clr	_P3_4
                                   4725 ;	check.c:111: ramAddress = (uint16_t __xdata*)(add);
      00160E 8D 82            [24] 4726 	mov	dpl,r5
      001610 8E 83            [24] 4727 	mov	dph,r6
                                   4728 ;	check.c:112: *ramAddress = val;
      001612 8F 05            [24] 4729 	mov	ar5,r7
      001614 7E 00            [12] 4730 	mov	r6,#0x00
      001616 ED               [12] 4731 	mov	a,r5
      001617 F0               [24] 4732 	movx	@dptr,a
      001618 EE               [12] 4733 	mov	a,r6
      001619 A3               [24] 4734 	inc	dptr
      00161A F0               [24] 4735 	movx	@dptr,a
                                   4736 ;	check.c:115: fetched = *ramAddress;
                                   4737 ;	check.c:117: IOM = 1;
                                   4738 ;	assignBit
      00161B D2 B4            [12] 4739 	setb	_P3_4
                                   4740 ;	check.c:120: if (fetched == val) {
      00161D ED               [12] 4741 	mov	a,r5
      00161E B5 07 10         [24] 4742 	cjne	a,ar7,00102$
                                   4743 ;	check.c:121: asciiToHex(fetched);
      001621 8D 82            [24] 4744 	mov	dpl,r5
      001623 12r0ErCC         [24] 4745 	lcall	_asciiToHex
                                   4746 ;	check.c:122: LCD_string_write(" fetched!\nSuccess!\n");
      001626 90r06r9B         [24] 4747 	mov	dptr,#___str_25
      001629 75 F0 80         [24] 4748 	mov	b,#0x80
      00162C 12r0Cr4B         [24] 4749 	lcall	_LCD_string_write
      00162F 80 09            [24] 4750 	sjmp	00103$
      001631                       4751 00102$:
                                   4752 ;	check.c:124: LCD_string_write("Check failed\n");
      001631 90r06rAF         [24] 4753 	mov	dptr,#___str_26
      001634 75 F0 80         [24] 4754 	mov	b,#0x80
      001637 12r0Cr4B         [24] 4755 	lcall	_LCD_string_write
      00163A                       4756 00103$:
                                   4757 ;	check.c:127: LCD_string_write("Press 1 for menu\n");
      00163A 90r06r61         [24] 4758 	mov	dptr,#___str_21
      00163D 75 F0 80         [24] 4759 	mov	b,#0x80
      001640 12r0Cr4B         [24] 4760 	lcall	_LCD_string_write
                                   4761 ;	check.c:129: do {
      001643                       4762 00104$:
                                   4763 ;	check.c:130: fetched = keyDetect();
      001643 12r0CrEA         [24] 4764 	lcall	_keyDetect
      001646 AF 82            [24] 4765 	mov	r7,dpl
                                   4766 ;	check.c:131: } while (fetched != '1');
      001648 BF 31 F8         [24] 4767 	cjne	r7,#0x31,00104$
                                   4768 ;	check.c:132: }
      00164B 22               [24] 4769 	ret
                                   4770 ;------------------------------------------------------------
                                   4771 ;Allocation info for local variables in function 'UART_free_type'
                                   4772 ;------------------------------------------------------------
                                   4773 ;	UART_freetype.c:1: void UART_free_type() {
                                   4774 ;	-----------------------------------------
                                   4775 ;	 function UART_free_type
                                   4776 ;	-----------------------------------------
      00164C                       4777 _UART_free_type:
                                   4778 ;	UART_freetype.c:3: fillScreen(GRAY);
      00164C 90 D6 BA         [24] 4779 	mov	dptr,#0xd6ba
      00164F 12r08r44         [24] 4780 	lcall	_fillScreen
                                   4781 ;	UART_freetype.c:4: setCursor(0, 0);
      001652 E4               [12] 4782 	clr	a
      001653 F5*00            [12] 4783 	mov	_setCursor_PARM_2,a
      001655 F5*01            [12] 4784 	mov	(_setCursor_PARM_2 + 1),a
      001657 90 00 00         [24] 4785 	mov	dptr,#0x0000
      00165A 12r00rB6         [24] 4786 	lcall	_setCursor
                                   4787 ;	UART_freetype.c:5: setTextSize(2);
      00165D 75 82 02         [24] 4788 	mov	dpl,#0x02
      001660 12r00rD0         [24] 4789 	lcall	_setTextSize
                                   4790 ;	UART_freetype.c:7: LCD_string_write("UART Free type, 0 for menu:\n");
      001663 90r06rBD         [24] 4791 	mov	dptr,#___str_27
      001666 75 F0 80         [24] 4792 	mov	b,#0x80
      001669 12r0Cr4B         [24] 4793 	lcall	_LCD_string_write
                                   4794 ;	UART_freetype.c:9: while (1) {
      00166C                       4795 00107$:
                                   4796 ;	UART_freetype.c:10: if (received_flag == 1) {
      00166C 74 01            [12] 4797 	mov	a,#0x01
      00166E B5*4B FB         [24] 4798 	cjne	a,_received_flag,00107$
                                   4799 ;	UART_freetype.c:11: if (received_byte == '0') {
      001671 74 30            [12] 4800 	mov	a,#0x30
      001673 B5*4A 04         [24] 4801 	cjne	a,_received_byte,00102$
                                   4802 ;	UART_freetype.c:12: received_flag = 0;
      001676 75*4B 00         [24] 4803 	mov	_received_flag,#0x00
                                   4804 ;	UART_freetype.c:13: break;
      001679 22               [24] 4805 	ret
      00167A                       4806 00102$:
                                   4807 ;	UART_freetype.c:16: write(received_byte);
      00167A 85*4A 82         [24] 4808 	mov	dpl,_received_byte
      00167D 12r0BrDD         [24] 4809 	lcall	_write
                                   4810 ;	UART_freetype.c:17: write('\n');
      001680 75 82 0A         [24] 4811 	mov	dpl,#0x0a
      001683 12r0BrDD         [24] 4812 	lcall	_write
                                   4813 ;	UART_freetype.c:18: received_flag = 0;
      001686 75*4B 00         [24] 4814 	mov	_received_flag,#0x00
                                   4815 ;	UART_freetype.c:22: }
      001689 80 E1            [24] 4816 	sjmp	00107$
                                   4817 ;------------------------------------------------------------
                                   4818 ;Allocation info for local variables in function 'UART_menu'
                                   4819 ;------------------------------------------------------------
                                   4820 ;input                     Allocated with name '_UART_menu_input_65536_297'
                                   4821 ;------------------------------------------------------------
                                   4822 ;	435_UART.c:11: void UART_menu() {
                                   4823 ;	-----------------------------------------
                                   4824 ;	 function UART_menu
                                   4825 ;	-----------------------------------------
      00168B                       4826 _UART_menu:
                                   4827 ;	435_UART.c:16: do {
      00168B                       4828 00106$:
                                   4829 ;	435_UART.c:18: fillScreen(GRAY);
      00168B 90 D6 BA         [24] 4830 	mov	dptr,#0xd6ba
      00168E 12r08r44         [24] 4831 	lcall	_fillScreen
                                   4832 ;	435_UART.c:19: setCursor(0, 0);
      001691 E4               [12] 4833 	clr	a
      001692 F5*00            [12] 4834 	mov	_setCursor_PARM_2,a
      001694 F5*01            [12] 4835 	mov	(_setCursor_PARM_2 + 1),a
      001696 90 00 00         [24] 4836 	mov	dptr,#0x0000
      001699 12r00rB6         [24] 4837 	lcall	_setCursor
                                   4838 ;	435_UART.c:20: setTextSize(2);
      00169C 75 82 02         [24] 4839 	mov	dpl,#0x02
      00169F 12r00rD0         [24] 4840 	lcall	_setTextSize
                                   4841 ;	435_UART.c:23: LCD_string_write("Which mode?\n");
      0016A2 90r06rDA         [24] 4842 	mov	dptr,#___str_28
      0016A5 75 F0 80         [24] 4843 	mov	b,#0x80
      0016A8 12r0Cr4B         [24] 4844 	lcall	_LCD_string_write
                                   4845 ;	435_UART.c:26: LCD_string_write("1: Loopback\n");
      0016AB 90r06rE7         [24] 4846 	mov	dptr,#___str_29
      0016AE 75 F0 80         [24] 4847 	mov	b,#0x80
      0016B1 12r0Cr4B         [24] 4848 	lcall	_LCD_string_write
                                   4849 ;	435_UART.c:27: LCD_string_write("2: Interboard\n");
      0016B4 90r06rF4         [24] 4850 	mov	dptr,#___str_30
      0016B7 75 F0 80         [24] 4851 	mov	b,#0x80
      0016BA 12r0Cr4B         [24] 4852 	lcall	_LCD_string_write
                                   4853 ;	435_UART.c:28: LCD_string_write("0: Exit\n");
      0016BD 90r07r03         [24] 4854 	mov	dptr,#___str_31
      0016C0 75 F0 80         [24] 4855 	mov	b,#0x80
      0016C3 12r0Cr4B         [24] 4856 	lcall	_LCD_string_write
                                   4857 ;	435_UART.c:29: input = keyDetect();
      0016C6 12r0CrEA         [24] 4858 	lcall	_keyDetect
      0016C9 AF 82            [24] 4859 	mov	r7,dpl
                                   4860 ;	435_UART.c:32: switch (input) {
      0016CB BF 31 02         [24] 4861 	cjne	r7,#0x31,00123$
      0016CE 80 05            [24] 4862 	sjmp	00101$
      0016D0                       4863 00123$:
                                   4864 ;	435_UART.c:34: case '1': loopback(); break;
      0016D0 BF 32 12         [24] 4865 	cjne	r7,#0x32,00103$
      0016D3 80 09            [24] 4866 	sjmp	00102$
      0016D5                       4867 00101$:
      0016D5 C0 07            [24] 4868 	push	ar7
      0016D7 12r16rE9         [24] 4869 	lcall	_loopback
      0016DA D0 07            [24] 4870 	pop	ar7
                                   4871 ;	435_UART.c:35: case '2': interboard(); break;
      0016DC 80 07            [24] 4872 	sjmp	00103$
      0016DE                       4873 00102$:
      0016DE C0 07            [24] 4874 	push	ar7
      0016E0 12r17r59         [24] 4875 	lcall	_interboard
      0016E3 D0 07            [24] 4876 	pop	ar7
                                   4877 ;	435_UART.c:36: }
      0016E5                       4878 00103$:
                                   4879 ;	435_UART.c:37: if (input == '0') break;
      0016E5 BF 30 A3         [24] 4880 	cjne	r7,#0x30,00106$
                                   4881 ;	435_UART.c:38: } while (1);
                                   4882 ;	435_UART.c:39: }
      0016E8 22               [24] 4883 	ret
                                   4884 ;------------------------------------------------------------
                                   4885 ;Allocation info for local variables in function 'loopback'
                                   4886 ;------------------------------------------------------------
                                   4887 ;input                     Allocated to registers 
                                   4888 ;------------------------------------------------------------
                                   4889 ;	435_UART.c:46: void loopback() {
                                   4890 ;	-----------------------------------------
                                   4891 ;	 function loopback
                                   4892 ;	-----------------------------------------
      0016E9                       4893 _loopback:
                                   4894 ;	435_UART.c:48: fillScreen(GRAY);
      0016E9 90 D6 BA         [24] 4895 	mov	dptr,#0xd6ba
      0016EC 12r08r44         [24] 4896 	lcall	_fillScreen
                                   4897 ;	435_UART.c:49: setCursor(0, 0);
      0016EF E4               [12] 4898 	clr	a
      0016F0 F5*00            [12] 4899 	mov	_setCursor_PARM_2,a
      0016F2 F5*01            [12] 4900 	mov	(_setCursor_PARM_2 + 1),a
      0016F4 90 00 00         [24] 4901 	mov	dptr,#0x0000
      0016F7 12r00rB6         [24] 4902 	lcall	_setCursor
                                   4903 ;	435_UART.c:50: setTextSize(2);
      0016FA 75 82 02         [24] 4904 	mov	dpl,#0x02
      0016FD 12r00rD0         [24] 4905 	lcall	_setTextSize
                                   4906 ;	435_UART.c:56: UART_config();
      001700 12r10r61         [24] 4907 	lcall	_UART_config
                                   4908 ;	435_UART.c:59: fillScreen(GRAY);
      001703 90 D6 BA         [24] 4909 	mov	dptr,#0xd6ba
      001706 12r08r44         [24] 4910 	lcall	_fillScreen
                                   4911 ;	435_UART.c:60: setCursor(0, 0);
      001709 E4               [12] 4912 	clr	a
      00170A F5*00            [12] 4913 	mov	_setCursor_PARM_2,a
      00170C F5*01            [12] 4914 	mov	(_setCursor_PARM_2 + 1),a
      00170E 90 00 00         [24] 4915 	mov	dptr,#0x0000
      001711 12r00rB6         [24] 4916 	lcall	_setCursor
                                   4917 ;	435_UART.c:61: setTextSize(2);
      001714 75 82 02         [24] 4918 	mov	dpl,#0x02
      001717 12r00rD0         [24] 4919 	lcall	_setTextSize
                                   4920 ;	435_UART.c:63: LCD_string_write("Press 0 for menu\n");
      00171A 90r07r0C         [24] 4921 	mov	dptr,#___str_32
      00171D 75 F0 80         [24] 4922 	mov	b,#0x80
      001720 12r0Cr4B         [24] 4923 	lcall	_LCD_string_write
                                   4924 ;	435_UART.c:65: do {
      001723                       4925 00108$:
                                   4926 ;	435_UART.c:67: input = keyDetect();
      001723 12r0CrEA         [24] 4927 	lcall	_keyDetect
                                   4928 ;	435_UART.c:68: input = UART_transmit(input);
      001726 12r12r7F         [24] 4929 	lcall	_UART_transmit
                                   4930 ;	435_UART.c:69: write(input);
      001729 12r0BrDD         [24] 4931 	lcall	_write
                                   4932 ;	435_UART.c:73: if (received_flag == 1) {
      00172C 74 01            [12] 4933 	mov	a,#0x01
      00172E B5*4B 1F         [24] 4934 	cjne	a,_received_flag,00107$
                                   4935 ;	435_UART.c:75: if (received_byte == '0') {
      001731 74 30            [12] 4936 	mov	a,#0x30
      001733 B5*4A 04         [24] 4937 	cjne	a,_received_byte,00104$
                                   4938 ;	435_UART.c:76: received_flag = 0;
      001736 75*4B 00         [24] 4939 	mov	_received_flag,#0x00
                                   4940 ;	435_UART.c:77: break;
      001739 22               [24] 4941 	ret
      00173A                       4942 00104$:
                                   4943 ;	435_UART.c:80: if (parity != 0) receive_parity();
      00173A E5*4D            [12] 4944 	mov	a,_parity
      00173C 60 03            [24] 4945 	jz	00105$
      00173E 12r11r9E         [24] 4946 	lcall	_receive_parity
      001741                       4947 00105$:
                                   4948 ;	435_UART.c:82: write(received_byte);
      001741 85*4A 82         [24] 4949 	mov	dpl,_received_byte
      001744 12r0BrDD         [24] 4950 	lcall	_write
                                   4951 ;	435_UART.c:83: write('\n');
      001747 75 82 0A         [24] 4952 	mov	dpl,#0x0a
      00174A 12r0BrDD         [24] 4953 	lcall	_write
                                   4954 ;	435_UART.c:84: received_flag = 0;
      00174D 75*4B 00         [24] 4955 	mov	_received_flag,#0x00
      001750                       4956 00107$:
                                   4957 ;	435_UART.c:88: received_flag = 0;
      001750 75*4B 00         [24] 4958 	mov	_received_flag,#0x00
                                   4959 ;	435_UART.c:89: } while (received_byte != '0');
      001753 74 30            [12] 4960 	mov	a,#0x30
      001755 B5*4A CB         [24] 4961 	cjne	a,_received_byte,00108$
                                   4962 ;	435_UART.c:90: }
      001758 22               [24] 4963 	ret
                                   4964 ;------------------------------------------------------------
                                   4965 ;Allocation info for local variables in function 'interboard'
                                   4966 ;------------------------------------------------------------
                                   4967 ;data                      Allocated to registers r7 
                                   4968 ;input                     Allocated with name '_interboard_input_65537_307'
                                   4969 ;------------------------------------------------------------
                                   4970 ;	435_UART.c:97: void interboard() {
                                   4971 ;	-----------------------------------------
                                   4972 ;	 function interboard
                                   4973 ;	-----------------------------------------
      001759                       4974 _interboard:
                                   4975 ;	435_UART.c:99: fillScreen(GRAY);
      001759 90 D6 BA         [24] 4976 	mov	dptr,#0xd6ba
      00175C 12r08r44         [24] 4977 	lcall	_fillScreen
                                   4978 ;	435_UART.c:100: setCursor(0, 0);
      00175F E4               [12] 4979 	clr	a
      001760 F5*00            [12] 4980 	mov	_setCursor_PARM_2,a
      001762 F5*01            [12] 4981 	mov	(_setCursor_PARM_2 + 1),a
      001764 90 00 00         [24] 4982 	mov	dptr,#0x0000
      001767 12r00rB6         [24] 4983 	lcall	_setCursor
                                   4984 ;	435_UART.c:101: setTextSize(2);
      00176A 75 82 02         [24] 4985 	mov	dpl,#0x02
      00176D 12r00rD0         [24] 4986 	lcall	_setTextSize
                                   4987 ;	435_UART.c:105: uint8_t data = 0;
      001770 7F 00            [12] 4988 	mov	r7,#0x00
                                   4989 ;	435_UART.c:108: UART_config();
      001772 C0 07            [24] 4990 	push	ar7
      001774 12r10r61         [24] 4991 	lcall	_UART_config
                                   4992 ;	435_UART.c:111: LCD_string_write("1: Transmit\n2: Receive\n0: Exit\n");
      001777 90r07r1E         [24] 4993 	mov	dptr,#___str_33
      00177A 75 F0 80         [24] 4994 	mov	b,#0x80
      00177D 12r0Cr4B         [24] 4995 	lcall	_LCD_string_write
      001780 D0 07            [24] 4996 	pop	ar7
                                   4997 ;	435_UART.c:114: do {
      001782                       4998 00124$:
                                   4999 ;	435_UART.c:115: input = keyDetect();
      001782 C0 07            [24] 5000 	push	ar7
      001784 12r0CrEA         [24] 5001 	lcall	_keyDetect
      001787 AE 82            [24] 5002 	mov	r6,dpl
      001789 D0 07            [24] 5003 	pop	ar7
                                   5004 ;	435_UART.c:118: if (input == '1') {
      00178B BE 31 37         [24] 5005 	cjne	r6,#0x31,00118$
                                   5006 ;	435_UART.c:120: fillScreen(GRAY);
      00178E 90 D6 BA         [24] 5007 	mov	dptr,#0xd6ba
      001791 C0 06            [24] 5008 	push	ar6
      001793 12r08r44         [24] 5009 	lcall	_fillScreen
                                   5010 ;	435_UART.c:121: setCursor(0, 0);
      001796 E4               [12] 5011 	clr	a
      001797 F5*00            [12] 5012 	mov	_setCursor_PARM_2,a
      001799 F5*01            [12] 5013 	mov	(_setCursor_PARM_2 + 1),a
      00179B 90 00 00         [24] 5014 	mov	dptr,#0x0000
      00179E 12r00rB6         [24] 5015 	lcall	_setCursor
                                   5016 ;	435_UART.c:123: LCD_string_write("Tx Mode, 0 for menu:\n");
      0017A1 90r07r3E         [24] 5017 	mov	dptr,#___str_34
      0017A4 75 F0 80         [24] 5018 	mov	b,#0x80
      0017A7 12r0Cr4B         [24] 5019 	lcall	_LCD_string_write
      0017AA D0 06            [24] 5020 	pop	ar6
                                   5021 ;	435_UART.c:126: do {
      0017AC                       5022 00104$:
                                   5023 ;	435_UART.c:127: data = keyDetect();
      0017AC C0 06            [24] 5024 	push	ar6
      0017AE 12r0CrEA         [24] 5025 	lcall	_keyDetect
      0017B1 AF 82            [24] 5026 	mov	r7,dpl
      0017B3 D0 06            [24] 5027 	pop	ar6
                                   5028 ;	435_UART.c:130: if (data != '0') UART_transmit(data);
      0017B5 BF 30 02         [24] 5029 	cjne	r7,#0x30,00167$
      0017B8 80 36            [24] 5030 	sjmp	00119$
      0017BA                       5031 00167$:
      0017BA 8F 82            [24] 5032 	mov	dpl,r7
      0017BC C0 06            [24] 5033 	push	ar6
      0017BE 12r12r7F         [24] 5034 	lcall	_UART_transmit
      0017C1 D0 06            [24] 5035 	pop	ar6
                                   5036 ;	435_UART.c:133: } while (1);
      0017C3 80 E7            [24] 5037 	sjmp	00104$
      0017C5                       5038 00118$:
                                   5039 ;	435_UART.c:137: else if (input == '2') {
      0017C5 BE 32 28         [24] 5040 	cjne	r6,#0x32,00119$
                                   5041 ;	435_UART.c:138: do {
      0017C8                       5042 00112$:
                                   5043 ;	435_UART.c:139: if (received_flag == 1) {
      0017C8 74 01            [12] 5044 	mov	a,#0x01
      0017CA B5*4B FB         [24] 5045 	cjne	a,_received_flag,00112$
                                   5046 ;	435_UART.c:141: if (received_byte == '0') {
      0017CD 74 30            [12] 5047 	mov	a,#0x30
      0017CF B5*4A 05         [24] 5048 	cjne	a,_received_byte,00108$
                                   5049 ;	435_UART.c:142: received_flag = 0;
      0017D2 75*4B 00         [24] 5050 	mov	_received_flag,#0x00
                                   5051 ;	435_UART.c:143: break;
      0017D5 80 19            [24] 5052 	sjmp	00119$
      0017D7                       5053 00108$:
                                   5054 ;	435_UART.c:146: write(received_byte);
      0017D7 85*4A 82         [24] 5055 	mov	dpl,_received_byte
      0017DA C0 07            [24] 5056 	push	ar7
      0017DC C0 06            [24] 5057 	push	ar6
      0017DE 12r0BrDD         [24] 5058 	lcall	_write
                                   5059 ;	435_UART.c:147: write('\n');
      0017E1 75 82 0A         [24] 5060 	mov	dpl,#0x0a
      0017E4 12r0BrDD         [24] 5061 	lcall	_write
      0017E7 D0 06            [24] 5062 	pop	ar6
      0017E9 D0 07            [24] 5063 	pop	ar7
                                   5064 ;	435_UART.c:148: received_flag = 0;
      0017EB 75*4B 00         [24] 5065 	mov	_received_flag,#0x00
                                   5066 ;	435_UART.c:151: } while (1);
      0017EE 80 D8            [24] 5067 	sjmp	00112$
      0017F0                       5068 00119$:
                                   5069 ;	435_UART.c:155: if (input == '0' || received_byte == '0' || data == '0') break;
      0017F0 BE 30 01         [24] 5070 	cjne	r6,#0x30,00174$
      0017F3 22               [24] 5071 	ret
      0017F4                       5072 00174$:
      0017F4 74 30            [12] 5073 	mov	a,#0x30
      0017F6 B5*4A 01         [24] 5074 	cjne	a,_received_byte,00175$
      0017F9 22               [24] 5075 	ret
      0017FA                       5076 00175$:
      0017FA BF 30 01         [24] 5077 	cjne	r7,#0x30,00176$
      0017FD 22               [24] 5078 	ret
      0017FE                       5079 00176$:
      0017FE 02r17r82         [24] 5080 	ljmp	00124$
                                   5081 ;	435_UART.c:156: } while (1);
                                   5082 ;	435_UART.c:157: }
      001801 22               [24] 5083 	ret
                                   5084 ;------------------------------------------------------------
                                   5085 ;Allocation info for local variables in function 'menu'
                                   5086 ;------------------------------------------------------------
                                   5087 ;	main.c:33: void menu(void) {
                                   5088 ;	-----------------------------------------
                                   5089 ;	 function menu
                                   5090 ;	-----------------------------------------
      001802                       5091 _menu:
                                   5092 ;	main.c:35: setRotation(2);
      001802 75 82 02         [24] 5093 	mov	dpl,#0x02
      001805 12r00rE8         [24] 5094 	lcall	_setRotation
                                   5095 ;	main.c:36: setTextSize(3);
      001808 75 82 03         [24] 5096 	mov	dpl,#0x03
      00180B 12r00rD0         [24] 5097 	lcall	_setTextSize
                                   5098 ;	main.c:37: fillScreen(GRAY);
      00180E 90 D6 BA         [24] 5099 	mov	dptr,#0xd6ba
      001811 12r08r44         [24] 5100 	lcall	_fillScreen
                                   5101 ;	main.c:38: setTextColor(BLACK, GRAY);
      001814 75*00 BA         [24] 5102 	mov	_setTextColor_PARM_2,#0xba
      001817 75*01 D6         [24] 5103 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      00181A 90 00 00         [24] 5104 	mov	dptr,#0x0000
      00181D 12r00rC3         [24] 5105 	lcall	_setTextColor
                                   5106 ;	main.c:39: setCursor(0, 0);
      001820 E4               [12] 5107 	clr	a
      001821 F5*00            [12] 5108 	mov	_setCursor_PARM_2,a
      001823 F5*01            [12] 5109 	mov	(_setCursor_PARM_2 + 1),a
      001825 90 00 00         [24] 5110 	mov	dptr,#0x0000
      001828 12r00rB6         [24] 5111 	lcall	_setCursor
                                   5112 ;	main.c:42: LCD_string_write("Brandon Cline\n");
      00182B 90r07r54         [24] 5113 	mov	dptr,#___str_35
      00182E 75 F0 80         [24] 5114 	mov	b,#0x80
      001831 12r0Cr4B         [24] 5115 	lcall	_LCD_string_write
                                   5116 ;	main.c:43: LCD_string_write("ECEN 4330\n");
      001834 90r07r63         [24] 5117 	mov	dptr,#___str_36
      001837 75 F0 80         [24] 5118 	mov	b,#0x80
      00183A 12r0Cr4B         [24] 5119 	lcall	_LCD_string_write
                                   5120 ;	main.c:45: setTextSize(2);
      00183D 75 82 02         [24] 5121 	mov	dpl,#0x02
      001840 12r00rD0         [24] 5122 	lcall	_setTextSize
                                   5123 ;	main.c:49: LCD_string_write("1: Basic check\n");
      001843 90r07r6E         [24] 5124 	mov	dptr,#___str_37
      001846 75 F0 80         [24] 5125 	mov	b,#0x80
      001849 12r0Cr4B         [24] 5126 	lcall	_LCD_string_write
                                   5127 ;	main.c:51: LCD_string_write("2: Dump\n");
      00184C 90r07r7E         [24] 5128 	mov	dptr,#___str_38
      00184F 75 F0 80         [24] 5129 	mov	b,#0x80
      001852 12r0Cr4B         [24] 5130 	lcall	_LCD_string_write
                                   5131 ;	main.c:53: LCD_string_write("3: Check\n");
      001855 90r07r87         [24] 5132 	mov	dptr,#___str_39
      001858 75 F0 80         [24] 5133 	mov	b,#0x80
      00185B 12r0Cr4B         [24] 5134 	lcall	_LCD_string_write
                                   5135 ;	main.c:55: LCD_string_write("A: Move\n");
      00185E 90r07r91         [24] 5136 	mov	dptr,#___str_40
      001861 75 F0 80         [24] 5137 	mov	b,#0x80
      001864 12r0Cr4B         [24] 5138 	lcall	_LCD_string_write
                                   5139 ;	main.c:57: LCD_string_write("4: Edit\n");
      001867 90r07r9A         [24] 5140 	mov	dptr,#___str_41
      00186A 75 F0 80         [24] 5141 	mov	b,#0x80
      00186D 12r0Cr4B         [24] 5142 	lcall	_LCD_string_write
                                   5143 ;	main.c:59: LCD_string_write("5: Find\n");
      001870 90r07rA3         [24] 5144 	mov	dptr,#___str_42
      001873 75 F0 80         [24] 5145 	mov	b,#0x80
      001876 12r0Cr4B         [24] 5146 	lcall	_LCD_string_write
                                   5147 ;	main.c:61: LCD_string_write("6: Count\n");
      001879 90r07rAC         [24] 5148 	mov	dptr,#___str_43
      00187C 75 F0 80         [24] 5149 	mov	b,#0x80
      00187F 12r0Cr4B         [24] 5150 	lcall	_LCD_string_write
                                   5151 ;	main.c:64: LCD_string_write("B: Temperature\n");
      001882 90r07rB6         [24] 5152 	mov	dptr,#___str_44
      001885 75 F0 80         [24] 5153 	mov	b,#0x80
      001888 12r0Cr4B         [24] 5154 	lcall	_LCD_string_write
                                   5155 ;	main.c:66: LCD_string_write("7: Light\n");
      00188B 90r07rC6         [24] 5156 	mov	dptr,#___str_45
      00188E 75 F0 80         [24] 5157 	mov	b,#0x80
      001891 12r0Cr4B         [24] 5158 	lcall	_LCD_string_write
                                   5159 ;	main.c:69: LCD_string_write("8: UART free type\n");
      001894 90r07rD0         [24] 5160 	mov	dptr,#___str_46
      001897 75 F0 80         [24] 5161 	mov	b,#0x80
      00189A 12r0Cr4B         [24] 5162 	lcall	_LCD_string_write
                                   5163 ;	main.c:72: LCD_string_write("9: ECEN 435 UART\n");
      00189D 90r07rE3         [24] 5164 	mov	dptr,#___str_47
      0018A0 75 F0 80         [24] 5165 	mov	b,#0x80
                                   5166 ;	main.c:73: }
      0018A3 02r0Cr4B         [24] 5167 	ljmp	_LCD_string_write
                                   5168 ;------------------------------------------------------------
                                   5169 ;Allocation info for local variables in function 'main'
                                   5170 ;------------------------------------------------------------
                                   5171 ;input                     Allocated with name '_main_input_65536_319'
                                   5172 ;------------------------------------------------------------
                                   5173 ;	main.c:75: void main(void) {
                                   5174 ;	-----------------------------------------
                                   5175 ;	 function main
                                   5176 ;	-----------------------------------------
      0018A6                       5177 _main:
                                   5178 ;	main.c:80: iowrite8(seg7_address, 0x00);
      0018A6 75*00 00         [24] 5179 	mov	_iowrite8_PARM_2,#0x00
      0018A9 85*04 82         [24] 5180 	mov	dpl,_seg7_address
      0018AC 85*05 83         [24] 5181 	mov	dph,(_seg7_address + 1)
      0018AF 12r00r00         [24] 5182 	lcall	_iowrite8
                                   5183 ;	main.c:83: TFT_LCD_INIT();
      0018B2 12r02r11         [24] 5184 	lcall	_TFT_LCD_INIT
                                   5185 ;	main.c:84: fillScreen(BLACK);
      0018B5 90 00 00         [24] 5186 	mov	dptr,#0x0000
      0018B8 12r08r44         [24] 5187 	lcall	_fillScreen
                                   5188 ;	main.c:85: setRotation(0);
      0018BB 75 82 00         [24] 5189 	mov	dpl,#0x00
      0018BE 12r00rE8         [24] 5190 	lcall	_setRotation
                                   5191 ;	main.c:86: testCircles(20, BLUE);
      0018C1 75*2C 1F         [24] 5192 	mov	_testCircles_PARM_2,#0x1f
      0018C4 75*2D 00         [24] 5193 	mov	(_testCircles_PARM_2 + 1),#0x00
      0018C7 75 82 14         [24] 5194 	mov	dpl,#0x14
      0018CA 12r06r9D         [24] 5195 	lcall	_testCircles
                                   5196 ;	main.c:87: UART_init();
      0018CD 12r10r51         [24] 5197 	lcall	_UART_init
                                   5198 ;	main.c:89: while (1) {
      0018D0                       5199 00107$:
                                   5200 ;	main.c:91: menu();
      0018D0 12r18r02         [24] 5201 	lcall	_menu
                                   5202 ;	main.c:94: input = keyDetect();
      0018D3 12r0CrEA         [24] 5203 	lcall	_keyDetect
      0018D6 AF 82            [24] 5204 	mov	r7,dpl
                                   5205 ;	main.c:98: switch(input) {
      0018D8 BF 33 02         [24] 5206 	cjne	r7,#0x33,00127$
      0018DB 80 0A            [24] 5207 	sjmp	00101$
      0018DD                       5208 00127$:
      0018DD BF 38 02         [24] 5209 	cjne	r7,#0x38,00128$
      0018E0 80 0A            [24] 5210 	sjmp	00102$
      0018E2                       5211 00128$:
                                   5212 ;	main.c:101: case '3': check(); break;
      0018E2 BF 39 EB         [24] 5213 	cjne	r7,#0x39,00107$
      0018E5 80 0A            [24] 5214 	sjmp	00103$
      0018E7                       5215 00101$:
      0018E7 12r14r8F         [24] 5216 	lcall	_check
                                   5217 ;	main.c:108: case '8': UART_free_type(); break;
      0018EA 80 E4            [24] 5218 	sjmp	00107$
      0018EC                       5219 00102$:
      0018EC 12r16r4C         [24] 5220 	lcall	_UART_free_type
                                   5221 ;	main.c:111: case '9': UART_menu(); break;
      0018EF 80 DF            [24] 5222 	sjmp	00107$
      0018F1                       5223 00103$:
      0018F1 12r16r8B         [24] 5224 	lcall	_UART_menu
                                   5225 ;	main.c:113: }
                                   5226 ;	main.c:115: }
      0018F4 80 DA            [24] 5227 	sjmp	00107$
                                   5228 	.area CSEG    (CODE)
                                   5229 	.area CONST   (CODE)
      000000                       5230 _font:
      000000 00                    5231 	.db #0x00	; 0
      000001 00                    5232 	.db #0x00	; 0
      000002 00                    5233 	.db #0x00	; 0
      000003 00                    5234 	.db #0x00	; 0
      000004 00                    5235 	.db #0x00	; 0
      000005 3E                    5236 	.db #0x3e	; 62
      000006 5B                    5237 	.db #0x5b	; 91
      000007 4F                    5238 	.db #0x4f	; 79	'O'
      000008 5B                    5239 	.db #0x5b	; 91
      000009 3E                    5240 	.db #0x3e	; 62
      00000A 3E                    5241 	.db #0x3e	; 62
      00000B 6B                    5242 	.db #0x6b	; 107	'k'
      00000C 4F                    5243 	.db #0x4f	; 79	'O'
      00000D 6B                    5244 	.db #0x6b	; 107	'k'
      00000E 3E                    5245 	.db #0x3e	; 62
      00000F 1C                    5246 	.db #0x1c	; 28
      000010 3E                    5247 	.db #0x3e	; 62
      000011 7C                    5248 	.db #0x7c	; 124
      000012 3E                    5249 	.db #0x3e	; 62
      000013 1C                    5250 	.db #0x1c	; 28
      000014 18                    5251 	.db #0x18	; 24
      000015 3C                    5252 	.db #0x3c	; 60
      000016 7E                    5253 	.db #0x7e	; 126
      000017 3C                    5254 	.db #0x3c	; 60
      000018 18                    5255 	.db #0x18	; 24
      000019 1C                    5256 	.db #0x1c	; 28
      00001A 57                    5257 	.db #0x57	; 87	'W'
      00001B 7D                    5258 	.db #0x7d	; 125
      00001C 57                    5259 	.db #0x57	; 87	'W'
      00001D 1C                    5260 	.db #0x1c	; 28
      00001E 1C                    5261 	.db #0x1c	; 28
      00001F 5E                    5262 	.db #0x5e	; 94
      000020 7F                    5263 	.db #0x7f	; 127
      000021 5E                    5264 	.db #0x5e	; 94
      000022 1C                    5265 	.db #0x1c	; 28
      000023 00                    5266 	.db #0x00	; 0
      000024 18                    5267 	.db #0x18	; 24
      000025 3C                    5268 	.db #0x3c	; 60
      000026 18                    5269 	.db #0x18	; 24
      000027 00                    5270 	.db #0x00	; 0
      000028 FF                    5271 	.db #0xff	; 255
      000029 E7                    5272 	.db #0xe7	; 231
      00002A C3                    5273 	.db #0xc3	; 195
      00002B E7                    5274 	.db #0xe7	; 231
      00002C FF                    5275 	.db #0xff	; 255
      00002D 00                    5276 	.db #0x00	; 0
      00002E 18                    5277 	.db #0x18	; 24
      00002F 24                    5278 	.db #0x24	; 36
      000030 18                    5279 	.db #0x18	; 24
      000031 00                    5280 	.db #0x00	; 0
      000032 FF                    5281 	.db #0xff	; 255
      000033 E7                    5282 	.db #0xe7	; 231
      000034 DB                    5283 	.db #0xdb	; 219
      000035 E7                    5284 	.db #0xe7	; 231
      000036 FF                    5285 	.db #0xff	; 255
      000037 30                    5286 	.db #0x30	; 48	'0'
      000038 48                    5287 	.db #0x48	; 72	'H'
      000039 3A                    5288 	.db #0x3a	; 58
      00003A 06                    5289 	.db #0x06	; 6
      00003B 0E                    5290 	.db #0x0e	; 14
      00003C 26                    5291 	.db #0x26	; 38
      00003D 29                    5292 	.db #0x29	; 41
      00003E 79                    5293 	.db #0x79	; 121	'y'
      00003F 29                    5294 	.db #0x29	; 41
      000040 26                    5295 	.db #0x26	; 38
      000041 40                    5296 	.db #0x40	; 64
      000042 7F                    5297 	.db #0x7f	; 127
      000043 05                    5298 	.db #0x05	; 5
      000044 05                    5299 	.db #0x05	; 5
      000045 07                    5300 	.db #0x07	; 7
      000046 40                    5301 	.db #0x40	; 64
      000047 7F                    5302 	.db #0x7f	; 127
      000048 05                    5303 	.db #0x05	; 5
      000049 25                    5304 	.db #0x25	; 37
      00004A 3F                    5305 	.db #0x3f	; 63
      00004B 5A                    5306 	.db #0x5a	; 90	'Z'
      00004C 3C                    5307 	.db #0x3c	; 60
      00004D E7                    5308 	.db #0xe7	; 231
      00004E 3C                    5309 	.db #0x3c	; 60
      00004F 5A                    5310 	.db #0x5a	; 90	'Z'
      000050 7F                    5311 	.db #0x7f	; 127
      000051 3E                    5312 	.db #0x3e	; 62
      000052 1C                    5313 	.db #0x1c	; 28
      000053 1C                    5314 	.db #0x1c	; 28
      000054 08                    5315 	.db #0x08	; 8
      000055 08                    5316 	.db #0x08	; 8
      000056 1C                    5317 	.db #0x1c	; 28
      000057 1C                    5318 	.db #0x1c	; 28
      000058 3E                    5319 	.db #0x3e	; 62
      000059 7F                    5320 	.db #0x7f	; 127
      00005A 14                    5321 	.db #0x14	; 20
      00005B 22                    5322 	.db #0x22	; 34
      00005C 7F                    5323 	.db #0x7f	; 127
      00005D 22                    5324 	.db #0x22	; 34
      00005E 14                    5325 	.db #0x14	; 20
      00005F 5F                    5326 	.db #0x5f	; 95
      000060 5F                    5327 	.db #0x5f	; 95
      000061 00                    5328 	.db #0x00	; 0
      000062 5F                    5329 	.db #0x5f	; 95
      000063 5F                    5330 	.db #0x5f	; 95
      000064 06                    5331 	.db #0x06	; 6
      000065 09                    5332 	.db #0x09	; 9
      000066 7F                    5333 	.db #0x7f	; 127
      000067 01                    5334 	.db #0x01	; 1
      000068 7F                    5335 	.db #0x7f	; 127
      000069 00                    5336 	.db #0x00	; 0
      00006A 66                    5337 	.db #0x66	; 102	'f'
      00006B 89                    5338 	.db #0x89	; 137
      00006C 95                    5339 	.db #0x95	; 149
      00006D 6A                    5340 	.db #0x6a	; 106	'j'
      00006E 60                    5341 	.db #0x60	; 96
      00006F 60                    5342 	.db #0x60	; 96
      000070 60                    5343 	.db #0x60	; 96
      000071 60                    5344 	.db #0x60	; 96
      000072 60                    5345 	.db #0x60	; 96
      000073 94                    5346 	.db #0x94	; 148
      000074 A2                    5347 	.db #0xa2	; 162
      000075 FF                    5348 	.db #0xff	; 255
      000076 A2                    5349 	.db #0xa2	; 162
      000077 94                    5350 	.db #0x94	; 148
      000078 08                    5351 	.db #0x08	; 8
      000079 04                    5352 	.db #0x04	; 4
      00007A 7E                    5353 	.db #0x7e	; 126
      00007B 04                    5354 	.db #0x04	; 4
      00007C 08                    5355 	.db #0x08	; 8
      00007D 10                    5356 	.db #0x10	; 16
      00007E 20                    5357 	.db #0x20	; 32
      00007F 7E                    5358 	.db #0x7e	; 126
      000080 20                    5359 	.db #0x20	; 32
      000081 10                    5360 	.db #0x10	; 16
      000082 08                    5361 	.db #0x08	; 8
      000083 08                    5362 	.db #0x08	; 8
      000084 2A                    5363 	.db #0x2a	; 42
      000085 1C                    5364 	.db #0x1c	; 28
      000086 08                    5365 	.db #0x08	; 8
      000087 08                    5366 	.db #0x08	; 8
      000088 1C                    5367 	.db #0x1c	; 28
      000089 2A                    5368 	.db #0x2a	; 42
      00008A 08                    5369 	.db #0x08	; 8
      00008B 08                    5370 	.db #0x08	; 8
      00008C 1E                    5371 	.db #0x1e	; 30
      00008D 10                    5372 	.db #0x10	; 16
      00008E 10                    5373 	.db #0x10	; 16
      00008F 10                    5374 	.db #0x10	; 16
      000090 10                    5375 	.db #0x10	; 16
      000091 0C                    5376 	.db #0x0c	; 12
      000092 1E                    5377 	.db #0x1e	; 30
      000093 0C                    5378 	.db #0x0c	; 12
      000094 1E                    5379 	.db #0x1e	; 30
      000095 0C                    5380 	.db #0x0c	; 12
      000096 30                    5381 	.db #0x30	; 48	'0'
      000097 38                    5382 	.db #0x38	; 56	'8'
      000098 3E                    5383 	.db #0x3e	; 62
      000099 38                    5384 	.db #0x38	; 56	'8'
      00009A 30                    5385 	.db #0x30	; 48	'0'
      00009B 06                    5386 	.db #0x06	; 6
      00009C 0E                    5387 	.db #0x0e	; 14
      00009D 3E                    5388 	.db #0x3e	; 62
      00009E 0E                    5389 	.db #0x0e	; 14
      00009F 06                    5390 	.db #0x06	; 6
      0000A0 00                    5391 	.db #0x00	; 0
      0000A1 00                    5392 	.db #0x00	; 0
      0000A2 00                    5393 	.db #0x00	; 0
      0000A3 00                    5394 	.db #0x00	; 0
      0000A4 00                    5395 	.db #0x00	; 0
      0000A5 00                    5396 	.db #0x00	; 0
      0000A6 00                    5397 	.db #0x00	; 0
      0000A7 5F                    5398 	.db #0x5f	; 95
      0000A8 00                    5399 	.db #0x00	; 0
      0000A9 00                    5400 	.db #0x00	; 0
      0000AA 00                    5401 	.db #0x00	; 0
      0000AB 07                    5402 	.db #0x07	; 7
      0000AC 00                    5403 	.db #0x00	; 0
      0000AD 07                    5404 	.db #0x07	; 7
      0000AE 00                    5405 	.db #0x00	; 0
      0000AF 14                    5406 	.db #0x14	; 20
      0000B0 7F                    5407 	.db #0x7f	; 127
      0000B1 14                    5408 	.db #0x14	; 20
      0000B2 7F                    5409 	.db #0x7f	; 127
      0000B3 14                    5410 	.db #0x14	; 20
      0000B4 24                    5411 	.db #0x24	; 36
      0000B5 2A                    5412 	.db #0x2a	; 42
      0000B6 7F                    5413 	.db #0x7f	; 127
      0000B7 2A                    5414 	.db #0x2a	; 42
      0000B8 12                    5415 	.db #0x12	; 18
      0000B9 23                    5416 	.db #0x23	; 35
      0000BA 13                    5417 	.db #0x13	; 19
      0000BB 08                    5418 	.db #0x08	; 8
      0000BC 64                    5419 	.db #0x64	; 100	'd'
      0000BD 62                    5420 	.db #0x62	; 98	'b'
      0000BE 36                    5421 	.db #0x36	; 54	'6'
      0000BF 49                    5422 	.db #0x49	; 73	'I'
      0000C0 56                    5423 	.db #0x56	; 86	'V'
      0000C1 20                    5424 	.db #0x20	; 32
      0000C2 50                    5425 	.db #0x50	; 80	'P'
      0000C3 00                    5426 	.db #0x00	; 0
      0000C4 08                    5427 	.db #0x08	; 8
      0000C5 07                    5428 	.db #0x07	; 7
      0000C6 03                    5429 	.db #0x03	; 3
      0000C7 00                    5430 	.db #0x00	; 0
      0000C8 00                    5431 	.db #0x00	; 0
      0000C9 1C                    5432 	.db #0x1c	; 28
      0000CA 22                    5433 	.db #0x22	; 34
      0000CB 41                    5434 	.db #0x41	; 65	'A'
      0000CC 00                    5435 	.db #0x00	; 0
      0000CD 00                    5436 	.db #0x00	; 0
      0000CE 41                    5437 	.db #0x41	; 65	'A'
      0000CF 22                    5438 	.db #0x22	; 34
      0000D0 1C                    5439 	.db #0x1c	; 28
      0000D1 00                    5440 	.db #0x00	; 0
      0000D2 2A                    5441 	.db #0x2a	; 42
      0000D3 1C                    5442 	.db #0x1c	; 28
      0000D4 7F                    5443 	.db #0x7f	; 127
      0000D5 1C                    5444 	.db #0x1c	; 28
      0000D6 2A                    5445 	.db #0x2a	; 42
      0000D7 08                    5446 	.db #0x08	; 8
      0000D8 08                    5447 	.db #0x08	; 8
      0000D9 3E                    5448 	.db #0x3e	; 62
      0000DA 08                    5449 	.db #0x08	; 8
      0000DB 08                    5450 	.db #0x08	; 8
      0000DC 00                    5451 	.db #0x00	; 0
      0000DD 80                    5452 	.db #0x80	; 128
      0000DE 70                    5453 	.db #0x70	; 112	'p'
      0000DF 30                    5454 	.db #0x30	; 48	'0'
      0000E0 00                    5455 	.db #0x00	; 0
      0000E1 08                    5456 	.db #0x08	; 8
      0000E2 08                    5457 	.db #0x08	; 8
      0000E3 08                    5458 	.db #0x08	; 8
      0000E4 08                    5459 	.db #0x08	; 8
      0000E5 08                    5460 	.db #0x08	; 8
      0000E6 00                    5461 	.db #0x00	; 0
      0000E7 00                    5462 	.db #0x00	; 0
      0000E8 60                    5463 	.db #0x60	; 96
      0000E9 60                    5464 	.db #0x60	; 96
      0000EA 00                    5465 	.db #0x00	; 0
      0000EB 20                    5466 	.db #0x20	; 32
      0000EC 10                    5467 	.db #0x10	; 16
      0000ED 08                    5468 	.db #0x08	; 8
      0000EE 04                    5469 	.db #0x04	; 4
      0000EF 02                    5470 	.db #0x02	; 2
      0000F0 3E                    5471 	.db #0x3e	; 62
      0000F1 51                    5472 	.db #0x51	; 81	'Q'
      0000F2 49                    5473 	.db #0x49	; 73	'I'
      0000F3 45                    5474 	.db #0x45	; 69	'E'
      0000F4 3E                    5475 	.db #0x3e	; 62
      0000F5 00                    5476 	.db #0x00	; 0
      0000F6 42                    5477 	.db #0x42	; 66	'B'
      0000F7 7F                    5478 	.db #0x7f	; 127
      0000F8 40                    5479 	.db #0x40	; 64
      0000F9 00                    5480 	.db #0x00	; 0
      0000FA 72                    5481 	.db #0x72	; 114	'r'
      0000FB 49                    5482 	.db #0x49	; 73	'I'
      0000FC 49                    5483 	.db #0x49	; 73	'I'
      0000FD 49                    5484 	.db #0x49	; 73	'I'
      0000FE 46                    5485 	.db #0x46	; 70	'F'
      0000FF 21                    5486 	.db #0x21	; 33
      000100 41                    5487 	.db #0x41	; 65	'A'
      000101 49                    5488 	.db #0x49	; 73	'I'
      000102 4D                    5489 	.db #0x4d	; 77	'M'
      000103 33                    5490 	.db #0x33	; 51	'3'
      000104 18                    5491 	.db #0x18	; 24
      000105 14                    5492 	.db #0x14	; 20
      000106 12                    5493 	.db #0x12	; 18
      000107 7F                    5494 	.db #0x7f	; 127
      000108 10                    5495 	.db #0x10	; 16
      000109 27                    5496 	.db #0x27	; 39
      00010A 45                    5497 	.db #0x45	; 69	'E'
      00010B 45                    5498 	.db #0x45	; 69	'E'
      00010C 45                    5499 	.db #0x45	; 69	'E'
      00010D 39                    5500 	.db #0x39	; 57	'9'
      00010E 3C                    5501 	.db #0x3c	; 60
      00010F 4A                    5502 	.db #0x4a	; 74	'J'
      000110 49                    5503 	.db #0x49	; 73	'I'
      000111 49                    5504 	.db #0x49	; 73	'I'
      000112 31                    5505 	.db #0x31	; 49	'1'
      000113 41                    5506 	.db #0x41	; 65	'A'
      000114 21                    5507 	.db #0x21	; 33
      000115 11                    5508 	.db #0x11	; 17
      000116 09                    5509 	.db #0x09	; 9
      000117 07                    5510 	.db #0x07	; 7
      000118 36                    5511 	.db #0x36	; 54	'6'
      000119 49                    5512 	.db #0x49	; 73	'I'
      00011A 49                    5513 	.db #0x49	; 73	'I'
      00011B 49                    5514 	.db #0x49	; 73	'I'
      00011C 36                    5515 	.db #0x36	; 54	'6'
      00011D 46                    5516 	.db #0x46	; 70	'F'
      00011E 49                    5517 	.db #0x49	; 73	'I'
      00011F 49                    5518 	.db #0x49	; 73	'I'
      000120 29                    5519 	.db #0x29	; 41
      000121 1E                    5520 	.db #0x1e	; 30
      000122 00                    5521 	.db #0x00	; 0
      000123 00                    5522 	.db #0x00	; 0
      000124 14                    5523 	.db #0x14	; 20
      000125 00                    5524 	.db #0x00	; 0
      000126 00                    5525 	.db #0x00	; 0
      000127 00                    5526 	.db #0x00	; 0
      000128 40                    5527 	.db #0x40	; 64
      000129 34                    5528 	.db #0x34	; 52	'4'
      00012A 00                    5529 	.db #0x00	; 0
      00012B 00                    5530 	.db #0x00	; 0
      00012C 00                    5531 	.db #0x00	; 0
      00012D 08                    5532 	.db #0x08	; 8
      00012E 14                    5533 	.db #0x14	; 20
      00012F 22                    5534 	.db #0x22	; 34
      000130 41                    5535 	.db #0x41	; 65	'A'
      000131 14                    5536 	.db #0x14	; 20
      000132 14                    5537 	.db #0x14	; 20
      000133 14                    5538 	.db #0x14	; 20
      000134 14                    5539 	.db #0x14	; 20
      000135 14                    5540 	.db #0x14	; 20
      000136 00                    5541 	.db #0x00	; 0
      000137 41                    5542 	.db #0x41	; 65	'A'
      000138 22                    5543 	.db #0x22	; 34
      000139 14                    5544 	.db #0x14	; 20
      00013A 08                    5545 	.db #0x08	; 8
      00013B 02                    5546 	.db #0x02	; 2
      00013C 01                    5547 	.db #0x01	; 1
      00013D 59                    5548 	.db #0x59	; 89	'Y'
      00013E 09                    5549 	.db #0x09	; 9
      00013F 06                    5550 	.db #0x06	; 6
      000140 3E                    5551 	.db #0x3e	; 62
      000141 41                    5552 	.db #0x41	; 65	'A'
      000142 5D                    5553 	.db #0x5d	; 93
      000143 59                    5554 	.db #0x59	; 89	'Y'
      000144 4E                    5555 	.db #0x4e	; 78	'N'
      000145 7C                    5556 	.db #0x7c	; 124
      000146 12                    5557 	.db #0x12	; 18
      000147 11                    5558 	.db #0x11	; 17
      000148 12                    5559 	.db #0x12	; 18
      000149 7C                    5560 	.db #0x7c	; 124
      00014A 7F                    5561 	.db #0x7f	; 127
      00014B 49                    5562 	.db #0x49	; 73	'I'
      00014C 49                    5563 	.db #0x49	; 73	'I'
      00014D 49                    5564 	.db #0x49	; 73	'I'
      00014E 36                    5565 	.db #0x36	; 54	'6'
      00014F 3E                    5566 	.db #0x3e	; 62
      000150 41                    5567 	.db #0x41	; 65	'A'
      000151 41                    5568 	.db #0x41	; 65	'A'
      000152 41                    5569 	.db #0x41	; 65	'A'
      000153 22                    5570 	.db #0x22	; 34
      000154 7F                    5571 	.db #0x7f	; 127
      000155 41                    5572 	.db #0x41	; 65	'A'
      000156 41                    5573 	.db #0x41	; 65	'A'
      000157 41                    5574 	.db #0x41	; 65	'A'
      000158 3E                    5575 	.db #0x3e	; 62
      000159 7F                    5576 	.db #0x7f	; 127
      00015A 49                    5577 	.db #0x49	; 73	'I'
      00015B 49                    5578 	.db #0x49	; 73	'I'
      00015C 49                    5579 	.db #0x49	; 73	'I'
      00015D 41                    5580 	.db #0x41	; 65	'A'
      00015E 7F                    5581 	.db #0x7f	; 127
      00015F 09                    5582 	.db #0x09	; 9
      000160 09                    5583 	.db #0x09	; 9
      000161 09                    5584 	.db #0x09	; 9
      000162 01                    5585 	.db #0x01	; 1
      000163 3E                    5586 	.db #0x3e	; 62
      000164 41                    5587 	.db #0x41	; 65	'A'
      000165 41                    5588 	.db #0x41	; 65	'A'
      000166 51                    5589 	.db #0x51	; 81	'Q'
      000167 73                    5590 	.db #0x73	; 115	's'
      000168 7F                    5591 	.db #0x7f	; 127
      000169 08                    5592 	.db #0x08	; 8
      00016A 08                    5593 	.db #0x08	; 8
      00016B 08                    5594 	.db #0x08	; 8
      00016C 7F                    5595 	.db #0x7f	; 127
      00016D 00                    5596 	.db #0x00	; 0
      00016E 41                    5597 	.db #0x41	; 65	'A'
      00016F 7F                    5598 	.db #0x7f	; 127
      000170 41                    5599 	.db #0x41	; 65	'A'
      000171 00                    5600 	.db #0x00	; 0
      000172 20                    5601 	.db #0x20	; 32
      000173 40                    5602 	.db #0x40	; 64
      000174 41                    5603 	.db #0x41	; 65	'A'
      000175 3F                    5604 	.db #0x3f	; 63
      000176 01                    5605 	.db #0x01	; 1
      000177 7F                    5606 	.db #0x7f	; 127
      000178 08                    5607 	.db #0x08	; 8
      000179 14                    5608 	.db #0x14	; 20
      00017A 22                    5609 	.db #0x22	; 34
      00017B 41                    5610 	.db #0x41	; 65	'A'
      00017C 7F                    5611 	.db #0x7f	; 127
      00017D 40                    5612 	.db #0x40	; 64
      00017E 40                    5613 	.db #0x40	; 64
      00017F 40                    5614 	.db #0x40	; 64
      000180 40                    5615 	.db #0x40	; 64
      000181 7F                    5616 	.db #0x7f	; 127
      000182 02                    5617 	.db #0x02	; 2
      000183 1C                    5618 	.db #0x1c	; 28
      000184 02                    5619 	.db #0x02	; 2
      000185 7F                    5620 	.db #0x7f	; 127
      000186 7F                    5621 	.db #0x7f	; 127
      000187 04                    5622 	.db #0x04	; 4
      000188 08                    5623 	.db #0x08	; 8
      000189 10                    5624 	.db #0x10	; 16
      00018A 7F                    5625 	.db #0x7f	; 127
      00018B 3E                    5626 	.db #0x3e	; 62
      00018C 41                    5627 	.db #0x41	; 65	'A'
      00018D 41                    5628 	.db #0x41	; 65	'A'
      00018E 41                    5629 	.db #0x41	; 65	'A'
      00018F 3E                    5630 	.db #0x3e	; 62
      000190 7F                    5631 	.db #0x7f	; 127
      000191 09                    5632 	.db #0x09	; 9
      000192 09                    5633 	.db #0x09	; 9
      000193 09                    5634 	.db #0x09	; 9
      000194 06                    5635 	.db #0x06	; 6
      000195 3E                    5636 	.db #0x3e	; 62
      000196 41                    5637 	.db #0x41	; 65	'A'
      000197 51                    5638 	.db #0x51	; 81	'Q'
      000198 21                    5639 	.db #0x21	; 33
      000199 5E                    5640 	.db #0x5e	; 94
      00019A 7F                    5641 	.db #0x7f	; 127
      00019B 09                    5642 	.db #0x09	; 9
      00019C 19                    5643 	.db #0x19	; 25
      00019D 29                    5644 	.db #0x29	; 41
      00019E 46                    5645 	.db #0x46	; 70	'F'
      00019F 26                    5646 	.db #0x26	; 38
      0001A0 49                    5647 	.db #0x49	; 73	'I'
      0001A1 49                    5648 	.db #0x49	; 73	'I'
      0001A2 49                    5649 	.db #0x49	; 73	'I'
      0001A3 32                    5650 	.db #0x32	; 50	'2'
      0001A4 03                    5651 	.db #0x03	; 3
      0001A5 01                    5652 	.db #0x01	; 1
      0001A6 7F                    5653 	.db #0x7f	; 127
      0001A7 01                    5654 	.db #0x01	; 1
      0001A8 03                    5655 	.db #0x03	; 3
      0001A9 3F                    5656 	.db #0x3f	; 63
      0001AA 40                    5657 	.db #0x40	; 64
      0001AB 40                    5658 	.db #0x40	; 64
      0001AC 40                    5659 	.db #0x40	; 64
      0001AD 3F                    5660 	.db #0x3f	; 63
      0001AE 1F                    5661 	.db #0x1f	; 31
      0001AF 20                    5662 	.db #0x20	; 32
      0001B0 40                    5663 	.db #0x40	; 64
      0001B1 20                    5664 	.db #0x20	; 32
      0001B2 1F                    5665 	.db #0x1f	; 31
      0001B3 3F                    5666 	.db #0x3f	; 63
      0001B4 40                    5667 	.db #0x40	; 64
      0001B5 38                    5668 	.db #0x38	; 56	'8'
      0001B6 40                    5669 	.db #0x40	; 64
      0001B7 3F                    5670 	.db #0x3f	; 63
      0001B8 63                    5671 	.db #0x63	; 99	'c'
      0001B9 14                    5672 	.db #0x14	; 20
      0001BA 08                    5673 	.db #0x08	; 8
      0001BB 14                    5674 	.db #0x14	; 20
      0001BC 63                    5675 	.db #0x63	; 99	'c'
      0001BD 03                    5676 	.db #0x03	; 3
      0001BE 04                    5677 	.db #0x04	; 4
      0001BF 78                    5678 	.db #0x78	; 120	'x'
      0001C0 04                    5679 	.db #0x04	; 4
      0001C1 03                    5680 	.db #0x03	; 3
      0001C2 61                    5681 	.db #0x61	; 97	'a'
      0001C3 59                    5682 	.db #0x59	; 89	'Y'
      0001C4 49                    5683 	.db #0x49	; 73	'I'
      0001C5 4D                    5684 	.db #0x4d	; 77	'M'
      0001C6 43                    5685 	.db #0x43	; 67	'C'
      0001C7 00                    5686 	.db #0x00	; 0
      0001C8 7F                    5687 	.db #0x7f	; 127
      0001C9 41                    5688 	.db #0x41	; 65	'A'
      0001CA 41                    5689 	.db #0x41	; 65	'A'
      0001CB 41                    5690 	.db #0x41	; 65	'A'
      0001CC 02                    5691 	.db #0x02	; 2
      0001CD 04                    5692 	.db #0x04	; 4
      0001CE 08                    5693 	.db #0x08	; 8
      0001CF 10                    5694 	.db #0x10	; 16
      0001D0 20                    5695 	.db #0x20	; 32
      0001D1 00                    5696 	.db #0x00	; 0
      0001D2 41                    5697 	.db #0x41	; 65	'A'
      0001D3 41                    5698 	.db #0x41	; 65	'A'
      0001D4 41                    5699 	.db #0x41	; 65	'A'
      0001D5 7F                    5700 	.db #0x7f	; 127
      0001D6 04                    5701 	.db #0x04	; 4
      0001D7 02                    5702 	.db #0x02	; 2
      0001D8 01                    5703 	.db #0x01	; 1
      0001D9 02                    5704 	.db #0x02	; 2
      0001DA 04                    5705 	.db #0x04	; 4
      0001DB 40                    5706 	.db #0x40	; 64
      0001DC 40                    5707 	.db #0x40	; 64
      0001DD 40                    5708 	.db #0x40	; 64
      0001DE 40                    5709 	.db #0x40	; 64
      0001DF 40                    5710 	.db #0x40	; 64
      0001E0 00                    5711 	.db #0x00	; 0
      0001E1 03                    5712 	.db #0x03	; 3
      0001E2 07                    5713 	.db #0x07	; 7
      0001E3 08                    5714 	.db #0x08	; 8
      0001E4 00                    5715 	.db #0x00	; 0
      0001E5 20                    5716 	.db #0x20	; 32
      0001E6 54                    5717 	.db #0x54	; 84	'T'
      0001E7 54                    5718 	.db #0x54	; 84	'T'
      0001E8 78                    5719 	.db #0x78	; 120	'x'
      0001E9 40                    5720 	.db #0x40	; 64
      0001EA 7F                    5721 	.db #0x7f	; 127
      0001EB 28                    5722 	.db #0x28	; 40
      0001EC 44                    5723 	.db #0x44	; 68	'D'
      0001ED 44                    5724 	.db #0x44	; 68	'D'
      0001EE 38                    5725 	.db #0x38	; 56	'8'
      0001EF 38                    5726 	.db #0x38	; 56	'8'
      0001F0 44                    5727 	.db #0x44	; 68	'D'
      0001F1 44                    5728 	.db #0x44	; 68	'D'
      0001F2 44                    5729 	.db #0x44	; 68	'D'
      0001F3 28                    5730 	.db #0x28	; 40
      0001F4 38                    5731 	.db #0x38	; 56	'8'
      0001F5 44                    5732 	.db #0x44	; 68	'D'
      0001F6 44                    5733 	.db #0x44	; 68	'D'
      0001F7 28                    5734 	.db #0x28	; 40
      0001F8 7F                    5735 	.db #0x7f	; 127
      0001F9 38                    5736 	.db #0x38	; 56	'8'
      0001FA 54                    5737 	.db #0x54	; 84	'T'
      0001FB 54                    5738 	.db #0x54	; 84	'T'
      0001FC 54                    5739 	.db #0x54	; 84	'T'
      0001FD 18                    5740 	.db #0x18	; 24
      0001FE 00                    5741 	.db #0x00	; 0
      0001FF 08                    5742 	.db #0x08	; 8
      000200 7E                    5743 	.db #0x7e	; 126
      000201 09                    5744 	.db #0x09	; 9
      000202 02                    5745 	.db #0x02	; 2
      000203 18                    5746 	.db #0x18	; 24
      000204 A4                    5747 	.db #0xa4	; 164
      000205 A4                    5748 	.db #0xa4	; 164
      000206 9C                    5749 	.db #0x9c	; 156
      000207 78                    5750 	.db #0x78	; 120	'x'
      000208 7F                    5751 	.db #0x7f	; 127
      000209 08                    5752 	.db #0x08	; 8
      00020A 04                    5753 	.db #0x04	; 4
      00020B 04                    5754 	.db #0x04	; 4
      00020C 78                    5755 	.db #0x78	; 120	'x'
      00020D 00                    5756 	.db #0x00	; 0
      00020E 44                    5757 	.db #0x44	; 68	'D'
      00020F 7D                    5758 	.db #0x7d	; 125
      000210 40                    5759 	.db #0x40	; 64
      000211 00                    5760 	.db #0x00	; 0
      000212 20                    5761 	.db #0x20	; 32
      000213 40                    5762 	.db #0x40	; 64
      000214 40                    5763 	.db #0x40	; 64
      000215 3D                    5764 	.db #0x3d	; 61
      000216 00                    5765 	.db #0x00	; 0
      000217 7F                    5766 	.db #0x7f	; 127
      000218 10                    5767 	.db #0x10	; 16
      000219 28                    5768 	.db #0x28	; 40
      00021A 44                    5769 	.db #0x44	; 68	'D'
      00021B 00                    5770 	.db #0x00	; 0
      00021C 00                    5771 	.db #0x00	; 0
      00021D 41                    5772 	.db #0x41	; 65	'A'
      00021E 7F                    5773 	.db #0x7f	; 127
      00021F 40                    5774 	.db #0x40	; 64
      000220 00                    5775 	.db #0x00	; 0
      000221 7C                    5776 	.db #0x7c	; 124
      000222 04                    5777 	.db #0x04	; 4
      000223 78                    5778 	.db #0x78	; 120	'x'
      000224 04                    5779 	.db #0x04	; 4
      000225 78                    5780 	.db #0x78	; 120	'x'
      000226 7C                    5781 	.db #0x7c	; 124
      000227 08                    5782 	.db #0x08	; 8
      000228 04                    5783 	.db #0x04	; 4
      000229 04                    5784 	.db #0x04	; 4
      00022A 78                    5785 	.db #0x78	; 120	'x'
      00022B 38                    5786 	.db #0x38	; 56	'8'
      00022C 44                    5787 	.db #0x44	; 68	'D'
      00022D 44                    5788 	.db #0x44	; 68	'D'
      00022E 44                    5789 	.db #0x44	; 68	'D'
      00022F 38                    5790 	.db #0x38	; 56	'8'
      000230 FC                    5791 	.db #0xfc	; 252
      000231 18                    5792 	.db #0x18	; 24
      000232 24                    5793 	.db #0x24	; 36
      000233 24                    5794 	.db #0x24	; 36
      000234 18                    5795 	.db #0x18	; 24
      000235 18                    5796 	.db #0x18	; 24
      000236 24                    5797 	.db #0x24	; 36
      000237 24                    5798 	.db #0x24	; 36
      000238 18                    5799 	.db #0x18	; 24
      000239 FC                    5800 	.db #0xfc	; 252
      00023A 7C                    5801 	.db #0x7c	; 124
      00023B 08                    5802 	.db #0x08	; 8
      00023C 04                    5803 	.db #0x04	; 4
      00023D 04                    5804 	.db #0x04	; 4
      00023E 08                    5805 	.db #0x08	; 8
      00023F 48                    5806 	.db #0x48	; 72	'H'
      000240 54                    5807 	.db #0x54	; 84	'T'
      000241 54                    5808 	.db #0x54	; 84	'T'
      000242 54                    5809 	.db #0x54	; 84	'T'
      000243 24                    5810 	.db #0x24	; 36
      000244 04                    5811 	.db #0x04	; 4
      000245 04                    5812 	.db #0x04	; 4
      000246 3F                    5813 	.db #0x3f	; 63
      000247 44                    5814 	.db #0x44	; 68	'D'
      000248 24                    5815 	.db #0x24	; 36
      000249 3C                    5816 	.db #0x3c	; 60
      00024A 40                    5817 	.db #0x40	; 64
      00024B 40                    5818 	.db #0x40	; 64
      00024C 20                    5819 	.db #0x20	; 32
      00024D 7C                    5820 	.db #0x7c	; 124
      00024E 1C                    5821 	.db #0x1c	; 28
      00024F 20                    5822 	.db #0x20	; 32
      000250 40                    5823 	.db #0x40	; 64
      000251 20                    5824 	.db #0x20	; 32
      000252 1C                    5825 	.db #0x1c	; 28
      000253 3C                    5826 	.db #0x3c	; 60
      000254 40                    5827 	.db #0x40	; 64
      000255 30                    5828 	.db #0x30	; 48	'0'
      000256 40                    5829 	.db #0x40	; 64
      000257 3C                    5830 	.db #0x3c	; 60
      000258 44                    5831 	.db #0x44	; 68	'D'
      000259 28                    5832 	.db #0x28	; 40
      00025A 10                    5833 	.db #0x10	; 16
      00025B 28                    5834 	.db #0x28	; 40
      00025C 44                    5835 	.db #0x44	; 68	'D'
      00025D 4C                    5836 	.db #0x4c	; 76	'L'
      00025E 90                    5837 	.db #0x90	; 144
      00025F 90                    5838 	.db #0x90	; 144
      000260 90                    5839 	.db #0x90	; 144
      000261 7C                    5840 	.db #0x7c	; 124
      000262 44                    5841 	.db #0x44	; 68	'D'
      000263 64                    5842 	.db #0x64	; 100	'd'
      000264 54                    5843 	.db #0x54	; 84	'T'
      000265 4C                    5844 	.db #0x4c	; 76	'L'
      000266 44                    5845 	.db #0x44	; 68	'D'
      000267 00                    5846 	.db #0x00	; 0
      000268 08                    5847 	.db #0x08	; 8
      000269 36                    5848 	.db #0x36	; 54	'6'
      00026A 41                    5849 	.db #0x41	; 65	'A'
      00026B 00                    5850 	.db #0x00	; 0
      00026C 00                    5851 	.db #0x00	; 0
      00026D 00                    5852 	.db #0x00	; 0
      00026E 77                    5853 	.db #0x77	; 119	'w'
      00026F 00                    5854 	.db #0x00	; 0
      000270 00                    5855 	.db #0x00	; 0
      000271 00                    5856 	.db #0x00	; 0
      000272 41                    5857 	.db #0x41	; 65	'A'
      000273 36                    5858 	.db #0x36	; 54	'6'
      000274 08                    5859 	.db #0x08	; 8
      000275 00                    5860 	.db #0x00	; 0
      000276 02                    5861 	.db #0x02	; 2
      000277 01                    5862 	.db #0x01	; 1
      000278 02                    5863 	.db #0x02	; 2
      000279 04                    5864 	.db #0x04	; 4
      00027A 02                    5865 	.db #0x02	; 2
      00027B 3C                    5866 	.db #0x3c	; 60
      00027C 26                    5867 	.db #0x26	; 38
      00027D 23                    5868 	.db #0x23	; 35
      00027E 26                    5869 	.db #0x26	; 38
      00027F 3C                    5870 	.db #0x3c	; 60
      000280 1E                    5871 	.db #0x1e	; 30
      000281 A1                    5872 	.db #0xa1	; 161
      000282 A1                    5873 	.db #0xa1	; 161
      000283 61                    5874 	.db #0x61	; 97	'a'
      000284 12                    5875 	.db #0x12	; 18
      000285 3A                    5876 	.db #0x3a	; 58
      000286 40                    5877 	.db #0x40	; 64
      000287 40                    5878 	.db #0x40	; 64
      000288 20                    5879 	.db #0x20	; 32
      000289 7A                    5880 	.db #0x7a	; 122	'z'
      00028A 38                    5881 	.db #0x38	; 56	'8'
      00028B 54                    5882 	.db #0x54	; 84	'T'
      00028C 54                    5883 	.db #0x54	; 84	'T'
      00028D 55                    5884 	.db #0x55	; 85	'U'
      00028E 59                    5885 	.db #0x59	; 89	'Y'
      00028F 21                    5886 	.db #0x21	; 33
      000290 55                    5887 	.db #0x55	; 85	'U'
      000291 55                    5888 	.db #0x55	; 85	'U'
      000292 79                    5889 	.db #0x79	; 121	'y'
      000293 41                    5890 	.db #0x41	; 65	'A'
      000294 22                    5891 	.db #0x22	; 34
      000295 54                    5892 	.db #0x54	; 84	'T'
      000296 54                    5893 	.db #0x54	; 84	'T'
      000297 78                    5894 	.db #0x78	; 120	'x'
      000298 42                    5895 	.db #0x42	; 66	'B'
      000299 21                    5896 	.db #0x21	; 33
      00029A 55                    5897 	.db #0x55	; 85	'U'
      00029B 54                    5898 	.db #0x54	; 84	'T'
      00029C 78                    5899 	.db #0x78	; 120	'x'
      00029D 40                    5900 	.db #0x40	; 64
      00029E 20                    5901 	.db #0x20	; 32
      00029F 54                    5902 	.db #0x54	; 84	'T'
      0002A0 55                    5903 	.db #0x55	; 85	'U'
      0002A1 79                    5904 	.db #0x79	; 121	'y'
      0002A2 40                    5905 	.db #0x40	; 64
      0002A3 0C                    5906 	.db #0x0c	; 12
      0002A4 1E                    5907 	.db #0x1e	; 30
      0002A5 52                    5908 	.db #0x52	; 82	'R'
      0002A6 72                    5909 	.db #0x72	; 114	'r'
      0002A7 12                    5910 	.db #0x12	; 18
      0002A8 39                    5911 	.db #0x39	; 57	'9'
      0002A9 55                    5912 	.db #0x55	; 85	'U'
      0002AA 55                    5913 	.db #0x55	; 85	'U'
      0002AB 55                    5914 	.db #0x55	; 85	'U'
      0002AC 59                    5915 	.db #0x59	; 89	'Y'
      0002AD 39                    5916 	.db #0x39	; 57	'9'
      0002AE 54                    5917 	.db #0x54	; 84	'T'
      0002AF 54                    5918 	.db #0x54	; 84	'T'
      0002B0 54                    5919 	.db #0x54	; 84	'T'
      0002B1 59                    5920 	.db #0x59	; 89	'Y'
      0002B2 39                    5921 	.db #0x39	; 57	'9'
      0002B3 55                    5922 	.db #0x55	; 85	'U'
      0002B4 54                    5923 	.db #0x54	; 84	'T'
      0002B5 54                    5924 	.db #0x54	; 84	'T'
      0002B6 58                    5925 	.db #0x58	; 88	'X'
      0002B7 00                    5926 	.db #0x00	; 0
      0002B8 00                    5927 	.db #0x00	; 0
      0002B9 45                    5928 	.db #0x45	; 69	'E'
      0002BA 7C                    5929 	.db #0x7c	; 124
      0002BB 41                    5930 	.db #0x41	; 65	'A'
      0002BC 00                    5931 	.db #0x00	; 0
      0002BD 02                    5932 	.db #0x02	; 2
      0002BE 45                    5933 	.db #0x45	; 69	'E'
      0002BF 7D                    5934 	.db #0x7d	; 125
      0002C0 42                    5935 	.db #0x42	; 66	'B'
      0002C1 00                    5936 	.db #0x00	; 0
      0002C2 01                    5937 	.db #0x01	; 1
      0002C3 45                    5938 	.db #0x45	; 69	'E'
      0002C4 7C                    5939 	.db #0x7c	; 124
      0002C5 40                    5940 	.db #0x40	; 64
      0002C6 7D                    5941 	.db #0x7d	; 125
      0002C7 12                    5942 	.db #0x12	; 18
      0002C8 11                    5943 	.db #0x11	; 17
      0002C9 12                    5944 	.db #0x12	; 18
      0002CA 7D                    5945 	.db #0x7d	; 125
      0002CB F0                    5946 	.db #0xf0	; 240
      0002CC 28                    5947 	.db #0x28	; 40
      0002CD 25                    5948 	.db #0x25	; 37
      0002CE 28                    5949 	.db #0x28	; 40
      0002CF F0                    5950 	.db #0xf0	; 240
      0002D0 7C                    5951 	.db #0x7c	; 124
      0002D1 54                    5952 	.db #0x54	; 84	'T'
      0002D2 55                    5953 	.db #0x55	; 85	'U'
      0002D3 45                    5954 	.db #0x45	; 69	'E'
      0002D4 00                    5955 	.db #0x00	; 0
      0002D5 20                    5956 	.db #0x20	; 32
      0002D6 54                    5957 	.db #0x54	; 84	'T'
      0002D7 54                    5958 	.db #0x54	; 84	'T'
      0002D8 7C                    5959 	.db #0x7c	; 124
      0002D9 54                    5960 	.db #0x54	; 84	'T'
      0002DA 7C                    5961 	.db #0x7c	; 124
      0002DB 0A                    5962 	.db #0x0a	; 10
      0002DC 09                    5963 	.db #0x09	; 9
      0002DD 7F                    5964 	.db #0x7f	; 127
      0002DE 49                    5965 	.db #0x49	; 73	'I'
      0002DF 32                    5966 	.db #0x32	; 50	'2'
      0002E0 49                    5967 	.db #0x49	; 73	'I'
      0002E1 49                    5968 	.db #0x49	; 73	'I'
      0002E2 49                    5969 	.db #0x49	; 73	'I'
      0002E3 32                    5970 	.db #0x32	; 50	'2'
      0002E4 3A                    5971 	.db #0x3a	; 58
      0002E5 44                    5972 	.db #0x44	; 68	'D'
      0002E6 44                    5973 	.db #0x44	; 68	'D'
      0002E7 44                    5974 	.db #0x44	; 68	'D'
      0002E8 3A                    5975 	.db #0x3a	; 58
      0002E9 32                    5976 	.db #0x32	; 50	'2'
      0002EA 4A                    5977 	.db #0x4a	; 74	'J'
      0002EB 48                    5978 	.db #0x48	; 72	'H'
      0002EC 48                    5979 	.db #0x48	; 72	'H'
      0002ED 30                    5980 	.db #0x30	; 48	'0'
      0002EE 3A                    5981 	.db #0x3a	; 58
      0002EF 41                    5982 	.db #0x41	; 65	'A'
      0002F0 41                    5983 	.db #0x41	; 65	'A'
      0002F1 21                    5984 	.db #0x21	; 33
      0002F2 7A                    5985 	.db #0x7a	; 122	'z'
      0002F3 3A                    5986 	.db #0x3a	; 58
      0002F4 42                    5987 	.db #0x42	; 66	'B'
      0002F5 40                    5988 	.db #0x40	; 64
      0002F6 20                    5989 	.db #0x20	; 32
      0002F7 78                    5990 	.db #0x78	; 120	'x'
      0002F8 00                    5991 	.db #0x00	; 0
      0002F9 9D                    5992 	.db #0x9d	; 157
      0002FA A0                    5993 	.db #0xa0	; 160
      0002FB A0                    5994 	.db #0xa0	; 160
      0002FC 7D                    5995 	.db #0x7d	; 125
      0002FD 3D                    5996 	.db #0x3d	; 61
      0002FE 42                    5997 	.db #0x42	; 66	'B'
      0002FF 42                    5998 	.db #0x42	; 66	'B'
      000300 42                    5999 	.db #0x42	; 66	'B'
      000301 3D                    6000 	.db #0x3d	; 61
      000302 3D                    6001 	.db #0x3d	; 61
      000303 40                    6002 	.db #0x40	; 64
      000304 40                    6003 	.db #0x40	; 64
      000305 40                    6004 	.db #0x40	; 64
      000306 3D                    6005 	.db #0x3d	; 61
      000307 3C                    6006 	.db #0x3c	; 60
      000308 24                    6007 	.db #0x24	; 36
      000309 FF                    6008 	.db #0xff	; 255
      00030A 24                    6009 	.db #0x24	; 36
      00030B 24                    6010 	.db #0x24	; 36
      00030C 48                    6011 	.db #0x48	; 72	'H'
      00030D 7E                    6012 	.db #0x7e	; 126
      00030E 49                    6013 	.db #0x49	; 73	'I'
      00030F 43                    6014 	.db #0x43	; 67	'C'
      000310 66                    6015 	.db #0x66	; 102	'f'
      000311 2B                    6016 	.db #0x2b	; 43
      000312 2F                    6017 	.db #0x2f	; 47
      000313 FC                    6018 	.db #0xfc	; 252
      000314 2F                    6019 	.db #0x2f	; 47
      000315 2B                    6020 	.db #0x2b	; 43
      000316 FF                    6021 	.db #0xff	; 255
      000317 09                    6022 	.db #0x09	; 9
      000318 29                    6023 	.db #0x29	; 41
      000319 F6                    6024 	.db #0xf6	; 246
      00031A 20                    6025 	.db #0x20	; 32
      00031B C0                    6026 	.db #0xc0	; 192
      00031C 88                    6027 	.db #0x88	; 136
      00031D 7E                    6028 	.db #0x7e	; 126
      00031E 09                    6029 	.db #0x09	; 9
      00031F 03                    6030 	.db #0x03	; 3
      000320 20                    6031 	.db #0x20	; 32
      000321 54                    6032 	.db #0x54	; 84	'T'
      000322 54                    6033 	.db #0x54	; 84	'T'
      000323 79                    6034 	.db #0x79	; 121	'y'
      000324 41                    6035 	.db #0x41	; 65	'A'
      000325 00                    6036 	.db #0x00	; 0
      000326 00                    6037 	.db #0x00	; 0
      000327 44                    6038 	.db #0x44	; 68	'D'
      000328 7D                    6039 	.db #0x7d	; 125
      000329 41                    6040 	.db #0x41	; 65	'A'
      00032A 30                    6041 	.db #0x30	; 48	'0'
      00032B 48                    6042 	.db #0x48	; 72	'H'
      00032C 48                    6043 	.db #0x48	; 72	'H'
      00032D 4A                    6044 	.db #0x4a	; 74	'J'
      00032E 32                    6045 	.db #0x32	; 50	'2'
      00032F 38                    6046 	.db #0x38	; 56	'8'
      000330 40                    6047 	.db #0x40	; 64
      000331 40                    6048 	.db #0x40	; 64
      000332 22                    6049 	.db #0x22	; 34
      000333 7A                    6050 	.db #0x7a	; 122	'z'
      000334 00                    6051 	.db #0x00	; 0
      000335 7A                    6052 	.db #0x7a	; 122	'z'
      000336 0A                    6053 	.db #0x0a	; 10
      000337 0A                    6054 	.db #0x0a	; 10
      000338 72                    6055 	.db #0x72	; 114	'r'
      000339 7D                    6056 	.db #0x7d	; 125
      00033A 0D                    6057 	.db #0x0d	; 13
      00033B 19                    6058 	.db #0x19	; 25
      00033C 31                    6059 	.db #0x31	; 49	'1'
      00033D 7D                    6060 	.db #0x7d	; 125
      00033E 26                    6061 	.db #0x26	; 38
      00033F 29                    6062 	.db #0x29	; 41
      000340 29                    6063 	.db #0x29	; 41
      000341 2F                    6064 	.db #0x2f	; 47
      000342 28                    6065 	.db #0x28	; 40
      000343 26                    6066 	.db #0x26	; 38
      000344 29                    6067 	.db #0x29	; 41
      000345 29                    6068 	.db #0x29	; 41
      000346 29                    6069 	.db #0x29	; 41
      000347 26                    6070 	.db #0x26	; 38
      000348 30                    6071 	.db #0x30	; 48	'0'
      000349 48                    6072 	.db #0x48	; 72	'H'
      00034A 4D                    6073 	.db #0x4d	; 77	'M'
      00034B 40                    6074 	.db #0x40	; 64
      00034C 20                    6075 	.db #0x20	; 32
      00034D 38                    6076 	.db #0x38	; 56	'8'
      00034E 08                    6077 	.db #0x08	; 8
      00034F 08                    6078 	.db #0x08	; 8
      000350 08                    6079 	.db #0x08	; 8
      000351 08                    6080 	.db #0x08	; 8
      000352 08                    6081 	.db #0x08	; 8
      000353 08                    6082 	.db #0x08	; 8
      000354 08                    6083 	.db #0x08	; 8
      000355 08                    6084 	.db #0x08	; 8
      000356 38                    6085 	.db #0x38	; 56	'8'
      000357 2F                    6086 	.db #0x2f	; 47
      000358 10                    6087 	.db #0x10	; 16
      000359 C8                    6088 	.db #0xc8	; 200
      00035A AC                    6089 	.db #0xac	; 172
      00035B BA                    6090 	.db #0xba	; 186
      00035C 2F                    6091 	.db #0x2f	; 47
      00035D 10                    6092 	.db #0x10	; 16
      00035E 28                    6093 	.db #0x28	; 40
      00035F 34                    6094 	.db #0x34	; 52	'4'
      000360 FA                    6095 	.db #0xfa	; 250
      000361 00                    6096 	.db #0x00	; 0
      000362 00                    6097 	.db #0x00	; 0
      000363 7B                    6098 	.db #0x7b	; 123
      000364 00                    6099 	.db #0x00	; 0
      000365 00                    6100 	.db #0x00	; 0
      000366 08                    6101 	.db #0x08	; 8
      000367 14                    6102 	.db #0x14	; 20
      000368 2A                    6103 	.db #0x2a	; 42
      000369 14                    6104 	.db #0x14	; 20
      00036A 22                    6105 	.db #0x22	; 34
      00036B 22                    6106 	.db #0x22	; 34
      00036C 14                    6107 	.db #0x14	; 20
      00036D 2A                    6108 	.db #0x2a	; 42
      00036E 14                    6109 	.db #0x14	; 20
      00036F 08                    6110 	.db #0x08	; 8
      000370 AA                    6111 	.db #0xaa	; 170
      000371 00                    6112 	.db #0x00	; 0
      000372 55                    6113 	.db #0x55	; 85	'U'
      000373 00                    6114 	.db #0x00	; 0
      000374 AA                    6115 	.db #0xaa	; 170
      000375 AA                    6116 	.db #0xaa	; 170
      000376 55                    6117 	.db #0x55	; 85	'U'
      000377 AA                    6118 	.db #0xaa	; 170
      000378 55                    6119 	.db #0x55	; 85	'U'
      000379 AA                    6120 	.db #0xaa	; 170
      00037A 00                    6121 	.db #0x00	; 0
      00037B 00                    6122 	.db #0x00	; 0
      00037C 00                    6123 	.db #0x00	; 0
      00037D FF                    6124 	.db #0xff	; 255
      00037E 00                    6125 	.db #0x00	; 0
      00037F 10                    6126 	.db #0x10	; 16
      000380 10                    6127 	.db #0x10	; 16
      000381 10                    6128 	.db #0x10	; 16
      000382 FF                    6129 	.db #0xff	; 255
      000383 00                    6130 	.db #0x00	; 0
      000384 14                    6131 	.db #0x14	; 20
      000385 14                    6132 	.db #0x14	; 20
      000386 14                    6133 	.db #0x14	; 20
      000387 FF                    6134 	.db #0xff	; 255
      000388 00                    6135 	.db #0x00	; 0
      000389 10                    6136 	.db #0x10	; 16
      00038A 10                    6137 	.db #0x10	; 16
      00038B FF                    6138 	.db #0xff	; 255
      00038C 00                    6139 	.db #0x00	; 0
      00038D FF                    6140 	.db #0xff	; 255
      00038E 10                    6141 	.db #0x10	; 16
      00038F 10                    6142 	.db #0x10	; 16
      000390 F0                    6143 	.db #0xf0	; 240
      000391 10                    6144 	.db #0x10	; 16
      000392 F0                    6145 	.db #0xf0	; 240
      000393 14                    6146 	.db #0x14	; 20
      000394 14                    6147 	.db #0x14	; 20
      000395 14                    6148 	.db #0x14	; 20
      000396 FC                    6149 	.db #0xfc	; 252
      000397 00                    6150 	.db #0x00	; 0
      000398 14                    6151 	.db #0x14	; 20
      000399 14                    6152 	.db #0x14	; 20
      00039A F7                    6153 	.db #0xf7	; 247
      00039B 00                    6154 	.db #0x00	; 0
      00039C FF                    6155 	.db #0xff	; 255
      00039D 00                    6156 	.db #0x00	; 0
      00039E 00                    6157 	.db #0x00	; 0
      00039F FF                    6158 	.db #0xff	; 255
      0003A0 00                    6159 	.db #0x00	; 0
      0003A1 FF                    6160 	.db #0xff	; 255
      0003A2 14                    6161 	.db #0x14	; 20
      0003A3 14                    6162 	.db #0x14	; 20
      0003A4 F4                    6163 	.db #0xf4	; 244
      0003A5 04                    6164 	.db #0x04	; 4
      0003A6 FC                    6165 	.db #0xfc	; 252
      0003A7 14                    6166 	.db #0x14	; 20
      0003A8 14                    6167 	.db #0x14	; 20
      0003A9 17                    6168 	.db #0x17	; 23
      0003AA 10                    6169 	.db #0x10	; 16
      0003AB 1F                    6170 	.db #0x1f	; 31
      0003AC 10                    6171 	.db #0x10	; 16
      0003AD 10                    6172 	.db #0x10	; 16
      0003AE 1F                    6173 	.db #0x1f	; 31
      0003AF 10                    6174 	.db #0x10	; 16
      0003B0 1F                    6175 	.db #0x1f	; 31
      0003B1 14                    6176 	.db #0x14	; 20
      0003B2 14                    6177 	.db #0x14	; 20
      0003B3 14                    6178 	.db #0x14	; 20
      0003B4 1F                    6179 	.db #0x1f	; 31
      0003B5 00                    6180 	.db #0x00	; 0
      0003B6 10                    6181 	.db #0x10	; 16
      0003B7 10                    6182 	.db #0x10	; 16
      0003B8 10                    6183 	.db #0x10	; 16
      0003B9 F0                    6184 	.db #0xf0	; 240
      0003BA 00                    6185 	.db #0x00	; 0
      0003BB 00                    6186 	.db #0x00	; 0
      0003BC 00                    6187 	.db #0x00	; 0
      0003BD 00                    6188 	.db #0x00	; 0
      0003BE 1F                    6189 	.db #0x1f	; 31
      0003BF 10                    6190 	.db #0x10	; 16
      0003C0 10                    6191 	.db #0x10	; 16
      0003C1 10                    6192 	.db #0x10	; 16
      0003C2 10                    6193 	.db #0x10	; 16
      0003C3 1F                    6194 	.db #0x1f	; 31
      0003C4 10                    6195 	.db #0x10	; 16
      0003C5 10                    6196 	.db #0x10	; 16
      0003C6 10                    6197 	.db #0x10	; 16
      0003C7 10                    6198 	.db #0x10	; 16
      0003C8 F0                    6199 	.db #0xf0	; 240
      0003C9 10                    6200 	.db #0x10	; 16
      0003CA 00                    6201 	.db #0x00	; 0
      0003CB 00                    6202 	.db #0x00	; 0
      0003CC 00                    6203 	.db #0x00	; 0
      0003CD FF                    6204 	.db #0xff	; 255
      0003CE 10                    6205 	.db #0x10	; 16
      0003CF 10                    6206 	.db #0x10	; 16
      0003D0 10                    6207 	.db #0x10	; 16
      0003D1 10                    6208 	.db #0x10	; 16
      0003D2 10                    6209 	.db #0x10	; 16
      0003D3 10                    6210 	.db #0x10	; 16
      0003D4 10                    6211 	.db #0x10	; 16
      0003D5 10                    6212 	.db #0x10	; 16
      0003D6 10                    6213 	.db #0x10	; 16
      0003D7 FF                    6214 	.db #0xff	; 255
      0003D8 10                    6215 	.db #0x10	; 16
      0003D9 00                    6216 	.db #0x00	; 0
      0003DA 00                    6217 	.db #0x00	; 0
      0003DB 00                    6218 	.db #0x00	; 0
      0003DC FF                    6219 	.db #0xff	; 255
      0003DD 14                    6220 	.db #0x14	; 20
      0003DE 00                    6221 	.db #0x00	; 0
      0003DF 00                    6222 	.db #0x00	; 0
      0003E0 FF                    6223 	.db #0xff	; 255
      0003E1 00                    6224 	.db #0x00	; 0
      0003E2 FF                    6225 	.db #0xff	; 255
      0003E3 00                    6226 	.db #0x00	; 0
      0003E4 00                    6227 	.db #0x00	; 0
      0003E5 1F                    6228 	.db #0x1f	; 31
      0003E6 10                    6229 	.db #0x10	; 16
      0003E7 17                    6230 	.db #0x17	; 23
      0003E8 00                    6231 	.db #0x00	; 0
      0003E9 00                    6232 	.db #0x00	; 0
      0003EA FC                    6233 	.db #0xfc	; 252
      0003EB 04                    6234 	.db #0x04	; 4
      0003EC F4                    6235 	.db #0xf4	; 244
      0003ED 14                    6236 	.db #0x14	; 20
      0003EE 14                    6237 	.db #0x14	; 20
      0003EF 17                    6238 	.db #0x17	; 23
      0003F0 10                    6239 	.db #0x10	; 16
      0003F1 17                    6240 	.db #0x17	; 23
      0003F2 14                    6241 	.db #0x14	; 20
      0003F3 14                    6242 	.db #0x14	; 20
      0003F4 F4                    6243 	.db #0xf4	; 244
      0003F5 04                    6244 	.db #0x04	; 4
      0003F6 F4                    6245 	.db #0xf4	; 244
      0003F7 00                    6246 	.db #0x00	; 0
      0003F8 00                    6247 	.db #0x00	; 0
      0003F9 FF                    6248 	.db #0xff	; 255
      0003FA 00                    6249 	.db #0x00	; 0
      0003FB F7                    6250 	.db #0xf7	; 247
      0003FC 14                    6251 	.db #0x14	; 20
      0003FD 14                    6252 	.db #0x14	; 20
      0003FE 14                    6253 	.db #0x14	; 20
      0003FF 14                    6254 	.db #0x14	; 20
      000400 14                    6255 	.db #0x14	; 20
      000401 14                    6256 	.db #0x14	; 20
      000402 14                    6257 	.db #0x14	; 20
      000403 F7                    6258 	.db #0xf7	; 247
      000404 00                    6259 	.db #0x00	; 0
      000405 F7                    6260 	.db #0xf7	; 247
      000406 14                    6261 	.db #0x14	; 20
      000407 14                    6262 	.db #0x14	; 20
      000408 14                    6263 	.db #0x14	; 20
      000409 17                    6264 	.db #0x17	; 23
      00040A 14                    6265 	.db #0x14	; 20
      00040B 10                    6266 	.db #0x10	; 16
      00040C 10                    6267 	.db #0x10	; 16
      00040D 1F                    6268 	.db #0x1f	; 31
      00040E 10                    6269 	.db #0x10	; 16
      00040F 1F                    6270 	.db #0x1f	; 31
      000410 14                    6271 	.db #0x14	; 20
      000411 14                    6272 	.db #0x14	; 20
      000412 14                    6273 	.db #0x14	; 20
      000413 F4                    6274 	.db #0xf4	; 244
      000414 14                    6275 	.db #0x14	; 20
      000415 10                    6276 	.db #0x10	; 16
      000416 10                    6277 	.db #0x10	; 16
      000417 F0                    6278 	.db #0xf0	; 240
      000418 10                    6279 	.db #0x10	; 16
      000419 F0                    6280 	.db #0xf0	; 240
      00041A 00                    6281 	.db #0x00	; 0
      00041B 00                    6282 	.db #0x00	; 0
      00041C 1F                    6283 	.db #0x1f	; 31
      00041D 10                    6284 	.db #0x10	; 16
      00041E 1F                    6285 	.db #0x1f	; 31
      00041F 00                    6286 	.db #0x00	; 0
      000420 00                    6287 	.db #0x00	; 0
      000421 00                    6288 	.db #0x00	; 0
      000422 1F                    6289 	.db #0x1f	; 31
      000423 14                    6290 	.db #0x14	; 20
      000424 00                    6291 	.db #0x00	; 0
      000425 00                    6292 	.db #0x00	; 0
      000426 00                    6293 	.db #0x00	; 0
      000427 FC                    6294 	.db #0xfc	; 252
      000428 14                    6295 	.db #0x14	; 20
      000429 00                    6296 	.db #0x00	; 0
      00042A 00                    6297 	.db #0x00	; 0
      00042B F0                    6298 	.db #0xf0	; 240
      00042C 10                    6299 	.db #0x10	; 16
      00042D F0                    6300 	.db #0xf0	; 240
      00042E 10                    6301 	.db #0x10	; 16
      00042F 10                    6302 	.db #0x10	; 16
      000430 FF                    6303 	.db #0xff	; 255
      000431 10                    6304 	.db #0x10	; 16
      000432 FF                    6305 	.db #0xff	; 255
      000433 14                    6306 	.db #0x14	; 20
      000434 14                    6307 	.db #0x14	; 20
      000435 14                    6308 	.db #0x14	; 20
      000436 FF                    6309 	.db #0xff	; 255
      000437 14                    6310 	.db #0x14	; 20
      000438 10                    6311 	.db #0x10	; 16
      000439 10                    6312 	.db #0x10	; 16
      00043A 10                    6313 	.db #0x10	; 16
      00043B 1F                    6314 	.db #0x1f	; 31
      00043C 00                    6315 	.db #0x00	; 0
      00043D 00                    6316 	.db #0x00	; 0
      00043E 00                    6317 	.db #0x00	; 0
      00043F 00                    6318 	.db #0x00	; 0
      000440 F0                    6319 	.db #0xf0	; 240
      000441 10                    6320 	.db #0x10	; 16
      000442 FF                    6321 	.db #0xff	; 255
      000443 FF                    6322 	.db #0xff	; 255
      000444 FF                    6323 	.db #0xff	; 255
      000445 FF                    6324 	.db #0xff	; 255
      000446 FF                    6325 	.db #0xff	; 255
      000447 F0                    6326 	.db #0xf0	; 240
      000448 F0                    6327 	.db #0xf0	; 240
      000449 F0                    6328 	.db #0xf0	; 240
      00044A F0                    6329 	.db #0xf0	; 240
      00044B F0                    6330 	.db #0xf0	; 240
      00044C FF                    6331 	.db #0xff	; 255
      00044D FF                    6332 	.db #0xff	; 255
      00044E FF                    6333 	.db #0xff	; 255
      00044F 00                    6334 	.db #0x00	; 0
      000450 00                    6335 	.db #0x00	; 0
      000451 00                    6336 	.db #0x00	; 0
      000452 00                    6337 	.db #0x00	; 0
      000453 00                    6338 	.db #0x00	; 0
      000454 FF                    6339 	.db #0xff	; 255
      000455 FF                    6340 	.db #0xff	; 255
      000456 0F                    6341 	.db #0x0f	; 15
      000457 0F                    6342 	.db #0x0f	; 15
      000458 0F                    6343 	.db #0x0f	; 15
      000459 0F                    6344 	.db #0x0f	; 15
      00045A 0F                    6345 	.db #0x0f	; 15
      00045B 38                    6346 	.db #0x38	; 56	'8'
      00045C 44                    6347 	.db #0x44	; 68	'D'
      00045D 44                    6348 	.db #0x44	; 68	'D'
      00045E 38                    6349 	.db #0x38	; 56	'8'
      00045F 44                    6350 	.db #0x44	; 68	'D'
      000460 FC                    6351 	.db #0xfc	; 252
      000461 4A                    6352 	.db #0x4a	; 74	'J'
      000462 4A                    6353 	.db #0x4a	; 74	'J'
      000463 4A                    6354 	.db #0x4a	; 74	'J'
      000464 34                    6355 	.db #0x34	; 52	'4'
      000465 7E                    6356 	.db #0x7e	; 126
      000466 02                    6357 	.db #0x02	; 2
      000467 02                    6358 	.db #0x02	; 2
      000468 06                    6359 	.db #0x06	; 6
      000469 06                    6360 	.db #0x06	; 6
      00046A 02                    6361 	.db #0x02	; 2
      00046B 7E                    6362 	.db #0x7e	; 126
      00046C 02                    6363 	.db #0x02	; 2
      00046D 7E                    6364 	.db #0x7e	; 126
      00046E 02                    6365 	.db #0x02	; 2
      00046F 63                    6366 	.db #0x63	; 99	'c'
      000470 55                    6367 	.db #0x55	; 85	'U'
      000471 49                    6368 	.db #0x49	; 73	'I'
      000472 41                    6369 	.db #0x41	; 65	'A'
      000473 63                    6370 	.db #0x63	; 99	'c'
      000474 38                    6371 	.db #0x38	; 56	'8'
      000475 44                    6372 	.db #0x44	; 68	'D'
      000476 44                    6373 	.db #0x44	; 68	'D'
      000477 3C                    6374 	.db #0x3c	; 60
      000478 04                    6375 	.db #0x04	; 4
      000479 40                    6376 	.db #0x40	; 64
      00047A 7E                    6377 	.db #0x7e	; 126
      00047B 20                    6378 	.db #0x20	; 32
      00047C 1E                    6379 	.db #0x1e	; 30
      00047D 20                    6380 	.db #0x20	; 32
      00047E 06                    6381 	.db #0x06	; 6
      00047F 02                    6382 	.db #0x02	; 2
      000480 7E                    6383 	.db #0x7e	; 126
      000481 02                    6384 	.db #0x02	; 2
      000482 02                    6385 	.db #0x02	; 2
      000483 99                    6386 	.db #0x99	; 153
      000484 A5                    6387 	.db #0xa5	; 165
      000485 E7                    6388 	.db #0xe7	; 231
      000486 A5                    6389 	.db #0xa5	; 165
      000487 99                    6390 	.db #0x99	; 153
      000488 1C                    6391 	.db #0x1c	; 28
      000489 2A                    6392 	.db #0x2a	; 42
      00048A 49                    6393 	.db #0x49	; 73	'I'
      00048B 2A                    6394 	.db #0x2a	; 42
      00048C 1C                    6395 	.db #0x1c	; 28
      00048D 4C                    6396 	.db #0x4c	; 76	'L'
      00048E 72                    6397 	.db #0x72	; 114	'r'
      00048F 01                    6398 	.db #0x01	; 1
      000490 72                    6399 	.db #0x72	; 114	'r'
      000491 4C                    6400 	.db #0x4c	; 76	'L'
      000492 30                    6401 	.db #0x30	; 48	'0'
      000493 4A                    6402 	.db #0x4a	; 74	'J'
      000494 4D                    6403 	.db #0x4d	; 77	'M'
      000495 4D                    6404 	.db #0x4d	; 77	'M'
      000496 30                    6405 	.db #0x30	; 48	'0'
      000497 30                    6406 	.db #0x30	; 48	'0'
      000498 48                    6407 	.db #0x48	; 72	'H'
      000499 78                    6408 	.db #0x78	; 120	'x'
      00049A 48                    6409 	.db #0x48	; 72	'H'
      00049B 30                    6410 	.db #0x30	; 48	'0'
      00049C BC                    6411 	.db #0xbc	; 188
      00049D 62                    6412 	.db #0x62	; 98	'b'
      00049E 5A                    6413 	.db #0x5a	; 90	'Z'
      00049F 46                    6414 	.db #0x46	; 70	'F'
      0004A0 3D                    6415 	.db #0x3d	; 61
      0004A1 3E                    6416 	.db #0x3e	; 62
      0004A2 49                    6417 	.db #0x49	; 73	'I'
      0004A3 49                    6418 	.db #0x49	; 73	'I'
      0004A4 49                    6419 	.db #0x49	; 73	'I'
      0004A5 00                    6420 	.db #0x00	; 0
      0004A6 7E                    6421 	.db #0x7e	; 126
      0004A7 01                    6422 	.db #0x01	; 1
      0004A8 01                    6423 	.db #0x01	; 1
      0004A9 01                    6424 	.db #0x01	; 1
      0004AA 7E                    6425 	.db #0x7e	; 126
      0004AB 2A                    6426 	.db #0x2a	; 42
      0004AC 2A                    6427 	.db #0x2a	; 42
      0004AD 2A                    6428 	.db #0x2a	; 42
      0004AE 2A                    6429 	.db #0x2a	; 42
      0004AF 2A                    6430 	.db #0x2a	; 42
      0004B0 44                    6431 	.db #0x44	; 68	'D'
      0004B1 44                    6432 	.db #0x44	; 68	'D'
      0004B2 5F                    6433 	.db #0x5f	; 95
      0004B3 44                    6434 	.db #0x44	; 68	'D'
      0004B4 44                    6435 	.db #0x44	; 68	'D'
      0004B5 40                    6436 	.db #0x40	; 64
      0004B6 51                    6437 	.db #0x51	; 81	'Q'
      0004B7 4A                    6438 	.db #0x4a	; 74	'J'
      0004B8 44                    6439 	.db #0x44	; 68	'D'
      0004B9 40                    6440 	.db #0x40	; 64
      0004BA 40                    6441 	.db #0x40	; 64
      0004BB 44                    6442 	.db #0x44	; 68	'D'
      0004BC 4A                    6443 	.db #0x4a	; 74	'J'
      0004BD 51                    6444 	.db #0x51	; 81	'Q'
      0004BE 40                    6445 	.db #0x40	; 64
      0004BF 00                    6446 	.db #0x00	; 0
      0004C0 00                    6447 	.db #0x00	; 0
      0004C1 FF                    6448 	.db #0xff	; 255
      0004C2 01                    6449 	.db #0x01	; 1
      0004C3 03                    6450 	.db #0x03	; 3
      0004C4 E0                    6451 	.db #0xe0	; 224
      0004C5 80                    6452 	.db #0x80	; 128
      0004C6 FF                    6453 	.db #0xff	; 255
      0004C7 00                    6454 	.db #0x00	; 0
      0004C8 00                    6455 	.db #0x00	; 0
      0004C9 08                    6456 	.db #0x08	; 8
      0004CA 08                    6457 	.db #0x08	; 8
      0004CB 6B                    6458 	.db #0x6b	; 107	'k'
      0004CC 6B                    6459 	.db #0x6b	; 107	'k'
      0004CD 08                    6460 	.db #0x08	; 8
      0004CE 36                    6461 	.db #0x36	; 54	'6'
      0004CF 12                    6462 	.db #0x12	; 18
      0004D0 36                    6463 	.db #0x36	; 54	'6'
      0004D1 24                    6464 	.db #0x24	; 36
      0004D2 36                    6465 	.db #0x36	; 54	'6'
      0004D3 06                    6466 	.db #0x06	; 6
      0004D4 0F                    6467 	.db #0x0f	; 15
      0004D5 09                    6468 	.db #0x09	; 9
      0004D6 0F                    6469 	.db #0x0f	; 15
      0004D7 06                    6470 	.db #0x06	; 6
      0004D8 00                    6471 	.db #0x00	; 0
      0004D9 00                    6472 	.db #0x00	; 0
      0004DA 18                    6473 	.db #0x18	; 24
      0004DB 18                    6474 	.db #0x18	; 24
      0004DC 00                    6475 	.db #0x00	; 0
      0004DD 00                    6476 	.db #0x00	; 0
      0004DE 00                    6477 	.db #0x00	; 0
      0004DF 10                    6478 	.db #0x10	; 16
      0004E0 10                    6479 	.db #0x10	; 16
      0004E1 00                    6480 	.db #0x00	; 0
      0004E2 30                    6481 	.db #0x30	; 48	'0'
      0004E3 40                    6482 	.db #0x40	; 64
      0004E4 FF                    6483 	.db #0xff	; 255
      0004E5 01                    6484 	.db #0x01	; 1
      0004E6 01                    6485 	.db #0x01	; 1
      0004E7 00                    6486 	.db #0x00	; 0
      0004E8 1F                    6487 	.db #0x1f	; 31
      0004E9 01                    6488 	.db #0x01	; 1
      0004EA 01                    6489 	.db #0x01	; 1
      0004EB 1E                    6490 	.db #0x1e	; 30
      0004EC 00                    6491 	.db #0x00	; 0
      0004ED 19                    6492 	.db #0x19	; 25
      0004EE 1D                    6493 	.db #0x1d	; 29
      0004EF 17                    6494 	.db #0x17	; 23
      0004F0 12                    6495 	.db #0x12	; 18
      0004F1 00                    6496 	.db #0x00	; 0
      0004F2 3C                    6497 	.db #0x3c	; 60
      0004F3 3C                    6498 	.db #0x3c	; 60
      0004F4 3C                    6499 	.db #0x3c	; 60
      0004F5 3C                    6500 	.db #0x3c	; 60
      0004F6 00                    6501 	.db #0x00	; 0
      0004F7 00                    6502 	.db #0x00	; 0
      0004F8 00                    6503 	.db #0x00	; 0
      0004F9 00                    6504 	.db #0x00	; 0
      0004FA 00                    6505 	.db #0x00	; 0
      0004FB                       6506 _keypad:
      0004FB 31                    6507 	.db #0x31	; 49	'1'
      0004FC 34                    6508 	.db #0x34	; 52	'4'
      0004FD 37                    6509 	.db #0x37	; 55	'7'
      0004FE 46                    6510 	.db #0x46	; 70	'F'
      0004FF 32                    6511 	.db #0x32	; 50	'2'
      000500 35                    6512 	.db #0x35	; 53	'5'
      000501 38                    6513 	.db #0x38	; 56	'8'
      000502 30                    6514 	.db #0x30	; 48	'0'
      000503 33                    6515 	.db #0x33	; 51	'3'
      000504 36                    6516 	.db #0x36	; 54	'6'
      000505 39                    6517 	.db #0x39	; 57	'9'
      000506 45                    6518 	.db #0x45	; 69	'E'
      000507 41                    6519 	.db #0x41	; 65	'A'
      000508 42                    6520 	.db #0x42	; 66	'B'
      000509 43                    6521 	.db #0x43	; 67	'C'
      00050A 44                    6522 	.db #0x44	; 68	'D'
                                   6523 	.area CONST   (CODE)
      00050B                       6524 ___str_0:
      00050B 57 65 6C 63 6F 6D 65  6525 	.ascii "Welcome"
      000512 0A                    6526 	.db 0x0a
      000513 00                    6527 	.db 0x00
                                   6528 	.area CSEG    (CODE)
                                   6529 	.area CONST   (CODE)
      000514                       6530 ___str_1:
      000514 45 43 45 4E 2D 34 33  6531 	.ascii "ECEN-4330"
             33 30
      00051D 0A                    6532 	.db 0x0a
      00051E 00                    6533 	.db 0x00
                                   6534 	.area CSEG    (CODE)
                                   6535 	.area CONST   (CODE)
      00051F                       6536 ___str_2:
      00051F 52 6F 74 61 74 69 6F  6537 	.ascii "Rotation 0"
             6E 20 30
      000529 00                    6538 	.db 0x00
                                   6539 	.area CSEG    (CODE)
                                   6540 	.area CONST   (CODE)
      00052A                       6541 ___str_3:
      00052A 52 6F 74 61 74 69 6F  6542 	.ascii "Rotation 1"
             6E 20 31
      000534 00                    6543 	.db 0x00
                                   6544 	.area CSEG    (CODE)
                                   6545 	.area CONST   (CODE)
      000535                       6546 ___str_4:
      000535 52 6F 74 61 74 69 6F  6547 	.ascii "Rotation 2"
             6E 20 32
      00053F 00                    6548 	.db 0x00
                                   6549 	.area CSEG    (CODE)
                                   6550 	.area CONST   (CODE)
      000540                       6551 ___str_5:
      000540 52 6F 74 61 74 69 6F  6552 	.ascii "Rotation 3"
             6E 20 33
      00054A 00                    6553 	.db 0x00
                                   6554 	.area CSEG    (CODE)
                                   6555 	.area CONST   (CODE)
      00054B                       6556 ___str_6:
      00054B 53 65 6C 65 63 74 20  6557 	.ascii "Select baud rate:"
             62 61 75 64 20 72 61
             74 65 3A
      00055C 0A                    6558 	.db 0x0a
      00055D 00                    6559 	.db 0x00
                                   6560 	.area CSEG    (CODE)
                                   6561 	.area CONST   (CODE)
      00055E                       6562 ___str_7:
      00055E 31 3A 20 31 32 30 30  6563 	.ascii "1: 1200"
      000565 0A                    6564 	.db 0x0a
      000566 32 3A 20 32 34 30 30  6565 	.ascii "2: 2400"
      00056D 0A                    6566 	.db 0x0a
      00056E 33 3A 20 34 38 30 30  6567 	.ascii "3: 4800"
      000575 0A                    6568 	.db 0x0a
      000576 34 3A 20 39 36 30 30  6569 	.ascii "4: 9600"
      00057D 0A                    6570 	.db 0x0a
      00057E 35 3A 20 31 39 32 30  6571 	.ascii "5: 19200"
             30
      000586 0A                    6572 	.db 0x0a
      000587 00                    6573 	.db 0x00
                                   6574 	.area CSEG    (CODE)
                                   6575 	.area CONST   (CODE)
      000588                       6576 ___str_8:
      000588 48 6F 77 20 6D 61 6E  6577 	.ascii "How many data bits?"
             79 20 64 61 74 61 20
             62 69 74 73 3F
      00059B 0A                    6578 	.db 0x0a
      00059C 00                    6579 	.db 0x00
                                   6580 	.area CSEG    (CODE)
                                   6581 	.area CONST   (CODE)
      00059D                       6582 ___str_9:
      00059D 31 3A 20 38           6583 	.ascii "1: 8"
      0005A1 0A                    6584 	.db 0x0a
      0005A2 32 3A 20 39           6585 	.ascii "2: 9"
      0005A6 0A                    6586 	.db 0x0a
      0005A7 00                    6587 	.db 0x00
                                   6588 	.area CSEG    (CODE)
                                   6589 	.area CONST   (CODE)
      0005A8                       6590 ___str_10:
      0005A8 53 65 6C 65 63 74 20  6591 	.ascii "Select parity?"
             70 61 72 69 74 79 3F
      0005B6 0A                    6592 	.db 0x0a
      0005B7 00                    6593 	.db 0x00
                                   6594 	.area CSEG    (CODE)
                                   6595 	.area CONST   (CODE)
      0005B8                       6596 ___str_11:
      0005B8 30 3A 20 4E 6F 6E 65  6597 	.ascii "0: None"
      0005BF 0A                    6598 	.db 0x0a
      0005C0 31 3A 20 4F 64 64     6599 	.ascii "1: Odd"
      0005C6 0A                    6600 	.db 0x0a
      0005C7 32 3A 20 45 76 65 6E  6601 	.ascii "2: Even"
      0005CE 0A                    6602 	.db 0x0a
      0005CF 00                    6603 	.db 0x00
                                   6604 	.area CSEG    (CODE)
                                   6605 	.area CONST   (CODE)
      0005D0                       6606 ___str_12:
      0005D0 31 3A 20 4F 64 64     6607 	.ascii "1: Odd"
      0005D6 0A                    6608 	.db 0x0a
      0005D7 32 3A 20 45 76 65 6E  6609 	.ascii "2: Even"
      0005DE 0A                    6610 	.db 0x0a
      0005DF 00                    6611 	.db 0x00
                                   6612 	.area CSEG    (CODE)
                                   6613 	.area CONST   (CODE)
      0005E0                       6614 ___str_13:
      0005E0 70 61 72 2E 20 63 6F  6615 	.ascii "par. comp. "
             6D 70 2E 20
      0005EB 00                    6616 	.db 0x00
                                   6617 	.area CSEG    (CODE)
                                   6618 	.area CONST   (CODE)
      0005EC                       6619 ___str_14:
      0005EC 52 78 20 70 61 72 69  6620 	.ascii "Rx parity error"
             74 79 20 65 72 72 6F
             72
      0005FB 0A                    6621 	.db 0x0a
      0005FC 00                    6622 	.db 0x00
                                   6623 	.area CSEG    (CODE)
                                   6624 	.area CONST   (CODE)
      0005FD                       6625 ___str_15:
      0005FD 43 6F 6E 66 69 67 2E  6626 	.ascii "Config. error"
             20 65 72 72 6F 72
      00060A 0A                    6627 	.db 0x0a
      00060B 00                    6628 	.db 0x00
                                   6629 	.area CSEG    (CODE)
                                   6630 	.area CONST   (CODE)
      00060C                       6631 ___str_16:
      00060C 54 78 20 70 61 72 69  6632 	.ascii "Tx parity error"
             74 79 20 65 72 72 6F
             72
      00061B 0A                    6633 	.db 0x0a
      00061C 00                    6634 	.db 0x00
                                   6635 	.area CSEG    (CODE)
                                   6636 	.area CONST   (CODE)
      00061D                       6637 ___str_17:
      00061D 45 6E 74 65 72 20 62  6638 	.ascii "Enter byte to check"
             79 74 65 20 74 6F 20
             63 68 65 63 6B
      000630 0A                    6639 	.db 0x0a
      000631 00                    6640 	.db 0x00
                                   6641 	.area CSEG    (CODE)
                                   6642 	.area CONST   (CODE)
      000632                       6643 ___str_18:
      000632 49 6E 20 70 72 6F 67  6644 	.ascii "In progress..."
             72 65 73 73 2E 2E 2E
      000640 0A                    6645 	.db 0x0a
      000641 00                    6646 	.db 0x00
                                   6647 	.area CSEG    (CODE)
                                   6648 	.area CONST   (CODE)
      000642                       6649 ___str_19:
      000642 4D 65 6D 6F 72 79 20  6650 	.ascii "Memory check failed"
             63 68 65 63 6B 20 66
             61 69 6C 65 64
      000655 0A                    6651 	.db 0x0a
      000656 00                    6652 	.db 0x00
                                   6653 	.area CSEG    (CODE)
                                   6654 	.area CONST   (CODE)
      000657                       6655 ___str_20:
      000657 53 75 63 63 65 73 73  6656 	.ascii "Success!"
             21
      00065F 0A                    6657 	.db 0x0a
      000660 00                    6658 	.db 0x00
                                   6659 	.area CSEG    (CODE)
                                   6660 	.area CONST   (CODE)
      000661                       6661 ___str_21:
      000661 50 72 65 73 73 20 31  6662 	.ascii "Press 1 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      000671 0A                    6663 	.db 0x0a
      000672 00                    6664 	.db 0x00
                                   6665 	.area CSEG    (CODE)
                                   6666 	.area CONST   (CODE)
      000673                       6667 ___str_22:
      000673 45 6E 74 65 72 20 62  6668 	.ascii "Enter byte"
             79 74 65
      00067D 0A                    6669 	.db 0x0a
      00067E 00                    6670 	.db 0x00
                                   6671 	.area CSEG    (CODE)
                                   6672 	.area CONST   (CODE)
      00067F                       6673 ___str_23:
      00067F 45 6E 74 65 72 20 61  6674 	.ascii "Enter address"
             64 64 72 65 73 73
      00068C 0A                    6675 	.db 0x0a
      00068D 00                    6676 	.db 0x00
                                   6677 	.area CSEG    (CODE)
                                   6678 	.area CONST   (CODE)
      00068E                       6679 ___str_24:
      00068E 49 6E 20 70 72 6F 67  6680 	.ascii "In progress"
             72 65 73 73
      000699 0A                    6681 	.db 0x0a
      00069A 00                    6682 	.db 0x00
                                   6683 	.area CSEG    (CODE)
                                   6684 	.area CONST   (CODE)
      00069B                       6685 ___str_25:
      00069B 20 66 65 74 63 68 65  6686 	.ascii " fetched!"
             64 21
      0006A4 0A                    6687 	.db 0x0a
      0006A5 53 75 63 63 65 73 73  6688 	.ascii "Success!"
             21
      0006AD 0A                    6689 	.db 0x0a
      0006AE 00                    6690 	.db 0x00
                                   6691 	.area CSEG    (CODE)
                                   6692 	.area CONST   (CODE)
      0006AF                       6693 ___str_26:
      0006AF 43 68 65 63 6B 20 66  6694 	.ascii "Check failed"
             61 69 6C 65 64
      0006BB 0A                    6695 	.db 0x0a
      0006BC 00                    6696 	.db 0x00
                                   6697 	.area CSEG    (CODE)
                                   6698 	.area CONST   (CODE)
      0006BD                       6699 ___str_27:
      0006BD 55 41 52 54 20 46 72  6700 	.ascii "UART Free type, 0 for menu:"
             65 65 20 74 79 70 65
             2C 20 30 20 66 6F 72
             20 6D 65 6E 75 3A
      0006D8 0A                    6701 	.db 0x0a
      0006D9 00                    6702 	.db 0x00
                                   6703 	.area CSEG    (CODE)
                                   6704 	.area CONST   (CODE)
      0006DA                       6705 ___str_28:
      0006DA 57 68 69 63 68 20 6D  6706 	.ascii "Which mode?"
             6F 64 65 3F
      0006E5 0A                    6707 	.db 0x0a
      0006E6 00                    6708 	.db 0x00
                                   6709 	.area CSEG    (CODE)
                                   6710 	.area CONST   (CODE)
      0006E7                       6711 ___str_29:
      0006E7 31 3A 20 4C 6F 6F 70  6712 	.ascii "1: Loopback"
             62 61 63 6B
      0006F2 0A                    6713 	.db 0x0a
      0006F3 00                    6714 	.db 0x00
                                   6715 	.area CSEG    (CODE)
                                   6716 	.area CONST   (CODE)
      0006F4                       6717 ___str_30:
      0006F4 32 3A 20 49 6E 74 65  6718 	.ascii "2: Interboard"
             72 62 6F 61 72 64
      000701 0A                    6719 	.db 0x0a
      000702 00                    6720 	.db 0x00
                                   6721 	.area CSEG    (CODE)
                                   6722 	.area CONST   (CODE)
      000703                       6723 ___str_31:
      000703 30 3A 20 45 78 69 74  6724 	.ascii "0: Exit"
      00070A 0A                    6725 	.db 0x0a
      00070B 00                    6726 	.db 0x00
                                   6727 	.area CSEG    (CODE)
                                   6728 	.area CONST   (CODE)
      00070C                       6729 ___str_32:
      00070C 50 72 65 73 73 20 30  6730 	.ascii "Press 0 for menu"
             20 66 6F 72 20 6D 65
             6E 75
      00071C 0A                    6731 	.db 0x0a
      00071D 00                    6732 	.db 0x00
                                   6733 	.area CSEG    (CODE)
                                   6734 	.area CONST   (CODE)
      00071E                       6735 ___str_33:
      00071E 31 3A 20 54 72 61 6E  6736 	.ascii "1: Transmit"
             73 6D 69 74
      000729 0A                    6737 	.db 0x0a
      00072A 32 3A 20 52 65 63 65  6738 	.ascii "2: Receive"
             69 76 65
      000734 0A                    6739 	.db 0x0a
      000735 30 3A 20 45 78 69 74  6740 	.ascii "0: Exit"
      00073C 0A                    6741 	.db 0x0a
      00073D 00                    6742 	.db 0x00
                                   6743 	.area CSEG    (CODE)
                                   6744 	.area CONST   (CODE)
      00073E                       6745 ___str_34:
      00073E 54 78 20 4D 6F 64 65  6746 	.ascii "Tx Mode, 0 for menu:"
             2C 20 30 20 66 6F 72
             20 6D 65 6E 75 3A
      000752 0A                    6747 	.db 0x0a
      000753 00                    6748 	.db 0x00
                                   6749 	.area CSEG    (CODE)
                                   6750 	.area CONST   (CODE)
      000754                       6751 ___str_35:
      000754 42 72 61 6E 64 6F 6E  6752 	.ascii "Brandon Cline"
             20 43 6C 69 6E 65
      000761 0A                    6753 	.db 0x0a
      000762 00                    6754 	.db 0x00
                                   6755 	.area CSEG    (CODE)
                                   6756 	.area CONST   (CODE)
      000763                       6757 ___str_36:
      000763 45 43 45 4E 20 34 33  6758 	.ascii "ECEN 4330"
             33 30
      00076C 0A                    6759 	.db 0x0a
      00076D 00                    6760 	.db 0x00
                                   6761 	.area CSEG    (CODE)
                                   6762 	.area CONST   (CODE)
      00076E                       6763 ___str_37:
      00076E 31 3A 20 42 61 73 69  6764 	.ascii "1: Basic check"
             63 20 63 68 65 63 6B
      00077C 0A                    6765 	.db 0x0a
      00077D 00                    6766 	.db 0x00
                                   6767 	.area CSEG    (CODE)
                                   6768 	.area CONST   (CODE)
      00077E                       6769 ___str_38:
      00077E 32 3A 20 44 75 6D 70  6770 	.ascii "2: Dump"
      000785 0A                    6771 	.db 0x0a
      000786 00                    6772 	.db 0x00
                                   6773 	.area CSEG    (CODE)
                                   6774 	.area CONST   (CODE)
      000787                       6775 ___str_39:
      000787 33 3A 20 43 68 65 63  6776 	.ascii "3: Check"
             6B
      00078F 0A                    6777 	.db 0x0a
      000790 00                    6778 	.db 0x00
                                   6779 	.area CSEG    (CODE)
                                   6780 	.area CONST   (CODE)
      000791                       6781 ___str_40:
      000791 41 3A 20 4D 6F 76 65  6782 	.ascii "A: Move"
      000798 0A                    6783 	.db 0x0a
      000799 00                    6784 	.db 0x00
                                   6785 	.area CSEG    (CODE)
                                   6786 	.area CONST   (CODE)
      00079A                       6787 ___str_41:
      00079A 34 3A 20 45 64 69 74  6788 	.ascii "4: Edit"
      0007A1 0A                    6789 	.db 0x0a
      0007A2 00                    6790 	.db 0x00
                                   6791 	.area CSEG    (CODE)
                                   6792 	.area CONST   (CODE)
      0007A3                       6793 ___str_42:
      0007A3 35 3A 20 46 69 6E 64  6794 	.ascii "5: Find"
      0007AA 0A                    6795 	.db 0x0a
      0007AB 00                    6796 	.db 0x00
                                   6797 	.area CSEG    (CODE)
                                   6798 	.area CONST   (CODE)
      0007AC                       6799 ___str_43:
      0007AC 36 3A 20 43 6F 75 6E  6800 	.ascii "6: Count"
             74
      0007B4 0A                    6801 	.db 0x0a
      0007B5 00                    6802 	.db 0x00
                                   6803 	.area CSEG    (CODE)
                                   6804 	.area CONST   (CODE)
      0007B6                       6805 ___str_44:
      0007B6 42 3A 20 54 65 6D 70  6806 	.ascii "B: Temperature"
             65 72 61 74 75 72 65
      0007C4 0A                    6807 	.db 0x0a
      0007C5 00                    6808 	.db 0x00
                                   6809 	.area CSEG    (CODE)
                                   6810 	.area CONST   (CODE)
      0007C6                       6811 ___str_45:
      0007C6 37 3A 20 4C 69 67 68  6812 	.ascii "7: Light"
             74
      0007CE 0A                    6813 	.db 0x0a
      0007CF 00                    6814 	.db 0x00
                                   6815 	.area CSEG    (CODE)
                                   6816 	.area CONST   (CODE)
      0007D0                       6817 ___str_46:
      0007D0 38 3A 20 55 41 52 54  6818 	.ascii "8: UART free type"
             20 66 72 65 65 20 74
             79 70 65
      0007E1 0A                    6819 	.db 0x0a
      0007E2 00                    6820 	.db 0x00
                                   6821 	.area CSEG    (CODE)
                                   6822 	.area CONST   (CODE)
      0007E3                       6823 ___str_47:
      0007E3 39 3A 20 45 43 45 4E  6824 	.ascii "9: ECEN 435 UART"
             20 34 33 35 20 55 41
             52 54
      0007F3 0A                    6825 	.db 0x0a
      0007F4 00                    6826 	.db 0x00
                                   6827 	.area CSEG    (CODE)
                                   6828 	.area XINIT   (CODE)
                                   6829 	.area CABS    (ABS,CODE)
