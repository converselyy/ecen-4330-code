                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4330_lcd_v3
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setAddress_PARM_4
                                     12 	.globl _setAddress_PARM_3
                                     13 	.globl _setAddress_PARM_2
                                     14 	.globl _setTextColor_PARM_2
                                     15 	.globl _setCursor_PARM_2
                                     16 	.globl _writeRegister16_PARM_2
                                     17 	.globl _writeRegister8_PARM_2
                                     18 	.globl _iowrite8_PARM_2
                                     19 	.globl _main
                                     20 	.globl _writeSomeLines
                                     21 	.globl _convertAsciiHex
                                     22 	.globl _write
                                     23 	.globl _drawChar
                                     24 	.globl _setRotation
                                     25 	.globl _iowrite8
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _F1
                                     33 	.globl _P
                                     34 	.globl _PS
                                     35 	.globl _PT1
                                     36 	.globl _PX1
                                     37 	.globl _PT0
                                     38 	.globl _PX0
                                     39 	.globl _RD
                                     40 	.globl _WR
                                     41 	.globl _T1
                                     42 	.globl _T0
                                     43 	.globl _INT1
                                     44 	.globl _INT0
                                     45 	.globl _TXD
                                     46 	.globl _RXD
                                     47 	.globl _P3_7
                                     48 	.globl _P3_6
                                     49 	.globl _P3_5
                                     50 	.globl _P3_4
                                     51 	.globl _P3_3
                                     52 	.globl _P3_2
                                     53 	.globl _P3_1
                                     54 	.globl _P3_0
                                     55 	.globl _EA
                                     56 	.globl _ES
                                     57 	.globl _ET1
                                     58 	.globl _EX1
                                     59 	.globl _ET0
                                     60 	.globl _EX0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _SM0
                                     70 	.globl _SM1
                                     71 	.globl _SM2
                                     72 	.globl _REN
                                     73 	.globl _TB8
                                     74 	.globl _RB8
                                     75 	.globl _TI
                                     76 	.globl _RI
                                     77 	.globl _P1_7
                                     78 	.globl _P1_6
                                     79 	.globl _P1_5
                                     80 	.globl _P1_4
                                     81 	.globl _P1_3
                                     82 	.globl _P1_2
                                     83 	.globl _P1_1
                                     84 	.globl _P1_0
                                     85 	.globl _TF1
                                     86 	.globl _TR1
                                     87 	.globl _TF0
                                     88 	.globl _TR0
                                     89 	.globl _IE1
                                     90 	.globl _IT1
                                     91 	.globl _IE0
                                     92 	.globl _IT0
                                     93 	.globl _P0_7
                                     94 	.globl _P0_6
                                     95 	.globl _P0_5
                                     96 	.globl _P0_4
                                     97 	.globl _P0_3
                                     98 	.globl _P0_2
                                     99 	.globl _P0_1
                                    100 	.globl _P0_0
                                    101 	.globl _B
                                    102 	.globl _ACC
                                    103 	.globl _PSW
                                    104 	.globl _IP
                                    105 	.globl _P3
                                    106 	.globl _IE
                                    107 	.globl _P2
                                    108 	.globl _SBUF
                                    109 	.globl _SCON
                                    110 	.globl _P1
                                    111 	.globl _TH1
                                    112 	.globl _TH0
                                    113 	.globl _TL1
                                    114 	.globl _TL0
                                    115 	.globl _TMOD
                                    116 	.globl _TCON
                                    117 	.globl _PCON
                                    118 	.globl _DPH
                                    119 	.globl _DPL
                                    120 	.globl _SP
                                    121 	.globl _P0
                                    122 	.globl _drawChar_PARM_6
                                    123 	.globl _drawChar_PARM_5
                                    124 	.globl _drawChar_PARM_4
                                    125 	.globl _drawChar_PARM_3
                                    126 	.globl _drawChar_PARM_2
                                    127 	.globl _fillRect_PARM_5
                                    128 	.globl _fillRect_PARM_4
                                    129 	.globl _fillRect_PARM_3
                                    130 	.globl _fillRect_PARM_2
                                    131 	.globl _testCircles_PARM_2
                                    132 	.globl _drawCircle_PARM_4
                                    133 	.globl _drawCircle_PARM_3
                                    134 	.globl _drawCircle_PARM_2
                                    135 	.globl _drawPixel_PARM_3
                                    136 	.globl _drawPixel_PARM_2
                                    137 	.globl __height
                                    138 	.globl __width
                                    139 	.globl _textbgcolor
                                    140 	.globl _textcolor
                                    141 	.globl _rotation
                                    142 	.globl _textsize
                                    143 	.globl _cursor_y
                                    144 	.globl _cursor_x
                                    145 	.globl _read_ram_address
                                    146 	.globl _seg7_address
                                    147 	.globl _lcd_address
                                    148 	.globl _rowloc
                                    149 	.globl _colloc
                                    150 	.globl _keypad
                                    151 	.globl _delay
                                    152 	.globl _writeRegister8
                                    153 	.globl _writeRegister16
                                    154 	.globl _setCursor
                                    155 	.globl _setTextColor
                                    156 	.globl _setTextSize
                                    157 	.globl _setAddress
                                    158 	.globl _TFT_LCD_INIT
                                    159 	.globl _drawPixel
                                    160 	.globl _drawCircle
                                    161 	.globl _testCircles
                                    162 	.globl _fillRect
                                    163 	.globl _fillScreen
                                    164 	.globl _LCD_string_write
                                    165 	.globl _testRAM
                                    166 	.globl _freeType
                                    167 	.globl _keyDetect
                                    168 	.globl _reverse
                                    169 	.globl _asciiToDec
                                    170 	.globl _asciiToHex
                                    171 ;--------------------------------------------------------
                                    172 ; special function registers
                                    173 ;--------------------------------------------------------
                                    174 	.area RSEG    (ABS,DATA)
      000000                        175 	.org 0x0000
                           000080   176 _P0	=	0x0080
                           000081   177 _SP	=	0x0081
                           000082   178 _DPL	=	0x0082
                           000083   179 _DPH	=	0x0083
                           000087   180 _PCON	=	0x0087
                           000088   181 _TCON	=	0x0088
                           000089   182 _TMOD	=	0x0089
                           00008A   183 _TL0	=	0x008a
                           00008B   184 _TL1	=	0x008b
                           00008C   185 _TH0	=	0x008c
                           00008D   186 _TH1	=	0x008d
                           000090   187 _P1	=	0x0090
                           000098   188 _SCON	=	0x0098
                           000099   189 _SBUF	=	0x0099
                           0000A0   190 _P2	=	0x00a0
                           0000A8   191 _IE	=	0x00a8
                           0000B0   192 _P3	=	0x00b0
                           0000B8   193 _IP	=	0x00b8
                           0000D0   194 _PSW	=	0x00d0
                           0000E0   195 _ACC	=	0x00e0
                           0000F0   196 _B	=	0x00f0
                                    197 ;--------------------------------------------------------
                                    198 ; special function bits
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _P0_0	=	0x0080
                           000081   203 _P0_1	=	0x0081
                           000082   204 _P0_2	=	0x0082
                           000083   205 _P0_3	=	0x0083
                           000084   206 _P0_4	=	0x0084
                           000085   207 _P0_5	=	0x0085
                           000086   208 _P0_6	=	0x0086
                           000087   209 _P0_7	=	0x0087
                           000088   210 _IT0	=	0x0088
                           000089   211 _IE0	=	0x0089
                           00008A   212 _IT1	=	0x008a
                           00008B   213 _IE1	=	0x008b
                           00008C   214 _TR0	=	0x008c
                           00008D   215 _TF0	=	0x008d
                           00008E   216 _TR1	=	0x008e
                           00008F   217 _TF1	=	0x008f
                           000090   218 _P1_0	=	0x0090
                           000091   219 _P1_1	=	0x0091
                           000092   220 _P1_2	=	0x0092
                           000093   221 _P1_3	=	0x0093
                           000094   222 _P1_4	=	0x0094
                           000095   223 _P1_5	=	0x0095
                           000096   224 _P1_6	=	0x0096
                           000097   225 _P1_7	=	0x0097
                           000098   226 _RI	=	0x0098
                           000099   227 _TI	=	0x0099
                           00009A   228 _RB8	=	0x009a
                           00009B   229 _TB8	=	0x009b
                           00009C   230 _REN	=	0x009c
                           00009D   231 _SM2	=	0x009d
                           00009E   232 _SM1	=	0x009e
                           00009F   233 _SM0	=	0x009f
                           0000A0   234 _P2_0	=	0x00a0
                           0000A1   235 _P2_1	=	0x00a1
                           0000A2   236 _P2_2	=	0x00a2
                           0000A3   237 _P2_3	=	0x00a3
                           0000A4   238 _P2_4	=	0x00a4
                           0000A5   239 _P2_5	=	0x00a5
                           0000A6   240 _P2_6	=	0x00a6
                           0000A7   241 _P2_7	=	0x00a7
                           0000A8   242 _EX0	=	0x00a8
                           0000A9   243 _ET0	=	0x00a9
                           0000AA   244 _EX1	=	0x00aa
                           0000AB   245 _ET1	=	0x00ab
                           0000AC   246 _ES	=	0x00ac
                           0000AF   247 _EA	=	0x00af
                           0000B0   248 _P3_0	=	0x00b0
                           0000B1   249 _P3_1	=	0x00b1
                           0000B2   250 _P3_2	=	0x00b2
                           0000B3   251 _P3_3	=	0x00b3
                           0000B4   252 _P3_4	=	0x00b4
                           0000B5   253 _P3_5	=	0x00b5
                           0000B6   254 _P3_6	=	0x00b6
                           0000B7   255 _P3_7	=	0x00b7
                           0000B0   256 _RXD	=	0x00b0
                           0000B1   257 _TXD	=	0x00b1
                           0000B2   258 _INT0	=	0x00b2
                           0000B3   259 _INT1	=	0x00b3
                           0000B4   260 _T0	=	0x00b4
                           0000B5   261 _T1	=	0x00b5
                           0000B6   262 _WR	=	0x00b6
                           0000B7   263 _RD	=	0x00b7
                           0000B8   264 _PX0	=	0x00b8
                           0000B9   265 _PT0	=	0x00b9
                           0000BA   266 _PX1	=	0x00ba
                           0000BB   267 _PT1	=	0x00bb
                           0000BC   268 _PS	=	0x00bc
                           0000D0   269 _P	=	0x00d0
                           0000D1   270 _F1	=	0x00d1
                           0000D2   271 _OV	=	0x00d2
                           0000D3   272 _RS0	=	0x00d3
                           0000D4   273 _RS1	=	0x00d4
                           0000D5   274 _F0	=	0x00d5
                           0000D6   275 _AC	=	0x00d6
                           0000D7   276 _CY	=	0x00d7
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
      000000                        286 _keypad::
      000000                        287 	.ds 16
      000010                        288 _colloc::
      000010                        289 	.ds 1
      000011                        290 _rowloc::
      000011                        291 	.ds 1
      000012                        292 _lcd_address::
      000012                        293 	.ds 2
      000014                        294 _seg7_address::
      000014                        295 	.ds 2
      000016                        296 _read_ram_address::
      000016                        297 	.ds 2
      000018                        298 _cursor_x::
      000018                        299 	.ds 2
      00001A                        300 _cursor_y::
      00001A                        301 	.ds 2
      00001C                        302 _textsize::
      00001C                        303 	.ds 1
      00001D                        304 _rotation::
      00001D                        305 	.ds 1
      00001E                        306 _textcolor::
      00001E                        307 	.ds 2
      000020                        308 _textbgcolor::
      000020                        309 	.ds 2
      000022                        310 __width::
      000022                        311 	.ds 2
      000024                        312 __height::
      000024                        313 	.ds 2
      000026                        314 _drawPixel_PARM_2:
      000026                        315 	.ds 2
      000028                        316 _drawPixel_PARM_3:
      000028                        317 	.ds 2
      00002A                        318 _drawCircle_PARM_2:
      00002A                        319 	.ds 2
      00002C                        320 _drawCircle_PARM_3:
      00002C                        321 	.ds 2
      00002E                        322 _drawCircle_PARM_4:
      00002E                        323 	.ds 2
      000030                        324 _drawCircle_x0_65536_103:
      000030                        325 	.ds 2
      000032                        326 _drawCircle_f_65536_104:
      000032                        327 	.ds 2
      000034                        328 _drawCircle_ddF_x_65536_104:
      000034                        329 	.ds 2
      000036                        330 _drawCircle_x_65536_104:
      000036                        331 	.ds 2
      000038                        332 _drawCircle_sloc0_1_0:
      000038                        333 	.ds 2
      00003A                        334 _drawCircle_sloc1_1_0:
      00003A                        335 	.ds 2
      00003C                        336 _drawCircle_sloc2_1_0:
      00003C                        337 	.ds 2
      00003E                        338 _testCircles_PARM_2:
      00003E                        339 	.ds 2
      000040                        340 _testCircles_w_65536_108:
      000040                        341 	.ds 2
      000042                        342 _testCircles_h_65536_108:
      000042                        343 	.ds 2
      000044                        344 _fillRect_PARM_2:
      000044                        345 	.ds 2
      000046                        346 _fillRect_PARM_3:
      000046                        347 	.ds 2
      000048                        348 _fillRect_PARM_4:
      000048                        349 	.ds 2
      00004A                        350 _fillRect_PARM_5:
      00004A                        351 	.ds 2
      00004C                        352 _drawChar_PARM_2:
      00004C                        353 	.ds 2
      00004E                        354 _drawChar_PARM_3:
      00004E                        355 	.ds 1
      00004F                        356 _drawChar_PARM_4:
      00004F                        357 	.ds 2
      000051                        358 _drawChar_PARM_5:
      000051                        359 	.ds 2
      000053                        360 _drawChar_PARM_6:
      000053                        361 	.ds 1
      000054                        362 _drawChar_i_65537_149:
      000054                        363 	.ds 1
      000055                        364 _drawChar_line_196609_151:
      000055                        365 	.ds 1
      000056                        366 _drawChar_j_196610_154:
      000056                        367 	.ds 1
      000057                        368 _drawChar_sloc1_1_0:
      000057                        369 	.ds 2
      000059                        370 _drawChar_sloc2_1_0:
      000059                        371 	.ds 2
      00005B                        372 _asciiToHex_store_65536_200:
      00005B                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; overlayable items in internal ram
                                    376 ;--------------------------------------------------------
                                    377 	.area	OSEG    (OVR,DATA)
      000000                        378 _iowrite8_PARM_2:
      000000                        379 	.ds 1
                                    380 	.area	OSEG    (OVR,DATA)
                                    381 	.area	OSEG    (OVR,DATA)
      000000                        382 _writeRegister8_PARM_2:
      000000                        383 	.ds 1
                                    384 	.area	OSEG    (OVR,DATA)
      000000                        385 _writeRegister16_PARM_2:
      000000                        386 	.ds 2
                                    387 	.area	OSEG    (OVR,DATA)
      000000                        388 _setCursor_PARM_2:
      000000                        389 	.ds 2
                                    390 	.area	OSEG    (OVR,DATA)
      000000                        391 _setTextColor_PARM_2:
      000000                        392 	.ds 2
                                    393 	.area	OSEG    (OVR,DATA)
                                    394 	.area	OSEG    (OVR,DATA)
      000000                        395 _setAddress_PARM_2:
      000000                        396 	.ds 2
      000002                        397 _setAddress_PARM_3:
      000002                        398 	.ds 2
      000004                        399 _setAddress_PARM_4:
      000004                        400 	.ds 2
                                    401 	.area	OSEG    (OVR,DATA)
                                    402 	.area	OSEG    (OVR,DATA)
                                    403 ;--------------------------------------------------------
                                    404 ; Stack segment in internal ram
                                    405 ;--------------------------------------------------------
                                    406 	.area	SSEG
      000000                        407 __start__stack:
      000000                        408 	.ds	1
                                    409 
                                    410 ;--------------------------------------------------------
                                    411 ; indirectly addressable internal ram data
                                    412 ;--------------------------------------------------------
                                    413 	.area ISEG    (DATA)
                                    414 ;--------------------------------------------------------
                                    415 ; absolute internal ram data
                                    416 ;--------------------------------------------------------
                                    417 	.area IABS    (ABS,DATA)
                                    418 	.area IABS    (ABS,DATA)
                                    419 ;--------------------------------------------------------
                                    420 ; bit data
                                    421 ;--------------------------------------------------------
                                    422 	.area BSEG    (BIT)
      000000                        423 _drawChar_sloc0_1_0:
      000000                        424 	.ds 1
      000001                        425 _convertAsciiHex_sloc0_1_0:
      000001                        426 	.ds 1
                                    427 ;--------------------------------------------------------
                                    428 ; paged external ram data
                                    429 ;--------------------------------------------------------
                                    430 	.area PSEG    (PAG,XDATA)
                                    431 ;--------------------------------------------------------
                                    432 ; external ram data
                                    433 ;--------------------------------------------------------
                                    434 	.area XSEG    (XDATA)
                                    435 ;--------------------------------------------------------
                                    436 ; absolute external ram data
                                    437 ;--------------------------------------------------------
                                    438 	.area XABS    (ABS,XDATA)
                                    439 ;--------------------------------------------------------
                                    440 ; external initialized ram data
                                    441 ;--------------------------------------------------------
                                    442 	.area XISEG   (XDATA)
                                    443 	.area HOME    (CODE)
                                    444 	.area GSINIT0 (CODE)
                                    445 	.area GSINIT1 (CODE)
                                    446 	.area GSINIT2 (CODE)
                                    447 	.area GSINIT3 (CODE)
                                    448 	.area GSINIT4 (CODE)
                                    449 	.area GSINIT5 (CODE)
                                    450 	.area GSINIT  (CODE)
                                    451 	.area GSFINAL (CODE)
                                    452 	.area CSEG    (CODE)
                                    453 ;--------------------------------------------------------
                                    454 ; interrupt vector
                                    455 ;--------------------------------------------------------
                                    456 	.area HOME    (CODE)
      000000                        457 __interrupt_vect:
      000000 02r00r00         [24]  458 	ljmp	__sdcc_gsinit_startup
                                    459 ;--------------------------------------------------------
                                    460 ; global & static initialisations
                                    461 ;--------------------------------------------------------
                                    462 	.area HOME    (CODE)
                                    463 	.area GSINIT  (CODE)
                                    464 	.area GSFINAL (CODE)
                                    465 	.area GSINIT  (CODE)
                                    466 	.globl __sdcc_gsinit_startup
                                    467 	.globl __sdcc_program_startup
                                    468 	.globl __start__stack
                                    469 	.globl __mcs51_genXINIT
                                    470 	.globl __mcs51_genXRAMCLEAR
                                    471 	.globl __mcs51_genRAMCLEAR
                                    472 ;	ecen4330_lcd_v3.c:4: uint8_t keypad[4][4] =	{{'1','4','7','E'},
      000000 75*00 31         [24]  473 	mov	_keypad,#0x31
      000003 75*01 34         [24]  474 	mov	(_keypad + 0x0001),#0x34
      000006 75*02 37         [24]  475 	mov	(_keypad + 0x0002),#0x37
      000009 75*03 45         [24]  476 	mov	(_keypad + 0x0003),#0x45
      00000C 75*04 32         [24]  477 	mov	(_keypad + 0x0004),#0x32
      00000F 75*05 35         [24]  478 	mov	(_keypad + 0x0005),#0x35
      000012 75*06 38         [24]  479 	mov	(_keypad + 0x0006),#0x38
      000015 75*07 30         [24]  480 	mov	(_keypad + 0x0007),#0x30
      000018 75*08 33         [24]  481 	mov	(_keypad + 0x0008),#0x33
      00001B 75*09 36         [24]  482 	mov	(_keypad + 0x0009),#0x36
      00001E 75*0A 39         [24]  483 	mov	(_keypad + 0x000a),#0x39
      000021 75*0B 46         [24]  484 	mov	(_keypad + 0x000b),#0x46
      000024 75*0C 41         [24]  485 	mov	(_keypad + 0x000c),#0x41
      000027 75*0D 42         [24]  486 	mov	(_keypad + 0x000d),#0x42
      00002A 75*0E 43         [24]  487 	mov	(_keypad + 0x000e),#0x43
      00002D 75*0F 44         [24]  488 	mov	(_keypad + 0x000f),#0x44
                                    489 ;	ecen4330_lcd_v3.c:9: __xdata uint8_t* lcd_address = (uint8_t __xdata*) __LCD_ADDRESS__;
      000030 75*12 00         [24]  490 	mov	_lcd_address,#0x00
      000033 75*13 40         [24]  491 	mov	(_lcd_address + 1),#0x40
                                    492 ;	ecen4330_lcd_v3.c:10: __xdata uint8_t* seg7_address = (uint8_t __xdata*) __SEG_7_ADDRESS__;
      000036 75*14 00         [24]  493 	mov	_seg7_address,#0x00
      000039 75*15 80         [24]  494 	mov	(_seg7_address + 1),#0x80
                                    495 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  496 	ljmp	__sdcc_program_startup
                                    497 ;--------------------------------------------------------
                                    498 ; Home
                                    499 ;--------------------------------------------------------
                                    500 	.area HOME    (CODE)
                                    501 	.area HOME    (CODE)
      000003                        502 __sdcc_program_startup:
      000003 02r0Fr1B         [24]  503 	ljmp	_main
                                    504 ;	return from main will return to caller
                                    505 ;--------------------------------------------------------
                                    506 ; code
                                    507 ;--------------------------------------------------------
                                    508 	.area CSEG    (CODE)
                                    509 ;------------------------------------------------------------
                                    510 ;Allocation info for local variables in function 'iowrite8'
                                    511 ;------------------------------------------------------------
                                    512 ;d                         Allocated with name '_iowrite8_PARM_2'
                                    513 ;map_address               Allocated to registers r6 r7 
                                    514 ;------------------------------------------------------------
                                    515 ;	ecen4330_lcd_v3.c:48: void iowrite8 (uint8_t __xdata* map_address, uint8_t d) {
                                    516 ;	-----------------------------------------
                                    517 ;	 function iowrite8
                                    518 ;	-----------------------------------------
      000000                        519 _iowrite8:
                           000007   520 	ar7 = 0x07
                           000006   521 	ar6 = 0x06
                           000005   522 	ar5 = 0x05
                           000004   523 	ar4 = 0x04
                           000003   524 	ar3 = 0x03
                           000002   525 	ar2 = 0x02
                           000001   526 	ar1 = 0x01
                           000000   527 	ar0 = 0x00
      000000 AE 82            [24]  528 	mov	r6,dpl
      000002 AF 83            [24]  529 	mov	r7,dph
                                    530 ;	ecen4330_lcd_v3.c:49: IOM = 1;
                                    531 ;	assignBit
      000004 D2 B4            [12]  532 	setb	_P3_4
                                    533 ;	ecen4330_lcd_v3.c:50: *map_address = d;
      000006 8E 82            [24]  534 	mov	dpl,r6
      000008 8F 83            [24]  535 	mov	dph,r7
      00000A E5*00            [12]  536 	mov	a,_iowrite8_PARM_2
      00000C F0               [24]  537 	movx	@dptr,a
                                    538 ;	ecen4330_lcd_v3.c:51: IOM = 0;
                                    539 ;	assignBit
      00000D C2 B4            [12]  540 	clr	_P3_4
                                    541 ;	ecen4330_lcd_v3.c:52: }
      00000F 22               [24]  542 	ret
                                    543 ;------------------------------------------------------------
                                    544 ;Allocation info for local variables in function 'delay'
                                    545 ;------------------------------------------------------------
                                    546 ;d                         Allocated to registers r6 r7 
                                    547 ;i                         Allocated to registers r4 r5 
                                    548 ;j                         Allocated to registers r2 r3 
                                    549 ;------------------------------------------------------------
                                    550 ;	ecen4330_lcd_v3.c:56: void delay (int16_t d)
                                    551 ;	-----------------------------------------
                                    552 ;	 function delay
                                    553 ;	-----------------------------------------
      000010                        554 _delay:
      000010 AE 82            [24]  555 	mov	r6,dpl
      000012 AF 83            [24]  556 	mov	r7,dph
                                    557 ;	ecen4330_lcd_v3.c:59: for (i=0;i<d;i++)
      000014 7C 00            [12]  558 	mov	r4,#0x00
      000016 7D 00            [12]  559 	mov	r5,#0x00
      000018                        560 00107$:
      000018 8C 02            [24]  561 	mov	ar2,r4
      00001A 8D 03            [24]  562 	mov	ar3,r5
      00001C C3               [12]  563 	clr	c
      00001D EA               [12]  564 	mov	a,r2
      00001E 9E               [12]  565 	subb	a,r6
      00001F EB               [12]  566 	mov	a,r3
      000020 64 80            [12]  567 	xrl	a,#0x80
      000022 8F F0            [24]  568 	mov	b,r7
      000024 63 F0 80         [24]  569 	xrl	b,#0x80
      000027 95 F0            [12]  570 	subb	a,b
      000029 50 14            [24]  571 	jnc	00109$
                                    572 ;	ecen4330_lcd_v3.c:61: for (j=0;j<1000;j++);
      00002B 7A E8            [12]  573 	mov	r2,#0xe8
      00002D 7B 03            [12]  574 	mov	r3,#0x03
      00002F                        575 00105$:
      00002F 1A               [12]  576 	dec	r2
      000030 BA FF 01         [24]  577 	cjne	r2,#0xff,00130$
      000033 1B               [12]  578 	dec	r3
      000034                        579 00130$:
      000034 EA               [12]  580 	mov	a,r2
      000035 4B               [12]  581 	orl	a,r3
      000036 70 F7            [24]  582 	jnz	00105$
                                    583 ;	ecen4330_lcd_v3.c:59: for (i=0;i<d;i++)
      000038 0C               [12]  584 	inc	r4
      000039 BC 00 DC         [24]  585 	cjne	r4,#0x00,00107$
      00003C 0D               [12]  586 	inc	r5
      00003D 80 D9            [24]  587 	sjmp	00107$
      00003F                        588 00109$:
                                    589 ;	ecen4330_lcd_v3.c:63: }
      00003F 22               [24]  590 	ret
                                    591 ;------------------------------------------------------------
                                    592 ;Allocation info for local variables in function 'writeRegister8'
                                    593 ;------------------------------------------------------------
                                    594 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    595 ;a                         Allocated to registers r7 
                                    596 ;------------------------------------------------------------
                                    597 ;	ecen4330_lcd_v3.c:73: void writeRegister8 (uint8_t a, uint8_t d) {
                                    598 ;	-----------------------------------------
                                    599 ;	 function writeRegister8
                                    600 ;	-----------------------------------------
      000040                        601 _writeRegister8:
      000040 AF 82            [24]  602 	mov	r7,dpl
                                    603 ;	ecen4330_lcd_v3.c:74: CD = __CMD__;
                                    604 ;	assignBit
      000042 C2 B5            [12]  605 	clr	_P3_5
                                    606 ;	ecen4330_lcd_v3.c:75: write8(a);
                                    607 ;	assignBit
      000044 D2 B4            [12]  608 	setb	_P3_4
      000046 85*12 82         [24]  609 	mov	dpl,_lcd_address
      000049 85*13 83         [24]  610 	mov	dph,(_lcd_address + 1)
      00004C EF               [12]  611 	mov	a,r7
      00004D F0               [24]  612 	movx	@dptr,a
                                    613 ;	assignBit
      00004E C2 B4            [12]  614 	clr	_P3_4
                                    615 ;	ecen4330_lcd_v3.c:76: CD = __DATA__;
                                    616 ;	assignBit
      000050 D2 B5            [12]  617 	setb	_P3_5
                                    618 ;	ecen4330_lcd_v3.c:77: write8(d);
                                    619 ;	assignBit
      000052 D2 B4            [12]  620 	setb	_P3_4
      000054 85*12 82         [24]  621 	mov	dpl,_lcd_address
      000057 85*13 83         [24]  622 	mov	dph,(_lcd_address + 1)
      00005A E5*00            [12]  623 	mov	a,_writeRegister8_PARM_2
      00005C F0               [24]  624 	movx	@dptr,a
                                    625 ;	assignBit
      00005D C2 B4            [12]  626 	clr	_P3_4
                                    627 ;	ecen4330_lcd_v3.c:78: }
      00005F 22               [24]  628 	ret
                                    629 ;------------------------------------------------------------
                                    630 ;Allocation info for local variables in function 'writeRegister16'
                                    631 ;------------------------------------------------------------
                                    632 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    633 ;a                         Allocated to registers r6 r7 
                                    634 ;hi                        Allocated to registers r7 
                                    635 ;lo                        Allocated to registers r6 
                                    636 ;------------------------------------------------------------
                                    637 ;	ecen4330_lcd_v3.c:82: void writeRegister16 (uint16_t a, uint16_t d) {
                                    638 ;	-----------------------------------------
                                    639 ;	 function writeRegister16
                                    640 ;	-----------------------------------------
      000060                        641 _writeRegister16:
      000060 AE 82            [24]  642 	mov	r6,dpl
      000062 AF 83            [24]  643 	mov	r7,dph
                                    644 ;	ecen4330_lcd_v3.c:84: hi = (a) >> 8;
      000064 8F 05            [24]  645 	mov	ar5,r7
                                    646 ;	ecen4330_lcd_v3.c:85: lo = (a);
                                    647 ;	ecen4330_lcd_v3.c:86: write8Reg(hi);
                                    648 ;	assignBit
      000066 C2 B5            [12]  649 	clr	_P3_5
                                    650 ;	assignBit
      000068 D2 B4            [12]  651 	setb	_P3_4
      00006A 85*12 82         [24]  652 	mov	dpl,_lcd_address
      00006D 85*13 83         [24]  653 	mov	dph,(_lcd_address + 1)
      000070 ED               [12]  654 	mov	a,r5
      000071 F0               [24]  655 	movx	@dptr,a
                                    656 ;	assignBit
      000072 C2 B4            [12]  657 	clr	_P3_4
                                    658 ;	ecen4330_lcd_v3.c:87: write8Reg(lo);
                                    659 ;	assignBit
      000074 C2 B5            [12]  660 	clr	_P3_5
                                    661 ;	assignBit
      000076 D2 B4            [12]  662 	setb	_P3_4
      000078 85*12 82         [24]  663 	mov	dpl,_lcd_address
      00007B 85*13 83         [24]  664 	mov	dph,(_lcd_address + 1)
      00007E EE               [12]  665 	mov	a,r6
      00007F F0               [24]  666 	movx	@dptr,a
                                    667 ;	assignBit
      000080 C2 B4            [12]  668 	clr	_P3_4
                                    669 ;	ecen4330_lcd_v3.c:88: hi = (d) >> 8;
      000082 AF*01            [24]  670 	mov	r7,(_writeRegister16_PARM_2 + 1)
                                    671 ;	ecen4330_lcd_v3.c:89: lo = (d);
      000084 AE*00            [24]  672 	mov	r6,_writeRegister16_PARM_2
                                    673 ;	ecen4330_lcd_v3.c:90: CD = 1 ;
                                    674 ;	assignBit
      000086 D2 B5            [12]  675 	setb	_P3_5
                                    676 ;	ecen4330_lcd_v3.c:91: write8Data(hi);
                                    677 ;	assignBit
      000088 D2 B5            [12]  678 	setb	_P3_5
                                    679 ;	assignBit
      00008A D2 B4            [12]  680 	setb	_P3_4
      00008C 85*12 82         [24]  681 	mov	dpl,_lcd_address
      00008F 85*13 83         [24]  682 	mov	dph,(_lcd_address + 1)
      000092 EF               [12]  683 	mov	a,r7
      000093 F0               [24]  684 	movx	@dptr,a
                                    685 ;	assignBit
      000094 C2 B4            [12]  686 	clr	_P3_4
                                    687 ;	ecen4330_lcd_v3.c:92: write8Data(lo);
                                    688 ;	assignBit
      000096 D2 B5            [12]  689 	setb	_P3_5
                                    690 ;	assignBit
      000098 D2 B4            [12]  691 	setb	_P3_4
      00009A 85*12 82         [24]  692 	mov	dpl,_lcd_address
      00009D 85*13 83         [24]  693 	mov	dph,(_lcd_address + 1)
      0000A0 EE               [12]  694 	mov	a,r6
      0000A1 F0               [24]  695 	movx	@dptr,a
                                    696 ;	assignBit
      0000A2 C2 B4            [12]  697 	clr	_P3_4
                                    698 ;	ecen4330_lcd_v3.c:93: }
      0000A4 22               [24]  699 	ret
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'setCursor'
                                    702 ;------------------------------------------------------------
                                    703 ;y                         Allocated with name '_setCursor_PARM_2'
                                    704 ;x                         Allocated to registers 
                                    705 ;------------------------------------------------------------
                                    706 ;	ecen4330_lcd_v3.c:101: void setCursor (uint16_t x, uint16_t y) {
                                    707 ;	-----------------------------------------
                                    708 ;	 function setCursor
                                    709 ;	-----------------------------------------
      0000A5                        710 _setCursor:
      0000A5 85 82*18         [24]  711 	mov	_cursor_x,dpl
      0000A8 85 83*19         [24]  712 	mov	(_cursor_x + 1),dph
                                    713 ;	ecen4330_lcd_v3.c:103: cursor_y = y;
      0000AB 85*00*1A         [24]  714 	mov	_cursor_y,_setCursor_PARM_2
      0000AE 85*01*1B         [24]  715 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                    716 ;	ecen4330_lcd_v3.c:104: }
      0000B1 22               [24]  717 	ret
                                    718 ;------------------------------------------------------------
                                    719 ;Allocation info for local variables in function 'setTextColor'
                                    720 ;------------------------------------------------------------
                                    721 ;y                         Allocated with name '_setTextColor_PARM_2'
                                    722 ;x                         Allocated to registers 
                                    723 ;------------------------------------------------------------
                                    724 ;	ecen4330_lcd_v3.c:111: void setTextColor (uint16_t x, uint16_t y) {
                                    725 ;	-----------------------------------------
                                    726 ;	 function setTextColor
                                    727 ;	-----------------------------------------
      0000B2                        728 _setTextColor:
      0000B2 85 82*1E         [24]  729 	mov	_textcolor,dpl
      0000B5 85 83*1F         [24]  730 	mov	(_textcolor + 1),dph
                                    731 ;	ecen4330_lcd_v3.c:113: textbgcolor = y;
      0000B8 85*00*20         [24]  732 	mov	_textbgcolor,_setTextColor_PARM_2
      0000BB 85*01*21         [24]  733 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                    734 ;	ecen4330_lcd_v3.c:114: }
      0000BE 22               [24]  735 	ret
                                    736 ;------------------------------------------------------------
                                    737 ;Allocation info for local variables in function 'setTextSize'
                                    738 ;------------------------------------------------------------
                                    739 ;s                         Allocated to registers r7 
                                    740 ;------------------------------------------------------------
                                    741 ;	ecen4330_lcd_v3.c:121: void setTextSize (uint8_t s) {
                                    742 ;	-----------------------------------------
                                    743 ;	 function setTextSize
                                    744 ;	-----------------------------------------
      0000BF                        745 _setTextSize:
                                    746 ;	ecen4330_lcd_v3.c:122: if (s > 8) return;
      0000BF E5 82            [12]  747 	mov	a,dpl
      0000C1 FF               [12]  748 	mov	r7,a
      0000C2 24 F7            [12]  749 	add	a,#0xff - 0x08
      0000C4 50 01            [24]  750 	jnc	00102$
      0000C6 22               [24]  751 	ret
      0000C7                        752 00102$:
                                    753 ;	ecen4330_lcd_v3.c:123: textsize = (s>0) ? s : 1 ;
      0000C7 EF               [12]  754 	mov	a,r7
      0000C8 60 06            [24]  755 	jz	00105$
      0000CA 8F 06            [24]  756 	mov	ar6,r7
      0000CC 7F 00            [12]  757 	mov	r7,#0x00
      0000CE 80 04            [24]  758 	sjmp	00106$
      0000D0                        759 00105$:
      0000D0 7E 01            [12]  760 	mov	r6,#0x01
      0000D2 7F 00            [12]  761 	mov	r7,#0x00
      0000D4                        762 00106$:
      0000D4 8E*1C            [24]  763 	mov	_textsize,r6
                                    764 ;	ecen4330_lcd_v3.c:124: }
      0000D6 22               [24]  765 	ret
                                    766 ;------------------------------------------------------------
                                    767 ;Allocation info for local variables in function 'setRotation'
                                    768 ;------------------------------------------------------------
                                    769 ;flag                      Allocated to registers r7 
                                    770 ;------------------------------------------------------------
                                    771 ;	ecen4330_lcd_v3.c:136: void setRotation (uint8_t flag) {
                                    772 ;	-----------------------------------------
                                    773 ;	 function setRotation
                                    774 ;	-----------------------------------------
      0000D7                        775 _setRotation:
                                    776 ;	ecen4330_lcd_v3.c:137: switch(flag) {
      0000D7 E5 82            [12]  777 	mov	a,dpl
      0000D9 FF               [12]  778 	mov	r7,a
      0000DA 24 FC            [12]  779 	add	a,#0xff - 0x03
      0000DC 40 4E            [24]  780 	jc	00105$
      0000DE EF               [12]  781 	mov	a,r7
      0000DF 2F               [12]  782 	add	a,r7
                                    783 ;	ecen4330_lcd_v3.c:138: case 0:
      0000E0 90r00rE4         [24]  784 	mov	dptr,#00115$
      0000E3 73               [24]  785 	jmp	@a+dptr
      0000E4                        786 00115$:
      0000E4 80 06            [24]  787 	sjmp	00101$
      0000E6 80 14            [24]  788 	sjmp	00102$
      0000E8 80 22            [24]  789 	sjmp	00103$
      0000EA 80 30            [24]  790 	sjmp	00104$
      0000EC                        791 00101$:
                                    792 ;	ecen4330_lcd_v3.c:139: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0000EC 7F 48            [12]  793 	mov	r7,#0x48
                                    794 ;	ecen4330_lcd_v3.c:140: _width = TFTWIDTH;
      0000EE 75*22 F0         [24]  795 	mov	__width,#0xf0
      0000F1 75*23 00         [24]  796 	mov	(__width + 1),#0x00
                                    797 ;	ecen4330_lcd_v3.c:141: _height = TFTHEIGHT;
      0000F4 75*24 40         [24]  798 	mov	__height,#0x40
      0000F7 75*25 01         [24]  799 	mov	(__height + 1),#0x01
                                    800 ;	ecen4330_lcd_v3.c:142: break;
                                    801 ;	ecen4330_lcd_v3.c:143: case 1:
      0000FA 80 3E            [24]  802 	sjmp	00106$
      0000FC                        803 00102$:
                                    804 ;	ecen4330_lcd_v3.c:144: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0000FC 7F 28            [12]  805 	mov	r7,#0x28
                                    806 ;	ecen4330_lcd_v3.c:145: _width = TFTHEIGHT;
      0000FE 75*22 40         [24]  807 	mov	__width,#0x40
      000101 75*23 01         [24]  808 	mov	(__width + 1),#0x01
                                    809 ;	ecen4330_lcd_v3.c:146: _height = TFTWIDTH;
      000104 75*24 F0         [24]  810 	mov	__height,#0xf0
      000107 75*25 00         [24]  811 	mov	(__height + 1),#0x00
                                    812 ;	ecen4330_lcd_v3.c:147: break;
                                    813 ;	ecen4330_lcd_v3.c:148: case 2:
      00010A 80 2E            [24]  814 	sjmp	00106$
      00010C                        815 00103$:
                                    816 ;	ecen4330_lcd_v3.c:149: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00010C 7F 88            [12]  817 	mov	r7,#0x88
                                    818 ;	ecen4330_lcd_v3.c:150: _width = TFTWIDTH;
      00010E 75*22 F0         [24]  819 	mov	__width,#0xf0
      000111 75*23 00         [24]  820 	mov	(__width + 1),#0x00
                                    821 ;	ecen4330_lcd_v3.c:151: _height = TFTHEIGHT;
      000114 75*24 40         [24]  822 	mov	__height,#0x40
      000117 75*25 01         [24]  823 	mov	(__height + 1),#0x01
                                    824 ;	ecen4330_lcd_v3.c:152: break;
                                    825 ;	ecen4330_lcd_v3.c:153: case 3:
      00011A 80 1E            [24]  826 	sjmp	00106$
      00011C                        827 00104$:
                                    828 ;	ecen4330_lcd_v3.c:154: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00011C 7F E8            [12]  829 	mov	r7,#0xe8
                                    830 ;	ecen4330_lcd_v3.c:155: _width = TFTHEIGHT;
      00011E 75*22 40         [24]  831 	mov	__width,#0x40
      000121 75*23 01         [24]  832 	mov	(__width + 1),#0x01
                                    833 ;	ecen4330_lcd_v3.c:156: _height = TFTWIDTH;
      000124 75*24 F0         [24]  834 	mov	__height,#0xf0
      000127 75*25 00         [24]  835 	mov	(__height + 1),#0x00
                                    836 ;	ecen4330_lcd_v3.c:157: break;
                                    837 ;	ecen4330_lcd_v3.c:158: default:
      00012A 80 0E            [24]  838 	sjmp	00106$
      00012C                        839 00105$:
                                    840 ;	ecen4330_lcd_v3.c:159: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00012C 7F 48            [12]  841 	mov	r7,#0x48
                                    842 ;	ecen4330_lcd_v3.c:160: _width = TFTWIDTH;
      00012E 75*22 F0         [24]  843 	mov	__width,#0xf0
      000131 75*23 00         [24]  844 	mov	(__width + 1),#0x00
                                    845 ;	ecen4330_lcd_v3.c:161: _height = TFTHEIGHT;
      000134 75*24 40         [24]  846 	mov	__height,#0x40
      000137 75*25 01         [24]  847 	mov	(__height + 1),#0x01
                                    848 ;	ecen4330_lcd_v3.c:163: }
      00013A                        849 00106$:
                                    850 ;	ecen4330_lcd_v3.c:164: writeRegister8(ILI9341_MEMCONTROL, flag);
      00013A 8F*00            [24]  851 	mov	_writeRegister8_PARM_2,r7
      00013C 75 82 36         [24]  852 	mov	dpl,#0x36
                                    853 ;	ecen4330_lcd_v3.c:165: }
      00013F 02r00r40         [24]  854 	ljmp	_writeRegister8
                                    855 ;------------------------------------------------------------
                                    856 ;Allocation info for local variables in function 'setAddress'
                                    857 ;------------------------------------------------------------
                                    858 ;y1                        Allocated with name '_setAddress_PARM_2'
                                    859 ;x2                        Allocated with name '_setAddress_PARM_3'
                                    860 ;y2                        Allocated with name '_setAddress_PARM_4'
                                    861 ;x1                        Allocated to registers r6 r7 
                                    862 ;------------------------------------------------------------
                                    863 ;	ecen4330_lcd_v3.c:167: void setAddress (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
                                    864 ;	-----------------------------------------
                                    865 ;	 function setAddress
                                    866 ;	-----------------------------------------
      000142                        867 _setAddress:
      000142 AE 82            [24]  868 	mov	r6,dpl
      000144 AF 83            [24]  869 	mov	r7,dph
                                    870 ;	ecen4330_lcd_v3.c:168: write8Reg(0x2A);
                                    871 ;	assignBit
      000146 C2 B5            [12]  872 	clr	_P3_5
                                    873 ;	assignBit
      000148 D2 B4            [12]  874 	setb	_P3_4
      00014A 85*12 82         [24]  875 	mov	dpl,_lcd_address
      00014D 85*13 83         [24]  876 	mov	dph,(_lcd_address + 1)
      000150 74 2A            [12]  877 	mov	a,#0x2a
      000152 F0               [24]  878 	movx	@dptr,a
                                    879 ;	assignBit
      000153 C2 B4            [12]  880 	clr	_P3_4
                                    881 ;	ecen4330_lcd_v3.c:169: write8Data(x1 >> 8);
                                    882 ;	assignBit
      000155 D2 B5            [12]  883 	setb	_P3_5
                                    884 ;	assignBit
      000157 D2 B4            [12]  885 	setb	_P3_4
      000159 85*12 82         [24]  886 	mov	dpl,_lcd_address
      00015C 85*13 83         [24]  887 	mov	dph,(_lcd_address + 1)
      00015F 8F 05            [24]  888 	mov	ar5,r7
      000161 ED               [12]  889 	mov	a,r5
      000162 F0               [24]  890 	movx	@dptr,a
                                    891 ;	assignBit
      000163 C2 B4            [12]  892 	clr	_P3_4
                                    893 ;	ecen4330_lcd_v3.c:170: write8Data(x1);
                                    894 ;	assignBit
      000165 D2 B5            [12]  895 	setb	_P3_5
                                    896 ;	assignBit
      000167 D2 B4            [12]  897 	setb	_P3_4
      000169 85*12 82         [24]  898 	mov	dpl,_lcd_address
      00016C 85*13 83         [24]  899 	mov	dph,(_lcd_address + 1)
      00016F EE               [12]  900 	mov	a,r6
      000170 F0               [24]  901 	movx	@dptr,a
                                    902 ;	assignBit
      000171 C2 B4            [12]  903 	clr	_P3_4
                                    904 ;	ecen4330_lcd_v3.c:171: write8Data(x2 >> 8);
                                    905 ;	assignBit
      000173 D2 B5            [12]  906 	setb	_P3_5
                                    907 ;	assignBit
      000175 D2 B4            [12]  908 	setb	_P3_4
      000177 85*12 82         [24]  909 	mov	dpl,_lcd_address
      00017A 85*13 83         [24]  910 	mov	dph,(_lcd_address + 1)
      00017D E5*03            [12]  911 	mov	a,(_setAddress_PARM_3 + 1)
      00017F F0               [24]  912 	movx	@dptr,a
                                    913 ;	assignBit
      000180 C2 B4            [12]  914 	clr	_P3_4
                                    915 ;	ecen4330_lcd_v3.c:172: write8Data(x2);
                                    916 ;	assignBit
      000182 D2 B5            [12]  917 	setb	_P3_5
                                    918 ;	assignBit
      000184 D2 B4            [12]  919 	setb	_P3_4
      000186 85*12 82         [24]  920 	mov	dpl,_lcd_address
      000189 85*13 83         [24]  921 	mov	dph,(_lcd_address + 1)
      00018C E5*02            [12]  922 	mov	a,_setAddress_PARM_3
      00018E F0               [24]  923 	movx	@dptr,a
                                    924 ;	assignBit
      00018F C2 B4            [12]  925 	clr	_P3_4
                                    926 ;	ecen4330_lcd_v3.c:174: write8Reg(0x2B);
                                    927 ;	assignBit
      000191 C2 B5            [12]  928 	clr	_P3_5
                                    929 ;	assignBit
      000193 D2 B4            [12]  930 	setb	_P3_4
      000195 85*12 82         [24]  931 	mov	dpl,_lcd_address
      000198 85*13 83         [24]  932 	mov	dph,(_lcd_address + 1)
      00019B 74 2B            [12]  933 	mov	a,#0x2b
      00019D F0               [24]  934 	movx	@dptr,a
                                    935 ;	assignBit
      00019E C2 B4            [12]  936 	clr	_P3_4
                                    937 ;	ecen4330_lcd_v3.c:175: write8Data(y1 >> 8);
                                    938 ;	assignBit
      0001A0 D2 B5            [12]  939 	setb	_P3_5
                                    940 ;	assignBit
      0001A2 D2 B4            [12]  941 	setb	_P3_4
      0001A4 85*12 82         [24]  942 	mov	dpl,_lcd_address
      0001A7 85*13 83         [24]  943 	mov	dph,(_lcd_address + 1)
      0001AA E5*01            [12]  944 	mov	a,(_setAddress_PARM_2 + 1)
      0001AC F0               [24]  945 	movx	@dptr,a
                                    946 ;	assignBit
      0001AD C2 B4            [12]  947 	clr	_P3_4
                                    948 ;	ecen4330_lcd_v3.c:176: write8Data(y1);
                                    949 ;	assignBit
      0001AF D2 B5            [12]  950 	setb	_P3_5
                                    951 ;	assignBit
      0001B1 D2 B4            [12]  952 	setb	_P3_4
      0001B3 85*12 82         [24]  953 	mov	dpl,_lcd_address
      0001B6 85*13 83         [24]  954 	mov	dph,(_lcd_address + 1)
      0001B9 E5*00            [12]  955 	mov	a,_setAddress_PARM_2
      0001BB F0               [24]  956 	movx	@dptr,a
                                    957 ;	assignBit
      0001BC C2 B4            [12]  958 	clr	_P3_4
                                    959 ;	ecen4330_lcd_v3.c:177: write8Data(y2 >> 8);
                                    960 ;	assignBit
      0001BE D2 B5            [12]  961 	setb	_P3_5
                                    962 ;	assignBit
      0001C0 D2 B4            [12]  963 	setb	_P3_4
      0001C2 85*12 82         [24]  964 	mov	dpl,_lcd_address
      0001C5 85*13 83         [24]  965 	mov	dph,(_lcd_address + 1)
      0001C8 E5*05            [12]  966 	mov	a,(_setAddress_PARM_4 + 1)
      0001CA F0               [24]  967 	movx	@dptr,a
                                    968 ;	assignBit
      0001CB C2 B4            [12]  969 	clr	_P3_4
                                    970 ;	ecen4330_lcd_v3.c:178: write8Data(y2);
                                    971 ;	assignBit
      0001CD D2 B5            [12]  972 	setb	_P3_5
                                    973 ;	assignBit
      0001CF D2 B4            [12]  974 	setb	_P3_4
      0001D1 85*12 82         [24]  975 	mov	dpl,_lcd_address
      0001D4 85*13 83         [24]  976 	mov	dph,(_lcd_address + 1)
      0001D7 E5*04            [12]  977 	mov	a,_setAddress_PARM_4
      0001D9 F0               [24]  978 	movx	@dptr,a
                                    979 ;	assignBit
      0001DA C2 B4            [12]  980 	clr	_P3_4
                                    981 ;	ecen4330_lcd_v3.c:179: }
      0001DC 22               [24]  982 	ret
                                    983 ;------------------------------------------------------------
                                    984 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                    985 ;------------------------------------------------------------
                                    986 ;	ecen4330_lcd_v3.c:185: void TFT_LCD_INIT (void) {
                                    987 ;	-----------------------------------------
                                    988 ;	 function TFT_LCD_INIT
                                    989 ;	-----------------------------------------
      0001DD                        990 _TFT_LCD_INIT:
                                    991 ;	ecen4330_lcd_v3.c:186: _width = TFTWIDTH;
      0001DD 75*22 F0         [24]  992 	mov	__width,#0xf0
      0001E0 75*23 00         [24]  993 	mov	(__width + 1),#0x00
                                    994 ;	ecen4330_lcd_v3.c:187: _height = TFTHEIGHT;
      0001E3 75*24 40         [24]  995 	mov	__height,#0x40
      0001E6 75*25 01         [24]  996 	mov	(__height + 1),#0x01
                                    997 ;	ecen4330_lcd_v3.c:189: IOM = 0;
                                    998 ;	assignBit
      0001E9 C2 B4            [12]  999 	clr	_P3_4
                                   1000 ;	ecen4330_lcd_v3.c:190: CD = 1;
                                   1001 ;	assignBit
      0001EB D2 B5            [12] 1002 	setb	_P3_5
                                   1003 ;	ecen4330_lcd_v3.c:192: write8Reg(0x00);
                                   1004 ;	assignBit
      0001ED C2 B5            [12] 1005 	clr	_P3_5
                                   1006 ;	assignBit
      0001EF D2 B4            [12] 1007 	setb	_P3_4
      0001F1 85*12 82         [24] 1008 	mov	dpl,_lcd_address
      0001F4 85*13 83         [24] 1009 	mov	dph,(_lcd_address + 1)
      0001F7 E4               [12] 1010 	clr	a
      0001F8 F0               [24] 1011 	movx	@dptr,a
                                   1012 ;	assignBit
      0001F9 C2 B4            [12] 1013 	clr	_P3_4
                                   1014 ;	ecen4330_lcd_v3.c:193: write8Data(0x00);
                                   1015 ;	assignBit
      0001FB D2 B5            [12] 1016 	setb	_P3_5
                                   1017 ;	assignBit
      0001FD D2 B4            [12] 1018 	setb	_P3_4
      0001FF 85*12 82         [24] 1019 	mov	dpl,_lcd_address
      000202 85*13 83         [24] 1020 	mov	dph,(_lcd_address + 1)
      000205 E4               [12] 1021 	clr	a
      000206 F0               [24] 1022 	movx	@dptr,a
                                   1023 ;	assignBit
      000207 C2 B4            [12] 1024 	clr	_P3_4
                                   1025 ;	ecen4330_lcd_v3.c:194: write8Data(0x00);
                                   1026 ;	assignBit
      000209 D2 B5            [12] 1027 	setb	_P3_5
                                   1028 ;	assignBit
      00020B D2 B4            [12] 1029 	setb	_P3_4
      00020D 85*12 82         [24] 1030 	mov	dpl,_lcd_address
      000210 85*13 83         [24] 1031 	mov	dph,(_lcd_address + 1)
      000213 E4               [12] 1032 	clr	a
      000214 F0               [24] 1033 	movx	@dptr,a
                                   1034 ;	assignBit
      000215 C2 B4            [12] 1035 	clr	_P3_4
                                   1036 ;	ecen4330_lcd_v3.c:195: write8Data(0x00);
                                   1037 ;	assignBit
      000217 D2 B5            [12] 1038 	setb	_P3_5
                                   1039 ;	assignBit
      000219 D2 B4            [12] 1040 	setb	_P3_4
      00021B 85*12 82         [24] 1041 	mov	dpl,_lcd_address
      00021E 85*13 83         [24] 1042 	mov	dph,(_lcd_address + 1)
      000221 E4               [12] 1043 	clr	a
      000222 F0               [24] 1044 	movx	@dptr,a
                                   1045 ;	assignBit
      000223 C2 B4            [12] 1046 	clr	_P3_4
                                   1047 ;	ecen4330_lcd_v3.c:196: delay(200);
      000225 90 00 C8         [24] 1048 	mov	dptr,#0x00c8
      000228 12r00r10         [24] 1049 	lcall	_delay
                                   1050 ;	ecen4330_lcd_v3.c:198: writeRegister8(ILI9341_SOFTRESET, 0);
      00022B 75*00 00         [24] 1051 	mov	_writeRegister8_PARM_2,#0x00
      00022E 75 82 01         [24] 1052 	mov	dpl,#0x01
      000231 12r00r40         [24] 1053 	lcall	_writeRegister8
                                   1054 ;	ecen4330_lcd_v3.c:199: delay(50);
      000234 90 00 32         [24] 1055 	mov	dptr,#0x0032
      000237 12r00r10         [24] 1056 	lcall	_delay
                                   1057 ;	ecen4330_lcd_v3.c:200: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00023A 75*00 00         [24] 1058 	mov	_writeRegister8_PARM_2,#0x00
      00023D 75 82 28         [24] 1059 	mov	dpl,#0x28
      000240 12r00r40         [24] 1060 	lcall	_writeRegister8
                                   1061 ;	ecen4330_lcd_v3.c:201: delay(10);
      000243 90 00 0A         [24] 1062 	mov	dptr,#0x000a
      000246 12r00r10         [24] 1063 	lcall	_delay
                                   1064 ;	ecen4330_lcd_v3.c:203: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000249 75*00 23         [24] 1065 	mov	_writeRegister8_PARM_2,#0x23
      00024C 75 82 C0         [24] 1066 	mov	dpl,#0xc0
      00024F 12r00r40         [24] 1067 	lcall	_writeRegister8
                                   1068 ;	ecen4330_lcd_v3.c:204: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000252 75*00 11         [24] 1069 	mov	_writeRegister8_PARM_2,#0x11
      000255 75 82 C1         [24] 1070 	mov	dpl,#0xc1
      000258 12r00r40         [24] 1071 	lcall	_writeRegister8
                                   1072 ;	ecen4330_lcd_v3.c:205: write8Reg(ILI9341_VCOMCONTROL1);
                                   1073 ;	assignBit
      00025B C2 B5            [12] 1074 	clr	_P3_5
                                   1075 ;	assignBit
      00025D D2 B4            [12] 1076 	setb	_P3_4
      00025F 85*12 82         [24] 1077 	mov	dpl,_lcd_address
      000262 85*13 83         [24] 1078 	mov	dph,(_lcd_address + 1)
      000265 74 C5            [12] 1079 	mov	a,#0xc5
      000267 F0               [24] 1080 	movx	@dptr,a
                                   1081 ;	assignBit
      000268 C2 B4            [12] 1082 	clr	_P3_4
                                   1083 ;	ecen4330_lcd_v3.c:206: write8Data(0x3d);
                                   1084 ;	assignBit
      00026A D2 B5            [12] 1085 	setb	_P3_5
                                   1086 ;	assignBit
      00026C D2 B4            [12] 1087 	setb	_P3_4
      00026E 85*12 82         [24] 1088 	mov	dpl,_lcd_address
      000271 85*13 83         [24] 1089 	mov	dph,(_lcd_address + 1)
      000274 74 3D            [12] 1090 	mov	a,#0x3d
      000276 F0               [24] 1091 	movx	@dptr,a
                                   1092 ;	assignBit
      000277 C2 B4            [12] 1093 	clr	_P3_4
                                   1094 ;	ecen4330_lcd_v3.c:207: write8Data(0x30);
                                   1095 ;	assignBit
      000279 D2 B5            [12] 1096 	setb	_P3_5
                                   1097 ;	assignBit
      00027B D2 B4            [12] 1098 	setb	_P3_4
      00027D 85*12 82         [24] 1099 	mov	dpl,_lcd_address
      000280 85*13 83         [24] 1100 	mov	dph,(_lcd_address + 1)
      000283 74 30            [12] 1101 	mov	a,#0x30
      000285 F0               [24] 1102 	movx	@dptr,a
                                   1103 ;	assignBit
      000286 C2 B4            [12] 1104 	clr	_P3_4
                                   1105 ;	ecen4330_lcd_v3.c:208: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000288 75*00 AA         [24] 1106 	mov	_writeRegister8_PARM_2,#0xaa
      00028B 75 82 C7         [24] 1107 	mov	dpl,#0xc7
      00028E 12r00r40         [24] 1108 	lcall	_writeRegister8
                                   1109 ;	ecen4330_lcd_v3.c:209: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000291 75*00 88         [24] 1110 	mov	_writeRegister8_PARM_2,#0x88
      000294 75 82 36         [24] 1111 	mov	dpl,#0x36
      000297 12r00r40         [24] 1112 	lcall	_writeRegister8
                                   1113 ;	ecen4330_lcd_v3.c:210: write8Reg(ILI9341_PIXELFORMAT);
                                   1114 ;	assignBit
      00029A C2 B5            [12] 1115 	clr	_P3_5
                                   1116 ;	assignBit
      00029C D2 B4            [12] 1117 	setb	_P3_4
      00029E 85*12 82         [24] 1118 	mov	dpl,_lcd_address
      0002A1 85*13 83         [24] 1119 	mov	dph,(_lcd_address + 1)
      0002A4 74 3A            [12] 1120 	mov	a,#0x3a
      0002A6 F0               [24] 1121 	movx	@dptr,a
                                   1122 ;	assignBit
      0002A7 C2 B4            [12] 1123 	clr	_P3_4
                                   1124 ;	ecen4330_lcd_v3.c:211: write8Data(0x55);write8Data(0x00);
                                   1125 ;	assignBit
      0002A9 D2 B5            [12] 1126 	setb	_P3_5
                                   1127 ;	assignBit
      0002AB D2 B4            [12] 1128 	setb	_P3_4
      0002AD 85*12 82         [24] 1129 	mov	dpl,_lcd_address
      0002B0 85*13 83         [24] 1130 	mov	dph,(_lcd_address + 1)
      0002B3 74 55            [12] 1131 	mov	a,#0x55
      0002B5 F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	assignBit
      0002B6 C2 B4            [12] 1134 	clr	_P3_4
                                   1135 ;	assignBit
      0002B8 D2 B5            [12] 1136 	setb	_P3_5
                                   1137 ;	assignBit
      0002BA D2 B4            [12] 1138 	setb	_P3_4
      0002BC 85*12 82         [24] 1139 	mov	dpl,_lcd_address
      0002BF 85*13 83         [24] 1140 	mov	dph,(_lcd_address + 1)
      0002C2 E4               [12] 1141 	clr	a
      0002C3 F0               [24] 1142 	movx	@dptr,a
                                   1143 ;	assignBit
      0002C4 C2 B4            [12] 1144 	clr	_P3_4
                                   1145 ;	ecen4330_lcd_v3.c:212: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0002C6 75*00 1B         [24] 1146 	mov	_writeRegister16_PARM_2,#0x1b
      0002C9 75*01 00         [24] 1147 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0002CC 90 00 B1         [24] 1148 	mov	dptr,#0x00b1
      0002CF 12r00r60         [24] 1149 	lcall	_writeRegister16
                                   1150 ;	ecen4330_lcd_v3.c:214: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0002D2 75*00 07         [24] 1151 	mov	_writeRegister8_PARM_2,#0x07
      0002D5 75 82 B7         [24] 1152 	mov	dpl,#0xb7
      0002D8 12r00r40         [24] 1153 	lcall	_writeRegister8
                                   1154 ;	ecen4330_lcd_v3.c:216: writeRegister8(ILI9341_SLEEPOUT, 0);
      0002DB 75*00 00         [24] 1155 	mov	_writeRegister8_PARM_2,#0x00
      0002DE 75 82 11         [24] 1156 	mov	dpl,#0x11
      0002E1 12r00r40         [24] 1157 	lcall	_writeRegister8
                                   1158 ;	ecen4330_lcd_v3.c:217: delay(150);
      0002E4 90 00 96         [24] 1159 	mov	dptr,#0x0096
      0002E7 12r00r10         [24] 1160 	lcall	_delay
                                   1161 ;	ecen4330_lcd_v3.c:218: writeRegister8(ILI9341_DISPLAYON, 0);
      0002EA 75*00 00         [24] 1162 	mov	_writeRegister8_PARM_2,#0x00
      0002ED 75 82 29         [24] 1163 	mov	dpl,#0x29
      0002F0 12r00r40         [24] 1164 	lcall	_writeRegister8
                                   1165 ;	ecen4330_lcd_v3.c:219: delay(500);
      0002F3 90 01 F4         [24] 1166 	mov	dptr,#0x01f4
      0002F6 12r00r10         [24] 1167 	lcall	_delay
                                   1168 ;	ecen4330_lcd_v3.c:220: setAddress(0,0,_width-1,_height-1);
      0002F9 AE*22            [24] 1169 	mov	r6,__width
      0002FB AF*23            [24] 1170 	mov	r7,(__width + 1)
      0002FD 1E               [12] 1171 	dec	r6
      0002FE BE FF 01         [24] 1172 	cjne	r6,#0xff,00103$
      000301 1F               [12] 1173 	dec	r7
      000302                       1174 00103$:
      000302 8E*02            [24] 1175 	mov	_setAddress_PARM_3,r6
      000304 8F*03            [24] 1176 	mov	(_setAddress_PARM_3 + 1),r7
      000306 AE*24            [24] 1177 	mov	r6,__height
      000308 AF*25            [24] 1178 	mov	r7,(__height + 1)
      00030A 1E               [12] 1179 	dec	r6
      00030B BE FF 01         [24] 1180 	cjne	r6,#0xff,00104$
      00030E 1F               [12] 1181 	dec	r7
      00030F                       1182 00104$:
      00030F 8E*04            [24] 1183 	mov	_setAddress_PARM_4,r6
      000311 8F*05            [24] 1184 	mov	(_setAddress_PARM_4 + 1),r7
      000313 E4               [12] 1185 	clr	a
      000314 F5*00            [12] 1186 	mov	_setAddress_PARM_2,a
      000316 F5*01            [12] 1187 	mov	(_setAddress_PARM_2 + 1),a
      000318 90 00 00         [24] 1188 	mov	dptr,#0x0000
                                   1189 ;	ecen4330_lcd_v3.c:221: }
      00031B 02r01r42         [24] 1190 	ljmp	_setAddress
                                   1191 ;------------------------------------------------------------
                                   1192 ;Allocation info for local variables in function 'drawPixel'
                                   1193 ;------------------------------------------------------------
                                   1194 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   1195 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   1196 ;x3                        Allocated to registers r6 r7 
                                   1197 ;------------------------------------------------------------
                                   1198 ;	ecen4330_lcd_v3.c:230: void drawPixel(uint16_t x3,uint16_t y3,uint16_t color1)
                                   1199 ;	-----------------------------------------
                                   1200 ;	 function drawPixel
                                   1201 ;	-----------------------------------------
      00031E                       1202 _drawPixel:
      00031E AE 82            [24] 1203 	mov	r6,dpl
      000320 AF 83            [24] 1204 	mov	r7,dph
                                   1205 ;	ecen4330_lcd_v3.c:232: setAddress(x3,y3,x3+1,y3+1);
      000322 8E 04            [24] 1206 	mov	ar4,r6
      000324 8F 05            [24] 1207 	mov	ar5,r7
      000326 0C               [12] 1208 	inc	r4
      000327 BC 00 01         [24] 1209 	cjne	r4,#0x00,00103$
      00032A 0D               [12] 1210 	inc	r5
      00032B                       1211 00103$:
      00032B 8C*02            [24] 1212 	mov	_setAddress_PARM_3,r4
      00032D 8D*03            [24] 1213 	mov	(_setAddress_PARM_3 + 1),r5
      00032F AC*26            [24] 1214 	mov	r4,_drawPixel_PARM_2
      000331 AD*27            [24] 1215 	mov	r5,(_drawPixel_PARM_2 + 1)
      000333 0C               [12] 1216 	inc	r4
      000334 BC 00 01         [24] 1217 	cjne	r4,#0x00,00104$
      000337 0D               [12] 1218 	inc	r5
      000338                       1219 00104$:
      000338 8C*04            [24] 1220 	mov	_setAddress_PARM_4,r4
      00033A 8D*05            [24] 1221 	mov	(_setAddress_PARM_4 + 1),r5
      00033C 85*26*00         [24] 1222 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00033F 85*27*01         [24] 1223 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000342 8E 82            [24] 1224 	mov	dpl,r6
      000344 8F 83            [24] 1225 	mov	dph,r7
      000346 12r01r42         [24] 1226 	lcall	_setAddress
                                   1227 ;	ecen4330_lcd_v3.c:234: CD=0; write8(0x2C);
                                   1228 ;	assignBit
      000349 C2 B5            [12] 1229 	clr	_P3_5
                                   1230 ;	assignBit
      00034B D2 B4            [12] 1231 	setb	_P3_4
      00034D 85*12 82         [24] 1232 	mov	dpl,_lcd_address
      000350 85*13 83         [24] 1233 	mov	dph,(_lcd_address + 1)
      000353 74 2C            [12] 1234 	mov	a,#0x2c
      000355 F0               [24] 1235 	movx	@dptr,a
                                   1236 ;	assignBit
      000356 C2 B4            [12] 1237 	clr	_P3_4
                                   1238 ;	ecen4330_lcd_v3.c:236: CD = 1;
                                   1239 ;	assignBit
      000358 D2 B5            [12] 1240 	setb	_P3_5
                                   1241 ;	ecen4330_lcd_v3.c:237: write8(color1>>8);write8(color1);
                                   1242 ;	assignBit
      00035A D2 B4            [12] 1243 	setb	_P3_4
      00035C 85*12 82         [24] 1244 	mov	dpl,_lcd_address
      00035F 85*13 83         [24] 1245 	mov	dph,(_lcd_address + 1)
      000362 E5*29            [12] 1246 	mov	a,(_drawPixel_PARM_3 + 1)
      000364 F0               [24] 1247 	movx	@dptr,a
                                   1248 ;	assignBit
      000365 C2 B4            [12] 1249 	clr	_P3_4
                                   1250 ;	assignBit
      000367 D2 B4            [12] 1251 	setb	_P3_4
      000369 85*12 82         [24] 1252 	mov	dpl,_lcd_address
      00036C 85*13 83         [24] 1253 	mov	dph,(_lcd_address + 1)
      00036F E5*28            [12] 1254 	mov	a,_drawPixel_PARM_3
      000371 F0               [24] 1255 	movx	@dptr,a
                                   1256 ;	assignBit
      000372 C2 B4            [12] 1257 	clr	_P3_4
                                   1258 ;	ecen4330_lcd_v3.c:238: }
      000374 22               [24] 1259 	ret
                                   1260 ;------------------------------------------------------------
                                   1261 ;Allocation info for local variables in function 'drawCircle'
                                   1262 ;------------------------------------------------------------
                                   1263 ;y0                        Allocated with name '_drawCircle_PARM_2'
                                   1264 ;r                         Allocated with name '_drawCircle_PARM_3'
                                   1265 ;color                     Allocated with name '_drawCircle_PARM_4'
                                   1266 ;x0                        Allocated with name '_drawCircle_x0_65536_103'
                                   1267 ;f                         Allocated with name '_drawCircle_f_65536_104'
                                   1268 ;ddF_x                     Allocated with name '_drawCircle_ddF_x_65536_104'
                                   1269 ;ddF_y                     Allocated to registers r2 r3 
                                   1270 ;x                         Allocated with name '_drawCircle_x_65536_104'
                                   1271 ;y                         Allocated to registers r0 r1 
                                   1272 ;sloc0                     Allocated with name '_drawCircle_sloc0_1_0'
                                   1273 ;sloc1                     Allocated with name '_drawCircle_sloc1_1_0'
                                   1274 ;sloc2                     Allocated with name '_drawCircle_sloc2_1_0'
                                   1275 ;------------------------------------------------------------
                                   1276 ;	ecen4330_lcd_v3.c:248: void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color){
                                   1277 ;	-----------------------------------------
                                   1278 ;	 function drawCircle
                                   1279 ;	-----------------------------------------
      000375                       1280 _drawCircle:
      000375 85 82*30         [24] 1281 	mov	_drawCircle_x0_65536_103,dpl
      000378 85 83*31         [24] 1282 	mov	(_drawCircle_x0_65536_103 + 1),dph
                                   1283 ;	ecen4330_lcd_v3.c:249: int f = 1 - r;
      00037B 74 01            [12] 1284 	mov	a,#0x01
      00037D C3               [12] 1285 	clr	c
      00037E 95*2C            [12] 1286 	subb	a,_drawCircle_PARM_3
      000380 FC               [12] 1287 	mov	r4,a
      000381 E4               [12] 1288 	clr	a
      000382 95*2D            [12] 1289 	subb	a,(_drawCircle_PARM_3 + 1)
      000384 FD               [12] 1290 	mov	r5,a
      000385 8C*32            [24] 1291 	mov	_drawCircle_f_65536_104,r4
      000387 8D*33            [24] 1292 	mov	(_drawCircle_f_65536_104 + 1),r5
                                   1293 ;	ecen4330_lcd_v3.c:251: int ddF_y = -2 * r;
      000389 85*2C*00         [24] 1294 	mov	__mulint_PARM_2,_drawCircle_PARM_3
      00038C 85*2D*01         [24] 1295 	mov	(__mulint_PARM_2 + 1),(_drawCircle_PARM_3 + 1)
      00038F 90 FF FE         [24] 1296 	mov	dptr,#0xfffe
      000392 12r00r00         [24] 1297 	lcall	__mulint
      000395 AA 82            [24] 1298 	mov	r2,dpl
      000397 AB 83            [24] 1299 	mov	r3,dph
                                   1300 ;	ecen4330_lcd_v3.c:253: int y = r;
      000399 A8*2C            [24] 1301 	mov	r0,_drawCircle_PARM_3
      00039B A9*2D            [24] 1302 	mov	r1,(_drawCircle_PARM_3 + 1)
                                   1303 ;	ecen4330_lcd_v3.c:255: drawPixel(x0  , y0+r, color);
      00039D E5*2C            [12] 1304 	mov	a,_drawCircle_PARM_3
      00039F 25*2A            [12] 1305 	add	a,_drawCircle_PARM_2
      0003A1 F5*26            [12] 1306 	mov	_drawPixel_PARM_2,a
      0003A3 E5*2D            [12] 1307 	mov	a,(_drawCircle_PARM_3 + 1)
      0003A5 35*2B            [12] 1308 	addc	a,(_drawCircle_PARM_2 + 1)
      0003A7 F5*27            [12] 1309 	mov	(_drawPixel_PARM_2 + 1),a
      0003A9 85*2E*28         [24] 1310 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003AC 85*2F*29         [24] 1311 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003AF 85*30 82         [24] 1312 	mov	dpl,_drawCircle_x0_65536_103
      0003B2 85*31 83         [24] 1313 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003B5 C0 03            [24] 1314 	push	ar3
      0003B7 C0 02            [24] 1315 	push	ar2
      0003B9 C0 01            [24] 1316 	push	ar1
      0003BB C0 00            [24] 1317 	push	ar0
      0003BD 12r03r1E         [24] 1318 	lcall	_drawPixel
                                   1319 ;	ecen4330_lcd_v3.c:256: drawPixel(x0  , y0-r, color);
      0003C0 E5*2A            [12] 1320 	mov	a,_drawCircle_PARM_2
      0003C2 C3               [12] 1321 	clr	c
      0003C3 95*2C            [12] 1322 	subb	a,_drawCircle_PARM_3
      0003C5 F5*26            [12] 1323 	mov	_drawPixel_PARM_2,a
      0003C7 E5*2B            [12] 1324 	mov	a,(_drawCircle_PARM_2 + 1)
      0003C9 95*2D            [12] 1325 	subb	a,(_drawCircle_PARM_3 + 1)
      0003CB F5*27            [12] 1326 	mov	(_drawPixel_PARM_2 + 1),a
      0003CD 85*2E*28         [24] 1327 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003D0 85*2F*29         [24] 1328 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003D3 85*30 82         [24] 1329 	mov	dpl,_drawCircle_x0_65536_103
      0003D6 85*31 83         [24] 1330 	mov	dph,(_drawCircle_x0_65536_103 + 1)
      0003D9 12r03r1E         [24] 1331 	lcall	_drawPixel
                                   1332 ;	ecen4330_lcd_v3.c:257: drawPixel(x0+r, y0  , color);
      0003DC E5*2C            [12] 1333 	mov	a,_drawCircle_PARM_3
      0003DE 25*30            [12] 1334 	add	a,_drawCircle_x0_65536_103
      0003E0 F5 82            [12] 1335 	mov	dpl,a
      0003E2 E5*2D            [12] 1336 	mov	a,(_drawCircle_PARM_3 + 1)
      0003E4 35*31            [12] 1337 	addc	a,(_drawCircle_x0_65536_103 + 1)
      0003E6 F5 83            [12] 1338 	mov	dph,a
      0003E8 85*2A*26         [24] 1339 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      0003EB 85*2B*27         [24] 1340 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      0003EE 85*2E*28         [24] 1341 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0003F1 85*2F*29         [24] 1342 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0003F4 12r03r1E         [24] 1343 	lcall	_drawPixel
                                   1344 ;	ecen4330_lcd_v3.c:258: drawPixel(x0-r, y0  , color);
      0003F7 E5*30            [12] 1345 	mov	a,_drawCircle_x0_65536_103
      0003F9 C3               [12] 1346 	clr	c
      0003FA 95*2C            [12] 1347 	subb	a,_drawCircle_PARM_3
      0003FC F5 82            [12] 1348 	mov	dpl,a
      0003FE E5*31            [12] 1349 	mov	a,(_drawCircle_x0_65536_103 + 1)
      000400 95*2D            [12] 1350 	subb	a,(_drawCircle_PARM_3 + 1)
      000402 F5 83            [12] 1351 	mov	dph,a
      000404 85*2A*26         [24] 1352 	mov	_drawPixel_PARM_2,_drawCircle_PARM_2
      000407 85*2B*27         [24] 1353 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_PARM_2 + 1)
      00040A 85*2E*28         [24] 1354 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00040D 85*2F*29         [24] 1355 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      000410 12r03r1E         [24] 1356 	lcall	_drawPixel
      000413 D0 00            [24] 1357 	pop	ar0
      000415 D0 01            [24] 1358 	pop	ar1
      000417 D0 02            [24] 1359 	pop	ar2
      000419 D0 03            [24] 1360 	pop	ar3
                                   1361 ;	ecen4330_lcd_v3.c:260: while (x<y) {
      00041B E4               [12] 1362 	clr	a
      00041C F5*36            [12] 1363 	mov	_drawCircle_x_65536_104,a
      00041E F5*37            [12] 1364 	mov	(_drawCircle_x_65536_104 + 1),a
      000420 75*34 01         [24] 1365 	mov	_drawCircle_ddF_x_65536_104,#0x01
                                   1366 ;	1-genFromRTrack replaced	mov	(_drawCircle_ddF_x_65536_104 + 1),#0x00
      000423 F5*35            [12] 1367 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
      000425                       1368 00103$:
      000425 C3               [12] 1369 	clr	c
      000426 E5*36            [12] 1370 	mov	a,_drawCircle_x_65536_104
      000428 98               [12] 1371 	subb	a,r0
      000429 E5*37            [12] 1372 	mov	a,(_drawCircle_x_65536_104 + 1)
      00042B 64 80            [12] 1373 	xrl	a,#0x80
      00042D 89 F0            [24] 1374 	mov	b,r1
      00042F 63 F0 80         [24] 1375 	xrl	b,#0x80
      000432 95 F0            [12] 1376 	subb	a,b
      000434 40 01            [24] 1377 	jc	00121$
      000436 22               [24] 1378 	ret
      000437                       1379 00121$:
                                   1380 ;	ecen4330_lcd_v3.c:261: if (f >= 0) {
      000437 E5*33            [12] 1381 	mov	a,(_drawCircle_f_65536_104 + 1)
      000439 20 E7 16         [24] 1382 	jb	acc.7,00102$
                                   1383 ;	ecen4330_lcd_v3.c:262: y--;
      00043C 18               [12] 1384 	dec	r0
      00043D B8 FF 01         [24] 1385 	cjne	r0,#0xff,00123$
      000440 19               [12] 1386 	dec	r1
      000441                       1387 00123$:
                                   1388 ;	ecen4330_lcd_v3.c:263: ddF_y += 2;
      000441 74 02            [12] 1389 	mov	a,#0x02
      000443 2A               [12] 1390 	add	a,r2
      000444 FA               [12] 1391 	mov	r2,a
      000445 E4               [12] 1392 	clr	a
      000446 3B               [12] 1393 	addc	a,r3
      000447 FB               [12] 1394 	mov	r3,a
                                   1395 ;	ecen4330_lcd_v3.c:264: f += ddF_y;
      000448 EA               [12] 1396 	mov	a,r2
      000449 25*32            [12] 1397 	add	a,_drawCircle_f_65536_104
      00044B F5*32            [12] 1398 	mov	_drawCircle_f_65536_104,a
      00044D EB               [12] 1399 	mov	a,r3
      00044E 35*33            [12] 1400 	addc	a,(_drawCircle_f_65536_104 + 1)
      000450 F5*33            [12] 1401 	mov	(_drawCircle_f_65536_104 + 1),a
      000452                       1402 00102$:
                                   1403 ;	ecen4330_lcd_v3.c:266: x++;
      000452 C0 02            [24] 1404 	push	ar2
      000454 C0 03            [24] 1405 	push	ar3
      000456 05*36            [12] 1406 	inc	_drawCircle_x_65536_104
      000458 E4               [12] 1407 	clr	a
      000459 B5*36 02         [24] 1408 	cjne	a,_drawCircle_x_65536_104,00124$
      00045C 05*37            [12] 1409 	inc	(_drawCircle_x_65536_104 + 1)
      00045E                       1410 00124$:
                                   1411 ;	ecen4330_lcd_v3.c:267: ddF_x += 2;
      00045E 74 02            [12] 1412 	mov	a,#0x02
      000460 25*34            [12] 1413 	add	a,_drawCircle_ddF_x_65536_104
      000462 F5*34            [12] 1414 	mov	_drawCircle_ddF_x_65536_104,a
      000464 E4               [12] 1415 	clr	a
      000465 35*35            [12] 1416 	addc	a,(_drawCircle_ddF_x_65536_104 + 1)
      000467 F5*35            [12] 1417 	mov	(_drawCircle_ddF_x_65536_104 + 1),a
                                   1418 ;	ecen4330_lcd_v3.c:268: f += ddF_x;
      000469 E5*34            [12] 1419 	mov	a,_drawCircle_ddF_x_65536_104
      00046B 25*32            [12] 1420 	add	a,_drawCircle_f_65536_104
      00046D F5*32            [12] 1421 	mov	_drawCircle_f_65536_104,a
      00046F E5*35            [12] 1422 	mov	a,(_drawCircle_ddF_x_65536_104 + 1)
      000471 35*33            [12] 1423 	addc	a,(_drawCircle_f_65536_104 + 1)
      000473 F5*33            [12] 1424 	mov	(_drawCircle_f_65536_104 + 1),a
                                   1425 ;	ecen4330_lcd_v3.c:270: drawPixel(x0 + x, y0 + y, color);
      000475 AC*30            [24] 1426 	mov	r4,_drawCircle_x0_65536_103
      000477 AD*31            [24] 1427 	mov	r5,(_drawCircle_x0_65536_103 + 1)
      000479 E5*36            [12] 1428 	mov	a,_drawCircle_x_65536_104
      00047B 2C               [12] 1429 	add	a,r4
      00047C FE               [12] 1430 	mov	r6,a
      00047D E5*37            [12] 1431 	mov	a,(_drawCircle_x_65536_104 + 1)
      00047F 3D               [12] 1432 	addc	a,r5
      000480 FF               [12] 1433 	mov	r7,a
      000481 8E*38            [24] 1434 	mov	_drawCircle_sloc0_1_0,r6
      000483 8F*39            [24] 1435 	mov	(_drawCircle_sloc0_1_0 + 1),r7
      000485 AA*2A            [24] 1436 	mov	r2,_drawCircle_PARM_2
      000487 AB*2B            [24] 1437 	mov	r3,(_drawCircle_PARM_2 + 1)
      000489 E8               [12] 1438 	mov	a,r0
      00048A 2A               [12] 1439 	add	a,r2
      00048B FE               [12] 1440 	mov	r6,a
      00048C E9               [12] 1441 	mov	a,r1
      00048D 3B               [12] 1442 	addc	a,r3
      00048E FF               [12] 1443 	mov	r7,a
      00048F 8E*3A            [24] 1444 	mov	_drawCircle_sloc1_1_0,r6
      000491 8F*3B            [24] 1445 	mov	(_drawCircle_sloc1_1_0 + 1),r7
      000493 85*3A*26         [24] 1446 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      000496 85*3B*27         [24] 1447 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      000499 85*2E*28         [24] 1448 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00049C 85*2F*29         [24] 1449 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00049F 85*38 82         [24] 1450 	mov	dpl,_drawCircle_sloc0_1_0
      0004A2 85*39 83         [24] 1451 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      0004A5 C0 05            [24] 1452 	push	ar5
      0004A7 C0 04            [24] 1453 	push	ar4
      0004A9 C0 03            [24] 1454 	push	ar3
      0004AB C0 02            [24] 1455 	push	ar2
      0004AD C0 01            [24] 1456 	push	ar1
      0004AF C0 00            [24] 1457 	push	ar0
      0004B1 12r03r1E         [24] 1458 	lcall	_drawPixel
      0004B4 D0 00            [24] 1459 	pop	ar0
      0004B6 D0 01            [24] 1460 	pop	ar1
      0004B8 D0 02            [24] 1461 	pop	ar2
      0004BA D0 03            [24] 1462 	pop	ar3
      0004BC D0 04            [24] 1463 	pop	ar4
      0004BE D0 05            [24] 1464 	pop	ar5
                                   1465 ;	ecen4330_lcd_v3.c:271: drawPixel(x0 - x, y0 + y, color);
      0004C0 EC               [12] 1466 	mov	a,r4
      0004C1 C3               [12] 1467 	clr	c
      0004C2 95*36            [12] 1468 	subb	a,_drawCircle_x_65536_104
      0004C4 FE               [12] 1469 	mov	r6,a
      0004C5 ED               [12] 1470 	mov	a,r5
      0004C6 95*37            [12] 1471 	subb	a,(_drawCircle_x_65536_104 + 1)
      0004C8 FF               [12] 1472 	mov	r7,a
      0004C9 8E*3C            [24] 1473 	mov	_drawCircle_sloc2_1_0,r6
      0004CB 8F*3D            [24] 1474 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      0004CD 85*3A*26         [24] 1475 	mov	_drawPixel_PARM_2,_drawCircle_sloc1_1_0
      0004D0 85*3B*27         [24] 1476 	mov	(_drawPixel_PARM_2 + 1),(_drawCircle_sloc1_1_0 + 1)
      0004D3 85*2E*28         [24] 1477 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0004D6 85*2F*29         [24] 1478 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0004D9 85*3C 82         [24] 1479 	mov	dpl,_drawCircle_sloc2_1_0
      0004DC 85*3D 83         [24] 1480 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0004DF C0 05            [24] 1481 	push	ar5
      0004E1 C0 04            [24] 1482 	push	ar4
      0004E3 C0 03            [24] 1483 	push	ar3
      0004E5 C0 02            [24] 1484 	push	ar2
      0004E7 C0 01            [24] 1485 	push	ar1
      0004E9 C0 00            [24] 1486 	push	ar0
      0004EB 12r03r1E         [24] 1487 	lcall	_drawPixel
      0004EE D0 00            [24] 1488 	pop	ar0
      0004F0 D0 01            [24] 1489 	pop	ar1
      0004F2 D0 02            [24] 1490 	pop	ar2
      0004F4 D0 03            [24] 1491 	pop	ar3
      0004F6 D0 04            [24] 1492 	pop	ar4
      0004F8 D0 05            [24] 1493 	pop	ar5
                                   1494 ;	ecen4330_lcd_v3.c:272: drawPixel(x0 + x, y0 - y, color);
      0004FA EA               [12] 1495 	mov	a,r2
      0004FB C3               [12] 1496 	clr	c
      0004FC 98               [12] 1497 	subb	a,r0
      0004FD FE               [12] 1498 	mov	r6,a
      0004FE EB               [12] 1499 	mov	a,r3
      0004FF 99               [12] 1500 	subb	a,r1
      000500 FF               [12] 1501 	mov	r7,a
      000501 8E*26            [24] 1502 	mov	_drawPixel_PARM_2,r6
      000503 8F*27            [24] 1503 	mov	(_drawPixel_PARM_2 + 1),r7
      000505 85*2E*28         [24] 1504 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000508 85*2F*29         [24] 1505 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00050B 85*38 82         [24] 1506 	mov	dpl,_drawCircle_sloc0_1_0
      00050E 85*39 83         [24] 1507 	mov	dph,(_drawCircle_sloc0_1_0 + 1)
      000511 C0 07            [24] 1508 	push	ar7
      000513 C0 06            [24] 1509 	push	ar6
      000515 C0 05            [24] 1510 	push	ar5
      000517 C0 04            [24] 1511 	push	ar4
      000519 C0 03            [24] 1512 	push	ar3
      00051B C0 02            [24] 1513 	push	ar2
      00051D C0 01            [24] 1514 	push	ar1
      00051F C0 00            [24] 1515 	push	ar0
      000521 12r03r1E         [24] 1516 	lcall	_drawPixel
      000524 D0 00            [24] 1517 	pop	ar0
      000526 D0 01            [24] 1518 	pop	ar1
      000528 D0 02            [24] 1519 	pop	ar2
      00052A D0 03            [24] 1520 	pop	ar3
      00052C D0 04            [24] 1521 	pop	ar4
      00052E D0 05            [24] 1522 	pop	ar5
      000530 D0 06            [24] 1523 	pop	ar6
      000532 D0 07            [24] 1524 	pop	ar7
                                   1525 ;	ecen4330_lcd_v3.c:273: drawPixel(x0 - x, y0 - y, color);
      000534 8E*26            [24] 1526 	mov	_drawPixel_PARM_2,r6
      000536 8F*27            [24] 1527 	mov	(_drawPixel_PARM_2 + 1),r7
      000538 85*2E*28         [24] 1528 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      00053B 85*2F*29         [24] 1529 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00053E 85*3C 82         [24] 1530 	mov	dpl,_drawCircle_sloc2_1_0
      000541 85*3D 83         [24] 1531 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000544 C0 05            [24] 1532 	push	ar5
      000546 C0 04            [24] 1533 	push	ar4
      000548 C0 03            [24] 1534 	push	ar3
      00054A C0 02            [24] 1535 	push	ar2
      00054C C0 01            [24] 1536 	push	ar1
      00054E C0 00            [24] 1537 	push	ar0
      000550 12r03r1E         [24] 1538 	lcall	_drawPixel
      000553 D0 00            [24] 1539 	pop	ar0
      000555 D0 01            [24] 1540 	pop	ar1
      000557 D0 02            [24] 1541 	pop	ar2
      000559 D0 03            [24] 1542 	pop	ar3
      00055B D0 04            [24] 1543 	pop	ar4
      00055D D0 05            [24] 1544 	pop	ar5
                                   1545 ;	ecen4330_lcd_v3.c:274: drawPixel(x0 + y, y0 + x, color);
      00055F E8               [12] 1546 	mov	a,r0
      000560 2C               [12] 1547 	add	a,r4
      000561 FE               [12] 1548 	mov	r6,a
      000562 E9               [12] 1549 	mov	a,r1
      000563 3D               [12] 1550 	addc	a,r5
      000564 FF               [12] 1551 	mov	r7,a
      000565 8E*3C            [24] 1552 	mov	_drawCircle_sloc2_1_0,r6
      000567 8F*3D            [24] 1553 	mov	(_drawCircle_sloc2_1_0 + 1),r7
      000569 E5*36            [12] 1554 	mov	a,_drawCircle_x_65536_104
      00056B 2A               [12] 1555 	add	a,r2
      00056C FE               [12] 1556 	mov	r6,a
      00056D E5*37            [12] 1557 	mov	a,(_drawCircle_x_65536_104 + 1)
      00056F 3B               [12] 1558 	addc	a,r3
      000570 FF               [12] 1559 	mov	r7,a
      000571 8E*26            [24] 1560 	mov	_drawPixel_PARM_2,r6
      000573 8F*27            [24] 1561 	mov	(_drawPixel_PARM_2 + 1),r7
      000575 85*2E*28         [24] 1562 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000578 85*2F*29         [24] 1563 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00057B 85*3C 82         [24] 1564 	mov	dpl,_drawCircle_sloc2_1_0
      00057E 85*3D 83         [24] 1565 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      000581 C0 07            [24] 1566 	push	ar7
      000583 C0 06            [24] 1567 	push	ar6
      000585 C0 05            [24] 1568 	push	ar5
      000587 C0 04            [24] 1569 	push	ar4
      000589 C0 03            [24] 1570 	push	ar3
      00058B C0 02            [24] 1571 	push	ar2
      00058D C0 01            [24] 1572 	push	ar1
      00058F C0 00            [24] 1573 	push	ar0
      000591 12r03r1E         [24] 1574 	lcall	_drawPixel
      000594 D0 00            [24] 1575 	pop	ar0
      000596 D0 01            [24] 1576 	pop	ar1
      000598 D0 02            [24] 1577 	pop	ar2
      00059A D0 03            [24] 1578 	pop	ar3
      00059C D0 04            [24] 1579 	pop	ar4
      00059E D0 05            [24] 1580 	pop	ar5
      0005A0 D0 06            [24] 1581 	pop	ar6
      0005A2 D0 07            [24] 1582 	pop	ar7
                                   1583 ;	ecen4330_lcd_v3.c:275: drawPixel(x0 - y, y0 + x, color);
      0005A4 EC               [12] 1584 	mov	a,r4
      0005A5 C3               [12] 1585 	clr	c
      0005A6 98               [12] 1586 	subb	a,r0
      0005A7 FC               [12] 1587 	mov	r4,a
      0005A8 ED               [12] 1588 	mov	a,r5
      0005A9 99               [12] 1589 	subb	a,r1
      0005AA FD               [12] 1590 	mov	r5,a
      0005AB 8E*26            [24] 1591 	mov	_drawPixel_PARM_2,r6
      0005AD 8F*27            [24] 1592 	mov	(_drawPixel_PARM_2 + 1),r7
      0005AF 85*2E*28         [24] 1593 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005B2 85*2F*29         [24] 1594 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005B5 8C 82            [24] 1595 	mov	dpl,r4
      0005B7 8D 83            [24] 1596 	mov	dph,r5
      0005B9 C0 05            [24] 1597 	push	ar5
      0005BB C0 04            [24] 1598 	push	ar4
      0005BD C0 03            [24] 1599 	push	ar3
      0005BF C0 02            [24] 1600 	push	ar2
      0005C1 C0 01            [24] 1601 	push	ar1
      0005C3 C0 00            [24] 1602 	push	ar0
      0005C5 12r03r1E         [24] 1603 	lcall	_drawPixel
      0005C8 D0 00            [24] 1604 	pop	ar0
      0005CA D0 01            [24] 1605 	pop	ar1
      0005CC D0 02            [24] 1606 	pop	ar2
      0005CE D0 03            [24] 1607 	pop	ar3
                                   1608 ;	ecen4330_lcd_v3.c:276: drawPixel(x0 + y, y0 - x, color);
      0005D0 EA               [12] 1609 	mov	a,r2
      0005D1 C3               [12] 1610 	clr	c
      0005D2 95*36            [12] 1611 	subb	a,_drawCircle_x_65536_104
      0005D4 FA               [12] 1612 	mov	r2,a
      0005D5 EB               [12] 1613 	mov	a,r3
      0005D6 95*37            [12] 1614 	subb	a,(_drawCircle_x_65536_104 + 1)
      0005D8 FB               [12] 1615 	mov	r3,a
      0005D9 8A*26            [24] 1616 	mov	_drawPixel_PARM_2,r2
      0005DB 8B*27            [24] 1617 	mov	(_drawPixel_PARM_2 + 1),r3
      0005DD 85*2E*28         [24] 1618 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      0005E0 85*2F*29         [24] 1619 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      0005E3 85*3C 82         [24] 1620 	mov	dpl,_drawCircle_sloc2_1_0
      0005E6 85*3D 83         [24] 1621 	mov	dph,(_drawCircle_sloc2_1_0 + 1)
      0005E9 C0 03            [24] 1622 	push	ar3
      0005EB C0 02            [24] 1623 	push	ar2
      0005ED C0 01            [24] 1624 	push	ar1
      0005EF C0 00            [24] 1625 	push	ar0
      0005F1 12r03r1E         [24] 1626 	lcall	_drawPixel
      0005F4 D0 00            [24] 1627 	pop	ar0
      0005F6 D0 01            [24] 1628 	pop	ar1
      0005F8 D0 02            [24] 1629 	pop	ar2
      0005FA D0 03            [24] 1630 	pop	ar3
      0005FC D0 04            [24] 1631 	pop	ar4
      0005FE D0 05            [24] 1632 	pop	ar5
                                   1633 ;	ecen4330_lcd_v3.c:277: drawPixel(x0 - y, y0 - x, color);
      000600 8A*26            [24] 1634 	mov	_drawPixel_PARM_2,r2
      000602 8B*27            [24] 1635 	mov	(_drawPixel_PARM_2 + 1),r3
      000604 85*2E*28         [24] 1636 	mov	_drawPixel_PARM_3,_drawCircle_PARM_4
      000607 85*2F*29         [24] 1637 	mov	(_drawPixel_PARM_3 + 1),(_drawCircle_PARM_4 + 1)
      00060A 8C 82            [24] 1638 	mov	dpl,r4
      00060C 8D 83            [24] 1639 	mov	dph,r5
      00060E C0 03            [24] 1640 	push	ar3
      000610 C0 02            [24] 1641 	push	ar2
      000612 C0 01            [24] 1642 	push	ar1
      000614 C0 00            [24] 1643 	push	ar0
      000616 12r03r1E         [24] 1644 	lcall	_drawPixel
      000619 D0 00            [24] 1645 	pop	ar0
      00061B D0 01            [24] 1646 	pop	ar1
      00061D D0 02            [24] 1647 	pop	ar2
      00061F D0 03            [24] 1648 	pop	ar3
      000621 D0 03            [24] 1649 	pop	ar3
      000623 D0 02            [24] 1650 	pop	ar2
                                   1651 ;	ecen4330_lcd_v3.c:279: }
      000625 02r04r25         [24] 1652 	ljmp	00103$
                                   1653 ;------------------------------------------------------------
                                   1654 ;Allocation info for local variables in function 'testCircles'
                                   1655 ;------------------------------------------------------------
                                   1656 ;color                     Allocated with name '_testCircles_PARM_2'
                                   1657 ;radius                    Allocated to registers r7 
                                   1658 ;x                         Allocated to registers r1 r2 
                                   1659 ;y                         Allocated to registers r0 r6 
                                   1660 ;r2                        Allocated to registers r3 r4 
                                   1661 ;w                         Allocated with name '_testCircles_w_65536_108'
                                   1662 ;h                         Allocated with name '_testCircles_h_65536_108'
                                   1663 ;------------------------------------------------------------
                                   1664 ;	ecen4330_lcd_v3.c:287: void testCircles (uint8_t radius, uint16_t color) {
                                   1665 ;	-----------------------------------------
                                   1666 ;	 function testCircles
                                   1667 ;	-----------------------------------------
      000628                       1668 _testCircles:
      000628 AF 82            [24] 1669 	mov	r7,dpl
                                   1670 ;	ecen4330_lcd_v3.c:288: int  x, y, r2 = radius * 2, w = _width  + radius, h = _height + radius;
      00062A 8F 05            [24] 1671 	mov	ar5,r7
      00062C 7E 00            [12] 1672 	mov	r6,#0x00
      00062E ED               [12] 1673 	mov	a,r5
      00062F 2D               [12] 1674 	add	a,r5
      000630 FB               [12] 1675 	mov	r3,a
      000631 EE               [12] 1676 	mov	a,r6
      000632 33               [12] 1677 	rlc	a
      000633 FC               [12] 1678 	mov	r4,a
      000634 A9*22            [24] 1679 	mov	r1,__width
      000636 AA*23            [24] 1680 	mov	r2,(__width + 1)
      000638 ED               [12] 1681 	mov	a,r5
      000639 29               [12] 1682 	add	a,r1
      00063A F5*40            [12] 1683 	mov	_testCircles_w_65536_108,a
      00063C EE               [12] 1684 	mov	a,r6
      00063D 3A               [12] 1685 	addc	a,r2
      00063E F5*41            [12] 1686 	mov	(_testCircles_w_65536_108 + 1),a
      000640 A8*24            [24] 1687 	mov	r0,__height
      000642 AA*25            [24] 1688 	mov	r2,(__height + 1)
      000644 ED               [12] 1689 	mov	a,r5
      000645 28               [12] 1690 	add	a,r0
      000646 F5*42            [12] 1691 	mov	_testCircles_h_65536_108,a
      000648 EE               [12] 1692 	mov	a,r6
      000649 3A               [12] 1693 	addc	a,r2
      00064A F5*43            [12] 1694 	mov	(_testCircles_h_65536_108 + 1),a
                                   1695 ;	ecen4330_lcd_v3.c:290: for(x=0; x<w; x+=r2) {
      00064C 79 00            [12] 1696 	mov	r1,#0x00
      00064E 7A 00            [12] 1697 	mov	r2,#0x00
      000650                       1698 00107$:
      000650 C3               [12] 1699 	clr	c
      000651 E9               [12] 1700 	mov	a,r1
      000652 95*40            [12] 1701 	subb	a,_testCircles_w_65536_108
      000654 EA               [12] 1702 	mov	a,r2
      000655 64 80            [12] 1703 	xrl	a,#0x80
      000657 85*41 F0         [24] 1704 	mov	b,(_testCircles_w_65536_108 + 1)
      00065A 63 F0 80         [24] 1705 	xrl	b,#0x80
      00065D 95 F0            [12] 1706 	subb	a,b
      00065F 50 57            [24] 1707 	jnc	00109$
                                   1708 ;	ecen4330_lcd_v3.c:291: for(y=0; y<h; y+=r2) {
      000661 78 00            [12] 1709 	mov	r0,#0x00
      000663 7E 00            [12] 1710 	mov	r6,#0x00
      000665                       1711 00104$:
      000665 C3               [12] 1712 	clr	c
      000666 E8               [12] 1713 	mov	a,r0
      000667 95*42            [12] 1714 	subb	a,_testCircles_h_65536_108
      000669 EE               [12] 1715 	mov	a,r6
      00066A 64 80            [12] 1716 	xrl	a,#0x80
      00066C 85*43 F0         [24] 1717 	mov	b,(_testCircles_h_65536_108 + 1)
      00066F 63 F0 80         [24] 1718 	xrl	b,#0x80
      000672 95 F0            [12] 1719 	subb	a,b
      000674 50 3A            [24] 1720 	jnc	00108$
                                   1721 ;	ecen4330_lcd_v3.c:292: drawCircle(x, y, radius, color);
      000676 89 82            [24] 1722 	mov	dpl,r1
      000678 8A 83            [24] 1723 	mov	dph,r2
      00067A 88*2A            [24] 1724 	mov	_drawCircle_PARM_2,r0
      00067C 8E*2B            [24] 1725 	mov	(_drawCircle_PARM_2 + 1),r6
      00067E 8F*2C            [24] 1726 	mov	_drawCircle_PARM_3,r7
      000680 75*2D 00         [24] 1727 	mov	(_drawCircle_PARM_3 + 1),#0x00
      000683 85*3E*2E         [24] 1728 	mov	_drawCircle_PARM_4,_testCircles_PARM_2
      000686 85*3F*2F         [24] 1729 	mov	(_drawCircle_PARM_4 + 1),(_testCircles_PARM_2 + 1)
      000689 C0 07            [24] 1730 	push	ar7
      00068B C0 06            [24] 1731 	push	ar6
      00068D C0 04            [24] 1732 	push	ar4
      00068F C0 03            [24] 1733 	push	ar3
      000691 C0 02            [24] 1734 	push	ar2
      000693 C0 01            [24] 1735 	push	ar1
      000695 C0 00            [24] 1736 	push	ar0
      000697 12r03r75         [24] 1737 	lcall	_drawCircle
      00069A D0 00            [24] 1738 	pop	ar0
      00069C D0 01            [24] 1739 	pop	ar1
      00069E D0 02            [24] 1740 	pop	ar2
      0006A0 D0 03            [24] 1741 	pop	ar3
      0006A2 D0 04            [24] 1742 	pop	ar4
      0006A4 D0 06            [24] 1743 	pop	ar6
      0006A6 D0 07            [24] 1744 	pop	ar7
                                   1745 ;	ecen4330_lcd_v3.c:291: for(y=0; y<h; y+=r2) {
      0006A8 EB               [12] 1746 	mov	a,r3
      0006A9 28               [12] 1747 	add	a,r0
      0006AA F8               [12] 1748 	mov	r0,a
      0006AB EC               [12] 1749 	mov	a,r4
      0006AC 3E               [12] 1750 	addc	a,r6
      0006AD FE               [12] 1751 	mov	r6,a
      0006AE 80 B5            [24] 1752 	sjmp	00104$
      0006B0                       1753 00108$:
                                   1754 ;	ecen4330_lcd_v3.c:290: for(x=0; x<w; x+=r2) {
      0006B0 EB               [12] 1755 	mov	a,r3
      0006B1 29               [12] 1756 	add	a,r1
      0006B2 F9               [12] 1757 	mov	r1,a
      0006B3 EC               [12] 1758 	mov	a,r4
      0006B4 3A               [12] 1759 	addc	a,r2
      0006B5 FA               [12] 1760 	mov	r2,a
      0006B6 80 98            [24] 1761 	sjmp	00107$
      0006B8                       1762 00109$:
                                   1763 ;	ecen4330_lcd_v3.c:295: }
      0006B8 22               [24] 1764 	ret
                                   1765 ;------------------------------------------------------------
                                   1766 ;Allocation info for local variables in function 'fillRect'
                                   1767 ;------------------------------------------------------------
                                   1768 ;y                         Allocated with name '_fillRect_PARM_2'
                                   1769 ;w                         Allocated with name '_fillRect_PARM_3'
                                   1770 ;h                         Allocated with name '_fillRect_PARM_4'
                                   1771 ;color                     Allocated with name '_fillRect_PARM_5'
                                   1772 ;x                         Allocated to registers 
                                   1773 ;------------------------------------------------------------
                                   1774 ;	ecen4330_lcd_v3.c:297: void fillRect (uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t color) {
                                   1775 ;	-----------------------------------------
                                   1776 ;	 function fillRect
                                   1777 ;	-----------------------------------------
      0006B9                       1778 _fillRect:
      0006B9 AE 82            [24] 1779 	mov	r6,dpl
      0006BB AF 83            [24] 1780 	mov	r7,dph
                                   1781 ;	ecen4330_lcd_v3.c:298: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0006BD 8E 04            [24] 1782 	mov	ar4,r6
      0006BF 8F 05            [24] 1783 	mov	ar5,r7
      0006C1 C3               [12] 1784 	clr	c
      0006C2 EC               [12] 1785 	mov	a,r4
      0006C3 94 F0            [12] 1786 	subb	a,#0xf0
      0006C5 ED               [12] 1787 	mov	a,r5
      0006C6 94 00            [12] 1788 	subb	a,#0x00
      0006C8 50 0D            [24] 1789 	jnc	00101$
      0006CA AC*44            [24] 1790 	mov	r4,_fillRect_PARM_2
      0006CC AD*45            [24] 1791 	mov	r5,(_fillRect_PARM_2 + 1)
      0006CE C3               [12] 1792 	clr	c
      0006CF EC               [12] 1793 	mov	a,r4
      0006D0 94 40            [12] 1794 	subb	a,#0x40
      0006D2 ED               [12] 1795 	mov	a,r5
      0006D3 94 01            [12] 1796 	subb	a,#0x01
      0006D5 40 01            [24] 1797 	jc	00102$
      0006D7                       1798 00101$:
                                   1799 ;	ecen4330_lcd_v3.c:300: return;
      0006D7 22               [24] 1800 	ret
      0006D8                       1801 00102$:
                                   1802 ;	ecen4330_lcd_v3.c:303: if ((x+w-1) >= TFTWIDTH)
      0006D8 E5*46            [12] 1803 	mov	a,_fillRect_PARM_3
      0006DA 2E               [12] 1804 	add	a,r6
      0006DB FC               [12] 1805 	mov	r4,a
      0006DC E5*47            [12] 1806 	mov	a,(_fillRect_PARM_3 + 1)
      0006DE 3F               [12] 1807 	addc	a,r7
      0006DF FD               [12] 1808 	mov	r5,a
      0006E0 1C               [12] 1809 	dec	r4
      0006E1 BC FF 01         [24] 1810 	cjne	r4,#0xff,00161$
      0006E4 1D               [12] 1811 	dec	r5
      0006E5                       1812 00161$:
      0006E5 C3               [12] 1813 	clr	c
      0006E6 EC               [12] 1814 	mov	a,r4
      0006E7 94 F0            [12] 1815 	subb	a,#0xf0
      0006E9 ED               [12] 1816 	mov	a,r5
      0006EA 94 00            [12] 1817 	subb	a,#0x00
      0006EC 40 0A            [24] 1818 	jc	00105$
                                   1819 ;	ecen4330_lcd_v3.c:305: w = TFTWIDTH-x;
      0006EE 74 F0            [12] 1820 	mov	a,#0xf0
      0006F0 C3               [12] 1821 	clr	c
      0006F1 9E               [12] 1822 	subb	a,r6
      0006F2 F5*46            [12] 1823 	mov	_fillRect_PARM_3,a
      0006F4 E4               [12] 1824 	clr	a
      0006F5 9F               [12] 1825 	subb	a,r7
      0006F6 F5*47            [12] 1826 	mov	(_fillRect_PARM_3 + 1),a
      0006F8                       1827 00105$:
                                   1828 ;	ecen4330_lcd_v3.c:308: if ((y+h-1) >= TFTHEIGHT)
      0006F8 E5*48            [12] 1829 	mov	a,_fillRect_PARM_4
      0006FA 25*44            [12] 1830 	add	a,_fillRect_PARM_2
      0006FC FC               [12] 1831 	mov	r4,a
      0006FD E5*49            [12] 1832 	mov	a,(_fillRect_PARM_4 + 1)
      0006FF 35*45            [12] 1833 	addc	a,(_fillRect_PARM_2 + 1)
      000701 FD               [12] 1834 	mov	r5,a
      000702 1C               [12] 1835 	dec	r4
      000703 BC FF 01         [24] 1836 	cjne	r4,#0xff,00163$
      000706 1D               [12] 1837 	dec	r5
      000707                       1838 00163$:
      000707 C3               [12] 1839 	clr	c
      000708 EC               [12] 1840 	mov	a,r4
      000709 94 40            [12] 1841 	subb	a,#0x40
      00070B ED               [12] 1842 	mov	a,r5
      00070C 94 01            [12] 1843 	subb	a,#0x01
      00070E 40 0D            [24] 1844 	jc	00107$
                                   1845 ;	ecen4330_lcd_v3.c:310: h = TFTHEIGHT-y;
      000710 74 40            [12] 1846 	mov	a,#0x40
      000712 C3               [12] 1847 	clr	c
      000713 95*44            [12] 1848 	subb	a,_fillRect_PARM_2
      000715 F5*48            [12] 1849 	mov	_fillRect_PARM_4,a
      000717 74 01            [12] 1850 	mov	a,#0x01
      000719 95*45            [12] 1851 	subb	a,(_fillRect_PARM_2 + 1)
      00071B F5*49            [12] 1852 	mov	(_fillRect_PARM_4 + 1),a
      00071D                       1853 00107$:
                                   1854 ;	ecen4330_lcd_v3.c:313: setAddress(x, y, x+w-1, y+h-1);
      00071D E5*46            [12] 1855 	mov	a,_fillRect_PARM_3
      00071F 2E               [12] 1856 	add	a,r6
      000720 FC               [12] 1857 	mov	r4,a
      000721 E5*47            [12] 1858 	mov	a,(_fillRect_PARM_3 + 1)
      000723 3F               [12] 1859 	addc	a,r7
      000724 FD               [12] 1860 	mov	r5,a
      000725 1C               [12] 1861 	dec	r4
      000726 BC FF 01         [24] 1862 	cjne	r4,#0xff,00165$
      000729 1D               [12] 1863 	dec	r5
      00072A                       1864 00165$:
      00072A 8C*02            [24] 1865 	mov	_setAddress_PARM_3,r4
      00072C 8D*03            [24] 1866 	mov	(_setAddress_PARM_3 + 1),r5
      00072E E5*48            [12] 1867 	mov	a,_fillRect_PARM_4
      000730 25*44            [12] 1868 	add	a,_fillRect_PARM_2
      000732 FC               [12] 1869 	mov	r4,a
      000733 E5*49            [12] 1870 	mov	a,(_fillRect_PARM_4 + 1)
      000735 35*45            [12] 1871 	addc	a,(_fillRect_PARM_2 + 1)
      000737 FD               [12] 1872 	mov	r5,a
      000738 1C               [12] 1873 	dec	r4
      000739 BC FF 01         [24] 1874 	cjne	r4,#0xff,00166$
      00073C 1D               [12] 1875 	dec	r5
      00073D                       1876 00166$:
      00073D 8C*04            [24] 1877 	mov	_setAddress_PARM_4,r4
      00073F 8D*05            [24] 1878 	mov	(_setAddress_PARM_4 + 1),r5
      000741 85*44*00         [24] 1879 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000744 85*45*01         [24] 1880 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000747 8E 82            [24] 1881 	mov	dpl,r6
      000749 8F 83            [24] 1882 	mov	dph,r7
      00074B 12r01r42         [24] 1883 	lcall	_setAddress
                                   1884 ;	ecen4330_lcd_v3.c:316: write8Reg(0x2C);
                                   1885 ;	assignBit
      00074E C2 B5            [12] 1886 	clr	_P3_5
                                   1887 ;	assignBit
      000750 D2 B4            [12] 1888 	setb	_P3_4
      000752 85*12 82         [24] 1889 	mov	dpl,_lcd_address
      000755 85*13 83         [24] 1890 	mov	dph,(_lcd_address + 1)
      000758 74 2C            [12] 1891 	mov	a,#0x2c
      00075A F0               [24] 1892 	movx	@dptr,a
                                   1893 ;	assignBit
      00075B C2 B4            [12] 1894 	clr	_P3_4
                                   1895 ;	ecen4330_lcd_v3.c:317: CD = 1;
                                   1896 ;	assignBit
      00075D D2 B5            [12] 1897 	setb	_P3_5
                                   1898 ;	ecen4330_lcd_v3.c:318: for(y=h; y>0; y--)
      00075F AF*4B            [24] 1899 	mov	r7,(_fillRect_PARM_5 + 1)
      000761 AD*48            [24] 1900 	mov	r5,_fillRect_PARM_4
      000763 AE*49            [24] 1901 	mov	r6,(_fillRect_PARM_4 + 1)
      000765                       1902 00114$:
      000765 ED               [12] 1903 	mov	a,r5
      000766 4E               [12] 1904 	orl	a,r6
      000767 60 30            [24] 1905 	jz	00116$
                                   1906 ;	ecen4330_lcd_v3.c:320: for(x=w; x>0; x--)
      000769 AB*46            [24] 1907 	mov	r3,_fillRect_PARM_3
      00076B AC*47            [24] 1908 	mov	r4,(_fillRect_PARM_3 + 1)
      00076D                       1909 00111$:
      00076D EB               [12] 1910 	mov	a,r3
      00076E 4C               [12] 1911 	orl	a,r4
      00076F 60 21            [24] 1912 	jz	00115$
                                   1913 ;	ecen4330_lcd_v3.c:323: write8(color>>8); write8(color);
                                   1914 ;	assignBit
      000771 D2 B4            [12] 1915 	setb	_P3_4
      000773 85*12 82         [24] 1916 	mov	dpl,_lcd_address
      000776 85*13 83         [24] 1917 	mov	dph,(_lcd_address + 1)
      000779 EF               [12] 1918 	mov	a,r7
      00077A F0               [24] 1919 	movx	@dptr,a
                                   1920 ;	assignBit
      00077B C2 B4            [12] 1921 	clr	_P3_4
                                   1922 ;	assignBit
      00077D D2 B4            [12] 1923 	setb	_P3_4
      00077F 85*12 82         [24] 1924 	mov	dpl,_lcd_address
      000782 85*13 83         [24] 1925 	mov	dph,(_lcd_address + 1)
      000785 E5*4A            [12] 1926 	mov	a,_fillRect_PARM_5
      000787 FA               [12] 1927 	mov	r2,a
      000788 F0               [24] 1928 	movx	@dptr,a
                                   1929 ;	assignBit
      000789 C2 B4            [12] 1930 	clr	_P3_4
                                   1931 ;	ecen4330_lcd_v3.c:320: for(x=w; x>0; x--)
      00078B 1B               [12] 1932 	dec	r3
      00078C BB FF 01         [24] 1933 	cjne	r3,#0xff,00169$
      00078F 1C               [12] 1934 	dec	r4
      000790                       1935 00169$:
      000790 80 DB            [24] 1936 	sjmp	00111$
      000792                       1937 00115$:
                                   1938 ;	ecen4330_lcd_v3.c:318: for(y=h; y>0; y--)
      000792 1D               [12] 1939 	dec	r5
      000793 BD FF 01         [24] 1940 	cjne	r5,#0xff,00170$
      000796 1E               [12] 1941 	dec	r6
      000797                       1942 00170$:
      000797 80 CC            [24] 1943 	sjmp	00114$
      000799                       1944 00116$:
                                   1945 ;	ecen4330_lcd_v3.c:327: }
      000799 22               [24] 1946 	ret
                                   1947 ;------------------------------------------------------------
                                   1948 ;Allocation info for local variables in function 'fillScreen'
                                   1949 ;------------------------------------------------------------
                                   1950 ;Color                     Allocated to registers r6 r7 
                                   1951 ;len                       Allocated to registers 
                                   1952 ;blocks                    Allocated to registers r4 r7 
                                   1953 ;i                         Allocated to registers r3 
                                   1954 ;hi                        Allocated to registers r5 
                                   1955 ;lo                        Allocated to registers r6 
                                   1956 ;------------------------------------------------------------
                                   1957 ;	ecen4330_lcd_v3.c:334: void fillScreen (uint16_t Color) {
                                   1958 ;	-----------------------------------------
                                   1959 ;	 function fillScreen
                                   1960 ;	-----------------------------------------
      00079A                       1961 _fillScreen:
      00079A AE 82            [24] 1962 	mov	r6,dpl
      00079C AF 83            [24] 1963 	mov	r7,dph
                                   1964 ;	ecen4330_lcd_v3.c:339: uint8_t  i, hi = Color >> 8,
      00079E 8F 05            [24] 1965 	mov	ar5,r7
                                   1966 ;	ecen4330_lcd_v3.c:340: lo = Color;
                                   1967 ;	ecen4330_lcd_v3.c:343: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007A0 E4               [12] 1968 	clr	a
      0007A1 F5*00            [12] 1969 	mov	_setAddress_PARM_2,a
      0007A3 F5*01            [12] 1970 	mov	(_setAddress_PARM_2 + 1),a
      0007A5 75*02 EF         [24] 1971 	mov	_setAddress_PARM_3,#0xef
                                   1972 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007A8 F5*03            [12] 1973 	mov	(_setAddress_PARM_3 + 1),a
      0007AA 75*04 3F         [24] 1974 	mov	_setAddress_PARM_4,#0x3f
      0007AD 75*05 01         [24] 1975 	mov	(_setAddress_PARM_4 + 1),#0x01
      0007B0 90 00 00         [24] 1976 	mov	dptr,#0x0000
      0007B3 C0 06            [24] 1977 	push	ar6
      0007B5 C0 05            [24] 1978 	push	ar5
      0007B7 12r01r42         [24] 1979 	lcall	_setAddress
      0007BA D0 05            [24] 1980 	pop	ar5
      0007BC D0 06            [24] 1981 	pop	ar6
                                   1982 ;	ecen4330_lcd_v3.c:345: write8Reg(0x2C);
                                   1983 ;	assignBit
      0007BE C2 B5            [12] 1984 	clr	_P3_5
                                   1985 ;	assignBit
      0007C0 D2 B4            [12] 1986 	setb	_P3_4
      0007C2 85*12 82         [24] 1987 	mov	dpl,_lcd_address
      0007C5 85*13 83         [24] 1988 	mov	dph,(_lcd_address + 1)
      0007C8 74 2C            [12] 1989 	mov	a,#0x2c
      0007CA F0               [24] 1990 	movx	@dptr,a
                                   1991 ;	assignBit
      0007CB C2 B4            [12] 1992 	clr	_P3_4
                                   1993 ;	ecen4330_lcd_v3.c:346: CD = 1;
                                   1994 ;	assignBit
      0007CD D2 B5            [12] 1995 	setb	_P3_5
                                   1996 ;	ecen4330_lcd_v3.c:347: write8(hi); write8(lo);
                                   1997 ;	assignBit
      0007CF D2 B4            [12] 1998 	setb	_P3_4
      0007D1 85*12 82         [24] 1999 	mov	dpl,_lcd_address
      0007D4 85*13 83         [24] 2000 	mov	dph,(_lcd_address + 1)
      0007D7 ED               [12] 2001 	mov	a,r5
      0007D8 F0               [24] 2002 	movx	@dptr,a
                                   2003 ;	assignBit
      0007D9 C2 B4            [12] 2004 	clr	_P3_4
                                   2005 ;	assignBit
      0007DB D2 B4            [12] 2006 	setb	_P3_4
      0007DD 85*12 82         [24] 2007 	mov	dpl,_lcd_address
      0007E0 85*13 83         [24] 2008 	mov	dph,(_lcd_address + 1)
      0007E3 EE               [12] 2009 	mov	a,r6
      0007E4 F0               [24] 2010 	movx	@dptr,a
                                   2011 ;	assignBit
      0007E5 C2 B4            [12] 2012 	clr	_P3_4
                                   2013 ;	ecen4330_lcd_v3.c:350: while (blocks--) {
      0007E7 7C B0            [12] 2014 	mov	r4,#0xb0
      0007E9 7F 04            [12] 2015 	mov	r7,#0x04
      0007EB                       2016 00104$:
      0007EB 8C 02            [24] 2017 	mov	ar2,r4
      0007ED 8F 03            [24] 2018 	mov	ar3,r7
      0007EF 1C               [12] 2019 	dec	r4
      0007F0 BC FF 01         [24] 2020 	cjne	r4,#0xff,00140$
      0007F3 1F               [12] 2021 	dec	r7
      0007F4                       2022 00140$:
      0007F4 EA               [12] 2023 	mov	a,r2
      0007F5 4B               [12] 2024 	orl	a,r3
      0007F6 60 66            [24] 2025 	jz	00106$
                                   2026 ;	ecen4330_lcd_v3.c:352: do {
      0007F8 7B 10            [12] 2027 	mov	r3,#0x10
      0007FA                       2028 00101$:
                                   2029 ;	ecen4330_lcd_v3.c:354: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2030 ;	assignBit
      0007FA D2 B4            [12] 2031 	setb	_P3_4
      0007FC 85*12 82         [24] 2032 	mov	dpl,_lcd_address
      0007FF 85*13 83         [24] 2033 	mov	dph,(_lcd_address + 1)
      000802 ED               [12] 2034 	mov	a,r5
      000803 F0               [24] 2035 	movx	@dptr,a
                                   2036 ;	assignBit
      000804 C2 B4            [12] 2037 	clr	_P3_4
                                   2038 ;	assignBit
      000806 D2 B4            [12] 2039 	setb	_P3_4
      000808 85*12 82         [24] 2040 	mov	dpl,_lcd_address
      00080B 85*13 83         [24] 2041 	mov	dph,(_lcd_address + 1)
      00080E EE               [12] 2042 	mov	a,r6
      00080F F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	assignBit
      000810 C2 B4            [12] 2045 	clr	_P3_4
                                   2046 ;	assignBit
      000812 D2 B4            [12] 2047 	setb	_P3_4
      000814 85*12 82         [24] 2048 	mov	dpl,_lcd_address
      000817 85*13 83         [24] 2049 	mov	dph,(_lcd_address + 1)
      00081A ED               [12] 2050 	mov	a,r5
      00081B F0               [24] 2051 	movx	@dptr,a
                                   2052 ;	assignBit
      00081C C2 B4            [12] 2053 	clr	_P3_4
                                   2054 ;	assignBit
      00081E D2 B4            [12] 2055 	setb	_P3_4
      000820 85*12 82         [24] 2056 	mov	dpl,_lcd_address
      000823 85*13 83         [24] 2057 	mov	dph,(_lcd_address + 1)
      000826 EE               [12] 2058 	mov	a,r6
      000827 F0               [24] 2059 	movx	@dptr,a
                                   2060 ;	assignBit
      000828 C2 B4            [12] 2061 	clr	_P3_4
                                   2062 ;	ecen4330_lcd_v3.c:355: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2063 ;	assignBit
      00082A D2 B4            [12] 2064 	setb	_P3_4
      00082C 85*12 82         [24] 2065 	mov	dpl,_lcd_address
      00082F 85*13 83         [24] 2066 	mov	dph,(_lcd_address + 1)
      000832 ED               [12] 2067 	mov	a,r5
      000833 F0               [24] 2068 	movx	@dptr,a
                                   2069 ;	assignBit
      000834 C2 B4            [12] 2070 	clr	_P3_4
                                   2071 ;	assignBit
      000836 D2 B4            [12] 2072 	setb	_P3_4
      000838 85*12 82         [24] 2073 	mov	dpl,_lcd_address
      00083B 85*13 83         [24] 2074 	mov	dph,(_lcd_address + 1)
      00083E EE               [12] 2075 	mov	a,r6
      00083F F0               [24] 2076 	movx	@dptr,a
                                   2077 ;	assignBit
      000840 C2 B4            [12] 2078 	clr	_P3_4
                                   2079 ;	assignBit
      000842 D2 B4            [12] 2080 	setb	_P3_4
      000844 85*12 82         [24] 2081 	mov	dpl,_lcd_address
      000847 85*13 83         [24] 2082 	mov	dph,(_lcd_address + 1)
      00084A ED               [12] 2083 	mov	a,r5
      00084B F0               [24] 2084 	movx	@dptr,a
                                   2085 ;	assignBit
      00084C C2 B4            [12] 2086 	clr	_P3_4
                                   2087 ;	assignBit
      00084E D2 B4            [12] 2088 	setb	_P3_4
      000850 85*12 82         [24] 2089 	mov	dpl,_lcd_address
      000853 85*13 83         [24] 2090 	mov	dph,(_lcd_address + 1)
      000856 EE               [12] 2091 	mov	a,r6
      000857 F0               [24] 2092 	movx	@dptr,a
                                   2093 ;	assignBit
      000858 C2 B4            [12] 2094 	clr	_P3_4
                                   2095 ;	ecen4330_lcd_v3.c:356: } while(--i);
      00085A DB 9E            [24] 2096 	djnz	r3,00101$
      00085C 80 8D            [24] 2097 	sjmp	00104$
      00085E                       2098 00106$:
                                   2099 ;	ecen4330_lcd_v3.c:358: for (i = (char)len & 63; i--; ) {
      00085E 7F 3F            [12] 2100 	mov	r7,#0x3f
      000860                       2101 00109$:
      000860 8F 04            [24] 2102 	mov	ar4,r7
      000862 1F               [12] 2103 	dec	r7
      000863 EC               [12] 2104 	mov	a,r4
      000864 60 1A            [24] 2105 	jz	00111$
                                   2106 ;	ecen4330_lcd_v3.c:360: write8(hi); write8(lo);
                                   2107 ;	assignBit
      000866 D2 B4            [12] 2108 	setb	_P3_4
      000868 85*12 82         [24] 2109 	mov	dpl,_lcd_address
      00086B 85*13 83         [24] 2110 	mov	dph,(_lcd_address + 1)
      00086E ED               [12] 2111 	mov	a,r5
      00086F F0               [24] 2112 	movx	@dptr,a
                                   2113 ;	assignBit
      000870 C2 B4            [12] 2114 	clr	_P3_4
                                   2115 ;	assignBit
      000872 D2 B4            [12] 2116 	setb	_P3_4
      000874 85*12 82         [24] 2117 	mov	dpl,_lcd_address
      000877 85*13 83         [24] 2118 	mov	dph,(_lcd_address + 1)
      00087A EE               [12] 2119 	mov	a,r6
      00087B F0               [24] 2120 	movx	@dptr,a
                                   2121 ;	assignBit
      00087C C2 B4            [12] 2122 	clr	_P3_4
      00087E 80 E0            [24] 2123 	sjmp	00109$
      000880                       2124 00111$:
                                   2125 ;	ecen4330_lcd_v3.c:363: }
      000880 22               [24] 2126 	ret
                                   2127 ;------------------------------------------------------------
                                   2128 ;Allocation info for local variables in function 'drawChar'
                                   2129 ;------------------------------------------------------------
                                   2130 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2131 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2132 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2133 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2134 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2135 ;x                         Allocated to registers r6 r7 
                                   2136 ;i                         Allocated with name '_drawChar_i_65537_149'
                                   2137 ;line                      Allocated with name '_drawChar_line_196609_151'
                                   2138 ;j                         Allocated with name '_drawChar_j_196610_154'
                                   2139 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2140 ;sloc2                     Allocated with name '_drawChar_sloc2_1_0'
                                   2141 ;------------------------------------------------------------
                                   2142 ;	ecen4330_lcd_v3.c:374: void drawChar (int16_t x, int16_t y, uint8_t c,uint16_t color, uint16_t bg, uint8_t size) {
                                   2143 ;	-----------------------------------------
                                   2144 ;	 function drawChar
                                   2145 ;	-----------------------------------------
      000881                       2146 _drawChar:
      000881 AE 82            [24] 2147 	mov	r6,dpl
      000883 AF 83            [24] 2148 	mov	r7,dph
                                   2149 ;	ecen4330_lcd_v3.c:375: if ((x >=TFTWIDTH) ||
      000885 C3               [12] 2150 	clr	c
      000886 EE               [12] 2151 	mov	a,r6
      000887 94 F0            [12] 2152 	subb	a,#0xf0
      000889 EF               [12] 2153 	mov	a,r7
      00088A 64 80            [12] 2154 	xrl	a,#0x80
      00088C 94 80            [12] 2155 	subb	a,#0x80
      00088E 50 67            [24] 2156 	jnc	00101$
                                   2157 ;	ecen4330_lcd_v3.c:376: (y >=TFTHEIGHT)           ||
      000890 AC*4C            [24] 2158 	mov	r4,_drawChar_PARM_2
      000892 AD*4D            [24] 2159 	mov	r5,(_drawChar_PARM_2 + 1)
      000894 C3               [12] 2160 	clr	c
      000895 EC               [12] 2161 	mov	a,r4
      000896 94 40            [12] 2162 	subb	a,#0x40
      000898 ED               [12] 2163 	mov	a,r5
      000899 64 80            [12] 2164 	xrl	a,#0x80
      00089B 94 81            [12] 2165 	subb	a,#0x81
      00089D 50 58            [24] 2166 	jnc	00101$
                                   2167 ;	ecen4330_lcd_v3.c:377: ((x + 6 * size - 1) < 0) ||
      00089F AA*53            [24] 2168 	mov	r2,_drawChar_PARM_6
      0008A1 7B 00            [12] 2169 	mov	r3,#0x00
      0008A3 8A*00            [24] 2170 	mov	__mulint_PARM_2,r2
      0008A5 8B*01            [24] 2171 	mov	(__mulint_PARM_2 + 1),r3
      0008A7 90 00 06         [24] 2172 	mov	dptr,#0x0006
      0008AA C0 07            [24] 2173 	push	ar7
      0008AC C0 06            [24] 2174 	push	ar6
      0008AE C0 05            [24] 2175 	push	ar5
      0008B0 C0 04            [24] 2176 	push	ar4
      0008B2 C0 03            [24] 2177 	push	ar3
      0008B4 C0 02            [24] 2178 	push	ar2
      0008B6 12r00r00         [24] 2179 	lcall	__mulint
      0008B9 A8 82            [24] 2180 	mov	r0,dpl
      0008BB A9 83            [24] 2181 	mov	r1,dph
      0008BD D0 02            [24] 2182 	pop	ar2
      0008BF D0 03            [24] 2183 	pop	ar3
      0008C1 D0 04            [24] 2184 	pop	ar4
      0008C3 D0 05            [24] 2185 	pop	ar5
      0008C5 D0 06            [24] 2186 	pop	ar6
      0008C7 D0 07            [24] 2187 	pop	ar7
      0008C9 E8               [12] 2188 	mov	a,r0
      0008CA 2E               [12] 2189 	add	a,r6
      0008CB F8               [12] 2190 	mov	r0,a
      0008CC E9               [12] 2191 	mov	a,r1
      0008CD 3F               [12] 2192 	addc	a,r7
      0008CE F9               [12] 2193 	mov	r1,a
      0008CF 18               [12] 2194 	dec	r0
      0008D0 B8 FF 01         [24] 2195 	cjne	r0,#0xff,00176$
      0008D3 19               [12] 2196 	dec	r1
      0008D4                       2197 00176$:
      0008D4 E9               [12] 2198 	mov	a,r1
      0008D5 20 E7 1F         [24] 2199 	jb	acc.7,00101$
                                   2200 ;	ecen4330_lcd_v3.c:378: ((y + 8 * size - 1) < 0))
      0008D8 EB               [12] 2201 	mov	a,r3
      0008D9 C4               [12] 2202 	swap	a
      0008DA 03               [12] 2203 	rr	a
      0008DB 54 F8            [12] 2204 	anl	a,#0xf8
      0008DD CA               [12] 2205 	xch	a,r2
      0008DE C4               [12] 2206 	swap	a
      0008DF 03               [12] 2207 	rr	a
      0008E0 CA               [12] 2208 	xch	a,r2
      0008E1 6A               [12] 2209 	xrl	a,r2
      0008E2 CA               [12] 2210 	xch	a,r2
      0008E3 54 F8            [12] 2211 	anl	a,#0xf8
      0008E5 CA               [12] 2212 	xch	a,r2
      0008E6 6A               [12] 2213 	xrl	a,r2
      0008E7 FB               [12] 2214 	mov	r3,a
      0008E8 EA               [12] 2215 	mov	a,r2
      0008E9 2C               [12] 2216 	add	a,r4
      0008EA FA               [12] 2217 	mov	r2,a
      0008EB EB               [12] 2218 	mov	a,r3
      0008EC 3D               [12] 2219 	addc	a,r5
      0008ED FB               [12] 2220 	mov	r3,a
      0008EE 1A               [12] 2221 	dec	r2
      0008EF BA FF 01         [24] 2222 	cjne	r2,#0xff,00178$
      0008F2 1B               [12] 2223 	dec	r3
      0008F3                       2224 00178$:
      0008F3 EB               [12] 2225 	mov	a,r3
      0008F4 30 E7 01         [24] 2226 	jnb	acc.7,00138$
      0008F7                       2227 00101$:
                                   2228 ;	ecen4330_lcd_v3.c:380: return;
      0008F7 22               [24] 2229 	ret
                                   2230 ;	ecen4330_lcd_v3.c:385: for (i=0; i<6; i++ )
      0008F8                       2231 00138$:
      0008F8 74 01            [12] 2232 	mov	a,#0x01
      0008FA B5*53 04         [24] 2233 	cjne	a,_drawChar_PARM_6,00180$
      0008FD 74 01            [12] 2234 	mov	a,#0x01
      0008FF 80 01            [24] 2235 	sjmp	00181$
      000901                       2236 00180$:
      000901 E4               [12] 2237 	clr	a
      000902                       2238 00181$:
      000902 FB               [12] 2239 	mov	r3,a
      000903 FA               [12] 2240 	mov	r2,a
      000904 E5*4F            [12] 2241 	mov	a,_drawChar_PARM_4
      000906 B5*51 08         [24] 2242 	cjne	a,_drawChar_PARM_5,00182$
      000909 E5*50            [12] 2243 	mov	a,(_drawChar_PARM_4 + 1)
      00090B B5*52 03         [24] 2244 	cjne	a,(_drawChar_PARM_5 + 1),00182$
      00090E D3               [12] 2245 	setb	c
      00090F 80 01            [24] 2246 	sjmp	00183$
      000911                       2247 00182$:
      000911 C3               [12] 2248 	clr	c
      000912                       2249 00183$:
      000912 92*00            [24] 2250 	mov	_drawChar_sloc0_1_0,c
      000914 75*54 00         [24] 2251 	mov	_drawChar_i_65537_149,#0x00
      000917                       2252 00124$:
                                   2253 ;	ecen4330_lcd_v3.c:389: if (i == 5)
      000917 74 05            [12] 2254 	mov	a,#0x05
      000919 B5*54 05         [24] 2255 	cjne	a,_drawChar_i_65537_149,00107$
                                   2256 ;	ecen4330_lcd_v3.c:391: line = 0x0;
      00091C 75*55 00         [24] 2257 	mov	_drawChar_line_196609_151,#0x00
      00091F 80 47            [24] 2258 	sjmp	00136$
      000921                       2259 00107$:
                                   2260 ;	ecen4330_lcd_v3.c:395: line = pgm_read_byte(font+(c*5)+i);
      000921 C0 02            [24] 2261 	push	ar2
      000923 85*4E*00         [24] 2262 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000926 75*01 00         [24] 2263 	mov	(__mulint_PARM_2 + 1),#0x00
      000929 90 00 05         [24] 2264 	mov	dptr,#0x0005
      00092C C0 07            [24] 2265 	push	ar7
      00092E C0 06            [24] 2266 	push	ar6
      000930 C0 05            [24] 2267 	push	ar5
      000932 C0 04            [24] 2268 	push	ar4
      000934 C0 03            [24] 2269 	push	ar3
      000936 12r00r00         [24] 2270 	lcall	__mulint
      000939 A9 82            [24] 2271 	mov	r1,dpl
      00093B AA 83            [24] 2272 	mov	r2,dph
      00093D D0 03            [24] 2273 	pop	ar3
      00093F D0 04            [24] 2274 	pop	ar4
      000941 D0 05            [24] 2275 	pop	ar5
      000943 D0 06            [24] 2276 	pop	ar6
      000945 D0 07            [24] 2277 	pop	ar7
      000947 E9               [12] 2278 	mov	a,r1
      000948 24r00            [12] 2279 	add	a,#_font
      00094A F5*57            [12] 2280 	mov	_drawChar_sloc1_1_0,a
      00094C EA               [12] 2281 	mov	a,r2
      00094D 34s00            [12] 2282 	addc	a,#(_font >> 8)
      00094F F5*58            [12] 2283 	mov	(_drawChar_sloc1_1_0 + 1),a
      000951 E5*54            [12] 2284 	mov	a,_drawChar_i_65537_149
      000953 F9               [12] 2285 	mov	r1,a
      000954 33               [12] 2286 	rlc	a
      000955 95 E0            [12] 2287 	subb	a,acc
      000957 FA               [12] 2288 	mov	r2,a
      000958 E9               [12] 2289 	mov	a,r1
      000959 25*57            [12] 2290 	add	a,_drawChar_sloc1_1_0
      00095B F5 82            [12] 2291 	mov	dpl,a
      00095D EA               [12] 2292 	mov	a,r2
      00095E 35*58            [12] 2293 	addc	a,(_drawChar_sloc1_1_0 + 1)
      000960 F5 83            [12] 2294 	mov	dph,a
      000962 E4               [12] 2295 	clr	a
      000963 93               [24] 2296 	movc	a,@a+dptr
      000964 F5*55            [12] 2297 	mov	_drawChar_line_196609_151,a
                                   2298 ;	ecen4330_lcd_v3.c:385: for (i=0; i<6; i++ )
      000966 D0 02            [24] 2299 	pop	ar2
                                   2300 ;	ecen4330_lcd_v3.c:400: for (j = 0; j<8; j++)
      000968                       2301 00136$:
      000968 C2 D5            [12] 2302 	clr	F0
      00096A 85*53 F0         [24] 2303 	mov	b,_drawChar_PARM_6
      00096D E5*54            [12] 2304 	mov	a,_drawChar_i_65537_149
      00096F 30 E7 04         [24] 2305 	jnb	acc.7,00186$
      000972 B2 D5            [12] 2306 	cpl	F0
      000974 F4               [12] 2307 	cpl	a
      000975 04               [12] 2308 	inc	a
      000976                       2309 00186$:
      000976 A4               [48] 2310 	mul	ab
      000977 30 D5 0A         [24] 2311 	jnb	F0,00187$
      00097A F4               [12] 2312 	cpl	a
      00097B 24 01            [12] 2313 	add	a,#0x01
      00097D C5 F0            [12] 2314 	xch	a,b
      00097F F4               [12] 2315 	cpl	a
      000980 34 00            [12] 2316 	addc	a,#0x00
      000982 C5 F0            [12] 2317 	xch	a,b
      000984                       2318 00187$:
      000984 2E               [12] 2319 	add	a,r6
      000985 F5*57            [12] 2320 	mov	_drawChar_sloc1_1_0,a
      000987 EF               [12] 2321 	mov	a,r7
      000988 35 F0            [12] 2322 	addc	a,b
      00098A F5*58            [12] 2323 	mov	(_drawChar_sloc1_1_0 + 1),a
      00098C 85*57*59         [24] 2324 	mov	_drawChar_sloc2_1_0,_drawChar_sloc1_1_0
      00098F 85*58*5A         [24] 2325 	mov	(_drawChar_sloc2_1_0 + 1),(_drawChar_sloc1_1_0 + 1)
      000992 75*56 00         [24] 2326 	mov	_drawChar_j_196610_154,#0x00
      000995                       2327 00122$:
                                   2328 ;	ecen4330_lcd_v3.c:402: if (line & 0x1)
      000995 E5*55            [12] 2329 	mov	a,_drawChar_line_196609_151
      000997 20 E0 03         [24] 2330 	jb	acc.0,00188$
      00099A 02r0Ar42         [24] 2331 	ljmp	00118$
      00099D                       2332 00188$:
                                   2333 ;	ecen4330_lcd_v3.c:404: if (size == 1)
      00099D EB               [12] 2334 	mov	a,r3
      00099E 60 46            [24] 2335 	jz	00110$
                                   2336 ;	ecen4330_lcd_v3.c:406: drawPixel(x+i, y+j, color);
      0009A0 E5*54            [12] 2337 	mov	a,_drawChar_i_65537_149
      0009A2 F8               [12] 2338 	mov	r0,a
      0009A3 33               [12] 2339 	rlc	a
      0009A4 95 E0            [12] 2340 	subb	a,acc
      0009A6 F9               [12] 2341 	mov	r1,a
      0009A7 E8               [12] 2342 	mov	a,r0
      0009A8 2E               [12] 2343 	add	a,r6
      0009A9 F8               [12] 2344 	mov	r0,a
      0009AA E9               [12] 2345 	mov	a,r1
      0009AB 3F               [12] 2346 	addc	a,r7
      0009AC F9               [12] 2347 	mov	r1,a
      0009AD 88 82            [24] 2348 	mov	dpl,r0
      0009AF 89 83            [24] 2349 	mov	dph,r1
      0009B1 E5*56            [12] 2350 	mov	a,_drawChar_j_196610_154
      0009B3 F8               [12] 2351 	mov	r0,a
      0009B4 33               [12] 2352 	rlc	a
      0009B5 95 E0            [12] 2353 	subb	a,acc
      0009B7 F9               [12] 2354 	mov	r1,a
      0009B8 E8               [12] 2355 	mov	a,r0
      0009B9 2C               [12] 2356 	add	a,r4
      0009BA F8               [12] 2357 	mov	r0,a
      0009BB E9               [12] 2358 	mov	a,r1
      0009BC 3D               [12] 2359 	addc	a,r5
      0009BD F9               [12] 2360 	mov	r1,a
      0009BE 88*26            [24] 2361 	mov	_drawPixel_PARM_2,r0
      0009C0 89*27            [24] 2362 	mov	(_drawPixel_PARM_2 + 1),r1
      0009C2 85*4F*28         [24] 2363 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009C5 85*50*29         [24] 2364 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009C8 C0 07            [24] 2365 	push	ar7
      0009CA C0 06            [24] 2366 	push	ar6
      0009CC C0 05            [24] 2367 	push	ar5
      0009CE C0 04            [24] 2368 	push	ar4
      0009D0 C0 03            [24] 2369 	push	ar3
      0009D2 C0 02            [24] 2370 	push	ar2
      0009D4 12r03r1E         [24] 2371 	lcall	_drawPixel
      0009D7 D0 02            [24] 2372 	pop	ar2
      0009D9 D0 03            [24] 2373 	pop	ar3
      0009DB D0 04            [24] 2374 	pop	ar4
      0009DD D0 05            [24] 2375 	pop	ar5
      0009DF D0 06            [24] 2376 	pop	ar6
      0009E1 D0 07            [24] 2377 	pop	ar7
      0009E3 02r0ArE9         [24] 2378 	ljmp	00119$
      0009E6                       2379 00110$:
                                   2380 ;	ecen4330_lcd_v3.c:409: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009E6 85*59 82         [24] 2381 	mov	dpl,_drawChar_sloc2_1_0
      0009E9 85*5A 83         [24] 2382 	mov	dph,(_drawChar_sloc2_1_0 + 1)
      0009EC C2 D5            [12] 2383 	clr	F0
      0009EE 85*53 F0         [24] 2384 	mov	b,_drawChar_PARM_6
      0009F1 E5*56            [12] 2385 	mov	a,_drawChar_j_196610_154
      0009F3 30 E7 04         [24] 2386 	jnb	acc.7,00190$
      0009F6 B2 D5            [12] 2387 	cpl	F0
      0009F8 F4               [12] 2388 	cpl	a
      0009F9 04               [12] 2389 	inc	a
      0009FA                       2390 00190$:
      0009FA A4               [48] 2391 	mul	ab
      0009FB 30 D5 0A         [24] 2392 	jnb	F0,00191$
      0009FE F4               [12] 2393 	cpl	a
      0009FF 24 01            [12] 2394 	add	a,#0x01
      000A01 C5 F0            [12] 2395 	xch	a,b
      000A03 F4               [12] 2396 	cpl	a
      000A04 34 00            [12] 2397 	addc	a,#0x00
      000A06 C5 F0            [12] 2398 	xch	a,b
      000A08                       2399 00191$:
      000A08 2C               [12] 2400 	add	a,r4
      000A09 F8               [12] 2401 	mov	r0,a
      000A0A ED               [12] 2402 	mov	a,r5
      000A0B 35 F0            [12] 2403 	addc	a,b
      000A0D F9               [12] 2404 	mov	r1,a
      000A0E 88*44            [24] 2405 	mov	_fillRect_PARM_2,r0
      000A10 89*45            [24] 2406 	mov	(_fillRect_PARM_2 + 1),r1
      000A12 A8*53            [24] 2407 	mov	r0,_drawChar_PARM_6
      000A14 79 00            [12] 2408 	mov	r1,#0x00
      000A16 88*46            [24] 2409 	mov	_fillRect_PARM_3,r0
      000A18 89*47            [24] 2410 	mov	(_fillRect_PARM_3 + 1),r1
      000A1A 88*48            [24] 2411 	mov	_fillRect_PARM_4,r0
      000A1C 89*49            [24] 2412 	mov	(_fillRect_PARM_4 + 1),r1
      000A1E 85*4F*4A         [24] 2413 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A21 85*50*4B         [24] 2414 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A24 C0 07            [24] 2415 	push	ar7
      000A26 C0 06            [24] 2416 	push	ar6
      000A28 C0 05            [24] 2417 	push	ar5
      000A2A C0 04            [24] 2418 	push	ar4
      000A2C C0 03            [24] 2419 	push	ar3
      000A2E C0 02            [24] 2420 	push	ar2
      000A30 12r06rB9         [24] 2421 	lcall	_fillRect
      000A33 D0 02            [24] 2422 	pop	ar2
      000A35 D0 03            [24] 2423 	pop	ar3
      000A37 D0 04            [24] 2424 	pop	ar4
      000A39 D0 05            [24] 2425 	pop	ar5
      000A3B D0 06            [24] 2426 	pop	ar6
      000A3D D0 07            [24] 2427 	pop	ar7
      000A3F 02r0ArE9         [24] 2428 	ljmp	00119$
      000A42                       2429 00118$:
                                   2430 ;	ecen4330_lcd_v3.c:411: } else if (bg != color)
      000A42 30*00 03         [24] 2431 	jnb	_drawChar_sloc0_1_0,00192$
      000A45 02r0ArE9         [24] 2432 	ljmp	00119$
      000A48                       2433 00192$:
                                   2434 ;	ecen4330_lcd_v3.c:413: if (size == 1)
      000A48 EA               [12] 2435 	mov	a,r2
      000A49 60 45            [24] 2436 	jz	00113$
                                   2437 ;	ecen4330_lcd_v3.c:415: drawPixel(x+i, y+j, bg);
      000A4B E5*54            [12] 2438 	mov	a,_drawChar_i_65537_149
      000A4D F8               [12] 2439 	mov	r0,a
      000A4E 33               [12] 2440 	rlc	a
      000A4F 95 E0            [12] 2441 	subb	a,acc
      000A51 F9               [12] 2442 	mov	r1,a
      000A52 E8               [12] 2443 	mov	a,r0
      000A53 2E               [12] 2444 	add	a,r6
      000A54 F8               [12] 2445 	mov	r0,a
      000A55 E9               [12] 2446 	mov	a,r1
      000A56 3F               [12] 2447 	addc	a,r7
      000A57 F9               [12] 2448 	mov	r1,a
      000A58 88 82            [24] 2449 	mov	dpl,r0
      000A5A 89 83            [24] 2450 	mov	dph,r1
      000A5C E5*56            [12] 2451 	mov	a,_drawChar_j_196610_154
      000A5E F8               [12] 2452 	mov	r0,a
      000A5F 33               [12] 2453 	rlc	a
      000A60 95 E0            [12] 2454 	subb	a,acc
      000A62 F9               [12] 2455 	mov	r1,a
      000A63 E8               [12] 2456 	mov	a,r0
      000A64 2C               [12] 2457 	add	a,r4
      000A65 F8               [12] 2458 	mov	r0,a
      000A66 E9               [12] 2459 	mov	a,r1
      000A67 3D               [12] 2460 	addc	a,r5
      000A68 F9               [12] 2461 	mov	r1,a
      000A69 88*26            [24] 2462 	mov	_drawPixel_PARM_2,r0
      000A6B 89*27            [24] 2463 	mov	(_drawPixel_PARM_2 + 1),r1
      000A6D 85*51*28         [24] 2464 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A70 85*52*29         [24] 2465 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A73 C0 07            [24] 2466 	push	ar7
      000A75 C0 06            [24] 2467 	push	ar6
      000A77 C0 05            [24] 2468 	push	ar5
      000A79 C0 04            [24] 2469 	push	ar4
      000A7B C0 03            [24] 2470 	push	ar3
      000A7D C0 02            [24] 2471 	push	ar2
      000A7F 12r03r1E         [24] 2472 	lcall	_drawPixel
      000A82 D0 02            [24] 2473 	pop	ar2
      000A84 D0 03            [24] 2474 	pop	ar3
      000A86 D0 04            [24] 2475 	pop	ar4
      000A88 D0 05            [24] 2476 	pop	ar5
      000A8A D0 06            [24] 2477 	pop	ar6
      000A8C D0 07            [24] 2478 	pop	ar7
      000A8E 80 59            [24] 2479 	sjmp	00119$
      000A90                       2480 00113$:
                                   2481 ;	ecen4330_lcd_v3.c:419: fillRect(x+i*size, y+j*size, size, size, bg);
      000A90 85*57 82         [24] 2482 	mov	dpl,_drawChar_sloc1_1_0
      000A93 85*58 83         [24] 2483 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000A96 C2 D5            [12] 2484 	clr	F0
      000A98 85*53 F0         [24] 2485 	mov	b,_drawChar_PARM_6
      000A9B E5*56            [12] 2486 	mov	a,_drawChar_j_196610_154
      000A9D 30 E7 04         [24] 2487 	jnb	acc.7,00194$
      000AA0 B2 D5            [12] 2488 	cpl	F0
      000AA2 F4               [12] 2489 	cpl	a
      000AA3 04               [12] 2490 	inc	a
      000AA4                       2491 00194$:
      000AA4 A4               [48] 2492 	mul	ab
      000AA5 30 D5 0A         [24] 2493 	jnb	F0,00195$
      000AA8 F4               [12] 2494 	cpl	a
      000AA9 24 01            [12] 2495 	add	a,#0x01
      000AAB C5 F0            [12] 2496 	xch	a,b
      000AAD F4               [12] 2497 	cpl	a
      000AAE 34 00            [12] 2498 	addc	a,#0x00
      000AB0 C5 F0            [12] 2499 	xch	a,b
      000AB2                       2500 00195$:
      000AB2 2C               [12] 2501 	add	a,r4
      000AB3 F8               [12] 2502 	mov	r0,a
      000AB4 ED               [12] 2503 	mov	a,r5
      000AB5 35 F0            [12] 2504 	addc	a,b
      000AB7 F9               [12] 2505 	mov	r1,a
      000AB8 88*44            [24] 2506 	mov	_fillRect_PARM_2,r0
      000ABA 89*45            [24] 2507 	mov	(_fillRect_PARM_2 + 1),r1
      000ABC A8*53            [24] 2508 	mov	r0,_drawChar_PARM_6
      000ABE 79 00            [12] 2509 	mov	r1,#0x00
      000AC0 88*46            [24] 2510 	mov	_fillRect_PARM_3,r0
      000AC2 89*47            [24] 2511 	mov	(_fillRect_PARM_3 + 1),r1
      000AC4 88*48            [24] 2512 	mov	_fillRect_PARM_4,r0
      000AC6 89*49            [24] 2513 	mov	(_fillRect_PARM_4 + 1),r1
      000AC8 85*51*4A         [24] 2514 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000ACB 85*52*4B         [24] 2515 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000ACE C0 07            [24] 2516 	push	ar7
      000AD0 C0 06            [24] 2517 	push	ar6
      000AD2 C0 05            [24] 2518 	push	ar5
      000AD4 C0 04            [24] 2519 	push	ar4
      000AD6 C0 03            [24] 2520 	push	ar3
      000AD8 C0 02            [24] 2521 	push	ar2
      000ADA 12r06rB9         [24] 2522 	lcall	_fillRect
      000ADD D0 02            [24] 2523 	pop	ar2
      000ADF D0 03            [24] 2524 	pop	ar3
      000AE1 D0 04            [24] 2525 	pop	ar4
      000AE3 D0 05            [24] 2526 	pop	ar5
      000AE5 D0 06            [24] 2527 	pop	ar6
      000AE7 D0 07            [24] 2528 	pop	ar7
      000AE9                       2529 00119$:
                                   2530 ;	ecen4330_lcd_v3.c:423: line >>= 1;
      000AE9 E5*55            [12] 2531 	mov	a,_drawChar_line_196609_151
      000AEB C3               [12] 2532 	clr	c
      000AEC 13               [12] 2533 	rrc	a
      000AED F5*55            [12] 2534 	mov	_drawChar_line_196609_151,a
                                   2535 ;	ecen4330_lcd_v3.c:400: for (j = 0; j<8; j++)
      000AEF 05*56            [12] 2536 	inc	_drawChar_j_196610_154
      000AF1 C3               [12] 2537 	clr	c
      000AF2 E5*56            [12] 2538 	mov	a,_drawChar_j_196610_154
      000AF4 64 80            [12] 2539 	xrl	a,#0x80
      000AF6 94 88            [12] 2540 	subb	a,#0x88
      000AF8 50 03            [24] 2541 	jnc	00196$
      000AFA 02r09r95         [24] 2542 	ljmp	00122$
      000AFD                       2543 00196$:
                                   2544 ;	ecen4330_lcd_v3.c:385: for (i=0; i<6; i++ )
      000AFD 05*54            [12] 2545 	inc	_drawChar_i_65537_149
      000AFF C3               [12] 2546 	clr	c
      000B00 E5*54            [12] 2547 	mov	a,_drawChar_i_65537_149
      000B02 64 80            [12] 2548 	xrl	a,#0x80
      000B04 94 86            [12] 2549 	subb	a,#0x86
      000B06 50 03            [24] 2550 	jnc	00197$
      000B08 02r09r17         [24] 2551 	ljmp	00124$
      000B0B                       2552 00197$:
                                   2553 ;	ecen4330_lcd_v3.c:427: }
      000B0B 22               [24] 2554 	ret
                                   2555 ;------------------------------------------------------------
                                   2556 ;Allocation info for local variables in function 'write'
                                   2557 ;------------------------------------------------------------
                                   2558 ;c                         Allocated to registers r7 
                                   2559 ;------------------------------------------------------------
                                   2560 ;	ecen4330_lcd_v3.c:434: void write (uint8_t c)
                                   2561 ;	-----------------------------------------
                                   2562 ;	 function write
                                   2563 ;	-----------------------------------------
      000B0C                       2564 _write:
      000B0C AF 82            [24] 2565 	mov	r7,dpl
                                   2566 ;	ecen4330_lcd_v3.c:436: if (c == '\n')
      000B0E BF 0A 26         [24] 2567 	cjne	r7,#0x0a,00105$
                                   2568 ;	ecen4330_lcd_v3.c:438: cursor_y += textsize*8;
      000B11 AD*1C            [24] 2569 	mov	r5,_textsize
      000B13 E4               [12] 2570 	clr	a
      000B14 C4               [12] 2571 	swap	a
      000B15 03               [12] 2572 	rr	a
      000B16 54 F8            [12] 2573 	anl	a,#0xf8
      000B18 CD               [12] 2574 	xch	a,r5
      000B19 C4               [12] 2575 	swap	a
      000B1A 03               [12] 2576 	rr	a
      000B1B CD               [12] 2577 	xch	a,r5
      000B1C 6D               [12] 2578 	xrl	a,r5
      000B1D CD               [12] 2579 	xch	a,r5
      000B1E 54 F8            [12] 2580 	anl	a,#0xf8
      000B20 CD               [12] 2581 	xch	a,r5
      000B21 6D               [12] 2582 	xrl	a,r5
      000B22 FE               [12] 2583 	mov	r6,a
      000B23 AB*1A            [24] 2584 	mov	r3,_cursor_y
      000B25 AC*1B            [24] 2585 	mov	r4,(_cursor_y + 1)
      000B27 ED               [12] 2586 	mov	a,r5
      000B28 2B               [12] 2587 	add	a,r3
      000B29 FB               [12] 2588 	mov	r3,a
      000B2A EE               [12] 2589 	mov	a,r6
      000B2B 3C               [12] 2590 	addc	a,r4
      000B2C FC               [12] 2591 	mov	r4,a
      000B2D 8B*1A            [24] 2592 	mov	_cursor_y,r3
      000B2F 8C*1B            [24] 2593 	mov	(_cursor_y + 1),r4
                                   2594 ;	ecen4330_lcd_v3.c:439: cursor_x  = 0;
      000B31 E4               [12] 2595 	clr	a
      000B32 F5*18            [12] 2596 	mov	_cursor_x,a
      000B34 F5*19            [12] 2597 	mov	(_cursor_x + 1),a
      000B36 22               [24] 2598 	ret
      000B37                       2599 00105$:
                                   2600 ;	ecen4330_lcd_v3.c:441: else if (c == '\r')
      000B37 BF 0D 01         [24] 2601 	cjne	r7,#0x0d,00119$
      000B3A 22               [24] 2602 	ret
      000B3B                       2603 00119$:
                                   2604 ;	ecen4330_lcd_v3.c:446: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B3B 85*1A*4C         [24] 2605 	mov	_drawChar_PARM_2,_cursor_y
      000B3E 85*1B*4D         [24] 2606 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B41 8F*4E            [24] 2607 	mov	_drawChar_PARM_3,r7
      000B43 85*1E*4F         [24] 2608 	mov	_drawChar_PARM_4,_textcolor
      000B46 85*1F*50         [24] 2609 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B49 85*20*51         [24] 2610 	mov	_drawChar_PARM_5,_textbgcolor
      000B4C 85*21*52         [24] 2611 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B4F 85*1C*53         [24] 2612 	mov	_drawChar_PARM_6,_textsize
      000B52 85*18 82         [24] 2613 	mov	dpl,_cursor_x
      000B55 85*19 83         [24] 2614 	mov	dph,(_cursor_x + 1)
      000B58 12r08r81         [24] 2615 	lcall	_drawChar
                                   2616 ;	ecen4330_lcd_v3.c:447: cursor_x += textsize*6;
      000B5B 85*1C*00         [24] 2617 	mov	__mulint_PARM_2,_textsize
      000B5E 75*01 00         [24] 2618 	mov	(__mulint_PARM_2 + 1),#0x00
      000B61 90 00 06         [24] 2619 	mov	dptr,#0x0006
      000B64 12r00r00         [24] 2620 	lcall	__mulint
      000B67 AE 82            [24] 2621 	mov	r6,dpl
      000B69 AF 83            [24] 2622 	mov	r7,dph
      000B6B AC*18            [24] 2623 	mov	r4,_cursor_x
      000B6D AD*19            [24] 2624 	mov	r5,(_cursor_x + 1)
      000B6F EE               [12] 2625 	mov	a,r6
      000B70 2C               [12] 2626 	add	a,r4
      000B71 FC               [12] 2627 	mov	r4,a
      000B72 EF               [12] 2628 	mov	a,r7
      000B73 3D               [12] 2629 	addc	a,r5
      000B74 FD               [12] 2630 	mov	r5,a
      000B75 8C*18            [24] 2631 	mov	_cursor_x,r4
      000B77 8D*19            [24] 2632 	mov	(_cursor_x + 1),r5
                                   2633 ;	ecen4330_lcd_v3.c:449: }
      000B79 22               [24] 2634 	ret
                                   2635 ;------------------------------------------------------------
                                   2636 ;Allocation info for local variables in function 'LCD_string_write'
                                   2637 ;------------------------------------------------------------
                                   2638 ;str                       Allocated to registers r5 r6 r7 
                                   2639 ;i                         Allocated to registers r3 r4 
                                   2640 ;------------------------------------------------------------
                                   2641 ;	ecen4330_lcd_v3.c:456: void LCD_string_write (int8_t *str)
                                   2642 ;	-----------------------------------------
                                   2643 ;	 function LCD_string_write
                                   2644 ;	-----------------------------------------
      000B7A                       2645 _LCD_string_write:
      000B7A AD 82            [24] 2646 	mov	r5,dpl
      000B7C AE 83            [24] 2647 	mov	r6,dph
      000B7E AF F0            [24] 2648 	mov	r7,b
                                   2649 ;	ecen4330_lcd_v3.c:459: for (i=0;str[i]!=0;i++)
      000B80 7B 00            [12] 2650 	mov	r3,#0x00
      000B82 7C 00            [12] 2651 	mov	r4,#0x00
      000B84                       2652 00103$:
      000B84 EB               [12] 2653 	mov	a,r3
      000B85 2D               [12] 2654 	add	a,r5
      000B86 F8               [12] 2655 	mov	r0,a
      000B87 EC               [12] 2656 	mov	a,r4
      000B88 3E               [12] 2657 	addc	a,r6
      000B89 F9               [12] 2658 	mov	r1,a
      000B8A 8F 02            [24] 2659 	mov	ar2,r7
      000B8C 88 82            [24] 2660 	mov	dpl,r0
      000B8E 89 83            [24] 2661 	mov	dph,r1
      000B90 8A F0            [24] 2662 	mov	b,r2
      000B92 12r00r00         [24] 2663 	lcall	__gptrget
      000B95 FA               [12] 2664 	mov	r2,a
      000B96 60 20            [24] 2665 	jz	00105$
                                   2666 ;	ecen4330_lcd_v3.c:461: write(str[i]);
      000B98 8A 82            [24] 2667 	mov	dpl,r2
      000B9A C0 07            [24] 2668 	push	ar7
      000B9C C0 06            [24] 2669 	push	ar6
      000B9E C0 05            [24] 2670 	push	ar5
      000BA0 C0 04            [24] 2671 	push	ar4
      000BA2 C0 03            [24] 2672 	push	ar3
      000BA4 12r0Br0C         [24] 2673 	lcall	_write
      000BA7 D0 03            [24] 2674 	pop	ar3
      000BA9 D0 04            [24] 2675 	pop	ar4
      000BAB D0 05            [24] 2676 	pop	ar5
      000BAD D0 06            [24] 2677 	pop	ar6
      000BAF D0 07            [24] 2678 	pop	ar7
                                   2679 ;	ecen4330_lcd_v3.c:459: for (i=0;str[i]!=0;i++)
      000BB1 0B               [12] 2680 	inc	r3
      000BB2 BB 00 CF         [24] 2681 	cjne	r3,#0x00,00103$
      000BB5 0C               [12] 2682 	inc	r4
      000BB6 80 CC            [24] 2683 	sjmp	00103$
      000BB8                       2684 00105$:
                                   2685 ;	ecen4330_lcd_v3.c:463: }
      000BB8 22               [24] 2686 	ret
                                   2687 ;------------------------------------------------------------
                                   2688 ;Allocation info for local variables in function 'testRAM'
                                   2689 ;------------------------------------------------------------
                                   2690 ;d                         Allocated to registers r7 
                                   2691 ;i                         Allocated to registers r3 r4 r5 r6 
                                   2692 ;ram_address               Allocated to registers 
                                   2693 ;------------------------------------------------------------
                                   2694 ;	ecen4330_lcd_v3.c:470: void testRAM (uint8_t d) {
                                   2695 ;	-----------------------------------------
                                   2696 ;	 function testRAM
                                   2697 ;	-----------------------------------------
      000BB9                       2698 _testRAM:
      000BB9 AF 82            [24] 2699 	mov	r7,dpl
                                   2700 ;	ecen4330_lcd_v3.c:474: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BBB 7B 00            [12] 2701 	mov	r3,#0x00
      000BBD 7C 00            [12] 2702 	mov	r4,#0x00
      000BBF 7D 00            [12] 2703 	mov	r5,#0x00
      000BC1 7E 00            [12] 2704 	mov	r6,#0x00
      000BC3                       2705 00102$:
                                   2706 ;	ecen4330_lcd_v3.c:475: IOM = 0;
                                   2707 ;	assignBit
      000BC3 C2 B4            [12] 2708 	clr	_P3_4
                                   2709 ;	ecen4330_lcd_v3.c:476: ram_address = (uint8_t __xdata*)(i);
      000BC5 8B 82            [24] 2710 	mov	dpl,r3
      000BC7 8C 83            [24] 2711 	mov	dph,r4
                                   2712 ;	ecen4330_lcd_v3.c:477: *ram_address = d;
      000BC9 EF               [12] 2713 	mov	a,r7
      000BCA F0               [24] 2714 	movx	@dptr,a
                                   2715 ;	ecen4330_lcd_v3.c:478: IOM = 1;
                                   2716 ;	assignBit
      000BCB D2 B4            [12] 2717 	setb	_P3_4
                                   2718 ;	ecen4330_lcd_v3.c:474: for (i = __START_RAM__; i < __END_RAM__; i++) {
      000BCD 0B               [12] 2719 	inc	r3
      000BCE BB 00 09         [24] 2720 	cjne	r3,#0x00,00111$
      000BD1 0C               [12] 2721 	inc	r4
      000BD2 BC 00 05         [24] 2722 	cjne	r4,#0x00,00111$
      000BD5 0D               [12] 2723 	inc	r5
      000BD6 BD 00 01         [24] 2724 	cjne	r5,#0x00,00111$
      000BD9 0E               [12] 2725 	inc	r6
      000BDA                       2726 00111$:
      000BDA C3               [12] 2727 	clr	c
      000BDB EB               [12] 2728 	mov	a,r3
      000BDC 94 FF            [12] 2729 	subb	a,#0xff
      000BDE EC               [12] 2730 	mov	a,r4
      000BDF 94 FF            [12] 2731 	subb	a,#0xff
      000BE1 ED               [12] 2732 	mov	a,r5
      000BE2 94 00            [12] 2733 	subb	a,#0x00
      000BE4 EE               [12] 2734 	mov	a,r6
      000BE5 94 00            [12] 2735 	subb	a,#0x00
      000BE7 40 DA            [24] 2736 	jc	00102$
                                   2737 ;	ecen4330_lcd_v3.c:480: }
      000BE9 22               [24] 2738 	ret
                                   2739 ;------------------------------------------------------------
                                   2740 ;Allocation info for local variables in function 'freeType'
                                   2741 ;------------------------------------------------------------
                                   2742 ;count                     Allocated to registers r7 
                                   2743 ;d                         Allocated to registers 
                                   2744 ;------------------------------------------------------------
                                   2745 ;	ecen4330_lcd_v3.c:486: void freeType () {
                                   2746 ;	-----------------------------------------
                                   2747 ;	 function freeType
                                   2748 ;	-----------------------------------------
      000BEA                       2749 _freeType:
                                   2750 ;	ecen4330_lcd_v3.c:487: uint8_t count = 0;
      000BEA 7F 00            [12] 2751 	mov	r7,#0x00
                                   2752 ;	ecen4330_lcd_v3.c:489: while (1) {
      000BEC                       2753 00105$:
                                   2754 ;	ecen4330_lcd_v3.c:492: if (count == 8) {
      000BEC BF 08 0E         [24] 2755 	cjne	r7,#0x08,00102$
                                   2756 ;	ecen4330_lcd_v3.c:494: count = 0;
      000BEF 7F 00            [12] 2757 	mov	r7,#0x00
                                   2758 ;	ecen4330_lcd_v3.c:495: write(d);
      000BF1 75 82 0A         [24] 2759 	mov	dpl,#0x0a
      000BF4 C0 07            [24] 2760 	push	ar7
      000BF6 12r0Br0C         [24] 2761 	lcall	_write
      000BF9 D0 07            [24] 2762 	pop	ar7
      000BFB 80 0A            [24] 2763 	sjmp	00103$
      000BFD                       2764 00102$:
                                   2765 ;	ecen4330_lcd_v3.c:498: d = keyDetect();
      000BFD C0 07            [24] 2766 	push	ar7
      000BFF 12r0Cr0A         [24] 2767 	lcall	_keyDetect
                                   2768 ;	ecen4330_lcd_v3.c:499: write(d);
      000C02 12r0Br0C         [24] 2769 	lcall	_write
      000C05 D0 07            [24] 2770 	pop	ar7
      000C07                       2771 00103$:
                                   2772 ;	ecen4330_lcd_v3.c:502: count++;
      000C07 0F               [12] 2773 	inc	r7
                                   2774 ;	ecen4330_lcd_v3.c:504: }
      000C08 80 E2            [24] 2775 	sjmp	00105$
                                   2776 ;------------------------------------------------------------
                                   2777 ;Allocation info for local variables in function 'keyDetect'
                                   2778 ;------------------------------------------------------------
                                   2779 ;	ecen4330_lcd_v3.c:511: uint8_t keyDetect () {
                                   2780 ;	-----------------------------------------
                                   2781 ;	 function keyDetect
                                   2782 ;	-----------------------------------------
      000C0A                       2783 _keyDetect:
                                   2784 ;	ecen4330_lcd_v3.c:512: __KEYPAD_PORT__ = 0xF0;
      000C0A 75 90 F0         [24] 2785 	mov	_P1,#0xf0
                                   2786 ;	ecen4330_lcd_v3.c:513: do
      000C0D                       2787 00101$:
                                   2788 ;	ecen4330_lcd_v3.c:515: __KEYPAD_PORT__ = 0xF0;
      000C0D 75 90 F0         [24] 2789 	mov	_P1,#0xf0
                                   2790 ;	ecen4330_lcd_v3.c:516: colloc = __KEYPAD_PORT__;
      000C10 85 90*10         [24] 2791 	mov	_colloc,_P1
                                   2792 ;	ecen4330_lcd_v3.c:517: colloc&= 0xF0;
      000C13 53*10 F0         [24] 2793 	anl	_colloc,#0xf0
                                   2794 ;	ecen4330_lcd_v3.c:518: } while (colloc != 0xF0);
      000C16 74 F0            [12] 2795 	mov	a,#0xf0
      000C18 B5*10 F2         [24] 2796 	cjne	a,_colloc,00101$
                                   2797 ;	ecen4330_lcd_v3.c:522: do
      000C1B                       2798 00104$:
                                   2799 ;	ecen4330_lcd_v3.c:524: delay(20);
      000C1B 90 00 14         [24] 2800 	mov	dptr,#0x0014
      000C1E 12r00r10         [24] 2801 	lcall	_delay
                                   2802 ;	ecen4330_lcd_v3.c:525: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C21 E5 90            [12] 2803 	mov	a,_P1
      000C23 54 F0            [12] 2804 	anl	a,#0xf0
      000C25 F5*10            [12] 2805 	mov	_colloc,a
                                   2806 ;	ecen4330_lcd_v3.c:526: } while (colloc == 0xF0);
      000C27 74 F0            [12] 2807 	mov	a,#0xf0
      000C29 B5*10 02         [24] 2808 	cjne	a,_colloc,00178$
      000C2C 80 ED            [24] 2809 	sjmp	00104$
      000C2E                       2810 00178$:
                                   2811 ;	ecen4330_lcd_v3.c:528: delay(1);
      000C2E 90 00 01         [24] 2812 	mov	dptr,#0x0001
      000C31 12r00r10         [24] 2813 	lcall	_delay
                                   2814 ;	ecen4330_lcd_v3.c:529: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C34 E5 90            [12] 2815 	mov	a,_P1
      000C36 54 F0            [12] 2816 	anl	a,#0xf0
      000C38 F5*10            [12] 2817 	mov	_colloc,a
                                   2818 ;	ecen4330_lcd_v3.c:530: } while (colloc == 0xF0);
      000C3A 74 F0            [12] 2819 	mov	a,#0xf0
      000C3C B5*10 02         [24] 2820 	cjne	a,_colloc,00179$
      000C3F 80 DA            [24] 2821 	sjmp	00104$
      000C41                       2822 00179$:
                                   2823 ;	ecen4330_lcd_v3.c:532: while (1)
      000C41                       2824 00119$:
                                   2825 ;	ecen4330_lcd_v3.c:534: __KEYPAD_PORT__= 0xFE;
      000C41 75 90 FE         [24] 2826 	mov	_P1,#0xfe
                                   2827 ;	ecen4330_lcd_v3.c:535: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C44 E5 90            [12] 2828 	mov	a,_P1
      000C46 54 F0            [12] 2829 	anl	a,#0xf0
      000C48 F5*10            [12] 2830 	mov	_colloc,a
                                   2831 ;	ecen4330_lcd_v3.c:536: if (colloc != 0xF0)
      000C4A 74 F0            [12] 2832 	mov	a,#0xf0
      000C4C B5*10 02         [24] 2833 	cjne	a,_colloc,00180$
      000C4F 80 05            [24] 2834 	sjmp	00111$
      000C51                       2835 00180$:
                                   2836 ;	ecen4330_lcd_v3.c:538: rowloc = 0;
      000C51 75*11 00         [24] 2837 	mov	_rowloc,#0x00
                                   2838 ;	ecen4330_lcd_v3.c:539: break;
      000C54 80 3D            [24] 2839 	sjmp	00120$
      000C56                       2840 00111$:
                                   2841 ;	ecen4330_lcd_v3.c:542: __KEYPAD_PORT__ = 0xFD;
      000C56 75 90 FD         [24] 2842 	mov	_P1,#0xfd
                                   2843 ;	ecen4330_lcd_v3.c:543: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C59 E5 90            [12] 2844 	mov	a,_P1
      000C5B 54 F0            [12] 2845 	anl	a,#0xf0
      000C5D F5*10            [12] 2846 	mov	_colloc,a
                                   2847 ;	ecen4330_lcd_v3.c:544: if (colloc != 0xF0)
      000C5F 74 F0            [12] 2848 	mov	a,#0xf0
      000C61 B5*10 02         [24] 2849 	cjne	a,_colloc,00181$
      000C64 80 05            [24] 2850 	sjmp	00113$
      000C66                       2851 00181$:
                                   2852 ;	ecen4330_lcd_v3.c:546: rowloc = 1;
      000C66 75*11 01         [24] 2853 	mov	_rowloc,#0x01
                                   2854 ;	ecen4330_lcd_v3.c:547: break;
      000C69 80 28            [24] 2855 	sjmp	00120$
      000C6B                       2856 00113$:
                                   2857 ;	ecen4330_lcd_v3.c:550: __KEYPAD_PORT__ = 0xFB;
      000C6B 75 90 FB         [24] 2858 	mov	_P1,#0xfb
                                   2859 ;	ecen4330_lcd_v3.c:551: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C6E E5 90            [12] 2860 	mov	a,_P1
      000C70 54 F0            [12] 2861 	anl	a,#0xf0
      000C72 F5*10            [12] 2862 	mov	_colloc,a
                                   2863 ;	ecen4330_lcd_v3.c:552: if (colloc != 0xF0)
      000C74 74 F0            [12] 2864 	mov	a,#0xf0
      000C76 B5*10 02         [24] 2865 	cjne	a,_colloc,00182$
      000C79 80 05            [24] 2866 	sjmp	00115$
      000C7B                       2867 00182$:
                                   2868 ;	ecen4330_lcd_v3.c:554: rowloc = 2;
      000C7B 75*11 02         [24] 2869 	mov	_rowloc,#0x02
                                   2870 ;	ecen4330_lcd_v3.c:555: break;
      000C7E 80 13            [24] 2871 	sjmp	00120$
      000C80                       2872 00115$:
                                   2873 ;	ecen4330_lcd_v3.c:558: __KEYPAD_PORT__ = 0xF7;
      000C80 75 90 F7         [24] 2874 	mov	_P1,#0xf7
                                   2875 ;	ecen4330_lcd_v3.c:559: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C83 E5 90            [12] 2876 	mov	a,_P1
      000C85 54 F0            [12] 2877 	anl	a,#0xf0
      000C87 F5*10            [12] 2878 	mov	_colloc,a
                                   2879 ;	ecen4330_lcd_v3.c:560: if (colloc != 0xF0)
      000C89 74 F0            [12] 2880 	mov	a,#0xf0
      000C8B B5*10 02         [24] 2881 	cjne	a,_colloc,00183$
      000C8E 80 B1            [24] 2882 	sjmp	00119$
      000C90                       2883 00183$:
                                   2884 ;	ecen4330_lcd_v3.c:562: rowloc = 3;
      000C90 75*11 03         [24] 2885 	mov	_rowloc,#0x03
                                   2886 ;	ecen4330_lcd_v3.c:563: break;
      000C93                       2887 00120$:
                                   2888 ;	ecen4330_lcd_v3.c:567: if (colloc == 0xE0)
      000C93 74 E0            [12] 2889 	mov	a,#0xe0
      000C95 B5*10 0C         [24] 2890 	cjne	a,_colloc,00128$
                                   2891 ;	ecen4330_lcd_v3.c:569: return (keypad[rowloc][0]);
      000C98 E5*11            [12] 2892 	mov	a,_rowloc
      000C9A 25*11            [12] 2893 	add	a,_rowloc
      000C9C 25 E0            [12] 2894 	add	a,acc
      000C9E 24r00            [12] 2895 	add	a,#_keypad
      000CA0 F9               [12] 2896 	mov	r1,a
      000CA1 87 82            [24] 2897 	mov	dpl,@r1
      000CA3 22               [24] 2898 	ret
      000CA4                       2899 00128$:
                                   2900 ;	ecen4330_lcd_v3.c:571: else if (colloc == 0xD0)
      000CA4 74 D0            [12] 2901 	mov	a,#0xd0
      000CA6 B5*10 0D         [24] 2902 	cjne	a,_colloc,00125$
                                   2903 ;	ecen4330_lcd_v3.c:573: return (keypad[rowloc][1]);
      000CA9 E5*11            [12] 2904 	mov	a,_rowloc
      000CAB 25*11            [12] 2905 	add	a,_rowloc
      000CAD 25 E0            [12] 2906 	add	a,acc
      000CAF 24r00            [12] 2907 	add	a,#_keypad
      000CB1 04               [12] 2908 	inc	a
      000CB2 F9               [12] 2909 	mov	r1,a
      000CB3 87 82            [24] 2910 	mov	dpl,@r1
      000CB5 22               [24] 2911 	ret
      000CB6                       2912 00125$:
                                   2913 ;	ecen4330_lcd_v3.c:575: else if (colloc == 0xB0)
      000CB6 74 B0            [12] 2914 	mov	a,#0xb0
      000CB8 B5*10 0E         [24] 2915 	cjne	a,_colloc,00122$
                                   2916 ;	ecen4330_lcd_v3.c:577: return (keypad[rowloc][2]);
      000CBB E5*11            [12] 2917 	mov	a,_rowloc
      000CBD 25*11            [12] 2918 	add	a,_rowloc
      000CBF 25 E0            [12] 2919 	add	a,acc
      000CC1 24r00            [12] 2920 	add	a,#_keypad
      000CC3 24 02            [12] 2921 	add	a,#0x02
      000CC5 F9               [12] 2922 	mov	r1,a
      000CC6 87 82            [24] 2923 	mov	dpl,@r1
      000CC8 22               [24] 2924 	ret
      000CC9                       2925 00122$:
                                   2926 ;	ecen4330_lcd_v3.c:581: return (keypad[rowloc][3]);
      000CC9 E5*11            [12] 2927 	mov	a,_rowloc
      000CCB 25*11            [12] 2928 	add	a,_rowloc
      000CCD 25 E0            [12] 2929 	add	a,acc
      000CCF 24r00            [12] 2930 	add	a,#_keypad
      000CD1 24 03            [12] 2931 	add	a,#0x03
      000CD3 F9               [12] 2932 	mov	r1,a
      000CD4 87 82            [24] 2933 	mov	dpl,@r1
                                   2934 ;	ecen4330_lcd_v3.c:583: }
      000CD6 22               [24] 2935 	ret
                                   2936 ;------------------------------------------------------------
                                   2937 ;Allocation info for local variables in function 'reverse'
                                   2938 ;------------------------------------------------------------
                                   2939 ;d                         Allocated to registers r7 
                                   2940 ;rev                       Allocated to registers r5 r6 
                                   2941 ;val                       Allocated to registers r1 r2 
                                   2942 ;------------------------------------------------------------
                                   2943 ;	ecen4330_lcd_v3.c:585: uint16_t reverse (uint8_t d) {
                                   2944 ;	-----------------------------------------
                                   2945 ;	 function reverse
                                   2946 ;	-----------------------------------------
      000CD7                       2947 _reverse:
      000CD7 AF 82            [24] 2948 	mov	r7,dpl
                                   2949 ;	ecen4330_lcd_v3.c:586: uint16_t rev = 0;
      000CD9 7D 00            [12] 2950 	mov	r5,#0x00
      000CDB 7E 00            [12] 2951 	mov	r6,#0x00
                                   2952 ;	ecen4330_lcd_v3.c:588: while (d >= 1) {
      000CDD                       2953 00101$:
      000CDD BF 01 00         [24] 2954 	cjne	r7,#0x01,00114$
      000CE0                       2955 00114$:
      000CE0 40 5F            [24] 2956 	jc	00103$
                                   2957 ;	ecen4330_lcd_v3.c:590: val = d%10;
      000CE2 8F 03            [24] 2958 	mov	ar3,r7
      000CE4 7C 00            [12] 2959 	mov	r4,#0x00
      000CE6 75*00 0A         [24] 2960 	mov	__modsint_PARM_2,#0x0a
                                   2961 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000CE9 8C*01            [24] 2962 	mov	(__modsint_PARM_2 + 1),r4
      000CEB 8B 82            [24] 2963 	mov	dpl,r3
      000CED 8C 83            [24] 2964 	mov	dph,r4
      000CEF C0 06            [24] 2965 	push	ar6
      000CF1 C0 05            [24] 2966 	push	ar5
      000CF3 C0 04            [24] 2967 	push	ar4
      000CF5 C0 03            [24] 2968 	push	ar3
      000CF7 12r00r00         [24] 2969 	lcall	__modsint
      000CFA A9 82            [24] 2970 	mov	r1,dpl
      000CFC AA 83            [24] 2971 	mov	r2,dph
      000CFE D0 03            [24] 2972 	pop	ar3
      000D00 D0 04            [24] 2973 	pop	ar4
                                   2974 ;	ecen4330_lcd_v3.c:591: d = d/10;
      000D02 75*00 0A         [24] 2975 	mov	__divsint_PARM_2,#0x0a
      000D05 75*01 00         [24] 2976 	mov	(__divsint_PARM_2 + 1),#0x00
      000D08 8B 82            [24] 2977 	mov	dpl,r3
      000D0A 8C 83            [24] 2978 	mov	dph,r4
      000D0C C0 02            [24] 2979 	push	ar2
      000D0E C0 01            [24] 2980 	push	ar1
      000D10 12r00r00         [24] 2981 	lcall	__divsint
      000D13 AB 82            [24] 2982 	mov	r3,dpl
      000D15 D0 01            [24] 2983 	pop	ar1
      000D17 D0 02            [24] 2984 	pop	ar2
      000D19 D0 05            [24] 2985 	pop	ar5
      000D1B D0 06            [24] 2986 	pop	ar6
      000D1D 8B 07            [24] 2987 	mov	ar7,r3
                                   2988 ;	ecen4330_lcd_v3.c:592: rev = rev * 10 + val;
      000D1F 8D*00            [24] 2989 	mov	__mulint_PARM_2,r5
      000D21 8E*01            [24] 2990 	mov	(__mulint_PARM_2 + 1),r6
      000D23 90 00 0A         [24] 2991 	mov	dptr,#0x000a
      000D26 C0 07            [24] 2992 	push	ar7
      000D28 C0 02            [24] 2993 	push	ar2
      000D2A C0 01            [24] 2994 	push	ar1
      000D2C 12r00r00         [24] 2995 	lcall	__mulint
      000D2F AB 82            [24] 2996 	mov	r3,dpl
      000D31 AC 83            [24] 2997 	mov	r4,dph
      000D33 D0 01            [24] 2998 	pop	ar1
      000D35 D0 02            [24] 2999 	pop	ar2
      000D37 D0 07            [24] 3000 	pop	ar7
      000D39 E9               [12] 3001 	mov	a,r1
      000D3A 2B               [12] 3002 	add	a,r3
      000D3B FD               [12] 3003 	mov	r5,a
      000D3C EA               [12] 3004 	mov	a,r2
      000D3D 3C               [12] 3005 	addc	a,r4
      000D3E FE               [12] 3006 	mov	r6,a
      000D3F 80 9C            [24] 3007 	sjmp	00101$
      000D41                       3008 00103$:
                                   3009 ;	ecen4330_lcd_v3.c:594: return rev;
      000D41 8D 82            [24] 3010 	mov	dpl,r5
      000D43 8E 83            [24] 3011 	mov	dph,r6
                                   3012 ;	ecen4330_lcd_v3.c:595: }
      000D45 22               [24] 3013 	ret
                                   3014 ;------------------------------------------------------------
                                   3015 ;Allocation info for local variables in function 'asciiToDec'
                                   3016 ;------------------------------------------------------------
                                   3017 ;d                         Allocated to registers 
                                   3018 ;val                       Allocated to registers r2 
                                   3019 ;id                        Allocated to registers r6 r7 
                                   3020 ;------------------------------------------------------------
                                   3021 ;	ecen4330_lcd_v3.c:602: void asciiToDec (uint8_t d) {
                                   3022 ;	-----------------------------------------
                                   3023 ;	 function asciiToDec
                                   3024 ;	-----------------------------------------
      000D46                       3025 _asciiToDec:
                                   3026 ;	ecen4330_lcd_v3.c:605: id = reverse(d);
      000D46 12r0CrD7         [24] 3027 	lcall	_reverse
      000D49 AE 82            [24] 3028 	mov	r6,dpl
      000D4B AF 83            [24] 3029 	mov	r7,dph
                                   3030 ;	ecen4330_lcd_v3.c:606: while (id >= 1){
      000D4D                       3031 00101$:
      000D4D 8E 04            [24] 3032 	mov	ar4,r6
      000D4F 8F 05            [24] 3033 	mov	ar5,r7
      000D51 C3               [12] 3034 	clr	c
      000D52 EC               [12] 3035 	mov	a,r4
      000D53 94 01            [12] 3036 	subb	a,#0x01
      000D55 ED               [12] 3037 	mov	a,r5
      000D56 94 00            [12] 3038 	subb	a,#0x00
      000D58 40 42            [24] 3039 	jc	00103$
                                   3040 ;	ecen4330_lcd_v3.c:608: val = id % 10;
      000D5A 75*00 0A         [24] 3041 	mov	__moduint_PARM_2,#0x0a
      000D5D 75*01 00         [24] 3042 	mov	(__moduint_PARM_2 + 1),#0x00
      000D60 8C 82            [24] 3043 	mov	dpl,r4
      000D62 8D 83            [24] 3044 	mov	dph,r5
      000D64 C0 05            [24] 3045 	push	ar5
      000D66 C0 04            [24] 3046 	push	ar4
      000D68 12r00r00         [24] 3047 	lcall	__moduint
      000D6B AA 82            [24] 3048 	mov	r2,dpl
      000D6D D0 04            [24] 3049 	pop	ar4
      000D6F D0 05            [24] 3050 	pop	ar5
                                   3051 ;	ecen4330_lcd_v3.c:609: id = id/10;
      000D71 75*00 0A         [24] 3052 	mov	__divuint_PARM_2,#0x0a
      000D74 75*01 00         [24] 3053 	mov	(__divuint_PARM_2 + 1),#0x00
      000D77 8C 82            [24] 3054 	mov	dpl,r4
      000D79 8D 83            [24] 3055 	mov	dph,r5
      000D7B C0 02            [24] 3056 	push	ar2
      000D7D 12r00r00         [24] 3057 	lcall	__divuint
      000D80 AC 82            [24] 3058 	mov	r4,dpl
      000D82 AD 83            [24] 3059 	mov	r5,dph
      000D84 D0 02            [24] 3060 	pop	ar2
      000D86 8C 06            [24] 3061 	mov	ar6,r4
      000D88 8D 07            [24] 3062 	mov	ar7,r5
                                   3063 ;	ecen4330_lcd_v3.c:610: write(val + '0');
      000D8A 74 30            [12] 3064 	mov	a,#0x30
      000D8C 2A               [12] 3065 	add	a,r2
      000D8D F5 82            [12] 3066 	mov	dpl,a
      000D8F C0 07            [24] 3067 	push	ar7
      000D91 C0 06            [24] 3068 	push	ar6
      000D93 12r0Br0C         [24] 3069 	lcall	_write
      000D96 D0 06            [24] 3070 	pop	ar6
      000D98 D0 07            [24] 3071 	pop	ar7
      000D9A 80 B1            [24] 3072 	sjmp	00101$
      000D9C                       3073 00103$:
                                   3074 ;	ecen4330_lcd_v3.c:612: write('\n');
      000D9C 75 82 0A         [24] 3075 	mov	dpl,#0x0a
                                   3076 ;	ecen4330_lcd_v3.c:613: }
      000D9F 02r0Br0C         [24] 3077 	ljmp	_write
                                   3078 ;------------------------------------------------------------
                                   3079 ;Allocation info for local variables in function 'asciiToHex'
                                   3080 ;------------------------------------------------------------
                                   3081 ;d                         Allocated to registers r7 
                                   3082 ;val                       Allocated to registers r2 
                                   3083 ;store                     Allocated with name '_asciiToHex_store_65536_200'
                                   3084 ;i                         Allocated to registers r6 
                                   3085 ;------------------------------------------------------------
                                   3086 ;	ecen4330_lcd_v3.c:620: void asciiToHex (uint8_t d) {
                                   3087 ;	-----------------------------------------
                                   3088 ;	 function asciiToHex
                                   3089 ;	-----------------------------------------
      000DA2                       3090 _asciiToHex:
      000DA2 AF 82            [24] 3091 	mov	r7,dpl
                                   3092 ;	ecen4330_lcd_v3.c:624: store[0] = 0;
      000DA4 75*5B 00         [24] 3093 	mov	_asciiToHex_store_65536_200,#0x00
                                   3094 ;	ecen4330_lcd_v3.c:625: store[1] = 0;
      000DA7 75*5C 00         [24] 3095 	mov	(_asciiToHex_store_65536_200 + 0x0001),#0x00
                                   3096 ;	ecen4330_lcd_v3.c:626: while (d >= 1){
      000DAA 7E 00            [12] 3097 	mov	r6,#0x00
      000DAC                       3098 00104$:
      000DAC BF 01 00         [24] 3099 	cjne	r7,#0x01,00122$
      000DAF                       3100 00122$:
      000DAF 40 5A            [24] 3101 	jc	00106$
                                   3102 ;	ecen4330_lcd_v3.c:628: val = d % 16;
      000DB1 8F 04            [24] 3103 	mov	ar4,r7
      000DB3 7D 00            [12] 3104 	mov	r5,#0x00
      000DB5 74 0F            [12] 3105 	mov	a,#0x0f
      000DB7 5C               [12] 3106 	anl	a,r4
      000DB8 FA               [12] 3107 	mov	r2,a
                                   3108 ;	ecen4330_lcd_v3.c:629: d = d/16;
      000DB9 75*00 10         [24] 3109 	mov	__divsint_PARM_2,#0x10
                                   3110 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000DBC 8D*01            [24] 3111 	mov	(__divsint_PARM_2 + 1),r5
      000DBE 8C 82            [24] 3112 	mov	dpl,r4
      000DC0 8D 83            [24] 3113 	mov	dph,r5
      000DC2 C0 06            [24] 3114 	push	ar6
      000DC4 C0 02            [24] 3115 	push	ar2
      000DC6 12r00r00         [24] 3116 	lcall	__divsint
      000DC9 AC 82            [24] 3117 	mov	r4,dpl
      000DCB D0 02            [24] 3118 	pop	ar2
      000DCD D0 06            [24] 3119 	pop	ar6
      000DCF 8C 07            [24] 3120 	mov	ar7,r4
                                   3121 ;	ecen4330_lcd_v3.c:630: if (val <= 9) {
      000DD1 EA               [12] 3122 	mov	a,r2
      000DD2 24 F6            [12] 3123 	add	a,#0xff - 0x09
      000DD4 40 0C            [24] 3124 	jc	00102$
                                   3125 ;	ecen4330_lcd_v3.c:632: store[i] = val + '0';
      000DD6 EE               [12] 3126 	mov	a,r6
      000DD7 24r5B            [12] 3127 	add	a,#_asciiToHex_store_65536_200
      000DD9 F9               [12] 3128 	mov	r1,a
      000DDA 8A 05            [24] 3129 	mov	ar5,r2
      000DDC 74 30            [12] 3130 	mov	a,#0x30
      000DDE 2D               [12] 3131 	add	a,r5
      000DDF F7               [12] 3132 	mov	@r1,a
      000DE0 80 26            [24] 3133 	sjmp	00103$
      000DE2                       3134 00102$:
                                   3135 ;	ecen4330_lcd_v3.c:635: store[i] = (val%10) + 'A';
      000DE2 EE               [12] 3136 	mov	a,r6
      000DE3 24r5B            [12] 3137 	add	a,#_asciiToHex_store_65536_200
      000DE5 F9               [12] 3138 	mov	r1,a
      000DE6 7D 00            [12] 3139 	mov	r5,#0x00
      000DE8 75*00 0A         [24] 3140 	mov	__modsint_PARM_2,#0x0a
                                   3141 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000DEB 8D*01            [24] 3142 	mov	(__modsint_PARM_2 + 1),r5
      000DED 8A 82            [24] 3143 	mov	dpl,r2
      000DEF 8D 83            [24] 3144 	mov	dph,r5
      000DF1 C0 07            [24] 3145 	push	ar7
      000DF3 C0 06            [24] 3146 	push	ar6
      000DF5 C0 01            [24] 3147 	push	ar1
      000DF7 12r00r00         [24] 3148 	lcall	__modsint
      000DFA AC 82            [24] 3149 	mov	r4,dpl
      000DFC AD 83            [24] 3150 	mov	r5,dph
      000DFE D0 01            [24] 3151 	pop	ar1
      000E00 D0 06            [24] 3152 	pop	ar6
      000E02 D0 07            [24] 3153 	pop	ar7
      000E04 74 41            [12] 3154 	mov	a,#0x41
      000E06 2C               [12] 3155 	add	a,r4
      000E07 F7               [12] 3156 	mov	@r1,a
      000E08                       3157 00103$:
                                   3158 ;	ecen4330_lcd_v3.c:637: i++;
      000E08 0E               [12] 3159 	inc	r6
      000E09 80 A1            [24] 3160 	sjmp	00104$
      000E0B                       3161 00106$:
                                   3162 ;	ecen4330_lcd_v3.c:639: write(store[1]);
      000E0B 85*5C 82         [24] 3163 	mov	dpl,(_asciiToHex_store_65536_200 + 0x0001)
      000E0E 12r0Br0C         [24] 3164 	lcall	_write
                                   3165 ;	ecen4330_lcd_v3.c:640: write(store[0]);
      000E11 85*5B 82         [24] 3166 	mov	dpl,_asciiToHex_store_65536_200
                                   3167 ;	ecen4330_lcd_v3.c:641: }
      000E14 02r0Br0C         [24] 3168 	ljmp	_write
                                   3169 ;------------------------------------------------------------
                                   3170 ;Allocation info for local variables in function 'convertAsciiHex'
                                   3171 ;------------------------------------------------------------
                                   3172 ;d                         Allocated to registers r7 
                                   3173 ;------------------------------------------------------------
                                   3174 ;	ecen4330_lcd_v3.c:649: uint8_t convertAsciiHex(uint8_t d) {
                                   3175 ;	-----------------------------------------
                                   3176 ;	 function convertAsciiHex
                                   3177 ;	-----------------------------------------
      000E17                       3178 _convertAsciiHex:
                                   3179 ;	ecen4330_lcd_v3.c:650: return (d <= '9') ? (d - '0') : (d - 'A' + 10);
      000E17 E5 82            [12] 3180 	mov	a,dpl
      000E19 FF               [12] 3181 	mov	r7,a
      000E1A 24 C6            [12] 3182 	add	a,#0xff - 0x39
      000E1C 92*01            [24] 3183 	mov	_convertAsciiHex_sloc0_1_0,c
      000E1E 40 08            [24] 3184 	jc	00103$
      000E20 8F 06            [24] 3185 	mov	ar6,r7
      000E22 EE               [12] 3186 	mov	a,r6
      000E23 24 D0            [12] 3187 	add	a,#0xd0
      000E25 FE               [12] 3188 	mov	r6,a
      000E26 80 04            [24] 3189 	sjmp	00104$
      000E28                       3190 00103$:
      000E28 74 C9            [12] 3191 	mov	a,#0xc9
      000E2A 2F               [12] 3192 	add	a,r7
      000E2B FE               [12] 3193 	mov	r6,a
      000E2C                       3194 00104$:
      000E2C 8E 82            [24] 3195 	mov	dpl,r6
                                   3196 ;	ecen4330_lcd_v3.c:651: }
      000E2E 22               [24] 3197 	ret
                                   3198 ;------------------------------------------------------------
                                   3199 ;Allocation info for local variables in function 'writeSomeLines'
                                   3200 ;------------------------------------------------------------
                                   3201 ;	ecen4330_lcd_v3.c:657: void writeSomeLines () {
                                   3202 ;	-----------------------------------------
                                   3203 ;	 function writeSomeLines
                                   3204 ;	-----------------------------------------
      000E2F                       3205 _writeSomeLines:
                                   3206 ;	ecen4330_lcd_v3.c:658: fillScreen(RED);
      000E2F 90 F8 00         [24] 3207 	mov	dptr,#0xf800
      000E32 12r07r9A         [24] 3208 	lcall	_fillScreen
                                   3209 ;	ecen4330_lcd_v3.c:660: delay(20);
      000E35 90 00 14         [24] 3210 	mov	dptr,#0x0014
      000E38 12r00r10         [24] 3211 	lcall	_delay
                                   3212 ;	ecen4330_lcd_v3.c:661: fillScreen(GREEN);
      000E3B 90 07 E0         [24] 3213 	mov	dptr,#0x07e0
      000E3E 12r07r9A         [24] 3214 	lcall	_fillScreen
                                   3215 ;	ecen4330_lcd_v3.c:663: delay(20);
      000E41 90 00 14         [24] 3216 	mov	dptr,#0x0014
      000E44 12r00r10         [24] 3217 	lcall	_delay
                                   3218 ;	ecen4330_lcd_v3.c:665: setRotation(0);
      000E47 75 82 00         [24] 3219 	mov	dpl,#0x00
      000E4A 12r00rD7         [24] 3220 	lcall	_setRotation
                                   3221 ;	ecen4330_lcd_v3.c:666: fillScreen(BLACK);
      000E4D 90 00 00         [24] 3222 	mov	dptr,#0x0000
      000E50 12r07r9A         [24] 3223 	lcall	_fillScreen
                                   3224 ;	ecen4330_lcd_v3.c:667: testCircles(20, RED);
      000E53 75*3E 00         [24] 3225 	mov	_testCircles_PARM_2,#0x00
      000E56 75*3F F8         [24] 3226 	mov	(_testCircles_PARM_2 + 1),#0xf8
      000E59 75 82 14         [24] 3227 	mov	dpl,#0x14
      000E5C 12r06r28         [24] 3228 	lcall	_testCircles
                                   3229 ;	ecen4330_lcd_v3.c:668: delay(100);
      000E5F 90 00 64         [24] 3230 	mov	dptr,#0x0064
      000E62 12r00r10         [24] 3231 	lcall	_delay
                                   3232 ;	ecen4330_lcd_v3.c:669: fillScreen(BLACK);
      000E65 90 00 00         [24] 3233 	mov	dptr,#0x0000
      000E68 12r07r9A         [24] 3234 	lcall	_fillScreen
                                   3235 ;	ecen4330_lcd_v3.c:670: setTextSize(5);
      000E6B 75 82 05         [24] 3236 	mov	dpl,#0x05
      000E6E 12r00rBF         [24] 3237 	lcall	_setTextSize
                                   3238 ;	ecen4330_lcd_v3.c:671: setTextColor(CYAN, BLACK);
      000E71 E4               [12] 3239 	clr	a
      000E72 F5*00            [12] 3240 	mov	_setTextColor_PARM_2,a
      000E74 F5*01            [12] 3241 	mov	(_setTextColor_PARM_2 + 1),a
      000E76 90 07 FF         [24] 3242 	mov	dptr,#0x07ff
      000E79 12r00rB2         [24] 3243 	lcall	_setTextColor
                                   3244 ;	ecen4330_lcd_v3.c:672: LCD_string_write("Welcome\n");
      000E7C 90r04rFB         [24] 3245 	mov	dptr,#___str_0
      000E7F 75 F0 80         [24] 3246 	mov	b,#0x80
      000E82 12r0Br7A         [24] 3247 	lcall	_LCD_string_write
                                   3248 ;	ecen4330_lcd_v3.c:673: setTextSize(3);
      000E85 75 82 03         [24] 3249 	mov	dpl,#0x03
      000E88 12r00rBF         [24] 3250 	lcall	_setTextSize
                                   3251 ;	ecen4330_lcd_v3.c:674: LCD_string_write("ECEN-4330\n");
      000E8B 90r05r04         [24] 3252 	mov	dptr,#___str_1
      000E8E 75 F0 80         [24] 3253 	mov	b,#0x80
      000E91 12r0Br7A         [24] 3254 	lcall	_LCD_string_write
                                   3255 ;	ecen4330_lcd_v3.c:675: LCD_string_write("Rotation 0");
      000E94 90r05r0F         [24] 3256 	mov	dptr,#___str_2
      000E97 75 F0 80         [24] 3257 	mov	b,#0x80
      000E9A 12r0Br7A         [24] 3258 	lcall	_LCD_string_write
                                   3259 ;	ecen4330_lcd_v3.c:676: delay(200);
      000E9D 90 00 C8         [24] 3260 	mov	dptr,#0x00c8
      000EA0 12r00r10         [24] 3261 	lcall	_delay
                                   3262 ;	ecen4330_lcd_v3.c:677: fillScreen(BLACK);
      000EA3 90 00 00         [24] 3263 	mov	dptr,#0x0000
      000EA6 12r07r9A         [24] 3264 	lcall	_fillScreen
                                   3265 ;	ecen4330_lcd_v3.c:678: setRotation(1);
      000EA9 75 82 01         [24] 3266 	mov	dpl,#0x01
      000EAC 12r00rD7         [24] 3267 	lcall	_setRotation
                                   3268 ;	ecen4330_lcd_v3.c:679: setCursor(0,0);
      000EAF E4               [12] 3269 	clr	a
      000EB0 F5*00            [12] 3270 	mov	_setCursor_PARM_2,a
      000EB2 F5*01            [12] 3271 	mov	(_setCursor_PARM_2 + 1),a
      000EB4 90 00 00         [24] 3272 	mov	dptr,#0x0000
      000EB7 12r00rA5         [24] 3273 	lcall	_setCursor
                                   3274 ;	ecen4330_lcd_v3.c:680: LCD_string_write("Rotation 1");
      000EBA 90r05r1A         [24] 3275 	mov	dptr,#___str_3
      000EBD 75 F0 80         [24] 3276 	mov	b,#0x80
      000EC0 12r0Br7A         [24] 3277 	lcall	_LCD_string_write
                                   3278 ;	ecen4330_lcd_v3.c:681: delay(500);
      000EC3 90 01 F4         [24] 3279 	mov	dptr,#0x01f4
      000EC6 12r00r10         [24] 3280 	lcall	_delay
                                   3281 ;	ecen4330_lcd_v3.c:682: fillScreen(BLACK);
      000EC9 90 00 00         [24] 3282 	mov	dptr,#0x0000
      000ECC 12r07r9A         [24] 3283 	lcall	_fillScreen
                                   3284 ;	ecen4330_lcd_v3.c:683: setRotation(2);
      000ECF 75 82 02         [24] 3285 	mov	dpl,#0x02
      000ED2 12r00rD7         [24] 3286 	lcall	_setRotation
                                   3287 ;	ecen4330_lcd_v3.c:684: setCursor(0,0);
      000ED5 E4               [12] 3288 	clr	a
      000ED6 F5*00            [12] 3289 	mov	_setCursor_PARM_2,a
      000ED8 F5*01            [12] 3290 	mov	(_setCursor_PARM_2 + 1),a
      000EDA 90 00 00         [24] 3291 	mov	dptr,#0x0000
      000EDD 12r00rA5         [24] 3292 	lcall	_setCursor
                                   3293 ;	ecen4330_lcd_v3.c:685: LCD_string_write("Rotation 2");
      000EE0 90r05r25         [24] 3294 	mov	dptr,#___str_4
      000EE3 75 F0 80         [24] 3295 	mov	b,#0x80
      000EE6 12r0Br7A         [24] 3296 	lcall	_LCD_string_write
                                   3297 ;	ecen4330_lcd_v3.c:686: delay(500);
      000EE9 90 01 F4         [24] 3298 	mov	dptr,#0x01f4
      000EEC 12r00r10         [24] 3299 	lcall	_delay
                                   3300 ;	ecen4330_lcd_v3.c:687: fillScreen(BLACK);
      000EEF 90 00 00         [24] 3301 	mov	dptr,#0x0000
      000EF2 12r07r9A         [24] 3302 	lcall	_fillScreen
                                   3303 ;	ecen4330_lcd_v3.c:688: setRotation(3);
      000EF5 75 82 03         [24] 3304 	mov	dpl,#0x03
      000EF8 12r00rD7         [24] 3305 	lcall	_setRotation
                                   3306 ;	ecen4330_lcd_v3.c:689: setCursor(0,0);
      000EFB E4               [12] 3307 	clr	a
      000EFC F5*00            [12] 3308 	mov	_setCursor_PARM_2,a
      000EFE F5*01            [12] 3309 	mov	(_setCursor_PARM_2 + 1),a
      000F00 90 00 00         [24] 3310 	mov	dptr,#0x0000
      000F03 12r00rA5         [24] 3311 	lcall	_setCursor
                                   3312 ;	ecen4330_lcd_v3.c:690: delay(200);
      000F06 90 00 C8         [24] 3313 	mov	dptr,#0x00c8
      000F09 12r00r10         [24] 3314 	lcall	_delay
                                   3315 ;	ecen4330_lcd_v3.c:691: LCD_string_write("Rotation 3");
      000F0C 90r05r30         [24] 3316 	mov	dptr,#___str_5
      000F0F 75 F0 80         [24] 3317 	mov	b,#0x80
      000F12 12r0Br7A         [24] 3318 	lcall	_LCD_string_write
                                   3319 ;	ecen4330_lcd_v3.c:692: delay(200);
      000F15 90 00 C8         [24] 3320 	mov	dptr,#0x00c8
                                   3321 ;	ecen4330_lcd_v3.c:693: }
      000F18 02r00r10         [24] 3322 	ljmp	_delay
                                   3323 ;------------------------------------------------------------
                                   3324 ;Allocation info for local variables in function 'main'
                                   3325 ;------------------------------------------------------------
                                   3326 ;	ecen4330_lcd_v3.c:699: void main (void) {
                                   3327 ;	-----------------------------------------
                                   3328 ;	 function main
                                   3329 ;	-----------------------------------------
      000F1B                       3330 _main:
                                   3331 ;	ecen4330_lcd_v3.c:700: CD = 0;
                                   3332 ;	assignBit
      000F1B C2 B5            [12] 3333 	clr	_P3_5
                                   3334 ;	ecen4330_lcd_v3.c:701: IOM = 0;
                                   3335 ;	assignBit
      000F1D C2 B4            [12] 3336 	clr	_P3_4
                                   3337 ;	ecen4330_lcd_v3.c:703: iowrite8(seg7_address, ~0xC0);
      000F1F 75*00 3F         [24] 3338 	mov	_iowrite8_PARM_2,#0x3f
      000F22 85*14 82         [24] 3339 	mov	dpl,_seg7_address
      000F25 85*15 83         [24] 3340 	mov	dph,(_seg7_address + 1)
      000F28 12r00r00         [24] 3341 	lcall	_iowrite8
                                   3342 ;	ecen4330_lcd_v3.c:704: IOM = 0;
                                   3343 ;	assignBit
      000F2B C2 B4            [12] 3344 	clr	_P3_4
                                   3345 ;	ecen4330_lcd_v3.c:705: CD = 1;
                                   3346 ;	assignBit
      000F2D D2 B5            [12] 3347 	setb	_P3_5
                                   3348 ;	ecen4330_lcd_v3.c:707: TFT_LCD_INIT();
      000F2F 12r01rDD         [24] 3349 	lcall	_TFT_LCD_INIT
                                   3350 ;	ecen4330_lcd_v3.c:708: iowrite8(seg7_address, ~0xF9);
      000F32 75*00 06         [24] 3351 	mov	_iowrite8_PARM_2,#0x06
      000F35 85*14 82         [24] 3352 	mov	dpl,_seg7_address
      000F38 85*15 83         [24] 3353 	mov	dph,(_seg7_address + 1)
      000F3B 12r00r00         [24] 3354 	lcall	_iowrite8
                                   3355 ;	ecen4330_lcd_v3.c:709: writeSomeLines();
      000F3E 12r0Er2F         [24] 3356 	lcall	_writeSomeLines
                                   3357 ;	ecen4330_lcd_v3.c:710: setRotation(2);
      000F41 75 82 02         [24] 3358 	mov	dpl,#0x02
      000F44 12r00rD7         [24] 3359 	lcall	_setRotation
                                   3360 ;	ecen4330_lcd_v3.c:711: fillScreen(GRAY);
      000F47 90 D6 BA         [24] 3361 	mov	dptr,#0xd6ba
      000F4A 12r07r9A         [24] 3362 	lcall	_fillScreen
                                   3363 ;	ecen4330_lcd_v3.c:712: setTextColor(BLACK, GRAY);
      000F4D 75*00 BA         [24] 3364 	mov	_setTextColor_PARM_2,#0xba
      000F50 75*01 D6         [24] 3365 	mov	(_setTextColor_PARM_2 + 1),#0xd6
      000F53 90 00 00         [24] 3366 	mov	dptr,#0x0000
      000F56 12r00rB2         [24] 3367 	lcall	_setTextColor
                                   3368 ;	ecen4330_lcd_v3.c:713: setCursor(0,0);
      000F59 E4               [12] 3369 	clr	a
      000F5A F5*00            [12] 3370 	mov	_setCursor_PARM_2,a
      000F5C F5*01            [12] 3371 	mov	(_setCursor_PARM_2 + 1),a
      000F5E 90 00 00         [24] 3372 	mov	dptr,#0x0000
      000F61 12r00rA5         [24] 3373 	lcall	_setCursor
                                   3374 ;	ecen4330_lcd_v3.c:714: LCD_string_write("Free Type: \n");
      000F64 90r05r3B         [24] 3375 	mov	dptr,#___str_6
      000F67 75 F0 80         [24] 3376 	mov	b,#0x80
      000F6A 12r0Br7A         [24] 3377 	lcall	_LCD_string_write
                                   3378 ;	ecen4330_lcd_v3.c:716: while(1) {
      000F6D                       3379 00102$:
                                   3380 ;	ecen4330_lcd_v3.c:717: freeType();
      000F6D 12r0BrEA         [24] 3381 	lcall	_freeType
                                   3382 ;	ecen4330_lcd_v3.c:719: }
      000F70 80 FB            [24] 3383 	sjmp	00102$
                                   3384 	.area CSEG    (CODE)
                                   3385 	.area CONST   (CODE)
      000000                       3386 _font:
      000000 00                    3387 	.db #0x00	; 0
      000001 00                    3388 	.db #0x00	; 0
      000002 00                    3389 	.db #0x00	; 0
      000003 00                    3390 	.db #0x00	; 0
      000004 00                    3391 	.db #0x00	; 0
      000005 3E                    3392 	.db #0x3e	; 62
      000006 5B                    3393 	.db #0x5b	; 91
      000007 4F                    3394 	.db #0x4f	; 79	'O'
      000008 5B                    3395 	.db #0x5b	; 91
      000009 3E                    3396 	.db #0x3e	; 62
      00000A 3E                    3397 	.db #0x3e	; 62
      00000B 6B                    3398 	.db #0x6b	; 107	'k'
      00000C 4F                    3399 	.db #0x4f	; 79	'O'
      00000D 6B                    3400 	.db #0x6b	; 107	'k'
      00000E 3E                    3401 	.db #0x3e	; 62
      00000F 1C                    3402 	.db #0x1c	; 28
      000010 3E                    3403 	.db #0x3e	; 62
      000011 7C                    3404 	.db #0x7c	; 124
      000012 3E                    3405 	.db #0x3e	; 62
      000013 1C                    3406 	.db #0x1c	; 28
      000014 18                    3407 	.db #0x18	; 24
      000015 3C                    3408 	.db #0x3c	; 60
      000016 7E                    3409 	.db #0x7e	; 126
      000017 3C                    3410 	.db #0x3c	; 60
      000018 18                    3411 	.db #0x18	; 24
      000019 1C                    3412 	.db #0x1c	; 28
      00001A 57                    3413 	.db #0x57	; 87	'W'
      00001B 7D                    3414 	.db #0x7d	; 125
      00001C 57                    3415 	.db #0x57	; 87	'W'
      00001D 1C                    3416 	.db #0x1c	; 28
      00001E 1C                    3417 	.db #0x1c	; 28
      00001F 5E                    3418 	.db #0x5e	; 94
      000020 7F                    3419 	.db #0x7f	; 127
      000021 5E                    3420 	.db #0x5e	; 94
      000022 1C                    3421 	.db #0x1c	; 28
      000023 00                    3422 	.db #0x00	; 0
      000024 18                    3423 	.db #0x18	; 24
      000025 3C                    3424 	.db #0x3c	; 60
      000026 18                    3425 	.db #0x18	; 24
      000027 00                    3426 	.db #0x00	; 0
      000028 FF                    3427 	.db #0xff	; 255
      000029 E7                    3428 	.db #0xe7	; 231
      00002A C3                    3429 	.db #0xc3	; 195
      00002B E7                    3430 	.db #0xe7	; 231
      00002C FF                    3431 	.db #0xff	; 255
      00002D 00                    3432 	.db #0x00	; 0
      00002E 18                    3433 	.db #0x18	; 24
      00002F 24                    3434 	.db #0x24	; 36
      000030 18                    3435 	.db #0x18	; 24
      000031 00                    3436 	.db #0x00	; 0
      000032 FF                    3437 	.db #0xff	; 255
      000033 E7                    3438 	.db #0xe7	; 231
      000034 DB                    3439 	.db #0xdb	; 219
      000035 E7                    3440 	.db #0xe7	; 231
      000036 FF                    3441 	.db #0xff	; 255
      000037 30                    3442 	.db #0x30	; 48	'0'
      000038 48                    3443 	.db #0x48	; 72	'H'
      000039 3A                    3444 	.db #0x3a	; 58
      00003A 06                    3445 	.db #0x06	; 6
      00003B 0E                    3446 	.db #0x0e	; 14
      00003C 26                    3447 	.db #0x26	; 38
      00003D 29                    3448 	.db #0x29	; 41
      00003E 79                    3449 	.db #0x79	; 121	'y'
      00003F 29                    3450 	.db #0x29	; 41
      000040 26                    3451 	.db #0x26	; 38
      000041 40                    3452 	.db #0x40	; 64
      000042 7F                    3453 	.db #0x7f	; 127
      000043 05                    3454 	.db #0x05	; 5
      000044 05                    3455 	.db #0x05	; 5
      000045 07                    3456 	.db #0x07	; 7
      000046 40                    3457 	.db #0x40	; 64
      000047 7F                    3458 	.db #0x7f	; 127
      000048 05                    3459 	.db #0x05	; 5
      000049 25                    3460 	.db #0x25	; 37
      00004A 3F                    3461 	.db #0x3f	; 63
      00004B 5A                    3462 	.db #0x5a	; 90	'Z'
      00004C 3C                    3463 	.db #0x3c	; 60
      00004D E7                    3464 	.db #0xe7	; 231
      00004E 3C                    3465 	.db #0x3c	; 60
      00004F 5A                    3466 	.db #0x5a	; 90	'Z'
      000050 7F                    3467 	.db #0x7f	; 127
      000051 3E                    3468 	.db #0x3e	; 62
      000052 1C                    3469 	.db #0x1c	; 28
      000053 1C                    3470 	.db #0x1c	; 28
      000054 08                    3471 	.db #0x08	; 8
      000055 08                    3472 	.db #0x08	; 8
      000056 1C                    3473 	.db #0x1c	; 28
      000057 1C                    3474 	.db #0x1c	; 28
      000058 3E                    3475 	.db #0x3e	; 62
      000059 7F                    3476 	.db #0x7f	; 127
      00005A 14                    3477 	.db #0x14	; 20
      00005B 22                    3478 	.db #0x22	; 34
      00005C 7F                    3479 	.db #0x7f	; 127
      00005D 22                    3480 	.db #0x22	; 34
      00005E 14                    3481 	.db #0x14	; 20
      00005F 5F                    3482 	.db #0x5f	; 95
      000060 5F                    3483 	.db #0x5f	; 95
      000061 00                    3484 	.db #0x00	; 0
      000062 5F                    3485 	.db #0x5f	; 95
      000063 5F                    3486 	.db #0x5f	; 95
      000064 06                    3487 	.db #0x06	; 6
      000065 09                    3488 	.db #0x09	; 9
      000066 7F                    3489 	.db #0x7f	; 127
      000067 01                    3490 	.db #0x01	; 1
      000068 7F                    3491 	.db #0x7f	; 127
      000069 00                    3492 	.db #0x00	; 0
      00006A 66                    3493 	.db #0x66	; 102	'f'
      00006B 89                    3494 	.db #0x89	; 137
      00006C 95                    3495 	.db #0x95	; 149
      00006D 6A                    3496 	.db #0x6a	; 106	'j'
      00006E 60                    3497 	.db #0x60	; 96
      00006F 60                    3498 	.db #0x60	; 96
      000070 60                    3499 	.db #0x60	; 96
      000071 60                    3500 	.db #0x60	; 96
      000072 60                    3501 	.db #0x60	; 96
      000073 94                    3502 	.db #0x94	; 148
      000074 A2                    3503 	.db #0xa2	; 162
      000075 FF                    3504 	.db #0xff	; 255
      000076 A2                    3505 	.db #0xa2	; 162
      000077 94                    3506 	.db #0x94	; 148
      000078 08                    3507 	.db #0x08	; 8
      000079 04                    3508 	.db #0x04	; 4
      00007A 7E                    3509 	.db #0x7e	; 126
      00007B 04                    3510 	.db #0x04	; 4
      00007C 08                    3511 	.db #0x08	; 8
      00007D 10                    3512 	.db #0x10	; 16
      00007E 20                    3513 	.db #0x20	; 32
      00007F 7E                    3514 	.db #0x7e	; 126
      000080 20                    3515 	.db #0x20	; 32
      000081 10                    3516 	.db #0x10	; 16
      000082 08                    3517 	.db #0x08	; 8
      000083 08                    3518 	.db #0x08	; 8
      000084 2A                    3519 	.db #0x2a	; 42
      000085 1C                    3520 	.db #0x1c	; 28
      000086 08                    3521 	.db #0x08	; 8
      000087 08                    3522 	.db #0x08	; 8
      000088 1C                    3523 	.db #0x1c	; 28
      000089 2A                    3524 	.db #0x2a	; 42
      00008A 08                    3525 	.db #0x08	; 8
      00008B 08                    3526 	.db #0x08	; 8
      00008C 1E                    3527 	.db #0x1e	; 30
      00008D 10                    3528 	.db #0x10	; 16
      00008E 10                    3529 	.db #0x10	; 16
      00008F 10                    3530 	.db #0x10	; 16
      000090 10                    3531 	.db #0x10	; 16
      000091 0C                    3532 	.db #0x0c	; 12
      000092 1E                    3533 	.db #0x1e	; 30
      000093 0C                    3534 	.db #0x0c	; 12
      000094 1E                    3535 	.db #0x1e	; 30
      000095 0C                    3536 	.db #0x0c	; 12
      000096 30                    3537 	.db #0x30	; 48	'0'
      000097 38                    3538 	.db #0x38	; 56	'8'
      000098 3E                    3539 	.db #0x3e	; 62
      000099 38                    3540 	.db #0x38	; 56	'8'
      00009A 30                    3541 	.db #0x30	; 48	'0'
      00009B 06                    3542 	.db #0x06	; 6
      00009C 0E                    3543 	.db #0x0e	; 14
      00009D 3E                    3544 	.db #0x3e	; 62
      00009E 0E                    3545 	.db #0x0e	; 14
      00009F 06                    3546 	.db #0x06	; 6
      0000A0 00                    3547 	.db #0x00	; 0
      0000A1 00                    3548 	.db #0x00	; 0
      0000A2 00                    3549 	.db #0x00	; 0
      0000A3 00                    3550 	.db #0x00	; 0
      0000A4 00                    3551 	.db #0x00	; 0
      0000A5 00                    3552 	.db #0x00	; 0
      0000A6 00                    3553 	.db #0x00	; 0
      0000A7 5F                    3554 	.db #0x5f	; 95
      0000A8 00                    3555 	.db #0x00	; 0
      0000A9 00                    3556 	.db #0x00	; 0
      0000AA 00                    3557 	.db #0x00	; 0
      0000AB 07                    3558 	.db #0x07	; 7
      0000AC 00                    3559 	.db #0x00	; 0
      0000AD 07                    3560 	.db #0x07	; 7
      0000AE 00                    3561 	.db #0x00	; 0
      0000AF 14                    3562 	.db #0x14	; 20
      0000B0 7F                    3563 	.db #0x7f	; 127
      0000B1 14                    3564 	.db #0x14	; 20
      0000B2 7F                    3565 	.db #0x7f	; 127
      0000B3 14                    3566 	.db #0x14	; 20
      0000B4 24                    3567 	.db #0x24	; 36
      0000B5 2A                    3568 	.db #0x2a	; 42
      0000B6 7F                    3569 	.db #0x7f	; 127
      0000B7 2A                    3570 	.db #0x2a	; 42
      0000B8 12                    3571 	.db #0x12	; 18
      0000B9 23                    3572 	.db #0x23	; 35
      0000BA 13                    3573 	.db #0x13	; 19
      0000BB 08                    3574 	.db #0x08	; 8
      0000BC 64                    3575 	.db #0x64	; 100	'd'
      0000BD 62                    3576 	.db #0x62	; 98	'b'
      0000BE 36                    3577 	.db #0x36	; 54	'6'
      0000BF 49                    3578 	.db #0x49	; 73	'I'
      0000C0 56                    3579 	.db #0x56	; 86	'V'
      0000C1 20                    3580 	.db #0x20	; 32
      0000C2 50                    3581 	.db #0x50	; 80	'P'
      0000C3 00                    3582 	.db #0x00	; 0
      0000C4 08                    3583 	.db #0x08	; 8
      0000C5 07                    3584 	.db #0x07	; 7
      0000C6 03                    3585 	.db #0x03	; 3
      0000C7 00                    3586 	.db #0x00	; 0
      0000C8 00                    3587 	.db #0x00	; 0
      0000C9 1C                    3588 	.db #0x1c	; 28
      0000CA 22                    3589 	.db #0x22	; 34
      0000CB 41                    3590 	.db #0x41	; 65	'A'
      0000CC 00                    3591 	.db #0x00	; 0
      0000CD 00                    3592 	.db #0x00	; 0
      0000CE 41                    3593 	.db #0x41	; 65	'A'
      0000CF 22                    3594 	.db #0x22	; 34
      0000D0 1C                    3595 	.db #0x1c	; 28
      0000D1 00                    3596 	.db #0x00	; 0
      0000D2 2A                    3597 	.db #0x2a	; 42
      0000D3 1C                    3598 	.db #0x1c	; 28
      0000D4 7F                    3599 	.db #0x7f	; 127
      0000D5 1C                    3600 	.db #0x1c	; 28
      0000D6 2A                    3601 	.db #0x2a	; 42
      0000D7 08                    3602 	.db #0x08	; 8
      0000D8 08                    3603 	.db #0x08	; 8
      0000D9 3E                    3604 	.db #0x3e	; 62
      0000DA 08                    3605 	.db #0x08	; 8
      0000DB 08                    3606 	.db #0x08	; 8
      0000DC 00                    3607 	.db #0x00	; 0
      0000DD 80                    3608 	.db #0x80	; 128
      0000DE 70                    3609 	.db #0x70	; 112	'p'
      0000DF 30                    3610 	.db #0x30	; 48	'0'
      0000E0 00                    3611 	.db #0x00	; 0
      0000E1 08                    3612 	.db #0x08	; 8
      0000E2 08                    3613 	.db #0x08	; 8
      0000E3 08                    3614 	.db #0x08	; 8
      0000E4 08                    3615 	.db #0x08	; 8
      0000E5 08                    3616 	.db #0x08	; 8
      0000E6 00                    3617 	.db #0x00	; 0
      0000E7 00                    3618 	.db #0x00	; 0
      0000E8 60                    3619 	.db #0x60	; 96
      0000E9 60                    3620 	.db #0x60	; 96
      0000EA 00                    3621 	.db #0x00	; 0
      0000EB 20                    3622 	.db #0x20	; 32
      0000EC 10                    3623 	.db #0x10	; 16
      0000ED 08                    3624 	.db #0x08	; 8
      0000EE 04                    3625 	.db #0x04	; 4
      0000EF 02                    3626 	.db #0x02	; 2
      0000F0 3E                    3627 	.db #0x3e	; 62
      0000F1 51                    3628 	.db #0x51	; 81	'Q'
      0000F2 49                    3629 	.db #0x49	; 73	'I'
      0000F3 45                    3630 	.db #0x45	; 69	'E'
      0000F4 3E                    3631 	.db #0x3e	; 62
      0000F5 00                    3632 	.db #0x00	; 0
      0000F6 42                    3633 	.db #0x42	; 66	'B'
      0000F7 7F                    3634 	.db #0x7f	; 127
      0000F8 40                    3635 	.db #0x40	; 64
      0000F9 00                    3636 	.db #0x00	; 0
      0000FA 72                    3637 	.db #0x72	; 114	'r'
      0000FB 49                    3638 	.db #0x49	; 73	'I'
      0000FC 49                    3639 	.db #0x49	; 73	'I'
      0000FD 49                    3640 	.db #0x49	; 73	'I'
      0000FE 46                    3641 	.db #0x46	; 70	'F'
      0000FF 21                    3642 	.db #0x21	; 33
      000100 41                    3643 	.db #0x41	; 65	'A'
      000101 49                    3644 	.db #0x49	; 73	'I'
      000102 4D                    3645 	.db #0x4d	; 77	'M'
      000103 33                    3646 	.db #0x33	; 51	'3'
      000104 18                    3647 	.db #0x18	; 24
      000105 14                    3648 	.db #0x14	; 20
      000106 12                    3649 	.db #0x12	; 18
      000107 7F                    3650 	.db #0x7f	; 127
      000108 10                    3651 	.db #0x10	; 16
      000109 27                    3652 	.db #0x27	; 39
      00010A 45                    3653 	.db #0x45	; 69	'E'
      00010B 45                    3654 	.db #0x45	; 69	'E'
      00010C 45                    3655 	.db #0x45	; 69	'E'
      00010D 39                    3656 	.db #0x39	; 57	'9'
      00010E 3C                    3657 	.db #0x3c	; 60
      00010F 4A                    3658 	.db #0x4a	; 74	'J'
      000110 49                    3659 	.db #0x49	; 73	'I'
      000111 49                    3660 	.db #0x49	; 73	'I'
      000112 31                    3661 	.db #0x31	; 49	'1'
      000113 41                    3662 	.db #0x41	; 65	'A'
      000114 21                    3663 	.db #0x21	; 33
      000115 11                    3664 	.db #0x11	; 17
      000116 09                    3665 	.db #0x09	; 9
      000117 07                    3666 	.db #0x07	; 7
      000118 36                    3667 	.db #0x36	; 54	'6'
      000119 49                    3668 	.db #0x49	; 73	'I'
      00011A 49                    3669 	.db #0x49	; 73	'I'
      00011B 49                    3670 	.db #0x49	; 73	'I'
      00011C 36                    3671 	.db #0x36	; 54	'6'
      00011D 46                    3672 	.db #0x46	; 70	'F'
      00011E 49                    3673 	.db #0x49	; 73	'I'
      00011F 49                    3674 	.db #0x49	; 73	'I'
      000120 29                    3675 	.db #0x29	; 41
      000121 1E                    3676 	.db #0x1e	; 30
      000122 00                    3677 	.db #0x00	; 0
      000123 00                    3678 	.db #0x00	; 0
      000124 14                    3679 	.db #0x14	; 20
      000125 00                    3680 	.db #0x00	; 0
      000126 00                    3681 	.db #0x00	; 0
      000127 00                    3682 	.db #0x00	; 0
      000128 40                    3683 	.db #0x40	; 64
      000129 34                    3684 	.db #0x34	; 52	'4'
      00012A 00                    3685 	.db #0x00	; 0
      00012B 00                    3686 	.db #0x00	; 0
      00012C 00                    3687 	.db #0x00	; 0
      00012D 08                    3688 	.db #0x08	; 8
      00012E 14                    3689 	.db #0x14	; 20
      00012F 22                    3690 	.db #0x22	; 34
      000130 41                    3691 	.db #0x41	; 65	'A'
      000131 14                    3692 	.db #0x14	; 20
      000132 14                    3693 	.db #0x14	; 20
      000133 14                    3694 	.db #0x14	; 20
      000134 14                    3695 	.db #0x14	; 20
      000135 14                    3696 	.db #0x14	; 20
      000136 00                    3697 	.db #0x00	; 0
      000137 41                    3698 	.db #0x41	; 65	'A'
      000138 22                    3699 	.db #0x22	; 34
      000139 14                    3700 	.db #0x14	; 20
      00013A 08                    3701 	.db #0x08	; 8
      00013B 02                    3702 	.db #0x02	; 2
      00013C 01                    3703 	.db #0x01	; 1
      00013D 59                    3704 	.db #0x59	; 89	'Y'
      00013E 09                    3705 	.db #0x09	; 9
      00013F 06                    3706 	.db #0x06	; 6
      000140 3E                    3707 	.db #0x3e	; 62
      000141 41                    3708 	.db #0x41	; 65	'A'
      000142 5D                    3709 	.db #0x5d	; 93
      000143 59                    3710 	.db #0x59	; 89	'Y'
      000144 4E                    3711 	.db #0x4e	; 78	'N'
      000145 7C                    3712 	.db #0x7c	; 124
      000146 12                    3713 	.db #0x12	; 18
      000147 11                    3714 	.db #0x11	; 17
      000148 12                    3715 	.db #0x12	; 18
      000149 7C                    3716 	.db #0x7c	; 124
      00014A 7F                    3717 	.db #0x7f	; 127
      00014B 49                    3718 	.db #0x49	; 73	'I'
      00014C 49                    3719 	.db #0x49	; 73	'I'
      00014D 49                    3720 	.db #0x49	; 73	'I'
      00014E 36                    3721 	.db #0x36	; 54	'6'
      00014F 3E                    3722 	.db #0x3e	; 62
      000150 41                    3723 	.db #0x41	; 65	'A'
      000151 41                    3724 	.db #0x41	; 65	'A'
      000152 41                    3725 	.db #0x41	; 65	'A'
      000153 22                    3726 	.db #0x22	; 34
      000154 7F                    3727 	.db #0x7f	; 127
      000155 41                    3728 	.db #0x41	; 65	'A'
      000156 41                    3729 	.db #0x41	; 65	'A'
      000157 41                    3730 	.db #0x41	; 65	'A'
      000158 3E                    3731 	.db #0x3e	; 62
      000159 7F                    3732 	.db #0x7f	; 127
      00015A 49                    3733 	.db #0x49	; 73	'I'
      00015B 49                    3734 	.db #0x49	; 73	'I'
      00015C 49                    3735 	.db #0x49	; 73	'I'
      00015D 41                    3736 	.db #0x41	; 65	'A'
      00015E 7F                    3737 	.db #0x7f	; 127
      00015F 09                    3738 	.db #0x09	; 9
      000160 09                    3739 	.db #0x09	; 9
      000161 09                    3740 	.db #0x09	; 9
      000162 01                    3741 	.db #0x01	; 1
      000163 3E                    3742 	.db #0x3e	; 62
      000164 41                    3743 	.db #0x41	; 65	'A'
      000165 41                    3744 	.db #0x41	; 65	'A'
      000166 51                    3745 	.db #0x51	; 81	'Q'
      000167 73                    3746 	.db #0x73	; 115	's'
      000168 7F                    3747 	.db #0x7f	; 127
      000169 08                    3748 	.db #0x08	; 8
      00016A 08                    3749 	.db #0x08	; 8
      00016B 08                    3750 	.db #0x08	; 8
      00016C 7F                    3751 	.db #0x7f	; 127
      00016D 00                    3752 	.db #0x00	; 0
      00016E 41                    3753 	.db #0x41	; 65	'A'
      00016F 7F                    3754 	.db #0x7f	; 127
      000170 41                    3755 	.db #0x41	; 65	'A'
      000171 00                    3756 	.db #0x00	; 0
      000172 20                    3757 	.db #0x20	; 32
      000173 40                    3758 	.db #0x40	; 64
      000174 41                    3759 	.db #0x41	; 65	'A'
      000175 3F                    3760 	.db #0x3f	; 63
      000176 01                    3761 	.db #0x01	; 1
      000177 7F                    3762 	.db #0x7f	; 127
      000178 08                    3763 	.db #0x08	; 8
      000179 14                    3764 	.db #0x14	; 20
      00017A 22                    3765 	.db #0x22	; 34
      00017B 41                    3766 	.db #0x41	; 65	'A'
      00017C 7F                    3767 	.db #0x7f	; 127
      00017D 40                    3768 	.db #0x40	; 64
      00017E 40                    3769 	.db #0x40	; 64
      00017F 40                    3770 	.db #0x40	; 64
      000180 40                    3771 	.db #0x40	; 64
      000181 7F                    3772 	.db #0x7f	; 127
      000182 02                    3773 	.db #0x02	; 2
      000183 1C                    3774 	.db #0x1c	; 28
      000184 02                    3775 	.db #0x02	; 2
      000185 7F                    3776 	.db #0x7f	; 127
      000186 7F                    3777 	.db #0x7f	; 127
      000187 04                    3778 	.db #0x04	; 4
      000188 08                    3779 	.db #0x08	; 8
      000189 10                    3780 	.db #0x10	; 16
      00018A 7F                    3781 	.db #0x7f	; 127
      00018B 3E                    3782 	.db #0x3e	; 62
      00018C 41                    3783 	.db #0x41	; 65	'A'
      00018D 41                    3784 	.db #0x41	; 65	'A'
      00018E 41                    3785 	.db #0x41	; 65	'A'
      00018F 3E                    3786 	.db #0x3e	; 62
      000190 7F                    3787 	.db #0x7f	; 127
      000191 09                    3788 	.db #0x09	; 9
      000192 09                    3789 	.db #0x09	; 9
      000193 09                    3790 	.db #0x09	; 9
      000194 06                    3791 	.db #0x06	; 6
      000195 3E                    3792 	.db #0x3e	; 62
      000196 41                    3793 	.db #0x41	; 65	'A'
      000197 51                    3794 	.db #0x51	; 81	'Q'
      000198 21                    3795 	.db #0x21	; 33
      000199 5E                    3796 	.db #0x5e	; 94
      00019A 7F                    3797 	.db #0x7f	; 127
      00019B 09                    3798 	.db #0x09	; 9
      00019C 19                    3799 	.db #0x19	; 25
      00019D 29                    3800 	.db #0x29	; 41
      00019E 46                    3801 	.db #0x46	; 70	'F'
      00019F 26                    3802 	.db #0x26	; 38
      0001A0 49                    3803 	.db #0x49	; 73	'I'
      0001A1 49                    3804 	.db #0x49	; 73	'I'
      0001A2 49                    3805 	.db #0x49	; 73	'I'
      0001A3 32                    3806 	.db #0x32	; 50	'2'
      0001A4 03                    3807 	.db #0x03	; 3
      0001A5 01                    3808 	.db #0x01	; 1
      0001A6 7F                    3809 	.db #0x7f	; 127
      0001A7 01                    3810 	.db #0x01	; 1
      0001A8 03                    3811 	.db #0x03	; 3
      0001A9 3F                    3812 	.db #0x3f	; 63
      0001AA 40                    3813 	.db #0x40	; 64
      0001AB 40                    3814 	.db #0x40	; 64
      0001AC 40                    3815 	.db #0x40	; 64
      0001AD 3F                    3816 	.db #0x3f	; 63
      0001AE 1F                    3817 	.db #0x1f	; 31
      0001AF 20                    3818 	.db #0x20	; 32
      0001B0 40                    3819 	.db #0x40	; 64
      0001B1 20                    3820 	.db #0x20	; 32
      0001B2 1F                    3821 	.db #0x1f	; 31
      0001B3 3F                    3822 	.db #0x3f	; 63
      0001B4 40                    3823 	.db #0x40	; 64
      0001B5 38                    3824 	.db #0x38	; 56	'8'
      0001B6 40                    3825 	.db #0x40	; 64
      0001B7 3F                    3826 	.db #0x3f	; 63
      0001B8 63                    3827 	.db #0x63	; 99	'c'
      0001B9 14                    3828 	.db #0x14	; 20
      0001BA 08                    3829 	.db #0x08	; 8
      0001BB 14                    3830 	.db #0x14	; 20
      0001BC 63                    3831 	.db #0x63	; 99	'c'
      0001BD 03                    3832 	.db #0x03	; 3
      0001BE 04                    3833 	.db #0x04	; 4
      0001BF 78                    3834 	.db #0x78	; 120	'x'
      0001C0 04                    3835 	.db #0x04	; 4
      0001C1 03                    3836 	.db #0x03	; 3
      0001C2 61                    3837 	.db #0x61	; 97	'a'
      0001C3 59                    3838 	.db #0x59	; 89	'Y'
      0001C4 49                    3839 	.db #0x49	; 73	'I'
      0001C5 4D                    3840 	.db #0x4d	; 77	'M'
      0001C6 43                    3841 	.db #0x43	; 67	'C'
      0001C7 00                    3842 	.db #0x00	; 0
      0001C8 7F                    3843 	.db #0x7f	; 127
      0001C9 41                    3844 	.db #0x41	; 65	'A'
      0001CA 41                    3845 	.db #0x41	; 65	'A'
      0001CB 41                    3846 	.db #0x41	; 65	'A'
      0001CC 02                    3847 	.db #0x02	; 2
      0001CD 04                    3848 	.db #0x04	; 4
      0001CE 08                    3849 	.db #0x08	; 8
      0001CF 10                    3850 	.db #0x10	; 16
      0001D0 20                    3851 	.db #0x20	; 32
      0001D1 00                    3852 	.db #0x00	; 0
      0001D2 41                    3853 	.db #0x41	; 65	'A'
      0001D3 41                    3854 	.db #0x41	; 65	'A'
      0001D4 41                    3855 	.db #0x41	; 65	'A'
      0001D5 7F                    3856 	.db #0x7f	; 127
      0001D6 04                    3857 	.db #0x04	; 4
      0001D7 02                    3858 	.db #0x02	; 2
      0001D8 01                    3859 	.db #0x01	; 1
      0001D9 02                    3860 	.db #0x02	; 2
      0001DA 04                    3861 	.db #0x04	; 4
      0001DB 40                    3862 	.db #0x40	; 64
      0001DC 40                    3863 	.db #0x40	; 64
      0001DD 40                    3864 	.db #0x40	; 64
      0001DE 40                    3865 	.db #0x40	; 64
      0001DF 40                    3866 	.db #0x40	; 64
      0001E0 00                    3867 	.db #0x00	; 0
      0001E1 03                    3868 	.db #0x03	; 3
      0001E2 07                    3869 	.db #0x07	; 7
      0001E3 08                    3870 	.db #0x08	; 8
      0001E4 00                    3871 	.db #0x00	; 0
      0001E5 20                    3872 	.db #0x20	; 32
      0001E6 54                    3873 	.db #0x54	; 84	'T'
      0001E7 54                    3874 	.db #0x54	; 84	'T'
      0001E8 78                    3875 	.db #0x78	; 120	'x'
      0001E9 40                    3876 	.db #0x40	; 64
      0001EA 7F                    3877 	.db #0x7f	; 127
      0001EB 28                    3878 	.db #0x28	; 40
      0001EC 44                    3879 	.db #0x44	; 68	'D'
      0001ED 44                    3880 	.db #0x44	; 68	'D'
      0001EE 38                    3881 	.db #0x38	; 56	'8'
      0001EF 38                    3882 	.db #0x38	; 56	'8'
      0001F0 44                    3883 	.db #0x44	; 68	'D'
      0001F1 44                    3884 	.db #0x44	; 68	'D'
      0001F2 44                    3885 	.db #0x44	; 68	'D'
      0001F3 28                    3886 	.db #0x28	; 40
      0001F4 38                    3887 	.db #0x38	; 56	'8'
      0001F5 44                    3888 	.db #0x44	; 68	'D'
      0001F6 44                    3889 	.db #0x44	; 68	'D'
      0001F7 28                    3890 	.db #0x28	; 40
      0001F8 7F                    3891 	.db #0x7f	; 127
      0001F9 38                    3892 	.db #0x38	; 56	'8'
      0001FA 54                    3893 	.db #0x54	; 84	'T'
      0001FB 54                    3894 	.db #0x54	; 84	'T'
      0001FC 54                    3895 	.db #0x54	; 84	'T'
      0001FD 18                    3896 	.db #0x18	; 24
      0001FE 00                    3897 	.db #0x00	; 0
      0001FF 08                    3898 	.db #0x08	; 8
      000200 7E                    3899 	.db #0x7e	; 126
      000201 09                    3900 	.db #0x09	; 9
      000202 02                    3901 	.db #0x02	; 2
      000203 18                    3902 	.db #0x18	; 24
      000204 A4                    3903 	.db #0xa4	; 164
      000205 A4                    3904 	.db #0xa4	; 164
      000206 9C                    3905 	.db #0x9c	; 156
      000207 78                    3906 	.db #0x78	; 120	'x'
      000208 7F                    3907 	.db #0x7f	; 127
      000209 08                    3908 	.db #0x08	; 8
      00020A 04                    3909 	.db #0x04	; 4
      00020B 04                    3910 	.db #0x04	; 4
      00020C 78                    3911 	.db #0x78	; 120	'x'
      00020D 00                    3912 	.db #0x00	; 0
      00020E 44                    3913 	.db #0x44	; 68	'D'
      00020F 7D                    3914 	.db #0x7d	; 125
      000210 40                    3915 	.db #0x40	; 64
      000211 00                    3916 	.db #0x00	; 0
      000212 20                    3917 	.db #0x20	; 32
      000213 40                    3918 	.db #0x40	; 64
      000214 40                    3919 	.db #0x40	; 64
      000215 3D                    3920 	.db #0x3d	; 61
      000216 00                    3921 	.db #0x00	; 0
      000217 7F                    3922 	.db #0x7f	; 127
      000218 10                    3923 	.db #0x10	; 16
      000219 28                    3924 	.db #0x28	; 40
      00021A 44                    3925 	.db #0x44	; 68	'D'
      00021B 00                    3926 	.db #0x00	; 0
      00021C 00                    3927 	.db #0x00	; 0
      00021D 41                    3928 	.db #0x41	; 65	'A'
      00021E 7F                    3929 	.db #0x7f	; 127
      00021F 40                    3930 	.db #0x40	; 64
      000220 00                    3931 	.db #0x00	; 0
      000221 7C                    3932 	.db #0x7c	; 124
      000222 04                    3933 	.db #0x04	; 4
      000223 78                    3934 	.db #0x78	; 120	'x'
      000224 04                    3935 	.db #0x04	; 4
      000225 78                    3936 	.db #0x78	; 120	'x'
      000226 7C                    3937 	.db #0x7c	; 124
      000227 08                    3938 	.db #0x08	; 8
      000228 04                    3939 	.db #0x04	; 4
      000229 04                    3940 	.db #0x04	; 4
      00022A 78                    3941 	.db #0x78	; 120	'x'
      00022B 38                    3942 	.db #0x38	; 56	'8'
      00022C 44                    3943 	.db #0x44	; 68	'D'
      00022D 44                    3944 	.db #0x44	; 68	'D'
      00022E 44                    3945 	.db #0x44	; 68	'D'
      00022F 38                    3946 	.db #0x38	; 56	'8'
      000230 FC                    3947 	.db #0xfc	; 252
      000231 18                    3948 	.db #0x18	; 24
      000232 24                    3949 	.db #0x24	; 36
      000233 24                    3950 	.db #0x24	; 36
      000234 18                    3951 	.db #0x18	; 24
      000235 18                    3952 	.db #0x18	; 24
      000236 24                    3953 	.db #0x24	; 36
      000237 24                    3954 	.db #0x24	; 36
      000238 18                    3955 	.db #0x18	; 24
      000239 FC                    3956 	.db #0xfc	; 252
      00023A 7C                    3957 	.db #0x7c	; 124
      00023B 08                    3958 	.db #0x08	; 8
      00023C 04                    3959 	.db #0x04	; 4
      00023D 04                    3960 	.db #0x04	; 4
      00023E 08                    3961 	.db #0x08	; 8
      00023F 48                    3962 	.db #0x48	; 72	'H'
      000240 54                    3963 	.db #0x54	; 84	'T'
      000241 54                    3964 	.db #0x54	; 84	'T'
      000242 54                    3965 	.db #0x54	; 84	'T'
      000243 24                    3966 	.db #0x24	; 36
      000244 04                    3967 	.db #0x04	; 4
      000245 04                    3968 	.db #0x04	; 4
      000246 3F                    3969 	.db #0x3f	; 63
      000247 44                    3970 	.db #0x44	; 68	'D'
      000248 24                    3971 	.db #0x24	; 36
      000249 3C                    3972 	.db #0x3c	; 60
      00024A 40                    3973 	.db #0x40	; 64
      00024B 40                    3974 	.db #0x40	; 64
      00024C 20                    3975 	.db #0x20	; 32
      00024D 7C                    3976 	.db #0x7c	; 124
      00024E 1C                    3977 	.db #0x1c	; 28
      00024F 20                    3978 	.db #0x20	; 32
      000250 40                    3979 	.db #0x40	; 64
      000251 20                    3980 	.db #0x20	; 32
      000252 1C                    3981 	.db #0x1c	; 28
      000253 3C                    3982 	.db #0x3c	; 60
      000254 40                    3983 	.db #0x40	; 64
      000255 30                    3984 	.db #0x30	; 48	'0'
      000256 40                    3985 	.db #0x40	; 64
      000257 3C                    3986 	.db #0x3c	; 60
      000258 44                    3987 	.db #0x44	; 68	'D'
      000259 28                    3988 	.db #0x28	; 40
      00025A 10                    3989 	.db #0x10	; 16
      00025B 28                    3990 	.db #0x28	; 40
      00025C 44                    3991 	.db #0x44	; 68	'D'
      00025D 4C                    3992 	.db #0x4c	; 76	'L'
      00025E 90                    3993 	.db #0x90	; 144
      00025F 90                    3994 	.db #0x90	; 144
      000260 90                    3995 	.db #0x90	; 144
      000261 7C                    3996 	.db #0x7c	; 124
      000262 44                    3997 	.db #0x44	; 68	'D'
      000263 64                    3998 	.db #0x64	; 100	'd'
      000264 54                    3999 	.db #0x54	; 84	'T'
      000265 4C                    4000 	.db #0x4c	; 76	'L'
      000266 44                    4001 	.db #0x44	; 68	'D'
      000267 00                    4002 	.db #0x00	; 0
      000268 08                    4003 	.db #0x08	; 8
      000269 36                    4004 	.db #0x36	; 54	'6'
      00026A 41                    4005 	.db #0x41	; 65	'A'
      00026B 00                    4006 	.db #0x00	; 0
      00026C 00                    4007 	.db #0x00	; 0
      00026D 00                    4008 	.db #0x00	; 0
      00026E 77                    4009 	.db #0x77	; 119	'w'
      00026F 00                    4010 	.db #0x00	; 0
      000270 00                    4011 	.db #0x00	; 0
      000271 00                    4012 	.db #0x00	; 0
      000272 41                    4013 	.db #0x41	; 65	'A'
      000273 36                    4014 	.db #0x36	; 54	'6'
      000274 08                    4015 	.db #0x08	; 8
      000275 00                    4016 	.db #0x00	; 0
      000276 02                    4017 	.db #0x02	; 2
      000277 01                    4018 	.db #0x01	; 1
      000278 02                    4019 	.db #0x02	; 2
      000279 04                    4020 	.db #0x04	; 4
      00027A 02                    4021 	.db #0x02	; 2
      00027B 3C                    4022 	.db #0x3c	; 60
      00027C 26                    4023 	.db #0x26	; 38
      00027D 23                    4024 	.db #0x23	; 35
      00027E 26                    4025 	.db #0x26	; 38
      00027F 3C                    4026 	.db #0x3c	; 60
      000280 1E                    4027 	.db #0x1e	; 30
      000281 A1                    4028 	.db #0xa1	; 161
      000282 A1                    4029 	.db #0xa1	; 161
      000283 61                    4030 	.db #0x61	; 97	'a'
      000284 12                    4031 	.db #0x12	; 18
      000285 3A                    4032 	.db #0x3a	; 58
      000286 40                    4033 	.db #0x40	; 64
      000287 40                    4034 	.db #0x40	; 64
      000288 20                    4035 	.db #0x20	; 32
      000289 7A                    4036 	.db #0x7a	; 122	'z'
      00028A 38                    4037 	.db #0x38	; 56	'8'
      00028B 54                    4038 	.db #0x54	; 84	'T'
      00028C 54                    4039 	.db #0x54	; 84	'T'
      00028D 55                    4040 	.db #0x55	; 85	'U'
      00028E 59                    4041 	.db #0x59	; 89	'Y'
      00028F 21                    4042 	.db #0x21	; 33
      000290 55                    4043 	.db #0x55	; 85	'U'
      000291 55                    4044 	.db #0x55	; 85	'U'
      000292 79                    4045 	.db #0x79	; 121	'y'
      000293 41                    4046 	.db #0x41	; 65	'A'
      000294 22                    4047 	.db #0x22	; 34
      000295 54                    4048 	.db #0x54	; 84	'T'
      000296 54                    4049 	.db #0x54	; 84	'T'
      000297 78                    4050 	.db #0x78	; 120	'x'
      000298 42                    4051 	.db #0x42	; 66	'B'
      000299 21                    4052 	.db #0x21	; 33
      00029A 55                    4053 	.db #0x55	; 85	'U'
      00029B 54                    4054 	.db #0x54	; 84	'T'
      00029C 78                    4055 	.db #0x78	; 120	'x'
      00029D 40                    4056 	.db #0x40	; 64
      00029E 20                    4057 	.db #0x20	; 32
      00029F 54                    4058 	.db #0x54	; 84	'T'
      0002A0 55                    4059 	.db #0x55	; 85	'U'
      0002A1 79                    4060 	.db #0x79	; 121	'y'
      0002A2 40                    4061 	.db #0x40	; 64
      0002A3 0C                    4062 	.db #0x0c	; 12
      0002A4 1E                    4063 	.db #0x1e	; 30
      0002A5 52                    4064 	.db #0x52	; 82	'R'
      0002A6 72                    4065 	.db #0x72	; 114	'r'
      0002A7 12                    4066 	.db #0x12	; 18
      0002A8 39                    4067 	.db #0x39	; 57	'9'
      0002A9 55                    4068 	.db #0x55	; 85	'U'
      0002AA 55                    4069 	.db #0x55	; 85	'U'
      0002AB 55                    4070 	.db #0x55	; 85	'U'
      0002AC 59                    4071 	.db #0x59	; 89	'Y'
      0002AD 39                    4072 	.db #0x39	; 57	'9'
      0002AE 54                    4073 	.db #0x54	; 84	'T'
      0002AF 54                    4074 	.db #0x54	; 84	'T'
      0002B0 54                    4075 	.db #0x54	; 84	'T'
      0002B1 59                    4076 	.db #0x59	; 89	'Y'
      0002B2 39                    4077 	.db #0x39	; 57	'9'
      0002B3 55                    4078 	.db #0x55	; 85	'U'
      0002B4 54                    4079 	.db #0x54	; 84	'T'
      0002B5 54                    4080 	.db #0x54	; 84	'T'
      0002B6 58                    4081 	.db #0x58	; 88	'X'
      0002B7 00                    4082 	.db #0x00	; 0
      0002B8 00                    4083 	.db #0x00	; 0
      0002B9 45                    4084 	.db #0x45	; 69	'E'
      0002BA 7C                    4085 	.db #0x7c	; 124
      0002BB 41                    4086 	.db #0x41	; 65	'A'
      0002BC 00                    4087 	.db #0x00	; 0
      0002BD 02                    4088 	.db #0x02	; 2
      0002BE 45                    4089 	.db #0x45	; 69	'E'
      0002BF 7D                    4090 	.db #0x7d	; 125
      0002C0 42                    4091 	.db #0x42	; 66	'B'
      0002C1 00                    4092 	.db #0x00	; 0
      0002C2 01                    4093 	.db #0x01	; 1
      0002C3 45                    4094 	.db #0x45	; 69	'E'
      0002C4 7C                    4095 	.db #0x7c	; 124
      0002C5 40                    4096 	.db #0x40	; 64
      0002C6 7D                    4097 	.db #0x7d	; 125
      0002C7 12                    4098 	.db #0x12	; 18
      0002C8 11                    4099 	.db #0x11	; 17
      0002C9 12                    4100 	.db #0x12	; 18
      0002CA 7D                    4101 	.db #0x7d	; 125
      0002CB F0                    4102 	.db #0xf0	; 240
      0002CC 28                    4103 	.db #0x28	; 40
      0002CD 25                    4104 	.db #0x25	; 37
      0002CE 28                    4105 	.db #0x28	; 40
      0002CF F0                    4106 	.db #0xf0	; 240
      0002D0 7C                    4107 	.db #0x7c	; 124
      0002D1 54                    4108 	.db #0x54	; 84	'T'
      0002D2 55                    4109 	.db #0x55	; 85	'U'
      0002D3 45                    4110 	.db #0x45	; 69	'E'
      0002D4 00                    4111 	.db #0x00	; 0
      0002D5 20                    4112 	.db #0x20	; 32
      0002D6 54                    4113 	.db #0x54	; 84	'T'
      0002D7 54                    4114 	.db #0x54	; 84	'T'
      0002D8 7C                    4115 	.db #0x7c	; 124
      0002D9 54                    4116 	.db #0x54	; 84	'T'
      0002DA 7C                    4117 	.db #0x7c	; 124
      0002DB 0A                    4118 	.db #0x0a	; 10
      0002DC 09                    4119 	.db #0x09	; 9
      0002DD 7F                    4120 	.db #0x7f	; 127
      0002DE 49                    4121 	.db #0x49	; 73	'I'
      0002DF 32                    4122 	.db #0x32	; 50	'2'
      0002E0 49                    4123 	.db #0x49	; 73	'I'
      0002E1 49                    4124 	.db #0x49	; 73	'I'
      0002E2 49                    4125 	.db #0x49	; 73	'I'
      0002E3 32                    4126 	.db #0x32	; 50	'2'
      0002E4 3A                    4127 	.db #0x3a	; 58
      0002E5 44                    4128 	.db #0x44	; 68	'D'
      0002E6 44                    4129 	.db #0x44	; 68	'D'
      0002E7 44                    4130 	.db #0x44	; 68	'D'
      0002E8 3A                    4131 	.db #0x3a	; 58
      0002E9 32                    4132 	.db #0x32	; 50	'2'
      0002EA 4A                    4133 	.db #0x4a	; 74	'J'
      0002EB 48                    4134 	.db #0x48	; 72	'H'
      0002EC 48                    4135 	.db #0x48	; 72	'H'
      0002ED 30                    4136 	.db #0x30	; 48	'0'
      0002EE 3A                    4137 	.db #0x3a	; 58
      0002EF 41                    4138 	.db #0x41	; 65	'A'
      0002F0 41                    4139 	.db #0x41	; 65	'A'
      0002F1 21                    4140 	.db #0x21	; 33
      0002F2 7A                    4141 	.db #0x7a	; 122	'z'
      0002F3 3A                    4142 	.db #0x3a	; 58
      0002F4 42                    4143 	.db #0x42	; 66	'B'
      0002F5 40                    4144 	.db #0x40	; 64
      0002F6 20                    4145 	.db #0x20	; 32
      0002F7 78                    4146 	.db #0x78	; 120	'x'
      0002F8 00                    4147 	.db #0x00	; 0
      0002F9 9D                    4148 	.db #0x9d	; 157
      0002FA A0                    4149 	.db #0xa0	; 160
      0002FB A0                    4150 	.db #0xa0	; 160
      0002FC 7D                    4151 	.db #0x7d	; 125
      0002FD 3D                    4152 	.db #0x3d	; 61
      0002FE 42                    4153 	.db #0x42	; 66	'B'
      0002FF 42                    4154 	.db #0x42	; 66	'B'
      000300 42                    4155 	.db #0x42	; 66	'B'
      000301 3D                    4156 	.db #0x3d	; 61
      000302 3D                    4157 	.db #0x3d	; 61
      000303 40                    4158 	.db #0x40	; 64
      000304 40                    4159 	.db #0x40	; 64
      000305 40                    4160 	.db #0x40	; 64
      000306 3D                    4161 	.db #0x3d	; 61
      000307 3C                    4162 	.db #0x3c	; 60
      000308 24                    4163 	.db #0x24	; 36
      000309 FF                    4164 	.db #0xff	; 255
      00030A 24                    4165 	.db #0x24	; 36
      00030B 24                    4166 	.db #0x24	; 36
      00030C 48                    4167 	.db #0x48	; 72	'H'
      00030D 7E                    4168 	.db #0x7e	; 126
      00030E 49                    4169 	.db #0x49	; 73	'I'
      00030F 43                    4170 	.db #0x43	; 67	'C'
      000310 66                    4171 	.db #0x66	; 102	'f'
      000311 2B                    4172 	.db #0x2b	; 43
      000312 2F                    4173 	.db #0x2f	; 47
      000313 FC                    4174 	.db #0xfc	; 252
      000314 2F                    4175 	.db #0x2f	; 47
      000315 2B                    4176 	.db #0x2b	; 43
      000316 FF                    4177 	.db #0xff	; 255
      000317 09                    4178 	.db #0x09	; 9
      000318 29                    4179 	.db #0x29	; 41
      000319 F6                    4180 	.db #0xf6	; 246
      00031A 20                    4181 	.db #0x20	; 32
      00031B C0                    4182 	.db #0xc0	; 192
      00031C 88                    4183 	.db #0x88	; 136
      00031D 7E                    4184 	.db #0x7e	; 126
      00031E 09                    4185 	.db #0x09	; 9
      00031F 03                    4186 	.db #0x03	; 3
      000320 20                    4187 	.db #0x20	; 32
      000321 54                    4188 	.db #0x54	; 84	'T'
      000322 54                    4189 	.db #0x54	; 84	'T'
      000323 79                    4190 	.db #0x79	; 121	'y'
      000324 41                    4191 	.db #0x41	; 65	'A'
      000325 00                    4192 	.db #0x00	; 0
      000326 00                    4193 	.db #0x00	; 0
      000327 44                    4194 	.db #0x44	; 68	'D'
      000328 7D                    4195 	.db #0x7d	; 125
      000329 41                    4196 	.db #0x41	; 65	'A'
      00032A 30                    4197 	.db #0x30	; 48	'0'
      00032B 48                    4198 	.db #0x48	; 72	'H'
      00032C 48                    4199 	.db #0x48	; 72	'H'
      00032D 4A                    4200 	.db #0x4a	; 74	'J'
      00032E 32                    4201 	.db #0x32	; 50	'2'
      00032F 38                    4202 	.db #0x38	; 56	'8'
      000330 40                    4203 	.db #0x40	; 64
      000331 40                    4204 	.db #0x40	; 64
      000332 22                    4205 	.db #0x22	; 34
      000333 7A                    4206 	.db #0x7a	; 122	'z'
      000334 00                    4207 	.db #0x00	; 0
      000335 7A                    4208 	.db #0x7a	; 122	'z'
      000336 0A                    4209 	.db #0x0a	; 10
      000337 0A                    4210 	.db #0x0a	; 10
      000338 72                    4211 	.db #0x72	; 114	'r'
      000339 7D                    4212 	.db #0x7d	; 125
      00033A 0D                    4213 	.db #0x0d	; 13
      00033B 19                    4214 	.db #0x19	; 25
      00033C 31                    4215 	.db #0x31	; 49	'1'
      00033D 7D                    4216 	.db #0x7d	; 125
      00033E 26                    4217 	.db #0x26	; 38
      00033F 29                    4218 	.db #0x29	; 41
      000340 29                    4219 	.db #0x29	; 41
      000341 2F                    4220 	.db #0x2f	; 47
      000342 28                    4221 	.db #0x28	; 40
      000343 26                    4222 	.db #0x26	; 38
      000344 29                    4223 	.db #0x29	; 41
      000345 29                    4224 	.db #0x29	; 41
      000346 29                    4225 	.db #0x29	; 41
      000347 26                    4226 	.db #0x26	; 38
      000348 30                    4227 	.db #0x30	; 48	'0'
      000349 48                    4228 	.db #0x48	; 72	'H'
      00034A 4D                    4229 	.db #0x4d	; 77	'M'
      00034B 40                    4230 	.db #0x40	; 64
      00034C 20                    4231 	.db #0x20	; 32
      00034D 38                    4232 	.db #0x38	; 56	'8'
      00034E 08                    4233 	.db #0x08	; 8
      00034F 08                    4234 	.db #0x08	; 8
      000350 08                    4235 	.db #0x08	; 8
      000351 08                    4236 	.db #0x08	; 8
      000352 08                    4237 	.db #0x08	; 8
      000353 08                    4238 	.db #0x08	; 8
      000354 08                    4239 	.db #0x08	; 8
      000355 08                    4240 	.db #0x08	; 8
      000356 38                    4241 	.db #0x38	; 56	'8'
      000357 2F                    4242 	.db #0x2f	; 47
      000358 10                    4243 	.db #0x10	; 16
      000359 C8                    4244 	.db #0xc8	; 200
      00035A AC                    4245 	.db #0xac	; 172
      00035B BA                    4246 	.db #0xba	; 186
      00035C 2F                    4247 	.db #0x2f	; 47
      00035D 10                    4248 	.db #0x10	; 16
      00035E 28                    4249 	.db #0x28	; 40
      00035F 34                    4250 	.db #0x34	; 52	'4'
      000360 FA                    4251 	.db #0xfa	; 250
      000361 00                    4252 	.db #0x00	; 0
      000362 00                    4253 	.db #0x00	; 0
      000363 7B                    4254 	.db #0x7b	; 123
      000364 00                    4255 	.db #0x00	; 0
      000365 00                    4256 	.db #0x00	; 0
      000366 08                    4257 	.db #0x08	; 8
      000367 14                    4258 	.db #0x14	; 20
      000368 2A                    4259 	.db #0x2a	; 42
      000369 14                    4260 	.db #0x14	; 20
      00036A 22                    4261 	.db #0x22	; 34
      00036B 22                    4262 	.db #0x22	; 34
      00036C 14                    4263 	.db #0x14	; 20
      00036D 2A                    4264 	.db #0x2a	; 42
      00036E 14                    4265 	.db #0x14	; 20
      00036F 08                    4266 	.db #0x08	; 8
      000370 AA                    4267 	.db #0xaa	; 170
      000371 00                    4268 	.db #0x00	; 0
      000372 55                    4269 	.db #0x55	; 85	'U'
      000373 00                    4270 	.db #0x00	; 0
      000374 AA                    4271 	.db #0xaa	; 170
      000375 AA                    4272 	.db #0xaa	; 170
      000376 55                    4273 	.db #0x55	; 85	'U'
      000377 AA                    4274 	.db #0xaa	; 170
      000378 55                    4275 	.db #0x55	; 85	'U'
      000379 AA                    4276 	.db #0xaa	; 170
      00037A 00                    4277 	.db #0x00	; 0
      00037B 00                    4278 	.db #0x00	; 0
      00037C 00                    4279 	.db #0x00	; 0
      00037D FF                    4280 	.db #0xff	; 255
      00037E 00                    4281 	.db #0x00	; 0
      00037F 10                    4282 	.db #0x10	; 16
      000380 10                    4283 	.db #0x10	; 16
      000381 10                    4284 	.db #0x10	; 16
      000382 FF                    4285 	.db #0xff	; 255
      000383 00                    4286 	.db #0x00	; 0
      000384 14                    4287 	.db #0x14	; 20
      000385 14                    4288 	.db #0x14	; 20
      000386 14                    4289 	.db #0x14	; 20
      000387 FF                    4290 	.db #0xff	; 255
      000388 00                    4291 	.db #0x00	; 0
      000389 10                    4292 	.db #0x10	; 16
      00038A 10                    4293 	.db #0x10	; 16
      00038B FF                    4294 	.db #0xff	; 255
      00038C 00                    4295 	.db #0x00	; 0
      00038D FF                    4296 	.db #0xff	; 255
      00038E 10                    4297 	.db #0x10	; 16
      00038F 10                    4298 	.db #0x10	; 16
      000390 F0                    4299 	.db #0xf0	; 240
      000391 10                    4300 	.db #0x10	; 16
      000392 F0                    4301 	.db #0xf0	; 240
      000393 14                    4302 	.db #0x14	; 20
      000394 14                    4303 	.db #0x14	; 20
      000395 14                    4304 	.db #0x14	; 20
      000396 FC                    4305 	.db #0xfc	; 252
      000397 00                    4306 	.db #0x00	; 0
      000398 14                    4307 	.db #0x14	; 20
      000399 14                    4308 	.db #0x14	; 20
      00039A F7                    4309 	.db #0xf7	; 247
      00039B 00                    4310 	.db #0x00	; 0
      00039C FF                    4311 	.db #0xff	; 255
      00039D 00                    4312 	.db #0x00	; 0
      00039E 00                    4313 	.db #0x00	; 0
      00039F FF                    4314 	.db #0xff	; 255
      0003A0 00                    4315 	.db #0x00	; 0
      0003A1 FF                    4316 	.db #0xff	; 255
      0003A2 14                    4317 	.db #0x14	; 20
      0003A3 14                    4318 	.db #0x14	; 20
      0003A4 F4                    4319 	.db #0xf4	; 244
      0003A5 04                    4320 	.db #0x04	; 4
      0003A6 FC                    4321 	.db #0xfc	; 252
      0003A7 14                    4322 	.db #0x14	; 20
      0003A8 14                    4323 	.db #0x14	; 20
      0003A9 17                    4324 	.db #0x17	; 23
      0003AA 10                    4325 	.db #0x10	; 16
      0003AB 1F                    4326 	.db #0x1f	; 31
      0003AC 10                    4327 	.db #0x10	; 16
      0003AD 10                    4328 	.db #0x10	; 16
      0003AE 1F                    4329 	.db #0x1f	; 31
      0003AF 10                    4330 	.db #0x10	; 16
      0003B0 1F                    4331 	.db #0x1f	; 31
      0003B1 14                    4332 	.db #0x14	; 20
      0003B2 14                    4333 	.db #0x14	; 20
      0003B3 14                    4334 	.db #0x14	; 20
      0003B4 1F                    4335 	.db #0x1f	; 31
      0003B5 00                    4336 	.db #0x00	; 0
      0003B6 10                    4337 	.db #0x10	; 16
      0003B7 10                    4338 	.db #0x10	; 16
      0003B8 10                    4339 	.db #0x10	; 16
      0003B9 F0                    4340 	.db #0xf0	; 240
      0003BA 00                    4341 	.db #0x00	; 0
      0003BB 00                    4342 	.db #0x00	; 0
      0003BC 00                    4343 	.db #0x00	; 0
      0003BD 00                    4344 	.db #0x00	; 0
      0003BE 1F                    4345 	.db #0x1f	; 31
      0003BF 10                    4346 	.db #0x10	; 16
      0003C0 10                    4347 	.db #0x10	; 16
      0003C1 10                    4348 	.db #0x10	; 16
      0003C2 10                    4349 	.db #0x10	; 16
      0003C3 1F                    4350 	.db #0x1f	; 31
      0003C4 10                    4351 	.db #0x10	; 16
      0003C5 10                    4352 	.db #0x10	; 16
      0003C6 10                    4353 	.db #0x10	; 16
      0003C7 10                    4354 	.db #0x10	; 16
      0003C8 F0                    4355 	.db #0xf0	; 240
      0003C9 10                    4356 	.db #0x10	; 16
      0003CA 00                    4357 	.db #0x00	; 0
      0003CB 00                    4358 	.db #0x00	; 0
      0003CC 00                    4359 	.db #0x00	; 0
      0003CD FF                    4360 	.db #0xff	; 255
      0003CE 10                    4361 	.db #0x10	; 16
      0003CF 10                    4362 	.db #0x10	; 16
      0003D0 10                    4363 	.db #0x10	; 16
      0003D1 10                    4364 	.db #0x10	; 16
      0003D2 10                    4365 	.db #0x10	; 16
      0003D3 10                    4366 	.db #0x10	; 16
      0003D4 10                    4367 	.db #0x10	; 16
      0003D5 10                    4368 	.db #0x10	; 16
      0003D6 10                    4369 	.db #0x10	; 16
      0003D7 FF                    4370 	.db #0xff	; 255
      0003D8 10                    4371 	.db #0x10	; 16
      0003D9 00                    4372 	.db #0x00	; 0
      0003DA 00                    4373 	.db #0x00	; 0
      0003DB 00                    4374 	.db #0x00	; 0
      0003DC FF                    4375 	.db #0xff	; 255
      0003DD 14                    4376 	.db #0x14	; 20
      0003DE 00                    4377 	.db #0x00	; 0
      0003DF 00                    4378 	.db #0x00	; 0
      0003E0 FF                    4379 	.db #0xff	; 255
      0003E1 00                    4380 	.db #0x00	; 0
      0003E2 FF                    4381 	.db #0xff	; 255
      0003E3 00                    4382 	.db #0x00	; 0
      0003E4 00                    4383 	.db #0x00	; 0
      0003E5 1F                    4384 	.db #0x1f	; 31
      0003E6 10                    4385 	.db #0x10	; 16
      0003E7 17                    4386 	.db #0x17	; 23
      0003E8 00                    4387 	.db #0x00	; 0
      0003E9 00                    4388 	.db #0x00	; 0
      0003EA FC                    4389 	.db #0xfc	; 252
      0003EB 04                    4390 	.db #0x04	; 4
      0003EC F4                    4391 	.db #0xf4	; 244
      0003ED 14                    4392 	.db #0x14	; 20
      0003EE 14                    4393 	.db #0x14	; 20
      0003EF 17                    4394 	.db #0x17	; 23
      0003F0 10                    4395 	.db #0x10	; 16
      0003F1 17                    4396 	.db #0x17	; 23
      0003F2 14                    4397 	.db #0x14	; 20
      0003F3 14                    4398 	.db #0x14	; 20
      0003F4 F4                    4399 	.db #0xf4	; 244
      0003F5 04                    4400 	.db #0x04	; 4
      0003F6 F4                    4401 	.db #0xf4	; 244
      0003F7 00                    4402 	.db #0x00	; 0
      0003F8 00                    4403 	.db #0x00	; 0
      0003F9 FF                    4404 	.db #0xff	; 255
      0003FA 00                    4405 	.db #0x00	; 0
      0003FB F7                    4406 	.db #0xf7	; 247
      0003FC 14                    4407 	.db #0x14	; 20
      0003FD 14                    4408 	.db #0x14	; 20
      0003FE 14                    4409 	.db #0x14	; 20
      0003FF 14                    4410 	.db #0x14	; 20
      000400 14                    4411 	.db #0x14	; 20
      000401 14                    4412 	.db #0x14	; 20
      000402 14                    4413 	.db #0x14	; 20
      000403 F7                    4414 	.db #0xf7	; 247
      000404 00                    4415 	.db #0x00	; 0
      000405 F7                    4416 	.db #0xf7	; 247
      000406 14                    4417 	.db #0x14	; 20
      000407 14                    4418 	.db #0x14	; 20
      000408 14                    4419 	.db #0x14	; 20
      000409 17                    4420 	.db #0x17	; 23
      00040A 14                    4421 	.db #0x14	; 20
      00040B 10                    4422 	.db #0x10	; 16
      00040C 10                    4423 	.db #0x10	; 16
      00040D 1F                    4424 	.db #0x1f	; 31
      00040E 10                    4425 	.db #0x10	; 16
      00040F 1F                    4426 	.db #0x1f	; 31
      000410 14                    4427 	.db #0x14	; 20
      000411 14                    4428 	.db #0x14	; 20
      000412 14                    4429 	.db #0x14	; 20
      000413 F4                    4430 	.db #0xf4	; 244
      000414 14                    4431 	.db #0x14	; 20
      000415 10                    4432 	.db #0x10	; 16
      000416 10                    4433 	.db #0x10	; 16
      000417 F0                    4434 	.db #0xf0	; 240
      000418 10                    4435 	.db #0x10	; 16
      000419 F0                    4436 	.db #0xf0	; 240
      00041A 00                    4437 	.db #0x00	; 0
      00041B 00                    4438 	.db #0x00	; 0
      00041C 1F                    4439 	.db #0x1f	; 31
      00041D 10                    4440 	.db #0x10	; 16
      00041E 1F                    4441 	.db #0x1f	; 31
      00041F 00                    4442 	.db #0x00	; 0
      000420 00                    4443 	.db #0x00	; 0
      000421 00                    4444 	.db #0x00	; 0
      000422 1F                    4445 	.db #0x1f	; 31
      000423 14                    4446 	.db #0x14	; 20
      000424 00                    4447 	.db #0x00	; 0
      000425 00                    4448 	.db #0x00	; 0
      000426 00                    4449 	.db #0x00	; 0
      000427 FC                    4450 	.db #0xfc	; 252
      000428 14                    4451 	.db #0x14	; 20
      000429 00                    4452 	.db #0x00	; 0
      00042A 00                    4453 	.db #0x00	; 0
      00042B F0                    4454 	.db #0xf0	; 240
      00042C 10                    4455 	.db #0x10	; 16
      00042D F0                    4456 	.db #0xf0	; 240
      00042E 10                    4457 	.db #0x10	; 16
      00042F 10                    4458 	.db #0x10	; 16
      000430 FF                    4459 	.db #0xff	; 255
      000431 10                    4460 	.db #0x10	; 16
      000432 FF                    4461 	.db #0xff	; 255
      000433 14                    4462 	.db #0x14	; 20
      000434 14                    4463 	.db #0x14	; 20
      000435 14                    4464 	.db #0x14	; 20
      000436 FF                    4465 	.db #0xff	; 255
      000437 14                    4466 	.db #0x14	; 20
      000438 10                    4467 	.db #0x10	; 16
      000439 10                    4468 	.db #0x10	; 16
      00043A 10                    4469 	.db #0x10	; 16
      00043B 1F                    4470 	.db #0x1f	; 31
      00043C 00                    4471 	.db #0x00	; 0
      00043D 00                    4472 	.db #0x00	; 0
      00043E 00                    4473 	.db #0x00	; 0
      00043F 00                    4474 	.db #0x00	; 0
      000440 F0                    4475 	.db #0xf0	; 240
      000441 10                    4476 	.db #0x10	; 16
      000442 FF                    4477 	.db #0xff	; 255
      000443 FF                    4478 	.db #0xff	; 255
      000444 FF                    4479 	.db #0xff	; 255
      000445 FF                    4480 	.db #0xff	; 255
      000446 FF                    4481 	.db #0xff	; 255
      000447 F0                    4482 	.db #0xf0	; 240
      000448 F0                    4483 	.db #0xf0	; 240
      000449 F0                    4484 	.db #0xf0	; 240
      00044A F0                    4485 	.db #0xf0	; 240
      00044B F0                    4486 	.db #0xf0	; 240
      00044C FF                    4487 	.db #0xff	; 255
      00044D FF                    4488 	.db #0xff	; 255
      00044E FF                    4489 	.db #0xff	; 255
      00044F 00                    4490 	.db #0x00	; 0
      000450 00                    4491 	.db #0x00	; 0
      000451 00                    4492 	.db #0x00	; 0
      000452 00                    4493 	.db #0x00	; 0
      000453 00                    4494 	.db #0x00	; 0
      000454 FF                    4495 	.db #0xff	; 255
      000455 FF                    4496 	.db #0xff	; 255
      000456 0F                    4497 	.db #0x0f	; 15
      000457 0F                    4498 	.db #0x0f	; 15
      000458 0F                    4499 	.db #0x0f	; 15
      000459 0F                    4500 	.db #0x0f	; 15
      00045A 0F                    4501 	.db #0x0f	; 15
      00045B 38                    4502 	.db #0x38	; 56	'8'
      00045C 44                    4503 	.db #0x44	; 68	'D'
      00045D 44                    4504 	.db #0x44	; 68	'D'
      00045E 38                    4505 	.db #0x38	; 56	'8'
      00045F 44                    4506 	.db #0x44	; 68	'D'
      000460 FC                    4507 	.db #0xfc	; 252
      000461 4A                    4508 	.db #0x4a	; 74	'J'
      000462 4A                    4509 	.db #0x4a	; 74	'J'
      000463 4A                    4510 	.db #0x4a	; 74	'J'
      000464 34                    4511 	.db #0x34	; 52	'4'
      000465 7E                    4512 	.db #0x7e	; 126
      000466 02                    4513 	.db #0x02	; 2
      000467 02                    4514 	.db #0x02	; 2
      000468 06                    4515 	.db #0x06	; 6
      000469 06                    4516 	.db #0x06	; 6
      00046A 02                    4517 	.db #0x02	; 2
      00046B 7E                    4518 	.db #0x7e	; 126
      00046C 02                    4519 	.db #0x02	; 2
      00046D 7E                    4520 	.db #0x7e	; 126
      00046E 02                    4521 	.db #0x02	; 2
      00046F 63                    4522 	.db #0x63	; 99	'c'
      000470 55                    4523 	.db #0x55	; 85	'U'
      000471 49                    4524 	.db #0x49	; 73	'I'
      000472 41                    4525 	.db #0x41	; 65	'A'
      000473 63                    4526 	.db #0x63	; 99	'c'
      000474 38                    4527 	.db #0x38	; 56	'8'
      000475 44                    4528 	.db #0x44	; 68	'D'
      000476 44                    4529 	.db #0x44	; 68	'D'
      000477 3C                    4530 	.db #0x3c	; 60
      000478 04                    4531 	.db #0x04	; 4
      000479 40                    4532 	.db #0x40	; 64
      00047A 7E                    4533 	.db #0x7e	; 126
      00047B 20                    4534 	.db #0x20	; 32
      00047C 1E                    4535 	.db #0x1e	; 30
      00047D 20                    4536 	.db #0x20	; 32
      00047E 06                    4537 	.db #0x06	; 6
      00047F 02                    4538 	.db #0x02	; 2
      000480 7E                    4539 	.db #0x7e	; 126
      000481 02                    4540 	.db #0x02	; 2
      000482 02                    4541 	.db #0x02	; 2
      000483 99                    4542 	.db #0x99	; 153
      000484 A5                    4543 	.db #0xa5	; 165
      000485 E7                    4544 	.db #0xe7	; 231
      000486 A5                    4545 	.db #0xa5	; 165
      000487 99                    4546 	.db #0x99	; 153
      000488 1C                    4547 	.db #0x1c	; 28
      000489 2A                    4548 	.db #0x2a	; 42
      00048A 49                    4549 	.db #0x49	; 73	'I'
      00048B 2A                    4550 	.db #0x2a	; 42
      00048C 1C                    4551 	.db #0x1c	; 28
      00048D 4C                    4552 	.db #0x4c	; 76	'L'
      00048E 72                    4553 	.db #0x72	; 114	'r'
      00048F 01                    4554 	.db #0x01	; 1
      000490 72                    4555 	.db #0x72	; 114	'r'
      000491 4C                    4556 	.db #0x4c	; 76	'L'
      000492 30                    4557 	.db #0x30	; 48	'0'
      000493 4A                    4558 	.db #0x4a	; 74	'J'
      000494 4D                    4559 	.db #0x4d	; 77	'M'
      000495 4D                    4560 	.db #0x4d	; 77	'M'
      000496 30                    4561 	.db #0x30	; 48	'0'
      000497 30                    4562 	.db #0x30	; 48	'0'
      000498 48                    4563 	.db #0x48	; 72	'H'
      000499 78                    4564 	.db #0x78	; 120	'x'
      00049A 48                    4565 	.db #0x48	; 72	'H'
      00049B 30                    4566 	.db #0x30	; 48	'0'
      00049C BC                    4567 	.db #0xbc	; 188
      00049D 62                    4568 	.db #0x62	; 98	'b'
      00049E 5A                    4569 	.db #0x5a	; 90	'Z'
      00049F 46                    4570 	.db #0x46	; 70	'F'
      0004A0 3D                    4571 	.db #0x3d	; 61
      0004A1 3E                    4572 	.db #0x3e	; 62
      0004A2 49                    4573 	.db #0x49	; 73	'I'
      0004A3 49                    4574 	.db #0x49	; 73	'I'
      0004A4 49                    4575 	.db #0x49	; 73	'I'
      0004A5 00                    4576 	.db #0x00	; 0
      0004A6 7E                    4577 	.db #0x7e	; 126
      0004A7 01                    4578 	.db #0x01	; 1
      0004A8 01                    4579 	.db #0x01	; 1
      0004A9 01                    4580 	.db #0x01	; 1
      0004AA 7E                    4581 	.db #0x7e	; 126
      0004AB 2A                    4582 	.db #0x2a	; 42
      0004AC 2A                    4583 	.db #0x2a	; 42
      0004AD 2A                    4584 	.db #0x2a	; 42
      0004AE 2A                    4585 	.db #0x2a	; 42
      0004AF 2A                    4586 	.db #0x2a	; 42
      0004B0 44                    4587 	.db #0x44	; 68	'D'
      0004B1 44                    4588 	.db #0x44	; 68	'D'
      0004B2 5F                    4589 	.db #0x5f	; 95
      0004B3 44                    4590 	.db #0x44	; 68	'D'
      0004B4 44                    4591 	.db #0x44	; 68	'D'
      0004B5 40                    4592 	.db #0x40	; 64
      0004B6 51                    4593 	.db #0x51	; 81	'Q'
      0004B7 4A                    4594 	.db #0x4a	; 74	'J'
      0004B8 44                    4595 	.db #0x44	; 68	'D'
      0004B9 40                    4596 	.db #0x40	; 64
      0004BA 40                    4597 	.db #0x40	; 64
      0004BB 44                    4598 	.db #0x44	; 68	'D'
      0004BC 4A                    4599 	.db #0x4a	; 74	'J'
      0004BD 51                    4600 	.db #0x51	; 81	'Q'
      0004BE 40                    4601 	.db #0x40	; 64
      0004BF 00                    4602 	.db #0x00	; 0
      0004C0 00                    4603 	.db #0x00	; 0
      0004C1 FF                    4604 	.db #0xff	; 255
      0004C2 01                    4605 	.db #0x01	; 1
      0004C3 03                    4606 	.db #0x03	; 3
      0004C4 E0                    4607 	.db #0xe0	; 224
      0004C5 80                    4608 	.db #0x80	; 128
      0004C6 FF                    4609 	.db #0xff	; 255
      0004C7 00                    4610 	.db #0x00	; 0
      0004C8 00                    4611 	.db #0x00	; 0
      0004C9 08                    4612 	.db #0x08	; 8
      0004CA 08                    4613 	.db #0x08	; 8
      0004CB 6B                    4614 	.db #0x6b	; 107	'k'
      0004CC 6B                    4615 	.db #0x6b	; 107	'k'
      0004CD 08                    4616 	.db #0x08	; 8
      0004CE 36                    4617 	.db #0x36	; 54	'6'
      0004CF 12                    4618 	.db #0x12	; 18
      0004D0 36                    4619 	.db #0x36	; 54	'6'
      0004D1 24                    4620 	.db #0x24	; 36
      0004D2 36                    4621 	.db #0x36	; 54	'6'
      0004D3 06                    4622 	.db #0x06	; 6
      0004D4 0F                    4623 	.db #0x0f	; 15
      0004D5 09                    4624 	.db #0x09	; 9
      0004D6 0F                    4625 	.db #0x0f	; 15
      0004D7 06                    4626 	.db #0x06	; 6
      0004D8 00                    4627 	.db #0x00	; 0
      0004D9 00                    4628 	.db #0x00	; 0
      0004DA 18                    4629 	.db #0x18	; 24
      0004DB 18                    4630 	.db #0x18	; 24
      0004DC 00                    4631 	.db #0x00	; 0
      0004DD 00                    4632 	.db #0x00	; 0
      0004DE 00                    4633 	.db #0x00	; 0
      0004DF 10                    4634 	.db #0x10	; 16
      0004E0 10                    4635 	.db #0x10	; 16
      0004E1 00                    4636 	.db #0x00	; 0
      0004E2 30                    4637 	.db #0x30	; 48	'0'
      0004E3 40                    4638 	.db #0x40	; 64
      0004E4 FF                    4639 	.db #0xff	; 255
      0004E5 01                    4640 	.db #0x01	; 1
      0004E6 01                    4641 	.db #0x01	; 1
      0004E7 00                    4642 	.db #0x00	; 0
      0004E8 1F                    4643 	.db #0x1f	; 31
      0004E9 01                    4644 	.db #0x01	; 1
      0004EA 01                    4645 	.db #0x01	; 1
      0004EB 1E                    4646 	.db #0x1e	; 30
      0004EC 00                    4647 	.db #0x00	; 0
      0004ED 19                    4648 	.db #0x19	; 25
      0004EE 1D                    4649 	.db #0x1d	; 29
      0004EF 17                    4650 	.db #0x17	; 23
      0004F0 12                    4651 	.db #0x12	; 18
      0004F1 00                    4652 	.db #0x00	; 0
      0004F2 3C                    4653 	.db #0x3c	; 60
      0004F3 3C                    4654 	.db #0x3c	; 60
      0004F4 3C                    4655 	.db #0x3c	; 60
      0004F5 3C                    4656 	.db #0x3c	; 60
      0004F6 00                    4657 	.db #0x00	; 0
      0004F7 00                    4658 	.db #0x00	; 0
      0004F8 00                    4659 	.db #0x00	; 0
      0004F9 00                    4660 	.db #0x00	; 0
      0004FA 00                    4661 	.db #0x00	; 0
                                   4662 	.area CONST   (CODE)
      0004FB                       4663 ___str_0:
      0004FB 57 65 6C 63 6F 6D 65  4664 	.ascii "Welcome"
      000502 0A                    4665 	.db 0x0a
      000503 00                    4666 	.db 0x00
                                   4667 	.area CSEG    (CODE)
                                   4668 	.area CONST   (CODE)
      000504                       4669 ___str_1:
      000504 45 43 45 4E 2D 34 33  4670 	.ascii "ECEN-4330"
             33 30
      00050D 0A                    4671 	.db 0x0a
      00050E 00                    4672 	.db 0x00
                                   4673 	.area CSEG    (CODE)
                                   4674 	.area CONST   (CODE)
      00050F                       4675 ___str_2:
      00050F 52 6F 74 61 74 69 6F  4676 	.ascii "Rotation 0"
             6E 20 30
      000519 00                    4677 	.db 0x00
                                   4678 	.area CSEG    (CODE)
                                   4679 	.area CONST   (CODE)
      00051A                       4680 ___str_3:
      00051A 52 6F 74 61 74 69 6F  4681 	.ascii "Rotation 1"
             6E 20 31
      000524 00                    4682 	.db 0x00
                                   4683 	.area CSEG    (CODE)
                                   4684 	.area CONST   (CODE)
      000525                       4685 ___str_4:
      000525 52 6F 74 61 74 69 6F  4686 	.ascii "Rotation 2"
             6E 20 32
      00052F 00                    4687 	.db 0x00
                                   4688 	.area CSEG    (CODE)
                                   4689 	.area CONST   (CODE)
      000530                       4690 ___str_5:
      000530 52 6F 74 61 74 69 6F  4691 	.ascii "Rotation 3"
             6E 20 33
      00053A 00                    4692 	.db 0x00
                                   4693 	.area CSEG    (CODE)
                                   4694 	.area CONST   (CODE)
      00053B                       4695 ___str_6:
      00053B 46 72 65 65 20 54 79  4696 	.ascii "Free Type: "
             70 65 3A 20
      000546 0A                    4697 	.db 0x0a
      000547 00                    4698 	.db 0x00
                                   4699 	.area CSEG    (CODE)
                                   4700 	.area XINIT   (CODE)
                                   4701 	.area CABS    (ABS,CODE)
